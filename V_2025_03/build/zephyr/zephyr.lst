
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	a8 12 01 20 ed a4 01 00 cd 80 03 00 a5 a4 01 00     ... ............
   10010:	a5 a4 01 00 a5 a4 01 00 a5 a4 01 00 a5 a4 01 00     ................
	...
   1002c:	f5 94 01 00 a5 a4 01 00 00 00 00 00 91 94 01 00     ................
   1003c:	a5 a4 01 00                                         ....

00010040 <_irq_vector_table>:
   10040:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10050:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10060:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10070:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10080:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10090:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   100a0:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   100b0:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   100c0:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   100d0:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   100e0:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   100f0:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10100:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10110:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10120:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10130:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10140:	8d 95 01 00 8d 95 01 00 8d 95 01 00 8d 95 01 00     ................
   10150:	8d 95 01 00                                         ....

Disassembly of section text:

00010158 <__aeabi_uldivmod>:
   10158:	b953      	cbnz	r3, 10170 <__aeabi_uldivmod+0x18>
   1015a:	b94a      	cbnz	r2, 10170 <__aeabi_uldivmod+0x18>
   1015c:	2900      	cmp	r1, #0
   1015e:	bf08      	it	eq
   10160:	2800      	cmpeq	r0, #0
   10162:	bf1c      	itt	ne
   10164:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10168:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1016c:	f000 b80c 	b.w	10188 <__aeabi_idiv0>
   10170:	f1ad 0c08 	sub.w	ip, sp, #8
   10174:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10178:	f000 f808 	bl	1018c <__udivmoddi4>
   1017c:	f8dd e004 	ldr.w	lr, [sp, #4]
   10180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10184:	b004      	add	sp, #16
   10186:	4770      	bx	lr

00010188 <__aeabi_idiv0>:
   10188:	4770      	bx	lr
   1018a:	bf00      	nop

0001018c <__udivmoddi4>:
   1018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10190:	4686      	mov	lr, r0
   10192:	468c      	mov	ip, r1
   10194:	4608      	mov	r0, r1
   10196:	9e08      	ldr	r6, [sp, #32]
   10198:	4615      	mov	r5, r2
   1019a:	4674      	mov	r4, lr
   1019c:	4619      	mov	r1, r3
   1019e:	2b00      	cmp	r3, #0
   101a0:	f040 80c1 	bne.w	10326 <__udivmoddi4+0x19a>
   101a4:	4285      	cmp	r5, r0
   101a6:	fab2 f282 	clz	r2, r2
   101aa:	d945      	bls.n	10238 <__udivmoddi4+0xac>
   101ac:	b14a      	cbz	r2, 101c2 <__udivmoddi4+0x36>
   101ae:	f1c2 0320 	rsb	r3, r2, #32
   101b2:	fa00 fc02 	lsl.w	ip, r0, r2
   101b6:	4095      	lsls	r5, r2
   101b8:	4094      	lsls	r4, r2
   101ba:	fa2e f303 	lsr.w	r3, lr, r3
   101be:	ea43 0c0c 	orr.w	ip, r3, ip
   101c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   101c6:	b2a8      	uxth	r0, r5
   101c8:	0c23      	lsrs	r3, r4, #16
   101ca:	fbbc f8fe 	udiv	r8, ip, lr
   101ce:	fb0e cc18 	mls	ip, lr, r8, ip
   101d2:	fb08 f900 	mul.w	r9, r8, r0
   101d6:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   101da:	4599      	cmp	r9, r3
   101dc:	d928      	bls.n	10230 <__udivmoddi4+0xa4>
   101de:	18eb      	adds	r3, r5, r3
   101e0:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   101e4:	d204      	bcs.n	101f0 <__udivmoddi4+0x64>
   101e6:	4599      	cmp	r9, r3
   101e8:	d902      	bls.n	101f0 <__udivmoddi4+0x64>
   101ea:	f1a8 0702 	sub.w	r7, r8, #2
   101ee:	442b      	add	r3, r5
   101f0:	eba3 0309 	sub.w	r3, r3, r9
   101f4:	b2a4      	uxth	r4, r4
   101f6:	fbb3 fcfe 	udiv	ip, r3, lr
   101fa:	fb0e 331c 	mls	r3, lr, ip, r3
   101fe:	fb0c f000 	mul.w	r0, ip, r0
   10202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10206:	42a0      	cmp	r0, r4
   10208:	d914      	bls.n	10234 <__udivmoddi4+0xa8>
   1020a:	192c      	adds	r4, r5, r4
   1020c:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   10210:	d204      	bcs.n	1021c <__udivmoddi4+0x90>
   10212:	42a0      	cmp	r0, r4
   10214:	d902      	bls.n	1021c <__udivmoddi4+0x90>
   10216:	f1ac 0302 	sub.w	r3, ip, #2
   1021a:	442c      	add	r4, r5
   1021c:	1a24      	subs	r4, r4, r0
   1021e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
   10222:	b11e      	cbz	r6, 1022c <__udivmoddi4+0xa0>
   10224:	40d4      	lsrs	r4, r2
   10226:	2300      	movs	r3, #0
   10228:	6034      	str	r4, [r6, #0]
   1022a:	6073      	str	r3, [r6, #4]
   1022c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10230:	4647      	mov	r7, r8
   10232:	e7dd      	b.n	101f0 <__udivmoddi4+0x64>
   10234:	4663      	mov	r3, ip
   10236:	e7f1      	b.n	1021c <__udivmoddi4+0x90>
   10238:	bb92      	cbnz	r2, 102a0 <__udivmoddi4+0x114>
   1023a:	1b43      	subs	r3, r0, r5
   1023c:	2101      	movs	r1, #1
   1023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   10242:	b2af      	uxth	r7, r5
   10244:	0c20      	lsrs	r0, r4, #16
   10246:	fbb3 fcfe 	udiv	ip, r3, lr
   1024a:	fb0e 331c 	mls	r3, lr, ip, r3
   1024e:	fb0c f807 	mul.w	r8, ip, r7
   10252:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   10256:	4598      	cmp	r8, r3
   10258:	d961      	bls.n	1031e <__udivmoddi4+0x192>
   1025a:	18eb      	adds	r3, r5, r3
   1025c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   10260:	d204      	bcs.n	1026c <__udivmoddi4+0xe0>
   10262:	4598      	cmp	r8, r3
   10264:	d902      	bls.n	1026c <__udivmoddi4+0xe0>
   10266:	f1ac 0002 	sub.w	r0, ip, #2
   1026a:	442b      	add	r3, r5
   1026c:	eba3 0308 	sub.w	r3, r3, r8
   10270:	b2a4      	uxth	r4, r4
   10272:	fbb3 fcfe 	udiv	ip, r3, lr
   10276:	fb0e 331c 	mls	r3, lr, ip, r3
   1027a:	fb0c f707 	mul.w	r7, ip, r7
   1027e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   10282:	42a7      	cmp	r7, r4
   10284:	d94d      	bls.n	10322 <__udivmoddi4+0x196>
   10286:	192c      	adds	r4, r5, r4
   10288:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   1028c:	d204      	bcs.n	10298 <__udivmoddi4+0x10c>
   1028e:	42a7      	cmp	r7, r4
   10290:	d902      	bls.n	10298 <__udivmoddi4+0x10c>
   10292:	f1ac 0302 	sub.w	r3, ip, #2
   10296:	442c      	add	r4, r5
   10298:	1be4      	subs	r4, r4, r7
   1029a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1029e:	e7c0      	b.n	10222 <__udivmoddi4+0x96>
   102a0:	f1c2 0320 	rsb	r3, r2, #32
   102a4:	4095      	lsls	r5, r2
   102a6:	4094      	lsls	r4, r2
   102a8:	fa20 f103 	lsr.w	r1, r0, r3
   102ac:	fa2e f303 	lsr.w	r3, lr, r3
   102b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   102b4:	4090      	lsls	r0, r2
   102b6:	b2af      	uxth	r7, r5
   102b8:	4303      	orrs	r3, r0
   102ba:	fbb1 fcfe 	udiv	ip, r1, lr
   102be:	fb0e 101c 	mls	r0, lr, ip, r1
   102c2:	0c19      	lsrs	r1, r3, #16
   102c4:	fb0c f807 	mul.w	r8, ip, r7
   102c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   102cc:	4588      	cmp	r8, r1
   102ce:	d922      	bls.n	10316 <__udivmoddi4+0x18a>
   102d0:	1869      	adds	r1, r5, r1
   102d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   102d6:	d204      	bcs.n	102e2 <__udivmoddi4+0x156>
   102d8:	4588      	cmp	r8, r1
   102da:	d902      	bls.n	102e2 <__udivmoddi4+0x156>
   102dc:	f1ac 0002 	sub.w	r0, ip, #2
   102e0:	4429      	add	r1, r5
   102e2:	eba1 0108 	sub.w	r1, r1, r8
   102e6:	b29b      	uxth	r3, r3
   102e8:	fbb1 fcfe 	udiv	ip, r1, lr
   102ec:	fb0e 111c 	mls	r1, lr, ip, r1
   102f0:	fb0c f707 	mul.w	r7, ip, r7
   102f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   102f8:	429f      	cmp	r7, r3
   102fa:	d90e      	bls.n	1031a <__udivmoddi4+0x18e>
   102fc:	18eb      	adds	r3, r5, r3
   102fe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   10302:	d204      	bcs.n	1030e <__udivmoddi4+0x182>
   10304:	429f      	cmp	r7, r3
   10306:	d902      	bls.n	1030e <__udivmoddi4+0x182>
   10308:	f1ac 0102 	sub.w	r1, ip, #2
   1030c:	442b      	add	r3, r5
   1030e:	1bdb      	subs	r3, r3, r7
   10310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   10314:	e793      	b.n	1023e <__udivmoddi4+0xb2>
   10316:	4660      	mov	r0, ip
   10318:	e7e3      	b.n	102e2 <__udivmoddi4+0x156>
   1031a:	4661      	mov	r1, ip
   1031c:	e7f7      	b.n	1030e <__udivmoddi4+0x182>
   1031e:	4660      	mov	r0, ip
   10320:	e7a4      	b.n	1026c <__udivmoddi4+0xe0>
   10322:	4663      	mov	r3, ip
   10324:	e7b8      	b.n	10298 <__udivmoddi4+0x10c>
   10326:	4283      	cmp	r3, r0
   10328:	d906      	bls.n	10338 <__udivmoddi4+0x1ac>
   1032a:	b916      	cbnz	r6, 10332 <__udivmoddi4+0x1a6>
   1032c:	2100      	movs	r1, #0
   1032e:	4608      	mov	r0, r1
   10330:	e77c      	b.n	1022c <__udivmoddi4+0xa0>
   10332:	e9c6 e000 	strd	lr, r0, [r6]
   10336:	e7f9      	b.n	1032c <__udivmoddi4+0x1a0>
   10338:	fab3 f783 	clz	r7, r3
   1033c:	b98f      	cbnz	r7, 10362 <__udivmoddi4+0x1d6>
   1033e:	4283      	cmp	r3, r0
   10340:	d301      	bcc.n	10346 <__udivmoddi4+0x1ba>
   10342:	4572      	cmp	r2, lr
   10344:	d808      	bhi.n	10358 <__udivmoddi4+0x1cc>
   10346:	ebbe 0402 	subs.w	r4, lr, r2
   1034a:	eb60 0303 	sbc.w	r3, r0, r3
   1034e:	2001      	movs	r0, #1
   10350:	469c      	mov	ip, r3
   10352:	b91e      	cbnz	r6, 1035c <__udivmoddi4+0x1d0>
   10354:	2100      	movs	r1, #0
   10356:	e769      	b.n	1022c <__udivmoddi4+0xa0>
   10358:	4638      	mov	r0, r7
   1035a:	e7fa      	b.n	10352 <__udivmoddi4+0x1c6>
   1035c:	e9c6 4c00 	strd	r4, ip, [r6]
   10360:	e7f8      	b.n	10354 <__udivmoddi4+0x1c8>
   10362:	f1c7 0c20 	rsb	ip, r7, #32
   10366:	40bb      	lsls	r3, r7
   10368:	fa0e f507 	lsl.w	r5, lr, r7
   1036c:	fa22 f40c 	lsr.w	r4, r2, ip
   10370:	fa2e f10c 	lsr.w	r1, lr, ip
   10374:	40ba      	lsls	r2, r7
   10376:	431c      	orrs	r4, r3
   10378:	fa20 f30c 	lsr.w	r3, r0, ip
   1037c:	40b8      	lsls	r0, r7
   1037e:	ea4f 4914 	mov.w	r9, r4, lsr #16
   10382:	4301      	orrs	r1, r0
   10384:	fa1f fe84 	uxth.w	lr, r4
   10388:	fbb3 f8f9 	udiv	r8, r3, r9
   1038c:	fb09 3018 	mls	r0, r9, r8, r3
   10390:	0c0b      	lsrs	r3, r1, #16
   10392:	fb08 fa0e 	mul.w	sl, r8, lr
   10396:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   1039a:	459a      	cmp	sl, r3
   1039c:	d940      	bls.n	10420 <__udivmoddi4+0x294>
   1039e:	18e3      	adds	r3, r4, r3
   103a0:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   103a4:	d204      	bcs.n	103b0 <__udivmoddi4+0x224>
   103a6:	459a      	cmp	sl, r3
   103a8:	d902      	bls.n	103b0 <__udivmoddi4+0x224>
   103aa:	f1a8 0002 	sub.w	r0, r8, #2
   103ae:	4423      	add	r3, r4
   103b0:	eba3 030a 	sub.w	r3, r3, sl
   103b4:	b289      	uxth	r1, r1
   103b6:	fbb3 f8f9 	udiv	r8, r3, r9
   103ba:	fb09 3318 	mls	r3, r9, r8, r3
   103be:	fb08 fe0e 	mul.w	lr, r8, lr
   103c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   103c6:	458e      	cmp	lr, r1
   103c8:	d92c      	bls.n	10424 <__udivmoddi4+0x298>
   103ca:	1861      	adds	r1, r4, r1
   103cc:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   103d0:	d204      	bcs.n	103dc <__udivmoddi4+0x250>
   103d2:	458e      	cmp	lr, r1
   103d4:	d902      	bls.n	103dc <__udivmoddi4+0x250>
   103d6:	f1a8 0302 	sub.w	r3, r8, #2
   103da:	4421      	add	r1, r4
   103dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   103e0:	eba1 010e 	sub.w	r1, r1, lr
   103e4:	fba0 9802 	umull	r9, r8, r0, r2
   103e8:	4541      	cmp	r1, r8
   103ea:	46ce      	mov	lr, r9
   103ec:	4643      	mov	r3, r8
   103ee:	d302      	bcc.n	103f6 <__udivmoddi4+0x26a>
   103f0:	d106      	bne.n	10400 <__udivmoddi4+0x274>
   103f2:	454d      	cmp	r5, r9
   103f4:	d204      	bcs.n	10400 <__udivmoddi4+0x274>
   103f6:	3801      	subs	r0, #1
   103f8:	ebb9 0e02 	subs.w	lr, r9, r2
   103fc:	eb68 0304 	sbc.w	r3, r8, r4
   10400:	2e00      	cmp	r6, #0
   10402:	d0a7      	beq.n	10354 <__udivmoddi4+0x1c8>
   10404:	ebb5 020e 	subs.w	r2, r5, lr
   10408:	eb61 0103 	sbc.w	r1, r1, r3
   1040c:	fa01 fc0c 	lsl.w	ip, r1, ip
   10410:	fa22 f307 	lsr.w	r3, r2, r7
   10414:	40f9      	lsrs	r1, r7
   10416:	ea4c 0303 	orr.w	r3, ip, r3
   1041a:	e9c6 3100 	strd	r3, r1, [r6]
   1041e:	e799      	b.n	10354 <__udivmoddi4+0x1c8>
   10420:	4640      	mov	r0, r8
   10422:	e7c5      	b.n	103b0 <__udivmoddi4+0x224>
   10424:	4643      	mov	r3, r8
   10426:	e7d9      	b.n	103dc <__udivmoddi4+0x250>

00010428 <set_event_mask>:
	return 0;
}
#endif /* !defined(CONFIG_BT_BREDR) */

static int set_event_mask(void)
{
   10428:	b510      	push	{r4, lr}
	struct bt_hci_cp_set_event_mask *ev;
	struct net_buf *buf;
	uint64_t mask = 0U;

	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1042a:	2108      	movs	r1, #8
   1042c:	f640 4001 	movw	r0, #3073	; 0xc01
   10430:	f00c f83c 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   10434:	b1d8      	cbz	r0, 1046e <set_event_mask+0x46>
   10436:	4604      	mov	r4, r0
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
   10438:	2108      	movs	r1, #8
   1043a:	300c      	adds	r0, #12
   1043c:	f019 fa50 	bl	298e0 <net_buf_simple_add>
   10440:	4602      	mov	r2, r0
		mask |= BT_EVT_MASK_DISCONN_COMPLETE;
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
	}

	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
   10442:	4b0f      	ldr	r3, [pc, #60]	; (10480 <set_event_mask+0x58>)
   10444:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   10448:	f013 0f01 	tst.w	r3, #1
   1044c:	d10b      	bne.n	10466 <set_event_mask+0x3e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
   1044e:	480d      	ldr	r0, [pc, #52]	; (10484 <set_event_mask+0x5c>)
   10450:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
		mask |= BT_EVT_MASK_ENCRYPT_CHANGE;
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
	}

	sys_put_le64(mask, ev->events);
   10454:	f028 f8f8 	bl	38648 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   10458:	2200      	movs	r2, #0
   1045a:	4621      	mov	r1, r4
   1045c:	f640 4001 	movw	r0, #3073	; 0xc01
   10460:	f00c f876 	bl	1c550 <bt_hci_cmd_send_sync>
}
   10464:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
   10466:	a104      	add	r1, pc, #16	; (adr r1, 10478 <set_event_mask+0x50>)
   10468:	e9d1 0100 	ldrd	r0, r1, [r1]
   1046c:	e7f2      	b.n	10454 <set_event_mask+0x2c>
		return -ENOBUFS;
   1046e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10472:	e7f7      	b.n	10464 <set_event_mask+0x3c>
   10474:	f3af 8000 	nop.w
   10478:	02008890 	.word	0x02008890
   1047c:	20008000 	.word	0x20008000
   10480:	20008000 	.word	0x20008000
   10484:	02008810 	.word	0x02008810

00010488 <spim_event_handler>:
bool ADS1298_receive_data();
ADS1298_data_t ADS1298_convert_data();

void spim_event_handler(nrfx_spim_evt_t const *p_event, void *p_context) 
{
    switch (p_event->type)
   10488:	7803      	ldrb	r3, [r0, #0]
   1048a:	b93b      	cbnz	r3, 1049c <spim_event_handler+0x14>
    {
    case NRFX_SPIM_EVENT_DONE:
        if(state == receive_data) {
   1048c:	4b06      	ldr	r3, [pc, #24]	; (104a8 <spim_event_handler+0x20>)
   1048e:	781b      	ldrb	r3, [r3, #0]
   10490:	b2db      	uxtb	r3, r3
   10492:	2b02      	cmp	r3, #2
   10494:	d003      	beq.n	1049e <spim_event_handler+0x16>
            new_data_available = true;
        } 
        state = idle;
   10496:	4b04      	ldr	r3, [pc, #16]	; (104a8 <spim_event_handler+0x20>)
   10498:	2200      	movs	r2, #0
   1049a:	701a      	strb	r2, [r3, #0]
        break;
    default:
        break;
    }
    return;
}
   1049c:	4770      	bx	lr
            new_data_available = true;
   1049e:	4b03      	ldr	r3, [pc, #12]	; (104ac <spim_event_handler+0x24>)
   104a0:	2201      	movs	r2, #1
   104a2:	701a      	strb	r2, [r3, #0]
   104a4:	e7f7      	b.n	10496 <spim_event_handler+0xe>
   104a6:	bf00      	nop
   104a8:	2000caa9 	.word	0x2000caa9
   104ac:	2000caa8 	.word	0x2000caa8

000104b0 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   104b0:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   104b2:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
   104b4:	6846      	ldr	r6, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   104b6:	6904      	ldr	r4, [r0, #16]
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   104b8:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
   104bc:	d132      	bne.n	10524 <z_impl_gpio_pin_configure+0x74>
   104be:	4613      	mov	r3, r2
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   104c0:	f002 0230 	and.w	r2, r2, #48	; 0x30
   104c4:	2a30      	cmp	r2, #48	; 0x30
   104c6:	d03d      	beq.n	10544 <z_impl_gpio_pin_configure+0x94>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   104c8:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   104cc:	2a02      	cmp	r2, #2
   104ce:	d049      	beq.n	10564 <z_impl_gpio_pin_configure+0xb4>
		 "Output needs to be enabled for 'Open Drain', 'Open Source' "
		 "mode to be supported");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   104d0:	f003 0206 	and.w	r2, r3, #6
   104d4:	2a04      	cmp	r2, #4
   104d6:	d055      	beq.n	10584 <z_impl_gpio_pin_configure+0xd4>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   104d8:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   104dc:	d002      	beq.n	104e4 <z_impl_gpio_pin_configure+0x34>
   104de:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   104e2:	d05c      	beq.n	1059e <z_impl_gpio_pin_configure+0xee>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   104e4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   104e8:	d069      	beq.n	105be <z_impl_gpio_pin_configure+0x10e>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   104ea:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   104ee:	d005      	beq.n	104fc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   104f0:	b122      	cbz	r2, 104fc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   104f2:	f013 0f01 	tst.w	r3, #1
   104f6:	d001      	beq.n	104fc <z_impl_gpio_pin_configure+0x4c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   104f8:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   104fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10500:	6836      	ldr	r6, [r6, #0]
   10502:	f04f 0c01 	mov.w	ip, #1
   10506:	fa0c fc01 	lsl.w	ip, ip, r1
   1050a:	ea16 0f0c 	tst.w	r6, ip
   1050e:	d066      	beq.n	105de <z_impl_gpio_pin_configure+0x12e>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   10510:	f013 0f01 	tst.w	r3, #1
   10514:	d073      	beq.n	105fe <z_impl_gpio_pin_configure+0x14e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   10516:	6823      	ldr	r3, [r4, #0]
   10518:	ea4c 0303 	orr.w	r3, ip, r3
   1051c:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   1051e:	682b      	ldr	r3, [r5, #0]
   10520:	4798      	blx	r3
}
   10522:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   10524:	4c38      	ldr	r4, [pc, #224]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   10526:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   1052a:	4622      	mov	r2, r4
   1052c:	4937      	ldr	r1, [pc, #220]	; (1060c <z_impl_gpio_pin_configure+0x15c>)
   1052e:	4838      	ldr	r0, [pc, #224]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   10530:	f025 feb0 	bl	36294 <assert_print>
   10534:	4837      	ldr	r0, [pc, #220]	; (10614 <z_impl_gpio_pin_configure+0x164>)
   10536:	f025 fead 	bl	36294 <assert_print>
   1053a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   1053e:	4620      	mov	r0, r4
   10540:	f025 fea1 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   10544:	4c30      	ldr	r4, [pc, #192]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   10546:	f240 23b7 	movw	r3, #695	; 0x2b7
   1054a:	4622      	mov	r2, r4
   1054c:	4932      	ldr	r1, [pc, #200]	; (10618 <z_impl_gpio_pin_configure+0x168>)
   1054e:	4830      	ldr	r0, [pc, #192]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   10550:	f025 fea0 	bl	36294 <assert_print>
   10554:	4831      	ldr	r0, [pc, #196]	; (1061c <z_impl_gpio_pin_configure+0x16c>)
   10556:	f025 fe9d 	bl	36294 <assert_print>
   1055a:	f240 21b7 	movw	r1, #695	; 0x2b7
   1055e:	4620      	mov	r0, r4
   10560:	f025 fe91 	bl	36286 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   10564:	4c28      	ldr	r4, [pc, #160]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   10566:	f240 23bb 	movw	r3, #699	; 0x2bb
   1056a:	4622      	mov	r2, r4
   1056c:	492c      	ldr	r1, [pc, #176]	; (10620 <z_impl_gpio_pin_configure+0x170>)
   1056e:	4828      	ldr	r0, [pc, #160]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   10570:	f025 fe90 	bl	36294 <assert_print>
   10574:	482b      	ldr	r0, [pc, #172]	; (10624 <z_impl_gpio_pin_configure+0x174>)
   10576:	f025 fe8d 	bl	36294 <assert_print>
   1057a:	f240 21bb 	movw	r1, #699	; 0x2bb
   1057e:	4620      	mov	r0, r4
   10580:	f025 fe81 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   10584:	4c20      	ldr	r4, [pc, #128]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   10586:	f240 23bf 	movw	r3, #703	; 0x2bf
   1058a:	4622      	mov	r2, r4
   1058c:	4926      	ldr	r1, [pc, #152]	; (10628 <z_impl_gpio_pin_configure+0x178>)
   1058e:	4820      	ldr	r0, [pc, #128]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   10590:	f025 fe80 	bl	36294 <assert_print>
   10594:	f240 21bf 	movw	r1, #703	; 0x2bf
   10598:	4620      	mov	r0, r4
   1059a:	f025 fe74 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1059e:	4c1a      	ldr	r4, [pc, #104]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   105a0:	f240 23c2 	movw	r3, #706	; 0x2c2
   105a4:	4622      	mov	r2, r4
   105a6:	4921      	ldr	r1, [pc, #132]	; (1062c <z_impl_gpio_pin_configure+0x17c>)
   105a8:	4819      	ldr	r0, [pc, #100]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   105aa:	f025 fe73 	bl	36294 <assert_print>
   105ae:	4820      	ldr	r0, [pc, #128]	; (10630 <z_impl_gpio_pin_configure+0x180>)
   105b0:	f025 fe70 	bl	36294 <assert_print>
   105b4:	f240 21c2 	movw	r1, #706	; 0x2c2
   105b8:	4620      	mov	r0, r4
   105ba:	f025 fe64 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   105be:	4c12      	ldr	r4, [pc, #72]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   105c0:	f240 23c6 	movw	r3, #710	; 0x2c6
   105c4:	4622      	mov	r2, r4
   105c6:	491b      	ldr	r1, [pc, #108]	; (10634 <z_impl_gpio_pin_configure+0x184>)
   105c8:	4811      	ldr	r0, [pc, #68]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   105ca:	f025 fe63 	bl	36294 <assert_print>
   105ce:	481a      	ldr	r0, [pc, #104]	; (10638 <z_impl_gpio_pin_configure+0x188>)
   105d0:	f025 fe60 	bl	36294 <assert_print>
   105d4:	f240 21c6 	movw	r1, #710	; 0x2c6
   105d8:	4620      	mov	r0, r4
   105da:	f025 fe54 	bl	36286 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   105de:	4c0a      	ldr	r4, [pc, #40]	; (10608 <z_impl_gpio_pin_configure+0x158>)
   105e0:	f240 23d2 	movw	r3, #722	; 0x2d2
   105e4:	4622      	mov	r2, r4
   105e6:	4915      	ldr	r1, [pc, #84]	; (1063c <z_impl_gpio_pin_configure+0x18c>)
   105e8:	4809      	ldr	r0, [pc, #36]	; (10610 <z_impl_gpio_pin_configure+0x160>)
   105ea:	f025 fe53 	bl	36294 <assert_print>
   105ee:	4814      	ldr	r0, [pc, #80]	; (10640 <z_impl_gpio_pin_configure+0x190>)
   105f0:	f025 fe50 	bl	36294 <assert_print>
   105f4:	f240 21d2 	movw	r1, #722	; 0x2d2
   105f8:	4620      	mov	r0, r4
   105fa:	f025 fe44 	bl	36286 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   105fe:	6823      	ldr	r3, [r4, #0]
   10600:	ea23 030c 	bic.w	r3, r3, ip
   10604:	6023      	str	r3, [r4, #0]
   10606:	e78a      	b.n	1051e <z_impl_gpio_pin_configure+0x6e>
   10608:	0003f6b8 	.word	0x0003f6b8
   1060c:	0003f760 	.word	0x0003f760
   10610:	0003f72c 	.word	0x0003f72c
   10614:	0003f7c0 	.word	0x0003f7c0
   10618:	0003f7e4 	.word	0x0003f7e4
   1061c:	0003f820 	.word	0x0003f820
   10620:	0003f860 	.word	0x0003f860
   10624:	0003f898 	.word	0x0003f898
   10628:	0003f8ec 	.word	0x0003f8ec
   1062c:	0003f920 	.word	0x0003f920
   10630:	0003f968 	.word	0x0003f968
   10634:	0003f9a4 	.word	0x0003f9a4
   10638:	0003f9e8 	.word	0x0003f9e8
   1063c:	0003f6ec 	.word	0x0003f6ec
   10640:	0003f74c 	.word	0x0003f74c

00010644 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   10644:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
   10646:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	int ret;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10648:	681c      	ldr	r4, [r3, #0]
   1064a:	2301      	movs	r3, #1
   1064c:	fa03 f101 	lsl.w	r1, r3, r1
   10650:	420c      	tst	r4, r1
   10652:	d004      	beq.n	1065e <gpio_pin_set_raw+0x1a>
		 "Unsupported pin");

	if (value != 0)	{
   10654:	b19a      	cbz	r2, 1067e <gpio_pin_set_raw+0x3a>
	const struct gpio_driver_api *api =
   10656:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   10658:	68db      	ldr	r3, [r3, #12]
   1065a:	4798      	blx	r3
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   1065c:	bd10      	pop	{r4, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1065e:	4c0a      	ldr	r4, [pc, #40]	; (10688 <gpio_pin_set_raw+0x44>)
   10660:	f240 5314 	movw	r3, #1300	; 0x514
   10664:	4622      	mov	r2, r4
   10666:	4909      	ldr	r1, [pc, #36]	; (1068c <gpio_pin_set_raw+0x48>)
   10668:	4809      	ldr	r0, [pc, #36]	; (10690 <gpio_pin_set_raw+0x4c>)
   1066a:	f025 fe13 	bl	36294 <assert_print>
   1066e:	4809      	ldr	r0, [pc, #36]	; (10694 <gpio_pin_set_raw+0x50>)
   10670:	f025 fe10 	bl	36294 <assert_print>
   10674:	f240 5114 	movw	r1, #1300	; 0x514
   10678:	4620      	mov	r0, r4
   1067a:	f025 fe04 	bl	36286 <assert_post_action>
	const struct gpio_driver_api *api =
   1067e:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   10680:	691b      	ldr	r3, [r3, #16]
   10682:	4798      	blx	r3
	return ret;
   10684:	e7ea      	b.n	1065c <gpio_pin_set_raw+0x18>
   10686:	bf00      	nop
   10688:	0003f6b8 	.word	0x0003f6b8
   1068c:	0003f6ec 	.word	0x0003f6ec
   10690:	0003f72c 	.word	0x0003f72c
   10694:	0003f74c 	.word	0x0003f74c

00010698 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   10698:	b538      	push	{r3, r4, r5, lr}
	__unused const struct gpio_driver_config *const cfg =
   1069a:	6843      	ldr	r3, [r0, #4]
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
   1069c:	6905      	ldr	r5, [r0, #16]
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1069e:	681c      	ldr	r4, [r3, #0]
   106a0:	2301      	movs	r3, #1
   106a2:	408b      	lsls	r3, r1
   106a4:	421c      	tst	r4, r3
   106a6:	d008      	beq.n	106ba <gpio_pin_set+0x22>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   106a8:	682c      	ldr	r4, [r5, #0]
   106aa:	4223      	tst	r3, r4
   106ac:	d002      	beq.n	106b4 <gpio_pin_set+0x1c>
		value = (value != 0) ? 0 : 1;
   106ae:	fab2 f282 	clz	r2, r2
   106b2:	0952      	lsrs	r2, r2, #5
	}

	return gpio_pin_set_raw(port, pin, value);
   106b4:	f7ff ffc6 	bl	10644 <gpio_pin_set_raw>
}
   106b8:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   106ba:	4c08      	ldr	r4, [pc, #32]	; (106dc <gpio_pin_set+0x44>)
   106bc:	f240 533d 	movw	r3, #1341	; 0x53d
   106c0:	4622      	mov	r2, r4
   106c2:	4907      	ldr	r1, [pc, #28]	; (106e0 <gpio_pin_set+0x48>)
   106c4:	4807      	ldr	r0, [pc, #28]	; (106e4 <gpio_pin_set+0x4c>)
   106c6:	f025 fde5 	bl	36294 <assert_print>
   106ca:	4807      	ldr	r0, [pc, #28]	; (106e8 <gpio_pin_set+0x50>)
   106cc:	f025 fde2 	bl	36294 <assert_print>
   106d0:	f240 513d 	movw	r1, #1341	; 0x53d
   106d4:	4620      	mov	r0, r4
   106d6:	f025 fdd6 	bl	36286 <assert_post_action>
   106da:	bf00      	nop
   106dc:	0003f6b8 	.word	0x0003f6b8
   106e0:	0003f6ec 	.word	0x0003f6ec
   106e4:	0003f72c 	.word	0x0003f72c
   106e8:	0003f74c 	.word	0x0003f74c

000106ec <mosfet_blink_callback>:
}

void mosfet_blink_callback(struct k_timer *timer_id) {
    static bool mosfet_on = false;

    if (current_mosfet != NULL) {
   106ec:	4b08      	ldr	r3, [pc, #32]	; (10710 <mosfet_blink_callback+0x24>)
   106ee:	681b      	ldr	r3, [r3, #0]
   106f0:	b16b      	cbz	r3, 1070e <mosfet_blink_callback+0x22>
void mosfet_blink_callback(struct k_timer *timer_id) {
   106f2:	b510      	push	{r4, lr}
        gpio_pin_set(current_mosfet->port, current_mosfet->pin, mosfet_on ? 0 : 1);
   106f4:	4c07      	ldr	r4, [pc, #28]	; (10714 <mosfet_blink_callback+0x28>)
   106f6:	7822      	ldrb	r2, [r4, #0]
   106f8:	f082 0201 	eor.w	r2, r2, #1
   106fc:	7919      	ldrb	r1, [r3, #4]
   106fe:	6818      	ldr	r0, [r3, #0]
   10700:	f7ff ffca 	bl	10698 <gpio_pin_set>
        mosfet_on = !mosfet_on;
   10704:	7823      	ldrb	r3, [r4, #0]
   10706:	f083 0301 	eor.w	r3, r3, #1
   1070a:	7023      	strb	r3, [r4, #0]
    }
}
   1070c:	bd10      	pop	{r4, pc}
   1070e:	4770      	bx	lr
   10710:	2000bde8 	.word	0x2000bde8
   10714:	2000caa7 	.word	0x2000caa7

00010718 <z_impl_gpio_pin_interrupt_configure>:
{
   10718:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   1071a:	6884      	ldr	r4, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
   1071c:	6845      	ldr	r5, [r0, #4]
	const struct gpio_driver_data *const data =
   1071e:	6906      	ldr	r6, [r0, #16]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   10720:	f402 03c0 	and.w	r3, r2, #6291456	; 0x600000
   10724:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
   10728:	d01e      	beq.n	10768 <z_impl_gpio_pin_interrupt_configure+0x50>
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   1072a:	b36b      	cbz	r3, 10788 <z_impl_gpio_pin_interrupt_configure+0x70>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   1072c:	f002 63e8 	and.w	r3, r2, #121634816	; 0x7400000
   10730:	f1b3 6fc8 	cmp.w	r3, #104857600	; 0x6400000
   10734:	d038      	beq.n	107a8 <z_impl_gpio_pin_interrupt_configure+0x90>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   10736:	f002 63c8 	and.w	r3, r2, #104857600	; 0x6400000
   1073a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1073e:	d043      	beq.n	107c8 <z_impl_gpio_pin_interrupt_configure+0xb0>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   10740:	682d      	ldr	r5, [r5, #0]
   10742:	2301      	movs	r3, #1
   10744:	408b      	lsls	r3, r1
   10746:	421d      	tst	r5, r3
   10748:	d04e      	beq.n	107e8 <z_impl_gpio_pin_interrupt_configure+0xd0>
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1074a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1074e:	d004      	beq.n	1075a <z_impl_gpio_pin_interrupt_configure+0x42>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   10750:	6835      	ldr	r5, [r6, #0]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   10752:	422b      	tst	r3, r5
   10754:	d001      	beq.n	1075a <z_impl_gpio_pin_interrupt_configure+0x42>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   10756:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1075a:	69a4      	ldr	r4, [r4, #24]
   1075c:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
   10760:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
   10764:	47a0      	blx	r4
}
   10766:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   10768:	4c27      	ldr	r4, [pc, #156]	; (10808 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   1076a:	f240 2361 	movw	r3, #609	; 0x261
   1076e:	4622      	mov	r2, r4
   10770:	4926      	ldr	r1, [pc, #152]	; (1080c <z_impl_gpio_pin_interrupt_configure+0xf4>)
   10772:	4827      	ldr	r0, [pc, #156]	; (10810 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   10774:	f025 fd8e 	bl	36294 <assert_print>
   10778:	4826      	ldr	r0, [pc, #152]	; (10814 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   1077a:	f025 fd8b 	bl	36294 <assert_print>
   1077e:	f240 2161 	movw	r1, #609	; 0x261
   10782:	4620      	mov	r0, r4
   10784:	f025 fd7f 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   10788:	4c1f      	ldr	r4, [pc, #124]	; (10808 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   1078a:	f240 2365 	movw	r3, #613	; 0x265
   1078e:	4622      	mov	r2, r4
   10790:	4921      	ldr	r1, [pc, #132]	; (10818 <z_impl_gpio_pin_interrupt_configure+0x100>)
   10792:	481f      	ldr	r0, [pc, #124]	; (10810 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   10794:	f025 fd7e 	bl	36294 <assert_print>
   10798:	4820      	ldr	r0, [pc, #128]	; (1081c <z_impl_gpio_pin_interrupt_configure+0x104>)
   1079a:	f025 fd7b 	bl	36294 <assert_print>
   1079e:	f240 2165 	movw	r1, #613	; 0x265
   107a2:	4620      	mov	r0, r4
   107a4:	f025 fd6f 	bl	36286 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   107a8:	4c17      	ldr	r4, [pc, #92]	; (10808 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   107aa:	f44f 731a 	mov.w	r3, #616	; 0x268
   107ae:	4622      	mov	r2, r4
   107b0:	491b      	ldr	r1, [pc, #108]	; (10820 <z_impl_gpio_pin_interrupt_configure+0x108>)
   107b2:	4817      	ldr	r0, [pc, #92]	; (10810 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   107b4:	f025 fd6e 	bl	36294 <assert_print>
   107b8:	481a      	ldr	r0, [pc, #104]	; (10824 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   107ba:	f025 fd6b 	bl	36294 <assert_print>
   107be:	f44f 711a 	mov.w	r1, #616	; 0x268
   107c2:	4620      	mov	r0, r4
   107c4:	f025 fd5f 	bl	36286 <assert_post_action>
	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   107c8:	4c0f      	ldr	r4, [pc, #60]	; (10808 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   107ca:	f240 236f 	movw	r3, #623	; 0x26f
   107ce:	4622      	mov	r2, r4
   107d0:	4915      	ldr	r1, [pc, #84]	; (10828 <z_impl_gpio_pin_interrupt_configure+0x110>)
   107d2:	480f      	ldr	r0, [pc, #60]	; (10810 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   107d4:	f025 fd5e 	bl	36294 <assert_print>
   107d8:	4814      	ldr	r0, [pc, #80]	; (1082c <z_impl_gpio_pin_interrupt_configure+0x114>)
   107da:	f025 fd5b 	bl	36294 <assert_print>
   107de:	f240 216f 	movw	r1, #623	; 0x26f
   107e2:	4620      	mov	r0, r4
   107e4:	f025 fd4f 	bl	36286 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   107e8:	4c07      	ldr	r4, [pc, #28]	; (10808 <z_impl_gpio_pin_interrupt_configure+0xf0>)
   107ea:	f44f 731d 	mov.w	r3, #628	; 0x274
   107ee:	4622      	mov	r2, r4
   107f0:	490f      	ldr	r1, [pc, #60]	; (10830 <z_impl_gpio_pin_interrupt_configure+0x118>)
   107f2:	4807      	ldr	r0, [pc, #28]	; (10810 <z_impl_gpio_pin_interrupt_configure+0xf8>)
   107f4:	f025 fd4e 	bl	36294 <assert_print>
   107f8:	480e      	ldr	r0, [pc, #56]	; (10834 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   107fa:	f025 fd4b 	bl	36294 <assert_print>
   107fe:	f44f 711d 	mov.w	r1, #628	; 0x274
   10802:	4620      	mov	r0, r4
   10804:	f025 fd3f 	bl	36286 <assert_post_action>
   10808:	0003f6b8 	.word	0x0003f6b8
   1080c:	0003fa14 	.word	0x0003fa14
   10810:	0003f72c 	.word	0x0003f72c
   10814:	0003fa58 	.word	0x0003fa58
   10818:	0003fa84 	.word	0x0003fa84
   1081c:	0003fab0 	.word	0x0003fab0
   10820:	0003fadc 	.word	0x0003fadc
   10824:	0003fb60 	.word	0x0003fb60
   10828:	0003fbb4 	.word	0x0003fbb4
   1082c:	0003fc00 	.word	0x0003fc00
   10830:	0003f6ec 	.word	0x0003f6ec
   10834:	0003f74c 	.word	0x0003f74c

00010838 <gpio_init_callback>:
 * @param pin_mask A bit mask of relevant pins for the handler
 */
static inline void gpio_init_callback(struct gpio_callback *callback,
				      gpio_callback_handler_t handler,
				      gpio_port_pins_t pin_mask)
{
   10838:	b510      	push	{r4, lr}
	__ASSERT(callback, "Callback pointer should not be NULL");
   1083a:	b118      	cbz	r0, 10844 <gpio_init_callback+0xc>
	__ASSERT(handler, "Callback handler pointer should not be NULL");
   1083c:	b191      	cbz	r1, 10864 <gpio_init_callback+0x2c>

	callback->handler = handler;
   1083e:	6041      	str	r1, [r0, #4]
	callback->pin_mask = pin_mask;
   10840:	6082      	str	r2, [r0, #8]
}
   10842:	bd10      	pop	{r4, pc}
	__ASSERT(callback, "Callback pointer should not be NULL");
   10844:	4c0f      	ldr	r4, [pc, #60]	; (10884 <gpio_init_callback+0x4c>)
   10846:	f240 5385 	movw	r3, #1413	; 0x585
   1084a:	4622      	mov	r2, r4
   1084c:	490e      	ldr	r1, [pc, #56]	; (10888 <gpio_init_callback+0x50>)
   1084e:	480f      	ldr	r0, [pc, #60]	; (1088c <gpio_init_callback+0x54>)
   10850:	f025 fd20 	bl	36294 <assert_print>
   10854:	480e      	ldr	r0, [pc, #56]	; (10890 <gpio_init_callback+0x58>)
   10856:	f025 fd1d 	bl	36294 <assert_print>
   1085a:	f240 5185 	movw	r1, #1413	; 0x585
   1085e:	4620      	mov	r0, r4
   10860:	f025 fd11 	bl	36286 <assert_post_action>
	__ASSERT(handler, "Callback handler pointer should not be NULL");
   10864:	4c07      	ldr	r4, [pc, #28]	; (10884 <gpio_init_callback+0x4c>)
   10866:	f240 5386 	movw	r3, #1414	; 0x586
   1086a:	4622      	mov	r2, r4
   1086c:	4909      	ldr	r1, [pc, #36]	; (10894 <gpio_init_callback+0x5c>)
   1086e:	4807      	ldr	r0, [pc, #28]	; (1088c <gpio_init_callback+0x54>)
   10870:	f025 fd10 	bl	36294 <assert_print>
   10874:	4808      	ldr	r0, [pc, #32]	; (10898 <gpio_init_callback+0x60>)
   10876:	f025 fd0d 	bl	36294 <assert_print>
   1087a:	f240 5186 	movw	r1, #1414	; 0x586
   1087e:	4620      	mov	r0, r4
   10880:	f025 fd01 	bl	36286 <assert_post_action>
   10884:	0003f6b8 	.word	0x0003f6b8
   10888:	0003fc48 	.word	0x0003fc48
   1088c:	0003f72c 	.word	0x0003f72c
   10890:	0003fc54 	.word	0x0003fc54
   10894:	00044924 	.word	0x00044924
   10898:	0003fc7c 	.word	0x0003fc7c

0001089c <spi_init>:
static void spi_init(void) {
   1089c:	b500      	push	{lr}
   1089e:	b089      	sub	sp, #36	; 0x24
	spi_ad8403 = DEVICE_DT_GET(SPI_AD8403);
   108a0:	4817      	ldr	r0, [pc, #92]	; (10900 <spi_init+0x64>)
   108a2:	4b18      	ldr	r3, [pc, #96]	; (10904 <spi_init+0x68>)
   108a4:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   108a6:	f02d ffba 	bl	3e81e <z_device_is_ready>
    if (!device_is_ready(spi_ad8403)) {
   108aa:	b110      	cbz	r0, 108b2 <spi_init+0x16>
}
   108ac:	b009      	add	sp, #36	; 0x24
   108ae:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("SPI master device not ready!\n");
   108b2:	4b15      	ldr	r3, [pc, #84]	; (10908 <spi_init+0x6c>)
   108b4:	9307      	str	r3, [sp, #28]
   108b6:	2302      	movs	r3, #2
   108b8:	f88d 3004 	strb.w	r3, [sp, #4]
   108bc:	2300      	movs	r3, #0
   108be:	f88d 3005 	strb.w	r3, [sp, #5]
   108c2:	f88d 3006 	strb.w	r3, [sp, #6]
   108c6:	f88d 3007 	strb.w	r3, [sp, #7]
   108ca:	9a01      	ldr	r2, [sp, #4]
   108cc:	9206      	str	r2, [sp, #24]
   108ce:	4619      	mov	r1, r3
   108d0:	f363 0100 	bfi	r1, r3, #0, #1
   108d4:	f363 0141 	bfi	r1, r3, #1, #1
   108d8:	f363 0182 	bfi	r1, r3, #2, #1
   108dc:	f363 01c5 	bfi	r1, r3, #3, #3
   108e0:	2201      	movs	r2, #1
   108e2:	f362 1188 	bfi	r1, r2, #6, #3
   108e6:	2208      	movs	r2, #8
   108e8:	f362 2152 	bfi	r1, r2, #9, #10
   108ec:	f363 41de 	bfi	r1, r3, #19, #12
   108f0:	f363 71df 	bfi	r1, r3, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   108f4:	aa06      	add	r2, sp, #24
   108f6:	4805      	ldr	r0, [pc, #20]	; (1090c <spi_init+0x70>)
   108f8:	f006 f828 	bl	1694c <z_impl_z_log_msg_static_create>
}
   108fc:	e7d6      	b.n	108ac <spi_init+0x10>
   108fe:	bf00      	nop
   10900:	0003f044 	.word	0x0003f044
   10904:	2000be00 	.word	0x2000be00
   10908:	0003fcac 	.word	0x0003fcac
   1090c:	0003f490 	.word	0x0003f490

00010910 <bt_addr_le_to_str>:
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
   10910:	b5f0      	push	{r4, r5, r6, r7, lr}
   10912:	b08b      	sub	sp, #44	; 0x2c
   10914:	4604      	mov	r4, r0
   10916:	460d      	mov	r5, r1
   10918:	4616      	mov	r6, r2
	char type[10];

	switch (addr->type) {
   1091a:	7803      	ldrb	r3, [r0, #0]
   1091c:	2b03      	cmp	r3, #3
   1091e:	d82c      	bhi.n	1097a <bt_addr_le_to_str+0x6a>
   10920:	e8df f003 	tbb	[pc, r3]
   10924:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10928:	4917      	ldr	r1, [pc, #92]	; (10988 <bt_addr_le_to_str+0x78>)
   1092a:	a807      	add	r0, sp, #28
   1092c:	f027 fceb 	bl	38306 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10930:	7963      	ldrb	r3, [r4, #5]
   10932:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10934:	78e1      	ldrb	r1, [r4, #3]
   10936:	78a0      	ldrb	r0, [r4, #2]
   10938:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1093a:	f10d 0c1c 	add.w	ip, sp, #28
   1093e:	f8cd c014 	str.w	ip, [sp, #20]
   10942:	9704      	str	r7, [sp, #16]
   10944:	9003      	str	r0, [sp, #12]
   10946:	9102      	str	r1, [sp, #8]
   10948:	9201      	str	r2, [sp, #4]
   1094a:	9300      	str	r3, [sp, #0]
   1094c:	79a3      	ldrb	r3, [r4, #6]
   1094e:	4a0f      	ldr	r2, [pc, #60]	; (1098c <bt_addr_le_to_str+0x7c>)
   10950:	4631      	mov	r1, r6
   10952:	4628      	mov	r0, r5
   10954:	f025 f85b 	bl	35a0e <snprintk>
}
   10958:	b00b      	add	sp, #44	; 0x2c
   1095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1095c:	490c      	ldr	r1, [pc, #48]	; (10990 <bt_addr_le_to_str+0x80>)
   1095e:	a807      	add	r0, sp, #28
   10960:	f027 fcd1 	bl	38306 <strcpy>
		break;
   10964:	e7e4      	b.n	10930 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   10966:	490b      	ldr	r1, [pc, #44]	; (10994 <bt_addr_le_to_str+0x84>)
   10968:	a807      	add	r0, sp, #28
   1096a:	f027 fccc 	bl	38306 <strcpy>
		break;
   1096e:	e7df      	b.n	10930 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   10970:	4909      	ldr	r1, [pc, #36]	; (10998 <bt_addr_le_to_str+0x88>)
   10972:	a807      	add	r0, sp, #28
   10974:	f027 fcc7 	bl	38306 <strcpy>
		break;
   10978:	e7da      	b.n	10930 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1097a:	4a08      	ldr	r2, [pc, #32]	; (1099c <bt_addr_le_to_str+0x8c>)
   1097c:	210a      	movs	r1, #10
   1097e:	a807      	add	r0, sp, #28
   10980:	f025 f845 	bl	35a0e <snprintk>
		break;
   10984:	e7d4      	b.n	10930 <bt_addr_le_to_str+0x20>
   10986:	bf00      	nop
   10988:	0003fccc 	.word	0x0003fccc
   1098c:	0003fcf4 	.word	0x0003fcf4
   10990:	0003fcd4 	.word	0x0003fcd4
   10994:	0003fcdc 	.word	0x0003fcdc
   10998:	0003fce8 	.word	0x0003fce8
   1099c:	00044318 	.word	0x00044318

000109a0 <security_changed>:
static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err) {
   109a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   109a2:	b08b      	sub	sp, #44	; 0x2c
   109a4:	af00      	add	r7, sp, #0
   109a6:	460d      	mov	r5, r1
   109a8:	4614      	mov	r4, r2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   109aa:	f028 fd16 	bl	393da <bt_conn_get_dst>
   109ae:	221e      	movs	r2, #30
   109b0:	f107 0108 	add.w	r1, r7, #8
   109b4:	f7ff ffac 	bl	10910 <bt_addr_le_to_str>
	if (!err) {
   109b8:	2c00      	cmp	r4, #0
   109ba:	d15a      	bne.n	10a72 <security_changed+0xd2>
		LOG_INF("Security changed: %s level %u", addr, level);
   109bc:	466e      	mov	r6, sp
   109be:	2300      	movs	r3, #0
   109c0:	713b      	strb	r3, [r7, #4]
   109c2:	2302      	movs	r3, #2
   109c4:	717b      	strb	r3, [r7, #5]
   109c6:	b08a      	sub	sp, #40	; 0x28
   109c8:	466c      	mov	r4, sp
   109ca:	f114 0210 	adds.w	r2, r4, #16
   109ce:	d017      	beq.n	10a00 <security_changed+0x60>
   109d0:	2012      	movs	r0, #18
   109d2:	b11a      	cbz	r2, 109dc <security_changed+0x3c>
   109d4:	2804      	cmp	r0, #4
   109d6:	dd01      	ble.n	109dc <security_changed+0x3c>
   109d8:	4b56      	ldr	r3, [pc, #344]	; (10b34 <security_changed+0x194>)
   109da:	6163      	str	r3, [r4, #20]
   109dc:	2300      	movs	r3, #0
   109de:	703b      	strb	r3, [r7, #0]
   109e0:	2302      	movs	r3, #2
   109e2:	707b      	strb	r3, [r7, #1]
   109e4:	b1ca      	cbz	r2, 10a1a <security_changed+0x7a>
   109e6:	4603      	mov	r3, r0
   109e8:	2808      	cmp	r0, #8
   109ea:	dd02      	ble.n	109f2 <security_changed+0x52>
   109ec:	f107 0108 	add.w	r1, r7, #8
   109f0:	61a1      	str	r1, [r4, #24]
   109f2:	2b0c      	cmp	r3, #12
   109f4:	dd00      	ble.n	109f8 <security_changed+0x58>
   109f6:	61e5      	str	r5, [r4, #28]
   109f8:	f104 0320 	add.w	r3, r4, #32
   109fc:	2100      	movs	r1, #0
   109fe:	e00a      	b.n	10a16 <security_changed+0x76>
   10a00:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10a04:	e7e5      	b.n	109d2 <security_changed+0x32>
   10a06:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10a0a:	443d      	add	r5, r7
   10a0c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10a10:	f803 5b01 	strb.w	r5, [r3], #1
   10a14:	3101      	adds	r1, #1
   10a16:	2901      	cmp	r1, #1
   10a18:	d9f5      	bls.n	10a06 <security_changed+0x66>
   10a1a:	2811      	cmp	r0, #17
   10a1c:	dd26      	ble.n	10a6c <security_changed+0xcc>
   10a1e:	2312      	movs	r3, #18
   10a20:	b142      	cbz	r2, 10a34 <security_changed+0x94>
   10a22:	2104      	movs	r1, #4
   10a24:	7139      	strb	r1, [r7, #4]
   10a26:	2100      	movs	r1, #0
   10a28:	7179      	strb	r1, [r7, #5]
   10a2a:	71b9      	strb	r1, [r7, #6]
   10a2c:	2101      	movs	r1, #1
   10a2e:	71f9      	strb	r1, [r7, #7]
   10a30:	6878      	ldr	r0, [r7, #4]
   10a32:	6120      	str	r0, [r4, #16]
   10a34:	2100      	movs	r1, #0
   10a36:	f36f 0100 	bfc	r1, #0, #1
   10a3a:	f36f 0141 	bfc	r1, #1, #1
   10a3e:	f36f 0182 	bfc	r1, #2, #1
   10a42:	f36f 01c5 	bfc	r1, #3, #3
   10a46:	2003      	movs	r0, #3
   10a48:	f360 1188 	bfi	r1, r0, #6, #3
   10a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10a50:	f363 2152 	bfi	r1, r3, #9, #10
   10a54:	f36f 41de 	bfc	r1, #19, #12
   10a58:	f36f 71df 	bfc	r1, #31, #1
   10a5c:	2300      	movs	r3, #0
   10a5e:	4836      	ldr	r0, [pc, #216]	; (10b38 <security_changed+0x198>)
   10a60:	f005 ff74 	bl	1694c <z_impl_z_log_msg_static_create>
   10a64:	46b5      	mov	sp, r6
}
   10a66:	372c      	adds	r7, #44	; 0x2c
   10a68:	46bd      	mov	sp, r7
   10a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Security changed: %s level %u", addr, level);
   10a6c:	f06f 031b 	mvn.w	r3, #27
   10a70:	e7d6      	b.n	10a20 <security_changed+0x80>
		LOG_WRN("Security failed: %s level %u err %d", addr, level, err);
   10a72:	466e      	mov	r6, sp
   10a74:	2300      	movs	r3, #0
   10a76:	713b      	strb	r3, [r7, #4]
   10a78:	2302      	movs	r3, #2
   10a7a:	717b      	strb	r3, [r7, #5]
   10a7c:	b08a      	sub	sp, #40	; 0x28
   10a7e:	46ec      	mov	ip, sp
   10a80:	f11c 0210 	adds.w	r2, ip, #16
   10a84:	d01e      	beq.n	10ac4 <security_changed+0x124>
   10a86:	2016      	movs	r0, #22
   10a88:	b122      	cbz	r2, 10a94 <security_changed+0xf4>
   10a8a:	2804      	cmp	r0, #4
   10a8c:	dd02      	ble.n	10a94 <security_changed+0xf4>
   10a8e:	4b2b      	ldr	r3, [pc, #172]	; (10b3c <security_changed+0x19c>)
   10a90:	f8cc 3014 	str.w	r3, [ip, #20]
   10a94:	2300      	movs	r3, #0
   10a96:	703b      	strb	r3, [r7, #0]
   10a98:	2302      	movs	r3, #2
   10a9a:	707b      	strb	r3, [r7, #1]
   10a9c:	b1fa      	cbz	r2, 10ade <security_changed+0x13e>
   10a9e:	4603      	mov	r3, r0
   10aa0:	2808      	cmp	r0, #8
   10aa2:	dd03      	ble.n	10aac <security_changed+0x10c>
   10aa4:	f107 0108 	add.w	r1, r7, #8
   10aa8:	f8cc 1018 	str.w	r1, [ip, #24]
   10aac:	2b0c      	cmp	r3, #12
   10aae:	dd01      	ble.n	10ab4 <security_changed+0x114>
   10ab0:	f8cc 501c 	str.w	r5, [ip, #28]
   10ab4:	2b10      	cmp	r3, #16
   10ab6:	dd01      	ble.n	10abc <security_changed+0x11c>
   10ab8:	f8cc 4020 	str.w	r4, [ip, #32]
   10abc:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   10ac0:	2100      	movs	r1, #0
   10ac2:	e00a      	b.n	10ada <security_changed+0x13a>
   10ac4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10ac8:	e7de      	b.n	10a88 <security_changed+0xe8>
   10aca:	f101 0428 	add.w	r4, r1, #40	; 0x28
   10ace:	443c      	add	r4, r7
   10ad0:	f814 4c28 	ldrb.w	r4, [r4, #-40]
   10ad4:	f803 4b01 	strb.w	r4, [r3], #1
   10ad8:	3101      	adds	r1, #1
   10ada:	2901      	cmp	r1, #1
   10adc:	d9f5      	bls.n	10aca <security_changed+0x12a>
   10ade:	2815      	cmp	r0, #21
   10ae0:	dd25      	ble.n	10b2e <security_changed+0x18e>
   10ae2:	2316      	movs	r3, #22
   10ae4:	b14a      	cbz	r2, 10afa <security_changed+0x15a>
   10ae6:	2105      	movs	r1, #5
   10ae8:	7139      	strb	r1, [r7, #4]
   10aea:	2100      	movs	r1, #0
   10aec:	7179      	strb	r1, [r7, #5]
   10aee:	71b9      	strb	r1, [r7, #6]
   10af0:	2101      	movs	r1, #1
   10af2:	71f9      	strb	r1, [r7, #7]
   10af4:	6878      	ldr	r0, [r7, #4]
   10af6:	f8cc 0010 	str.w	r0, [ip, #16]
   10afa:	2100      	movs	r1, #0
   10afc:	f36f 0100 	bfc	r1, #0, #1
   10b00:	f36f 0141 	bfc	r1, #1, #1
   10b04:	f36f 0182 	bfc	r1, #2, #1
   10b08:	f36f 01c5 	bfc	r1, #3, #3
   10b0c:	2002      	movs	r0, #2
   10b0e:	f360 1188 	bfi	r1, r0, #6, #3
   10b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10b16:	f363 2152 	bfi	r1, r3, #9, #10
   10b1a:	f36f 41de 	bfc	r1, #19, #12
   10b1e:	f36f 71df 	bfc	r1, #31, #1
   10b22:	2300      	movs	r3, #0
   10b24:	4804      	ldr	r0, [pc, #16]	; (10b38 <security_changed+0x198>)
   10b26:	f005 ff11 	bl	1694c <z_impl_z_log_msg_static_create>
   10b2a:	46b5      	mov	sp, r6
}
   10b2c:	e79b      	b.n	10a66 <security_changed+0xc6>
		LOG_WRN("Security failed: %s level %u err %d", addr, level, err);
   10b2e:	f06f 031b 	mvn.w	r3, #27
   10b32:	e7d7      	b.n	10ae4 <security_changed+0x144>
   10b34:	0003fd18 	.word	0x0003fd18
   10b38:	0003f490 	.word	0x0003f490
   10b3c:	0003fd38 	.word	0x0003fd38

00010b40 <pairing_failed>:
static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason) {
   10b40:	b590      	push	{r4, r7, lr}
   10b42:	b08b      	sub	sp, #44	; 0x2c
   10b44:	af00      	add	r7, sp, #0
   10b46:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10b48:	f028 fc47 	bl	393da <bt_conn_get_dst>
   10b4c:	221e      	movs	r2, #30
   10b4e:	f107 0108 	add.w	r1, r7, #8
   10b52:	f7ff fedd 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
   10b56:	2300      	movs	r3, #0
   10b58:	713b      	strb	r3, [r7, #4]
   10b5a:	2302      	movs	r3, #2
   10b5c:	717b      	strb	r3, [r7, #5]
   10b5e:	b08a      	sub	sp, #40	; 0x28
   10b60:	46ec      	mov	ip, sp
   10b62:	f11c 0210 	adds.w	r2, ip, #16
   10b66:	d01a      	beq.n	10b9e <pairing_failed+0x5e>
   10b68:	2012      	movs	r0, #18
   10b6a:	b122      	cbz	r2, 10b76 <pairing_failed+0x36>
   10b6c:	2804      	cmp	r0, #4
   10b6e:	dd02      	ble.n	10b76 <pairing_failed+0x36>
   10b70:	4b27      	ldr	r3, [pc, #156]	; (10c10 <pairing_failed+0xd0>)
   10b72:	f8cc 3014 	str.w	r3, [ip, #20]
   10b76:	2300      	movs	r3, #0
   10b78:	703b      	strb	r3, [r7, #0]
   10b7a:	2302      	movs	r3, #2
   10b7c:	707b      	strb	r3, [r7, #1]
   10b7e:	b1da      	cbz	r2, 10bb8 <pairing_failed+0x78>
   10b80:	4603      	mov	r3, r0
   10b82:	2808      	cmp	r0, #8
   10b84:	dd03      	ble.n	10b8e <pairing_failed+0x4e>
   10b86:	f107 0108 	add.w	r1, r7, #8
   10b8a:	f8cc 1018 	str.w	r1, [ip, #24]
   10b8e:	2b0c      	cmp	r3, #12
   10b90:	dd01      	ble.n	10b96 <pairing_failed+0x56>
   10b92:	f8cc 401c 	str.w	r4, [ip, #28]
   10b96:	f10c 0320 	add.w	r3, ip, #32
   10b9a:	2100      	movs	r1, #0
   10b9c:	e00a      	b.n	10bb4 <pairing_failed+0x74>
   10b9e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10ba2:	e7e2      	b.n	10b6a <pairing_failed+0x2a>
   10ba4:	f101 0428 	add.w	r4, r1, #40	; 0x28
   10ba8:	443c      	add	r4, r7
   10baa:	f814 4c28 	ldrb.w	r4, [r4, #-40]
   10bae:	f803 4b01 	strb.w	r4, [r3], #1
   10bb2:	3101      	adds	r1, #1
   10bb4:	2901      	cmp	r1, #1
   10bb6:	d9f5      	bls.n	10ba4 <pairing_failed+0x64>
   10bb8:	2811      	cmp	r0, #17
   10bba:	dd26      	ble.n	10c0a <pairing_failed+0xca>
   10bbc:	2312      	movs	r3, #18
   10bbe:	b14a      	cbz	r2, 10bd4 <pairing_failed+0x94>
   10bc0:	2104      	movs	r1, #4
   10bc2:	7139      	strb	r1, [r7, #4]
   10bc4:	2100      	movs	r1, #0
   10bc6:	7179      	strb	r1, [r7, #5]
   10bc8:	71b9      	strb	r1, [r7, #6]
   10bca:	2101      	movs	r1, #1
   10bcc:	71f9      	strb	r1, [r7, #7]
   10bce:	6878      	ldr	r0, [r7, #4]
   10bd0:	f8cc 0010 	str.w	r0, [ip, #16]
   10bd4:	2100      	movs	r1, #0
   10bd6:	f36f 0100 	bfc	r1, #0, #1
   10bda:	f36f 0141 	bfc	r1, #1, #1
   10bde:	f36f 0182 	bfc	r1, #2, #1
   10be2:	f36f 01c5 	bfc	r1, #3, #3
   10be6:	2003      	movs	r0, #3
   10be8:	f360 1188 	bfi	r1, r0, #6, #3
   10bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10bf0:	f363 2152 	bfi	r1, r3, #9, #10
   10bf4:	f36f 41de 	bfc	r1, #19, #12
   10bf8:	f36f 71df 	bfc	r1, #31, #1
   10bfc:	2300      	movs	r3, #0
   10bfe:	4805      	ldr	r0, [pc, #20]	; (10c14 <pairing_failed+0xd4>)
   10c00:	f005 fea4 	bl	1694c <z_impl_z_log_msg_static_create>
}
   10c04:	372c      	adds	r7, #44	; 0x2c
   10c06:	46bd      	mov	sp, r7
   10c08:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Pairing failed conn: %s, reason %d", addr, reason);
   10c0a:	f06f 031b 	mvn.w	r3, #27
   10c0e:	e7d6      	b.n	10bbe <pairing_failed+0x7e>
   10c10:	0003fd5c 	.word	0x0003fd5c
   10c14:	0003f490 	.word	0x0003f490

00010c18 <pairing_complete>:
static void pairing_complete(struct bt_conn *conn, bool bonded) {
   10c18:	b590      	push	{r4, r7, lr}
   10c1a:	b08b      	sub	sp, #44	; 0x2c
   10c1c:	af00      	add	r7, sp, #0
   10c1e:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10c20:	f028 fbdb 	bl	393da <bt_conn_get_dst>
   10c24:	221e      	movs	r2, #30
   10c26:	f107 0108 	add.w	r1, r7, #8
   10c2a:	f7ff fe71 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
   10c2e:	2300      	movs	r3, #0
   10c30:	713b      	strb	r3, [r7, #4]
   10c32:	2302      	movs	r3, #2
   10c34:	717b      	strb	r3, [r7, #5]
   10c36:	b08a      	sub	sp, #40	; 0x28
   10c38:	46ec      	mov	ip, sp
   10c3a:	f11c 0210 	adds.w	r2, ip, #16
   10c3e:	d01a      	beq.n	10c76 <pairing_complete+0x5e>
   10c40:	2012      	movs	r0, #18
   10c42:	b122      	cbz	r2, 10c4e <pairing_complete+0x36>
   10c44:	2804      	cmp	r0, #4
   10c46:	dd02      	ble.n	10c4e <pairing_complete+0x36>
   10c48:	4b27      	ldr	r3, [pc, #156]	; (10ce8 <pairing_complete+0xd0>)
   10c4a:	f8cc 3014 	str.w	r3, [ip, #20]
   10c4e:	2300      	movs	r3, #0
   10c50:	703b      	strb	r3, [r7, #0]
   10c52:	2302      	movs	r3, #2
   10c54:	707b      	strb	r3, [r7, #1]
   10c56:	b1da      	cbz	r2, 10c90 <pairing_complete+0x78>
   10c58:	4603      	mov	r3, r0
   10c5a:	2808      	cmp	r0, #8
   10c5c:	dd03      	ble.n	10c66 <pairing_complete+0x4e>
   10c5e:	f107 0108 	add.w	r1, r7, #8
   10c62:	f8cc 1018 	str.w	r1, [ip, #24]
   10c66:	2b0c      	cmp	r3, #12
   10c68:	dd01      	ble.n	10c6e <pairing_complete+0x56>
   10c6a:	f8cc 401c 	str.w	r4, [ip, #28]
   10c6e:	f10c 0320 	add.w	r3, ip, #32
   10c72:	2100      	movs	r1, #0
   10c74:	e00a      	b.n	10c8c <pairing_complete+0x74>
   10c76:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10c7a:	e7e2      	b.n	10c42 <pairing_complete+0x2a>
   10c7c:	f101 0428 	add.w	r4, r1, #40	; 0x28
   10c80:	443c      	add	r4, r7
   10c82:	f814 4c28 	ldrb.w	r4, [r4, #-40]
   10c86:	f803 4b01 	strb.w	r4, [r3], #1
   10c8a:	3101      	adds	r1, #1
   10c8c:	2901      	cmp	r1, #1
   10c8e:	d9f5      	bls.n	10c7c <pairing_complete+0x64>
   10c90:	2811      	cmp	r0, #17
   10c92:	dd26      	ble.n	10ce2 <pairing_complete+0xca>
   10c94:	2312      	movs	r3, #18
   10c96:	b14a      	cbz	r2, 10cac <pairing_complete+0x94>
   10c98:	2104      	movs	r1, #4
   10c9a:	7139      	strb	r1, [r7, #4]
   10c9c:	2100      	movs	r1, #0
   10c9e:	7179      	strb	r1, [r7, #5]
   10ca0:	71b9      	strb	r1, [r7, #6]
   10ca2:	2101      	movs	r1, #1
   10ca4:	71f9      	strb	r1, [r7, #7]
   10ca6:	6878      	ldr	r0, [r7, #4]
   10ca8:	f8cc 0010 	str.w	r0, [ip, #16]
   10cac:	2100      	movs	r1, #0
   10cae:	f36f 0100 	bfc	r1, #0, #1
   10cb2:	f36f 0141 	bfc	r1, #1, #1
   10cb6:	f36f 0182 	bfc	r1, #2, #1
   10cba:	f36f 01c5 	bfc	r1, #3, #3
   10cbe:	2003      	movs	r0, #3
   10cc0:	f360 1188 	bfi	r1, r0, #6, #3
   10cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10cc8:	f363 2152 	bfi	r1, r3, #9, #10
   10ccc:	f36f 41de 	bfc	r1, #19, #12
   10cd0:	f36f 71df 	bfc	r1, #31, #1
   10cd4:	2300      	movs	r3, #0
   10cd6:	4805      	ldr	r0, [pc, #20]	; (10cec <pairing_complete+0xd4>)
   10cd8:	f005 fe38 	bl	1694c <z_impl_z_log_msg_static_create>
}
   10cdc:	372c      	adds	r7, #44	; 0x2c
   10cde:	46bd      	mov	sp, r7
   10ce0:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
   10ce2:	f06f 031b 	mvn.w	r3, #27
   10ce6:	e7d6      	b.n	10c96 <pairing_complete+0x7e>
   10ce8:	0003fd80 	.word	0x0003fd80
   10cec:	0003f490 	.word	0x0003f490

00010cf0 <auth_cancel>:
static void auth_cancel(struct bt_conn *conn) {
   10cf0:	b580      	push	{r7, lr}
   10cf2:	b08a      	sub	sp, #40	; 0x28
   10cf4:	af00      	add	r7, sp, #0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10cf6:	f028 fb70 	bl	393da <bt_conn_get_dst>
   10cfa:	221e      	movs	r2, #30
   10cfc:	f107 0108 	add.w	r1, r7, #8
   10d00:	f7ff fe06 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Pairing cancelled: %s", addr);
   10d04:	2300      	movs	r3, #0
   10d06:	713b      	strb	r3, [r7, #4]
   10d08:	2302      	movs	r3, #2
   10d0a:	717b      	strb	r3, [r7, #5]
   10d0c:	b088      	sub	sp, #32
   10d0e:	46ec      	mov	ip, sp
   10d10:	f11c 0210 	adds.w	r2, ip, #16
   10d14:	d015      	beq.n	10d42 <auth_cancel+0x52>
   10d16:	200e      	movs	r0, #14
   10d18:	b122      	cbz	r2, 10d24 <auth_cancel+0x34>
   10d1a:	2804      	cmp	r0, #4
   10d1c:	dd02      	ble.n	10d24 <auth_cancel+0x34>
   10d1e:	4b25      	ldr	r3, [pc, #148]	; (10db4 <auth_cancel+0xc4>)
   10d20:	f8cc 3014 	str.w	r3, [ip, #20]
   10d24:	2300      	movs	r3, #0
   10d26:	703b      	strb	r3, [r7, #0]
   10d28:	2302      	movs	r3, #2
   10d2a:	707b      	strb	r3, [r7, #1]
   10d2c:	b1b2      	cbz	r2, 10d5c <auth_cancel+0x6c>
   10d2e:	2808      	cmp	r0, #8
   10d30:	dd03      	ble.n	10d3a <auth_cancel+0x4a>
   10d32:	f107 0308 	add.w	r3, r7, #8
   10d36:	f8cc 3018 	str.w	r3, [ip, #24]
   10d3a:	f10c 031c 	add.w	r3, ip, #28
   10d3e:	2100      	movs	r1, #0
   10d40:	e00a      	b.n	10d58 <auth_cancel+0x68>
   10d42:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10d46:	e7e7      	b.n	10d18 <auth_cancel+0x28>
   10d48:	f101 0e28 	add.w	lr, r1, #40	; 0x28
   10d4c:	44be      	add	lr, r7
   10d4e:	f81e ec28 	ldrb.w	lr, [lr, #-40]
   10d52:	f803 eb01 	strb.w	lr, [r3], #1
   10d56:	3101      	adds	r1, #1
   10d58:	2901      	cmp	r1, #1
   10d5a:	d9f5      	bls.n	10d48 <auth_cancel+0x58>
   10d5c:	280d      	cmp	r0, #13
   10d5e:	dd26      	ble.n	10dae <auth_cancel+0xbe>
   10d60:	230e      	movs	r3, #14
   10d62:	b14a      	cbz	r2, 10d78 <auth_cancel+0x88>
   10d64:	2103      	movs	r1, #3
   10d66:	7139      	strb	r1, [r7, #4]
   10d68:	2100      	movs	r1, #0
   10d6a:	7179      	strb	r1, [r7, #5]
   10d6c:	71b9      	strb	r1, [r7, #6]
   10d6e:	2101      	movs	r1, #1
   10d70:	71f9      	strb	r1, [r7, #7]
   10d72:	6878      	ldr	r0, [r7, #4]
   10d74:	f8cc 0010 	str.w	r0, [ip, #16]
   10d78:	2100      	movs	r1, #0
   10d7a:	f36f 0100 	bfc	r1, #0, #1
   10d7e:	f36f 0141 	bfc	r1, #1, #1
   10d82:	f36f 0182 	bfc	r1, #2, #1
   10d86:	f36f 01c5 	bfc	r1, #3, #3
   10d8a:	2003      	movs	r0, #3
   10d8c:	f360 1188 	bfi	r1, r0, #6, #3
   10d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10d94:	f363 2152 	bfi	r1, r3, #9, #10
   10d98:	f36f 41de 	bfc	r1, #19, #12
   10d9c:	f36f 71df 	bfc	r1, #31, #1
   10da0:	2300      	movs	r3, #0
   10da2:	4805      	ldr	r0, [pc, #20]	; (10db8 <auth_cancel+0xc8>)
   10da4:	f005 fdd2 	bl	1694c <z_impl_z_log_msg_static_create>
}
   10da8:	3728      	adds	r7, #40	; 0x28
   10daa:	46bd      	mov	sp, r7
   10dac:	bd80      	pop	{r7, pc}
	LOG_INF("Pairing cancelled: %s", addr);
   10dae:	f06f 031b 	mvn.w	r3, #27
   10db2:	e7d6      	b.n	10d62 <auth_cancel+0x72>
   10db4:	0003fda4 	.word	0x0003fda4
   10db8:	0003f490 	.word	0x0003f490

00010dbc <auth_passkey_display>:
static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey) {
   10dbc:	b590      	push	{r4, r7, lr}
   10dbe:	b08b      	sub	sp, #44	; 0x2c
   10dc0:	af00      	add	r7, sp, #0
   10dc2:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10dc4:	f028 fb09 	bl	393da <bt_conn_get_dst>
   10dc8:	221e      	movs	r2, #30
   10dca:	f107 0108 	add.w	r1, r7, #8
   10dce:	f7ff fd9f 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
   10dd2:	2300      	movs	r3, #0
   10dd4:	713b      	strb	r3, [r7, #4]
   10dd6:	2302      	movs	r3, #2
   10dd8:	717b      	strb	r3, [r7, #5]
   10dda:	b08a      	sub	sp, #40	; 0x28
   10ddc:	46ec      	mov	ip, sp
   10dde:	f11c 0210 	adds.w	r2, ip, #16
   10de2:	d01a      	beq.n	10e1a <auth_passkey_display+0x5e>
   10de4:	2012      	movs	r0, #18
   10de6:	b122      	cbz	r2, 10df2 <auth_passkey_display+0x36>
   10de8:	2804      	cmp	r0, #4
   10dea:	dd02      	ble.n	10df2 <auth_passkey_display+0x36>
   10dec:	4b27      	ldr	r3, [pc, #156]	; (10e8c <auth_passkey_display+0xd0>)
   10dee:	f8cc 3014 	str.w	r3, [ip, #20]
   10df2:	2300      	movs	r3, #0
   10df4:	703b      	strb	r3, [r7, #0]
   10df6:	2302      	movs	r3, #2
   10df8:	707b      	strb	r3, [r7, #1]
   10dfa:	b1da      	cbz	r2, 10e34 <auth_passkey_display+0x78>
   10dfc:	4603      	mov	r3, r0
   10dfe:	2808      	cmp	r0, #8
   10e00:	dd03      	ble.n	10e0a <auth_passkey_display+0x4e>
   10e02:	f107 0108 	add.w	r1, r7, #8
   10e06:	f8cc 1018 	str.w	r1, [ip, #24]
   10e0a:	2b0c      	cmp	r3, #12
   10e0c:	dd01      	ble.n	10e12 <auth_passkey_display+0x56>
   10e0e:	f8cc 401c 	str.w	r4, [ip, #28]
   10e12:	f10c 0320 	add.w	r3, ip, #32
   10e16:	2100      	movs	r1, #0
   10e18:	e00a      	b.n	10e30 <auth_passkey_display+0x74>
   10e1a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10e1e:	e7e2      	b.n	10de6 <auth_passkey_display+0x2a>
   10e20:	f101 0428 	add.w	r4, r1, #40	; 0x28
   10e24:	443c      	add	r4, r7
   10e26:	f814 4c28 	ldrb.w	r4, [r4, #-40]
   10e2a:	f803 4b01 	strb.w	r4, [r3], #1
   10e2e:	3101      	adds	r1, #1
   10e30:	2901      	cmp	r1, #1
   10e32:	d9f5      	bls.n	10e20 <auth_passkey_display+0x64>
   10e34:	2811      	cmp	r0, #17
   10e36:	dd26      	ble.n	10e86 <auth_passkey_display+0xca>
   10e38:	2312      	movs	r3, #18
   10e3a:	b14a      	cbz	r2, 10e50 <auth_passkey_display+0x94>
   10e3c:	2104      	movs	r1, #4
   10e3e:	7139      	strb	r1, [r7, #4]
   10e40:	2100      	movs	r1, #0
   10e42:	7179      	strb	r1, [r7, #5]
   10e44:	71b9      	strb	r1, [r7, #6]
   10e46:	2101      	movs	r1, #1
   10e48:	71f9      	strb	r1, [r7, #7]
   10e4a:	6878      	ldr	r0, [r7, #4]
   10e4c:	f8cc 0010 	str.w	r0, [ip, #16]
   10e50:	2100      	movs	r1, #0
   10e52:	f36f 0100 	bfc	r1, #0, #1
   10e56:	f36f 0141 	bfc	r1, #1, #1
   10e5a:	f36f 0182 	bfc	r1, #2, #1
   10e5e:	f36f 01c5 	bfc	r1, #3, #3
   10e62:	2003      	movs	r0, #3
   10e64:	f360 1188 	bfi	r1, r0, #6, #3
   10e68:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10e6c:	f363 2152 	bfi	r1, r3, #9, #10
   10e70:	f36f 41de 	bfc	r1, #19, #12
   10e74:	f36f 71df 	bfc	r1, #31, #1
   10e78:	2300      	movs	r3, #0
   10e7a:	4805      	ldr	r0, [pc, #20]	; (10e90 <auth_passkey_display+0xd4>)
   10e7c:	f005 fd66 	bl	1694c <z_impl_z_log_msg_static_create>
}
   10e80:	372c      	adds	r7, #44	; 0x2c
   10e82:	46bd      	mov	sp, r7
   10e84:	bd90      	pop	{r4, r7, pc}
	LOG_INF("Passkey for %s: %06u", addr, passkey);
   10e86:	f06f 031b 	mvn.w	r3, #27
   10e8a:	e7d6      	b.n	10e3a <auth_passkey_display+0x7e>
   10e8c:	0003fdbc 	.word	0x0003fdbc
   10e90:	0003f490 	.word	0x0003f490

00010e94 <disconnected>:
static void disconnected(struct bt_conn *conn, uint8_t reason) {
   10e94:	b5b0      	push	{r4, r5, r7, lr}
   10e96:	b08a      	sub	sp, #40	; 0x28
   10e98:	af00      	add	r7, sp, #0
   10e9a:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10e9c:	f028 fa9d 	bl	393da <bt_conn_get_dst>
   10ea0:	221e      	movs	r2, #30
   10ea2:	f107 0108 	add.w	r1, r7, #8
   10ea6:	f7ff fd33 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   10eaa:	466c      	mov	r4, sp
   10eac:	2300      	movs	r3, #0
   10eae:	713b      	strb	r3, [r7, #4]
   10eb0:	2302      	movs	r3, #2
   10eb2:	717b      	strb	r3, [r7, #5]
   10eb4:	b08a      	sub	sp, #40	; 0x28
   10eb6:	46ec      	mov	ip, sp
   10eb8:	f11c 0210 	adds.w	r2, ip, #16
   10ebc:	d01a      	beq.n	10ef4 <disconnected+0x60>
   10ebe:	2012      	movs	r0, #18
   10ec0:	b122      	cbz	r2, 10ecc <disconnected+0x38>
   10ec2:	2804      	cmp	r0, #4
   10ec4:	dd02      	ble.n	10ecc <disconnected+0x38>
   10ec6:	4b32      	ldr	r3, [pc, #200]	; (10f90 <disconnected+0xfc>)
   10ec8:	f8cc 3014 	str.w	r3, [ip, #20]
   10ecc:	2300      	movs	r3, #0
   10ece:	703b      	strb	r3, [r7, #0]
   10ed0:	2302      	movs	r3, #2
   10ed2:	707b      	strb	r3, [r7, #1]
   10ed4:	b1da      	cbz	r2, 10f0e <disconnected+0x7a>
   10ed6:	4603      	mov	r3, r0
   10ed8:	2808      	cmp	r0, #8
   10eda:	dd03      	ble.n	10ee4 <disconnected+0x50>
   10edc:	f107 0108 	add.w	r1, r7, #8
   10ee0:	f8cc 1018 	str.w	r1, [ip, #24]
   10ee4:	2b0c      	cmp	r3, #12
   10ee6:	dd01      	ble.n	10eec <disconnected+0x58>
   10ee8:	f8cc 501c 	str.w	r5, [ip, #28]
   10eec:	f10c 0320 	add.w	r3, ip, #32
   10ef0:	2100      	movs	r1, #0
   10ef2:	e00a      	b.n	10f0a <disconnected+0x76>
   10ef4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10ef8:	e7e2      	b.n	10ec0 <disconnected+0x2c>
   10efa:	f101 0528 	add.w	r5, r1, #40	; 0x28
   10efe:	443d      	add	r5, r7
   10f00:	f815 5c28 	ldrb.w	r5, [r5, #-40]
   10f04:	f803 5b01 	strb.w	r5, [r3], #1
   10f08:	3101      	adds	r1, #1
   10f0a:	2901      	cmp	r1, #1
   10f0c:	d9f5      	bls.n	10efa <disconnected+0x66>
   10f0e:	2811      	cmp	r0, #17
   10f10:	dd3a      	ble.n	10f88 <disconnected+0xf4>
   10f12:	2312      	movs	r3, #18
   10f14:	b14a      	cbz	r2, 10f2a <disconnected+0x96>
   10f16:	2104      	movs	r1, #4
   10f18:	7139      	strb	r1, [r7, #4]
   10f1a:	2100      	movs	r1, #0
   10f1c:	7179      	strb	r1, [r7, #5]
   10f1e:	71b9      	strb	r1, [r7, #6]
   10f20:	2101      	movs	r1, #1
   10f22:	71f9      	strb	r1, [r7, #7]
   10f24:	6878      	ldr	r0, [r7, #4]
   10f26:	f8cc 0010 	str.w	r0, [ip, #16]
   10f2a:	2100      	movs	r1, #0
   10f2c:	f36f 0100 	bfc	r1, #0, #1
   10f30:	f36f 0141 	bfc	r1, #1, #1
   10f34:	f36f 0182 	bfc	r1, #2, #1
   10f38:	f36f 01c5 	bfc	r1, #3, #3
   10f3c:	2003      	movs	r0, #3
   10f3e:	f360 1188 	bfi	r1, r0, #6, #3
   10f42:	f3c3 0309 	ubfx	r3, r3, #0, #10
   10f46:	f363 2152 	bfi	r1, r3, #9, #10
   10f4a:	f36f 41de 	bfc	r1, #19, #12
   10f4e:	f36f 71df 	bfc	r1, #31, #1
   10f52:	2300      	movs	r3, #0
   10f54:	480f      	ldr	r0, [pc, #60]	; (10f94 <disconnected+0x100>)
   10f56:	f005 fcf9 	bl	1694c <z_impl_z_log_msg_static_create>
   10f5a:	46a5      	mov	sp, r4
	if (auth_conn) {
   10f5c:	4b0e      	ldr	r3, [pc, #56]	; (10f98 <disconnected+0x104>)
   10f5e:	6818      	ldr	r0, [r3, #0]
   10f60:	b120      	cbz	r0, 10f6c <disconnected+0xd8>
		bt_conn_unref(auth_conn);
   10f62:	f00f f9a9 	bl	202b8 <bt_conn_unref>
		auth_conn = NULL;
   10f66:	4b0c      	ldr	r3, [pc, #48]	; (10f98 <disconnected+0x104>)
   10f68:	2200      	movs	r2, #0
   10f6a:	601a      	str	r2, [r3, #0]
	if (current_conn) {
   10f6c:	4b0b      	ldr	r3, [pc, #44]	; (10f9c <disconnected+0x108>)
   10f6e:	6818      	ldr	r0, [r3, #0]
   10f70:	b138      	cbz	r0, 10f82 <disconnected+0xee>
		bt_conn_unref(current_conn);
   10f72:	f00f f9a1 	bl	202b8 <bt_conn_unref>
		current_conn = NULL;
   10f76:	4b09      	ldr	r3, [pc, #36]	; (10f9c <disconnected+0x108>)
   10f78:	2200      	movs	r2, #0
   10f7a:	601a      	str	r2, [r3, #0]
		dk_set_led_off(CON_STATUS_LED);
   10f7c:	2001      	movs	r0, #1
   10f7e:	f02c f9e9 	bl	3d354 <dk_set_led_off>
}
   10f82:	3728      	adds	r7, #40	; 0x28
   10f84:	46bd      	mov	sp, r7
   10f86:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   10f88:	f06f 031b 	mvn.w	r3, #27
   10f8c:	e7c2      	b.n	10f14 <disconnected+0x80>
   10f8e:	bf00      	nop
   10f90:	0003fdd4 	.word	0x0003fdd4
   10f94:	0003f490 	.word	0x0003f490
   10f98:	2000bde0 	.word	0x2000bde0
   10f9c:	2000bde4 	.word	0x2000bde4

00010fa0 <auth_passkey_confirm>:
static void auth_passkey_confirm(struct bt_conn *conn, unsigned int passkey) {
   10fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fa2:	b091      	sub	sp, #68	; 0x44
   10fa4:	af00      	add	r7, sp, #0
   10fa6:	4604      	mov	r4, r0
   10fa8:	460d      	mov	r5, r1
	auth_conn = bt_conn_ref(conn);
   10faa:	f00f f95b 	bl	20264 <bt_conn_ref>
   10fae:	4b45      	ldr	r3, [pc, #276]	; (110c4 <auth_passkey_confirm+0x124>)
   10fb0:	6018      	str	r0, [r3, #0]
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10fb2:	4620      	mov	r0, r4
   10fb4:	f028 fa11 	bl	393da <bt_conn_get_dst>
   10fb8:	221e      	movs	r2, #30
   10fba:	f107 0108 	add.w	r1, r7, #8
   10fbe:	f7ff fca7 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Passkey for %s: %06u", addr, passkey);
   10fc2:	466c      	mov	r4, sp
   10fc4:	2300      	movs	r3, #0
   10fc6:	713b      	strb	r3, [r7, #4]
   10fc8:	2302      	movs	r3, #2
   10fca:	717b      	strb	r3, [r7, #5]
   10fcc:	b08a      	sub	sp, #40	; 0x28
   10fce:	46ec      	mov	ip, sp
   10fd0:	f11c 0210 	adds.w	r2, ip, #16
   10fd4:	d01a      	beq.n	1100c <auth_passkey_confirm+0x6c>
   10fd6:	2012      	movs	r0, #18
   10fd8:	b122      	cbz	r2, 10fe4 <auth_passkey_confirm+0x44>
   10fda:	2804      	cmp	r0, #4
   10fdc:	dd02      	ble.n	10fe4 <auth_passkey_confirm+0x44>
   10fde:	4b3a      	ldr	r3, [pc, #232]	; (110c8 <auth_passkey_confirm+0x128>)
   10fe0:	f8cc 3014 	str.w	r3, [ip, #20]
   10fe4:	2300      	movs	r3, #0
   10fe6:	703b      	strb	r3, [r7, #0]
   10fe8:	2302      	movs	r3, #2
   10fea:	707b      	strb	r3, [r7, #1]
   10fec:	b1da      	cbz	r2, 11026 <auth_passkey_confirm+0x86>
   10fee:	4603      	mov	r3, r0
   10ff0:	2808      	cmp	r0, #8
   10ff2:	dd03      	ble.n	10ffc <auth_passkey_confirm+0x5c>
   10ff4:	f107 0108 	add.w	r1, r7, #8
   10ff8:	f8cc 1018 	str.w	r1, [ip, #24]
   10ffc:	2b0c      	cmp	r3, #12
   10ffe:	dd01      	ble.n	11004 <auth_passkey_confirm+0x64>
   11000:	f8cc 501c 	str.w	r5, [ip, #28]
   11004:	f10c 0320 	add.w	r3, ip, #32
   11008:	2100      	movs	r1, #0
   1100a:	e00a      	b.n	11022 <auth_passkey_confirm+0x82>
   1100c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   11010:	e7e2      	b.n	10fd8 <auth_passkey_confirm+0x38>
   11012:	f101 0540 	add.w	r5, r1, #64	; 0x40
   11016:	443d      	add	r5, r7
   11018:	f815 5c40 	ldrb.w	r5, [r5, #-64]
   1101c:	f803 5b01 	strb.w	r5, [r3], #1
   11020:	3101      	adds	r1, #1
   11022:	2901      	cmp	r1, #1
   11024:	d9f5      	bls.n	11012 <auth_passkey_confirm+0x72>
   11026:	2811      	cmp	r0, #17
   11028:	dd49      	ble.n	110be <auth_passkey_confirm+0x11e>
   1102a:	2312      	movs	r3, #18
   1102c:	b14a      	cbz	r2, 11042 <auth_passkey_confirm+0xa2>
   1102e:	2104      	movs	r1, #4
   11030:	7139      	strb	r1, [r7, #4]
   11032:	2100      	movs	r1, #0
   11034:	7179      	strb	r1, [r7, #5]
   11036:	71b9      	strb	r1, [r7, #6]
   11038:	2101      	movs	r1, #1
   1103a:	71f9      	strb	r1, [r7, #7]
   1103c:	6878      	ldr	r0, [r7, #4]
   1103e:	f8cc 0010 	str.w	r0, [ip, #16]
   11042:	2100      	movs	r1, #0
   11044:	f36f 0100 	bfc	r1, #0, #1
   11048:	f36f 0141 	bfc	r1, #1, #1
   1104c:	f36f 0182 	bfc	r1, #2, #1
   11050:	f36f 01c5 	bfc	r1, #3, #3
   11054:	2503      	movs	r5, #3
   11056:	f365 1188 	bfi	r1, r5, #6, #3
   1105a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1105e:	f363 2152 	bfi	r1, r3, #9, #10
   11062:	f36f 41de 	bfc	r1, #19, #12
   11066:	f36f 71df 	bfc	r1, #31, #1
   1106a:	4e18      	ldr	r6, [pc, #96]	; (110cc <auth_passkey_confirm+0x12c>)
   1106c:	2300      	movs	r3, #0
   1106e:	4630      	mov	r0, r6
   11070:	f005 fc6c 	bl	1694c <z_impl_z_log_msg_static_create>
   11074:	46a5      	mov	sp, r4
	LOG_INF("Press Button 1 to confirm, Button 2 to reject.");
   11076:	4b16      	ldr	r3, [pc, #88]	; (110d0 <auth_passkey_confirm+0x130>)
   11078:	63fb      	str	r3, [r7, #60]	; 0x3c
   1107a:	2302      	movs	r3, #2
   1107c:	713b      	strb	r3, [r7, #4]
   1107e:	2300      	movs	r3, #0
   11080:	717b      	strb	r3, [r7, #5]
   11082:	71bb      	strb	r3, [r7, #6]
   11084:	71fb      	strb	r3, [r7, #7]
   11086:	687a      	ldr	r2, [r7, #4]
   11088:	63ba      	str	r2, [r7, #56]	; 0x38
   1108a:	4619      	mov	r1, r3
   1108c:	f363 0100 	bfi	r1, r3, #0, #1
   11090:	f363 0141 	bfi	r1, r3, #1, #1
   11094:	f363 0182 	bfi	r1, r3, #2, #1
   11098:	f363 01c5 	bfi	r1, r3, #3, #3
   1109c:	f365 1188 	bfi	r1, r5, #6, #3
   110a0:	2208      	movs	r2, #8
   110a2:	f362 2152 	bfi	r1, r2, #9, #10
   110a6:	f363 41de 	bfi	r1, r3, #19, #12
   110aa:	f363 71df 	bfi	r1, r3, #31, #1
   110ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
   110b2:	4630      	mov	r0, r6
   110b4:	f005 fc4a 	bl	1694c <z_impl_z_log_msg_static_create>
}
   110b8:	3744      	adds	r7, #68	; 0x44
   110ba:	46bd      	mov	sp, r7
   110bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Passkey for %s: %06u", addr, passkey);
   110be:	f06f 031b 	mvn.w	r3, #27
   110c2:	e7b3      	b.n	1102c <auth_passkey_confirm+0x8c>
   110c4:	2000bde0 	.word	0x2000bde0
   110c8:	0003fdbc 	.word	0x0003fdbc
   110cc:	0003f490 	.word	0x0003f490
   110d0:	0003fdf4 	.word	0x0003fdf4

000110d4 <connected>:
static void connected(struct bt_conn *conn, uint8_t err) {
   110d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110d6:	b093      	sub	sp, #76	; 0x4c
   110d8:	af00      	add	r7, sp, #0
	if (err) {
   110da:	2900      	cmp	r1, #0
   110dc:	d041      	beq.n	11162 <connected+0x8e>
   110de:	4608      	mov	r0, r1
		LOG_ERR("Connection failed (err %u)", err);
   110e0:	466d      	mov	r5, sp
   110e2:	b088      	sub	sp, #32
   110e4:	466b      	mov	r3, sp
   110e6:	f113 0210 	adds.w	r2, r3, #16
   110ea:	d00d      	beq.n	11108 <connected+0x34>
   110ec:	210c      	movs	r1, #12
   110ee:	b13a      	cbz	r2, 11100 <connected+0x2c>
   110f0:	460c      	mov	r4, r1
   110f2:	2904      	cmp	r1, #4
   110f4:	dd01      	ble.n	110fa <connected+0x26>
   110f6:	4e85      	ldr	r6, [pc, #532]	; (1130c <connected+0x238>)
   110f8:	615e      	str	r6, [r3, #20]
   110fa:	2c08      	cmp	r4, #8
   110fc:	dd07      	ble.n	1110e <connected+0x3a>
   110fe:	6198      	str	r0, [r3, #24]
   11100:	290b      	cmp	r1, #11
   11102:	dd2b      	ble.n	1115c <connected+0x88>
   11104:	240c      	movs	r4, #12
   11106:	e004      	b.n	11112 <connected+0x3e>
   11108:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1110c:	e7ef      	b.n	110ee <connected+0x1a>
   1110e:	f06f 041b 	mvn.w	r4, #27
   11112:	b13a      	cbz	r2, 11124 <connected+0x50>
   11114:	2103      	movs	r1, #3
   11116:	7239      	strb	r1, [r7, #8]
   11118:	2100      	movs	r1, #0
   1111a:	7279      	strb	r1, [r7, #9]
   1111c:	72b9      	strb	r1, [r7, #10]
   1111e:	72f9      	strb	r1, [r7, #11]
   11120:	68b8      	ldr	r0, [r7, #8]
   11122:	6118      	str	r0, [r3, #16]
   11124:	2100      	movs	r1, #0
   11126:	f36f 0100 	bfc	r1, #0, #1
   1112a:	f36f 0141 	bfc	r1, #1, #1
   1112e:	f36f 0182 	bfc	r1, #2, #1
   11132:	f36f 01c5 	bfc	r1, #3, #3
   11136:	2301      	movs	r3, #1
   11138:	f363 1188 	bfi	r1, r3, #6, #3
   1113c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   11140:	f363 2152 	bfi	r1, r3, #9, #10
   11144:	f36f 41de 	bfc	r1, #19, #12
   11148:	f36f 71df 	bfc	r1, #31, #1
   1114c:	2300      	movs	r3, #0
   1114e:	4870      	ldr	r0, [pc, #448]	; (11310 <connected+0x23c>)
   11150:	f005 fbfc 	bl	1694c <z_impl_z_log_msg_static_create>
   11154:	46ad      	mov	sp, r5
}
   11156:	374c      	adds	r7, #76	; 0x4c
   11158:	46bd      	mov	sp, r7
   1115a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Connection failed (err %u)", err);
   1115c:	f06f 041b 	mvn.w	r4, #27
   11160:	e7d7      	b.n	11112 <connected+0x3e>
   11162:	4604      	mov	r4, r0
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11164:	f028 f939 	bl	393da <bt_conn_get_dst>
   11168:	221e      	movs	r2, #30
   1116a:	f107 0110 	add.w	r1, r7, #16
   1116e:	f7ff fbcf 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Connected %s", addr);
   11172:	466d      	mov	r5, sp
   11174:	2300      	movs	r3, #0
   11176:	723b      	strb	r3, [r7, #8]
   11178:	2302      	movs	r3, #2
   1117a:	727b      	strb	r3, [r7, #9]
   1117c:	b088      	sub	sp, #32
   1117e:	46ec      	mov	ip, sp
   11180:	f11c 0210 	adds.w	r2, ip, #16
   11184:	d015      	beq.n	111b2 <connected+0xde>
   11186:	200e      	movs	r0, #14
   11188:	b122      	cbz	r2, 11194 <connected+0xc0>
   1118a:	2804      	cmp	r0, #4
   1118c:	dd02      	ble.n	11194 <connected+0xc0>
   1118e:	4b61      	ldr	r3, [pc, #388]	; (11314 <connected+0x240>)
   11190:	f8cc 3014 	str.w	r3, [ip, #20]
   11194:	2300      	movs	r3, #0
   11196:	713b      	strb	r3, [r7, #4]
   11198:	2302      	movs	r3, #2
   1119a:	717b      	strb	r3, [r7, #5]
   1119c:	b1ba      	cbz	r2, 111ce <connected+0xfa>
   1119e:	2808      	cmp	r0, #8
   111a0:	dd03      	ble.n	111aa <connected+0xd6>
   111a2:	f107 0310 	add.w	r3, r7, #16
   111a6:	f8cc 3018 	str.w	r3, [ip, #24]
   111aa:	f10c 031c 	add.w	r3, ip, #28
   111ae:	2100      	movs	r1, #0
   111b0:	e00b      	b.n	111ca <connected+0xf6>
   111b2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   111b6:	e7e7      	b.n	11188 <connected+0xb4>
   111b8:	f101 0648 	add.w	r6, r1, #72	; 0x48
   111bc:	eb06 0e07 	add.w	lr, r6, r7
   111c0:	f81e ec44 	ldrb.w	lr, [lr, #-68]
   111c4:	f803 eb01 	strb.w	lr, [r3], #1
   111c8:	3101      	adds	r1, #1
   111ca:	2901      	cmp	r1, #1
   111cc:	d9f4      	bls.n	111b8 <connected+0xe4>
   111ce:	280d      	cmp	r0, #13
   111d0:	dd4b      	ble.n	1126a <connected+0x196>
   111d2:	230e      	movs	r3, #14
   111d4:	b14a      	cbz	r2, 111ea <connected+0x116>
   111d6:	2103      	movs	r1, #3
   111d8:	7239      	strb	r1, [r7, #8]
   111da:	2100      	movs	r1, #0
   111dc:	7279      	strb	r1, [r7, #9]
   111de:	72b9      	strb	r1, [r7, #10]
   111e0:	2101      	movs	r1, #1
   111e2:	72f9      	strb	r1, [r7, #11]
   111e4:	68b8      	ldr	r0, [r7, #8]
   111e6:	f8cc 0010 	str.w	r0, [ip, #16]
   111ea:	2100      	movs	r1, #0
   111ec:	f36f 0100 	bfc	r1, #0, #1
   111f0:	f36f 0141 	bfc	r1, #1, #1
   111f4:	f36f 0182 	bfc	r1, #2, #1
   111f8:	f36f 01c5 	bfc	r1, #3, #3
   111fc:	2003      	movs	r0, #3
   111fe:	f360 1188 	bfi	r1, r0, #6, #3
   11202:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11206:	f363 2152 	bfi	r1, r3, #9, #10
   1120a:	f36f 41de 	bfc	r1, #19, #12
   1120e:	f36f 71df 	bfc	r1, #31, #1
   11212:	2300      	movs	r3, #0
   11214:	483e      	ldr	r0, [pc, #248]	; (11310 <connected+0x23c>)
   11216:	f005 fb99 	bl	1694c <z_impl_z_log_msg_static_create>
   1121a:	46ad      	mov	sp, r5
	current_conn = bt_conn_ref(conn);
   1121c:	4620      	mov	r0, r4
   1121e:	f00f f821 	bl	20264 <bt_conn_ref>
   11222:	4b3d      	ldr	r3, [pc, #244]	; (11318 <connected+0x244>)
   11224:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   11226:	2001      	movs	r0, #1
   11228:	f02c f88f 	bl	3d34a <dk_set_led_on>
    struct bt_conn_le_phy_param phy_2m = {
   1122c:	4b3b      	ldr	r3, [pc, #236]	; (1131c <connected+0x248>)
   1122e:	681b      	ldr	r3, [r3, #0]
   11230:	60fb      	str	r3, [r7, #12]
    int phy_err = bt_conn_le_phy_update(conn, &phy_2m);
   11232:	f107 010c 	add.w	r1, r7, #12
   11236:	4620      	mov	r0, r4
   11238:	f028 f8d1 	bl	393de <bt_conn_le_phy_update>
    if (phy_err) {
   1123c:	4604      	mov	r4, r0
   1123e:	2800      	cmp	r0, #0
   11240:	d041      	beq.n	112c6 <connected+0x1f2>
        LOG_ERR("Failed to set 2M PHY (err %d)", phy_err);
   11242:	466d      	mov	r5, sp
   11244:	b088      	sub	sp, #32
   11246:	466b      	mov	r3, sp
   11248:	f113 0210 	adds.w	r2, r3, #16
   1124c:	d010      	beq.n	11270 <connected+0x19c>
   1124e:	210c      	movs	r1, #12
   11250:	b13a      	cbz	r2, 11262 <connected+0x18e>
   11252:	4608      	mov	r0, r1
   11254:	2904      	cmp	r1, #4
   11256:	dd01      	ble.n	1125c <connected+0x188>
   11258:	4e31      	ldr	r6, [pc, #196]	; (11320 <connected+0x24c>)
   1125a:	615e      	str	r6, [r3, #20]
   1125c:	2808      	cmp	r0, #8
   1125e:	dd0a      	ble.n	11276 <connected+0x1a2>
   11260:	619c      	str	r4, [r3, #24]
   11262:	290b      	cmp	r1, #11
   11264:	dd2c      	ble.n	112c0 <connected+0x1ec>
   11266:	240c      	movs	r4, #12
   11268:	e007      	b.n	1127a <connected+0x1a6>
	LOG_INF("Connected %s", addr);
   1126a:	f06f 031b 	mvn.w	r3, #27
   1126e:	e7b1      	b.n	111d4 <connected+0x100>
        LOG_ERR("Failed to set 2M PHY (err %d)", phy_err);
   11270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11274:	e7ec      	b.n	11250 <connected+0x17c>
   11276:	f06f 041b 	mvn.w	r4, #27
   1127a:	b13a      	cbz	r2, 1128c <connected+0x1b8>
   1127c:	2103      	movs	r1, #3
   1127e:	7239      	strb	r1, [r7, #8]
   11280:	2100      	movs	r1, #0
   11282:	7279      	strb	r1, [r7, #9]
   11284:	72b9      	strb	r1, [r7, #10]
   11286:	72f9      	strb	r1, [r7, #11]
   11288:	68b8      	ldr	r0, [r7, #8]
   1128a:	6118      	str	r0, [r3, #16]
   1128c:	2100      	movs	r1, #0
   1128e:	f36f 0100 	bfc	r1, #0, #1
   11292:	f36f 0141 	bfc	r1, #1, #1
   11296:	f36f 0182 	bfc	r1, #2, #1
   1129a:	f36f 01c5 	bfc	r1, #3, #3
   1129e:	2301      	movs	r3, #1
   112a0:	f363 1188 	bfi	r1, r3, #6, #3
   112a4:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   112a8:	f363 2152 	bfi	r1, r3, #9, #10
   112ac:	f36f 41de 	bfc	r1, #19, #12
   112b0:	f36f 71df 	bfc	r1, #31, #1
   112b4:	2300      	movs	r3, #0
   112b6:	4816      	ldr	r0, [pc, #88]	; (11310 <connected+0x23c>)
   112b8:	f005 fb48 	bl	1694c <z_impl_z_log_msg_static_create>
   112bc:	46ad      	mov	sp, r5
   112be:	e74a      	b.n	11156 <connected+0x82>
   112c0:	f06f 041b 	mvn.w	r4, #27
   112c4:	e7d9      	b.n	1127a <connected+0x1a6>
        LOG_INF("2M PHY enabled at connection");
   112c6:	4b17      	ldr	r3, [pc, #92]	; (11324 <connected+0x250>)
   112c8:	647b      	str	r3, [r7, #68]	; 0x44
   112ca:	2302      	movs	r3, #2
   112cc:	723b      	strb	r3, [r7, #8]
   112ce:	2300      	movs	r3, #0
   112d0:	727b      	strb	r3, [r7, #9]
   112d2:	72bb      	strb	r3, [r7, #10]
   112d4:	72fb      	strb	r3, [r7, #11]
   112d6:	68ba      	ldr	r2, [r7, #8]
   112d8:	643a      	str	r2, [r7, #64]	; 0x40
   112da:	4619      	mov	r1, r3
   112dc:	f363 0100 	bfi	r1, r3, #0, #1
   112e0:	f363 0141 	bfi	r1, r3, #1, #1
   112e4:	f363 0182 	bfi	r1, r3, #2, #1
   112e8:	f363 01c5 	bfi	r1, r3, #3, #3
   112ec:	2203      	movs	r2, #3
   112ee:	f362 1188 	bfi	r1, r2, #6, #3
   112f2:	2208      	movs	r2, #8
   112f4:	f362 2152 	bfi	r1, r2, #9, #10
   112f8:	f363 41de 	bfi	r1, r3, #19, #12
   112fc:	f363 71df 	bfi	r1, r3, #31, #1
   11300:	f107 0240 	add.w	r2, r7, #64	; 0x40
   11304:	4802      	ldr	r0, [pc, #8]	; (11310 <connected+0x23c>)
   11306:	f005 fb21 	bl	1694c <z_impl_z_log_msg_static_create>
   1130a:	e724      	b.n	11156 <connected+0x82>
   1130c:	0003fe24 	.word	0x0003fe24
   11310:	0003f490 	.word	0x0003f490
   11314:	0003fe40 	.word	0x0003fe40
   11318:	2000bde4 	.word	0x2000bde4
   1131c:	0003f5b0 	.word	0x0003f5b0
   11320:	0003fe50 	.word	0x0003fe50
   11324:	0003fe70 	.word	0x0003fe70

00011328 <toggle_ble_phy>:
static void toggle_ble_phy(void) {
   11328:	b5f0      	push	{r4, r5, r6, r7, lr}
   1132a:	b09b      	sub	sp, #108	; 0x6c
   1132c:	af00      	add	r7, sp, #0
	LOG_INF("toggle_ble_phy() called!\n");
   1132e:	4b75      	ldr	r3, [pc, #468]	; (11504 <toggle_ble_phy+0x1dc>)
   11330:	61fb      	str	r3, [r7, #28]
   11332:	2302      	movs	r3, #2
   11334:	703b      	strb	r3, [r7, #0]
   11336:	2300      	movs	r3, #0
   11338:	707b      	strb	r3, [r7, #1]
   1133a:	70bb      	strb	r3, [r7, #2]
   1133c:	70fb      	strb	r3, [r7, #3]
   1133e:	683a      	ldr	r2, [r7, #0]
   11340:	61ba      	str	r2, [r7, #24]
   11342:	4619      	mov	r1, r3
   11344:	f363 0100 	bfi	r1, r3, #0, #1
   11348:	f363 0141 	bfi	r1, r3, #1, #1
   1134c:	f363 0182 	bfi	r1, r3, #2, #1
   11350:	f363 01c5 	bfi	r1, r3, #3, #3
   11354:	2203      	movs	r2, #3
   11356:	f362 1188 	bfi	r1, r2, #6, #3
   1135a:	2208      	movs	r2, #8
   1135c:	f362 2152 	bfi	r1, r2, #9, #10
   11360:	f363 41de 	bfi	r1, r3, #19, #12
   11364:	f363 71df 	bfi	r1, r3, #31, #1
   11368:	f107 0218 	add.w	r2, r7, #24
   1136c:	4866      	ldr	r0, [pc, #408]	; (11508 <toggle_ble_phy+0x1e0>)
   1136e:	f005 faed 	bl	1694c <z_impl_z_log_msg_static_create>
    if (!current_conn) {
   11372:	4b66      	ldr	r3, [pc, #408]	; (1150c <toggle_ble_phy+0x1e4>)
   11374:	681b      	ldr	r3, [r3, #0]
   11376:	2b00      	cmp	r3, #0
   11378:	d048      	beq.n	1140c <toggle_ble_phy+0xe4>
    if (is_phy_2m) {
   1137a:	4b65      	ldr	r3, [pc, #404]	; (11510 <toggle_ble_phy+0x1e8>)
   1137c:	781b      	ldrb	r3, [r3, #0]
   1137e:	2b00      	cmp	r3, #0
   11380:	d067      	beq.n	11452 <toggle_ble_phy+0x12a>
        phy_param.pref_tx_phy = BT_GAP_LE_PHY_1M;
   11382:	2301      	movs	r3, #1
   11384:	71bb      	strb	r3, [r7, #6]
        phy_param.pref_rx_phy = BT_GAP_LE_PHY_1M;
   11386:	71fb      	strb	r3, [r7, #7]
        LOG_INF("Switching to 1M PHY\n");
   11388:	4b62      	ldr	r3, [pc, #392]	; (11514 <toggle_ble_phy+0x1ec>)
   1138a:	64fb      	str	r3, [r7, #76]	; 0x4c
   1138c:	2302      	movs	r3, #2
   1138e:	703b      	strb	r3, [r7, #0]
   11390:	2300      	movs	r3, #0
   11392:	707b      	strb	r3, [r7, #1]
   11394:	70bb      	strb	r3, [r7, #2]
   11396:	70fb      	strb	r3, [r7, #3]
   11398:	683a      	ldr	r2, [r7, #0]
   1139a:	64ba      	str	r2, [r7, #72]	; 0x48
   1139c:	4619      	mov	r1, r3
   1139e:	f363 0100 	bfi	r1, r3, #0, #1
   113a2:	f363 0141 	bfi	r1, r3, #1, #1
   113a6:	f363 0182 	bfi	r1, r3, #2, #1
   113aa:	f363 01c5 	bfi	r1, r3, #3, #3
   113ae:	2203      	movs	r2, #3
   113b0:	f362 1188 	bfi	r1, r2, #6, #3
   113b4:	2208      	movs	r2, #8
   113b6:	f362 2152 	bfi	r1, r2, #9, #10
   113ba:	f363 41de 	bfi	r1, r3, #19, #12
   113be:	f363 71df 	bfi	r1, r3, #31, #1
   113c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
   113c6:	4850      	ldr	r0, [pc, #320]	; (11508 <toggle_ble_phy+0x1e0>)
   113c8:	f005 fac0 	bl	1694c <z_impl_z_log_msg_static_create>
    phy_param.options = 0;
   113cc:	2300      	movs	r3, #0
   113ce:	80bb      	strh	r3, [r7, #4]
    err = bt_conn_le_phy_update(current_conn, &phy_param);
   113d0:	1d39      	adds	r1, r7, #4
   113d2:	4b4e      	ldr	r3, [pc, #312]	; (1150c <toggle_ble_phy+0x1e4>)
   113d4:	6818      	ldr	r0, [r3, #0]
   113d6:	f028 f802 	bl	393de <bt_conn_le_phy_update>
    if (err) {
   113da:	4605      	mov	r5, r0
   113dc:	2800      	cmp	r0, #0
   113de:	f000 808a 	beq.w	114f6 <toggle_ble_phy+0x1ce>
        LOG_ERR("Failed to update PHY (err %d)\n", err);
   113e2:	466c      	mov	r4, sp
   113e4:	b088      	sub	sp, #32
   113e6:	466b      	mov	r3, sp
   113e8:	f113 0210 	adds.w	r2, r3, #16
   113ec:	d056      	beq.n	1149c <toggle_ble_phy+0x174>
   113ee:	210c      	movs	r1, #12
   113f0:	b13a      	cbz	r2, 11402 <toggle_ble_phy+0xda>
   113f2:	4608      	mov	r0, r1
   113f4:	2904      	cmp	r1, #4
   113f6:	dd01      	ble.n	113fc <toggle_ble_phy+0xd4>
   113f8:	4e47      	ldr	r6, [pc, #284]	; (11518 <toggle_ble_phy+0x1f0>)
   113fa:	615e      	str	r6, [r3, #20]
   113fc:	2808      	cmp	r0, #8
   113fe:	dd50      	ble.n	114a2 <toggle_ble_phy+0x17a>
   11400:	619d      	str	r5, [r3, #24]
   11402:	290b      	cmp	r1, #11
   11404:	dd74      	ble.n	114f0 <toggle_ble_phy+0x1c8>
   11406:	f04f 0c0c 	mov.w	ip, #12
   1140a:	e04c      	b.n	114a6 <toggle_ble_phy+0x17e>
        LOG_INF("No active BLE connection\n");
   1140c:	4b43      	ldr	r3, [pc, #268]	; (1151c <toggle_ble_phy+0x1f4>)
   1140e:	667b      	str	r3, [r7, #100]	; 0x64
   11410:	2302      	movs	r3, #2
   11412:	703b      	strb	r3, [r7, #0]
   11414:	2300      	movs	r3, #0
   11416:	707b      	strb	r3, [r7, #1]
   11418:	70bb      	strb	r3, [r7, #2]
   1141a:	70fb      	strb	r3, [r7, #3]
   1141c:	683a      	ldr	r2, [r7, #0]
   1141e:	663a      	str	r2, [r7, #96]	; 0x60
   11420:	4619      	mov	r1, r3
   11422:	f363 0100 	bfi	r1, r3, #0, #1
   11426:	f363 0141 	bfi	r1, r3, #1, #1
   1142a:	f363 0182 	bfi	r1, r3, #2, #1
   1142e:	f363 01c5 	bfi	r1, r3, #3, #3
   11432:	2203      	movs	r2, #3
   11434:	f362 1188 	bfi	r1, r2, #6, #3
   11438:	2208      	movs	r2, #8
   1143a:	f362 2152 	bfi	r1, r2, #9, #10
   1143e:	f363 41de 	bfi	r1, r3, #19, #12
   11442:	f363 71df 	bfi	r1, r3, #31, #1
   11446:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1144a:	482f      	ldr	r0, [pc, #188]	; (11508 <toggle_ble_phy+0x1e0>)
   1144c:	f005 fa7e 	bl	1694c <z_impl_z_log_msg_static_create>
        return;
   11450:	e04b      	b.n	114ea <toggle_ble_phy+0x1c2>
        phy_param.pref_tx_phy = BT_GAP_LE_PHY_2M;
   11452:	2302      	movs	r3, #2
   11454:	71bb      	strb	r3, [r7, #6]
        phy_param.pref_rx_phy = BT_GAP_LE_PHY_2M;
   11456:	71fb      	strb	r3, [r7, #7]
        LOG_INF("Switching to 2M PHY\n");
   11458:	4a31      	ldr	r2, [pc, #196]	; (11520 <toggle_ble_phy+0x1f8>)
   1145a:	637a      	str	r2, [r7, #52]	; 0x34
   1145c:	703b      	strb	r3, [r7, #0]
   1145e:	2300      	movs	r3, #0
   11460:	707b      	strb	r3, [r7, #1]
   11462:	70bb      	strb	r3, [r7, #2]
   11464:	70fb      	strb	r3, [r7, #3]
   11466:	683a      	ldr	r2, [r7, #0]
   11468:	633a      	str	r2, [r7, #48]	; 0x30
   1146a:	4619      	mov	r1, r3
   1146c:	f363 0100 	bfi	r1, r3, #0, #1
   11470:	f363 0141 	bfi	r1, r3, #1, #1
   11474:	f363 0182 	bfi	r1, r3, #2, #1
   11478:	f363 01c5 	bfi	r1, r3, #3, #3
   1147c:	2203      	movs	r2, #3
   1147e:	f362 1188 	bfi	r1, r2, #6, #3
   11482:	2208      	movs	r2, #8
   11484:	f362 2152 	bfi	r1, r2, #9, #10
   11488:	f363 41de 	bfi	r1, r3, #19, #12
   1148c:	f363 71df 	bfi	r1, r3, #31, #1
   11490:	f107 0230 	add.w	r2, r7, #48	; 0x30
   11494:	481c      	ldr	r0, [pc, #112]	; (11508 <toggle_ble_phy+0x1e0>)
   11496:	f005 fa59 	bl	1694c <z_impl_z_log_msg_static_create>
   1149a:	e797      	b.n	113cc <toggle_ble_phy+0xa4>
        LOG_ERR("Failed to update PHY (err %d)\n", err);
   1149c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   114a0:	e7a6      	b.n	113f0 <toggle_ble_phy+0xc8>
   114a2:	f06f 0c1b 	mvn.w	ip, #27
   114a6:	b13a      	cbz	r2, 114b8 <toggle_ble_phy+0x190>
   114a8:	2103      	movs	r1, #3
   114aa:	7039      	strb	r1, [r7, #0]
   114ac:	2100      	movs	r1, #0
   114ae:	7079      	strb	r1, [r7, #1]
   114b0:	70b9      	strb	r1, [r7, #2]
   114b2:	70f9      	strb	r1, [r7, #3]
   114b4:	6838      	ldr	r0, [r7, #0]
   114b6:	6118      	str	r0, [r3, #16]
   114b8:	2100      	movs	r1, #0
   114ba:	f36f 0100 	bfc	r1, #0, #1
   114be:	f36f 0141 	bfc	r1, #1, #1
   114c2:	f36f 0182 	bfc	r1, #2, #1
   114c6:	f36f 01c5 	bfc	r1, #3, #3
   114ca:	2301      	movs	r3, #1
   114cc:	f363 1188 	bfi	r1, r3, #6, #3
   114d0:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   114d4:	f363 2152 	bfi	r1, r3, #9, #10
   114d8:	f36f 41de 	bfc	r1, #19, #12
   114dc:	f36f 71df 	bfc	r1, #31, #1
   114e0:	2300      	movs	r3, #0
   114e2:	4809      	ldr	r0, [pc, #36]	; (11508 <toggle_ble_phy+0x1e0>)
   114e4:	f005 fa32 	bl	1694c <z_impl_z_log_msg_static_create>
   114e8:	46a5      	mov	sp, r4
}
   114ea:	376c      	adds	r7, #108	; 0x6c
   114ec:	46bd      	mov	sp, r7
   114ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("Failed to update PHY (err %d)\n", err);
   114f0:	f06f 0c1b 	mvn.w	ip, #27
   114f4:	e7d7      	b.n	114a6 <toggle_ble_phy+0x17e>
        is_phy_2m = !is_phy_2m;  // 切换状态
   114f6:	4a06      	ldr	r2, [pc, #24]	; (11510 <toggle_ble_phy+0x1e8>)
   114f8:	7813      	ldrb	r3, [r2, #0]
   114fa:	f083 0301 	eor.w	r3, r3, #1
   114fe:	7013      	strb	r3, [r2, #0]
   11500:	e7f3      	b.n	114ea <toggle_ble_phy+0x1c2>
   11502:	bf00      	nop
   11504:	0003fe90 	.word	0x0003fe90
   11508:	0003f490 	.word	0x0003f490
   1150c:	2000bde4 	.word	0x2000bde4
   11510:	20008834 	.word	0x20008834
   11514:	0003fec8 	.word	0x0003fec8
   11518:	0003fef8 	.word	0x0003fef8
   1151c:	0003feac 	.word	0x0003feac
   11520:	0003fee0 	.word	0x0003fee0

00011524 <bt_receive_cb>:
static void bt_receive_cb(struct bt_conn *conn, const uint8_t *const data, uint16_t len) {
   11524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11528:	b090      	sub	sp, #64	; 0x40
   1152a:	af00      	add	r7, sp, #0
   1152c:	4689      	mov	r9, r1
   1152e:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   11530:	2400      	movs	r4, #0
   11532:	60bc      	str	r4, [r7, #8]
   11534:	60fc      	str	r4, [r7, #12]
   11536:	613c      	str	r4, [r7, #16]
   11538:	617c      	str	r4, [r7, #20]
   1153a:	61bc      	str	r4, [r7, #24]
   1153c:	61fc      	str	r4, [r7, #28]
   1153e:	623c      	str	r4, [r7, #32]
   11540:	84bc      	strh	r4, [r7, #36]	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   11542:	f027 ff4a 	bl	393da <bt_conn_get_dst>
   11546:	221e      	movs	r2, #30
   11548:	f107 0108 	add.w	r1, r7, #8
   1154c:	f7ff f9e0 	bl	10910 <bt_addr_le_to_str>
	LOG_INF("Received data from: %s", addr);
   11550:	466d      	mov	r5, sp
   11552:	713c      	strb	r4, [r7, #4]
   11554:	2302      	movs	r3, #2
   11556:	717b      	strb	r3, [r7, #5]
   11558:	b088      	sub	sp, #32
   1155a:	466c      	mov	r4, sp
   1155c:	f114 0210 	adds.w	r2, r4, #16
   11560:	d013      	beq.n	1158a <bt_receive_cb+0x66>
   11562:	200e      	movs	r0, #14
   11564:	b11a      	cbz	r2, 1156e <bt_receive_cb+0x4a>
   11566:	2804      	cmp	r0, #4
   11568:	dd01      	ble.n	1156e <bt_receive_cb+0x4a>
   1156a:	4b57      	ldr	r3, [pc, #348]	; (116c8 <bt_receive_cb+0x1a4>)
   1156c:	6163      	str	r3, [r4, #20]
   1156e:	2300      	movs	r3, #0
   11570:	703b      	strb	r3, [r7, #0]
   11572:	2302      	movs	r3, #2
   11574:	707b      	strb	r3, [r7, #1]
   11576:	b1aa      	cbz	r2, 115a4 <bt_receive_cb+0x80>
   11578:	2808      	cmp	r0, #8
   1157a:	dd02      	ble.n	11582 <bt_receive_cb+0x5e>
   1157c:	f107 0308 	add.w	r3, r7, #8
   11580:	61a3      	str	r3, [r4, #24]
   11582:	f104 031c 	add.w	r3, r4, #28
   11586:	2100      	movs	r1, #0
   11588:	e00a      	b.n	115a0 <bt_receive_cb+0x7c>
   1158a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1158e:	e7e9      	b.n	11564 <bt_receive_cb+0x40>
   11590:	f101 0c40 	add.w	ip, r1, #64	; 0x40
   11594:	44bc      	add	ip, r7
   11596:	f81c cc40 	ldrb.w	ip, [ip, #-64]
   1159a:	f803 cb01 	strb.w	ip, [r3], #1
   1159e:	3101      	adds	r1, #1
   115a0:	2901      	cmp	r1, #1
   115a2:	d9f5      	bls.n	11590 <bt_receive_cb+0x6c>
   115a4:	280d      	cmp	r0, #13
   115a6:	dd25      	ble.n	115f4 <bt_receive_cb+0xd0>
   115a8:	230e      	movs	r3, #14
   115aa:	b142      	cbz	r2, 115be <bt_receive_cb+0x9a>
   115ac:	2103      	movs	r1, #3
   115ae:	7139      	strb	r1, [r7, #4]
   115b0:	2100      	movs	r1, #0
   115b2:	7179      	strb	r1, [r7, #5]
   115b4:	71b9      	strb	r1, [r7, #6]
   115b6:	2101      	movs	r1, #1
   115b8:	71f9      	strb	r1, [r7, #7]
   115ba:	6878      	ldr	r0, [r7, #4]
   115bc:	6120      	str	r0, [r4, #16]
   115be:	2100      	movs	r1, #0
   115c0:	f36f 0100 	bfc	r1, #0, #1
   115c4:	f36f 0141 	bfc	r1, #1, #1
   115c8:	f36f 0182 	bfc	r1, #2, #1
   115cc:	f36f 01c5 	bfc	r1, #3, #3
   115d0:	2003      	movs	r0, #3
   115d2:	f360 1188 	bfi	r1, r0, #6, #3
   115d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   115da:	f363 2152 	bfi	r1, r3, #9, #10
   115de:	f36f 41de 	bfc	r1, #19, #12
   115e2:	f36f 71df 	bfc	r1, #31, #1
   115e6:	2300      	movs	r3, #0
   115e8:	4838      	ldr	r0, [pc, #224]	; (116cc <bt_receive_cb+0x1a8>)
   115ea:	f005 f9af 	bl	1694c <z_impl_z_log_msg_static_create>
   115ee:	46ad      	mov	sp, r5
	for (uint16_t pos = 0; pos != len;) {
   115f0:	2400      	movs	r4, #0
   115f2:	e044      	b.n	1167e <bt_receive_cb+0x15a>
	LOG_INF("Received data from: %s", addr);
   115f4:	f06f 031b 	mvn.w	r3, #27
   115f8:	e7d7      	b.n	115aa <bt_receive_cb+0x86>
			LOG_WRN("Not able to allocate UART send data buffer");
   115fa:	4b35      	ldr	r3, [pc, #212]	; (116d0 <bt_receive_cb+0x1ac>)
   115fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   115fe:	2202      	movs	r2, #2
   11600:	713a      	strb	r2, [r7, #4]
   11602:	2300      	movs	r3, #0
   11604:	717b      	strb	r3, [r7, #5]
   11606:	71bb      	strb	r3, [r7, #6]
   11608:	71fb      	strb	r3, [r7, #7]
   1160a:	6879      	ldr	r1, [r7, #4]
   1160c:	63b9      	str	r1, [r7, #56]	; 0x38
   1160e:	4619      	mov	r1, r3
   11610:	f363 0100 	bfi	r1, r3, #0, #1
   11614:	f363 0141 	bfi	r1, r3, #1, #1
   11618:	f363 0182 	bfi	r1, r3, #2, #1
   1161c:	f363 01c5 	bfi	r1, r3, #3, #3
   11620:	f362 1188 	bfi	r1, r2, #6, #3
   11624:	2208      	movs	r2, #8
   11626:	f362 2152 	bfi	r1, r2, #9, #10
   1162a:	f363 41de 	bfi	r1, r3, #19, #12
   1162e:	f363 71df 	bfi	r1, r3, #31, #1
   11632:	f107 0238 	add.w	r2, r7, #56	; 0x38
   11636:	4825      	ldr	r0, [pc, #148]	; (116cc <bt_receive_cb+0x1a8>)
   11638:	f005 f988 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1163c:	3740      	adds	r7, #64	; 0x40
   1163e:	46bd      	mov	sp, r7
   11640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			tx->len = (len - pos);
   11644:	1b33      	subs	r3, r6, r4
   11646:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
		memcpy(tx->data, &data[pos], tx->len);
   1164a:	f105 0804 	add.w	r8, r5, #4
   1164e:	f8b5 2204 	ldrh.w	r2, [r5, #516]	; 0x204
   11652:	eb09 0104 	add.w	r1, r9, r4
   11656:	4640      	mov	r0, r8
   11658:	f026 fecf 	bl	383fa <memcpy>
		pos += tx->len;
   1165c:	f8b5 3204 	ldrh.w	r3, [r5, #516]	; 0x204
   11660:	441c      	add	r4, r3
   11662:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   11664:	42a6      	cmp	r6, r4
   11666:	d01c      	beq.n	116a2 <bt_receive_cb+0x17e>
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   11668:	f8b5 2204 	ldrh.w	r2, [r5, #516]	; 0x204
static inline int z_impl_uart_tx(const struct device *dev, const uint8_t *buf,
				 size_t len, int32_t timeout)

{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
   1166c:	4819      	ldr	r0, [pc, #100]	; (116d4 <bt_receive_cb+0x1b0>)
   1166e:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->tx(dev, buf, len, timeout);
   11670:	f8d3 a004 	ldr.w	sl, [r3, #4]
   11674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11678:	4641      	mov	r1, r8
   1167a:	47d0      	blx	sl
		if (err) {
   1167c:	b9f0      	cbnz	r0, 116bc <bt_receive_cb+0x198>
	for (uint16_t pos = 0; pos != len;) {
   1167e:	42b4      	cmp	r4, r6
   11680:	d0dc      	beq.n	1163c <bt_receive_cb+0x118>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   11682:	f44f 7002 	mov.w	r0, #520	; 0x208
   11686:	f02d fbe9 	bl	3ee5c <k_malloc>
		if (!tx) {
   1168a:	4605      	mov	r5, r0
   1168c:	2800      	cmp	r0, #0
   1168e:	d0b4      	beq.n	115fa <bt_receive_cb+0xd6>
		if ((len - pos) > tx_data_size) {
   11690:	1b33      	subs	r3, r6, r4
   11692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11696:	d3d5      	bcc.n	11644 <bt_receive_cb+0x120>
			tx->len = tx_data_size;
   11698:	f240 13ff 	movw	r3, #511	; 0x1ff
   1169c:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
   116a0:	e7d3      	b.n	1164a <bt_receive_cb+0x126>
		if ((pos == len) && (data[len - 1] == '\r')) {
   116a2:	eb09 0206 	add.w	r2, r9, r6
   116a6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   116aa:	2a0d      	cmp	r2, #13
   116ac:	d1dc      	bne.n	11668 <bt_receive_cb+0x144>
			tx->data[tx->len] = '\n';
   116ae:	18ea      	adds	r2, r5, r3
   116b0:	210a      	movs	r1, #10
   116b2:	7111      	strb	r1, [r2, #4]
			tx->len++;
   116b4:	3301      	adds	r3, #1
   116b6:	f8a5 3204 	strh.w	r3, [r5, #516]	; 0x204
   116ba:	e7d5      	b.n	11668 <bt_receive_cb+0x144>
			k_fifo_put(&fifo_uart_tx_data, tx);
   116bc:	4629      	mov	r1, r5
   116be:	4806      	ldr	r0, [pc, #24]	; (116d8 <bt_receive_cb+0x1b4>)
   116c0:	f02d f98c 	bl	3e9dc <k_queue_append>
   116c4:	e7db      	b.n	1167e <bt_receive_cb+0x15a>
   116c6:	bf00      	nop
   116c8:	0003ff18 	.word	0x0003ff18
   116cc:	0003f490 	.word	0x0003f490
   116d0:	0003ff30 	.word	0x0003ff30
   116d4:	0003efcc 	.word	0x0003efcc
   116d8:	200089e0 	.word	0x200089e0

000116dc <uart_init>:
static int uart_init(void) {
   116dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   116e0:	b088      	sub	sp, #32
   116e2:	af00      	add	r7, sp, #0
   116e4:	48ab      	ldr	r0, [pc, #684]	; (11994 <uart_init+0x2b8>)
   116e6:	f02d f89a 	bl	3e81e <z_device_is_ready>
	if (!device_is_ready(uart)) {
   116ea:	2800      	cmp	r0, #0
   116ec:	f000 814c 	beq.w	11988 <uart_init+0x2ac>
	rx = k_malloc(sizeof(*rx));
   116f0:	f44f 7002 	mov.w	r0, #520	; 0x208
   116f4:	f02d fbb2 	bl	3ee5c <k_malloc>
	if (rx) {
   116f8:	4605      	mov	r5, r0
   116fa:	2800      	cmp	r0, #0
   116fc:	f000 8147 	beq.w	1198e <uart_init+0x2b2>
		rx->len = 0;
   11700:	2300      	movs	r3, #0
   11702:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
	k_work_init_delayable(&uart_work, uart_work_handler);
   11706:	49a4      	ldr	r1, [pc, #656]	; (11998 <uart_init+0x2bc>)
   11708:	48a4      	ldr	r0, [pc, #656]	; (1199c <uart_init+0x2c0>)
   1170a:	f021 f84b 	bl	327a4 <k_work_init_delayable>
	const struct uart_driver_api *api =
   1170e:	4ba1      	ldr	r3, [pc, #644]	; (11994 <uart_init+0x2b8>)
   11710:	689b      	ldr	r3, [r3, #8]
	if (api->callback_set == NULL) {
   11712:	681b      	ldr	r3, [r3, #0]
   11714:	b37b      	cbz	r3, 11776 <uart_init+0x9a>
	return api->callback_set(dev, callback, user_data);
   11716:	2200      	movs	r2, #0
   11718:	49a1      	ldr	r1, [pc, #644]	; (119a0 <uart_init+0x2c4>)
   1171a:	489e      	ldr	r0, [pc, #632]	; (11994 <uart_init+0x2b8>)
   1171c:	4798      	blx	r3
	if (err) {
   1171e:	4604      	mov	r4, r0
   11720:	b360      	cbz	r0, 1177c <uart_init+0xa0>
		k_free(rx);
   11722:	4628      	mov	r0, r5
   11724:	f02d fb91 	bl	3ee4a <k_free>
		LOG_ERR("Cannot initialize UART callback");
   11728:	4b9e      	ldr	r3, [pc, #632]	; (119a4 <uart_init+0x2c8>)
   1172a:	61fb      	str	r3, [r7, #28]
   1172c:	2302      	movs	r3, #2
   1172e:	713b      	strb	r3, [r7, #4]
   11730:	2300      	movs	r3, #0
   11732:	717b      	strb	r3, [r7, #5]
   11734:	71bb      	strb	r3, [r7, #6]
   11736:	71fb      	strb	r3, [r7, #7]
   11738:	687a      	ldr	r2, [r7, #4]
   1173a:	61ba      	str	r2, [r7, #24]
   1173c:	4619      	mov	r1, r3
   1173e:	f363 0100 	bfi	r1, r3, #0, #1
   11742:	f363 0141 	bfi	r1, r3, #1, #1
   11746:	f363 0182 	bfi	r1, r3, #2, #1
   1174a:	f363 01c5 	bfi	r1, r3, #3, #3
   1174e:	2201      	movs	r2, #1
   11750:	f362 1188 	bfi	r1, r2, #6, #3
   11754:	2208      	movs	r2, #8
   11756:	f362 2152 	bfi	r1, r2, #9, #10
   1175a:	f363 41de 	bfi	r1, r3, #19, #12
   1175e:	f363 71df 	bfi	r1, r3, #31, #1
   11762:	f107 0218 	add.w	r2, r7, #24
   11766:	4890      	ldr	r0, [pc, #576]	; (119a8 <uart_init+0x2cc>)
   11768:	f005 f8f0 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1176c:	4620      	mov	r0, r4
   1176e:	3720      	adds	r7, #32
   11770:	46bd      	mov	sp, r7
   11772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOSYS;
   11776:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1177a:	e7d2      	b.n	11722 <uart_init+0x46>
	tx = k_malloc(sizeof(*tx));
   1177c:	f44f 7002 	mov.w	r0, #520	; 0x208
   11780:	f02d fb6c 	bl	3ee5c <k_malloc>
	if (tx) {
   11784:	4606      	mov	r6, r0
   11786:	2800      	cmp	r0, #0
   11788:	f000 8085 	beq.w	11896 <uart_init+0x1ba>
		pos = snprintf(tx->data, sizeof(tx->data),
   1178c:	f100 0804 	add.w	r8, r0, #4
   11790:	4a86      	ldr	r2, [pc, #536]	; (119ac <uart_init+0x2d0>)
   11792:	f44f 7100 	mov.w	r1, #512	; 0x200
   11796:	4640      	mov	r0, r8
   11798:	f009 fa0e 	bl	1abb8 <snprintf>
   1179c:	4604      	mov	r4, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   1179e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   117a2:	d231      	bcs.n	11808 <uart_init+0x12c>
		tx->len = pos;
   117a4:	f8a6 0204 	strh.w	r0, [r6, #516]	; 0x204
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   117a8:	b282      	uxth	r2, r0
	const struct uart_driver_api *api =
   117aa:	487a      	ldr	r0, [pc, #488]	; (11994 <uart_init+0x2b8>)
   117ac:	6883      	ldr	r3, [r0, #8]
	return api->tx(dev, buf, len, timeout);
   117ae:	685c      	ldr	r4, [r3, #4]
   117b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   117b4:	4641      	mov	r1, r8
   117b6:	47a0      	blx	r4
	if (err) {
   117b8:	4604      	mov	r4, r0
   117ba:	2800      	cmp	r0, #0
   117bc:	d171      	bne.n	118a2 <uart_init+0x1c6>
	err = uart_rx_enable(uart, rx->data, sizeof(rx->data), 100);
   117be:	1d29      	adds	r1, r5, #4
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
   117c0:	4874      	ldr	r0, [pc, #464]	; (11994 <uart_init+0x2b8>)
   117c2:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
   117c4:	68dc      	ldr	r4, [r3, #12]
   117c6:	2364      	movs	r3, #100	; 0x64
   117c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   117cc:	47a0      	blx	r4
	if (err) {
   117ce:	4604      	mov	r4, r0
   117d0:	2800      	cmp	r0, #0
   117d2:	d0cb      	beq.n	1176c <uart_init+0x90>
		LOG_ERR("Cannot enable uart reception (err: %d)", err);
   117d4:	466e      	mov	r6, sp
   117d6:	b088      	sub	sp, #32
   117d8:	466b      	mov	r3, sp
   117da:	f113 0210 	adds.w	r2, r3, #16
   117de:	f000 80a5 	beq.w	1192c <uart_init+0x250>
   117e2:	210c      	movs	r1, #12
   117e4:	b152      	cbz	r2, 117fc <uart_init+0x120>
   117e6:	4608      	mov	r0, r1
   117e8:	2904      	cmp	r1, #4
   117ea:	dd03      	ble.n	117f4 <uart_init+0x118>
   117ec:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 119b0 <uart_init+0x2d4>
   117f0:	f8c3 c014 	str.w	ip, [r3, #20]
   117f4:	2808      	cmp	r0, #8
   117f6:	f340 809c 	ble.w	11932 <uart_init+0x256>
   117fa:	619c      	str	r4, [r3, #24]
   117fc:	290b      	cmp	r1, #11
   117fe:	f340 80c0 	ble.w	11982 <uart_init+0x2a6>
   11802:	f04f 0c0c 	mov.w	ip, #12
   11806:	e096      	b.n	11936 <uart_init+0x25a>
			k_free(rx);
   11808:	4628      	mov	r0, r5
   1180a:	f02d fb1e 	bl	3ee4a <k_free>
			k_free(tx);
   1180e:	4630      	mov	r0, r6
   11810:	f02d fb1b 	bl	3ee4a <k_free>
			LOG_ERR("snprintf returned %d", pos);
   11814:	466d      	mov	r5, sp
   11816:	b088      	sub	sp, #32
   11818:	4669      	mov	r1, sp
   1181a:	f111 0210 	adds.w	r2, r1, #16
   1181e:	d00d      	beq.n	1183c <uart_init+0x160>
   11820:	230c      	movs	r3, #12
   11822:	b13a      	cbz	r2, 11834 <uart_init+0x158>
   11824:	4618      	mov	r0, r3
   11826:	2b04      	cmp	r3, #4
   11828:	dd01      	ble.n	1182e <uart_init+0x152>
   1182a:	4e62      	ldr	r6, [pc, #392]	; (119b4 <uart_init+0x2d8>)
   1182c:	614e      	str	r6, [r1, #20]
   1182e:	2808      	cmp	r0, #8
   11830:	dd07      	ble.n	11842 <uart_init+0x166>
   11832:	618c      	str	r4, [r1, #24]
   11834:	2b0b      	cmp	r3, #11
   11836:	dd2b      	ble.n	11890 <uart_init+0x1b4>
   11838:	230c      	movs	r3, #12
   1183a:	e004      	b.n	11846 <uart_init+0x16a>
   1183c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11840:	e7ef      	b.n	11822 <uart_init+0x146>
   11842:	f06f 031b 	mvn.w	r3, #27
   11846:	b13a      	cbz	r2, 11858 <uart_init+0x17c>
   11848:	2003      	movs	r0, #3
   1184a:	7138      	strb	r0, [r7, #4]
   1184c:	2000      	movs	r0, #0
   1184e:	7178      	strb	r0, [r7, #5]
   11850:	71b8      	strb	r0, [r7, #6]
   11852:	71f8      	strb	r0, [r7, #7]
   11854:	6878      	ldr	r0, [r7, #4]
   11856:	6108      	str	r0, [r1, #16]
   11858:	2100      	movs	r1, #0
   1185a:	f36f 0100 	bfc	r1, #0, #1
   1185e:	f36f 0141 	bfc	r1, #1, #1
   11862:	f36f 0182 	bfc	r1, #2, #1
   11866:	f36f 01c5 	bfc	r1, #3, #3
   1186a:	2001      	movs	r0, #1
   1186c:	f360 1188 	bfi	r1, r0, #6, #3
   11870:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   11874:	f363 2152 	bfi	r1, r3, #9, #10
   11878:	f36f 41de 	bfc	r1, #19, #12
   1187c:	f36f 71df 	bfc	r1, #31, #1
   11880:	2300      	movs	r3, #0
   11882:	4849      	ldr	r0, [pc, #292]	; (119a8 <uart_init+0x2cc>)
   11884:	f005 f862 	bl	1694c <z_impl_z_log_msg_static_create>
   11888:	46ad      	mov	sp, r5
			return -ENOMEM;
   1188a:	f06f 040b 	mvn.w	r4, #11
   1188e:	e76d      	b.n	1176c <uart_init+0x90>
			LOG_ERR("snprintf returned %d", pos);
   11890:	f06f 031b 	mvn.w	r3, #27
   11894:	e7d7      	b.n	11846 <uart_init+0x16a>
		k_free(rx);
   11896:	4628      	mov	r0, r5
   11898:	f02d fad7 	bl	3ee4a <k_free>
		return -ENOMEM;
   1189c:	f06f 040b 	mvn.w	r4, #11
   118a0:	e764      	b.n	1176c <uart_init+0x90>
		k_free(rx);
   118a2:	4628      	mov	r0, r5
   118a4:	f02d fad1 	bl	3ee4a <k_free>
		k_free(tx);
   118a8:	4630      	mov	r0, r6
   118aa:	f02d face 	bl	3ee4a <k_free>
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   118ae:	466e      	mov	r6, sp
   118b0:	b088      	sub	sp, #32
   118b2:	466b      	mov	r3, sp
   118b4:	f113 0210 	adds.w	r2, r3, #16
   118b8:	d00d      	beq.n	118d6 <uart_init+0x1fa>
   118ba:	210c      	movs	r1, #12
   118bc:	b13a      	cbz	r2, 118ce <uart_init+0x1f2>
   118be:	4608      	mov	r0, r1
   118c0:	2904      	cmp	r1, #4
   118c2:	dd01      	ble.n	118c8 <uart_init+0x1ec>
   118c4:	4d3c      	ldr	r5, [pc, #240]	; (119b8 <uart_init+0x2dc>)
   118c6:	615d      	str	r5, [r3, #20]
   118c8:	2808      	cmp	r0, #8
   118ca:	dd07      	ble.n	118dc <uart_init+0x200>
   118cc:	619c      	str	r4, [r3, #24]
   118ce:	290b      	cmp	r1, #11
   118d0:	dd29      	ble.n	11926 <uart_init+0x24a>
   118d2:	250c      	movs	r5, #12
   118d4:	e004      	b.n	118e0 <uart_init+0x204>
   118d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   118da:	e7ef      	b.n	118bc <uart_init+0x1e0>
   118dc:	f06f 051b 	mvn.w	r5, #27
   118e0:	b13a      	cbz	r2, 118f2 <uart_init+0x216>
   118e2:	2103      	movs	r1, #3
   118e4:	7139      	strb	r1, [r7, #4]
   118e6:	2100      	movs	r1, #0
   118e8:	7179      	strb	r1, [r7, #5]
   118ea:	71b9      	strb	r1, [r7, #6]
   118ec:	71f9      	strb	r1, [r7, #7]
   118ee:	6878      	ldr	r0, [r7, #4]
   118f0:	6118      	str	r0, [r3, #16]
   118f2:	2100      	movs	r1, #0
   118f4:	f36f 0100 	bfc	r1, #0, #1
   118f8:	f36f 0141 	bfc	r1, #1, #1
   118fc:	f36f 0182 	bfc	r1, #2, #1
   11900:	f36f 01c5 	bfc	r1, #3, #3
   11904:	2301      	movs	r3, #1
   11906:	f363 1188 	bfi	r1, r3, #6, #3
   1190a:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1190e:	f363 2152 	bfi	r1, r3, #9, #10
   11912:	f36f 41de 	bfc	r1, #19, #12
   11916:	f36f 71df 	bfc	r1, #31, #1
   1191a:	2300      	movs	r3, #0
   1191c:	4822      	ldr	r0, [pc, #136]	; (119a8 <uart_init+0x2cc>)
   1191e:	f005 f815 	bl	1694c <z_impl_z_log_msg_static_create>
   11922:	46b5      	mov	sp, r6
		return err;
   11924:	e722      	b.n	1176c <uart_init+0x90>
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   11926:	f06f 051b 	mvn.w	r5, #27
   1192a:	e7d9      	b.n	118e0 <uart_init+0x204>
		LOG_ERR("Cannot enable uart reception (err: %d)", err);
   1192c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11930:	e758      	b.n	117e4 <uart_init+0x108>
   11932:	f06f 0c1b 	mvn.w	ip, #27
   11936:	b13a      	cbz	r2, 11948 <uart_init+0x26c>
   11938:	2103      	movs	r1, #3
   1193a:	7139      	strb	r1, [r7, #4]
   1193c:	2100      	movs	r1, #0
   1193e:	7179      	strb	r1, [r7, #5]
   11940:	71b9      	strb	r1, [r7, #6]
   11942:	71f9      	strb	r1, [r7, #7]
   11944:	6878      	ldr	r0, [r7, #4]
   11946:	6118      	str	r0, [r3, #16]
   11948:	2100      	movs	r1, #0
   1194a:	f36f 0100 	bfc	r1, #0, #1
   1194e:	f36f 0141 	bfc	r1, #1, #1
   11952:	f36f 0182 	bfc	r1, #2, #1
   11956:	f36f 01c5 	bfc	r1, #3, #3
   1195a:	2301      	movs	r3, #1
   1195c:	f363 1188 	bfi	r1, r3, #6, #3
   11960:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   11964:	f363 2152 	bfi	r1, r3, #9, #10
   11968:	f36f 41de 	bfc	r1, #19, #12
   1196c:	f36f 71df 	bfc	r1, #31, #1
   11970:	2300      	movs	r3, #0
   11972:	480d      	ldr	r0, [pc, #52]	; (119a8 <uart_init+0x2cc>)
   11974:	f004 ffea 	bl	1694c <z_impl_z_log_msg_static_create>
   11978:	46b5      	mov	sp, r6
		k_free(rx);
   1197a:	4628      	mov	r0, r5
   1197c:	f02d fa65 	bl	3ee4a <k_free>
   11980:	e6f4      	b.n	1176c <uart_init+0x90>
		LOG_ERR("Cannot enable uart reception (err: %d)", err);
   11982:	f06f 0c1b 	mvn.w	ip, #27
   11986:	e7d6      	b.n	11936 <uart_init+0x25a>
		return -ENODEV;
   11988:	f06f 0412 	mvn.w	r4, #18
   1198c:	e6ee      	b.n	1176c <uart_init+0x90>
		return -ENOMEM;
   1198e:	f06f 040b 	mvn.w	r4, #11
   11992:	e6eb      	b.n	1176c <uart_init+0x90>
   11994:	0003efcc 	.word	0x0003efcc
   11998:	000119bd 	.word	0x000119bd
   1199c:	20008d10 	.word	0x20008d10
   119a0:	00011a4d 	.word	0x00011a4d
   119a4:	0003ff5c 	.word	0x0003ff5c
   119a8:	0003f490 	.word	0x0003f490
   119ac:	0003ff7c 	.word	0x0003ff7c
   119b0:	0003ffe8 	.word	0x0003ffe8
   119b4:	0003ffa4 	.word	0x0003ffa4
   119b8:	0003ffbc 	.word	0x0003ffbc

000119bc <uart_work_handler>:
static void uart_work_handler(struct k_work *item) {
   119bc:	b510      	push	{r4, lr}
   119be:	b088      	sub	sp, #32
	buf = k_malloc(sizeof(*buf));
   119c0:	f44f 7002 	mov.w	r0, #520	; 0x208
   119c4:	f02d fa4a 	bl	3ee5c <k_malloc>
	if (buf) {
   119c8:	b168      	cbz	r0, 119e6 <uart_work_handler+0x2a>
   119ca:	4601      	mov	r1, r0
		buf->len = 0;
   119cc:	2300      	movs	r3, #0
   119ce:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   119d2:	3104      	adds	r1, #4
	const struct uart_driver_api *api =
   119d4:	4819      	ldr	r0, [pc, #100]	; (11a3c <uart_work_handler+0x80>)
   119d6:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
   119d8:	68dc      	ldr	r4, [r3, #12]
   119da:	2364      	movs	r3, #100	; 0x64
   119dc:	f44f 7200 	mov.w	r2, #512	; 0x200
   119e0:	47a0      	blx	r4
}
   119e2:	b008      	add	sp, #32
   119e4:	bd10      	pop	{r4, pc}
		LOG_WRN("Not able to allocate UART receive buffer");
   119e6:	4b16      	ldr	r3, [pc, #88]	; (11a40 <uart_work_handler+0x84>)
   119e8:	9307      	str	r3, [sp, #28]
   119ea:	2202      	movs	r2, #2
   119ec:	f88d 2004 	strb.w	r2, [sp, #4]
   119f0:	2300      	movs	r3, #0
   119f2:	f88d 3005 	strb.w	r3, [sp, #5]
   119f6:	f88d 3006 	strb.w	r3, [sp, #6]
   119fa:	f88d 3007 	strb.w	r3, [sp, #7]
   119fe:	9901      	ldr	r1, [sp, #4]
   11a00:	9106      	str	r1, [sp, #24]
   11a02:	4619      	mov	r1, r3
   11a04:	f363 0100 	bfi	r1, r3, #0, #1
   11a08:	f363 0141 	bfi	r1, r3, #1, #1
   11a0c:	f363 0182 	bfi	r1, r3, #2, #1
   11a10:	f363 01c5 	bfi	r1, r3, #3, #3
   11a14:	f362 1188 	bfi	r1, r2, #6, #3
   11a18:	2208      	movs	r2, #8
   11a1a:	f362 2152 	bfi	r1, r2, #9, #10
   11a1e:	f363 41de 	bfi	r1, r3, #19, #12
   11a22:	f363 71df 	bfi	r1, r3, #31, #1
   11a26:	aa06      	add	r2, sp, #24
   11a28:	4806      	ldr	r0, [pc, #24]	; (11a44 <uart_work_handler+0x88>)
   11a2a:	f004 ff8f 	bl	1694c <z_impl_z_log_msg_static_create>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11a2e:	f240 6267 	movw	r2, #1639	; 0x667
   11a32:	2300      	movs	r3, #0
   11a34:	4804      	ldr	r0, [pc, #16]	; (11a48 <uart_work_handler+0x8c>)
   11a36:	f021 f811 	bl	32a5c <k_work_reschedule>
		return;
   11a3a:	e7d2      	b.n	119e2 <uart_work_handler+0x26>
   11a3c:	0003efcc 	.word	0x0003efcc
   11a40:	00040010 	.word	0x00040010
   11a44:	0003f490 	.word	0x0003f490
   11a48:	20008d10 	.word	0x20008d10

00011a4c <uart_cb>:
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data) {
   11a4c:	b510      	push	{r4, lr}
   11a4e:	b094      	sub	sp, #80	; 0x50
	switch (evt->type) {
   11a50:	780b      	ldrb	r3, [r1, #0]
   11a52:	2b05      	cmp	r3, #5
   11a54:	f200 810d 	bhi.w	11c72 <uart_cb+0x226>
   11a58:	e8df f013 	tbh	[pc, r3, lsl #1]
   11a5c:	00f50006 	.word	0x00f50006
   11a60:	00b20054 	.word	0x00b20054
   11a64:	007200e8 	.word	0x007200e8
		if ((evt->data.tx.len == 0) || (!evt->data.tx.buf)) {
   11a68:	688b      	ldr	r3, [r1, #8]
   11a6a:	2b00      	cmp	r3, #0
   11a6c:	f000 8101 	beq.w	11c72 <uart_cb+0x226>
   11a70:	684b      	ldr	r3, [r1, #4]
   11a72:	2b00      	cmp	r3, #0
   11a74:	f000 80fd 	beq.w	11c72 <uart_cb+0x226>
		if (aborted_buf) {
   11a78:	4a81      	ldr	r2, [pc, #516]	; (11c80 <uart_cb+0x234>)
   11a7a:	6810      	ldr	r0, [r2, #0]
   11a7c:	2800      	cmp	r0, #0
   11a7e:	d03f      	beq.n	11b00 <uart_cb+0xb4>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
   11a80:	3804      	subs	r0, #4
			aborted_buf = NULL;
   11a82:	2300      	movs	r3, #0
   11a84:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   11a86:	4a7f      	ldr	r2, [pc, #508]	; (11c84 <uart_cb+0x238>)
   11a88:	6013      	str	r3, [r2, #0]
		k_free(buf);
   11a8a:	f02d f9de 	bl	3ee4a <k_free>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
   11a8e:	2200      	movs	r2, #0
   11a90:	2300      	movs	r3, #0
   11a92:	487d      	ldr	r0, [pc, #500]	; (11c88 <uart_cb+0x23c>)
   11a94:	f020 f916 	bl	31cc4 <z_impl_k_queue_get>
		if (!buf) {
   11a98:	2800      	cmp	r0, #0
   11a9a:	f000 80ea 	beq.w	11c72 <uart_cb+0x226>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   11a9e:	1d01      	adds	r1, r0, #4
   11aa0:	f8b0 2204 	ldrh.w	r2, [r0, #516]	; 0x204
	const struct uart_driver_api *api =
   11aa4:	4879      	ldr	r0, [pc, #484]	; (11c8c <uart_cb+0x240>)
   11aa6:	6883      	ldr	r3, [r0, #8]
	return api->tx(dev, buf, len, timeout);
   11aa8:	685c      	ldr	r4, [r3, #4]
   11aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11aae:	47a0      	blx	r4
   11ab0:	2800      	cmp	r0, #0
   11ab2:	f000 80de 	beq.w	11c72 <uart_cb+0x226>
			LOG_WRN("Failed to send data over UART");
   11ab6:	4b76      	ldr	r3, [pc, #472]	; (11c90 <uart_cb+0x244>)
   11ab8:	9313      	str	r3, [sp, #76]	; 0x4c
   11aba:	2202      	movs	r2, #2
   11abc:	f88d 2004 	strb.w	r2, [sp, #4]
   11ac0:	2300      	movs	r3, #0
   11ac2:	f88d 3005 	strb.w	r3, [sp, #5]
   11ac6:	f88d 3006 	strb.w	r3, [sp, #6]
   11aca:	f88d 3007 	strb.w	r3, [sp, #7]
   11ace:	9901      	ldr	r1, [sp, #4]
   11ad0:	9112      	str	r1, [sp, #72]	; 0x48
   11ad2:	4619      	mov	r1, r3
   11ad4:	f363 0100 	bfi	r1, r3, #0, #1
   11ad8:	f363 0141 	bfi	r1, r3, #1, #1
   11adc:	f363 0182 	bfi	r1, r3, #2, #1
   11ae0:	f363 01c5 	bfi	r1, r3, #3, #3
   11ae4:	f362 1188 	bfi	r1, r2, #6, #3
   11ae8:	2208      	movs	r2, #8
   11aea:	f362 2152 	bfi	r1, r2, #9, #10
   11aee:	f363 41de 	bfi	r1, r3, #19, #12
   11af2:	f363 71df 	bfi	r1, r3, #31, #1
   11af6:	aa12      	add	r2, sp, #72	; 0x48
   11af8:	4866      	ldr	r0, [pc, #408]	; (11c94 <uart_cb+0x248>)
   11afa:	f004 ff27 	bl	1694c <z_impl_z_log_msg_static_create>
   11afe:	e0b8      	b.n	11c72 <uart_cb+0x226>
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data);
   11b00:	1f18      	subs	r0, r3, #4
   11b02:	e7c2      	b.n	11a8a <uart_cb+0x3e>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   11b04:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
   11b06:	f8b2 3200 	ldrh.w	r3, [r2, #512]	; 0x200
   11b0a:	68c8      	ldr	r0, [r1, #12]
   11b0c:	4403      	add	r3, r0
   11b0e:	b29b      	uxth	r3, r3
   11b10:	f8a2 3200 	strh.w	r3, [r2, #512]	; 0x200
		if (disable_req) {
   11b14:	4a60      	ldr	r2, [pc, #384]	; (11c98 <uart_cb+0x24c>)
   11b16:	7812      	ldrb	r2, [r2, #0]
   11b18:	2a00      	cmp	r2, #0
   11b1a:	f040 80aa 	bne.w	11c72 <uart_cb+0x226>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') || (evt->data.rx.buf[buf->len - 1] == '\r')) {
   11b1e:	684a      	ldr	r2, [r1, #4]
   11b20:	4413      	add	r3, r2
   11b22:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   11b26:	2b0a      	cmp	r3, #10
   11b28:	d002      	beq.n	11b30 <uart_cb+0xe4>
   11b2a:	2b0d      	cmp	r3, #13
   11b2c:	f040 80a1 	bne.w	11c72 <uart_cb+0x226>
			disable_req = true;
   11b30:	4b59      	ldr	r3, [pc, #356]	; (11c98 <uart_cb+0x24c>)
   11b32:	2201      	movs	r2, #1
   11b34:	701a      	strb	r2, [r3, #0]
__syscall int uart_rx_disable(const struct device *dev);

static inline int z_impl_uart_rx_disable(const struct device *dev)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
   11b36:	4855      	ldr	r0, [pc, #340]	; (11c8c <uart_cb+0x240>)
   11b38:	6883      	ldr	r3, [r0, #8]
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   11b3a:	695b      	ldr	r3, [r3, #20]
   11b3c:	4798      	blx	r3
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_RX_DISABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_disable(dev);
   11b3e:	e098      	b.n	11c72 <uart_cb+0x226>
		disable_req = false;
   11b40:	4b55      	ldr	r3, [pc, #340]	; (11c98 <uart_cb+0x24c>)
   11b42:	2200      	movs	r2, #0
   11b44:	701a      	strb	r2, [r3, #0]
		buf = k_malloc(sizeof(*buf));
   11b46:	f44f 7002 	mov.w	r0, #520	; 0x208
   11b4a:	f02d f987 	bl	3ee5c <k_malloc>
		if (buf) {
   11b4e:	4601      	mov	r1, r0
   11b50:	b158      	cbz	r0, 11b6a <uart_cb+0x11e>
			buf->len = 0;
   11b52:	2300      	movs	r3, #0
   11b54:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
		uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11b58:	3104      	adds	r1, #4
	const struct uart_driver_api *api =
   11b5a:	484c      	ldr	r0, [pc, #304]	; (11c8c <uart_cb+0x240>)
   11b5c:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
   11b5e:	68dc      	ldr	r4, [r3, #12]
   11b60:	2364      	movs	r3, #100	; 0x64
   11b62:	f44f 7200 	mov.w	r2, #512	; 0x200
   11b66:	47a0      	blx	r4
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
   11b68:	e083      	b.n	11c72 <uart_cb+0x226>
			LOG_WRN("Not able to allocate UART receive buffer");
   11b6a:	4b4c      	ldr	r3, [pc, #304]	; (11c9c <uart_cb+0x250>)
   11b6c:	9307      	str	r3, [sp, #28]
   11b6e:	2202      	movs	r2, #2
   11b70:	f88d 2004 	strb.w	r2, [sp, #4]
   11b74:	2300      	movs	r3, #0
   11b76:	f88d 3005 	strb.w	r3, [sp, #5]
   11b7a:	f88d 3006 	strb.w	r3, [sp, #6]
   11b7e:	f88d 3007 	strb.w	r3, [sp, #7]
   11b82:	9901      	ldr	r1, [sp, #4]
   11b84:	9106      	str	r1, [sp, #24]
   11b86:	4619      	mov	r1, r3
   11b88:	f363 0100 	bfi	r1, r3, #0, #1
   11b8c:	f363 0141 	bfi	r1, r3, #1, #1
   11b90:	f363 0182 	bfi	r1, r3, #2, #1
   11b94:	f363 01c5 	bfi	r1, r3, #3, #3
   11b98:	f362 1188 	bfi	r1, r2, #6, #3
   11b9c:	2208      	movs	r2, #8
   11b9e:	f362 2152 	bfi	r1, r2, #9, #10
   11ba2:	f363 41de 	bfi	r1, r3, #19, #12
   11ba6:	f363 71df 	bfi	r1, r3, #31, #1
   11baa:	aa06      	add	r2, sp, #24
   11bac:	4839      	ldr	r0, [pc, #228]	; (11c94 <uart_cb+0x248>)
   11bae:	f004 fecd 	bl	1694c <z_impl_z_log_msg_static_create>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11bb2:	f240 6267 	movw	r2, #1639	; 0x667
   11bb6:	2300      	movs	r3, #0
   11bb8:	4839      	ldr	r0, [pc, #228]	; (11ca0 <uart_cb+0x254>)
   11bba:	f020 ff4f 	bl	32a5c <k_work_reschedule>
			return;
   11bbe:	e058      	b.n	11c72 <uart_cb+0x226>
		buf = k_malloc(sizeof(*buf));
   11bc0:	f44f 7002 	mov.w	r0, #520	; 0x208
   11bc4:	f02d f94a 	bl	3ee5c <k_malloc>
		if (buf) {
   11bc8:	4601      	mov	r1, r0
   11bca:	b150      	cbz	r0, 11be2 <uart_cb+0x196>
			buf->len = 0;
   11bcc:	2300      	movs	r3, #0
   11bce:	f8a0 3204 	strh.w	r3, [r0, #516]	; 0x204
	const struct uart_driver_api *api =
   11bd2:	482e      	ldr	r0, [pc, #184]	; (11c8c <uart_cb+0x240>)
   11bd4:	6883      	ldr	r3, [r0, #8]
	return api->rx_buf_rsp(dev, buf, len);
   11bd6:	691b      	ldr	r3, [r3, #16]
   11bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
   11bdc:	3104      	adds	r1, #4
   11bde:	4798      	blx	r3
   11be0:	e047      	b.n	11c72 <uart_cb+0x226>
			LOG_WRN("Not able to allocate UART receive buffer");
   11be2:	4b2e      	ldr	r3, [pc, #184]	; (11c9c <uart_cb+0x250>)
   11be4:	930d      	str	r3, [sp, #52]	; 0x34
   11be6:	2202      	movs	r2, #2
   11be8:	f88d 2004 	strb.w	r2, [sp, #4]
   11bec:	2300      	movs	r3, #0
   11bee:	f88d 3005 	strb.w	r3, [sp, #5]
   11bf2:	f88d 3006 	strb.w	r3, [sp, #6]
   11bf6:	f88d 3007 	strb.w	r3, [sp, #7]
   11bfa:	9901      	ldr	r1, [sp, #4]
   11bfc:	910c      	str	r1, [sp, #48]	; 0x30
   11bfe:	4619      	mov	r1, r3
   11c00:	f363 0100 	bfi	r1, r3, #0, #1
   11c04:	f363 0141 	bfi	r1, r3, #1, #1
   11c08:	f363 0182 	bfi	r1, r3, #2, #1
   11c0c:	f363 01c5 	bfi	r1, r3, #3, #3
   11c10:	f362 1188 	bfi	r1, r2, #6, #3
   11c14:	2208      	movs	r2, #8
   11c16:	f362 2152 	bfi	r1, r2, #9, #10
   11c1a:	f363 41de 	bfi	r1, r3, #19, #12
   11c1e:	f363 71df 	bfi	r1, r3, #31, #1
   11c22:	aa0c      	add	r2, sp, #48	; 0x30
   11c24:	481b      	ldr	r0, [pc, #108]	; (11c94 <uart_cb+0x248>)
   11c26:	f004 fe91 	bl	1694c <z_impl_z_log_msg_static_create>
   11c2a:	e022      	b.n	11c72 <uart_cb+0x226>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data);
   11c2c:	684b      	ldr	r3, [r1, #4]
   11c2e:	1f19      	subs	r1, r3, #4
		if (buf->len > 0) {
   11c30:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
   11c34:	b11b      	cbz	r3, 11c3e <uart_cb+0x1f2>
			k_fifo_put(&fifo_uart_rx_data, buf);
   11c36:	481b      	ldr	r0, [pc, #108]	; (11ca4 <uart_cb+0x258>)
   11c38:	f02c fed0 	bl	3e9dc <k_queue_append>
   11c3c:	e019      	b.n	11c72 <uart_cb+0x226>
			k_free(buf);
   11c3e:	4608      	mov	r0, r1
   11c40:	f02d f903 	bl	3ee4a <k_free>
   11c44:	e015      	b.n	11c72 <uart_cb+0x226>
		if (!aborted_buf) {
   11c46:	4b0e      	ldr	r3, [pc, #56]	; (11c80 <uart_cb+0x234>)
   11c48:	681b      	ldr	r3, [r3, #0]
   11c4a:	b1a3      	cbz	r3, 11c76 <uart_cb+0x22a>
		aborted_len += evt->data.tx.len;
   11c4c:	688b      	ldr	r3, [r1, #8]
   11c4e:	4a0d      	ldr	r2, [pc, #52]	; (11c84 <uart_cb+0x238>)
   11c50:	6811      	ldr	r1, [r2, #0]
   11c52:	440b      	add	r3, r1
   11c54:	6013      	str	r3, [r2, #0]
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data);
   11c56:	4a0a      	ldr	r2, [pc, #40]	; (11c80 <uart_cb+0x234>)
   11c58:	6812      	ldr	r2, [r2, #0]
		uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
   11c5a:	1f11      	subs	r1, r2, #4
   11c5c:	4419      	add	r1, r3
   11c5e:	3104      	adds	r1, #4
   11c60:	f8b2 2200 	ldrh.w	r2, [r2, #512]	; 0x200
   11c64:	1ad2      	subs	r2, r2, r3
	const struct uart_driver_api *api =
   11c66:	4809      	ldr	r0, [pc, #36]	; (11c8c <uart_cb+0x240>)
   11c68:	6883      	ldr	r3, [r0, #8]
	return api->tx(dev, buf, len, timeout);
   11c6a:	685c      	ldr	r4, [r3, #4]
   11c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11c70:	47a0      	blx	r4
}
   11c72:	b014      	add	sp, #80	; 0x50
   11c74:	bd10      	pop	{r4, pc}
			aborted_buf = (uint8_t *)evt->data.tx.buf;
   11c76:	684a      	ldr	r2, [r1, #4]
   11c78:	4b01      	ldr	r3, [pc, #4]	; (11c80 <uart_cb+0x234>)
   11c7a:	601a      	str	r2, [r3, #0]
   11c7c:	e7e6      	b.n	11c4c <uart_cb+0x200>
   11c7e:	bf00      	nop
   11c80:	2000bbd8 	.word	0x2000bbd8
   11c84:	2000bbd4 	.word	0x2000bbd4
   11c88:	200089e0 	.word	0x200089e0
   11c8c:	0003efcc 	.word	0x0003efcc
   11c90:	0004003c 	.word	0x0004003c
   11c94:	0003f490 	.word	0x0003f490
   11c98:	2000caa6 	.word	0x2000caa6
   11c9c:	00040010 	.word	0x00040010
   11ca0:	20008d10 	.word	0x20008d10
   11ca4:	200089c4 	.word	0x200089c4

00011ca8 <ble_send_thread_handler>:
            k_sem_give(&data_ready_sem);
        }
    }
}

void ble_send_thread_handler(void *arg1, void *arg2, void *arg3) {
   11ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11cac:	b082      	sub	sp, #8
   11cae:	af00      	add	r7, sp, #0
    int sent_ok = 0, sent_fail = 0;
   11cb0:	f04f 0900 	mov.w	r9, #0
   11cb4:	46ca      	mov	sl, r9
   11cb6:	e027      	b.n	11d08 <ble_send_thread_handler+0x60>
            k_mutex_unlock(&data_mutex);

            int err = bt_nus_send(current_conn, safe_copy, sizeof(safe_copy));
            if (err) {
                sent_fail++;
                LOG_WRN("BLE send failed (%d) | Fail count: %d", err, sent_fail);
   11cb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11cbc:	e052      	b.n	11d64 <ble_send_thread_handler+0xbc>
   11cbe:	290f      	cmp	r1, #15
   11cc0:	dd62      	ble.n	11d88 <ble_send_thread_handler+0xe0>
   11cc2:	2110      	movs	r1, #16
   11cc4:	b13a      	cbz	r2, 11cd6 <ble_send_thread_handler+0x2e>
   11cc6:	2004      	movs	r0, #4
   11cc8:	7138      	strb	r0, [r7, #4]
   11cca:	2000      	movs	r0, #0
   11ccc:	7178      	strb	r0, [r7, #5]
   11cce:	71b8      	strb	r0, [r7, #6]
   11cd0:	71f8      	strb	r0, [r7, #7]
   11cd2:	6878      	ldr	r0, [r7, #4]
   11cd4:	6118      	str	r0, [r3, #16]
   11cd6:	f36f 0400 	bfc	r4, #0, #1
   11cda:	f36f 0441 	bfc	r4, #1, #1
   11cde:	f36f 0482 	bfc	r4, #2, #1
   11ce2:	f36f 04c5 	bfc	r4, #3, #3
   11ce6:	2302      	movs	r3, #2
   11ce8:	f363 1488 	bfi	r4, r3, #6, #3
   11cec:	f401 717d 	and.w	r1, r1, #1012	; 0x3f4
   11cf0:	f361 2452 	bfi	r4, r1, #9, #10
   11cf4:	f36f 44de 	bfc	r4, #19, #12
   11cf8:	f36f 74df 	bfc	r4, #31, #1
   11cfc:	2300      	movs	r3, #0
   11cfe:	4621      	mov	r1, r4
   11d00:	4845      	ldr	r0, [pc, #276]	; (11e18 <ble_send_thread_handler+0x170>)
   11d02:	f004 fe23 	bl	1694c <z_impl_z_log_msg_static_create>
   11d06:	46b5      	mov	sp, r6
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   11d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d10:	4842      	ldr	r0, [pc, #264]	; (11e1c <ble_send_thread_handler+0x174>)
   11d12:	f020 f8ad 	bl	31e70 <z_impl_k_sem_take>
        if (current_conn) {
   11d16:	4b42      	ldr	r3, [pc, #264]	; (11e20 <ble_send_thread_handler+0x178>)
   11d18:	681b      	ldr	r3, [r3, #0]
   11d1a:	2b00      	cmp	r3, #0
   11d1c:	d0f4      	beq.n	11d08 <ble_send_thread_handler+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
   11d1e:	f8df 8104 	ldr.w	r8, [pc, #260]	; 11e24 <ble_send_thread_handler+0x17c>
   11d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d2a:	4640      	mov	r0, r8
   11d2c:	f01f fd96 	bl	3185c <z_impl_k_mutex_lock>
            memcpy(safe_copy, dummy_batch, TOTAL_SIZE);
   11d30:	4e3d      	ldr	r6, [pc, #244]	; (11e28 <ble_send_thread_handler+0x180>)
   11d32:	22f4      	movs	r2, #244	; 0xf4
   11d34:	493d      	ldr	r1, [pc, #244]	; (11e2c <ble_send_thread_handler+0x184>)
   11d36:	4630      	mov	r0, r6
   11d38:	f026 fb5f 	bl	383fa <memcpy>
	return z_impl_k_mutex_unlock(mutex);
   11d3c:	4640      	mov	r0, r8
   11d3e:	f01f fea3 	bl	31a88 <z_impl_k_mutex_unlock>
            int err = bt_nus_send(current_conn, safe_copy, sizeof(safe_copy));
   11d42:	22f4      	movs	r2, #244	; 0xf4
   11d44:	4631      	mov	r1, r6
   11d46:	4b36      	ldr	r3, [pc, #216]	; (11e20 <ble_send_thread_handler+0x178>)
   11d48:	6818      	ldr	r0, [r3, #0]
   11d4a:	f006 ffcf 	bl	18cec <bt_nus_send>
            if (err) {
   11d4e:	4684      	mov	ip, r0
   11d50:	b1e8      	cbz	r0, 11d8e <ble_send_thread_handler+0xe6>
                sent_fail++;
   11d52:	f109 0901 	add.w	r9, r9, #1
                LOG_WRN("BLE send failed (%d) | Fail count: %d", err, sent_fail);
   11d56:	466e      	mov	r6, sp
   11d58:	b088      	sub	sp, #32
   11d5a:	466b      	mov	r3, sp
   11d5c:	f113 0210 	adds.w	r2, r3, #16
   11d60:	d0aa      	beq.n	11cb8 <ble_send_thread_handler+0x10>
   11d62:	2110      	movs	r1, #16
   11d64:	2a00      	cmp	r2, #0
   11d66:	d0aa      	beq.n	11cbe <ble_send_thread_handler+0x16>
   11d68:	4608      	mov	r0, r1
   11d6a:	2904      	cmp	r1, #4
   11d6c:	dd03      	ble.n	11d76 <ble_send_thread_handler+0xce>
   11d6e:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 11e30 <ble_send_thread_handler+0x188>
   11d72:	f8c3 e014 	str.w	lr, [r3, #20]
   11d76:	2808      	cmp	r0, #8
   11d78:	dd01      	ble.n	11d7e <ble_send_thread_handler+0xd6>
   11d7a:	f8c3 c018 	str.w	ip, [r3, #24]
   11d7e:	280c      	cmp	r0, #12
   11d80:	dd9d      	ble.n	11cbe <ble_send_thread_handler+0x16>
   11d82:	f8c3 901c 	str.w	r9, [r3, #28]
   11d86:	e79a      	b.n	11cbe <ble_send_thread_handler+0x16>
   11d88:	f06f 011b 	mvn.w	r1, #27
   11d8c:	e79a      	b.n	11cc4 <ble_send_thread_handler+0x1c>
            } else {
                sent_ok++;
   11d8e:	f10a 0a01 	add.w	sl, sl, #1
                LOG_INF("BLE sent OK | OK: %d, Fail: %d", sent_ok, sent_fail);
   11d92:	466e      	mov	r6, sp
   11d94:	b088      	sub	sp, #32
   11d96:	466b      	mov	r3, sp
   11d98:	f113 0210 	adds.w	r2, r3, #16
   11d9c:	d036      	beq.n	11e0c <ble_send_thread_handler+0x164>
   11d9e:	2110      	movs	r1, #16
   11da0:	b172      	cbz	r2, 11dc0 <ble_send_thread_handler+0x118>
   11da2:	4608      	mov	r0, r1
   11da4:	2904      	cmp	r1, #4
   11da6:	dd03      	ble.n	11db0 <ble_send_thread_handler+0x108>
   11da8:	f8df c088 	ldr.w	ip, [pc, #136]	; 11e34 <ble_send_thread_handler+0x18c>
   11dac:	f8c3 c014 	str.w	ip, [r3, #20]
   11db0:	2808      	cmp	r0, #8
   11db2:	dd01      	ble.n	11db8 <ble_send_thread_handler+0x110>
   11db4:	f8c3 a018 	str.w	sl, [r3, #24]
   11db8:	280c      	cmp	r0, #12
   11dba:	dd01      	ble.n	11dc0 <ble_send_thread_handler+0x118>
   11dbc:	f8c3 901c 	str.w	r9, [r3, #28]
   11dc0:	290f      	cmp	r1, #15
   11dc2:	dd26      	ble.n	11e12 <ble_send_thread_handler+0x16a>
   11dc4:	2110      	movs	r1, #16
   11dc6:	b13a      	cbz	r2, 11dd8 <ble_send_thread_handler+0x130>
   11dc8:	2004      	movs	r0, #4
   11dca:	7138      	strb	r0, [r7, #4]
   11dcc:	2000      	movs	r0, #0
   11dce:	7178      	strb	r0, [r7, #5]
   11dd0:	71b8      	strb	r0, [r7, #6]
   11dd2:	71f8      	strb	r0, [r7, #7]
   11dd4:	6878      	ldr	r0, [r7, #4]
   11dd6:	6118      	str	r0, [r3, #16]
   11dd8:	f36f 0500 	bfc	r5, #0, #1
   11ddc:	f36f 0541 	bfc	r5, #1, #1
   11de0:	f36f 0582 	bfc	r5, #2, #1
   11de4:	f36f 05c5 	bfc	r5, #3, #3
   11de8:	2303      	movs	r3, #3
   11dea:	f363 1588 	bfi	r5, r3, #6, #3
   11dee:	f401 717d 	and.w	r1, r1, #1012	; 0x3f4
   11df2:	f361 2552 	bfi	r5, r1, #9, #10
   11df6:	f36f 45de 	bfc	r5, #19, #12
   11dfa:	f36f 75df 	bfc	r5, #31, #1
   11dfe:	2300      	movs	r3, #0
   11e00:	4629      	mov	r1, r5
   11e02:	4805      	ldr	r0, [pc, #20]	; (11e18 <ble_send_thread_handler+0x170>)
   11e04:	f004 fda2 	bl	1694c <z_impl_z_log_msg_static_create>
   11e08:	46b5      	mov	sp, r6
    while (1) {
   11e0a:	e77d      	b.n	11d08 <ble_send_thread_handler+0x60>
                LOG_INF("BLE sent OK | OK: %d, Fail: %d", sent_ok, sent_fail);
   11e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   11e10:	e7c6      	b.n	11da0 <ble_send_thread_handler+0xf8>
   11e12:	f06f 011b 	mvn.w	r1, #27
   11e16:	e7d6      	b.n	11dc6 <ble_send_thread_handler+0x11e>
   11e18:	0003f490 	.word	0x0003f490
   11e1c:	2000bdc8 	.word	0x2000bdc8
   11e20:	2000bde4 	.word	0x2000bde4
   11e24:	20008914 	.word	0x20008914
   11e28:	2000bbe0 	.word	0x2000bbe0
   11e2c:	2000bcd4 	.word	0x2000bcd4
   11e30:	0004005c 	.word	0x0004005c
   11e34:	00040084 	.word	0x00040084

00011e38 <ADS1298_init>:
#define APP_SPIM_SCK_PIN (8)
#define APP_SPIM_MISO_PIN (24)
#define APP_SPIM_MOSI_PIN (9)
#define NRFX_SPIM_PIN_NOT_USED 0xFF

bool ADS1298_init() {
   11e38:	b500      	push	{lr}
   11e3a:	b087      	sub	sp, #28
    nrfx_spim_config_t config = NRFX_SPIM_DEFAULT_CONFIG(APP_SPIM_SCK_PIN, APP_SPIM_MOSI_PIN, APP_SPIM_MISO_PIN, NRFX_SPIM_PIN_NOT_USED);
   11e3c:	2300      	movs	r3, #0
   11e3e:	9300      	str	r3, [sp, #0]
   11e40:	9301      	str	r3, [sp, #4]
   11e42:	9302      	str	r3, [sp, #8]
   11e44:	9303      	str	r3, [sp, #12]
   11e46:	9304      	str	r3, [sp, #16]
   11e48:	9305      	str	r3, [sp, #20]
   11e4a:	2208      	movs	r2, #8
   11e4c:	f88d 2000 	strb.w	r2, [sp]
   11e50:	2209      	movs	r2, #9
   11e52:	f88d 2001 	strb.w	r2, [sp, #1]
   11e56:	2218      	movs	r2, #24
   11e58:	f88d 2002 	strb.w	r2, [sp, #2]
   11e5c:	22ff      	movs	r2, #255	; 0xff
   11e5e:	f88d 2003 	strb.w	r2, [sp, #3]
   11e62:	2107      	movs	r1, #7
   11e64:	f88d 1005 	strb.w	r1, [sp, #5]
   11e68:	f88d 2006 	strb.w	r2, [sp, #6]
   11e6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11e70:	9102      	str	r1, [sp, #8]
   11e72:	f88d 200f 	strb.w	r2, [sp, #15]
   11e76:	2202      	movs	r2, #2
   11e78:	f88d 2010 	strb.w	r2, [sp, #16]
   11e7c:	f88d 2012 	strb.w	r2, [sp, #18]
    config.frequency = NRF_SPIM_FREQ_8M;
   11e80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   11e84:	9202      	str	r2, [sp, #8]
    config.ss_active_high = false;
    config.bit_order = SPIM_CONFIG_ORDER_MsbFirst;
    config.mode = NRF_SPIM_MODE_1;
   11e86:	2201      	movs	r2, #1
   11e88:	f88d 200c 	strb.w	r2, [sp, #12]
    
    //nrfx_spim_uninit(&m_spi);
    int err = nrfx_spim_init(&m_spi, &config, spim_event_handler, NULL);
   11e8c:	4a0a      	ldr	r2, [pc, #40]	; (11eb8 <ADS1298_init+0x80>)
   11e8e:	4669      	mov	r1, sp
   11e90:	480a      	ldr	r0, [pc, #40]	; (11ebc <ADS1298_init+0x84>)
   11e92:	f01d fd43 	bl	2f91c <nrfx_spim_init>

     if(err == NRFX_SUCCESS) {
   11e96:	4b0a      	ldr	r3, [pc, #40]	; (11ec0 <ADS1298_init+0x88>)
   11e98:	4298      	cmp	r0, r3
   11e9a:	d003      	beq.n	11ea4 <ADS1298_init+0x6c>
    } else {
        return false;
   11e9c:	2000      	movs	r0, #0
    if (gpio_dev_0 == NULL) {
		return false;
	}

    return true; 
}
   11e9e:	b007      	add	sp, #28
   11ea0:	f85d fb04 	ldr.w	pc, [sp], #4
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11ea4:	4807      	ldr	r0, [pc, #28]	; (11ec4 <ADS1298_init+0x8c>)
   11ea6:	f01e fd55 	bl	30954 <z_impl_device_get_binding>
    gpio_dev_0 = device_get_binding("GPIO_0");
   11eaa:	4b07      	ldr	r3, [pc, #28]	; (11ec8 <ADS1298_init+0x90>)
   11eac:	6018      	str	r0, [r3, #0]
    if (gpio_dev_0 == NULL) {
   11eae:	b108      	cbz	r0, 11eb4 <ADS1298_init+0x7c>
    return true; 
   11eb0:	2001      	movs	r0, #1
   11eb2:	e7f4      	b.n	11e9e <ADS1298_init+0x66>
		return false;
   11eb4:	2000      	movs	r0, #0
   11eb6:	e7f2      	b.n	11e9e <ADS1298_init+0x66>
   11eb8:	00010489 	.word	0x00010489
   11ebc:	00040684 	.word	0x00040684
   11ec0:	0bad0000 	.word	0x0bad0000
   11ec4:	000400a4 	.word	0x000400a4
   11ec8:	2000be1c 	.word	0x2000be1c

00011ecc <spi_transfer>:
    if(gpio_pin_get(gpio_dev_0, 3) == 0) {
        ADS1298_receive_data();
    }
}

int spi_transfer(const nrfx_spim_xfer_desc_t *desc) {
   11ecc:	b508      	push	{r3, lr}
   11ece:	4601      	mov	r1, r0
    return nrfx_spim_xfer(&m_spi, desc, 0);
   11ed0:	2200      	movs	r2, #0
   11ed2:	4802      	ldr	r0, [pc, #8]	; (11edc <spi_transfer+0x10>)
   11ed4:	f01d fe50 	bl	2fb78 <nrfx_spim_xfer>
}
   11ed8:	bd08      	pop	{r3, pc}
   11eda:	bf00      	nop
   11edc:	00040684 	.word	0x00040684

00011ee0 <ADS1298_send_command>:

bool ADS1298_send_command(uint8_t command) {
    if(state == idle) {
   11ee0:	4b0c      	ldr	r3, [pc, #48]	; (11f14 <ADS1298_send_command+0x34>)
   11ee2:	781b      	ldrb	r3, [r3, #0]
   11ee4:	b10b      	cbz	r3, 11eea <ADS1298_send_command+0xa>
        int err = spi_transfer(&spim_xfer_desc);
        if(err != NRFX_SUCCESS) {
        }
        return true;
    } else {
        return false;
   11ee6:	2000      	movs	r0, #0
    }
}
   11ee8:	4770      	bx	lr
bool ADS1298_send_command(uint8_t command) {
   11eea:	b510      	push	{r4, lr}
   11eec:	b084      	sub	sp, #16
   11eee:	4684      	mov	ip, r0
        nrfx_spim_xfer_desc_t spim_xfer_desc = NRFX_SPIM_XFER_TX(tx_buffer, 1);
   11ef0:	46ee      	mov	lr, sp
   11ef2:	4b09      	ldr	r3, [pc, #36]	; (11f18 <ADS1298_send_command+0x38>)
   11ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11ef6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
        tx_buffer[0] = command;
   11efa:	4b08      	ldr	r3, [pc, #32]	; (11f1c <ADS1298_send_command+0x3c>)
   11efc:	f883 c000 	strb.w	ip, [r3]
        state = send_command;
   11f00:	2401      	movs	r4, #1
   11f02:	4b04      	ldr	r3, [pc, #16]	; (11f14 <ADS1298_send_command+0x34>)
   11f04:	701c      	strb	r4, [r3, #0]
        int err = spi_transfer(&spim_xfer_desc);
   11f06:	4670      	mov	r0, lr
   11f08:	f7ff ffe0 	bl	11ecc <spi_transfer>
        return true;
   11f0c:	4620      	mov	r0, r4
}
   11f0e:	b004      	add	sp, #16
   11f10:	bd10      	pop	{r4, pc}
   11f12:	bf00      	nop
   11f14:	2000caa9 	.word	0x2000caa9
   11f18:	0003f5b4 	.word	0x0003f5b4
   11f1c:	2000be20 	.word	0x2000be20

00011f20 <ADS1298_read_data>:

/* function de read bloquant */
uint8_t ADS1298_read_data() {
    if(state == idle) {
   11f20:	4b0f      	ldr	r3, [pc, #60]	; (11f60 <ADS1298_read_data+0x40>)
   11f22:	781b      	ldrb	r3, [r3, #0]
   11f24:	b103      	cbz	r3, 11f28 <ADS1298_read_data+0x8>
        }
        return rx_buffer[0];
    } else {
        return ;
    }
}
   11f26:	4770      	bx	lr
uint8_t ADS1298_read_data() {
   11f28:	b500      	push	{lr}
   11f2a:	b085      	sub	sp, #20
        state = read_data;
   11f2c:	4b0c      	ldr	r3, [pc, #48]	; (11f60 <ADS1298_read_data+0x40>)
   11f2e:	2203      	movs	r2, #3
   11f30:	701a      	strb	r2, [r3, #0]
        new_data_available = false;
   11f32:	4b0c      	ldr	r3, [pc, #48]	; (11f64 <ADS1298_read_data+0x44>)
   11f34:	2200      	movs	r2, #0
   11f36:	701a      	strb	r2, [r3, #0]
        nrfx_spim_xfer_desc_t spim_xfer_desc = NRFX_SPIM_XFER_RX((uint8_t *)rx_buffer, 1);
   11f38:	46ec      	mov	ip, sp
   11f3a:	4b0b      	ldr	r3, [pc, #44]	; (11f68 <ADS1298_read_data+0x48>)
   11f3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11f3e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        spi_transfer(&spim_xfer_desc);
   11f42:	4660      	mov	r0, ip
   11f44:	f7ff ffc2 	bl	11ecc <spi_transfer>
        while(state != idle)
   11f48:	e000      	b.n	11f4c <ADS1298_read_data+0x2c>
          __WFE();
   11f4a:	bf20      	wfe
        while(state != idle)
   11f4c:	4b04      	ldr	r3, [pc, #16]	; (11f60 <ADS1298_read_data+0x40>)
   11f4e:	781b      	ldrb	r3, [r3, #0]
   11f50:	2b00      	cmp	r3, #0
   11f52:	d1fa      	bne.n	11f4a <ADS1298_read_data+0x2a>
        return rx_buffer[0];
   11f54:	4b05      	ldr	r3, [pc, #20]	; (11f6c <ADS1298_read_data+0x4c>)
   11f56:	7818      	ldrb	r0, [r3, #0]
   11f58:	b2c0      	uxtb	r0, r0
}
   11f5a:	b005      	add	sp, #20
   11f5c:	f85d fb04 	ldr.w	pc, [sp], #4
   11f60:	2000caa9 	.word	0x2000caa9
   11f64:	2000caa8 	.word	0x2000caa8
   11f68:	0003f5c4 	.word	0x0003f5c4
   11f6c:	2000be28 	.word	0x2000be28

00011f70 <ADS1298_receive_data>:

bool ADS1298_receive_data() {
    if(state == idle) {
   11f70:	4b0c      	ldr	r3, [pc, #48]	; (11fa4 <ADS1298_receive_data+0x34>)
   11f72:	781b      	ldrb	r3, [r3, #0]
   11f74:	b10b      	cbz	r3, 11f7a <ADS1298_receive_data+0xa>
        new_data_available = false;
        nrfx_spim_xfer_desc_t spim_xfer_desc = NRFX_SPIM_XFER_RX(rx_buffer, 27);
        spi_transfer(&spim_xfer_desc);
        return true;
    } else {
        return false;
   11f76:	2000      	movs	r0, #0
    }
}
   11f78:	4770      	bx	lr
bool ADS1298_receive_data() {
   11f7a:	b500      	push	{lr}
   11f7c:	b085      	sub	sp, #20
        state = receive_data;
   11f7e:	4b09      	ldr	r3, [pc, #36]	; (11fa4 <ADS1298_receive_data+0x34>)
   11f80:	2202      	movs	r2, #2
   11f82:	701a      	strb	r2, [r3, #0]
        new_data_available = false;
   11f84:	4b08      	ldr	r3, [pc, #32]	; (11fa8 <ADS1298_receive_data+0x38>)
   11f86:	2200      	movs	r2, #0
   11f88:	701a      	strb	r2, [r3, #0]
        nrfx_spim_xfer_desc_t spim_xfer_desc = NRFX_SPIM_XFER_RX(rx_buffer, 27);
   11f8a:	46ec      	mov	ip, sp
   11f8c:	4b07      	ldr	r3, [pc, #28]	; (11fac <ADS1298_receive_data+0x3c>)
   11f8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   11f90:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
        spi_transfer(&spim_xfer_desc);
   11f94:	4660      	mov	r0, ip
   11f96:	f7ff ff99 	bl	11ecc <spi_transfer>
        return true;
   11f9a:	2001      	movs	r0, #1
}
   11f9c:	b005      	add	sp, #20
   11f9e:	f85d fb04 	ldr.w	pc, [sp], #4
   11fa2:	bf00      	nop
   11fa4:	2000caa9 	.word	0x2000caa9
   11fa8:	2000caa8 	.word	0x2000caa8
   11fac:	0003f5d4 	.word	0x0003f5d4

00011fb0 <shdn_init>:
void shdn_init(void) {
   11fb0:	b500      	push	{lr}
   11fb2:	b089      	sub	sp, #36	; 0x24
   11fb4:	4818      	ldr	r0, [pc, #96]	; (12018 <shdn_init+0x68>)
   11fb6:	f02c fc32 	bl	3e81e <z_device_is_ready>
    if (!device_is_ready(shdn_pin.port)) {
   11fba:	b138      	cbz	r0, 11fcc <shdn_init+0x1c>
    gpio_pin_configure_dt(&shdn_pin, GPIO_OUTPUT_INACTIVE);
   11fbc:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   11fc0:	4816      	ldr	r0, [pc, #88]	; (1201c <shdn_init+0x6c>)
   11fc2:	f023 fb57 	bl	35674 <gpio_pin_configure_dt>
}
   11fc6:	b009      	add	sp, #36	; 0x24
   11fc8:	f85d fb04 	ldr.w	pc, [sp], #4
        LOG_ERR("SHDN pin not ready!\n");
   11fcc:	4b14      	ldr	r3, [pc, #80]	; (12020 <shdn_init+0x70>)
   11fce:	9307      	str	r3, [sp, #28]
   11fd0:	2302      	movs	r3, #2
   11fd2:	f88d 3004 	strb.w	r3, [sp, #4]
   11fd6:	2300      	movs	r3, #0
   11fd8:	f88d 3005 	strb.w	r3, [sp, #5]
   11fdc:	f88d 3006 	strb.w	r3, [sp, #6]
   11fe0:	f88d 3007 	strb.w	r3, [sp, #7]
   11fe4:	9a01      	ldr	r2, [sp, #4]
   11fe6:	9206      	str	r2, [sp, #24]
   11fe8:	4619      	mov	r1, r3
   11fea:	f363 0100 	bfi	r1, r3, #0, #1
   11fee:	f363 0141 	bfi	r1, r3, #1, #1
   11ff2:	f363 0182 	bfi	r1, r3, #2, #1
   11ff6:	f363 01c5 	bfi	r1, r3, #3, #3
   11ffa:	2201      	movs	r2, #1
   11ffc:	f362 1188 	bfi	r1, r2, #6, #3
   12000:	2208      	movs	r2, #8
   12002:	f362 2152 	bfi	r1, r2, #9, #10
   12006:	f363 41de 	bfi	r1, r3, #19, #12
   1200a:	f363 71df 	bfi	r1, r3, #31, #1
   1200e:	aa06      	add	r2, sp, #24
   12010:	4804      	ldr	r0, [pc, #16]	; (12024 <shdn_init+0x74>)
   12012:	f004 fc9b 	bl	1694c <z_impl_z_log_msg_static_create>
        return;
   12016:	e7d6      	b.n	11fc6 <shdn_init+0x16>
   12018:	0003ef6c 	.word	0x0003ef6c
   1201c:	0004067c 	.word	0x0004067c
   12020:	000400ac 	.word	0x000400ac
   12024:	0003f490 	.word	0x0003f490

00012028 <set_shdn>:
void set_shdn(bool enable) {
   12028:	b590      	push	{r4, r7, lr}
   1202a:	b083      	sub	sp, #12
   1202c:	af00      	add	r7, sp, #0
   1202e:	4604      	mov	r4, r0
    gpio_pin_set(shdn_pin.port, shdn_pin.pin, enable ? 1 : 0);
   12030:	4602      	mov	r2, r0
   12032:	210b      	movs	r1, #11
   12034:	482e      	ldr	r0, [pc, #184]	; (120f0 <set_shdn+0xc8>)
   12036:	f7fe fb2f 	bl	10698 <gpio_pin_set>
    LOG_INF("SHDN %s\n", enable ? "disabled" : "enabled");
   1203a:	b1ec      	cbz	r4, 12078 <set_shdn+0x50>
   1203c:	492d      	ldr	r1, [pc, #180]	; (120f4 <set_shdn+0xcc>)
   1203e:	2300      	movs	r3, #0
   12040:	713b      	strb	r3, [r7, #4]
   12042:	2302      	movs	r3, #2
   12044:	717b      	strb	r3, [r7, #5]
   12046:	b088      	sub	sp, #32
   12048:	46ec      	mov	ip, sp
   1204a:	f11c 0210 	adds.w	r2, ip, #16
   1204e:	d015      	beq.n	1207c <set_shdn+0x54>
   12050:	200e      	movs	r0, #14
   12052:	b122      	cbz	r2, 1205e <set_shdn+0x36>
   12054:	2804      	cmp	r0, #4
   12056:	dd02      	ble.n	1205e <set_shdn+0x36>
   12058:	4b27      	ldr	r3, [pc, #156]	; (120f8 <set_shdn+0xd0>)
   1205a:	f8cc 3014 	str.w	r3, [ip, #20]
   1205e:	2300      	movs	r3, #0
   12060:	703b      	strb	r3, [r7, #0]
   12062:	2302      	movs	r3, #2
   12064:	707b      	strb	r3, [r7, #1]
   12066:	b1b2      	cbz	r2, 12096 <set_shdn+0x6e>
   12068:	2808      	cmp	r0, #8
   1206a:	dd01      	ble.n	12070 <set_shdn+0x48>
   1206c:	f8cc 1018 	str.w	r1, [ip, #24]
   12070:	f10c 031c 	add.w	r3, ip, #28
   12074:	2100      	movs	r1, #0
   12076:	e00c      	b.n	12092 <set_shdn+0x6a>
   12078:	4920      	ldr	r1, [pc, #128]	; (120fc <set_shdn+0xd4>)
   1207a:	e7e0      	b.n	1203e <set_shdn+0x16>
   1207c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12080:	e7e7      	b.n	12052 <set_shdn+0x2a>
   12082:	f101 0408 	add.w	r4, r1, #8
   12086:	443c      	add	r4, r7
   12088:	f814 4c08 	ldrb.w	r4, [r4, #-8]
   1208c:	f803 4b01 	strb.w	r4, [r3], #1
   12090:	3101      	adds	r1, #1
   12092:	2901      	cmp	r1, #1
   12094:	d9f5      	bls.n	12082 <set_shdn+0x5a>
   12096:	280d      	cmp	r0, #13
   12098:	dd26      	ble.n	120e8 <set_shdn+0xc0>
   1209a:	230e      	movs	r3, #14
   1209c:	b14a      	cbz	r2, 120b2 <set_shdn+0x8a>
   1209e:	2103      	movs	r1, #3
   120a0:	7139      	strb	r1, [r7, #4]
   120a2:	2100      	movs	r1, #0
   120a4:	7179      	strb	r1, [r7, #5]
   120a6:	71b9      	strb	r1, [r7, #6]
   120a8:	2101      	movs	r1, #1
   120aa:	71f9      	strb	r1, [r7, #7]
   120ac:	6878      	ldr	r0, [r7, #4]
   120ae:	f8cc 0010 	str.w	r0, [ip, #16]
   120b2:	2100      	movs	r1, #0
   120b4:	f36f 0100 	bfc	r1, #0, #1
   120b8:	f36f 0141 	bfc	r1, #1, #1
   120bc:	f36f 0182 	bfc	r1, #2, #1
   120c0:	f36f 01c5 	bfc	r1, #3, #3
   120c4:	2003      	movs	r0, #3
   120c6:	f360 1188 	bfi	r1, r0, #6, #3
   120ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
   120ce:	f363 2152 	bfi	r1, r3, #9, #10
   120d2:	f36f 41de 	bfc	r1, #19, #12
   120d6:	f36f 71df 	bfc	r1, #31, #1
   120da:	2300      	movs	r3, #0
   120dc:	4808      	ldr	r0, [pc, #32]	; (12100 <set_shdn+0xd8>)
   120de:	f004 fc35 	bl	1694c <z_impl_z_log_msg_static_create>
}
   120e2:	370c      	adds	r7, #12
   120e4:	46bd      	mov	sp, r7
   120e6:	bd90      	pop	{r4, r7, pc}
    LOG_INF("SHDN %s\n", enable ? "disabled" : "enabled");
   120e8:	f06f 031b 	mvn.w	r3, #27
   120ec:	e7d6      	b.n	1209c <set_shdn+0x74>
   120ee:	bf00      	nop
   120f0:	0003ef6c 	.word	0x0003ef6c
   120f4:	000400c4 	.word	0x000400c4
   120f8:	000400d8 	.word	0x000400d8
   120fc:	000400d0 	.word	0x000400d0
   12100:	0003f490 	.word	0x0003f490

00012104 <set_pot>:
int set_pot(int address, int value) {
   12104:	b5f0      	push	{r4, r5, r6, r7, lr}
   12106:	b08d      	sub	sp, #52	; 0x34
   12108:	af00      	add	r7, sp, #0
    uint8_t tx_buffer[2] = {data >> 8, data & 0xFF};
   1210a:	f000 0003 	and.w	r0, r0, #3
   1210e:	7538      	strb	r0, [r7, #20]
   12110:	7579      	strb	r1, [r7, #21]
    const struct spi_buf tx_buf = {
   12112:	f107 0314 	add.w	r3, r7, #20
   12116:	60fb      	str	r3, [r7, #12]
   12118:	2302      	movs	r3, #2
   1211a:	613b      	str	r3, [r7, #16]
    const struct spi_buf_set tx = {
   1211c:	f107 030c 	add.w	r3, r7, #12
   12120:	607b      	str	r3, [r7, #4]
   12122:	2301      	movs	r3, #1
   12124:	60bb      	str	r3, [r7, #8]
    set_shdn(false);
   12126:	2000      	movs	r0, #0
   12128:	f7ff ff7e 	bl	12028 <set_shdn>
    int error = spi_write(spi_ad8403, &spi_ad8403_cfg, &tx);
   1212c:	4b38      	ldr	r3, [pc, #224]	; (12210 <set_pot+0x10c>)
   1212e:	6818      	ldr	r0, [r3, #0]
static inline int z_impl_spi_transceive(const struct device *dev,
					const struct spi_config *config,
					const struct spi_buf_set *tx_bufs,
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
   12130:	6883      	ldr	r3, [r0, #8]
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   12132:	681c      	ldr	r4, [r3, #0]
   12134:	2300      	movs	r3, #0
   12136:	1d3a      	adds	r2, r7, #4
   12138:	4936      	ldr	r1, [pc, #216]	; (12214 <set_pot+0x110>)
   1213a:	47a0      	blx	r4
    if (error != 0) {
   1213c:	4604      	mov	r4, r0
   1213e:	2800      	cmp	r0, #0
   12140:	d042      	beq.n	121c8 <set_pot+0xc4>
        LOG_ERR("SPI transceive error: %i\n", error);
   12142:	466d      	mov	r5, sp
   12144:	b088      	sub	sp, #32
   12146:	466b      	mov	r3, sp
   12148:	f113 0210 	adds.w	r2, r3, #16
   1214c:	d00e      	beq.n	1216c <set_pot+0x68>
   1214e:	210c      	movs	r1, #12
   12150:	b13a      	cbz	r2, 12162 <set_pot+0x5e>
   12152:	4608      	mov	r0, r1
   12154:	2904      	cmp	r1, #4
   12156:	dd01      	ble.n	1215c <set_pot+0x58>
   12158:	4e2f      	ldr	r6, [pc, #188]	; (12218 <set_pot+0x114>)
   1215a:	615e      	str	r6, [r3, #20]
   1215c:	2808      	cmp	r0, #8
   1215e:	dd08      	ble.n	12172 <set_pot+0x6e>
   12160:	619c      	str	r4, [r3, #24]
   12162:	290b      	cmp	r1, #11
   12164:	dd2d      	ble.n	121c2 <set_pot+0xbe>
   12166:	f04f 0c0c 	mov.w	ip, #12
   1216a:	e004      	b.n	12176 <set_pot+0x72>
   1216c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12170:	e7ee      	b.n	12150 <set_pot+0x4c>
   12172:	f06f 0c1b 	mvn.w	ip, #27
   12176:	b13a      	cbz	r2, 12188 <set_pot+0x84>
   12178:	2103      	movs	r1, #3
   1217a:	7039      	strb	r1, [r7, #0]
   1217c:	2100      	movs	r1, #0
   1217e:	7079      	strb	r1, [r7, #1]
   12180:	70b9      	strb	r1, [r7, #2]
   12182:	70f9      	strb	r1, [r7, #3]
   12184:	6838      	ldr	r0, [r7, #0]
   12186:	6118      	str	r0, [r3, #16]
   12188:	2100      	movs	r1, #0
   1218a:	f36f 0100 	bfc	r1, #0, #1
   1218e:	f36f 0141 	bfc	r1, #1, #1
   12192:	f36f 0182 	bfc	r1, #2, #1
   12196:	f36f 01c5 	bfc	r1, #3, #3
   1219a:	2301      	movs	r3, #1
   1219c:	f363 1188 	bfi	r1, r3, #6, #3
   121a0:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   121a4:	f363 2152 	bfi	r1, r3, #9, #10
   121a8:	f36f 41de 	bfc	r1, #19, #12
   121ac:	f36f 71df 	bfc	r1, #31, #1
   121b0:	2300      	movs	r3, #0
   121b2:	481a      	ldr	r0, [pc, #104]	; (1221c <set_pot+0x118>)
   121b4:	f004 fbca 	bl	1694c <z_impl_z_log_msg_static_create>
   121b8:	46ad      	mov	sp, r5
}
   121ba:	4620      	mov	r0, r4
   121bc:	3734      	adds	r7, #52	; 0x34
   121be:	46bd      	mov	sp, r7
   121c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG_ERR("SPI transceive error: %i\n", error);
   121c2:	f06f 0c1b 	mvn.w	ip, #27
   121c6:	e7d6      	b.n	12176 <set_pot+0x72>
        LOG_INF("SPI write successful\n");
   121c8:	4b15      	ldr	r3, [pc, #84]	; (12220 <set_pot+0x11c>)
   121ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   121cc:	2302      	movs	r3, #2
   121ce:	703b      	strb	r3, [r7, #0]
   121d0:	2300      	movs	r3, #0
   121d2:	707b      	strb	r3, [r7, #1]
   121d4:	70bb      	strb	r3, [r7, #2]
   121d6:	70fb      	strb	r3, [r7, #3]
   121d8:	683a      	ldr	r2, [r7, #0]
   121da:	62ba      	str	r2, [r7, #40]	; 0x28
   121dc:	4619      	mov	r1, r3
   121de:	f363 0100 	bfi	r1, r3, #0, #1
   121e2:	f363 0141 	bfi	r1, r3, #1, #1
   121e6:	f363 0182 	bfi	r1, r3, #2, #1
   121ea:	f363 01c5 	bfi	r1, r3, #3, #3
   121ee:	2203      	movs	r2, #3
   121f0:	f362 1188 	bfi	r1, r2, #6, #3
   121f4:	2208      	movs	r2, #8
   121f6:	f362 2152 	bfi	r1, r2, #9, #10
   121fa:	f363 41de 	bfi	r1, r3, #19, #12
   121fe:	f363 71df 	bfi	r1, r3, #31, #1
   12202:	f107 0228 	add.w	r2, r7, #40	; 0x28
   12206:	4805      	ldr	r0, [pc, #20]	; (1221c <set_pot+0x118>)
   12208:	f004 fba0 	bl	1694c <z_impl_z_log_msg_static_create>
        return 0;
   1220c:	e7d5      	b.n	121ba <set_pot+0xb6>
   1220e:	bf00      	nop
   12210:	2000be00 	.word	0x2000be00
   12214:	20008280 	.word	0x20008280
   12218:	000400e4 	.word	0x000400e4
   1221c:	0003f490 	.word	0x0003f490
   12220:	00040100 	.word	0x00040100

00012224 <brightness_work_handler>:
    if (is_active) {
   12224:	4b41      	ldr	r3, [pc, #260]	; (1232c <brightness_work_handler+0x108>)
   12226:	781b      	ldrb	r3, [r3, #0]
   12228:	2b00      	cmp	r3, #0
   1222a:	d07e      	beq.n	1232a <brightness_work_handler+0x106>
void brightness_work_handler(struct k_work *work) {
   1222c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1222e:	b083      	sub	sp, #12
   12230:	af00      	add	r7, sp, #0
        if (increase_brightness) {
   12232:	4b3f      	ldr	r3, [pc, #252]	; (12330 <brightness_work_handler+0x10c>)
   12234:	781b      	ldrb	r3, [r3, #0]
   12236:	2b00      	cmp	r3, #0
   12238:	d05f      	beq.n	122fa <brightness_work_handler+0xd6>
            current_brightness[current_led] = (current_brightness[current_led] + 1) % BRIGHTNESS_STEPS;
   1223a:	4b3e      	ldr	r3, [pc, #248]	; (12334 <brightness_work_handler+0x110>)
   1223c:	681c      	ldr	r4, [r3, #0]
   1223e:	483e      	ldr	r0, [pc, #248]	; (12338 <brightness_work_handler+0x114>)
   12240:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   12244:	3201      	adds	r2, #1
   12246:	493d      	ldr	r1, [pc, #244]	; (1233c <brightness_work_handler+0x118>)
   12248:	fb81 3102 	smull	r3, r1, r1, r2
   1224c:	17d3      	asrs	r3, r2, #31
   1224e:	ebc3 0361 	rsb	r3, r3, r1, asr #1
   12252:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12256:	1ad3      	subs	r3, r2, r3
   12258:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
        level = led_brightness_levels[current_led][current_brightness[current_led]];
   1225c:	4b35      	ldr	r3, [pc, #212]	; (12334 <brightness_work_handler+0x110>)
   1225e:	6818      	ldr	r0, [r3, #0]
   12260:	4b35      	ldr	r3, [pc, #212]	; (12338 <brightness_work_handler+0x114>)
   12262:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   12266:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1226a:	4413      	add	r3, r2
   1226c:	4a34      	ldr	r2, [pc, #208]	; (12340 <brightness_work_handler+0x11c>)
   1226e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
        if (set_pot(current_led, level) == 0) {
   12272:	4621      	mov	r1, r4
   12274:	f7ff ff46 	bl	12104 <set_pot>
   12278:	2800      	cmp	r0, #0
   1227a:	d13b      	bne.n	122f4 <brightness_work_handler+0xd0>
            LOG_INF("Updated brightness for LED %d to %d\n", current_led, level);
   1227c:	4b2d      	ldr	r3, [pc, #180]	; (12334 <brightness_work_handler+0x110>)
   1227e:	681e      	ldr	r6, [r3, #0]
   12280:	466d      	mov	r5, sp
   12282:	b088      	sub	sp, #32
   12284:	466b      	mov	r3, sp
   12286:	f113 0210 	adds.w	r2, r3, #16
   1228a:	d048      	beq.n	1231e <brightness_work_handler+0xfa>
   1228c:	2110      	movs	r1, #16
   1228e:	b162      	cbz	r2, 122aa <brightness_work_handler+0x86>
   12290:	4608      	mov	r0, r1
   12292:	2904      	cmp	r1, #4
   12294:	dd03      	ble.n	1229e <brightness_work_handler+0x7a>
   12296:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 12344 <brightness_work_handler+0x120>
   1229a:	f8c3 c014 	str.w	ip, [r3, #20]
   1229e:	2808      	cmp	r0, #8
   122a0:	dd00      	ble.n	122a4 <brightness_work_handler+0x80>
   122a2:	619e      	str	r6, [r3, #24]
   122a4:	280c      	cmp	r0, #12
   122a6:	dd00      	ble.n	122aa <brightness_work_handler+0x86>
   122a8:	61dc      	str	r4, [r3, #28]
   122aa:	290f      	cmp	r1, #15
   122ac:	dd3a      	ble.n	12324 <brightness_work_handler+0x100>
   122ae:	2410      	movs	r4, #16
   122b0:	b13a      	cbz	r2, 122c2 <brightness_work_handler+0x9e>
   122b2:	2104      	movs	r1, #4
   122b4:	7139      	strb	r1, [r7, #4]
   122b6:	2100      	movs	r1, #0
   122b8:	7179      	strb	r1, [r7, #5]
   122ba:	71b9      	strb	r1, [r7, #6]
   122bc:	71f9      	strb	r1, [r7, #7]
   122be:	6878      	ldr	r0, [r7, #4]
   122c0:	6118      	str	r0, [r3, #16]
   122c2:	2100      	movs	r1, #0
   122c4:	f36f 0100 	bfc	r1, #0, #1
   122c8:	f36f 0141 	bfc	r1, #1, #1
   122cc:	f36f 0182 	bfc	r1, #2, #1
   122d0:	f36f 01c5 	bfc	r1, #3, #3
   122d4:	2303      	movs	r3, #3
   122d6:	f363 1188 	bfi	r1, r3, #6, #3
   122da:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   122de:	f364 2152 	bfi	r1, r4, #9, #10
   122e2:	f36f 41de 	bfc	r1, #19, #12
   122e6:	f36f 71df 	bfc	r1, #31, #1
   122ea:	2300      	movs	r3, #0
   122ec:	4816      	ldr	r0, [pc, #88]	; (12348 <brightness_work_handler+0x124>)
   122ee:	f004 fb2d 	bl	1694c <z_impl_z_log_msg_static_create>
   122f2:	46ad      	mov	sp, r5
}
   122f4:	370c      	adds	r7, #12
   122f6:	46bd      	mov	sp, r7
   122f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            current_brightness[current_led] = (current_brightness[current_led] - 1 + BRIGHTNESS_STEPS) % BRIGHTNESS_STEPS;
   122fa:	4b0e      	ldr	r3, [pc, #56]	; (12334 <brightness_work_handler+0x110>)
   122fc:	681c      	ldr	r4, [r3, #0]
   122fe:	480e      	ldr	r0, [pc, #56]	; (12338 <brightness_work_handler+0x114>)
   12300:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
   12304:	3204      	adds	r2, #4
   12306:	490d      	ldr	r1, [pc, #52]	; (1233c <brightness_work_handler+0x118>)
   12308:	fb81 3102 	smull	r3, r1, r1, r2
   1230c:	17d3      	asrs	r3, r2, #31
   1230e:	ebc3 0361 	rsb	r3, r3, r1, asr #1
   12312:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   12316:	1ad3      	subs	r3, r2, r3
   12318:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
   1231c:	e79e      	b.n	1225c <brightness_work_handler+0x38>
            LOG_INF("Updated brightness for LED %d to %d\n", current_led, level);
   1231e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12322:	e7b4      	b.n	1228e <brightness_work_handler+0x6a>
   12324:	f06f 041b 	mvn.w	r4, #27
   12328:	e7c2      	b.n	122b0 <brightness_work_handler+0x8c>
   1232a:	4770      	bx	lr
   1232c:	20008836 	.word	0x20008836
   12330:	20008835 	.word	0x20008835
   12334:	2000831c 	.word	0x2000831c
   12338:	2000bdf0 	.word	0x2000bdf0
   1233c:	66666667 	.word	0x66666667
   12340:	0004062c 	.word	0x0004062c
   12344:	00040118 	.word	0x00040118
   12348:	0003f490 	.word	0x0003f490

0001234c <turn_on_led>:
void turn_on_led(int led_index) {
   1234c:	b538      	push	{r3, r4, r5, lr}
   1234e:	4605      	mov	r5, r0
    for (int i = 0; i < NUM_LEDS; i++) {
   12350:	2400      	movs	r4, #0
   12352:	e00b      	b.n	1236c <turn_on_led+0x20>
        gpio_pin_set(leds[i].port, leds[i].pin, (i == led_index) ? 0 : 1);
   12354:	4b07      	ldr	r3, [pc, #28]	; (12374 <turn_on_led+0x28>)
   12356:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   1235a:	1b62      	subs	r2, r4, r5
   1235c:	bf18      	it	ne
   1235e:	2201      	movne	r2, #1
   12360:	7909      	ldrb	r1, [r1, #4]
   12362:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   12366:	f7fe f997 	bl	10698 <gpio_pin_set>
    for (int i = 0; i < NUM_LEDS; i++) {
   1236a:	3401      	adds	r4, #1
   1236c:	2c03      	cmp	r4, #3
   1236e:	ddf1      	ble.n	12354 <turn_on_led+0x8>
}
   12370:	bd38      	pop	{r3, r4, r5, pc}
   12372:	bf00      	nop
   12374:	20008298 	.word	0x20008298

00012378 <button_pressed>:
void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins) {
   12378:	b5f0      	push	{r4, r5, r6, r7, lr}
   1237a:	b089      	sub	sp, #36	; 0x24
   1237c:	af00      	add	r7, sp, #0
   1237e:	4614      	mov	r4, r2
    uint32_t current_time = k_uptime_get_32();
   12380:	f023 f983 	bl	3568a <k_uptime_get_32>
    if (current_time - last_press_time < DEBOUNCE_TIME_MS) {
   12384:	4ba3      	ldr	r3, [pc, #652]	; (12614 <button_pressed+0x29c>)
   12386:	681b      	ldr	r3, [r3, #0]
   12388:	1ac3      	subs	r3, r0, r3
   1238a:	2bc7      	cmp	r3, #199	; 0xc7
   1238c:	d930      	bls.n	123f0 <button_pressed+0x78>
    last_press_time = current_time;
   1238e:	4ba1      	ldr	r3, [pc, #644]	; (12614 <button_pressed+0x29c>)
   12390:	6018      	str	r0, [r3, #0]
    if (pins & BIT(buttons[0].spec.pin)) {
   12392:	4ba1      	ldr	r3, [pc, #644]	; (12618 <button_pressed+0x2a0>)
   12394:	791b      	ldrb	r3, [r3, #4]
   12396:	fa24 f303 	lsr.w	r3, r4, r3
   1239a:	f013 0f01 	tst.w	r3, #1
   1239e:	d036      	beq.n	1240e <button_pressed+0x96>
        if (is_active) {
   123a0:	4b9e      	ldr	r3, [pc, #632]	; (1261c <button_pressed+0x2a4>)
   123a2:	781b      	ldrb	r3, [r3, #0]
   123a4:	2b00      	cmp	r3, #0
   123a6:	f000 808e 	beq.w	124c6 <button_pressed+0x14e>
            current_led = (current_led + 1) % NUM_LEDS;
   123aa:	499d      	ldr	r1, [pc, #628]	; (12620 <button_pressed+0x2a8>)
   123ac:	680b      	ldr	r3, [r1, #0]
   123ae:	3301      	adds	r3, #1
   123b0:	425a      	negs	r2, r3
   123b2:	f003 0303 	and.w	r3, r3, #3
   123b6:	f002 0203 	and.w	r2, r2, #3
   123ba:	bf58      	it	pl
   123bc:	4253      	negpl	r3, r2
   123be:	600b      	str	r3, [r1, #0]
            switch (current_led) {
   123c0:	2b03      	cmp	r3, #3
   123c2:	d806      	bhi.n	123d2 <button_pressed+0x5a>
   123c4:	e8df f003 	tbb	[pc, r3]
   123c8:	1f1b1702 	.word	0x1f1b1702
                case 0: current_mosfet = &leds[0]; break;
   123cc:	4b95      	ldr	r3, [pc, #596]	; (12624 <button_pressed+0x2ac>)
   123ce:	4a96      	ldr	r2, [pc, #600]	; (12628 <button_pressed+0x2b0>)
   123d0:	601a      	str	r2, [r3, #0]
	z_impl_k_timer_stop(timer);
   123d2:	4896      	ldr	r0, [pc, #600]	; (1262c <button_pressed+0x2b4>)
   123d4:	f02c fc91 	bl	3ecfa <z_impl_k_timer_stop>
            gpio_pin_set(current_mosfet->port, current_mosfet->pin, 1);
   123d8:	4b92      	ldr	r3, [pc, #584]	; (12624 <button_pressed+0x2ac>)
   123da:	681b      	ldr	r3, [r3, #0]
   123dc:	2201      	movs	r2, #1
   123de:	7919      	ldrb	r1, [r3, #4]
   123e0:	6818      	ldr	r0, [r3, #0]
   123e2:	f7fe f959 	bl	10698 <gpio_pin_set>
            action = 0;
   123e6:	2400      	movs	r4, #0
    if (is_active) {
   123e8:	4b8c      	ldr	r3, [pc, #560]	; (1261c <button_pressed+0x2a4>)
   123ea:	781b      	ldrb	r3, [r3, #0]
   123ec:	2b00      	cmp	r3, #0
   123ee:	d16c      	bne.n	124ca <button_pressed+0x152>
}
   123f0:	3724      	adds	r7, #36	; 0x24
   123f2:	46bd      	mov	sp, r7
   123f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                case 1: current_mosfet = &leds[1]; break;
   123f6:	4b8b      	ldr	r3, [pc, #556]	; (12624 <button_pressed+0x2ac>)
   123f8:	4a8d      	ldr	r2, [pc, #564]	; (12630 <button_pressed+0x2b8>)
   123fa:	601a      	str	r2, [r3, #0]
   123fc:	e7e9      	b.n	123d2 <button_pressed+0x5a>
                case 2: current_mosfet = &leds[2]; break;
   123fe:	4b89      	ldr	r3, [pc, #548]	; (12624 <button_pressed+0x2ac>)
   12400:	4a8c      	ldr	r2, [pc, #560]	; (12634 <button_pressed+0x2bc>)
   12402:	601a      	str	r2, [r3, #0]
   12404:	e7e5      	b.n	123d2 <button_pressed+0x5a>
                case 3: current_mosfet = &leds[3]; break;
   12406:	4b87      	ldr	r3, [pc, #540]	; (12624 <button_pressed+0x2ac>)
   12408:	4a8b      	ldr	r2, [pc, #556]	; (12638 <button_pressed+0x2c0>)
   1240a:	601a      	str	r2, [r3, #0]
   1240c:	e7e1      	b.n	123d2 <button_pressed+0x5a>
    } else if (pins & BIT(buttons[1].spec.pin)) {
   1240e:	4b82      	ldr	r3, [pc, #520]	; (12618 <button_pressed+0x2a0>)
   12410:	7e1b      	ldrb	r3, [r3, #24]
   12412:	fa24 f303 	lsr.w	r3, r4, r3
   12416:	f013 0f01 	tst.w	r3, #1
   1241a:	d116      	bne.n	1244a <button_pressed+0xd2>
    } else if (pins & BIT(buttons[2].spec.pin)) {
   1241c:	4b7e      	ldr	r3, [pc, #504]	; (12618 <button_pressed+0x2a0>)
   1241e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
   12422:	fa24 f303 	lsr.w	r3, r4, r3
   12426:	f013 0f01 	tst.w	r3, #1
   1242a:	d115      	bne.n	12458 <button_pressed+0xe0>
    } else if (pins & BIT(buttons[3].spec.pin)) {
   1242c:	4b7a      	ldr	r3, [pc, #488]	; (12618 <button_pressed+0x2a0>)
   1242e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   12432:	fa24 f303 	lsr.w	r3, r4, r3
   12436:	f013 0f01 	tst.w	r3, #1
   1243a:	d015      	beq.n	12468 <button_pressed+0xf0>
        is_active = !is_active;
   1243c:	4a77      	ldr	r2, [pc, #476]	; (1261c <button_pressed+0x2a4>)
   1243e:	7813      	ldrb	r3, [r2, #0]
   12440:	f083 0301 	eor.w	r3, r3, #1
   12444:	7013      	strb	r3, [r2, #0]
        action = 3;
   12446:	2403      	movs	r4, #3
   12448:	e7ce      	b.n	123e8 <button_pressed+0x70>
        increase_brightness = true;
   1244a:	2401      	movs	r4, #1
   1244c:	4b7b      	ldr	r3, [pc, #492]	; (1263c <button_pressed+0x2c4>)
   1244e:	701c      	strb	r4, [r3, #0]
        k_work_submit(&brightness_work); // 提交到工作队列
   12450:	487b      	ldr	r0, [pc, #492]	; (12640 <button_pressed+0x2c8>)
   12452:	f020 f875 	bl	32540 <k_work_submit>
        action = 1;
   12456:	e7c7      	b.n	123e8 <button_pressed+0x70>
        increase_brightness = false;
   12458:	4b78      	ldr	r3, [pc, #480]	; (1263c <button_pressed+0x2c4>)
   1245a:	2200      	movs	r2, #0
   1245c:	701a      	strb	r2, [r3, #0]
        k_work_submit(&brightness_work); // 提交到工作队列
   1245e:	4878      	ldr	r0, [pc, #480]	; (12640 <button_pressed+0x2c8>)
   12460:	f020 f86e 	bl	32540 <k_work_submit>
        action = 2;
   12464:	2402      	movs	r4, #2
   12466:	e7bf      	b.n	123e8 <button_pressed+0x70>
    } else if (pins & BIT(buttons[4].spec.pin)) {
   12468:	4b6b      	ldr	r3, [pc, #428]	; (12618 <button_pressed+0x2a0>)
   1246a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
   1246e:	40dc      	lsrs	r4, r3
   12470:	f014 0f01 	tst.w	r4, #1
   12474:	d101      	bne.n	1247a <button_pressed+0x102>
    int action = 0;
   12476:	2400      	movs	r4, #0
   12478:	e7b6      	b.n	123e8 <button_pressed+0x70>
        LOG_INF("PHY CHANGE button detected!\n");
   1247a:	4b72      	ldr	r3, [pc, #456]	; (12644 <button_pressed+0x2cc>)
   1247c:	61fb      	str	r3, [r7, #28]
   1247e:	2302      	movs	r3, #2
   12480:	713b      	strb	r3, [r7, #4]
   12482:	2300      	movs	r3, #0
   12484:	717b      	strb	r3, [r7, #5]
   12486:	71bb      	strb	r3, [r7, #6]
   12488:	71fb      	strb	r3, [r7, #7]
   1248a:	687a      	ldr	r2, [r7, #4]
   1248c:	61ba      	str	r2, [r7, #24]
   1248e:	4619      	mov	r1, r3
   12490:	f363 0100 	bfi	r1, r3, #0, #1
   12494:	f363 0141 	bfi	r1, r3, #1, #1
   12498:	f363 0182 	bfi	r1, r3, #2, #1
   1249c:	f363 01c5 	bfi	r1, r3, #3, #3
   124a0:	2203      	movs	r2, #3
   124a2:	f362 1188 	bfi	r1, r2, #6, #3
   124a6:	2208      	movs	r2, #8
   124a8:	f362 2152 	bfi	r1, r2, #9, #10
   124ac:	f363 41de 	bfi	r1, r3, #19, #12
   124b0:	f363 71df 	bfi	r1, r3, #31, #1
   124b4:	f107 0218 	add.w	r2, r7, #24
   124b8:	4863      	ldr	r0, [pc, #396]	; (12648 <button_pressed+0x2d0>)
   124ba:	f004 fa47 	bl	1694c <z_impl_z_log_msg_static_create>
        toggle_ble_phy();
   124be:	f7fe ff33 	bl	11328 <toggle_ble_phy>
        action = 4;
   124c2:	2404      	movs	r4, #4
   124c4:	e790      	b.n	123e8 <button_pressed+0x70>
    int action = 0;
   124c6:	2400      	movs	r4, #0
   124c8:	e78e      	b.n	123e8 <button_pressed+0x70>
        turn_on_led(current_led);
   124ca:	4b55      	ldr	r3, [pc, #340]	; (12620 <button_pressed+0x2a8>)
   124cc:	6818      	ldr	r0, [r3, #0]
   124ce:	f7ff ff3d 	bl	1234c <turn_on_led>
        LOG_INF("Button %d pressed: ", action);
   124d2:	466d      	mov	r5, sp
   124d4:	b088      	sub	sp, #32
   124d6:	466b      	mov	r3, sp
   124d8:	f113 0210 	adds.w	r2, r3, #16
   124dc:	d00d      	beq.n	124fa <button_pressed+0x182>
   124de:	210c      	movs	r1, #12
   124e0:	b13a      	cbz	r2, 124f2 <button_pressed+0x17a>
   124e2:	4608      	mov	r0, r1
   124e4:	2904      	cmp	r1, #4
   124e6:	dd01      	ble.n	124ec <button_pressed+0x174>
   124e8:	4e58      	ldr	r6, [pc, #352]	; (1264c <button_pressed+0x2d4>)
   124ea:	615e      	str	r6, [r3, #20]
   124ec:	2808      	cmp	r0, #8
   124ee:	dd07      	ble.n	12500 <button_pressed+0x188>
   124f0:	619c      	str	r4, [r3, #24]
   124f2:	290b      	cmp	r1, #11
   124f4:	dd3e      	ble.n	12574 <button_pressed+0x1fc>
   124f6:	240c      	movs	r4, #12
   124f8:	e004      	b.n	12504 <button_pressed+0x18c>
   124fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   124fe:	e7ef      	b.n	124e0 <button_pressed+0x168>
   12500:	f06f 041b 	mvn.w	r4, #27
   12504:	b13a      	cbz	r2, 12516 <button_pressed+0x19e>
   12506:	2103      	movs	r1, #3
   12508:	7139      	strb	r1, [r7, #4]
   1250a:	2100      	movs	r1, #0
   1250c:	7179      	strb	r1, [r7, #5]
   1250e:	71b9      	strb	r1, [r7, #6]
   12510:	71f9      	strb	r1, [r7, #7]
   12512:	6878      	ldr	r0, [r7, #4]
   12514:	6118      	str	r0, [r3, #16]
   12516:	2100      	movs	r1, #0
   12518:	f36f 0100 	bfc	r1, #0, #1
   1251c:	f36f 0141 	bfc	r1, #1, #1
   12520:	f36f 0182 	bfc	r1, #2, #1
   12524:	f36f 01c5 	bfc	r1, #3, #3
   12528:	2303      	movs	r3, #3
   1252a:	f363 1188 	bfi	r1, r3, #6, #3
   1252e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   12532:	f363 2152 	bfi	r1, r3, #9, #10
   12536:	f36f 41de 	bfc	r1, #19, #12
   1253a:	f36f 71df 	bfc	r1, #31, #1
   1253e:	2300      	movs	r3, #0
   12540:	4841      	ldr	r0, [pc, #260]	; (12648 <button_pressed+0x2d0>)
   12542:	f004 fa03 	bl	1694c <z_impl_z_log_msg_static_create>
   12546:	46ad      	mov	sp, r5
        LOG_INF("Current LED is %d\n", current_led);
   12548:	4b35      	ldr	r3, [pc, #212]	; (12620 <button_pressed+0x2a8>)
   1254a:	681c      	ldr	r4, [r3, #0]
   1254c:	466d      	mov	r5, sp
   1254e:	b088      	sub	sp, #32
   12550:	466b      	mov	r3, sp
   12552:	f113 0210 	adds.w	r2, r3, #16
   12556:	d010      	beq.n	1257a <button_pressed+0x202>
   12558:	210c      	movs	r1, #12
   1255a:	b13a      	cbz	r2, 1256c <button_pressed+0x1f4>
   1255c:	4608      	mov	r0, r1
   1255e:	2904      	cmp	r1, #4
   12560:	dd01      	ble.n	12566 <button_pressed+0x1ee>
   12562:	4e3b      	ldr	r6, [pc, #236]	; (12650 <button_pressed+0x2d8>)
   12564:	615e      	str	r6, [r3, #20]
   12566:	2808      	cmp	r0, #8
   12568:	dd0a      	ble.n	12580 <button_pressed+0x208>
   1256a:	619c      	str	r4, [r3, #24]
   1256c:	290b      	cmp	r1, #11
   1256e:	dd4a      	ble.n	12606 <button_pressed+0x28e>
   12570:	240c      	movs	r4, #12
   12572:	e007      	b.n	12584 <button_pressed+0x20c>
        LOG_INF("Button %d pressed: ", action);
   12574:	f06f 041b 	mvn.w	r4, #27
   12578:	e7c4      	b.n	12504 <button_pressed+0x18c>
        LOG_INF("Current LED is %d\n", current_led);
   1257a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1257e:	e7ec      	b.n	1255a <button_pressed+0x1e2>
   12580:	f06f 041b 	mvn.w	r4, #27
   12584:	b13a      	cbz	r2, 12596 <button_pressed+0x21e>
   12586:	2103      	movs	r1, #3
   12588:	7139      	strb	r1, [r7, #4]
   1258a:	2100      	movs	r1, #0
   1258c:	7179      	strb	r1, [r7, #5]
   1258e:	71b9      	strb	r1, [r7, #6]
   12590:	71f9      	strb	r1, [r7, #7]
   12592:	6878      	ldr	r0, [r7, #4]
   12594:	6118      	str	r0, [r3, #16]
   12596:	2100      	movs	r1, #0
   12598:	f36f 0100 	bfc	r1, #0, #1
   1259c:	f36f 0141 	bfc	r1, #1, #1
   125a0:	f36f 0182 	bfc	r1, #2, #1
   125a4:	f36f 01c5 	bfc	r1, #3, #3
   125a8:	2303      	movs	r3, #3
   125aa:	f363 1188 	bfi	r1, r3, #6, #3
   125ae:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   125b2:	f363 2152 	bfi	r1, r3, #9, #10
   125b6:	f36f 41de 	bfc	r1, #19, #12
   125ba:	f36f 71df 	bfc	r1, #31, #1
   125be:	2300      	movs	r3, #0
   125c0:	4821      	ldr	r0, [pc, #132]	; (12648 <button_pressed+0x2d0>)
   125c2:	f004 f9c3 	bl	1694c <z_impl_z_log_msg_static_create>
   125c6:	46ad      	mov	sp, r5
        LOG_INF("Current brightness level: %d\n", led_brightness_levels[current_led][current_brightness[current_led]]);
   125c8:	4b15      	ldr	r3, [pc, #84]	; (12620 <button_pressed+0x2a8>)
   125ca:	681b      	ldr	r3, [r3, #0]
   125cc:	4a21      	ldr	r2, [pc, #132]	; (12654 <button_pressed+0x2dc>)
   125ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   125d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   125d6:	4413      	add	r3, r2
   125d8:	4a1f      	ldr	r2, [pc, #124]	; (12658 <button_pressed+0x2e0>)
   125da:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   125de:	466d      	mov	r5, sp
   125e0:	b088      	sub	sp, #32
   125e2:	466b      	mov	r3, sp
   125e4:	f113 0210 	adds.w	r2, r3, #16
   125e8:	d010      	beq.n	1260c <button_pressed+0x294>
   125ea:	210c      	movs	r1, #12
   125ec:	b13a      	cbz	r2, 125fe <button_pressed+0x286>
   125ee:	4608      	mov	r0, r1
   125f0:	2904      	cmp	r1, #4
   125f2:	dd01      	ble.n	125f8 <button_pressed+0x280>
   125f4:	4e19      	ldr	r6, [pc, #100]	; (1265c <button_pressed+0x2e4>)
   125f6:	615e      	str	r6, [r3, #20]
   125f8:	2808      	cmp	r0, #8
   125fa:	dd31      	ble.n	12660 <button_pressed+0x2e8>
   125fc:	619c      	str	r4, [r3, #24]
   125fe:	290b      	cmp	r1, #11
   12600:	dd53      	ble.n	126aa <button_pressed+0x332>
   12602:	240c      	movs	r4, #12
   12604:	e02e      	b.n	12664 <button_pressed+0x2ec>
        LOG_INF("Current LED is %d\n", current_led);
   12606:	f06f 041b 	mvn.w	r4, #27
   1260a:	e7bb      	b.n	12584 <button_pressed+0x20c>
        LOG_INF("Current brightness level: %d\n", led_brightness_levels[current_led][current_brightness[current_led]]);
   1260c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12610:	e7ec      	b.n	125ec <button_pressed+0x274>
   12612:	bf00      	nop
   12614:	2000bdec 	.word	0x2000bdec
   12618:	200082b8 	.word	0x200082b8
   1261c:	20008836 	.word	0x20008836
   12620:	2000831c 	.word	0x2000831c
   12624:	2000bde8 	.word	0x2000bde8
   12628:	20008298 	.word	0x20008298
   1262c:	20008d40 	.word	0x20008d40
   12630:	200082a0 	.word	0x200082a0
   12634:	200082a8 	.word	0x200082a8
   12638:	200082b0 	.word	0x200082b0
   1263c:	20008835 	.word	0x20008835
   12640:	2000be0c 	.word	0x2000be0c
   12644:	00040140 	.word	0x00040140
   12648:	0003f490 	.word	0x0003f490
   1264c:	00040160 	.word	0x00040160
   12650:	00040174 	.word	0x00040174
   12654:	2000bdf0 	.word	0x2000bdf0
   12658:	0004062c 	.word	0x0004062c
   1265c:	00040188 	.word	0x00040188
   12660:	f06f 041b 	mvn.w	r4, #27
   12664:	b13a      	cbz	r2, 12676 <button_pressed+0x2fe>
   12666:	2103      	movs	r1, #3
   12668:	7139      	strb	r1, [r7, #4]
   1266a:	2100      	movs	r1, #0
   1266c:	7179      	strb	r1, [r7, #5]
   1266e:	71b9      	strb	r1, [r7, #6]
   12670:	71f9      	strb	r1, [r7, #7]
   12672:	6878      	ldr	r0, [r7, #4]
   12674:	6118      	str	r0, [r3, #16]
   12676:	2100      	movs	r1, #0
   12678:	f36f 0100 	bfc	r1, #0, #1
   1267c:	f36f 0141 	bfc	r1, #1, #1
   12680:	f36f 0182 	bfc	r1, #2, #1
   12684:	f36f 01c5 	bfc	r1, #3, #3
   12688:	2303      	movs	r3, #3
   1268a:	f363 1188 	bfi	r1, r3, #6, #3
   1268e:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   12692:	f363 2152 	bfi	r1, r3, #9, #10
   12696:	f36f 41de 	bfc	r1, #19, #12
   1269a:	f36f 71df 	bfc	r1, #31, #1
   1269e:	2300      	movs	r3, #0
   126a0:	4803      	ldr	r0, [pc, #12]	; (126b0 <button_pressed+0x338>)
   126a2:	f004 f953 	bl	1694c <z_impl_z_log_msg_static_create>
   126a6:	46ad      	mov	sp, r5
   126a8:	e6a2      	b.n	123f0 <button_pressed+0x78>
   126aa:	f06f 041b 	mvn.w	r4, #27
   126ae:	e7d9      	b.n	12664 <button_pressed+0x2ec>
   126b0:	0003f490 	.word	0x0003f490

000126b4 <force_led_on>:
void force_led_on(int led_index) {
   126b4:	b5b0      	push	{r4, r5, r7, lr}
   126b6:	b082      	sub	sp, #8
   126b8:	af00      	add	r7, sp, #0
    if (led_index >= 0 && led_index < NUM_LEDS) {
   126ba:	2803      	cmp	r0, #3
   126bc:	d939      	bls.n	12732 <force_led_on+0x7e>
        LOG_ERR("Invalid LED index for turning on: %d\n", led_index);
   126be:	466c      	mov	r4, sp
   126c0:	b088      	sub	sp, #32
   126c2:	466b      	mov	r3, sp
   126c4:	f113 0210 	adds.w	r2, r3, #16
   126c8:	d03d      	beq.n	12746 <force_led_on+0x92>
   126ca:	210c      	movs	r1, #12
   126cc:	b142      	cbz	r2, 126e0 <force_led_on+0x2c>
   126ce:	468c      	mov	ip, r1
   126d0:	2904      	cmp	r1, #4
   126d2:	dd01      	ble.n	126d8 <force_led_on+0x24>
   126d4:	4d1f      	ldr	r5, [pc, #124]	; (12754 <force_led_on+0xa0>)
   126d6:	615d      	str	r5, [r3, #20]
   126d8:	f1bc 0f08 	cmp.w	ip, #8
   126dc:	dd00      	ble.n	126e0 <force_led_on+0x2c>
   126de:	6198      	str	r0, [r3, #24]
   126e0:	290b      	cmp	r1, #11
   126e2:	dd33      	ble.n	1274c <force_led_on+0x98>
   126e4:	f04f 0c0c 	mov.w	ip, #12
   126e8:	b13a      	cbz	r2, 126fa <force_led_on+0x46>
   126ea:	2103      	movs	r1, #3
   126ec:	7139      	strb	r1, [r7, #4]
   126ee:	2100      	movs	r1, #0
   126f0:	7179      	strb	r1, [r7, #5]
   126f2:	71b9      	strb	r1, [r7, #6]
   126f4:	71f9      	strb	r1, [r7, #7]
   126f6:	6878      	ldr	r0, [r7, #4]
   126f8:	6118      	str	r0, [r3, #16]
   126fa:	2100      	movs	r1, #0
   126fc:	f36f 0100 	bfc	r1, #0, #1
   12700:	f36f 0141 	bfc	r1, #1, #1
   12704:	f36f 0182 	bfc	r1, #2, #1
   12708:	f36f 01c5 	bfc	r1, #3, #3
   1270c:	2301      	movs	r3, #1
   1270e:	f363 1188 	bfi	r1, r3, #6, #3
   12712:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   12716:	f36c 2152 	bfi	r1, ip, #9, #10
   1271a:	f36f 41de 	bfc	r1, #19, #12
   1271e:	f36f 71df 	bfc	r1, #31, #1
   12722:	2300      	movs	r3, #0
   12724:	480c      	ldr	r0, [pc, #48]	; (12758 <force_led_on+0xa4>)
   12726:	f004 f911 	bl	1694c <z_impl_z_log_msg_static_create>
   1272a:	46a5      	mov	sp, r4
}
   1272c:	3708      	adds	r7, #8
   1272e:	46bd      	mov	sp, r7
   12730:	bdb0      	pop	{r4, r5, r7, pc}
        gpio_pin_set(leds[led_index].port, leds[led_index].pin, 0); // 低电平点亮
   12732:	4b0a      	ldr	r3, [pc, #40]	; (1275c <force_led_on+0xa8>)
   12734:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   12738:	2200      	movs	r2, #0
   1273a:	7909      	ldrb	r1, [r1, #4]
   1273c:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   12740:	f7fd ffaa 	bl	10698 <gpio_pin_set>
   12744:	e7f2      	b.n	1272c <force_led_on+0x78>
        LOG_ERR("Invalid LED index for turning on: %d\n", led_index);
   12746:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1274a:	e7bf      	b.n	126cc <force_led_on+0x18>
   1274c:	f06f 0c1b 	mvn.w	ip, #27
   12750:	e7ca      	b.n	126e8 <force_led_on+0x34>
   12752:	bf00      	nop
   12754:	000401a8 	.word	0x000401a8
   12758:	0003f490 	.word	0x0003f490
   1275c:	20008298 	.word	0x20008298

00012760 <force_led_off>:
void force_led_off(int led_index) {
   12760:	b5b0      	push	{r4, r5, r7, lr}
   12762:	b082      	sub	sp, #8
   12764:	af00      	add	r7, sp, #0
    if (led_index >= 0 && led_index < NUM_LEDS) {
   12766:	2803      	cmp	r0, #3
   12768:	d939      	bls.n	127de <force_led_off+0x7e>
        LOG_ERR("Invalid LED index for turning off: %d\n", led_index);
   1276a:	466c      	mov	r4, sp
   1276c:	b088      	sub	sp, #32
   1276e:	466b      	mov	r3, sp
   12770:	f113 0210 	adds.w	r2, r3, #16
   12774:	d03d      	beq.n	127f2 <force_led_off+0x92>
   12776:	210c      	movs	r1, #12
   12778:	b142      	cbz	r2, 1278c <force_led_off+0x2c>
   1277a:	468c      	mov	ip, r1
   1277c:	2904      	cmp	r1, #4
   1277e:	dd01      	ble.n	12784 <force_led_off+0x24>
   12780:	4d1f      	ldr	r5, [pc, #124]	; (12800 <force_led_off+0xa0>)
   12782:	615d      	str	r5, [r3, #20]
   12784:	f1bc 0f08 	cmp.w	ip, #8
   12788:	dd00      	ble.n	1278c <force_led_off+0x2c>
   1278a:	6198      	str	r0, [r3, #24]
   1278c:	290b      	cmp	r1, #11
   1278e:	dd33      	ble.n	127f8 <force_led_off+0x98>
   12790:	f04f 0c0c 	mov.w	ip, #12
   12794:	b13a      	cbz	r2, 127a6 <force_led_off+0x46>
   12796:	2103      	movs	r1, #3
   12798:	7139      	strb	r1, [r7, #4]
   1279a:	2100      	movs	r1, #0
   1279c:	7179      	strb	r1, [r7, #5]
   1279e:	71b9      	strb	r1, [r7, #6]
   127a0:	71f9      	strb	r1, [r7, #7]
   127a2:	6878      	ldr	r0, [r7, #4]
   127a4:	6118      	str	r0, [r3, #16]
   127a6:	2100      	movs	r1, #0
   127a8:	f36f 0100 	bfc	r1, #0, #1
   127ac:	f36f 0141 	bfc	r1, #1, #1
   127b0:	f36f 0182 	bfc	r1, #2, #1
   127b4:	f36f 01c5 	bfc	r1, #3, #3
   127b8:	2301      	movs	r3, #1
   127ba:	f363 1188 	bfi	r1, r3, #6, #3
   127be:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   127c2:	f36c 2152 	bfi	r1, ip, #9, #10
   127c6:	f36f 41de 	bfc	r1, #19, #12
   127ca:	f36f 71df 	bfc	r1, #31, #1
   127ce:	2300      	movs	r3, #0
   127d0:	480c      	ldr	r0, [pc, #48]	; (12804 <force_led_off+0xa4>)
   127d2:	f004 f8bb 	bl	1694c <z_impl_z_log_msg_static_create>
   127d6:	46a5      	mov	sp, r4
}
   127d8:	3708      	adds	r7, #8
   127da:	46bd      	mov	sp, r7
   127dc:	bdb0      	pop	{r4, r5, r7, pc}
        gpio_pin_set(leds[led_index].port, leds[led_index].pin, 1); // 高电平熄灭
   127de:	4b0a      	ldr	r3, [pc, #40]	; (12808 <force_led_off+0xa8>)
   127e0:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   127e4:	2201      	movs	r2, #1
   127e6:	7909      	ldrb	r1, [r1, #4]
   127e8:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   127ec:	f7fd ff54 	bl	10698 <gpio_pin_set>
   127f0:	e7f2      	b.n	127d8 <force_led_off+0x78>
        LOG_ERR("Invalid LED index for turning off: %d\n", led_index);
   127f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   127f6:	e7bf      	b.n	12778 <force_led_off+0x18>
   127f8:	f06f 0c1b 	mvn.w	ip, #27
   127fc:	e7ca      	b.n	12794 <force_led_off+0x34>
   127fe:	bf00      	nop
   12800:	000401d0 	.word	0x000401d0
   12804:	0003f490 	.word	0x0003f490
   12808:	20008298 	.word	0x20008298

0001280c <data_collect_thread_handler>:
void data_collect_thread_handler(void *arg1, void *arg2, void *arg3) {
   1280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t T0 = k_uptime_get_32();
   12810:	f022 ff3b 	bl	3568a <k_uptime_get_32>
   12814:	4606      	mov	r6, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   12816:	4c4f      	ldr	r4, [pc, #316]	; (12954 <data_collect_thread_handler+0x148>)
   12818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1281c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12820:	4620      	mov	r0, r4
   12822:	f01f f81b 	bl	3185c <z_impl_k_mutex_lock>
    dummy_batch[0] = (T0 >> 24) & 0xFF;
   12826:	0e32      	lsrs	r2, r6, #24
   12828:	4b4b      	ldr	r3, [pc, #300]	; (12958 <data_collect_thread_handler+0x14c>)
   1282a:	701a      	strb	r2, [r3, #0]
    dummy_batch[1] = (T0 >> 16) & 0xFF;
   1282c:	0c32      	lsrs	r2, r6, #16
   1282e:	705a      	strb	r2, [r3, #1]
    dummy_batch[2] = (T0 >> 8) & 0xFF;
   12830:	0a32      	lsrs	r2, r6, #8
   12832:	709a      	strb	r2, [r3, #2]
    dummy_batch[3] = T0 & 0xFF;
   12834:	70de      	strb	r6, [r3, #3]
	return z_impl_k_mutex_unlock(mutex);
   12836:	4620      	mov	r0, r4
   12838:	f01f f926 	bl	31a88 <z_impl_k_mutex_unlock>
   1283c:	e063      	b.n	12906 <data_collect_thread_handler+0xfa>
        uint32_t Tnow = k_uptime_get_32();
   1283e:	f022 ff24 	bl	3568a <k_uptime_get_32>
        uint8_t delta = (uint8_t)(Tnow - T0);
   12842:	b2c4      	uxtb	r4, r0
   12844:	b2f3      	uxtb	r3, r6
   12846:	1ae4      	subs	r4, r4, r3
   12848:	b2e4      	uxtb	r4, r4
	return z_impl_k_mutex_lock(mutex, timeout);
   1284a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 12954 <data_collect_thread_handler+0x148>
   1284e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12856:	4648      	mov	r0, r9
   12858:	f01f f800 	bl	3185c <z_impl_k_mutex_lock>
        uint8_t *ptr = &dummy_batch[4 + collect_counter * 16];
   1285c:	4b3f      	ldr	r3, [pc, #252]	; (1295c <data_collect_thread_handler+0x150>)
   1285e:	681f      	ldr	r7, [r3, #0]
   12860:	013f      	lsls	r7, r7, #4
   12862:	3704      	adds	r7, #4
   12864:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 12958 <data_collect_thread_handler+0x14c>
   12868:	eb07 0508 	add.w	r5, r7, r8
	return z_impl_k_mutex_unlock(mutex);
   1286c:	4648      	mov	r0, r9
   1286e:	f01f f90b 	bl	31a88 <z_impl_k_mutex_unlock>
        ptr[0] = delta;
   12872:	f808 4007 	strb.w	r4, [r8, r7]
        for (int led_idx = 0; led_idx < NUM_LEDS; led_idx++) {
   12876:	2400      	movs	r4, #0
   12878:	e00a      	b.n	12890 <data_collect_thread_handler+0x84>
                ptr[10] = rx_buffer[24];
   1287a:	4b39      	ldr	r3, [pc, #228]	; (12960 <data_collect_thread_handler+0x154>)
   1287c:	7e1a      	ldrb	r2, [r3, #24]
   1287e:	72aa      	strb	r2, [r5, #10]
                ptr[11] = rx_buffer[25];
   12880:	7e5a      	ldrb	r2, [r3, #25]
   12882:	72ea      	strb	r2, [r5, #11]
                ptr[12] = rx_buffer[26];
   12884:	7e9b      	ldrb	r3, [r3, #26]
   12886:	732b      	strb	r3, [r5, #12]
            force_led_off(led_idx);
   12888:	4620      	mov	r0, r4
   1288a:	f7ff ff69 	bl	12760 <force_led_off>
        for (int led_idx = 0; led_idx < NUM_LEDS; led_idx++) {
   1288e:	3401      	adds	r4, #1
   12890:	2c03      	cmp	r4, #3
   12892:	dc1f      	bgt.n	128d4 <data_collect_thread_handler+0xc8>
            force_led_on(led_idx);
   12894:	4620      	mov	r0, r4
   12896:	f7ff ff0d 	bl	126b4 <force_led_on>
            ADS1298_send_start();
   1289a:	f022 ff64 	bl	35766 <ADS1298_send_start>
	return z_impl_k_usleep(us);
   1289e:	2002      	movs	r0, #2
   128a0:	f021 fbdc 	bl	3405c <z_impl_k_usleep>
            ADS1298_send_read_data();
   128a4:	f022 ff64 	bl	35770 <ADS1298_send_read_data>
   128a8:	2002      	movs	r0, #2
   128aa:	f021 fbd7 	bl	3405c <z_impl_k_usleep>
            ADS1298_receive_data();
   128ae:	f7ff fb5f 	bl	11f70 <ADS1298_receive_data>
            if (led_idx < 3) {
   128b2:	2c02      	cmp	r4, #2
   128b4:	dce1      	bgt.n	1287a <data_collect_thread_handler+0x6e>
                ptr[1 + led_idx * 3] = rx_buffer[21];
   128b6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   128ba:	1c59      	adds	r1, r3, #1
   128bc:	4a28      	ldr	r2, [pc, #160]	; (12960 <data_collect_thread_handler+0x154>)
   128be:	7d50      	ldrb	r0, [r2, #21]
   128c0:	5468      	strb	r0, [r5, r1]
                ptr[2 + led_idx * 3] = rx_buffer[22];
   128c2:	3302      	adds	r3, #2
   128c4:	7d91      	ldrb	r1, [r2, #22]
   128c6:	54e9      	strb	r1, [r5, r3]
                ptr[3 + led_idx * 3] = rx_buffer[23];
   128c8:	1c63      	adds	r3, r4, #1
   128ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   128ce:	7dd2      	ldrb	r2, [r2, #23]
   128d0:	54ea      	strb	r2, [r5, r3]
   128d2:	e7d9      	b.n	12888 <data_collect_thread_handler+0x7c>
        ADS1298_send_start();
   128d4:	f022 ff47 	bl	35766 <ADS1298_send_start>
   128d8:	2002      	movs	r0, #2
   128da:	f021 fbbf 	bl	3405c <z_impl_k_usleep>
        ADS1298_send_read_data();
   128de:	f022 ff47 	bl	35770 <ADS1298_send_read_data>
   128e2:	2002      	movs	r0, #2
   128e4:	f021 fbba 	bl	3405c <z_impl_k_usleep>
        ADS1298_receive_data();
   128e8:	f7ff fb42 	bl	11f70 <ADS1298_receive_data>
        ptr[13] = rx_buffer[21];
   128ec:	4b1c      	ldr	r3, [pc, #112]	; (12960 <data_collect_thread_handler+0x154>)
   128ee:	7d5a      	ldrb	r2, [r3, #21]
   128f0:	736a      	strb	r2, [r5, #13]
        ptr[14] = rx_buffer[22];
   128f2:	7d9a      	ldrb	r2, [r3, #22]
   128f4:	73aa      	strb	r2, [r5, #14]
        ptr[15] = rx_buffer[23];
   128f6:	7ddb      	ldrb	r3, [r3, #23]
   128f8:	73eb      	strb	r3, [r5, #15]
        collect_counter++;
   128fa:	4a18      	ldr	r2, [pc, #96]	; (1295c <data_collect_thread_handler+0x150>)
   128fc:	6813      	ldr	r3, [r2, #0]
   128fe:	3301      	adds	r3, #1
   12900:	6013      	str	r3, [r2, #0]
        if (collect_counter >= BATCH_SIZE) {
   12902:	2b0e      	cmp	r3, #14
   12904:	dc08      	bgt.n	12918 <data_collect_thread_handler+0x10c>
        if (is_active) {
   12906:	4b17      	ldr	r3, [pc, #92]	; (12964 <data_collect_thread_handler+0x158>)
   12908:	781b      	ldrb	r3, [r3, #0]
   1290a:	2b00      	cmp	r3, #0
   1290c:	d097      	beq.n	1283e <data_collect_thread_handler+0x32>
            k_msleep(1000);
   1290e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   12912:	f022 fed4 	bl	356be <k_msleep>
            continue;
   12916:	e7f6      	b.n	12906 <data_collect_thread_handler+0xfa>
            collect_counter = 0;
   12918:	4613      	mov	r3, r2
   1291a:	2200      	movs	r2, #0
   1291c:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   1291e:	4c0d      	ldr	r4, [pc, #52]	; (12954 <data_collect_thread_handler+0x148>)
   12920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12928:	4620      	mov	r0, r4
   1292a:	f01e ff97 	bl	3185c <z_impl_k_mutex_lock>
            T0 = k_uptime_get_32();
   1292e:	f022 feac 	bl	3568a <k_uptime_get_32>
   12932:	4606      	mov	r6, r0
            dummy_batch[0] = (T0 >> 24) & 0xFF;
   12934:	0e02      	lsrs	r2, r0, #24
   12936:	4b08      	ldr	r3, [pc, #32]	; (12958 <data_collect_thread_handler+0x14c>)
   12938:	701a      	strb	r2, [r3, #0]
            dummy_batch[1] = (T0 >> 16) & 0xFF;
   1293a:	0c02      	lsrs	r2, r0, #16
   1293c:	705a      	strb	r2, [r3, #1]
            dummy_batch[2] = (T0 >> 8) & 0xFF;
   1293e:	0a02      	lsrs	r2, r0, #8
   12940:	709a      	strb	r2, [r3, #2]
            dummy_batch[3] = T0 & 0xFF;
   12942:	70d8      	strb	r0, [r3, #3]
	return z_impl_k_mutex_unlock(mutex);
   12944:	4620      	mov	r0, r4
   12946:	f01f f89f 	bl	31a88 <z_impl_k_mutex_unlock>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1294a:	4807      	ldr	r0, [pc, #28]	; (12968 <data_collect_thread_handler+0x15c>)
   1294c:	f01f fa48 	bl	31de0 <z_impl_k_sem_give>
   12950:	e7d9      	b.n	12906 <data_collect_thread_handler+0xfa>
   12952:	bf00      	nop
   12954:	20008914 	.word	0x20008914
   12958:	2000bcd4 	.word	0x2000bcd4
   1295c:	2000bbd0 	.word	0x2000bbd0
   12960:	2000be28 	.word	0x2000be28
   12964:	20008836 	.word	0x20008836
   12968:	2000bdc8 	.word	0x2000bdc8

0001296c <reset_ADS1298>:
void reset_ADS1298() { 
   1296c:	b510      	push	{r4, lr}
   1296e:	b08e      	sub	sp, #56	; 0x38
   12970:	483b      	ldr	r0, [pc, #236]	; (12a60 <reset_ADS1298+0xf4>)
   12972:	f01d ffef 	bl	30954 <z_impl_device_get_binding>
    dev0 = device_get_binding(LEDEXT0);
   12976:	4b3b      	ldr	r3, [pc, #236]	; (12a64 <reset_ADS1298+0xf8>)
   12978:	6018      	str	r0, [r3, #0]
    if (dev0 == NULL ){
   1297a:	b328      	cbz	r0, 129c8 <reset_ADS1298+0x5c>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1297c:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
   12980:	211b      	movs	r1, #27
   12982:	f7fd fd95 	bl	104b0 <z_impl_gpio_pin_configure>
    err = gpio_pin_configure(dev0, RESET, GPIO_OUTPUT_ACTIVE);
   12986:	4b38      	ldr	r3, [pc, #224]	; (12a68 <reset_ADS1298+0xfc>)
   12988:	6018      	str	r0, [r3, #0]
    if (err < 0 ){
   1298a:	2800      	cmp	r0, #0
   1298c:	db42      	blt.n	12a14 <reset_ADS1298+0xa8>
    gpio_pin_set(dev0, RESET, 1);   
   1298e:	4c35      	ldr	r4, [pc, #212]	; (12a64 <reset_ADS1298+0xf8>)
   12990:	2201      	movs	r2, #1
   12992:	211b      	movs	r1, #27
   12994:	6820      	ldr	r0, [r4, #0]
   12996:	f7fd fe7f 	bl	10698 <gpio_pin_set>
	return z_impl_k_usleep(us);
   1299a:	200a      	movs	r0, #10
   1299c:	f021 fb5e 	bl	3405c <z_impl_k_usleep>
    gpio_pin_set(dev0, RESET, 0);
   129a0:	2200      	movs	r2, #0
   129a2:	211b      	movs	r1, #27
   129a4:	6820      	ldr	r0, [r4, #0]
   129a6:	f7fd fe77 	bl	10698 <gpio_pin_set>
    k_msleep(500); 
   129aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   129ae:	f022 fe86 	bl	356be <k_msleep>
    gpio_pin_set(dev0, RESET, 1);
   129b2:	2201      	movs	r2, #1
   129b4:	211b      	movs	r1, #27
   129b6:	6820      	ldr	r0, [r4, #0]
   129b8:	f7fd fe6e 	bl	10698 <gpio_pin_set>
    k_msleep(500);
   129bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   129c0:	f022 fe7d 	bl	356be <k_msleep>
}
   129c4:	b00e      	add	sp, #56	; 0x38
   129c6:	bd10      	pop	{r4, pc}
        LOG_INF("Error: cannot find reset pin of SPI\n");
   129c8:	4b28      	ldr	r3, [pc, #160]	; (12a6c <reset_ADS1298+0x100>)
   129ca:	930d      	str	r3, [sp, #52]	; 0x34
   129cc:	2302      	movs	r3, #2
   129ce:	f88d 3004 	strb.w	r3, [sp, #4]
   129d2:	2300      	movs	r3, #0
   129d4:	f88d 3005 	strb.w	r3, [sp, #5]
   129d8:	f88d 3006 	strb.w	r3, [sp, #6]
   129dc:	f88d 3007 	strb.w	r3, [sp, #7]
   129e0:	9a01      	ldr	r2, [sp, #4]
   129e2:	920c      	str	r2, [sp, #48]	; 0x30
   129e4:	4619      	mov	r1, r3
   129e6:	f363 0100 	bfi	r1, r3, #0, #1
   129ea:	f363 0141 	bfi	r1, r3, #1, #1
   129ee:	f363 0182 	bfi	r1, r3, #2, #1
   129f2:	f363 01c5 	bfi	r1, r3, #3, #3
   129f6:	2203      	movs	r2, #3
   129f8:	f362 1188 	bfi	r1, r2, #6, #3
   129fc:	2208      	movs	r2, #8
   129fe:	f362 2152 	bfi	r1, r2, #9, #10
   12a02:	f363 41de 	bfi	r1, r3, #19, #12
   12a06:	f363 71df 	bfi	r1, r3, #31, #1
   12a0a:	aa0c      	add	r2, sp, #48	; 0x30
   12a0c:	4818      	ldr	r0, [pc, #96]	; (12a70 <reset_ADS1298+0x104>)
   12a0e:	f003 ff9d 	bl	1694c <z_impl_z_log_msg_static_create>
        return;
   12a12:	e7d7      	b.n	129c4 <reset_ADS1298+0x58>
        LOG_INF("Error: pin reset SPI can't be configured\n");
   12a14:	4b17      	ldr	r3, [pc, #92]	; (12a74 <reset_ADS1298+0x108>)
   12a16:	9307      	str	r3, [sp, #28]
   12a18:	2302      	movs	r3, #2
   12a1a:	f88d 3004 	strb.w	r3, [sp, #4]
   12a1e:	2300      	movs	r3, #0
   12a20:	f88d 3005 	strb.w	r3, [sp, #5]
   12a24:	f88d 3006 	strb.w	r3, [sp, #6]
   12a28:	f88d 3007 	strb.w	r3, [sp, #7]
   12a2c:	9a01      	ldr	r2, [sp, #4]
   12a2e:	9206      	str	r2, [sp, #24]
   12a30:	4619      	mov	r1, r3
   12a32:	f363 0100 	bfi	r1, r3, #0, #1
   12a36:	f363 0141 	bfi	r1, r3, #1, #1
   12a3a:	f363 0182 	bfi	r1, r3, #2, #1
   12a3e:	f363 01c5 	bfi	r1, r3, #3, #3
   12a42:	2203      	movs	r2, #3
   12a44:	f362 1188 	bfi	r1, r2, #6, #3
   12a48:	2208      	movs	r2, #8
   12a4a:	f362 2152 	bfi	r1, r2, #9, #10
   12a4e:	f363 41de 	bfi	r1, r3, #19, #12
   12a52:	f363 71df 	bfi	r1, r3, #31, #1
   12a56:	aa06      	add	r2, sp, #24
   12a58:	4805      	ldr	r0, [pc, #20]	; (12a70 <reset_ADS1298+0x104>)
   12a5a:	f003 ff77 	bl	1694c <z_impl_z_log_msg_static_create>
        return;
   12a5e:	e7b1      	b.n	129c4 <reset_ADS1298+0x58>
   12a60:	000400a4 	.word	0x000400a4
   12a64:	2000be08 	.word	0x2000be08
   12a68:	2000bbdc 	.word	0x2000bbdc
   12a6c:	000401f8 	.word	0x000401f8
   12a70:	0003f490 	.word	0x0003f490
   12a74:	00040220 	.word	0x00040220

00012a78 <config_system>:
void config_system() {
   12a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a7c:	b0f9      	sub	sp, #484	; 0x1e4
   12a7e:	af02      	add	r7, sp, #8
	dk_leds_init();
   12a80:	f01b f950 	bl	2dd24 <dk_leds_init>
	k_work_init(&brightness_work, brightness_work_handler);
   12a84:	49bc      	ldr	r1, [pc, #752]	; (12d78 <config_system+0x300>)
   12a86:	48bd      	ldr	r0, [pc, #756]	; (12d7c <config_system+0x304>)
   12a88:	f01f fcce 	bl	32428 <k_work_init>
	spi_init();
   12a8c:	f7fd ff06 	bl	1089c <spi_init>
    shdn_init();
   12a90:	f7ff fa8e 	bl	11fb0 <shdn_init>
    set_shdn(true);
   12a94:	2001      	movs	r0, #1
   12a96:	f7ff fac7 	bl	12028 <set_shdn>
	z_impl_k_sem_give(sem);
   12a9a:	48b9      	ldr	r0, [pc, #740]	; (12d80 <config_system+0x308>)
   12a9c:	f01f f9a0 	bl	31de0 <z_impl_k_sem_give>
	k_timer_init(&mosfet_timer, mosfet_blink_callback, NULL);
   12aa0:	2200      	movs	r2, #0
   12aa2:	49b8      	ldr	r1, [pc, #736]	; (12d84 <config_system+0x30c>)
   12aa4:	48b8      	ldr	r0, [pc, #736]	; (12d88 <config_system+0x310>)
   12aa6:	f02c f91c 	bl	3ece2 <k_timer_init>
	if (!device_is_ready(spi_ad8403)) {
   12aaa:	4bb8      	ldr	r3, [pc, #736]	; (12d8c <config_system+0x314>)
   12aac:	6818      	ldr	r0, [r3, #0]
   12aae:	f02b feb6 	bl	3e81e <z_device_is_ready>
   12ab2:	b398      	cbz	r0, 12b1c <config_system+0xa4>
    LOG_INF("SPI device ready\n");
   12ab4:	4bb6      	ldr	r3, [pc, #728]	; (12d90 <config_system+0x318>)
   12ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
   12ab8:	2302      	movs	r3, #2
   12aba:	743b      	strb	r3, [r7, #16]
   12abc:	2400      	movs	r4, #0
   12abe:	747c      	strb	r4, [r7, #17]
   12ac0:	74bc      	strb	r4, [r7, #18]
   12ac2:	74fc      	strb	r4, [r7, #19]
   12ac4:	693b      	ldr	r3, [r7, #16]
   12ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   12ac8:	4621      	mov	r1, r4
   12aca:	f364 0100 	bfi	r1, r4, #0, #1
   12ace:	f364 0141 	bfi	r1, r4, #1, #1
   12ad2:	f364 0182 	bfi	r1, r4, #2, #1
   12ad6:	f364 01c5 	bfi	r1, r4, #3, #3
   12ada:	2303      	movs	r3, #3
   12adc:	f363 1188 	bfi	r1, r3, #6, #3
   12ae0:	2308      	movs	r3, #8
   12ae2:	f363 2152 	bfi	r1, r3, #9, #10
   12ae6:	f364 41de 	bfi	r1, r4, #19, #12
   12aea:	f364 71df 	bfi	r1, r4, #31, #1
   12aee:	4623      	mov	r3, r4
   12af0:	f107 0238 	add.w	r2, r7, #56	; 0x38
   12af4:	48a7      	ldr	r0, [pc, #668]	; (12d94 <config_system+0x31c>)
   12af6:	f003 ff29 	bl	1694c <z_impl_z_log_msg_static_create>
	for (int i = 0; i < NUM_LEDS; i++) {
   12afa:	2c03      	cmp	r4, #3
   12afc:	dc76      	bgt.n	12bec <config_system+0x174>
        if (!device_is_ready(leds[i].port)) {
   12afe:	4ba6      	ldr	r3, [pc, #664]	; (12d98 <config_system+0x320>)
   12b00:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   12b04:	f02b fe8b 	bl	3e81e <z_device_is_ready>
   12b08:	b388      	cbz	r0, 12b6e <config_system+0xf6>
        gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT_INACTIVE);
   12b0a:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   12b0e:	48a2      	ldr	r0, [pc, #648]	; (12d98 <config_system+0x320>)
   12b10:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   12b14:	f022 fdae 	bl	35674 <gpio_pin_configure_dt>
	for (int i = 0; i < NUM_LEDS; i++) {
   12b18:	3401      	adds	r4, #1
   12b1a:	e7ee      	b.n	12afa <config_system+0x82>
        LOG_ERR("SPI device not ready\n");
   12b1c:	4b9f      	ldr	r3, [pc, #636]	; (12d9c <config_system+0x324>)
   12b1e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   12b22:	2302      	movs	r3, #2
   12b24:	743b      	strb	r3, [r7, #16]
   12b26:	2300      	movs	r3, #0
   12b28:	747b      	strb	r3, [r7, #17]
   12b2a:	74bb      	strb	r3, [r7, #18]
   12b2c:	74fb      	strb	r3, [r7, #19]
   12b2e:	693a      	ldr	r2, [r7, #16]
   12b30:	f8c7 21d0 	str.w	r2, [r7, #464]	; 0x1d0
   12b34:	4619      	mov	r1, r3
   12b36:	f363 0100 	bfi	r1, r3, #0, #1
   12b3a:	f363 0141 	bfi	r1, r3, #1, #1
   12b3e:	f363 0182 	bfi	r1, r3, #2, #1
   12b42:	f363 01c5 	bfi	r1, r3, #3, #3
   12b46:	2201      	movs	r2, #1
   12b48:	f362 1188 	bfi	r1, r2, #6, #3
   12b4c:	2208      	movs	r2, #8
   12b4e:	f362 2152 	bfi	r1, r2, #9, #10
   12b52:	f363 41de 	bfi	r1, r3, #19, #12
   12b56:	f363 71df 	bfi	r1, r3, #31, #1
   12b5a:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
   12b5e:	488d      	ldr	r0, [pc, #564]	; (12d94 <config_system+0x31c>)
   12b60:	f003 fef4 	bl	1694c <z_impl_z_log_msg_static_create>
}
   12b64:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
   12b68:	46bd      	mov	sp, r7
   12b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LOG_ERR("LED %d device not ready\n", i);
   12b6e:	466d      	mov	r5, sp
   12b70:	b088      	sub	sp, #32
   12b72:	ab02      	add	r3, sp, #8
   12b74:	f113 0210 	adds.w	r2, r3, #16
   12b78:	d00d      	beq.n	12b96 <config_system+0x11e>
   12b7a:	210c      	movs	r1, #12
   12b7c:	b13a      	cbz	r2, 12b8e <config_system+0x116>
   12b7e:	4608      	mov	r0, r1
   12b80:	2904      	cmp	r1, #4
   12b82:	dd01      	ble.n	12b88 <config_system+0x110>
   12b84:	4e86      	ldr	r6, [pc, #536]	; (12da0 <config_system+0x328>)
   12b86:	615e      	str	r6, [r3, #20]
   12b88:	2808      	cmp	r0, #8
   12b8a:	dd07      	ble.n	12b9c <config_system+0x124>
   12b8c:	619c      	str	r4, [r3, #24]
   12b8e:	290b      	cmp	r1, #11
   12b90:	dd29      	ble.n	12be6 <config_system+0x16e>
   12b92:	240c      	movs	r4, #12
   12b94:	e004      	b.n	12ba0 <config_system+0x128>
   12b96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12b9a:	e7ef      	b.n	12b7c <config_system+0x104>
   12b9c:	f06f 041b 	mvn.w	r4, #27
   12ba0:	b13a      	cbz	r2, 12bb2 <config_system+0x13a>
   12ba2:	2103      	movs	r1, #3
   12ba4:	7439      	strb	r1, [r7, #16]
   12ba6:	2100      	movs	r1, #0
   12ba8:	7479      	strb	r1, [r7, #17]
   12baa:	74b9      	strb	r1, [r7, #18]
   12bac:	74f9      	strb	r1, [r7, #19]
   12bae:	6938      	ldr	r0, [r7, #16]
   12bb0:	6118      	str	r0, [r3, #16]
   12bb2:	2100      	movs	r1, #0
   12bb4:	f36f 0100 	bfc	r1, #0, #1
   12bb8:	f36f 0141 	bfc	r1, #1, #1
   12bbc:	f36f 0182 	bfc	r1, #2, #1
   12bc0:	f36f 01c5 	bfc	r1, #3, #3
   12bc4:	2301      	movs	r3, #1
   12bc6:	f363 1188 	bfi	r1, r3, #6, #3
   12bca:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   12bce:	f363 2152 	bfi	r1, r3, #9, #10
   12bd2:	f36f 41de 	bfc	r1, #19, #12
   12bd6:	f36f 71df 	bfc	r1, #31, #1
   12bda:	2300      	movs	r3, #0
   12bdc:	486d      	ldr	r0, [pc, #436]	; (12d94 <config_system+0x31c>)
   12bde:	f003 feb5 	bl	1694c <z_impl_z_log_msg_static_create>
   12be2:	46ad      	mov	sp, r5
            return;
   12be4:	e7be      	b.n	12b64 <config_system+0xec>
            LOG_ERR("LED %d device not ready\n", i);
   12be6:	f06f 041b 	mvn.w	r4, #27
   12bea:	e7d9      	b.n	12ba0 <config_system+0x128>
	uart_init();
   12bec:	f7fe fd76 	bl	116dc <uart_init>
		err = bt_conn_auth_cb_register(&conn_auth_callbacks);
   12bf0:	486c      	ldr	r0, [pc, #432]	; (12da4 <config_system+0x32c>)
   12bf2:	f00e fa0b 	bl	2100c <bt_conn_auth_cb_register>
		if (err) {
   12bf6:	2800      	cmp	r0, #0
   12bf8:	d149      	bne.n	12c8e <config_system+0x216>
		err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
   12bfa:	486b      	ldr	r0, [pc, #428]	; (12da8 <config_system+0x330>)
   12bfc:	f00e fa2e 	bl	2105c <bt_conn_auth_info_cb_register>
		if (err) {
   12c00:	2800      	cmp	r0, #0
   12c02:	d169      	bne.n	12cd8 <config_system+0x260>
	bt_enable(NULL);
   12c04:	2000      	movs	r0, #0
   12c06:	f00b f973 	bl	1def0 <bt_enable>
	LOG_INF("Bluetooth initialized");
   12c0a:	4b68      	ldr	r3, [pc, #416]	; (12dac <config_system+0x334>)
   12c0c:	657b      	str	r3, [r7, #84]	; 0x54
   12c0e:	2302      	movs	r3, #2
   12c10:	743b      	strb	r3, [r7, #16]
   12c12:	2300      	movs	r3, #0
   12c14:	747b      	strb	r3, [r7, #17]
   12c16:	74bb      	strb	r3, [r7, #18]
   12c18:	74fb      	strb	r3, [r7, #19]
   12c1a:	693a      	ldr	r2, [r7, #16]
   12c1c:	653a      	str	r2, [r7, #80]	; 0x50
   12c1e:	4619      	mov	r1, r3
   12c20:	f363 0100 	bfi	r1, r3, #0, #1
   12c24:	f363 0141 	bfi	r1, r3, #1, #1
   12c28:	f363 0182 	bfi	r1, r3, #2, #1
   12c2c:	f363 01c5 	bfi	r1, r3, #3, #3
   12c30:	2203      	movs	r2, #3
   12c32:	f362 1188 	bfi	r1, r2, #6, #3
   12c36:	2208      	movs	r2, #8
   12c38:	f362 2152 	bfi	r1, r2, #9, #10
   12c3c:	f363 41de 	bfi	r1, r3, #19, #12
   12c40:	f363 71df 	bfi	r1, r3, #31, #1
   12c44:	f107 0250 	add.w	r2, r7, #80	; 0x50
   12c48:	4852      	ldr	r0, [pc, #328]	; (12d94 <config_system+0x31c>)
   12c4a:	f003 fe7f 	bl	1694c <z_impl_z_log_msg_static_create>
   12c4e:	484c      	ldr	r0, [pc, #304]	; (12d80 <config_system+0x308>)
   12c50:	f01f f8c6 	bl	31de0 <z_impl_k_sem_give>
		settings_load();
   12c54:	f024 fc5d 	bl	37512 <settings_load>
	err = bt_nus_init(&nus_cb);
   12c58:	4855      	ldr	r0, [pc, #340]	; (12db0 <config_system+0x338>)
   12c5a:	f006 f83b 	bl	18cd4 <bt_nus_init>
	if (err) {
   12c5e:	4604      	mov	r4, r0
   12c60:	2800      	cmp	r0, #0
   12c62:	f000 80ad 	beq.w	12dc0 <config_system+0x348>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   12c66:	466d      	mov	r5, sp
   12c68:	b088      	sub	sp, #32
   12c6a:	ab02      	add	r3, sp, #8
   12c6c:	f113 0210 	adds.w	r2, r3, #16
   12c70:	d057      	beq.n	12d22 <config_system+0x2aa>
   12c72:	210c      	movs	r1, #12
   12c74:	b13a      	cbz	r2, 12c86 <config_system+0x20e>
   12c76:	4608      	mov	r0, r1
   12c78:	2904      	cmp	r1, #4
   12c7a:	dd01      	ble.n	12c80 <config_system+0x208>
   12c7c:	4e4d      	ldr	r6, [pc, #308]	; (12db4 <config_system+0x33c>)
   12c7e:	615e      	str	r6, [r3, #20]
   12c80:	2808      	cmp	r0, #8
   12c82:	dd51      	ble.n	12d28 <config_system+0x2b0>
   12c84:	619c      	str	r4, [r3, #24]
   12c86:	290b      	cmp	r1, #11
   12c88:	dd73      	ble.n	12d72 <config_system+0x2fa>
   12c8a:	240c      	movs	r4, #12
   12c8c:	e04e      	b.n	12d2c <config_system+0x2b4>
			LOG_ERR("Failed to register authorization callbacks.\n");
   12c8e:	4b4a      	ldr	r3, [pc, #296]	; (12db8 <config_system+0x340>)
   12c90:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
   12c94:	2302      	movs	r3, #2
   12c96:	743b      	strb	r3, [r7, #16]
   12c98:	2300      	movs	r3, #0
   12c9a:	747b      	strb	r3, [r7, #17]
   12c9c:	74bb      	strb	r3, [r7, #18]
   12c9e:	74fb      	strb	r3, [r7, #19]
   12ca0:	693a      	ldr	r2, [r7, #16]
   12ca2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
   12ca6:	4619      	mov	r1, r3
   12ca8:	f363 0100 	bfi	r1, r3, #0, #1
   12cac:	f363 0141 	bfi	r1, r3, #1, #1
   12cb0:	f363 0182 	bfi	r1, r3, #2, #1
   12cb4:	f363 01c5 	bfi	r1, r3, #3, #3
   12cb8:	2201      	movs	r2, #1
   12cba:	f362 1188 	bfi	r1, r2, #6, #3
   12cbe:	2208      	movs	r2, #8
   12cc0:	f362 2152 	bfi	r1, r2, #9, #10
   12cc4:	f363 41de 	bfi	r1, r3, #19, #12
   12cc8:	f363 71df 	bfi	r1, r3, #31, #1
   12ccc:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
   12cd0:	4830      	ldr	r0, [pc, #192]	; (12d94 <config_system+0x31c>)
   12cd2:	f003 fe3b 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   12cd6:	e745      	b.n	12b64 <config_system+0xec>
			LOG_ERR("Failed to register authorization info callbacks.\n");
   12cd8:	4b38      	ldr	r3, [pc, #224]	; (12dbc <config_system+0x344>)
   12cda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
   12cde:	2302      	movs	r3, #2
   12ce0:	743b      	strb	r3, [r7, #16]
   12ce2:	2300      	movs	r3, #0
   12ce4:	747b      	strb	r3, [r7, #17]
   12ce6:	74bb      	strb	r3, [r7, #18]
   12ce8:	74fb      	strb	r3, [r7, #19]
   12cea:	693a      	ldr	r2, [r7, #16]
   12cec:	f8c7 21a0 	str.w	r2, [r7, #416]	; 0x1a0
   12cf0:	4619      	mov	r1, r3
   12cf2:	f363 0100 	bfi	r1, r3, #0, #1
   12cf6:	f363 0141 	bfi	r1, r3, #1, #1
   12cfa:	f363 0182 	bfi	r1, r3, #2, #1
   12cfe:	f363 01c5 	bfi	r1, r3, #3, #3
   12d02:	2201      	movs	r2, #1
   12d04:	f362 1188 	bfi	r1, r2, #6, #3
   12d08:	2208      	movs	r2, #8
   12d0a:	f362 2152 	bfi	r1, r2, #9, #10
   12d0e:	f363 41de 	bfi	r1, r3, #19, #12
   12d12:	f363 71df 	bfi	r1, r3, #31, #1
   12d16:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
   12d1a:	481e      	ldr	r0, [pc, #120]	; (12d94 <config_system+0x31c>)
   12d1c:	f003 fe16 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   12d20:	e720      	b.n	12b64 <config_system+0xec>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   12d22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12d26:	e7a5      	b.n	12c74 <config_system+0x1fc>
   12d28:	f06f 041b 	mvn.w	r4, #27
   12d2c:	b13a      	cbz	r2, 12d3e <config_system+0x2c6>
   12d2e:	2103      	movs	r1, #3
   12d30:	7439      	strb	r1, [r7, #16]
   12d32:	2100      	movs	r1, #0
   12d34:	7479      	strb	r1, [r7, #17]
   12d36:	74b9      	strb	r1, [r7, #18]
   12d38:	74f9      	strb	r1, [r7, #19]
   12d3a:	6938      	ldr	r0, [r7, #16]
   12d3c:	6118      	str	r0, [r3, #16]
   12d3e:	2100      	movs	r1, #0
   12d40:	f36f 0100 	bfc	r1, #0, #1
   12d44:	f36f 0141 	bfc	r1, #1, #1
   12d48:	f36f 0182 	bfc	r1, #2, #1
   12d4c:	f36f 01c5 	bfc	r1, #3, #3
   12d50:	2301      	movs	r3, #1
   12d52:	f363 1188 	bfi	r1, r3, #6, #3
   12d56:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   12d5a:	f363 2152 	bfi	r1, r3, #9, #10
   12d5e:	f36f 41de 	bfc	r1, #19, #12
   12d62:	f36f 71df 	bfc	r1, #31, #1
   12d66:	2300      	movs	r3, #0
   12d68:	480a      	ldr	r0, [pc, #40]	; (12d94 <config_system+0x31c>)
   12d6a:	f003 fdef 	bl	1694c <z_impl_z_log_msg_static_create>
   12d6e:	46ad      	mov	sp, r5
		return;
   12d70:	e6f8      	b.n	12b64 <config_system+0xec>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   12d72:	f06f 041b 	mvn.w	r4, #27
   12d76:	e7d9      	b.n	12d2c <config_system+0x2b4>
   12d78:	00012225 	.word	0x00012225
   12d7c:	2000be0c 	.word	0x2000be0c
   12d80:	20008964 	.word	0x20008964
   12d84:	000106ed 	.word	0x000106ed
   12d88:	20008d40 	.word	0x20008d40
   12d8c:	2000be00 	.word	0x2000be00
   12d90:	00040270 	.word	0x00040270
   12d94:	0003f490 	.word	0x0003f490
   12d98:	20008298 	.word	0x20008298
   12d9c:	00040258 	.word	0x00040258
   12da0:	00040284 	.word	0x00040284
   12da4:	20008254 	.word	0x20008254
   12da8:	20008244 	.word	0x20008244
   12dac:	00040304 	.word	0x00040304
   12db0:	20008238 	.word	0x20008238
   12db4:	0004031c 	.word	0x0004031c
   12db8:	000402a0 	.word	0x000402a0
   12dbc:	000402d0 	.word	0x000402d0
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
   12dc0:	f107 0414 	add.w	r4, r7, #20
   12dc4:	4d79      	ldr	r5, [pc, #484]	; (12fac <config_system+0x534>)
   12dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12dca:	682b      	ldr	r3, [r5, #0]
   12dcc:	6023      	str	r3, [r4, #0]
   12dce:	2301      	movs	r3, #1
   12dd0:	9300      	str	r3, [sp, #0]
   12dd2:	4b77      	ldr	r3, [pc, #476]	; (12fb0 <config_system+0x538>)
   12dd4:	2202      	movs	r2, #2
   12dd6:	4977      	ldr	r1, [pc, #476]	; (12fb4 <config_system+0x53c>)
   12dd8:	f107 0014 	add.w	r0, r7, #20
   12ddc:	f00c fa4c 	bl	1f278 <bt_le_adv_start>
	if (err) {
   12de0:	4604      	mov	r4, r0
   12de2:	2800      	cmp	r0, #0
   12de4:	d03e      	beq.n	12e64 <config_system+0x3ec>
		LOG_ERR("Advertising failed to start (err %d)", err);
   12de6:	466d      	mov	r5, sp
   12de8:	b088      	sub	sp, #32
   12dea:	ab02      	add	r3, sp, #8
   12dec:	f113 0210 	adds.w	r2, r3, #16
   12df0:	d00d      	beq.n	12e0e <config_system+0x396>
   12df2:	210c      	movs	r1, #12
   12df4:	b13a      	cbz	r2, 12e06 <config_system+0x38e>
   12df6:	4608      	mov	r0, r1
   12df8:	2904      	cmp	r1, #4
   12dfa:	dd01      	ble.n	12e00 <config_system+0x388>
   12dfc:	4e6e      	ldr	r6, [pc, #440]	; (12fb8 <config_system+0x540>)
   12dfe:	615e      	str	r6, [r3, #20]
   12e00:	2808      	cmp	r0, #8
   12e02:	dd07      	ble.n	12e14 <config_system+0x39c>
   12e04:	619c      	str	r4, [r3, #24]
   12e06:	290b      	cmp	r1, #11
   12e08:	dd29      	ble.n	12e5e <config_system+0x3e6>
   12e0a:	240c      	movs	r4, #12
   12e0c:	e004      	b.n	12e18 <config_system+0x3a0>
   12e0e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   12e12:	e7ef      	b.n	12df4 <config_system+0x37c>
   12e14:	f06f 041b 	mvn.w	r4, #27
   12e18:	b13a      	cbz	r2, 12e2a <config_system+0x3b2>
   12e1a:	2103      	movs	r1, #3
   12e1c:	7439      	strb	r1, [r7, #16]
   12e1e:	2100      	movs	r1, #0
   12e20:	7479      	strb	r1, [r7, #17]
   12e22:	74b9      	strb	r1, [r7, #18]
   12e24:	74f9      	strb	r1, [r7, #19]
   12e26:	6938      	ldr	r0, [r7, #16]
   12e28:	6118      	str	r0, [r3, #16]
   12e2a:	2100      	movs	r1, #0
   12e2c:	f36f 0100 	bfc	r1, #0, #1
   12e30:	f36f 0141 	bfc	r1, #1, #1
   12e34:	f36f 0182 	bfc	r1, #2, #1
   12e38:	f36f 01c5 	bfc	r1, #3, #3
   12e3c:	2301      	movs	r3, #1
   12e3e:	f363 1188 	bfi	r1, r3, #6, #3
   12e42:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   12e46:	f364 2152 	bfi	r1, r4, #9, #10
   12e4a:	f36f 41de 	bfc	r1, #19, #12
   12e4e:	f36f 71df 	bfc	r1, #31, #1
   12e52:	2300      	movs	r3, #0
   12e54:	4859      	ldr	r0, [pc, #356]	; (12fbc <config_system+0x544>)
   12e56:	f003 fd79 	bl	1694c <z_impl_z_log_msg_static_create>
   12e5a:	46ad      	mov	sp, r5
		return;
   12e5c:	e682      	b.n	12b64 <config_system+0xec>
		LOG_ERR("Advertising failed to start (err %d)", err);
   12e5e:	f06f 041b 	mvn.w	r4, #27
   12e62:	e7d9      	b.n	12e18 <config_system+0x3a0>
	LOG_INF("Advertising successfully started");
   12e64:	4b56      	ldr	r3, [pc, #344]	; (12fc0 <config_system+0x548>)
   12e66:	66fb      	str	r3, [r7, #108]	; 0x6c
   12e68:	2302      	movs	r3, #2
   12e6a:	743b      	strb	r3, [r7, #16]
   12e6c:	2300      	movs	r3, #0
   12e6e:	747b      	strb	r3, [r7, #17]
   12e70:	74bb      	strb	r3, [r7, #18]
   12e72:	74fb      	strb	r3, [r7, #19]
   12e74:	693a      	ldr	r2, [r7, #16]
   12e76:	66ba      	str	r2, [r7, #104]	; 0x68
   12e78:	4619      	mov	r1, r3
   12e7a:	f363 0100 	bfi	r1, r3, #0, #1
   12e7e:	f363 0141 	bfi	r1, r3, #1, #1
   12e82:	f363 0182 	bfi	r1, r3, #2, #1
   12e86:	f363 01c5 	bfi	r1, r3, #3, #3
   12e8a:	2203      	movs	r2, #3
   12e8c:	f362 1188 	bfi	r1, r2, #6, #3
   12e90:	2208      	movs	r2, #8
   12e92:	f362 2152 	bfi	r1, r2, #9, #10
   12e96:	f363 41de 	bfi	r1, r3, #19, #12
   12e9a:	f363 71df 	bfi	r1, r3, #31, #1
   12e9e:	f107 0268 	add.w	r2, r7, #104	; 0x68
   12ea2:	4846      	ldr	r0, [pc, #280]	; (12fbc <config_system+0x544>)
   12ea4:	f003 fd52 	bl	1694c <z_impl_z_log_msg_static_create>
   12ea8:	4846      	ldr	r0, [pc, #280]	; (12fc4 <config_system+0x54c>)
   12eaa:	f01d fd53 	bl	30954 <z_impl_device_get_binding>
	dev1 = device_get_binding("GPIO_0");
   12eae:	4b46      	ldr	r3, [pc, #280]	; (12fc8 <config_system+0x550>)
   12eb0:	6018      	str	r0, [r3, #0]
	if (dev1 == NULL) {
   12eb2:	b358      	cbz	r0, 12f0c <config_system+0x494>
   12eb4:	f44f 12d0 	mov.w	r2, #1703936	; 0x1a0000
   12eb8:	211a      	movs	r1, #26
   12eba:	f7fd faf9 	bl	104b0 <z_impl_gpio_pin_configure>
	if (err < 0) {
   12ebe:	2800      	cmp	r0, #0
   12ec0:	db49      	blt.n	12f56 <config_system+0x4de>
	LOG_INF("ADS_init : %s\n", ADS1298_init() ? "OK" : "FAIL");
   12ec2:	f7fe ffb9 	bl	11e38 <ADS1298_init>
   12ec6:	2800      	cmp	r0, #0
   12ec8:	d06a      	beq.n	12fa0 <config_system+0x528>
   12eca:	4940      	ldr	r1, [pc, #256]	; (12fcc <config_system+0x554>)
   12ecc:	466d      	mov	r5, sp
   12ece:	2300      	movs	r3, #0
   12ed0:	743b      	strb	r3, [r7, #16]
   12ed2:	2302      	movs	r3, #2
   12ed4:	747b      	strb	r3, [r7, #17]
   12ed6:	b088      	sub	sp, #32
   12ed8:	f10d 0c08 	add.w	ip, sp, #8
   12edc:	f11c 0210 	adds.w	r2, ip, #16
   12ee0:	d060      	beq.n	12fa4 <config_system+0x52c>
   12ee2:	200e      	movs	r0, #14
   12ee4:	b122      	cbz	r2, 12ef0 <config_system+0x478>
   12ee6:	2804      	cmp	r0, #4
   12ee8:	dd02      	ble.n	12ef0 <config_system+0x478>
   12eea:	4b39      	ldr	r3, [pc, #228]	; (12fd0 <config_system+0x558>)
   12eec:	f8cc 3014 	str.w	r3, [ip, #20]
   12ef0:	2300      	movs	r3, #0
   12ef2:	733b      	strb	r3, [r7, #12]
   12ef4:	2302      	movs	r3, #2
   12ef6:	737b      	strb	r3, [r7, #13]
   12ef8:	2a00      	cmp	r2, #0
   12efa:	d07a      	beq.n	12ff2 <config_system+0x57a>
   12efc:	2808      	cmp	r0, #8
   12efe:	dd01      	ble.n	12f04 <config_system+0x48c>
   12f00:	f8cc 1018 	str.w	r1, [ip, #24]
   12f04:	f10c 031c 	add.w	r3, ip, #28
   12f08:	2100      	movs	r1, #0
   12f0a:	e070      	b.n	12fee <config_system+0x576>
		LOG_ERR("Error: cannot find one or more devices\n"); 
   12f0c:	4b31      	ldr	r3, [pc, #196]	; (12fd4 <config_system+0x55c>)
   12f0e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   12f12:	2302      	movs	r3, #2
   12f14:	743b      	strb	r3, [r7, #16]
   12f16:	2300      	movs	r3, #0
   12f18:	747b      	strb	r3, [r7, #17]
   12f1a:	74bb      	strb	r3, [r7, #18]
   12f1c:	74fb      	strb	r3, [r7, #19]
   12f1e:	693a      	ldr	r2, [r7, #16]
   12f20:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
   12f24:	4619      	mov	r1, r3
   12f26:	f363 0100 	bfi	r1, r3, #0, #1
   12f2a:	f363 0141 	bfi	r1, r3, #1, #1
   12f2e:	f363 0182 	bfi	r1, r3, #2, #1
   12f32:	f363 01c5 	bfi	r1, r3, #3, #3
   12f36:	2201      	movs	r2, #1
   12f38:	f362 1188 	bfi	r1, r2, #6, #3
   12f3c:	2208      	movs	r2, #8
   12f3e:	f362 2152 	bfi	r1, r2, #9, #10
   12f42:	f363 41de 	bfi	r1, r3, #19, #12
   12f46:	f363 71df 	bfi	r1, r3, #31, #1
   12f4a:	f507 72c4 	add.w	r2, r7, #392	; 0x188
   12f4e:	481b      	ldr	r0, [pc, #108]	; (12fbc <config_system+0x544>)
   12f50:	f003 fcfc 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   12f54:	e606      	b.n	12b64 <config_system+0xec>
		LOG_ERR("Error: One or more leds can't confiigure\n");
   12f56:	4b20      	ldr	r3, [pc, #128]	; (12fd8 <config_system+0x560>)
   12f58:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   12f5c:	2302      	movs	r3, #2
   12f5e:	743b      	strb	r3, [r7, #16]
   12f60:	2300      	movs	r3, #0
   12f62:	747b      	strb	r3, [r7, #17]
   12f64:	74bb      	strb	r3, [r7, #18]
   12f66:	74fb      	strb	r3, [r7, #19]
   12f68:	693a      	ldr	r2, [r7, #16]
   12f6a:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
   12f6e:	4619      	mov	r1, r3
   12f70:	f363 0100 	bfi	r1, r3, #0, #1
   12f74:	f363 0141 	bfi	r1, r3, #1, #1
   12f78:	f363 0182 	bfi	r1, r3, #2, #1
   12f7c:	f363 01c5 	bfi	r1, r3, #3, #3
   12f80:	2201      	movs	r2, #1
   12f82:	f362 1188 	bfi	r1, r2, #6, #3
   12f86:	2208      	movs	r2, #8
   12f88:	f362 2152 	bfi	r1, r2, #9, #10
   12f8c:	f363 41de 	bfi	r1, r3, #19, #12
   12f90:	f363 71df 	bfi	r1, r3, #31, #1
   12f94:	f507 72b8 	add.w	r2, r7, #368	; 0x170
   12f98:	4808      	ldr	r0, [pc, #32]	; (12fbc <config_system+0x544>)
   12f9a:	f003 fcd7 	bl	1694c <z_impl_z_log_msg_static_create>
	return;
   12f9e:	e5e1      	b.n	12b64 <config_system+0xec>
	LOG_INF("ADS_init : %s\n", ADS1298_init() ? "OK" : "FAIL");
   12fa0:	490e      	ldr	r1, [pc, #56]	; (12fdc <config_system+0x564>)
   12fa2:	e793      	b.n	12ecc <config_system+0x454>
   12fa4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   12fa8:	e79c      	b.n	12ee4 <config_system+0x46c>
   12faa:	bf00      	nop
   12fac:	0003f5e4 	.word	0x0003f5e4
   12fb0:	000405f4 	.word	0x000405f4
   12fb4:	0004061c 	.word	0x0004061c
   12fb8:	00040348 	.word	0x00040348
   12fbc:	0003f490 	.word	0x0003f490
   12fc0:	00040370 	.word	0x00040370
   12fc4:	000400a4 	.word	0x000400a4
   12fc8:	2000be04 	.word	0x2000be04
   12fcc:	0004024c 	.word	0x0004024c
   12fd0:	000403e8 	.word	0x000403e8
   12fd4:	00040394 	.word	0x00040394
   12fd8:	000403bc 	.word	0x000403bc
   12fdc:	00040250 	.word	0x00040250
   12fe0:	f107 0e0c 	add.w	lr, r7, #12
   12fe4:	f81e e001 	ldrb.w	lr, [lr, r1]
   12fe8:	f803 eb01 	strb.w	lr, [r3], #1
   12fec:	3101      	adds	r1, #1
   12fee:	2901      	cmp	r1, #1
   12ff0:	d9f6      	bls.n	12fe0 <config_system+0x568>
   12ff2:	280d      	cmp	r0, #13
   12ff4:	f340 8142 	ble.w	1327c <config_system+0x804>
   12ff8:	230e      	movs	r3, #14
   12ffa:	b14a      	cbz	r2, 13010 <config_system+0x598>
   12ffc:	2103      	movs	r1, #3
   12ffe:	7439      	strb	r1, [r7, #16]
   13000:	2100      	movs	r1, #0
   13002:	7479      	strb	r1, [r7, #17]
   13004:	74b9      	strb	r1, [r7, #18]
   13006:	2101      	movs	r1, #1
   13008:	74f9      	strb	r1, [r7, #19]
   1300a:	6938      	ldr	r0, [r7, #16]
   1300c:	f8cc 0010 	str.w	r0, [ip, #16]
   13010:	2100      	movs	r1, #0
   13012:	f36f 0100 	bfc	r1, #0, #1
   13016:	f36f 0141 	bfc	r1, #1, #1
   1301a:	f36f 0182 	bfc	r1, #2, #1
   1301e:	f36f 01c5 	bfc	r1, #3, #3
   13022:	f04f 0903 	mov.w	r9, #3
   13026:	f369 1188 	bfi	r1, r9, #6, #3
   1302a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1302e:	f363 2152 	bfi	r1, r3, #9, #10
   13032:	f36f 41de 	bfc	r1, #19, #12
   13036:	f36f 71df 	bfc	r1, #31, #1
   1303a:	f8df 8388 	ldr.w	r8, [pc, #904]	; 133c4 <config_system+0x94c>
   1303e:	2300      	movs	r3, #0
   13040:	4640      	mov	r0, r8
   13042:	f003 fc83 	bl	1694c <z_impl_z_log_msg_static_create>
   13046:	46ad      	mov	sp, r5
	k_msleep(10);
   13048:	200a      	movs	r0, #10
   1304a:	f022 fb38 	bl	356be <k_msleep>
	LOG_INF("ADS1298_power_off\n");
   1304e:	4bde      	ldr	r3, [pc, #888]	; (133c8 <config_system+0x950>)
   13050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   13054:	f04f 0a02 	mov.w	sl, #2
   13058:	f887 a010 	strb.w	sl, [r7, #16]
   1305c:	2500      	movs	r5, #0
   1305e:	747d      	strb	r5, [r7, #17]
   13060:	74bd      	strb	r5, [r7, #18]
   13062:	74fd      	strb	r5, [r7, #19]
   13064:	693b      	ldr	r3, [r7, #16]
   13066:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   1306a:	4629      	mov	r1, r5
   1306c:	f365 0100 	bfi	r1, r5, #0, #1
   13070:	f365 0141 	bfi	r1, r5, #1, #1
   13074:	f365 0182 	bfi	r1, r5, #2, #1
   13078:	f365 01c5 	bfi	r1, r5, #3, #3
   1307c:	f369 1188 	bfi	r1, r9, #6, #3
   13080:	f04f 0b08 	mov.w	fp, #8
   13084:	f36b 2152 	bfi	r1, fp, #9, #10
   13088:	f365 41de 	bfi	r1, r5, #19, #12
   1308c:	f365 71df 	bfi	r1, r5, #31, #1
   13090:	462b      	mov	r3, r5
   13092:	f107 0280 	add.w	r2, r7, #128	; 0x80
   13096:	4640      	mov	r0, r8
   13098:	f003 fc58 	bl	1694c <z_impl_z_log_msg_static_create>
	gpio_pin_set(dev1, 26, 1);
   1309c:	2201      	movs	r2, #1
   1309e:	211a      	movs	r1, #26
   130a0:	4bca      	ldr	r3, [pc, #808]	; (133cc <config_system+0x954>)
   130a2:	6818      	ldr	r0, [r3, #0]
   130a4:	f7fd faf8 	bl	10698 <gpio_pin_set>
	k_msleep(1000);
   130a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   130ac:	f022 fb07 	bl	356be <k_msleep>
	gpio_pin_set(dev1, 26, 0);
   130b0:	462a      	mov	r2, r5
   130b2:	211a      	movs	r1, #26
   130b4:	4bc5      	ldr	r3, [pc, #788]	; (133cc <config_system+0x954>)
   130b6:	6818      	ldr	r0, [r3, #0]
   130b8:	f7fd faee 	bl	10698 <gpio_pin_set>
	LOG_INF("ADS Powered ON\n");
   130bc:	4bc4      	ldr	r3, [pc, #784]	; (133d0 <config_system+0x958>)
   130be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   130c2:	f887 a010 	strb.w	sl, [r7, #16]
   130c6:	747d      	strb	r5, [r7, #17]
   130c8:	74bd      	strb	r5, [r7, #18]
   130ca:	74fd      	strb	r5, [r7, #19]
   130cc:	693b      	ldr	r3, [r7, #16]
   130ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   130d2:	4629      	mov	r1, r5
   130d4:	f365 0100 	bfi	r1, r5, #0, #1
   130d8:	f365 0141 	bfi	r1, r5, #1, #1
   130dc:	f365 0182 	bfi	r1, r5, #2, #1
   130e0:	f365 01c5 	bfi	r1, r5, #3, #3
   130e4:	f369 1188 	bfi	r1, r9, #6, #3
   130e8:	f36b 2152 	bfi	r1, fp, #9, #10
   130ec:	f365 41de 	bfi	r1, r5, #19, #12
   130f0:	f365 71df 	bfi	r1, r5, #31, #1
   130f4:	462b      	mov	r3, r5
   130f6:	f107 0298 	add.w	r2, r7, #152	; 0x98
   130fa:	4640      	mov	r0, r8
   130fc:	f003 fc26 	bl	1694c <z_impl_z_log_msg_static_create>
	k_msleep(1000);
   13100:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   13104:	f022 fadb 	bl	356be <k_msleep>
	reset_ADS1298();
   13108:	f7ff fc30 	bl	1296c <reset_ADS1298>
	LOG_INF("ADS1298_reset success\n");
   1310c:	4bb1      	ldr	r3, [pc, #708]	; (133d4 <config_system+0x95c>)
   1310e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   13112:	f887 a010 	strb.w	sl, [r7, #16]
   13116:	747d      	strb	r5, [r7, #17]
   13118:	74bd      	strb	r5, [r7, #18]
   1311a:	74fd      	strb	r5, [r7, #19]
   1311c:	693b      	ldr	r3, [r7, #16]
   1311e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   13122:	4629      	mov	r1, r5
   13124:	f365 0100 	bfi	r1, r5, #0, #1
   13128:	f365 0141 	bfi	r1, r5, #1, #1
   1312c:	f365 0182 	bfi	r1, r5, #2, #1
   13130:	f365 01c5 	bfi	r1, r5, #3, #3
   13134:	f369 1188 	bfi	r1, r9, #6, #3
   13138:	f36b 2152 	bfi	r1, fp, #9, #10
   1313c:	f365 41de 	bfi	r1, r5, #19, #12
   13140:	f365 71df 	bfi	r1, r5, #31, #1
   13144:	462b      	mov	r3, r5
   13146:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   1314a:	4640      	mov	r0, r8
   1314c:	f003 fbfe 	bl	1694c <z_impl_z_log_msg_static_create>
	return z_impl_k_usleep(us);
   13150:	2009      	movs	r0, #9
   13152:	f020 ff83 	bl	3405c <z_impl_k_usleep>
	err = ADS1298_send_wakeup();
   13156:	f022 fb15 	bl	35784 <ADS1298_send_wakeup>
   1315a:	6078      	str	r0, [r7, #4]
	LOG_INF("HERE\n");
   1315c:	4b9e      	ldr	r3, [pc, #632]	; (133d8 <config_system+0x960>)
   1315e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   13162:	f887 a010 	strb.w	sl, [r7, #16]
   13166:	747d      	strb	r5, [r7, #17]
   13168:	74bd      	strb	r5, [r7, #18]
   1316a:	74fd      	strb	r5, [r7, #19]
   1316c:	693b      	ldr	r3, [r7, #16]
   1316e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   13172:	4629      	mov	r1, r5
   13174:	f365 0100 	bfi	r1, r5, #0, #1
   13178:	f365 0141 	bfi	r1, r5, #1, #1
   1317c:	f365 0182 	bfi	r1, r5, #2, #1
   13180:	f365 01c5 	bfi	r1, r5, #3, #3
   13184:	f369 1188 	bfi	r1, r9, #6, #3
   13188:	f36b 2152 	bfi	r1, fp, #9, #10
   1318c:	f365 41de 	bfi	r1, r5, #19, #12
   13190:	f365 71df 	bfi	r1, r5, #31, #1
   13194:	462b      	mov	r3, r5
   13196:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   1319a:	4640      	mov	r0, r8
   1319c:	f003 fbd6 	bl	1694c <z_impl_z_log_msg_static_create>
	if (err == true){LOG_INF("ADS1298_send_wakeup success\n");}
   131a0:	687b      	ldr	r3, [r7, #4]
   131a2:	2b00      	cmp	r3, #0
   131a4:	d06d      	beq.n	13282 <config_system+0x80a>
   131a6:	4b8d      	ldr	r3, [pc, #564]	; (133dc <config_system+0x964>)
   131a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
   131ac:	f887 a010 	strb.w	sl, [r7, #16]
   131b0:	462b      	mov	r3, r5
   131b2:	747d      	strb	r5, [r7, #17]
   131b4:	74bd      	strb	r5, [r7, #18]
   131b6:	74fd      	strb	r5, [r7, #19]
   131b8:	693a      	ldr	r2, [r7, #16]
   131ba:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
   131be:	4629      	mov	r1, r5
   131c0:	f365 0100 	bfi	r1, r5, #0, #1
   131c4:	f365 0141 	bfi	r1, r5, #1, #1
   131c8:	f365 0182 	bfi	r1, r5, #2, #1
   131cc:	f365 01c5 	bfi	r1, r5, #3, #3
   131d0:	f369 1188 	bfi	r1, r9, #6, #3
   131d4:	f36b 2152 	bfi	r1, fp, #9, #10
   131d8:	f365 41de 	bfi	r1, r5, #19, #12
   131dc:	f365 71df 	bfi	r1, r5, #31, #1
   131e0:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
   131e4:	4640      	mov	r0, r8
   131e6:	f003 fbb1 	bl	1694c <z_impl_z_log_msg_static_create>
	k_msleep(1000);
   131ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   131ee:	f022 fa66 	bl	356be <k_msleep>
	err = ADS1298_send_stop_read_continuous();
   131f2:	f022 fac2 	bl	3577a <ADS1298_send_stop_read_continuous>
	if (err == true) { LOG_INF("ADS1298_send_stop_read_continuous success\n"); }
   131f6:	2800      	cmp	r0, #0
   131f8:	d068      	beq.n	132cc <config_system+0x854>
   131fa:	4b79      	ldr	r3, [pc, #484]	; (133e0 <config_system+0x968>)
   131fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   13200:	2302      	movs	r3, #2
   13202:	743b      	strb	r3, [r7, #16]
   13204:	2300      	movs	r3, #0
   13206:	747b      	strb	r3, [r7, #17]
   13208:	74bb      	strb	r3, [r7, #18]
   1320a:	74fb      	strb	r3, [r7, #19]
   1320c:	693a      	ldr	r2, [r7, #16]
   1320e:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
   13212:	4619      	mov	r1, r3
   13214:	f363 0100 	bfi	r1, r3, #0, #1
   13218:	f363 0141 	bfi	r1, r3, #1, #1
   1321c:	f363 0182 	bfi	r1, r3, #2, #1
   13220:	f363 01c5 	bfi	r1, r3, #3, #3
   13224:	2203      	movs	r2, #3
   13226:	f362 1188 	bfi	r1, r2, #6, #3
   1322a:	2208      	movs	r2, #8
   1322c:	f362 2152 	bfi	r1, r2, #9, #10
   13230:	f363 41de 	bfi	r1, r3, #19, #12
   13234:	f363 71df 	bfi	r1, r3, #31, #1
   13238:	f507 7294 	add.w	r2, r7, #296	; 0x128
   1323c:	4861      	ldr	r0, [pc, #388]	; (133c4 <config_system+0x94c>)
   1323e:	f003 fb85 	bl	1694c <z_impl_z_log_msg_static_create>
	k_msleep(500);
   13242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   13246:	f022 fa3a 	bl	356be <k_msleep>
	uint8_t regid = ads1298_read_ID();
   1324a:	f022 fa4e 	bl	356ea <ads1298_read_ID>
	LOG_INF("ADS1298_ID %x\n", regid); // ID = 0x92 datasheet page 66
   1324e:	46e9      	mov	r9, sp
   13250:	b088      	sub	sp, #32
   13252:	ab02      	add	r3, sp, #8
   13254:	f113 0210 	adds.w	r2, r3, #16
   13258:	d05d      	beq.n	13316 <config_system+0x89e>
   1325a:	210c      	movs	r1, #12
   1325c:	b14a      	cbz	r2, 13272 <config_system+0x7fa>
   1325e:	460d      	mov	r5, r1
   13260:	2904      	cmp	r1, #4
   13262:	dd03      	ble.n	1326c <config_system+0x7f4>
   13264:	f8df c17c 	ldr.w	ip, [pc, #380]	; 133e4 <config_system+0x96c>
   13268:	f8c3 c014 	str.w	ip, [r3, #20]
   1326c:	2d08      	cmp	r5, #8
   1326e:	dd55      	ble.n	1331c <config_system+0x8a4>
   13270:	6198      	str	r0, [r3, #24]
   13272:	290b      	cmp	r1, #11
   13274:	f340 80a2 	ble.w	133bc <config_system+0x944>
   13278:	250c      	movs	r5, #12
   1327a:	e051      	b.n	13320 <config_system+0x8a8>
	LOG_INF("ADS_init : %s\n", ADS1298_init() ? "OK" : "FAIL");
   1327c:	f06f 031b 	mvn.w	r3, #27
   13280:	e6bb      	b.n	12ffa <config_system+0x582>
	else{LOG_INF("ADS1298_send_wakeup failed \n");}
   13282:	4b59      	ldr	r3, [pc, #356]	; (133e8 <config_system+0x970>)
   13284:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   13288:	2302      	movs	r3, #2
   1328a:	743b      	strb	r3, [r7, #16]
   1328c:	2300      	movs	r3, #0
   1328e:	747b      	strb	r3, [r7, #17]
   13290:	74bb      	strb	r3, [r7, #18]
   13292:	74fb      	strb	r3, [r7, #19]
   13294:	693a      	ldr	r2, [r7, #16]
   13296:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
   1329a:	4619      	mov	r1, r3
   1329c:	f363 0100 	bfi	r1, r3, #0, #1
   132a0:	f363 0141 	bfi	r1, r3, #1, #1
   132a4:	f363 0182 	bfi	r1, r3, #2, #1
   132a8:	f363 01c5 	bfi	r1, r3, #3, #3
   132ac:	2203      	movs	r2, #3
   132ae:	f362 1188 	bfi	r1, r2, #6, #3
   132b2:	2208      	movs	r2, #8
   132b4:	f362 2152 	bfi	r1, r2, #9, #10
   132b8:	f363 41de 	bfi	r1, r3, #19, #12
   132bc:	f363 71df 	bfi	r1, r3, #31, #1
   132c0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
   132c4:	483f      	ldr	r0, [pc, #252]	; (133c4 <config_system+0x94c>)
   132c6:	f003 fb41 	bl	1694c <z_impl_z_log_msg_static_create>
   132ca:	e78e      	b.n	131ea <config_system+0x772>
	else{LOG_INF("ADS1298_send_stop_read_continuous failed \n");}
   132cc:	4b47      	ldr	r3, [pc, #284]	; (133ec <config_system+0x974>)
   132ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   132d2:	2302      	movs	r3, #2
   132d4:	743b      	strb	r3, [r7, #16]
   132d6:	2300      	movs	r3, #0
   132d8:	747b      	strb	r3, [r7, #17]
   132da:	74bb      	strb	r3, [r7, #18]
   132dc:	74fb      	strb	r3, [r7, #19]
   132de:	693a      	ldr	r2, [r7, #16]
   132e0:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
   132e4:	4619      	mov	r1, r3
   132e6:	f363 0100 	bfi	r1, r3, #0, #1
   132ea:	f363 0141 	bfi	r1, r3, #1, #1
   132ee:	f363 0182 	bfi	r1, r3, #2, #1
   132f2:	f363 01c5 	bfi	r1, r3, #3, #3
   132f6:	2203      	movs	r2, #3
   132f8:	f362 1188 	bfi	r1, r2, #6, #3
   132fc:	2208      	movs	r2, #8
   132fe:	f362 2152 	bfi	r1, r2, #9, #10
   13302:	f363 41de 	bfi	r1, r3, #19, #12
   13306:	f363 71df 	bfi	r1, r3, #31, #1
   1330a:	f507 7288 	add.w	r2, r7, #272	; 0x110
   1330e:	482d      	ldr	r0, [pc, #180]	; (133c4 <config_system+0x94c>)
   13310:	f003 fb1c 	bl	1694c <z_impl_z_log_msg_static_create>
   13314:	e795      	b.n	13242 <config_system+0x7ca>
	LOG_INF("ADS1298_ID %x\n", regid); // ID = 0x92 datasheet page 66
   13316:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1331a:	e79f      	b.n	1325c <config_system+0x7e4>
   1331c:	f06f 051b 	mvn.w	r5, #27
   13320:	b13a      	cbz	r2, 13332 <config_system+0x8ba>
   13322:	2103      	movs	r1, #3
   13324:	7439      	strb	r1, [r7, #16]
   13326:	2100      	movs	r1, #0
   13328:	7479      	strb	r1, [r7, #17]
   1332a:	74b9      	strb	r1, [r7, #18]
   1332c:	74f9      	strb	r1, [r7, #19]
   1332e:	6938      	ldr	r0, [r7, #16]
   13330:	6118      	str	r0, [r3, #16]
   13332:	2100      	movs	r1, #0
   13334:	f36f 0100 	bfc	r1, #0, #1
   13338:	f36f 0141 	bfc	r1, #1, #1
   1333c:	f36f 0182 	bfc	r1, #2, #1
   13340:	f36f 01c5 	bfc	r1, #3, #3
   13344:	f04f 0803 	mov.w	r8, #3
   13348:	f368 1188 	bfi	r1, r8, #6, #3
   1334c:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   13350:	f365 2152 	bfi	r1, r5, #9, #10
   13354:	f36f 41de 	bfc	r1, #19, #12
   13358:	f36f 71df 	bfc	r1, #31, #1
   1335c:	4d19      	ldr	r5, [pc, #100]	; (133c4 <config_system+0x94c>)
   1335e:	2300      	movs	r3, #0
   13360:	4628      	mov	r0, r5
   13362:	f003 faf3 	bl	1694c <z_impl_z_log_msg_static_create>
   13366:	46cd      	mov	sp, r9
	k_msleep(1000);
   13368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1336c:	f022 f9a7 	bl	356be <k_msleep>
	config_ADS1298();
   13370:	f022 fa0d 	bl	3578e <config_ADS1298>
	LOG_INF("ADS1298_config success\n");
   13374:	4b1e      	ldr	r3, [pc, #120]	; (133f0 <config_system+0x978>)
   13376:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   1337a:	2302      	movs	r3, #2
   1337c:	743b      	strb	r3, [r7, #16]
   1337e:	2300      	movs	r3, #0
   13380:	747b      	strb	r3, [r7, #17]
   13382:	74bb      	strb	r3, [r7, #18]
   13384:	74fb      	strb	r3, [r7, #19]
   13386:	693a      	ldr	r2, [r7, #16]
   13388:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
   1338c:	4619      	mov	r1, r3
   1338e:	f363 0100 	bfi	r1, r3, #0, #1
   13392:	f363 0141 	bfi	r1, r3, #1, #1
   13396:	f363 0182 	bfi	r1, r3, #2, #1
   1339a:	f363 01c5 	bfi	r1, r3, #3, #3
   1339e:	f368 1188 	bfi	r1, r8, #6, #3
   133a2:	2208      	movs	r2, #8
   133a4:	f362 2152 	bfi	r1, r2, #9, #10
   133a8:	f363 41de 	bfi	r1, r3, #19, #12
   133ac:	f363 71df 	bfi	r1, r3, #31, #1
   133b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
   133b4:	4628      	mov	r0, r5
   133b6:	f003 fac9 	bl	1694c <z_impl_z_log_msg_static_create>
	for (int i = 0; i < NUM_BUTTONS; i++) {
   133ba:	e12b      	b.n	13614 <config_system+0xb9c>
	LOG_INF("ADS1298_ID %x\n", regid); // ID = 0x92 datasheet page 66
   133bc:	f06f 051b 	mvn.w	r5, #27
   133c0:	e7ae      	b.n	13320 <config_system+0x8a8>
   133c2:	bf00      	nop
   133c4:	0003f490 	.word	0x0003f490
   133c8:	000403f8 	.word	0x000403f8
   133cc:	2000be04 	.word	0x2000be04
   133d0:	0004040c 	.word	0x0004040c
   133d4:	0004041c 	.word	0x0004041c
   133d8:	00040434 	.word	0x00040434
   133dc:	0004043c 	.word	0x0004043c
   133e0:	0004047c 	.word	0x0004047c
   133e4:	000404d4 	.word	0x000404d4
   133e8:	0004045c 	.word	0x0004045c
   133ec:	000404a8 	.word	0x000404a8
   133f0:	000404e4 	.word	0x000404e4
            LOG_ERR("Error: button %d device %s is not ready\n", i, buttons[i].spec.port->name);
   133f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   133f8:	4ab4      	ldr	r2, [pc, #720]	; (136cc <config_system+0xc54>)
   133fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   133fe:	6819      	ldr	r1, [r3, #0]
   13400:	466d      	mov	r5, sp
   13402:	2301      	movs	r3, #1
   13404:	743b      	strb	r3, [r7, #16]
   13406:	2303      	movs	r3, #3
   13408:	747b      	strb	r3, [r7, #17]
   1340a:	b08a      	sub	sp, #40	; 0x28
   1340c:	ab02      	add	r3, sp, #8
   1340e:	f113 0210 	adds.w	r2, r3, #16
   13412:	d01f      	beq.n	13454 <config_system+0x9dc>
   13414:	2012      	movs	r0, #18
   13416:	b14a      	cbz	r2, 1342c <config_system+0x9b4>
   13418:	4606      	mov	r6, r0
   1341a:	2804      	cmp	r0, #4
   1341c:	dd03      	ble.n	13426 <config_system+0x9ae>
   1341e:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 136d0 <config_system+0xc58>
   13422:	f8c3 c014 	str.w	ip, [r3, #20]
   13426:	2e08      	cmp	r6, #8
   13428:	dd00      	ble.n	1342c <config_system+0x9b4>
   1342a:	619c      	str	r4, [r3, #24]
   1342c:	2401      	movs	r4, #1
   1342e:	733c      	strb	r4, [r7, #12]
   13430:	2403      	movs	r4, #3
   13432:	737c      	strb	r4, [r7, #13]
   13434:	b18a      	cbz	r2, 1345a <config_system+0x9e2>
   13436:	280c      	cmp	r0, #12
   13438:	dd00      	ble.n	1343c <config_system+0x9c4>
   1343a:	61d9      	str	r1, [r3, #28]
   1343c:	f103 0120 	add.w	r1, r3, #32
   13440:	2400      	movs	r4, #0
   13442:	2c01      	cmp	r4, #1
   13444:	d809      	bhi.n	1345a <config_system+0x9e2>
   13446:	f107 060c 	add.w	r6, r7, #12
   1344a:	5d36      	ldrb	r6, [r6, r4]
   1344c:	f801 6b01 	strb.w	r6, [r1], #1
   13450:	3401      	adds	r4, #1
   13452:	e7f6      	b.n	13442 <config_system+0x9ca>
   13454:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13458:	e7dd      	b.n	13416 <config_system+0x99e>
   1345a:	2811      	cmp	r0, #17
   1345c:	dd25      	ble.n	134aa <config_system+0xa32>
   1345e:	2412      	movs	r4, #18
   13460:	b142      	cbz	r2, 13474 <config_system+0x9fc>
   13462:	2104      	movs	r1, #4
   13464:	7439      	strb	r1, [r7, #16]
   13466:	2100      	movs	r1, #0
   13468:	7479      	strb	r1, [r7, #17]
   1346a:	74b9      	strb	r1, [r7, #18]
   1346c:	2101      	movs	r1, #1
   1346e:	74f9      	strb	r1, [r7, #19]
   13470:	6938      	ldr	r0, [r7, #16]
   13472:	6118      	str	r0, [r3, #16]
   13474:	2100      	movs	r1, #0
   13476:	f36f 0100 	bfc	r1, #0, #1
   1347a:	f36f 0141 	bfc	r1, #1, #1
   1347e:	f36f 0182 	bfc	r1, #2, #1
   13482:	f36f 01c5 	bfc	r1, #3, #3
   13486:	2301      	movs	r3, #1
   13488:	f363 1188 	bfi	r1, r3, #6, #3
   1348c:	f3c4 0409 	ubfx	r4, r4, #0, #10
   13490:	f364 2152 	bfi	r1, r4, #9, #10
   13494:	f36f 41de 	bfc	r1, #19, #12
   13498:	f36f 71df 	bfc	r1, #31, #1
   1349c:	2300      	movs	r3, #0
   1349e:	488d      	ldr	r0, [pc, #564]	; (136d4 <config_system+0xc5c>)
   134a0:	f003 fa54 	bl	1694c <z_impl_z_log_msg_static_create>
   134a4:	46ad      	mov	sp, r5
            return;
   134a6:	f7ff bb5d 	b.w	12b64 <config_system+0xec>
            LOG_ERR("Error: button %d device %s is not ready\n", i, buttons[i].spec.port->name);
   134aa:	f06f 041b 	mvn.w	r4, #27
   134ae:	e7d7      	b.n	13460 <config_system+0x9e8>
            LOG_ERR("Error %d: failed to configure button %d\n", err, i);
   134b0:	466d      	mov	r5, sp
   134b2:	b088      	sub	sp, #32
   134b4:	a902      	add	r1, sp, #8
   134b6:	f111 0210 	adds.w	r2, r1, #16
   134ba:	d012      	beq.n	134e2 <config_system+0xa6a>
   134bc:	2010      	movs	r0, #16
   134be:	b162      	cbz	r2, 134da <config_system+0xa62>
   134c0:	4606      	mov	r6, r0
   134c2:	2804      	cmp	r0, #4
   134c4:	dd03      	ble.n	134ce <config_system+0xa56>
   134c6:	f8df c210 	ldr.w	ip, [pc, #528]	; 136d8 <config_system+0xc60>
   134ca:	f8c1 c014 	str.w	ip, [r1, #20]
   134ce:	2e08      	cmp	r6, #8
   134d0:	dd00      	ble.n	134d4 <config_system+0xa5c>
   134d2:	618b      	str	r3, [r1, #24]
   134d4:	2e0c      	cmp	r6, #12
   134d6:	dd07      	ble.n	134e8 <config_system+0xa70>
   134d8:	61cc      	str	r4, [r1, #28]
   134da:	280f      	cmp	r0, #15
   134dc:	dd2a      	ble.n	13534 <config_system+0xabc>
   134de:	2310      	movs	r3, #16
   134e0:	e004      	b.n	134ec <config_system+0xa74>
   134e2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   134e6:	e7ea      	b.n	134be <config_system+0xa46>
   134e8:	f06f 031b 	mvn.w	r3, #27
   134ec:	b13a      	cbz	r2, 134fe <config_system+0xa86>
   134ee:	2004      	movs	r0, #4
   134f0:	7438      	strb	r0, [r7, #16]
   134f2:	2000      	movs	r0, #0
   134f4:	7478      	strb	r0, [r7, #17]
   134f6:	74b8      	strb	r0, [r7, #18]
   134f8:	74f8      	strb	r0, [r7, #19]
   134fa:	6938      	ldr	r0, [r7, #16]
   134fc:	6108      	str	r0, [r1, #16]
   134fe:	2100      	movs	r1, #0
   13500:	f36f 0100 	bfc	r1, #0, #1
   13504:	f36f 0141 	bfc	r1, #1, #1
   13508:	f36f 0182 	bfc	r1, #2, #1
   1350c:	f36f 01c5 	bfc	r1, #3, #3
   13510:	2001      	movs	r0, #1
   13512:	f360 1188 	bfi	r1, r0, #6, #3
   13516:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1351a:	f363 2152 	bfi	r1, r3, #9, #10
   1351e:	f36f 41de 	bfc	r1, #19, #12
   13522:	f36f 71df 	bfc	r1, #31, #1
   13526:	2300      	movs	r3, #0
   13528:	486a      	ldr	r0, [pc, #424]	; (136d4 <config_system+0xc5c>)
   1352a:	f003 fa0f 	bl	1694c <z_impl_z_log_msg_static_create>
   1352e:	46ad      	mov	sp, r5
            return;
   13530:	f7ff bb18 	b.w	12b64 <config_system+0xec>
            LOG_ERR("Error %d: failed to configure button %d\n", err, i);
   13534:	f06f 031b 	mvn.w	r3, #27
   13538:	e7d8      	b.n	134ec <config_system+0xa74>
            LOG_ERR("Error %d: failed to configure interrupt on button %d\n", err, i);
   1353a:	466d      	mov	r5, sp
   1353c:	b088      	sub	sp, #32
   1353e:	a902      	add	r1, sp, #8
   13540:	f111 0210 	adds.w	r2, r1, #16
   13544:	d012      	beq.n	1356c <config_system+0xaf4>
   13546:	2010      	movs	r0, #16
   13548:	b162      	cbz	r2, 13564 <config_system+0xaec>
   1354a:	4606      	mov	r6, r0
   1354c:	2804      	cmp	r0, #4
   1354e:	dd03      	ble.n	13558 <config_system+0xae0>
   13550:	f8df c188 	ldr.w	ip, [pc, #392]	; 136dc <config_system+0xc64>
   13554:	f8c1 c014 	str.w	ip, [r1, #20]
   13558:	2e08      	cmp	r6, #8
   1355a:	dd00      	ble.n	1355e <config_system+0xae6>
   1355c:	618b      	str	r3, [r1, #24]
   1355e:	2e0c      	cmp	r6, #12
   13560:	dd07      	ble.n	13572 <config_system+0xafa>
   13562:	61cc      	str	r4, [r1, #28]
   13564:	280f      	cmp	r0, #15
   13566:	dd2a      	ble.n	135be <config_system+0xb46>
   13568:	2310      	movs	r3, #16
   1356a:	e004      	b.n	13576 <config_system+0xafe>
   1356c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   13570:	e7ea      	b.n	13548 <config_system+0xad0>
   13572:	f06f 031b 	mvn.w	r3, #27
   13576:	b13a      	cbz	r2, 13588 <config_system+0xb10>
   13578:	2004      	movs	r0, #4
   1357a:	7438      	strb	r0, [r7, #16]
   1357c:	2000      	movs	r0, #0
   1357e:	7478      	strb	r0, [r7, #17]
   13580:	74b8      	strb	r0, [r7, #18]
   13582:	74f8      	strb	r0, [r7, #19]
   13584:	6938      	ldr	r0, [r7, #16]
   13586:	6108      	str	r0, [r1, #16]
   13588:	2100      	movs	r1, #0
   1358a:	f36f 0100 	bfc	r1, #0, #1
   1358e:	f36f 0141 	bfc	r1, #1, #1
   13592:	f36f 0182 	bfc	r1, #2, #1
   13596:	f36f 01c5 	bfc	r1, #3, #3
   1359a:	2001      	movs	r0, #1
   1359c:	f360 1188 	bfi	r1, r0, #6, #3
   135a0:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   135a4:	f363 2152 	bfi	r1, r3, #9, #10
   135a8:	f36f 41de 	bfc	r1, #19, #12
   135ac:	f36f 71df 	bfc	r1, #31, #1
   135b0:	2300      	movs	r3, #0
   135b2:	4848      	ldr	r0, [pc, #288]	; (136d4 <config_system+0xc5c>)
   135b4:	f003 f9ca 	bl	1694c <z_impl_z_log_msg_static_create>
   135b8:	46ad      	mov	sp, r5
            return;
   135ba:	f7ff bad3 	b.w	12b64 <config_system+0xec>
            LOG_ERR("Error %d: failed to configure interrupt on button %d\n", err, i);
   135be:	f06f 031b 	mvn.w	r3, #27
   135c2:	e7d8      	b.n	13576 <config_system+0xafe>
        LOG_INF("Set up button %d\n", i);
   135c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   135c8:	e06d      	b.n	136a6 <config_system+0xc2e>
   135ca:	f06f 011b 	mvn.w	r1, #27
   135ce:	b13a      	cbz	r2, 135e0 <config_system+0xb68>
   135d0:	2003      	movs	r0, #3
   135d2:	7438      	strb	r0, [r7, #16]
   135d4:	2000      	movs	r0, #0
   135d6:	7478      	strb	r0, [r7, #17]
   135d8:	74b8      	strb	r0, [r7, #18]
   135da:	74f8      	strb	r0, [r7, #19]
   135dc:	6938      	ldr	r0, [r7, #16]
   135de:	6118      	str	r0, [r3, #16]
   135e0:	f36f 0600 	bfc	r6, #0, #1
   135e4:	f36f 0641 	bfc	r6, #1, #1
   135e8:	f36f 0682 	bfc	r6, #2, #1
   135ec:	f36f 06c5 	bfc	r6, #3, #3
   135f0:	2303      	movs	r3, #3
   135f2:	f363 1688 	bfi	r6, r3, #6, #3
   135f6:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   135fa:	f363 2652 	bfi	r6, r3, #9, #10
   135fe:	f36f 46de 	bfc	r6, #19, #12
   13602:	f36f 76df 	bfc	r6, #31, #1
   13606:	2300      	movs	r3, #0
   13608:	4631      	mov	r1, r6
   1360a:	4832      	ldr	r0, [pc, #200]	; (136d4 <config_system+0xc5c>)
   1360c:	f003 f99e 	bl	1694c <z_impl_z_log_msg_static_create>
   13610:	46ad      	mov	sp, r5
	for (int i = 0; i < NUM_BUTTONS; i++) {
   13612:	3401      	adds	r4, #1
   13614:	2c04      	cmp	r4, #4
   13616:	dc67      	bgt.n	136e8 <config_system+0xc70>
        if (!device_is_ready(buttons[i].spec.port)) {
   13618:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1361c:	4a2b      	ldr	r2, [pc, #172]	; (136cc <config_system+0xc54>)
   1361e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   13622:	f02b f8fc 	bl	3e81e <z_device_is_ready>
   13626:	2800      	cmp	r0, #0
   13628:	f43f aee4 	beq.w	133f4 <config_system+0x97c>
        err = gpio_pin_configure_dt(&buttons[i].spec, GPIO_INPUT);
   1362c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   13630:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   13634:	4b25      	ldr	r3, [pc, #148]	; (136cc <config_system+0xc54>)
   13636:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1363a:	f022 f81b 	bl	35674 <gpio_pin_configure_dt>
        if (err != 0) {
   1363e:	4603      	mov	r3, r0
   13640:	2800      	cmp	r0, #0
   13642:	f47f af35 	bne.w	134b0 <config_system+0xa38>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   13646:	4b21      	ldr	r3, [pc, #132]	; (136cc <config_system+0xc54>)
   13648:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1364c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
   13650:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   13654:	7909      	ldrb	r1, [r1, #4]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   13656:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
   1365a:	f7fd f85d 	bl	10718 <z_impl_gpio_pin_interrupt_configure>
        if (err != 0) {
   1365e:	4603      	mov	r3, r0
   13660:	2800      	cmp	r0, #0
   13662:	f47f af6a 	bne.w	1353a <config_system+0xac2>
        gpio_init_callback(&buttons[i].callback, button_pressed, BIT(buttons[i].spec.pin));
   13666:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1366a:	00ad      	lsls	r5, r5, #2
   1366c:	3508      	adds	r5, #8
   1366e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 136cc <config_system+0xc54>
   13672:	4445      	add	r5, r8
   13674:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   13678:	ea4f 0983 	mov.w	r9, r3, lsl #2
   1367c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   13680:	791b      	ldrb	r3, [r3, #4]
   13682:	2201      	movs	r2, #1
   13684:	409a      	lsls	r2, r3
   13686:	4916      	ldr	r1, [pc, #88]	; (136e0 <config_system+0xc68>)
   13688:	4628      	mov	r0, r5
   1368a:	f7fd f8d5 	bl	10838 <gpio_init_callback>
        gpio_add_callback(buttons[i].spec.port, &buttons[i].callback);
   1368e:	4629      	mov	r1, r5
   13690:	f858 0009 	ldr.w	r0, [r8, r9]
   13694:	f021 ffe4 	bl	35660 <gpio_add_callback>
        LOG_INF("Set up button %d\n", i);
   13698:	466d      	mov	r5, sp
   1369a:	b088      	sub	sp, #32
   1369c:	ab02      	add	r3, sp, #8
   1369e:	f113 0210 	adds.w	r2, r3, #16
   136a2:	d08f      	beq.n	135c4 <config_system+0xb4c>
   136a4:	210c      	movs	r1, #12
   136a6:	b14a      	cbz	r2, 136bc <config_system+0xc44>
   136a8:	4608      	mov	r0, r1
   136aa:	2904      	cmp	r1, #4
   136ac:	dd03      	ble.n	136b6 <config_system+0xc3e>
   136ae:	f8df c034 	ldr.w	ip, [pc, #52]	; 136e4 <config_system+0xc6c>
   136b2:	f8c3 c014 	str.w	ip, [r3, #20]
   136b6:	2808      	cmp	r0, #8
   136b8:	dd87      	ble.n	135ca <config_system+0xb52>
   136ba:	619c      	str	r4, [r3, #24]
   136bc:	290b      	cmp	r1, #11
   136be:	dd01      	ble.n	136c4 <config_system+0xc4c>
   136c0:	210c      	movs	r1, #12
   136c2:	e784      	b.n	135ce <config_system+0xb56>
   136c4:	f06f 011b 	mvn.w	r1, #27
   136c8:	e781      	b.n	135ce <config_system+0xb56>
   136ca:	bf00      	nop
   136cc:	200082b8 	.word	0x200082b8
   136d0:	000404fc 	.word	0x000404fc
   136d4:	0003f490 	.word	0x0003f490
   136d8:	00040528 	.word	0x00040528
   136dc:	00040554 	.word	0x00040554
   136e0:	00012379 	.word	0x00012379
   136e4:	0004058c 	.word	0x0004058c
	current_led = -1;
   136e8:	4c5c      	ldr	r4, [pc, #368]	; (1385c <config_system+0xde4>)
   136ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   136ee:	6023      	str	r3, [r4, #0]
	LOG_INF("ADS1298 initialized successfully\n");
   136f0:	4b5b      	ldr	r3, [pc, #364]	; (13860 <config_system+0xde8>)
   136f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   136f6:	2302      	movs	r3, #2
   136f8:	743b      	strb	r3, [r7, #16]
   136fa:	2300      	movs	r3, #0
   136fc:	747b      	strb	r3, [r7, #17]
   136fe:	74bb      	strb	r3, [r7, #18]
   13700:	74fb      	strb	r3, [r7, #19]
   13702:	693a      	ldr	r2, [r7, #16]
   13704:	f8c7 2158 	str.w	r2, [r7, #344]	; 0x158
   13708:	4619      	mov	r1, r3
   1370a:	f363 0100 	bfi	r1, r3, #0, #1
   1370e:	f363 0141 	bfi	r1, r3, #1, #1
   13712:	f363 0182 	bfi	r1, r3, #2, #1
   13716:	f363 01c5 	bfi	r1, r3, #3, #3
   1371a:	2203      	movs	r2, #3
   1371c:	f362 1188 	bfi	r1, r2, #6, #3
   13720:	2208      	movs	r2, #8
   13722:	f362 2152 	bfi	r1, r2, #9, #10
   13726:	f363 41de 	bfi	r1, r3, #19, #12
   1372a:	f363 71df 	bfi	r1, r3, #31, #1
   1372e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
   13732:	484c      	ldr	r0, [pc, #304]	; (13864 <config_system+0xdec>)
   13734:	f003 f90a 	bl	1694c <z_impl_z_log_msg_static_create>
    LOG_INF("current_led = %d\n", current_led);
   13738:	6820      	ldr	r0, [r4, #0]
   1373a:	466d      	mov	r5, sp
   1373c:	b088      	sub	sp, #32
   1373e:	ab02      	add	r3, sp, #8
   13740:	f113 0210 	adds.w	r2, r3, #16
   13744:	d00d      	beq.n	13762 <config_system+0xcea>
   13746:	210c      	movs	r1, #12
   13748:	b13a      	cbz	r2, 1375a <config_system+0xce2>
   1374a:	460c      	mov	r4, r1
   1374c:	2904      	cmp	r1, #4
   1374e:	dd01      	ble.n	13754 <config_system+0xcdc>
   13750:	4e45      	ldr	r6, [pc, #276]	; (13868 <config_system+0xdf0>)
   13752:	615e      	str	r6, [r3, #20]
   13754:	2c08      	cmp	r4, #8
   13756:	dd07      	ble.n	13768 <config_system+0xcf0>
   13758:	6198      	str	r0, [r3, #24]
   1375a:	290b      	cmp	r1, #11
   1375c:	dd47      	ble.n	137ee <config_system+0xd76>
   1375e:	240c      	movs	r4, #12
   13760:	e004      	b.n	1376c <config_system+0xcf4>
   13762:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   13766:	e7ef      	b.n	13748 <config_system+0xcd0>
   13768:	f06f 041b 	mvn.w	r4, #27
   1376c:	b13a      	cbz	r2, 1377e <config_system+0xd06>
   1376e:	2103      	movs	r1, #3
   13770:	7439      	strb	r1, [r7, #16]
   13772:	2100      	movs	r1, #0
   13774:	7479      	strb	r1, [r7, #17]
   13776:	74b9      	strb	r1, [r7, #18]
   13778:	74f9      	strb	r1, [r7, #19]
   1377a:	6938      	ldr	r0, [r7, #16]
   1377c:	6118      	str	r0, [r3, #16]
   1377e:	2100      	movs	r1, #0
   13780:	f36f 0100 	bfc	r1, #0, #1
   13784:	f36f 0141 	bfc	r1, #1, #1
   13788:	f36f 0182 	bfc	r1, #2, #1
   1378c:	f36f 01c5 	bfc	r1, #3, #3
   13790:	2303      	movs	r3, #3
   13792:	f363 1188 	bfi	r1, r3, #6, #3
   13796:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1379a:	f363 2152 	bfi	r1, r3, #9, #10
   1379e:	f36f 41de 	bfc	r1, #19, #12
   137a2:	f36f 71df 	bfc	r1, #31, #1
   137a6:	2300      	movs	r3, #0
   137a8:	482e      	ldr	r0, [pc, #184]	; (13864 <config_system+0xdec>)
   137aa:	f003 f8cf 	bl	1694c <z_impl_z_log_msg_static_create>
   137ae:	46ad      	mov	sp, r5
    LOG_INF("current_brightness = %d\n", led_brightness_levels[current_led][current_brightness[current_led]]);
   137b0:	4b2a      	ldr	r3, [pc, #168]	; (1385c <config_system+0xde4>)
   137b2:	681b      	ldr	r3, [r3, #0]
   137b4:	4a2d      	ldr	r2, [pc, #180]	; (1386c <config_system+0xdf4>)
   137b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   137ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   137be:	4413      	add	r3, r2
   137c0:	4a2b      	ldr	r2, [pc, #172]	; (13870 <config_system+0xdf8>)
   137c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   137c6:	466d      	mov	r5, sp
   137c8:	b088      	sub	sp, #32
   137ca:	ab02      	add	r3, sp, #8
   137cc:	f113 0210 	adds.w	r2, r3, #16
   137d0:	d010      	beq.n	137f4 <config_system+0xd7c>
   137d2:	210c      	movs	r1, #12
   137d4:	b13a      	cbz	r2, 137e6 <config_system+0xd6e>
   137d6:	460c      	mov	r4, r1
   137d8:	2904      	cmp	r1, #4
   137da:	dd01      	ble.n	137e0 <config_system+0xd68>
   137dc:	4e25      	ldr	r6, [pc, #148]	; (13874 <config_system+0xdfc>)
   137de:	615e      	str	r6, [r3, #20]
   137e0:	2c08      	cmp	r4, #8
   137e2:	dd0a      	ble.n	137fa <config_system+0xd82>
   137e4:	6198      	str	r0, [r3, #24]
   137e6:	290b      	cmp	r1, #11
   137e8:	dd34      	ble.n	13854 <config_system+0xddc>
   137ea:	240c      	movs	r4, #12
   137ec:	e007      	b.n	137fe <config_system+0xd86>
    LOG_INF("current_led = %d\n", current_led);
   137ee:	f06f 041b 	mvn.w	r4, #27
   137f2:	e7bb      	b.n	1376c <config_system+0xcf4>
    LOG_INF("current_brightness = %d\n", led_brightness_levels[current_led][current_brightness[current_led]]);
   137f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   137f8:	e7ec      	b.n	137d4 <config_system+0xd5c>
   137fa:	f06f 041b 	mvn.w	r4, #27
   137fe:	b13a      	cbz	r2, 13810 <config_system+0xd98>
   13800:	2103      	movs	r1, #3
   13802:	7439      	strb	r1, [r7, #16]
   13804:	2100      	movs	r1, #0
   13806:	7479      	strb	r1, [r7, #17]
   13808:	74b9      	strb	r1, [r7, #18]
   1380a:	74f9      	strb	r1, [r7, #19]
   1380c:	6938      	ldr	r0, [r7, #16]
   1380e:	6118      	str	r0, [r3, #16]
   13810:	2100      	movs	r1, #0
   13812:	f36f 0100 	bfc	r1, #0, #1
   13816:	f36f 0141 	bfc	r1, #1, #1
   1381a:	f36f 0182 	bfc	r1, #2, #1
   1381e:	f36f 01c5 	bfc	r1, #3, #3
   13822:	2303      	movs	r3, #3
   13824:	f363 1188 	bfi	r1, r3, #6, #3
   13828:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1382c:	f363 2152 	bfi	r1, r3, #9, #10
   13830:	f36f 41de 	bfc	r1, #19, #12
   13834:	f36f 71df 	bfc	r1, #31, #1
   13838:	2300      	movs	r3, #0
   1383a:	480a      	ldr	r0, [pc, #40]	; (13864 <config_system+0xdec>)
   1383c:	f003 f886 	bl	1694c <z_impl_z_log_msg_static_create>
   13840:	46ad      	mov	sp, r5
	turn_on_led(current_led);
   13842:	4b06      	ldr	r3, [pc, #24]	; (1385c <config_system+0xde4>)
   13844:	6818      	ldr	r0, [r3, #0]
   13846:	f7fe fd81 	bl	1234c <turn_on_led>
	NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
   1384a:	4b0b      	ldr	r3, [pc, #44]	; (13878 <config_system+0xe00>)
   1384c:	2201      	movs	r2, #1
   1384e:	60da      	str	r2, [r3, #12]
   13850:	f7ff b988 	b.w	12b64 <config_system+0xec>
    LOG_INF("current_brightness = %d\n", led_brightness_levels[current_led][current_brightness[current_led]]);
   13854:	f06f 041b 	mvn.w	r4, #27
   13858:	e7d1      	b.n	137fe <config_system+0xd86>
   1385a:	bf00      	nop
   1385c:	2000831c 	.word	0x2000831c
   13860:	000405a0 	.word	0x000405a0
   13864:	0003f490 	.word	0x0003f490
   13868:	000405c4 	.word	0x000405c4
   1386c:	2000bdf0 	.word	0x2000bdf0
   13870:	0004062c 	.word	0x0004062c
   13874:	000405d8 	.word	0x000405d8
   13878:	4000e000 	.word	0x4000e000

0001387c <main>:
            }
        }
    }
}

int main(void) {
   1387c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1387e:	b089      	sub	sp, #36	; 0x24
    int blink_status = 0;
    config_system();
   13880:	f7ff f8fa 	bl	12a78 <config_system>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13884:	2201      	movs	r2, #1
   13886:	2100      	movs	r1, #0
   13888:	4819      	ldr	r0, [pc, #100]	; (138f0 <main+0x74>)
   1388a:	f02b f8be 	bl	3ea0a <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   1388e:	4819      	ldr	r0, [pc, #100]	; (138f4 <main+0x78>)
   13890:	f02b f844 	bl	3e91c <z_impl_k_mutex_init>
    k_sem_init(&data_ready_sem, 0, 1);
    k_mutex_init(&data_mutex);

    k_thread_create(&data_collect_thread, data_collect_stack, STACK_SIZE,
        data_collect_thread_handler, NULL, NULL, NULL, 1, 0, K_NO_WAIT);
   13894:	2600      	movs	r6, #0
   13896:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   13898:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1389c:	2400      	movs	r4, #0
   1389e:	9404      	str	r4, [sp, #16]
   138a0:	2501      	movs	r5, #1
   138a2:	9503      	str	r5, [sp, #12]
   138a4:	9402      	str	r4, [sp, #8]
   138a6:	9401      	str	r4, [sp, #4]
   138a8:	9400      	str	r4, [sp, #0]
   138aa:	4b13      	ldr	r3, [pc, #76]	; (138f8 <main+0x7c>)
   138ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   138b0:	4912      	ldr	r1, [pc, #72]	; (138fc <main+0x80>)
   138b2:	4813      	ldr	r0, [pc, #76]	; (13900 <main+0x84>)
   138b4:	f01d fee8 	bl	31688 <z_impl_k_thread_create>
   138b8:	e9cd 6706 	strd	r6, r7, [sp, #24]
   138bc:	9404      	str	r4, [sp, #16]
   138be:	9503      	str	r5, [sp, #12]
   138c0:	9402      	str	r4, [sp, #8]
   138c2:	9401      	str	r4, [sp, #4]
   138c4:	9400      	str	r4, [sp, #0]
   138c6:	4b0f      	ldr	r3, [pc, #60]	; (13904 <main+0x88>)
   138c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   138cc:	490e      	ldr	r1, [pc, #56]	; (13908 <main+0x8c>)
   138ce:	480f      	ldr	r0, [pc, #60]	; (1390c <main+0x90>)
   138d0:	f01d feda 	bl	31688 <z_impl_k_thread_create>

    k_thread_create(&ble_send_thread, ble_send_stack, STACK_SIZE,
        ble_send_thread_handler, NULL, NULL, NULL, 1, 0, K_NO_WAIT);

    while (1) {
        dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   138d4:	3401      	adds	r4, #1
   138d6:	f004 0101 	and.w	r1, r4, #1
   138da:	bf48      	it	mi
   138dc:	4249      	negmi	r1, r1
   138de:	2000      	movs	r0, #0
   138e0:	f01a fa64 	bl	2ddac <dk_set_led>
	return z_impl_k_sleep(timeout);
   138e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   138e8:	2100      	movs	r1, #0
   138ea:	f020 fb73 	bl	33fd4 <z_impl_k_sleep>
    while (1) {
   138ee:	e7f1      	b.n	138d4 <main+0x58>
   138f0:	2000bdc8 	.word	0x2000bdc8
   138f4:	20008914 	.word	0x20008914
   138f8:	0001280d 	.word	0x0001280d
   138fc:	2000d2c0 	.word	0x2000d2c0
   13900:	20008c58 	.word	0x20008c58
   13904:	00011ca9 	.word	0x00011ca9
   13908:	2000cac0 	.word	0x2000cac0
   1390c:	20008ba0 	.word	0x20008ba0

00013910 <get_package_len>:
}

#endif

static size_t get_package_len(void *packaged)
{
   13910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(packaged != NULL);
   13912:	b140      	cbz	r0, 13926 <get_package_len+0x16>
   13914:	4606      	mov	r6, r0

	uint8_t *buf = packaged;
	uint8_t *start = buf;
	unsigned int args_size, s_nbr, ros_nbr;

	args_size = buf[0] * sizeof(int);
   13916:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   13918:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
   1391a:	7884      	ldrb	r4, [r0, #2]

	/* Move beyond args. */
	buf += args_size;

	/* Move beyond read-only string indexes array. */
	buf += ros_nbr;
   1391c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   13920:	4404      	add	r4, r0

	/* Move beyond strings appended to the package. */
	for (int i = 0; i < s_nbr; i++) {
   13922:	2700      	movs	r7, #0
   13924:	e011      	b.n	1394a <get_package_len+0x3a>
	__ASSERT_NO_MSG(packaged != NULL);
   13926:	4c0b      	ldr	r4, [pc, #44]	; (13954 <get_package_len+0x44>)
   13928:	23c6      	movs	r3, #198	; 0xc6
   1392a:	4622      	mov	r2, r4
   1392c:	490a      	ldr	r1, [pc, #40]	; (13958 <get_package_len+0x48>)
   1392e:	480b      	ldr	r0, [pc, #44]	; (1395c <get_package_len+0x4c>)
   13930:	f022 fcb0 	bl	36294 <assert_print>
   13934:	21c6      	movs	r1, #198	; 0xc6
   13936:	4620      	mov	r0, r4
   13938:	f022 fca5 	bl	36286 <assert_post_action>
		buf++;
   1393c:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
   1393e:	4620      	mov	r0, r4
   13940:	f024 fd05 	bl	3834e <strlen>
   13944:	3001      	adds	r0, #1
   13946:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
   13948:	3701      	adds	r7, #1
   1394a:	42af      	cmp	r7, r5
   1394c:	d3f6      	bcc.n	1393c <get_package_len+0x2c>
	}

	return (size_t)(uintptr_t)(buf - start);
}
   1394e:	1ba0      	subs	r0, r4, r6
   13950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13952:	bf00      	nop
   13954:	0004068c 	.word	0x0004068c
   13958:	000406bc 	.word	0x000406bc
   1395c:	0003f72c 	.word	0x0003f72c

00013960 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   13960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13964:	b091      	sub	sp, #68	; 0x44
   13966:	9205      	str	r2, [sp, #20]
   13968:	9303      	str	r3, [sp, #12]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1396a:	4613      	mov	r3, r2
   1396c:	f002 0204 	and.w	r2, r2, #4
   13970:	9200      	str	r2, [sp, #0]
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   13972:	f3c3 02c2 	ubfx	r2, r3, #3, #3
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   13976:	f010 0303 	ands.w	r3, r0, #3
   1397a:	9301      	str	r3, [sp, #4]
   1397c:	f040 8263 	bne.w	13e46 <cbvprintf_package+0x4e6>
   13980:	4607      	mov	r7, r0
   13982:	468a      	mov	sl, r1
   13984:	3201      	adds	r2, #1
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   13986:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   13988:	2800      	cmp	r0, #0
   1398a:	d048      	beq.n	13a1e <cbvprintf_package+0xbe>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   1398c:	b127      	cbz	r7, 13998 <cbvprintf_package+0x38>
   1398e:	1be3      	subs	r3, r4, r7
   13990:	3304      	adds	r3, #4
   13992:	4553      	cmp	r3, sl
   13994:	f200 825a 	bhi.w	13e4c <cbvprintf_package+0x4ec>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   13998:	9b03      	ldr	r3, [sp, #12]
   1399a:	1e5d      	subs	r5, r3, #1
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1399c:	9b01      	ldr	r3, [sp, #4]
   1399e:	9304      	str	r3, [sp, #16]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   139a0:	9306      	str	r3, [sp, #24]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   139a2:	9302      	str	r3, [sp, #8]
	bool parsing = false;
   139a4:	2600      	movs	r6, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   139a6:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	align = VA_STACK_ALIGN(char *);
   139aa:	f04f 0804 	mov.w	r8, #4
	size = sizeof(char *);
   139ae:	46c1      	mov	r9, r8

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   139b0:	b10f      	cbz	r7, 139b6 <cbvprintf_package+0x56>
				*(const char **)buf = s;
   139b2:	9b03      	ldr	r3, [sp, #12]
   139b4:	6023      	str	r3, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   139b6:	1e53      	subs	r3, r2, #1
   139b8:	9307      	str	r3, [sp, #28]
   139ba:	2a00      	cmp	r2, #0
   139bc:	f340 815f 	ble.w	13c7e <cbvprintf_package+0x31e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   139c0:	9b05      	ldr	r3, [sp, #20]
   139c2:	f013 0202 	ands.w	r2, r3, #2
   139c6:	d027      	beq.n	13a18 <cbvprintf_package+0xb8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   139c8:	2001      	movs	r0, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   139ca:	1be1      	subs	r1, r4, r7
   139cc:	088b      	lsrs	r3, r1, #2
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   139ce:	b11a      	cbz	r2, 139d8 <cbvprintf_package+0x78>
   139d0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   139d4:	f080 8167 	bcs.w	13ca6 <cbvprintf_package+0x346>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   139d8:	9a02      	ldr	r2, [sp, #8]
   139da:	2a0f      	cmp	r2, #15
   139dc:	f200 8173 	bhi.w	13cc6 <cbvprintf_package+0x366>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
   139e0:	2f00      	cmp	r7, #0
   139e2:	f000 8184 	beq.w	13cee <cbvprintf_package+0x38e>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
   139e6:	b2db      	uxtb	r3, r3
   139e8:	9902      	ldr	r1, [sp, #8]
   139ea:	f101 0240 	add.w	r2, r1, #64	; 0x40
   139ee:	446a      	add	r2, sp
   139f0:	f802 3c10 	strb.w	r3, [r2, #-16]
					str_ptr_arg[s_idx] = arg_idx;
   139f4:	f802 bc20 	strb.w	fp, [r2, #-32]
					if (is_ro) {
   139f8:	2800      	cmp	r0, #0
   139fa:	f000 8174 	beq.w	13ce6 <cbvprintf_package+0x386>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   139fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13a02:	f101 0240 	add.w	r2, r1, #64	; 0x40
   13a06:	446a      	add	r2, sp
   13a08:	f802 3c10 	strb.w	r3, [r2, #-16]
						s_ro_cnt++;
   13a0c:	9b04      	ldr	r3, [sp, #16]
   13a0e:	3301      	adds	r3, #1
   13a10:	9304      	str	r3, [sp, #16]
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
   13a12:	9b02      	ldr	r3, [sp, #8]
   13a14:	3301      	adds	r3, #1
   13a16:	9302      	str	r3, [sp, #8]
			}
			buf += sizeof(char *);
   13a18:	3404      	adds	r4, #4

			is_str_arg = false;
   13a1a:	2200      	movs	r2, #0
   13a1c:	e03d      	b.n	13a9a <cbvprintf_package+0x13a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   13a1e:	f001 0a07 	and.w	sl, r1, #7
   13a22:	4454      	add	r4, sl
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   13a24:	f1ca 0a08 	rsb	sl, sl, #8
   13a28:	e7b0      	b.n	1398c <cbvprintf_package+0x2c>
				parsing = false;
   13a2a:	2600      	movs	r6, #0
   13a2c:	e034      	b.n	13a98 <cbvprintf_package+0x138>
   13a2e:	2600      	movs	r6, #0
   13a30:	e032      	b.n	13a98 <cbvprintf_package+0x138>
   13a32:	2600      	movs	r6, #0
   13a34:	e030      	b.n	13a98 <cbvprintf_package+0x138>
				align = VA_STACK_ALIGN(intmax_t);
   13a36:	f04f 0808 	mov.w	r8, #8
				size = sizeof(intmax_t);
   13a3a:	46c1      	mov	r9, r8
   13a3c:	e02c      	b.n	13a98 <cbvprintf_package+0x138>
				if (*fmt == '%') {
   13a3e:	2925      	cmp	r1, #37	; 0x25
   13a40:	d12a      	bne.n	13a98 <cbvprintf_package+0x138>
					arg_idx++;
   13a42:	f10b 0b01 	add.w	fp, fp, #1
					parsing = true;
   13a46:	2601      	movs	r6, #1
					align = VA_STACK_ALIGN(int);
   13a48:	f04f 0804 	mov.w	r8, #4
					size = sizeof(int);
   13a4c:	46c1      	mov	r9, r8
				continue;
   13a4e:	e023      	b.n	13a98 <cbvprintf_package+0x138>
			switch (*fmt) {
   13a50:	2947      	cmp	r1, #71	; 0x47
   13a52:	d8ec      	bhi.n	13a2e <cbvprintf_package+0xce>
   13a54:	292a      	cmp	r1, #42	; 0x2a
   13a56:	d312      	bcc.n	13a7e <cbvprintf_package+0x11e>
   13a58:	392a      	subs	r1, #42	; 0x2a
   13a5a:	b2c9      	uxtb	r1, r1
   13a5c:	2001      	movs	r0, #1
   13a5e:	fa00 f101 	lsl.w	r1, r0, r1
   13a62:	f64f 70da 	movw	r0, #65498	; 0xffda
   13a66:	4201      	tst	r1, r0
   13a68:	d116      	bne.n	13a98 <cbvprintf_package+0x138>
   13a6a:	f011 5f62 	tst.w	r1, #947912704	; 0x38800000
   13a6e:	f040 80c3 	bne.w	13bf8 <cbvprintf_package+0x298>
   13a72:	f011 0f01 	tst.w	r1, #1
   13a76:	f040 808d 	bne.w	13b94 <cbvprintf_package+0x234>
				parsing = false;
   13a7a:	2600      	movs	r6, #0
   13a7c:	e00c      	b.n	13a98 <cbvprintf_package+0x138>
			switch (*fmt) {
   13a7e:	2925      	cmp	r1, #37	; 0x25
   13a80:	d103      	bne.n	13a8a <cbvprintf_package+0x12a>
				arg_idx--;
   13a82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
				parsing = false;
   13a86:	2600      	movs	r6, #0
				continue;
   13a88:	e006      	b.n	13a98 <cbvprintf_package+0x138>
			switch (*fmt) {
   13a8a:	d901      	bls.n	13a90 <cbvprintf_package+0x130>
				parsing = false;
   13a8c:	2600      	movs	r6, #0
   13a8e:	e003      	b.n	13a98 <cbvprintf_package+0x138>
			switch (*fmt) {
   13a90:	2920      	cmp	r1, #32
   13a92:	d001      	beq.n	13a98 <cbvprintf_package+0x138>
   13a94:	2923      	cmp	r1, #35	; 0x23
   13a96:	d1cc      	bne.n	13a32 <cbvprintf_package+0xd2>
				parsing = false;
   13a98:	461d      	mov	r5, r3
			if (*++fmt == '\0') {
   13a9a:	1c6b      	adds	r3, r5, #1
   13a9c:	7869      	ldrb	r1, [r5, #1]
   13a9e:	2900      	cmp	r1, #0
   13aa0:	f000 814d 	beq.w	13d3e <cbvprintf_package+0x3de>
			if (!parsing) {
   13aa4:	2e00      	cmp	r6, #0
   13aa6:	d0ca      	beq.n	13a3e <cbvprintf_package+0xde>
			switch (*fmt) {
   13aa8:	297a      	cmp	r1, #122	; 0x7a
   13aaa:	d8be      	bhi.n	13a2a <cbvprintf_package+0xca>
   13aac:	294c      	cmp	r1, #76	; 0x4c
   13aae:	d3cf      	bcc.n	13a50 <cbvprintf_package+0xf0>
   13ab0:	394c      	subs	r1, #76	; 0x4c
   13ab2:	292e      	cmp	r1, #46	; 0x2e
   13ab4:	d860      	bhi.n	13b78 <cbvprintf_package+0x218>
   13ab6:	a001      	add	r0, pc, #4	; (adr r0, 13abc <cbvprintf_package+0x15c>)
   13ab8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   13abc:	00013a99 	.word	0x00013a99
   13ac0:	00013b79 	.word	0x00013b79
   13ac4:	00013b79 	.word	0x00013b79
   13ac8:	00013b79 	.word	0x00013b79
   13acc:	00013b79 	.word	0x00013b79
   13ad0:	00013b79 	.word	0x00013b79
   13ad4:	00013b79 	.word	0x00013b79
   13ad8:	00013b79 	.word	0x00013b79
   13adc:	00013b79 	.word	0x00013b79
   13ae0:	00013b79 	.word	0x00013b79
   13ae4:	00013b79 	.word	0x00013b79
   13ae8:	00013b79 	.word	0x00013b79
   13aec:	00013b8d 	.word	0x00013b8d
   13af0:	00013b79 	.word	0x00013b79
   13af4:	00013b79 	.word	0x00013b79
   13af8:	00013b79 	.word	0x00013b79
   13afc:	00013b79 	.word	0x00013b79
   13b00:	00013b79 	.word	0x00013b79
   13b04:	00013b79 	.word	0x00013b79
   13b08:	00013b79 	.word	0x00013b79
   13b0c:	00013b79 	.word	0x00013b79
   13b10:	00013bf9 	.word	0x00013bf9
   13b14:	00013b79 	.word	0x00013b79
   13b18:	00013b8d 	.word	0x00013b8d
   13b1c:	00013b8d 	.word	0x00013b8d
   13b20:	00013bf9 	.word	0x00013bf9
   13b24:	00013bf9 	.word	0x00013bf9
   13b28:	00013bf9 	.word	0x00013bf9
   13b2c:	00013a99 	.word	0x00013a99
   13b30:	00013b8d 	.word	0x00013b8d
   13b34:	00013a37 	.word	0x00013a37
   13b38:	00013b79 	.word	0x00013b79
   13b3c:	00013a99 	.word	0x00013a99
   13b40:	00013b79 	.word	0x00013b79
   13b44:	00013c57 	.word	0x00013c57
   13b48:	00013b8d 	.word	0x00013b8d
   13b4c:	00013c57 	.word	0x00013c57
   13b50:	00013b79 	.word	0x00013b79
   13b54:	00013b79 	.word	0x00013b79
   13b58:	00013c61 	.word	0x00013c61
   13b5c:	00013b85 	.word	0x00013b85
   13b60:	00013b8d 	.word	0x00013b8d
   13b64:	00013b79 	.word	0x00013b79
   13b68:	00013b79 	.word	0x00013b79
   13b6c:	00013b8d 	.word	0x00013b8d
   13b70:	00013b79 	.word	0x00013b79
   13b74:	00013b7d 	.word	0x00013b7d
				parsing = false;
   13b78:	2600      	movs	r6, #0
   13b7a:	e78d      	b.n	13a98 <cbvprintf_package+0x138>
				align = VA_STACK_ALIGN(size_t);
   13b7c:	f04f 0804 	mov.w	r8, #4
				size = sizeof(size_t);
   13b80:	46c1      	mov	r9, r8
				continue;
   13b82:	e789      	b.n	13a98 <cbvprintf_package+0x138>
				align = VA_STACK_ALIGN(ptrdiff_t);
   13b84:	f04f 0804 	mov.w	r8, #4
				size = sizeof(ptrdiff_t);
   13b88:	46c1      	mov	r9, r8
				continue;
   13b8a:	e785      	b.n	13a98 <cbvprintf_package+0x138>
				if (fmt[-1] == 'l') {
   13b8c:	7829      	ldrb	r1, [r5, #0]
   13b8e:	296c      	cmp	r1, #108	; 0x6c
   13b90:	d024      	beq.n	13bdc <cbvprintf_package+0x27c>
				parsing = false;
   13b92:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   13b94:	4444      	add	r4, r8
   13b96:	3c01      	subs	r4, #1
   13b98:	f1c8 0100 	rsb	r1, r8, #0
   13b9c:	400c      	ands	r4, r1
   13b9e:	4620      	mov	r0, r4
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   13ba0:	b127      	cbz	r7, 13bac <cbvprintf_package+0x24c>
   13ba2:	1be1      	subs	r1, r4, r7
   13ba4:	4449      	add	r1, r9
   13ba6:	4551      	cmp	r1, sl
   13ba8:	f200 8153 	bhi.w	13e52 <cbvprintf_package+0x4f2>
		if (is_str_arg) {
   13bac:	2a00      	cmp	r2, #0
   13bae:	d15d      	bne.n	13c6c <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   13bb0:	f1b9 0f04 	cmp.w	r9, #4
   13bb4:	f000 80aa 	beq.w	13d0c <cbvprintf_package+0x3ac>

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   13bb8:	f1b9 0f08 	cmp.w	r9, #8
   13bbc:	f040 80ae 	bne.w	13d1c <cbvprintf_package+0x3bc>
			long long v = va_arg(ap, long long);
   13bc0:	991a      	ldr	r1, [sp, #104]	; 0x68
   13bc2:	3107      	adds	r1, #7
   13bc4:	f021 0107 	bic.w	r1, r1, #7
   13bc8:	f101 0008 	add.w	r0, r1, #8
   13bcc:	901a      	str	r0, [sp, #104]	; 0x68
   13bce:	e9d1 0100 	ldrd	r0, r1, [r1]

			if (buf0 != NULL) {
   13bd2:	b10f      	cbz	r7, 13bd8 <cbvprintf_package+0x278>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   13bd4:	e9c4 0100 	strd	r0, r1, [r4]
				}
			}
			buf += sizeof(long long);
   13bd8:	3408      	adds	r4, #8
   13bda:	e75d      	b.n	13a98 <cbvprintf_package+0x138>
					if (fmt[-2] == 'l') {
   13bdc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
   13be0:	296c      	cmp	r1, #108	; 0x6c
   13be2:	d004      	beq.n	13bee <cbvprintf_package+0x28e>
				parsing = false;
   13be4:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long);
   13be6:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long);
   13bea:	46c1      	mov	r9, r8
   13bec:	e7d2      	b.n	13b94 <cbvprintf_package+0x234>
				parsing = false;
   13bee:	2600      	movs	r6, #0
						align = VA_STACK_ALIGN(long long);
   13bf0:	f04f 0808 	mov.w	r8, #8
						size = sizeof(long long);
   13bf4:	46c1      	mov	r9, r8
   13bf6:	e7cd      	b.n	13b94 <cbvprintf_package+0x234>
				if (fmt[-1] == 'L') {
   13bf8:	7829      	ldrb	r1, [r5, #0]
   13bfa:	294c      	cmp	r1, #76	; 0x4c
   13bfc:	d01b      	beq.n	13c36 <cbvprintf_package+0x2d6>
					v.d = va_arg(ap, double);
   13bfe:	991a      	ldr	r1, [sp, #104]	; 0x68
   13c00:	3107      	adds	r1, #7
   13c02:	f021 0107 	bic.w	r1, r1, #7
   13c06:	f101 0008 	add.w	r0, r1, #8
   13c0a:	901a      	str	r0, [sp, #104]	; 0x68
   13c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
				buf = (void *) ROUND_UP(buf, align);
   13c10:	3407      	adds	r4, #7
   13c12:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   13c16:	b147      	cbz	r7, 13c2a <cbvprintf_package+0x2ca>
					if (BUF_OFFSET + size > len) {
   13c18:	1be6      	subs	r6, r4, r7
   13c1a:	3608      	adds	r6, #8
   13c1c:	4556      	cmp	r6, sl
   13c1e:	d814      	bhi.n	13c4a <cbvprintf_package+0x2ea>
					} else if (fmt[-1] == 'L') {
   13c20:	782d      	ldrb	r5, [r5, #0]
   13c22:	2d4c      	cmp	r5, #76	; 0x4c
   13c24:	d014      	beq.n	13c50 <cbvprintf_package+0x2f0>
						*(double *)buf = v.d;
   13c26:	e9c4 0100 	strd	r0, r1, [r4]
				buf += size;
   13c2a:	3408      	adds	r4, #8
				parsing = false;
   13c2c:	2600      	movs	r6, #0
				continue;
   13c2e:	f04f 0808 	mov.w	r8, #8
   13c32:	46c1      	mov	r9, r8
   13c34:	e730      	b.n	13a98 <cbvprintf_package+0x138>
					v.ld = va_arg(ap, long double);
   13c36:	991a      	ldr	r1, [sp, #104]	; 0x68
   13c38:	3107      	adds	r1, #7
   13c3a:	f021 0107 	bic.w	r1, r1, #7
   13c3e:	f101 0008 	add.w	r0, r1, #8
   13c42:	901a      	str	r0, [sp, #104]	; 0x68
   13c44:	e9d1 0100 	ldrd	r0, r1, [r1]
					size = sizeof(long double);
   13c48:	e7e2      	b.n	13c10 <cbvprintf_package+0x2b0>
						return -ENOSPC;
   13c4a:	f06f 001b 	mvn.w	r0, #27
   13c4e:	e0f7      	b.n	13e40 <cbvprintf_package+0x4e0>
						*(long double *)buf = v.ld;
   13c50:	e9c4 0100 	strd	r0, r1, [r4]
   13c54:	e7e9      	b.n	13c2a <cbvprintf_package+0x2ca>
				parsing = false;
   13c56:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   13c58:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   13c5c:	46c1      	mov	r9, r8
   13c5e:	e799      	b.n	13b94 <cbvprintf_package+0x234>
				is_str_arg = true;
   13c60:	4632      	mov	r2, r6
				parsing = false;
   13c62:	2600      	movs	r6, #0
				align = VA_STACK_ALIGN(void *);
   13c64:	f04f 0804 	mov.w	r8, #4
				size = sizeof(void *);
   13c68:	46c1      	mov	r9, r8
   13c6a:	e793      	b.n	13b94 <cbvprintf_package+0x234>
			s = va_arg(ap, char *);
   13c6c:	4604      	mov	r4, r0
   13c6e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13c70:	1d11      	adds	r1, r2, #4
   13c72:	911a      	str	r1, [sp, #104]	; 0x68
   13c74:	6812      	ldr	r2, [r2, #0]
   13c76:	9203      	str	r2, [sp, #12]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13c78:	9a07      	ldr	r2, [sp, #28]
			if (*++fmt == '\0') {
   13c7a:	461d      	mov	r5, r3
   13c7c:	e698      	b.n	139b0 <cbvprintf_package+0x50>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   13c7e:	4b79      	ldr	r3, [pc, #484]	; (13e64 <cbvprintf_package+0x504>)
   13c80:	9a03      	ldr	r2, [sp, #12]
   13c82:	429a      	cmp	r2, r3
   13c84:	d304      	bcc.n	13c90 <cbvprintf_package+0x330>
   13c86:	4b78      	ldr	r3, [pc, #480]	; (13e68 <cbvprintf_package+0x508>)
   13c88:	429a      	cmp	r2, r3
   13c8a:	d30a      	bcc.n	13ca2 <cbvprintf_package+0x342>
   13c8c:	2300      	movs	r3, #0
   13c8e:	e000      	b.n	13c92 <cbvprintf_package+0x332>
   13c90:	2300      	movs	r3, #0
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13c92:	2b00      	cmp	r3, #0
   13c94:	f47f ae94 	bne.w	139c0 <cbvprintf_package+0x60>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   13c98:	9b05      	ldr	r3, [sp, #20]
   13c9a:	f003 0202 	and.w	r2, r3, #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   13c9e:	2000      	movs	r0, #0
   13ca0:	e693      	b.n	139ca <cbvprintf_package+0x6a>
   13ca2:	2301      	movs	r3, #1
   13ca4:	e7f5      	b.n	13c92 <cbvprintf_package+0x332>
					__ASSERT(false, "String with too many arguments");
   13ca6:	4c71      	ldr	r4, [pc, #452]	; (13e6c <cbvprintf_package+0x50c>)
   13ca8:	f240 237b 	movw	r3, #635	; 0x27b
   13cac:	4622      	mov	r2, r4
   13cae:	4970      	ldr	r1, [pc, #448]	; (13e70 <cbvprintf_package+0x510>)
   13cb0:	4870      	ldr	r0, [pc, #448]	; (13e74 <cbvprintf_package+0x514>)
   13cb2:	f022 faef 	bl	36294 <assert_print>
   13cb6:	4870      	ldr	r0, [pc, #448]	; (13e78 <cbvprintf_package+0x518>)
   13cb8:	f022 faec 	bl	36294 <assert_print>
   13cbc:	f240 217b 	movw	r1, #635	; 0x27b
   13cc0:	4620      	mov	r0, r4
   13cc2:	f022 fae0 	bl	36286 <assert_post_action>
					__ASSERT(false, "str_ptr_pos[] too small");
   13cc6:	4c69      	ldr	r4, [pc, #420]	; (13e6c <cbvprintf_package+0x50c>)
   13cc8:	f44f 7320 	mov.w	r3, #640	; 0x280
   13ccc:	4622      	mov	r2, r4
   13cce:	4968      	ldr	r1, [pc, #416]	; (13e70 <cbvprintf_package+0x510>)
   13cd0:	4868      	ldr	r0, [pc, #416]	; (13e74 <cbvprintf_package+0x514>)
   13cd2:	f022 fadf 	bl	36294 <assert_print>
   13cd6:	4869      	ldr	r0, [pc, #420]	; (13e7c <cbvprintf_package+0x51c>)
   13cd8:	f022 fadc 	bl	36294 <assert_print>
   13cdc:	f44f 7120 	mov.w	r1, #640	; 0x280
   13ce0:	4620      	mov	r0, r4
   13ce2:	f022 fad0 	bl	36286 <assert_post_action>
						s_rw_cnt++;
   13ce6:	9b06      	ldr	r3, [sp, #24]
   13ce8:	3301      	adds	r3, #1
   13cea:	9306      	str	r3, [sp, #24]
   13cec:	e691      	b.n	13a12 <cbvprintf_package+0xb2>
				} else if (is_ro) {
   13cee:	b110      	cbz	r0, 13cf6 <cbvprintf_package+0x396>
					len += 1;
   13cf0:	f10a 0a01 	add.w	sl, sl, #1
   13cf4:	e68d      	b.n	13a12 <cbvprintf_package+0xb2>
				} else if (rws_pos_en) {
   13cf6:	9b00      	ldr	r3, [sp, #0]
   13cf8:	b113      	cbz	r3, 13d00 <cbvprintf_package+0x3a0>
					len += 2;
   13cfa:	f10a 0a02 	add.w	sl, sl, #2
   13cfe:	e688      	b.n	13a12 <cbvprintf_package+0xb2>
					len += strlen(s) + 1 + 1;
   13d00:	9803      	ldr	r0, [sp, #12]
   13d02:	f024 fb24 	bl	3834e <strlen>
   13d06:	1c83      	adds	r3, r0, #2
   13d08:	449a      	add	sl, r3
   13d0a:	e682      	b.n	13a12 <cbvprintf_package+0xb2>
			int v = va_arg(ap, int);
   13d0c:	991a      	ldr	r1, [sp, #104]	; 0x68
   13d0e:	1d08      	adds	r0, r1, #4
   13d10:	901a      	str	r0, [sp, #104]	; 0x68
   13d12:	6809      	ldr	r1, [r1, #0]
			if (buf0 != NULL) {
   13d14:	b107      	cbz	r7, 13d18 <cbvprintf_package+0x3b8>
				*(int *)buf = v;
   13d16:	6021      	str	r1, [r4, #0]
			buf += sizeof(int);
   13d18:	3404      	adds	r4, #4
   13d1a:	e6bd      	b.n	13a98 <cbvprintf_package+0x138>
		} else {
			__ASSERT(false, "unexpected size %u", size);
   13d1c:	4c53      	ldr	r4, [pc, #332]	; (13e6c <cbvprintf_package+0x50c>)
   13d1e:	f240 23c5 	movw	r3, #709	; 0x2c5
   13d22:	4622      	mov	r2, r4
   13d24:	4952      	ldr	r1, [pc, #328]	; (13e70 <cbvprintf_package+0x510>)
   13d26:	4853      	ldr	r0, [pc, #332]	; (13e74 <cbvprintf_package+0x514>)
   13d28:	f022 fab4 	bl	36294 <assert_print>
   13d2c:	4649      	mov	r1, r9
   13d2e:	4854      	ldr	r0, [pc, #336]	; (13e80 <cbvprintf_package+0x520>)
   13d30:	f022 fab0 	bl	36294 <assert_print>
   13d34:	f240 21c5 	movw	r1, #709	; 0x2c5
   13d38:	4620      	mov	r0, r4
   13d3a:	f022 faa4 	bl	36286 <assert_post_action>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
   13d3e:	1be3      	subs	r3, r4, r7
   13d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13d44:	d213      	bcs.n	13d6e <cbvprintf_package+0x40e>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
   13d46:	b317      	cbz	r7, 13d8e <cbvprintf_package+0x42e>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   13d48:	2200      	movs	r2, #0
   13d4a:	603a      	str	r2, [r7, #0]

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   13d4c:	089b      	lsrs	r3, r3, #2
   13d4e:	703b      	strb	r3, [r7, #0]

	if (rws_pos_en) {
   13d50:	9b00      	ldr	r3, [sp, #0]
   13d52:	b303      	cbz	r3, 13d96 <cbvprintf_package+0x436>
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   13d54:	9b06      	ldr	r3, [sp, #24]
   13d56:	70fb      	strb	r3, [r7, #3]
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   13d58:	9b04      	ldr	r3, [sp, #16]
   13d5a:	70bb      	strb	r3, [r7, #2]
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   13d5c:	bb9b      	cbnz	r3, 13dc6 <cbvprintf_package+0x466>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
   13d5e:	9d01      	ldr	r5, [sp, #4]
   13d60:	f8dd 9008 	ldr.w	r9, [sp, #8]
   13d64:	f8dd b010 	ldr.w	fp, [sp, #16]
   13d68:	f8dd 800c 	ldr.w	r8, [sp, #12]
   13d6c:	e04b      	b.n	13e06 <cbvprintf_package+0x4a6>
		__ASSERT(false, "too many format args");
   13d6e:	4c3f      	ldr	r4, [pc, #252]	; (13e6c <cbvprintf_package+0x50c>)
   13d70:	f240 23d1 	movw	r3, #721	; 0x2d1
   13d74:	4622      	mov	r2, r4
   13d76:	493e      	ldr	r1, [pc, #248]	; (13e70 <cbvprintf_package+0x510>)
   13d78:	483e      	ldr	r0, [pc, #248]	; (13e74 <cbvprintf_package+0x514>)
   13d7a:	f022 fa8b 	bl	36294 <assert_print>
   13d7e:	4841      	ldr	r0, [pc, #260]	; (13e84 <cbvprintf_package+0x524>)
   13d80:	f022 fa88 	bl	36294 <assert_print>
   13d84:	f240 21d1 	movw	r1, #721	; 0x2d1
   13d88:	4620      	mov	r0, r4
   13d8a:	f022 fa7c 	bl	36286 <assert_post_action>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   13d8e:	4453      	add	r3, sl
   13d90:	f1a3 0008 	sub.w	r0, r3, #8
   13d94:	e054      	b.n	13e40 <cbvprintf_package+0x4e0>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   13d96:	9b06      	ldr	r3, [sp, #24]
   13d98:	707b      	strb	r3, [r7, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   13d9a:	e7dd      	b.n	13d58 <cbvprintf_package+0x3f8>
		for (i = 0; i < s_idx; i++) {
   13d9c:	3301      	adds	r3, #1
   13d9e:	4298      	cmp	r0, r3
   13da0:	d9dd      	bls.n	13d5e <cbvprintf_package+0x3fe>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   13da2:	f103 0240 	add.w	r2, r3, #64	; 0x40
   13da6:	446a      	add	r2, sp
   13da8:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   13dac:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   13db0:	2a00      	cmp	r2, #0
   13db2:	daf3      	bge.n	13d9c <cbvprintf_package+0x43c>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   13db4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   13db8:	1be2      	subs	r2, r4, r7
   13dba:	3201      	adds	r2, #1
   13dbc:	4552      	cmp	r2, sl
   13dbe:	d84b      	bhi.n	13e58 <cbvprintf_package+0x4f8>
			*buf++ = pos;
   13dc0:	f804 1b01 	strb.w	r1, [r4], #1
   13dc4:	e7ea      	b.n	13d9c <cbvprintf_package+0x43c>
		for (i = 0; i < s_idx; i++) {
   13dc6:	9b01      	ldr	r3, [sp, #4]
   13dc8:	9802      	ldr	r0, [sp, #8]
   13dca:	e7e8      	b.n	13d9e <cbvprintf_package+0x43e>
		if (rws_pos_en) {
   13dcc:	9b00      	ldr	r3, [sp, #0]
   13dce:	b33b      	cbz	r3, 13e20 <cbvprintf_package+0x4c0>
			*buf++ = str_ptr_arg[i];
   13dd0:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13dd4:	446b      	add	r3, sp
   13dd6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
   13dda:	f804 3b01 	strb.w	r3, [r4], #1
			size = 0;
   13dde:	9e01      	ldr	r6, [sp, #4]
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
   13de0:	1be3      	subs	r3, r4, r7
   13de2:	4433      	add	r3, r6
   13de4:	3301      	adds	r3, #1
   13de6:	4553      	cmp	r3, sl
   13de8:	d839      	bhi.n	13e5e <cbvprintf_package+0x4fe>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   13dea:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13dee:	446b      	add	r3, sp
   13df0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   13df4:	f804 3b01 	strb.w	r3, [r4], #1
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
   13df8:	4632      	mov	r2, r6
   13dfa:	4641      	mov	r1, r8
   13dfc:	4620      	mov	r0, r4
   13dfe:	f024 fafc 	bl	383fa <memcpy>
		buf += size;
   13e02:	4434      	add	r4, r6
	for (i = 0; i < s_idx; i++) {
   13e04:	3501      	adds	r5, #1
   13e06:	45a9      	cmp	r9, r5
   13e08:	d919      	bls.n	13e3e <cbvprintf_package+0x4de>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   13e0a:	f1bb 0f00 	cmp.w	fp, #0
   13e0e:	d0dd      	beq.n	13dcc <cbvprintf_package+0x46c>
   13e10:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13e14:	446b      	add	r3, sp
   13e16:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   13e1a:	2b00      	cmp	r3, #0
   13e1c:	dad6      	bge.n	13dcc <cbvprintf_package+0x46c>
   13e1e:	e7f1      	b.n	13e04 <cbvprintf_package+0x4a4>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   13e20:	f105 0340 	add.w	r3, r5, #64	; 0x40
   13e24:	446b      	add	r3, sp
   13e26:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   13e2a:	f857 8023 	ldr.w	r8, [r7, r3, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   13e2e:	2200      	movs	r2, #0
   13e30:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
			size = strlen(s) + 1;
   13e34:	4640      	mov	r0, r8
   13e36:	f024 fa8a 	bl	3834e <strlen>
   13e3a:	1c46      	adds	r6, r0, #1
   13e3c:	e7d0      	b.n	13de0 <cbvprintf_package+0x480>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
   13e3e:	1be0      	subs	r0, r4, r7

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   13e40:	b011      	add	sp, #68	; 0x44
   13e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   13e46:	f06f 000d 	mvn.w	r0, #13
   13e4a:	e7f9      	b.n	13e40 <cbvprintf_package+0x4e0>
		return -ENOSPC;
   13e4c:	f06f 001b 	mvn.w	r0, #27
   13e50:	e7f6      	b.n	13e40 <cbvprintf_package+0x4e0>
			return -ENOSPC;
   13e52:	f06f 001b 	mvn.w	r0, #27
   13e56:	e7f3      	b.n	13e40 <cbvprintf_package+0x4e0>
				return -ENOSPC;
   13e58:	f06f 001b 	mvn.w	r0, #27
   13e5c:	e7f0      	b.n	13e40 <cbvprintf_package+0x4e0>
			return -ENOSPC;
   13e5e:	f06f 001b 	mvn.w	r0, #27
   13e62:	e7ed      	b.n	13e40 <cbvprintf_package+0x4e0>
   13e64:	0003ee74 	.word	0x0003ee74
   13e68:	000469fc 	.word	0x000469fc
   13e6c:	0004068c 	.word	0x0004068c
   13e70:	0003f964 	.word	0x0003f964
   13e74:	0003f72c 	.word	0x0003f72c
   13e78:	000406d4 	.word	0x000406d4
   13e7c:	000406f8 	.word	0x000406f8
   13e80:	00040714 	.word	0x00040714
   13e84:	0004072c 	.word	0x0004072c

00013e88 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   13e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e8c:	b097      	sub	sp, #92	; 0x5c
   13e8e:	af00      	add	r7, sp, #0
   13e90:	6139      	str	r1, [r7, #16]
   13e92:	617a      	str	r2, [r7, #20]
	__ASSERT_NO_MSG(in_packaged != NULL);
   13e94:	6278      	str	r0, [r7, #36]	; 0x24
   13e96:	b1b0      	cbz	r0, 13ec6 <cbprintf_package_convert+0x3e>
   13e98:	469b      	mov	fp, r3

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   13e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13e9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   13ea2:	61fb      	str	r3, [r7, #28]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   13ea4:	693b      	ldr	r3, [r7, #16]
   13ea6:	b1db      	cbz	r3, 13ee0 <cbprintf_package_convert+0x58>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   13ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   13eaa:	f893 8002 	ldrb.w	r8, [r3, #2]
   13eae:	f8c7 800c 	str.w	r8, [r7, #12]
	ro_cpy = ros_nbr &&
   13eb2:	f1b8 0f00 	cmp.w	r8, #0
   13eb6:	d018      	beq.n	13eea <cbprintf_package_convert+0x62>
   13eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13ebc:	f013 0f01 	tst.w	r3, #1
   13ec0:	d11f      	bne.n	13f02 <cbprintf_package_convert+0x7a>
   13ec2:	2300      	movs	r3, #0
   13ec4:	e012      	b.n	13eec <cbprintf_package_convert+0x64>
	__ASSERT_NO_MSG(in_packaged != NULL);
   13ec6:	4cac      	ldr	r4, [pc, #688]	; (14178 <cbprintf_package_convert+0x2f0>)
   13ec8:	f44f 7365 	mov.w	r3, #916	; 0x394
   13ecc:	4622      	mov	r2, r4
   13ece:	49ab      	ldr	r1, [pc, #684]	; (1417c <cbprintf_package_convert+0x2f4>)
   13ed0:	48ab      	ldr	r0, [pc, #684]	; (14180 <cbprintf_package_convert+0x2f8>)
   13ed2:	f022 f9df 	bl	36294 <assert_print>
   13ed6:	f44f 7165 	mov.w	r1, #916	; 0x394
   13eda:	4620      	mov	r0, r4
   13edc:	f022 f9d3 	bl	36286 <assert_post_action>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   13ee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13ee2:	f7ff fd15 	bl	13910 <get_package_len>
   13ee6:	6138      	str	r0, [r7, #16]
   13ee8:	e7de      	b.n	13ea8 <cbprintf_package_convert+0x20>
	ro_cpy = ros_nbr &&
   13eea:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   13eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   13eee:	78d2      	ldrb	r2, [r2, #3]
   13ef0:	623a      	str	r2, [r7, #32]
	rw_cpy = rws_nbr > 0 &&
   13ef2:	b142      	cbz	r2, 13f06 <cbprintf_package_convert+0x7e>
   13ef4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13ef8:	f012 0f02 	tst.w	r2, #2
   13efc:	d122      	bne.n	13f44 <cbprintf_package_convert+0xbc>
   13efe:	2200      	movs	r2, #0
   13f00:	e002      	b.n	13f08 <cbprintf_package_convert+0x80>
	ro_cpy = ros_nbr &&
   13f02:	2301      	movs	r3, #1
   13f04:	e7f2      	b.n	13eec <cbprintf_package_convert+0x64>
	rw_cpy = rws_nbr > 0 &&
   13f06:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
   13f08:	b902      	cbnz	r2, 13f0c <cbprintf_package_convert+0x84>
   13f0a:	b1eb      	cbz	r3, 13f48 <cbprintf_package_convert+0xc0>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
   13f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   13f0e:	780d      	ldrb	r5, [r1, #0]
   13f10:	00aa      	lsls	r2, r5, #2
   13f12:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
   13f14:	460a      	mov	r2, r1
   13f16:	6849      	ldr	r1, [r1, #4]
   13f18:	61b9      	str	r1, [r7, #24]
	uint8_t *str_pos = &buf[args_size];
   13f1a:	eb02 0585 	add.w	r5, r2, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
   13f1e:	697a      	ldr	r2, [r7, #20]
   13f20:	b1fa      	cbz	r2, 13f62 <cbprintf_package_convert+0xda>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
   13f22:	2b00      	cmp	r3, #0
   13f24:	f040 810e 	bne.w	14144 <cbprintf_package_convert+0x2bc>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13f28:	68fb      	ldr	r3, [r7, #12]
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	f000 8119 	beq.w	14162 <cbprintf_package_convert+0x2da>
   13f30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13f34:	f013 0f04 	tst.w	r3, #4
   13f38:	f040 8117 	bne.w	1416a <cbprintf_package_convert+0x2e2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
   13f3c:	2000      	movs	r0, #0
		keep_cnt = 0;
   13f3e:	4682      	mov	sl, r0
		scpy_cnt = 0;
   13f40:	4680      	mov	r8, r0
   13f42:	e103      	b.n	1414c <cbprintf_package_convert+0x2c4>
	rw_cpy = rws_nbr > 0 &&
   13f44:	2201      	movs	r2, #1
   13f46:	e7df      	b.n	13f08 <cbprintf_package_convert+0x80>
		if (cb) {
   13f48:	697b      	ldr	r3, [r7, #20]
   13f4a:	b11b      	cbz	r3, 13f54 <cbprintf_package_convert+0xcc>
			cb(in_packaged, in_len, ctx);
   13f4c:	465a      	mov	r2, fp
   13f4e:	6939      	ldr	r1, [r7, #16]
   13f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
   13f52:	4798      	blx	r3
		return in_len;
   13f54:	f8d7 9010 	ldr.w	r9, [r7, #16]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   13f58:	4648      	mov	r0, r9
   13f5a:	375c      	adds	r7, #92	; 0x5c
   13f5c:	46bd      	mov	sp, r7
   13f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
   13f62:	f8d7 9010 	ldr.w	r9, [r7, #16]
		if (ro_cpy) {
   13f66:	bb0b      	cbnz	r3, 13fac <cbprintf_package_convert+0x124>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   13f68:	68fb      	ldr	r3, [r7, #12]
   13f6a:	b3ab      	cbz	r3, 13fd8 <cbprintf_package_convert+0x150>
   13f6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   13f70:	f012 0604 	ands.w	r6, r2, #4
   13f74:	d027      	beq.n	13fc6 <cbprintf_package_convert+0x13e>
				str_pos += ros_nbr;
   13f76:	441d      	add	r5, r3
	size_t strl_cnt = 0;
   13f78:	2600      	movs	r6, #0
   13f7a:	e024      	b.n	13fc6 <cbprintf_package_convert+0x13e>
				out_len += len;
   13f7c:	4481      	add	r9, r0
				str_pos++;
   13f7e:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
   13f80:	3401      	adds	r4, #1
   13f82:	4554      	cmp	r4, sl
   13f84:	d21d      	bcs.n	13fc2 <cbprintf_package_convert+0x13a>
				const char *str = *(const char **)&buf32[*str_pos];
   13f86:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
   13f88:	2300      	movs	r3, #0
   13f8a:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
   13f8e:	4619      	mov	r1, r3
   13f90:	6978      	ldr	r0, [r7, #20]
   13f92:	f021 fc3c 	bl	3580e <append_string>
				if (strl && strl_cnt < strl_len) {
   13f96:	f1b8 0f00 	cmp.w	r8, #0
   13f9a:	d0ef      	beq.n	13f7c <cbprintf_package_convert+0xf4>
   13f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   13fa0:	429e      	cmp	r6, r3
   13fa2:	d2eb      	bcs.n	13f7c <cbprintf_package_convert+0xf4>
					strl[strl_cnt++] = (uint16_t)len;
   13fa4:	f828 0016 	strh.w	r0, [r8, r6, lsl #1]
   13fa8:	3601      	adds	r6, #1
   13faa:	e7e7      	b.n	13f7c <cbprintf_package_convert+0xf4>
			for (int i = 0; i < ros_nbr; i++) {
   13fac:	2400      	movs	r4, #0
	size_t strl_cnt = 0;
   13fae:	4626      	mov	r6, r4
   13fb0:	f8c7 a010 	str.w	sl, [r7, #16]
   13fb4:	f8d7 a00c 	ldr.w	sl, [r7, #12]
   13fb8:	f8d7 b024 	ldr.w	fp, [r7, #36]	; 0x24
   13fbc:	f8d7 8084 	ldr.w	r8, [r7, #132]	; 0x84
   13fc0:	e7df      	b.n	13f82 <cbprintf_package_convert+0xfa>
   13fc2:	f8d7 a010 	ldr.w	sl, [r7, #16]
		bool drop_ro_str_pos = !(flags &
   13fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13fca:	f003 0305 	and.w	r3, r3, #5
   13fce:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
   13fd0:	f04f 0b00 	mov.w	fp, #0
   13fd4:	613e      	str	r6, [r7, #16]
   13fd6:	e0a0      	b.n	1411a <cbprintf_package_convert+0x292>
	size_t strl_cnt = 0;
   13fd8:	68fe      	ldr	r6, [r7, #12]
   13fda:	e7f4      	b.n	13fc6 <cbprintf_package_convert+0x13e>
   13fdc:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   13fde:	69fb      	ldr	r3, [r7, #28]
   13fe0:	b97b      	cbnz	r3, 14002 <cbprintf_package_convert+0x17a>
			if (is_ro) {
   13fe2:	2d00      	cmp	r5, #0
   13fe4:	d07b      	beq.n	140de <cbprintf_package_convert+0x256>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   13fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   13fea:	f013 0f01 	tst.w	r3, #1
   13fee:	d17b      	bne.n	140e8 <cbprintf_package_convert+0x260>
					out_len -= drop_ro_str_pos ? 2 : 1;
   13ff0:	68fb      	ldr	r3, [r7, #12]
   13ff2:	2b00      	cmp	r3, #0
   13ff4:	d171      	bne.n	140da <cbprintf_package_convert+0x252>
   13ff6:	2302      	movs	r3, #2
   13ff8:	eba9 0903 	sub.w	r9, r9, r3
   13ffc:	e08a      	b.n	14114 <cbprintf_package_convert+0x28c>
   13ffe:	2501      	movs	r5, #1
   14000:	e7ed      	b.n	13fde <cbprintf_package_convert+0x156>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   14002:	4641      	mov	r1, r8
   14004:	69b8      	ldr	r0, [r7, #24]
   14006:	f021 fc49 	bl	3589c <is_ptr>
   1400a:	2800      	cmp	r0, #0
   1400c:	d0e9      	beq.n	13fe2 <cbprintf_package_convert+0x15a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1400e:	466d      	mov	r5, sp
   14010:	2300      	movs	r3, #0
   14012:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   14016:	2302      	movs	r3, #2
   14018:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   1401c:	b08a      	sub	sp, #40	; 0x28
   1401e:	4669      	mov	r1, sp
   14020:	f111 0210 	adds.w	r2, r1, #16
   14024:	d039      	beq.n	1409a <cbprintf_package_convert+0x212>
   14026:	2612      	movs	r6, #18
   14028:	b11a      	cbz	r2, 14032 <cbprintf_package_convert+0x1aa>
   1402a:	2e04      	cmp	r6, #4
   1402c:	dd01      	ble.n	14032 <cbprintf_package_convert+0x1aa>
   1402e:	4b55      	ldr	r3, [pc, #340]	; (14184 <cbprintf_package_convert+0x2fc>)
   14030:	614b      	str	r3, [r1, #20]
   14032:	2300      	movs	r3, #0
   14034:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
   14038:	2302      	movs	r3, #2
   1403a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
   1403e:	bb7a      	cbnz	r2, 140a0 <cbprintf_package_convert+0x218>
   14040:	2e11      	cmp	r6, #17
   14042:	dd47      	ble.n	140d4 <cbprintf_package_convert+0x24c>
   14044:	2312      	movs	r3, #18
   14046:	b162      	cbz	r2, 14062 <cbprintf_package_convert+0x1da>
   14048:	2004      	movs	r0, #4
   1404a:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
   1404e:	2000      	movs	r0, #0
   14050:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
   14054:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
   14058:	2001      	movs	r0, #1
   1405a:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
   1405e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   14060:	6108      	str	r0, [r1, #16]
   14062:	f36f 0a00 	bfc	sl, #0, #1
   14066:	f36f 0a41 	bfc	sl, #1, #1
   1406a:	f36f 0a82 	bfc	sl, #2, #1
   1406e:	f36f 0ac5 	bfc	sl, #3, #3
   14072:	2102      	movs	r1, #2
   14074:	f361 1a88 	bfi	sl, r1, #6, #3
   14078:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1407c:	f363 2a52 	bfi	sl, r3, #9, #10
   14080:	f36f 4ade 	bfc	sl, #19, #12
   14084:	f36f 7adf 	bfc	sl, #31, #1
   14088:	2300      	movs	r3, #0
   1408a:	4651      	mov	r1, sl
   1408c:	483e      	ldr	r0, [pc, #248]	; (14188 <cbprintf_package_convert+0x300>)
   1408e:	f002 fc5d 	bl	1694c <z_impl_z_log_msg_static_create>
   14092:	46ad      	mov	sp, r5
				out_len -= 2;
   14094:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
   14098:	e03c      	b.n	14114 <cbprintf_package_convert+0x28c>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1409a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1409e:	e7c3      	b.n	14028 <cbprintf_package_convert+0x1a0>
   140a0:	4633      	mov	r3, r6
   140a2:	2e08      	cmp	r6, #8
   140a4:	dd01      	ble.n	140aa <cbprintf_package_convert+0x222>
   140a6:	69b8      	ldr	r0, [r7, #24]
   140a8:	6188      	str	r0, [r1, #24]
   140aa:	2b0c      	cmp	r3, #12
   140ac:	dd01      	ble.n	140b2 <cbprintf_package_convert+0x22a>
   140ae:	f8c1 801c 	str.w	r8, [r1, #28]
   140b2:	f101 0320 	add.w	r3, r1, #32
   140b6:	2000      	movs	r0, #0
   140b8:	e009      	b.n	140ce <cbprintf_package_convert+0x246>
   140ba:	f100 0c30 	add.w	ip, r0, #48	; 0x30
   140be:	f107 0e28 	add.w	lr, r7, #40	; 0x28
   140c2:	44f4      	add	ip, lr
   140c4:	f81c cc30 	ldrb.w	ip, [ip, #-48]
   140c8:	f803 cb01 	strb.w	ip, [r3], #1
   140cc:	3001      	adds	r0, #1
   140ce:	2801      	cmp	r0, #1
   140d0:	d9f3      	bls.n	140ba <cbprintf_package_convert+0x232>
   140d2:	e7b5      	b.n	14040 <cbprintf_package_convert+0x1b8>
   140d4:	f06f 031b 	mvn.w	r3, #27
   140d8:	e7b5      	b.n	14046 <cbprintf_package_convert+0x1be>
					out_len -= drop_ro_str_pos ? 2 : 1;
   140da:	2301      	movs	r3, #1
   140dc:	e78c      	b.n	13ff8 <cbprintf_package_convert+0x170>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   140de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   140e2:	f013 0f02 	tst.w	r3, #2
   140e6:	d015      	beq.n	14114 <cbprintf_package_convert+0x28c>
				len = append_string(cb, NULL, str, 0);
   140e8:	2300      	movs	r3, #0
   140ea:	4632      	mov	r2, r6
   140ec:	4619      	mov	r1, r3
   140ee:	6978      	ldr	r0, [r7, #20]
   140f0:	f021 fb8d 	bl	3580e <append_string>
				if (strl && strl_cnt < strl_len) {
   140f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   140f8:	b153      	cbz	r3, 14110 <cbprintf_package_convert+0x288>
   140fa:	693b      	ldr	r3, [r7, #16]
   140fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   14100:	4293      	cmp	r3, r2
   14102:	d205      	bcs.n	14110 <cbprintf_package_convert+0x288>
					strl[strl_cnt++] = (uint16_t)len;
   14104:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   14108:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
   1410c:	3301      	adds	r3, #1
   1410e:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
   14110:	3801      	subs	r0, #1
   14112:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
   14114:	f10b 0b01 	add.w	fp, fp, #1
			uint8_t arg_pos = *str_pos++;
   14118:	4625      	mov	r5, r4
		for (int i = 0; i < rws_nbr; i++) {
   1411a:	6a3b      	ldr	r3, [r7, #32]
   1411c:	459b      	cmp	fp, r3
   1411e:	f4bf af1b 	bcs.w	13f58 <cbprintf_package_convert+0xd0>
			uint8_t arg_idx = *str_pos++;
   14122:	462c      	mov	r4, r5
   14124:	f814 8b02 	ldrb.w	r8, [r4], #2
			uint8_t arg_pos = *str_pos++;
   14128:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
   1412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   1412c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   14130:	4b16      	ldr	r3, [pc, #88]	; (1418c <cbprintf_package_convert+0x304>)
   14132:	429e      	cmp	r6, r3
   14134:	f4ff af52 	bcc.w	13fdc <cbprintf_package_convert+0x154>
   14138:	4b15      	ldr	r3, [pc, #84]	; (14190 <cbprintf_package_convert+0x308>)
   1413a:	429e      	cmp	r6, r3
   1413c:	f4ff af5f 	bcc.w	13ffe <cbprintf_package_convert+0x176>
   14140:	2500      	movs	r5, #0
   14142:	e74c      	b.n	13fde <cbprintf_package_convert+0x156>
		dst = cpy_str_pos;
   14144:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
   14148:	f04f 0a00 	mov.w	sl, #0
	if (dst) {
   1414c:	b118      	cbz	r0, 14156 <cbprintf_package_convert+0x2ce>
		memcpy(dst, str_pos, ros_nbr);
   1414e:	68fa      	ldr	r2, [r7, #12]
   14150:	4629      	mov	r1, r5
   14152:	f024 f952 	bl	383fa <memcpy>
	str_pos += ros_nbr;
   14156:	68fb      	ldr	r3, [r7, #12]
   14158:	441d      	add	r5, r3
	for (int i = 0; i < rws_nbr; i++) {
   1415a:	2600      	movs	r6, #0
   1415c:	f8c7 b004 	str.w	fp, [r7, #4]
   14160:	e033      	b.n	141ca <cbprintf_package_convert+0x342>
		dst = NULL;
   14162:	2000      	movs	r0, #0
		keep_cnt = 0;
   14164:	4682      	mov	sl, r0
		scpy_cnt = 0;
   14166:	4680      	mov	r8, r0
   14168:	e7f0      	b.n	1414c <cbprintf_package_convert+0x2c4>
		keep_cnt = ros_nbr;
   1416a:	46c2      	mov	sl, r8
		dst = keep_str_pos;
   1416c:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
   14170:	f04f 0800 	mov.w	r8, #0
   14174:	e7ea      	b.n	1414c <cbprintf_package_convert+0x2c4>
   14176:	bf00      	nop
   14178:	0004068c 	.word	0x0004068c
   1417c:	00040744 	.word	0x00040744
   14180:	0003f72c 	.word	0x0003f72c
   14184:	00040760 	.word	0x00040760
   14188:	0003f420 	.word	0x0003f420
   1418c:	0003ee74 	.word	0x0003ee74
   14190:	000469fc 	.word	0x000469fc
   14194:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   14196:	69fb      	ldr	r3, [r7, #28]
   14198:	bb6b      	cbnz	r3, 141f6 <cbprintf_package_convert+0x36e>
		if (is_ro) {
   1419a:	2d00      	cmp	r5, #0
   1419c:	d061      	beq.n	14262 <cbprintf_package_convert+0x3da>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   1419e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   141a2:	f013 0f01 	tst.w	r3, #1
   141a6:	d03a      	beq.n	1421e <cbprintf_package_convert+0x396>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   141a8:	f1b8 0f0f 	cmp.w	r8, #15
   141ac:	d82a      	bhi.n	14204 <cbprintf_package_convert+0x37c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   141ae:	f108 0301 	add.w	r3, r8, #1
   141b2:	f108 0230 	add.w	r2, r8, #48	; 0x30
   141b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   141ba:	eb02 0801 	add.w	r8, r2, r1
   141be:	f808 9c14 	strb.w	r9, [r8, #-20]
   141c2:	fa5f f883 	uxtb.w	r8, r3
	for (int i = 0; i < rws_nbr; i++) {
   141c6:	3601      	adds	r6, #1
		uint8_t arg_pos = *str_pos++;
   141c8:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
   141ca:	6a3b      	ldr	r3, [r7, #32]
   141cc:	429e      	cmp	r6, r3
   141ce:	f080 808e 	bcs.w	142ee <cbprintf_package_convert+0x466>
		uint8_t arg_idx = *str_pos++;
   141d2:	462c      	mov	r4, r5
   141d4:	f814 bb02 	ldrb.w	fp, [r4], #2
		uint8_t arg_pos = *str_pos++;
   141d8:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
   141dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   141de:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
   141e2:	4a87      	ldr	r2, [pc, #540]	; (14400 <cbprintf_package_convert+0x578>)
   141e4:	4293      	cmp	r3, r2
   141e6:	d3d5      	bcc.n	14194 <cbprintf_package_convert+0x30c>
   141e8:	4a86      	ldr	r2, [pc, #536]	; (14404 <cbprintf_package_convert+0x57c>)
   141ea:	4293      	cmp	r3, r2
   141ec:	d301      	bcc.n	141f2 <cbprintf_package_convert+0x36a>
   141ee:	2500      	movs	r5, #0
   141f0:	e7d1      	b.n	14196 <cbprintf_package_convert+0x30e>
   141f2:	2501      	movs	r5, #1
   141f4:	e7cf      	b.n	14196 <cbprintf_package_convert+0x30e>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   141f6:	4659      	mov	r1, fp
   141f8:	69b8      	ldr	r0, [r7, #24]
   141fa:	f021 fb4f 	bl	3589c <is_ptr>
   141fe:	2800      	cmp	r0, #0
   14200:	d0cb      	beq.n	1419a <cbprintf_package_convert+0x312>
   14202:	e7e0      	b.n	141c6 <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   14204:	4c80      	ldr	r4, [pc, #512]	; (14408 <cbprintf_package_convert+0x580>)
   14206:	f240 433e 	movw	r3, #1086	; 0x43e
   1420a:	4622      	mov	r2, r4
   1420c:	497f      	ldr	r1, [pc, #508]	; (1440c <cbprintf_package_convert+0x584>)
   1420e:	4880      	ldr	r0, [pc, #512]	; (14410 <cbprintf_package_convert+0x588>)
   14210:	f022 f840 	bl	36294 <assert_print>
   14214:	f240 413e 	movw	r1, #1086	; 0x43e
   14218:	4620      	mov	r0, r4
   1421a:	f022 f834 	bl	36286 <assert_post_action>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1421e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14222:	f013 0f04 	tst.w	r3, #4
   14226:	d0ce      	beq.n	141c6 <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   14228:	f1ba 0f0f 	cmp.w	sl, #15
   1422c:	d80c      	bhi.n	14248 <cbprintf_package_convert+0x3c0>
				keep_str_pos[keep_cnt++] = arg_pos;
   1422e:	f10a 0301 	add.w	r3, sl, #1
   14232:	f10a 0230 	add.w	r2, sl, #48	; 0x30
   14236:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1423a:	eb02 0a01 	add.w	sl, r2, r1
   1423e:	f80a 9c24 	strb.w	r9, [sl, #-36]
   14242:	fa5f fa83 	uxtb.w	sl, r3
   14246:	e7be      	b.n	141c6 <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   14248:	4c6f      	ldr	r4, [pc, #444]	; (14408 <cbprintf_package_convert+0x580>)
   1424a:	f240 4341 	movw	r3, #1089	; 0x441
   1424e:	4622      	mov	r2, r4
   14250:	4970      	ldr	r1, [pc, #448]	; (14414 <cbprintf_package_convert+0x58c>)
   14252:	486f      	ldr	r0, [pc, #444]	; (14410 <cbprintf_package_convert+0x588>)
   14254:	f022 f81e 	bl	36294 <assert_print>
   14258:	f240 4141 	movw	r1, #1089	; 0x441
   1425c:	4620      	mov	r0, r4
   1425e:	f022 f812 	bl	36286 <assert_post_action>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   14262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14266:	f013 0f02 	tst.w	r3, #2
   1426a:	d01c      	beq.n	142a6 <cbprintf_package_convert+0x41e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   1426c:	f1b8 0f0f 	cmp.w	r8, #15
   14270:	d80c      	bhi.n	1428c <cbprintf_package_convert+0x404>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   14272:	f108 0301 	add.w	r3, r8, #1
   14276:	f108 0230 	add.w	r2, r8, #48	; 0x30
   1427a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   1427e:	eb02 0801 	add.w	r8, r2, r1
   14282:	f808 9c14 	strb.w	r9, [r8, #-20]
   14286:	fa5f f883 	uxtb.w	r8, r3
   1428a:	e79c      	b.n	141c6 <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   1428c:	4c5e      	ldr	r4, [pc, #376]	; (14408 <cbprintf_package_convert+0x580>)
   1428e:	f44f 6389 	mov.w	r3, #1096	; 0x448
   14292:	4622      	mov	r2, r4
   14294:	495d      	ldr	r1, [pc, #372]	; (1440c <cbprintf_package_convert+0x584>)
   14296:	485e      	ldr	r0, [pc, #376]	; (14410 <cbprintf_package_convert+0x588>)
   14298:	f021 fffc 	bl	36294 <assert_print>
   1429c:	f44f 6189 	mov.w	r1, #1096	; 0x448
   142a0:	4620      	mov	r0, r4
   142a2:	f021 fff0 	bl	36286 <assert_post_action>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   142a6:	f1ba 0f0f 	cmp.w	sl, #15
   142aa:	d813      	bhi.n	142d4 <cbprintf_package_convert+0x44c>
				keep_str_pos[keep_cnt++] = arg_idx;
   142ac:	f10a 0301 	add.w	r3, sl, #1
   142b0:	f10a 0230 	add.w	r2, sl, #48	; 0x30
   142b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
   142b8:	440a      	add	r2, r1
   142ba:	f802 bc24 	strb.w	fp, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
   142be:	f10a 0a02 	add.w	sl, sl, #2
   142c2:	fa5f fa8a 	uxtb.w	sl, sl
   142c6:	f107 0258 	add.w	r2, r7, #88	; 0x58
   142ca:	fa52 f383 	uxtab	r3, r2, r3
   142ce:	f803 9c24 	strb.w	r9, [r3, #-36]
   142d2:	e778      	b.n	141c6 <cbprintf_package_convert+0x33e>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   142d4:	4c4c      	ldr	r4, [pc, #304]	; (14408 <cbprintf_package_convert+0x580>)
   142d6:	f240 434b 	movw	r3, #1099	; 0x44b
   142da:	4622      	mov	r2, r4
   142dc:	494d      	ldr	r1, [pc, #308]	; (14414 <cbprintf_package_convert+0x58c>)
   142de:	484c      	ldr	r0, [pc, #304]	; (14410 <cbprintf_package_convert+0x588>)
   142e0:	f021 ffd8 	bl	36294 <assert_print>
   142e4:	f240 414b 	movw	r1, #1099	; 0x44b
   142e8:	4620      	mov	r0, r4
   142ea:	f021 ffcc 	bl	36286 <assert_post_action>
	out_desc.len = in_desc->len;
   142ee:	f8d7 b004 	ldr.w	fp, [r7, #4]
   142f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   142f4:	7813      	ldrb	r3, [r2, #0]
   142f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   142fa:	7853      	ldrb	r3, [r2, #1]
   142fc:	4443      	add	r3, r8
   142fe:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   14302:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14306:	f013 0f02 	tst.w	r3, #2
   1430a:	d10d      	bne.n	14328 <cbprintf_package_convert+0x4a0>
   1430c:	f3ca 0347 	ubfx	r3, sl, #1, #8
   14310:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   14314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14318:	f013 0f01 	tst.w	r3, #1
   1431c:	d106      	bne.n	1432c <cbprintf_package_convert+0x4a4>
   1431e:	f013 0f04 	tst.w	r3, #4
   14322:	d135      	bne.n	14390 <cbprintf_package_convert+0x508>
   14324:	2300      	movs	r3, #0
   14326:	e002      	b.n	1432e <cbprintf_package_convert+0x4a6>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   14328:	2300      	movs	r3, #0
   1432a:	e7f1      	b.n	14310 <cbprintf_package_convert+0x488>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   1432c:	2300      	movs	r3, #0
   1432e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   14332:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   14334:	6820      	ldr	r0, [r4, #0]
   14336:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
   14338:	6d78      	ldr	r0, [r7, #84]	; 0x54
   1433a:	6020      	str	r0, [r4, #0]
	rv = cb(in_packaged, args_size, ctx);
   1433c:	465a      	mov	r2, fp
   1433e:	68b9      	ldr	r1, [r7, #8]
   14340:	4620      	mov	r0, r4
   14342:	697e      	ldr	r6, [r7, #20]
   14344:	47b0      	blx	r6
	if (rv < 0) {
   14346:	f1b0 0900 	subs.w	r9, r0, #0
   1434a:	f6ff ae05 	blt.w	13f58 <cbprintf_package_convert+0xd0>
	*in_desc = in_desc_backup;
   1434e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   14350:	6020      	str	r0, [r4, #0]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   14352:	465a      	mov	r2, fp
   14354:	4651      	mov	r1, sl
   14356:	f107 0034 	add.w	r0, r7, #52	; 0x34
   1435a:	47b0      	blx	r6
	if (rv < 0) {
   1435c:	2800      	cmp	r0, #0
   1435e:	db49      	blt.n	143f4 <cbprintf_package_convert+0x56c>
	out_len += rv;
   14360:	eb09 0400 	add.w	r4, r9, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   14364:	68fa      	ldr	r2, [r7, #12]
   14366:	68bb      	ldr	r3, [r7, #8]
   14368:	441a      	add	r2, r3
   1436a:	6a3b      	ldr	r3, [r7, #32]
   1436c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
   14370:	465a      	mov	r2, fp
   14372:	693b      	ldr	r3, [r7, #16]
   14374:	1a59      	subs	r1, r3, r1
   14376:	4628      	mov	r0, r5
   14378:	47b0      	blx	r6
	if (rv < 0) {
   1437a:	f1b0 0900 	subs.w	r9, r0, #0
   1437e:	f6ff adeb 	blt.w	13f58 <cbprintf_package_convert+0xd0>
	out_len += rv;
   14382:	444c      	add	r4, r9
	for (int i = 0; i < scpy_cnt; i++) {
   14384:	2500      	movs	r5, #0
   14386:	f8c7 8020 	str.w	r8, [r7, #32]
   1438a:	f8d7 9084 	ldr.w	r9, [r7, #132]	; 0x84
   1438e:	e015      	b.n	143bc <cbprintf_package_convert+0x534>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   14390:	4653      	mov	r3, sl
   14392:	e7cc      	b.n	1432e <cbprintf_package_convert+0x4a6>
		uint16_t str_len = strl ? strl[i] : 0;
   14394:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
   14398:	465a      	mov	r2, fp
   1439a:	2101      	movs	r1, #1
   1439c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   143a0:	47b0      	blx	r6
		if (rv < 0) {
   143a2:	2800      	cmp	r0, #0
   143a4:	db28      	blt.n	143f8 <cbprintf_package_convert+0x570>
		out_len += rv;
   143a6:	4404      	add	r4, r0
		rv = append_string(cb, ctx, str, str_len);
   143a8:	4653      	mov	r3, sl
   143aa:	4642      	mov	r2, r8
   143ac:	4659      	mov	r1, fp
   143ae:	4630      	mov	r0, r6
   143b0:	f021 fa2d 	bl	3580e <append_string>
		if (rv < 0) {
   143b4:	2800      	cmp	r0, #0
   143b6:	db21      	blt.n	143fc <cbprintf_package_convert+0x574>
		out_len += rv;
   143b8:	4404      	add	r4, r0
	for (int i = 0; i < scpy_cnt; i++) {
   143ba:	3501      	adds	r5, #1
   143bc:	6a3b      	ldr	r3, [r7, #32]
   143be:	429d      	cmp	r5, r3
   143c0:	da11      	bge.n	143e6 <cbprintf_package_convert+0x55e>
		uint8_t loc = cpy_str_pos[i];
   143c2:	f105 0330 	add.w	r3, r5, #48	; 0x30
   143c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   143ca:	4413      	add	r3, r2
   143cc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
   143d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
   143d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   143d6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   143da:	f1b9 0f00 	cmp.w	r9, #0
   143de:	d0d9      	beq.n	14394 <cbprintf_package_convert+0x50c>
   143e0:	f839 a015 	ldrh.w	sl, [r9, r5, lsl #1]
   143e4:	e7d8      	b.n	14398 <cbprintf_package_convert+0x510>
	(void)cb(NULL, 0, ctx);
   143e6:	465a      	mov	r2, fp
   143e8:	2100      	movs	r1, #0
   143ea:	4608      	mov	r0, r1
   143ec:	697b      	ldr	r3, [r7, #20]
   143ee:	4798      	blx	r3
	return out_len;
   143f0:	46a1      	mov	r9, r4
   143f2:	e5b1      	b.n	13f58 <cbprintf_package_convert+0xd0>
		return rv;
   143f4:	4681      	mov	r9, r0
   143f6:	e5af      	b.n	13f58 <cbprintf_package_convert+0xd0>
   143f8:	4681      	mov	r9, r0
   143fa:	e5ad      	b.n	13f58 <cbprintf_package_convert+0xd0>
   143fc:	4681      	mov	r9, r0
   143fe:	e5ab      	b.n	13f58 <cbprintf_package_convert+0xd0>
   14400:	0003ee74 	.word	0x0003ee74
   14404:	000469fc 	.word	0x000469fc
   14408:	0004068c 	.word	0x0004068c
   1440c:	00040804 	.word	0x00040804
   14410:	0003f72c 	.word	0x0003f72c
   14414:	00040824 	.word	0x00040824

00014418 <u8_to_dec>:
 */

#include <zephyr/sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   14418:	b510      	push	{r4, lr}
   1441a:	4686      	mov	lr, r0
	uint8_t divisor = 100;
	uint8_t num_digits = 0;
   1441c:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   1441e:	2364      	movs	r3, #100	; 0x64
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   14420:	e010      	b.n	14444 <u8_to_dec+0x2c>
		digit = value / divisor;
		if (digit != 0 || divisor == 1 || num_digits != 0) {
			*buf = (char)digit + '0';
   14422:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   14426:	f80e cb01 	strb.w	ip, [lr], #1
			buf++;
			buflen--;
   1442a:	3901      	subs	r1, #1
   1442c:	b2c9      	uxtb	r1, r1
			num_digits++;
   1442e:	3001      	adds	r0, #1
   14430:	b2c0      	uxtb	r0, r0
		}

		value -= digit * divisor;
   14432:	fbb2 f4f3 	udiv	r4, r2, r3
   14436:	fb03 2214 	mls	r2, r3, r4, r2
   1443a:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1443c:	4c09      	ldr	r4, [pc, #36]	; (14464 <u8_to_dec+0x4c>)
   1443e:	fba4 4303 	umull	r4, r3, r4, r3
   14442:	08db      	lsrs	r3, r3, #3
	while (buflen > 0 && divisor > 0) {
   14444:	b149      	cbz	r1, 1445a <u8_to_dec+0x42>
   14446:	b143      	cbz	r3, 1445a <u8_to_dec+0x42>
		digit = value / divisor;
   14448:	fbb2 fcf3 	udiv	ip, r2, r3
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1444c:	429a      	cmp	r2, r3
   1444e:	d2e8      	bcs.n	14422 <u8_to_dec+0xa>
   14450:	2b01      	cmp	r3, #1
   14452:	d0e6      	beq.n	14422 <u8_to_dec+0xa>
   14454:	2800      	cmp	r0, #0
   14456:	d0ec      	beq.n	14432 <u8_to_dec+0x1a>
   14458:	e7e3      	b.n	14422 <u8_to_dec+0xa>
	}

	if (buflen) {
   1445a:	b111      	cbz	r1, 14462 <u8_to_dec+0x4a>
		*buf = '\0';
   1445c:	2300      	movs	r3, #0
   1445e:	f88e 3000 	strb.w	r3, [lr]
	}

	return num_digits;
}
   14462:	bd10      	pop	{r4, pc}
   14464:	cccccccd 	.word	0xcccccccd

00014468 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   14468:	4b01      	ldr	r3, [pc, #4]	; (14470 <__printk_hook_install+0x8>)
   1446a:	6018      	str	r0, [r3, #0]
}
   1446c:	4770      	bx	lr
   1446e:	bf00      	nop
   14470:	20008320 	.word	0x20008320

00014474 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   14474:	b510      	push	{r4, lr}
   14476:	b086      	sub	sp, #24
   14478:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1447a:	9003      	str	r0, [sp, #12]
   1447c:	9104      	str	r1, [sp, #16]
   1447e:	2100      	movs	r1, #0
   14480:	9105      	str	r1, [sp, #20]
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14482:	9100      	str	r1, [sp, #0]
   14484:	a903      	add	r1, sp, #12
   14486:	4806      	ldr	r0, [pc, #24]	; (144a0 <vsnprintk+0x2c>)
   14488:	f000 fd5e 	bl	14f48 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   1448c:	9b05      	ldr	r3, [sp, #20]
   1448e:	9a04      	ldr	r2, [sp, #16]
   14490:	4293      	cmp	r3, r2
   14492:	da01      	bge.n	14498 <vsnprintk+0x24>
		str[ctx.count] = '\0';
   14494:	2200      	movs	r2, #0
   14496:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   14498:	9805      	ldr	r0, [sp, #20]
   1449a:	b006      	add	sp, #24
   1449c:	bd10      	pop	{r4, pc}
   1449e:	bf00      	nop
   144a0:	000359bb 	.word	0x000359bb

000144a4 <sys_heap_free>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
	if (mem == NULL) {
   144a4:	2900      	cmp	r1, #0
   144a6:	d03b      	beq.n	14520 <sys_heap_free+0x7c>
{
   144a8:	b538      	push	{r3, r4, r5, lr}
   144aa:	460d      	mov	r5, r1
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   144ac:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   144ae:	4620      	mov	r0, r4
   144b0:	f021 fb46 	bl	35b40 <mem_to_chunkid>
   144b4:	4601      	mov	r1, r0

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   144b6:	00c2      	lsls	r2, r0, #3

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   144b8:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
   144bc:	885b      	ldrh	r3, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   144be:	f013 0f01 	tst.w	r3, #1
   144c2:	d00f      	beq.n	144e4 <sys_heap_free+0x40>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   144c4:	eb00 0353 	add.w	r3, r0, r3, lsr #1
		return ((uint16_t *)cmem)[f];
   144c8:	f834 0033 	ldrh.w	r0, [r4, r3, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   144cc:	1a1b      	subs	r3, r3, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   144ce:	4299      	cmp	r1, r3
   144d0:	d117      	bne.n	14502 <sys_heap_free+0x5e>
	void *cmem = &buf[c];
   144d2:	18a3      	adds	r3, r4, r2
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   144d4:	885a      	ldrh	r2, [r3, #2]
   144d6:	f022 0201 	bic.w	r2, r2, #1
   144da:	805a      	strh	r2, [r3, #2]
#ifdef CONFIG_SYS_HEAP_LISTENER
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
   144dc:	4620      	mov	r0, r4
   144de:	f021 fb4b 	bl	35b78 <free_chunk>
}
   144e2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(chunk_used(h, c),
   144e4:	4c0f      	ldr	r4, [pc, #60]	; (14524 <sys_heap_free+0x80>)
   144e6:	23af      	movs	r3, #175	; 0xaf
   144e8:	4622      	mov	r2, r4
   144ea:	490f      	ldr	r1, [pc, #60]	; (14528 <sys_heap_free+0x84>)
   144ec:	480f      	ldr	r0, [pc, #60]	; (1452c <sys_heap_free+0x88>)
   144ee:	f021 fed1 	bl	36294 <assert_print>
   144f2:	4629      	mov	r1, r5
   144f4:	480e      	ldr	r0, [pc, #56]	; (14530 <sys_heap_free+0x8c>)
   144f6:	f021 fecd 	bl	36294 <assert_print>
   144fa:	21af      	movs	r1, #175	; 0xaf
   144fc:	4620      	mov	r0, r4
   144fe:	f021 fec2 	bl	36286 <assert_post_action>
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   14502:	4c08      	ldr	r4, [pc, #32]	; (14524 <sys_heap_free+0x80>)
   14504:	23b7      	movs	r3, #183	; 0xb7
   14506:	4622      	mov	r2, r4
   14508:	490a      	ldr	r1, [pc, #40]	; (14534 <sys_heap_free+0x90>)
   1450a:	4808      	ldr	r0, [pc, #32]	; (1452c <sys_heap_free+0x88>)
   1450c:	f021 fec2 	bl	36294 <assert_print>
   14510:	4629      	mov	r1, r5
   14512:	4809      	ldr	r0, [pc, #36]	; (14538 <sys_heap_free+0x94>)
   14514:	f021 febe 	bl	36294 <assert_print>
   14518:	21b7      	movs	r1, #183	; 0xb7
   1451a:	4620      	mov	r0, r4
   1451c:	f021 feb3 	bl	36286 <assert_post_action>
   14520:	4770      	bx	lr
   14522:	bf00      	nop
   14524:	00040858 	.word	0x00040858
   14528:	0004087c 	.word	0x0004087c
   1452c:	0003f72c 	.word	0x0003f72c
   14530:	00040890 	.word	0x00040890
   14534:	000408c8 	.word	0x000408c8
   14538:	000408f0 	.word	0x000408f0

0001453c <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1453c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14540:	4615      	mov	r5, r2
	struct z_heap *h = heap->heap;
   14542:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   14544:	424b      	negs	r3, r1
   14546:	400b      	ands	r3, r1
	if (align != rew) {
   14548:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1454c:	ea19 0901 	ands.w	r9, r9, r1
   14550:	d004      	beq.n	1455c <sys_heap_aligned_alloc+0x20>
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   14552:	2b03      	cmp	r3, #3
   14554:	d84a      	bhi.n	145ec <sys_heap_aligned_alloc+0xb0>
		align -= rew;
   14556:	464c      	mov	r4, r9
	rew = align & -align;
   14558:	4699      	mov	r9, r3
   1455a:	e003      	b.n	14564 <sys_heap_aligned_alloc+0x28>
   1455c:	460c      	mov	r4, r1
	} else {
		if (align <= chunk_header_bytes(h)) {
   1455e:	2904      	cmp	r1, #4
   14560:	d93f      	bls.n	145e2 <sys_heap_aligned_alloc+0xa6>
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
   14562:	2304      	movs	r3, #4
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   14564:	1e62      	subs	r2, r4, #1
   14566:	4222      	tst	r2, r4
   14568:	d144      	bne.n	145f4 <sys_heap_aligned_alloc+0xb8>

	if (bytes == 0 || size_too_big(h, bytes)) {
   1456a:	2d00      	cmp	r5, #0
   1456c:	d066      	beq.n	1463c <sys_heap_aligned_alloc+0x100>
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1456e:	68b2      	ldr	r2, [r6, #8]
   14570:	ebb2 0fd5 	cmp.w	r2, r5, lsr #3
   14574:	d965      	bls.n	14642 <sys_heap_aligned_alloc+0x106>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   14576:	1961      	adds	r1, r4, r5
   14578:	1ac9      	subs	r1, r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1457a:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1457c:	08c9      	lsrs	r1, r1, #3
   1457e:	4630      	mov	r0, r6
   14580:	f021 fb2b 	bl	35bda <alloc_chunk>

	if (c0 == 0) {
   14584:	4607      	mov	r7, r0
   14586:	2800      	cmp	r0, #0
   14588:	d05e      	beq.n	14648 <sys_heap_aligned_alloc+0x10c>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   1458a:	4601      	mov	r1, r0
   1458c:	4630      	mov	r0, r6
   1458e:	f021 fa56 	bl	35a3e <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   14592:	eb00 0809 	add.w	r8, r0, r9
   14596:	44a0      	add	r8, r4
   14598:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1459c:	4264      	negs	r4, r4
   1459e:	ea08 0804 	and.w	r8, r8, r4
   145a2:	eba8 0809 	sub.w	r8, r8, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   145a6:	eb08 0405 	add.w	r4, r8, r5
   145aa:	3407      	adds	r4, #7
   145ac:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   145b0:	4641      	mov	r1, r8
   145b2:	4630      	mov	r0, r6
   145b4:	f021 fac4 	bl	35b40 <mem_to_chunkid>
   145b8:	4605      	mov	r5, r0
	chunkid_t c_end = end - chunk_buf(h);
   145ba:	1ba4      	subs	r4, r4, r6
   145bc:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   145be:	4287      	cmp	r7, r0
   145c0:	d328      	bcc.n	14614 <sys_heap_aligned_alloc+0xd8>
	void *cmem = &buf[c];
   145c2:	00ef      	lsls	r7, r5, #3
		return ((uint16_t *)cmem)[f];
   145c4:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
   145c8:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   145ca:	eb05 0353 	add.w	r3, r5, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   145ce:	429c      	cmp	r4, r3
   145d0:	d32a      	bcc.n	14628 <sys_heap_aligned_alloc+0xec>
	void *cmem = &buf[c];
   145d2:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   145d4:	8873      	ldrh	r3, [r6, #2]
   145d6:	f043 0301 	orr.w	r3, r3, #1
   145da:	8073      	strh	r3, [r6, #2]
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   145dc:	4640      	mov	r0, r8
   145de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return sys_heap_alloc(heap, bytes);
   145e2:	4611      	mov	r1, r2
   145e4:	f021 fb34 	bl	35c50 <sys_heap_alloc>
   145e8:	4680      	mov	r8, r0
   145ea:	e7f7      	b.n	145dc <sys_heap_aligned_alloc+0xa0>
		align -= rew;
   145ec:	464c      	mov	r4, r9
	rew = align & -align;
   145ee:	4699      	mov	r9, r3
		gap = MIN(rew, chunk_header_bytes(h));
   145f0:	2304      	movs	r3, #4
   145f2:	e7b7      	b.n	14564 <sys_heap_aligned_alloc+0x28>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   145f4:	4c16      	ldr	r4, [pc, #88]	; (14650 <sys_heap_aligned_alloc+0x114>)
   145f6:	f44f 73a2 	mov.w	r3, #324	; 0x144
   145fa:	4622      	mov	r2, r4
   145fc:	4915      	ldr	r1, [pc, #84]	; (14654 <sys_heap_aligned_alloc+0x118>)
   145fe:	4816      	ldr	r0, [pc, #88]	; (14658 <sys_heap_aligned_alloc+0x11c>)
   14600:	f021 fe48 	bl	36294 <assert_print>
   14604:	4815      	ldr	r0, [pc, #84]	; (1465c <sys_heap_aligned_alloc+0x120>)
   14606:	f021 fe45 	bl	36294 <assert_print>
   1460a:	f44f 71a2 	mov.w	r1, #324	; 0x144
   1460e:	4620      	mov	r0, r4
   14610:	f021 fe39 	bl	36286 <assert_post_action>
		split_chunks(h, c0, c);
   14614:	4602      	mov	r2, r0
   14616:	4639      	mov	r1, r7
   14618:	4630      	mov	r0, r6
   1461a:	f021 fa5a 	bl	35ad2 <split_chunks>
		free_list_add(h, c0);
   1461e:	4639      	mov	r1, r7
   14620:	4630      	mov	r0, r6
   14622:	f021 fa9d 	bl	35b60 <free_list_add>
   14626:	e7cc      	b.n	145c2 <sys_heap_aligned_alloc+0x86>
		split_chunks(h, c, c_end);
   14628:	4622      	mov	r2, r4
   1462a:	4629      	mov	r1, r5
   1462c:	4630      	mov	r0, r6
   1462e:	f021 fa50 	bl	35ad2 <split_chunks>
		free_list_add(h, c_end);
   14632:	4621      	mov	r1, r4
   14634:	4630      	mov	r0, r6
   14636:	f021 fa93 	bl	35b60 <free_list_add>
   1463a:	e7ca      	b.n	145d2 <sys_heap_aligned_alloc+0x96>
		return NULL;
   1463c:	f04f 0800 	mov.w	r8, #0
   14640:	e7cc      	b.n	145dc <sys_heap_aligned_alloc+0xa0>
   14642:	f04f 0800 	mov.w	r8, #0
   14646:	e7c9      	b.n	145dc <sys_heap_aligned_alloc+0xa0>
		return NULL;
   14648:	f04f 0800 	mov.w	r8, #0
   1464c:	e7c6      	b.n	145dc <sys_heap_aligned_alloc+0xa0>
   1464e:	bf00      	nop
   14650:	00040858 	.word	0x00040858
   14654:	0004092c 	.word	0x0004092c
   14658:	0003f72c 	.word	0x0003f72c
   1465c:	00040948 	.word	0x00040948

00014660 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   14660:	b570      	push	{r4, r5, r6, lr}
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   14662:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   14666:	d21f      	bcs.n	146a8 <sys_heap_init+0x48>
   14668:	4603      	mov	r3, r0
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   1466a:	2a04      	cmp	r2, #4
   1466c:	d92c      	bls.n	146c8 <sys_heap_init+0x68>
	bytes -= heap_footer_bytes(bytes);
   1466e:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   14670:	1dc8      	adds	r0, r1, #7
   14672:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   14676:	440a      	add	r2, r1
   14678:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1467c:	1a12      	subs	r2, r2, r0
   1467e:	08d5      	lsrs	r5, r2, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   14680:	2a17      	cmp	r2, #23
   14682:	d931      	bls.n	146e8 <sys_heap_init+0x88>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   14684:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   14686:	6085      	str	r5, [r0, #8]
	h->avail_buckets = 0;
   14688:	2300      	movs	r3, #0
   1468a:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   1468c:	fab5 f185 	clz	r1, r5
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   14690:	f1c1 0e20 	rsb	lr, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   14694:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   14698:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1469a:	1dce      	adds	r6, r1, #7
   1469c:	08f1      	lsrs	r1, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   1469e:	1c4b      	adds	r3, r1, #1
   146a0:	42ab      	cmp	r3, r5
   146a2:	d831      	bhi.n	14708 <sys_heap_init+0xa8>

	for (int i = 0; i < nb_buckets; i++) {
   146a4:	2300      	movs	r3, #0
   146a6:	e045      	b.n	14734 <sys_heap_init+0xd4>
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   146a8:	4c34      	ldr	r4, [pc, #208]	; (1477c <sys_heap_init+0x11c>)
   146aa:	f240 13eb 	movw	r3, #491	; 0x1eb
   146ae:	4622      	mov	r2, r4
   146b0:	4933      	ldr	r1, [pc, #204]	; (14780 <sys_heap_init+0x120>)
   146b2:	4834      	ldr	r0, [pc, #208]	; (14784 <sys_heap_init+0x124>)
   146b4:	f021 fdee 	bl	36294 <assert_print>
   146b8:	4833      	ldr	r0, [pc, #204]	; (14788 <sys_heap_init+0x128>)
   146ba:	f021 fdeb 	bl	36294 <assert_print>
   146be:	f240 11eb 	movw	r1, #491	; 0x1eb
   146c2:	4620      	mov	r0, r4
   146c4:	f021 fddf 	bl	36286 <assert_post_action>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   146c8:	4c2c      	ldr	r4, [pc, #176]	; (1477c <sys_heap_init+0x11c>)
   146ca:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   146ce:	4622      	mov	r2, r4
   146d0:	492e      	ldr	r1, [pc, #184]	; (1478c <sys_heap_init+0x12c>)
   146d2:	482c      	ldr	r0, [pc, #176]	; (14784 <sys_heap_init+0x124>)
   146d4:	f021 fdde 	bl	36294 <assert_print>
   146d8:	482d      	ldr	r0, [pc, #180]	; (14790 <sys_heap_init+0x130>)
   146da:	f021 fddb 	bl	36294 <assert_print>
   146de:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   146e2:	4620      	mov	r0, r4
   146e4:	f021 fdcf 	bl	36286 <assert_post_action>
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   146e8:	4c24      	ldr	r4, [pc, #144]	; (1477c <sys_heap_init+0x11c>)
   146ea:	f240 13fb 	movw	r3, #507	; 0x1fb
   146ee:	4622      	mov	r2, r4
   146f0:	4928      	ldr	r1, [pc, #160]	; (14794 <sys_heap_init+0x134>)
   146f2:	4824      	ldr	r0, [pc, #144]	; (14784 <sys_heap_init+0x124>)
   146f4:	f021 fdce 	bl	36294 <assert_print>
   146f8:	4825      	ldr	r0, [pc, #148]	; (14790 <sys_heap_init+0x130>)
   146fa:	f021 fdcb 	bl	36294 <assert_print>
   146fe:	f240 11fb 	movw	r1, #507	; 0x1fb
   14702:	4620      	mov	r0, r4
   14704:	f021 fdbf 	bl	36286 <assert_post_action>
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   14708:	4c1c      	ldr	r4, [pc, #112]	; (1477c <sys_heap_init+0x11c>)
   1470a:	f44f 7303 	mov.w	r3, #524	; 0x20c
   1470e:	4622      	mov	r2, r4
   14710:	4921      	ldr	r1, [pc, #132]	; (14798 <sys_heap_init+0x138>)
   14712:	481c      	ldr	r0, [pc, #112]	; (14784 <sys_heap_init+0x124>)
   14714:	f021 fdbe 	bl	36294 <assert_print>
   14718:	481d      	ldr	r0, [pc, #116]	; (14790 <sys_heap_init+0x130>)
   1471a:	f021 fdbb 	bl	36294 <assert_print>
   1471e:	f44f 7103 	mov.w	r1, #524	; 0x20c
   14722:	4620      	mov	r0, r4
   14724:	f021 fdaf 	bl	36286 <assert_post_action>
		h->buckets[i].next = 0;
   14728:	f103 0c04 	add.w	ip, r3, #4
   1472c:	2400      	movs	r4, #0
   1472e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   14732:	3301      	adds	r3, #1
   14734:	4573      	cmp	r3, lr
   14736:	dbf7      	blt.n	14728 <sys_heap_init+0xc8>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   14738:	004c      	lsls	r4, r1, #1
		((uint16_t *)cmem)[f] = val;
   1473a:	b2a4      	uxth	r4, r4
   1473c:	8044      	strh	r4, [r0, #2]
   1473e:	f04f 0c00 	mov.w	ip, #0
   14742:	f8a0 c000 	strh.w	ip, [r0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   14746:	f044 0401 	orr.w	r4, r4, #1
   1474a:	8044      	strh	r4, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1474c:	1a6b      	subs	r3, r5, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1474e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
	void *cmem = &buf[c];
   14752:	f026 0407 	bic.w	r4, r6, #7
		((uint16_t *)cmem)[f] = val;
   14756:	1ca5      	adds	r5, r4, #2
   14758:	f820 e005 	strh.w	lr, [r0, r5]
   1475c:	5301      	strh	r1, [r0, r4]
	void *cmem = &buf[c];
   1475e:	f022 0407 	bic.w	r4, r2, #7
		((uint16_t *)cmem)[f] = val;
   14762:	1c95      	adds	r5, r2, #2
   14764:	f820 c005 	strh.w	ip, [r0, r5]
   14768:	4402      	add	r2, r0
   1476a:	5303      	strh	r3, [r0, r4]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1476c:	8853      	ldrh	r3, [r2, #2]
   1476e:	f043 0301 	orr.w	r3, r3, #1
   14772:	8053      	strh	r3, [r2, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   14774:	f021 f9f4 	bl	35b60 <free_list_add>
}
   14778:	bd70      	pop	{r4, r5, r6, pc}
   1477a:	bf00      	nop
   1477c:	00040858 	.word	0x00040858
   14780:	00040968 	.word	0x00040968
   14784:	0003f72c 	.word	0x0003f72c
   14788:	00040980 	.word	0x00040980
   1478c:	00040998 	.word	0x00040998
   14790:	000409bc 	.word	0x000409bc
   14794:	000409d8 	.word	0x000409d8
   14798:	00040a04 	.word	0x00040a04

0001479c <process_complete>:
 * from the manager to the output list for notification.
 */
static void process_complete(struct onoff_manager *mgr,
			     sys_slist_t *clients,
			     int res)
{
   1479c:	b510      	push	{r4, lr}
   1479e:	4604      	mov	r4, r0
   147a0:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   147a2:	8b83      	ldrh	r3, [r0, #28]

	if (res < 0) {
   147a4:	2a00      	cmp	r2, #0
   147a6:	db12      	blt.n	147ce <process_complete+0x32>
   147a8:	f003 0307 	and.w	r3, r3, #7
		/* Enter ERROR state and notify all clients. */
		*clients = mgr->clients;
		sys_slist_init(&mgr->clients);
		set_state(mgr, ONOFF_STATE_ERROR);
	} else if ((state == ONOFF_STATE_TO_ON)
		   || (state == ONOFF_STATE_RESETTING)) {
   147ac:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   147ae:	2a01      	cmp	r2, #1
   147b0:	d919      	bls.n	147e6 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_OFF);
		}
		if (process_recheck(mgr) != EVT_NOP) {
			mgr->flags |= ONOFF_FLAG_RECHECK;
		}
	} else if (state == ONOFF_STATE_TO_OFF) {
   147b2:	2b04      	cmp	r3, #4
   147b4:	d150      	bne.n	14858 <process_complete+0xbc>
		/* Any active clients are requests waiting for this
		 * transition to complete.  Queue a RECHECK event to
		 * ensure we don't miss them if we don't unlock to
		 * tell anybody about the completion.
		 */
		set_state(mgr, ONOFF_STATE_OFF);
   147b6:	2100      	movs	r1, #0
   147b8:	f021 fa7c 	bl	35cb4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   147bc:	4620      	mov	r0, r4
   147be:	f021 faa3 	bl	35d08 <process_recheck>
   147c2:	b178      	cbz	r0, 147e4 <process_complete+0x48>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   147c4:	8ba3      	ldrh	r3, [r4, #28]
   147c6:	f043 0320 	orr.w	r3, r3, #32
   147ca:	83a3      	strh	r3, [r4, #28]
   147cc:	e00a      	b.n	147e4 <process_complete+0x48>
		*clients = mgr->clients;
   147ce:	e9d0 0100 	ldrd	r0, r1, [r0]
   147d2:	e88c 0003 	stmia.w	ip, {r0, r1}
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   147d6:	2300      	movs	r3, #0
   147d8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   147da:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   147dc:	2101      	movs	r1, #1
   147de:	4620      	mov	r0, r4
   147e0:	f021 fa68 	bl	35cb4 <set_state>
		}
	} else {
		__ASSERT_NO_MSG(false);
	}
}
   147e4:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
   147e6:	e9d0 0100 	ldrd	r0, r1, [r0]
   147ea:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
   147ee:	2200      	movs	r2, #0
   147f0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   147f2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   147f4:	2b06      	cmp	r3, #6
   147f6:	d00f      	beq.n	14818 <process_complete+0x7c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   147f8:	2b05      	cmp	r3, #5
   147fa:	d120      	bne.n	1483e <process_complete+0xa2>
			set_state(mgr, ONOFF_STATE_OFF);
   147fc:	2100      	movs	r1, #0
   147fe:	4620      	mov	r0, r4
   14800:	f021 fa58 	bl	35cb4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   14804:	4620      	mov	r0, r4
   14806:	f021 fa7f 	bl	35d08 <process_recheck>
   1480a:	2800      	cmp	r0, #0
   1480c:	d0ea      	beq.n	147e4 <process_complete+0x48>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1480e:	8ba3      	ldrh	r3, [r4, #28]
   14810:	f043 0320 	orr.w	r3, r3, #32
   14814:	83a3      	strh	r3, [r4, #28]
   14816:	e7e5      	b.n	147e4 <process_complete+0x48>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   14818:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1481c:	b153      	cbz	r3, 14834 <process_complete+0x98>
				mgr->refs += 1U;
   1481e:	8be2      	ldrh	r2, [r4, #30]
   14820:	3201      	adds	r2, #1
   14822:	83e2      	strh	r2, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14824:	461a      	mov	r2, r3
	return node->next;
   14826:	681b      	ldr	r3, [r3, #0]
   14828:	2b00      	cmp	r3, #0
   1482a:	d0f7      	beq.n	1481c <process_complete+0x80>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1482c:	2a00      	cmp	r2, #0
   1482e:	d1f5      	bne.n	1481c <process_complete+0x80>
   14830:	4613      	mov	r3, r2
   14832:	e7f3      	b.n	1481c <process_complete+0x80>
			set_state(mgr, ONOFF_STATE_ON);
   14834:	2102      	movs	r1, #2
   14836:	4620      	mov	r0, r4
   14838:	f021 fa3c 	bl	35cb4 <set_state>
   1483c:	e7e2      	b.n	14804 <process_complete+0x68>
			__ASSERT_NO_MSG(state == ONOFF_STATE_RESETTING);
   1483e:	4c0d      	ldr	r4, [pc, #52]	; (14874 <process_complete+0xd8>)
   14840:	f240 1309 	movw	r3, #265	; 0x109
   14844:	4622      	mov	r2, r4
   14846:	490c      	ldr	r1, [pc, #48]	; (14878 <process_complete+0xdc>)
   14848:	480c      	ldr	r0, [pc, #48]	; (1487c <process_complete+0xe0>)
   1484a:	f021 fd23 	bl	36294 <assert_print>
   1484e:	f240 1109 	movw	r1, #265	; 0x109
   14852:	4620      	mov	r0, r4
   14854:	f021 fd17 	bl	36286 <assert_post_action>
		__ASSERT_NO_MSG(false);
   14858:	4c06      	ldr	r4, [pc, #24]	; (14874 <process_complete+0xd8>)
   1485a:	f240 131b 	movw	r3, #283	; 0x11b
   1485e:	4622      	mov	r2, r4
   14860:	4907      	ldr	r1, [pc, #28]	; (14880 <process_complete+0xe4>)
   14862:	4806      	ldr	r0, [pc, #24]	; (1487c <process_complete+0xe0>)
   14864:	f021 fd16 	bl	36294 <assert_print>
   14868:	f240 111b 	movw	r1, #283	; 0x11b
   1486c:	4620      	mov	r0, r4
   1486e:	f021 fd0a 	bl	36286 <assert_post_action>
   14872:	bf00      	nop
   14874:	00040a30 	.word	0x00040a30
   14878:	00040a54 	.word	0x00040a54
   1487c:	0003f72c 	.word	0x0003f72c
   14880:	0003f964 	.word	0x0003f964

00014884 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   14884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14888:	b082      	sub	sp, #8
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1488a:	8b83      	ldrh	r3, [r0, #28]
	int res = 0;
	bool processing = ((mgr->flags & ONOFF_FLAG_PROCESSING) != 0);

	__ASSERT_NO_MSG(evt != EVT_NOP);
   1488c:	b1e1      	cbz	r1, 148c8 <process_event+0x44>
   1488e:	4604      	mov	r4, r0
   14890:	4615      	mov	r5, r2
   14892:	f003 0607 	and.w	r6, r3, #7
   14896:	f003 0208 	and.w	r2, r3, #8
   1489a:	4608      	mov	r0, r1

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1489c:	b392      	cbz	r2, 14904 <process_event+0x80>
		if (evt == EVT_COMPLETE) {
   1489e:	2901      	cmp	r1, #1
   148a0:	d01f      	beq.n	148e2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   148a2:	2902      	cmp	r1, #2
   148a4:	d121      	bne.n	148ea <process_event+0x66>

			mgr->flags |= ONOFF_FLAG_RECHECK;
   148a6:	f043 0320 	orr.w	r3, r3, #32
   148aa:	83a3      	strh	r3, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   148ac:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   148ae:	4620      	mov	r0, r4
   148b0:	f01c fdb4 	bl	3141c <z_spin_unlock_valid>
   148b4:	2800      	cmp	r0, #0
   148b6:	f000 819d 	beq.w	14bf4 <process_event+0x370>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   148ba:	f385 8811 	msr	BASEPRI, r5
   148be:	f3bf 8f6f 	isb	sy
}
   148c2:	b002      	add	sp, #8
   148c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT_NO_MSG(evt != EVT_NOP);
   148c8:	4cb9      	ldr	r4, [pc, #740]	; (14bb0 <process_event+0x32c>)
   148ca:	f240 1333 	movw	r3, #307	; 0x133
   148ce:	4622      	mov	r2, r4
   148d0:	49b8      	ldr	r1, [pc, #736]	; (14bb4 <process_event+0x330>)
   148d2:	48b9      	ldr	r0, [pc, #740]	; (14bb8 <process_event+0x334>)
   148d4:	f021 fcde 	bl	36294 <assert_print>
   148d8:	f240 1133 	movw	r1, #307	; 0x133
   148dc:	4620      	mov	r0, r4
   148de:	f021 fcd2 	bl	36286 <assert_post_action>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   148e2:	f043 0310 	orr.w	r3, r3, #16
   148e6:	83a3      	strh	r3, [r4, #28]
   148e8:	e7e0      	b.n	148ac <process_event+0x28>
			__ASSERT_NO_MSG(evt == EVT_RECHECK);
   148ea:	4cb1      	ldr	r4, [pc, #708]	; (14bb0 <process_event+0x32c>)
   148ec:	f44f 739e 	mov.w	r3, #316	; 0x13c
   148f0:	4622      	mov	r2, r4
   148f2:	49b2      	ldr	r1, [pc, #712]	; (14bbc <process_event+0x338>)
   148f4:	48b0      	ldr	r0, [pc, #704]	; (14bb8 <process_event+0x334>)
   148f6:	f021 fccd 	bl	36294 <assert_print>
   148fa:	f44f 719e 	mov.w	r1, #316	; 0x13c
   148fe:	4620      	mov	r0, r4
   14900:	f021 fcc1 	bl	36286 <assert_post_action>
	list->head = NULL;
   14904:	2300      	movs	r3, #0
   14906:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   14908:	9301      	str	r3, [sp, #4]
}
   1490a:	e058      	b.n	149be <process_event+0x13a>
			evt = process_recheck(mgr);
   1490c:	4620      	mov	r0, r4
   1490e:	f021 f9fb 	bl	35d08 <process_recheck>
   14912:	e056      	b.n	149c2 <process_event+0x13e>
			res = mgr->last_res;
   14914:	f8d4 9018 	ldr.w	r9, [r4, #24]
			process_complete(mgr, &clients, res);
   14918:	464a      	mov	r2, r9
   1491a:	4669      	mov	r1, sp
   1491c:	4620      	mov	r0, r4
   1491e:	f7ff ff3d 	bl	1479c <process_complete>
		onoff_transition_fn transit = NULL;
   14922:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14924:	8ba3      	ldrh	r3, [r4, #28]
   14926:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1492a:	45b0      	cmp	r8, r6
   1492c:	f000 8109 	beq.w	14b42 <process_event+0x2be>
	return list->head;
   14930:	68a2      	ldr	r2, [r4, #8]
   14932:	2a00      	cmp	r2, #0
   14934:	f000 8105 	beq.w	14b42 <process_event+0x2be>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14938:	2601      	movs	r6, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1493a:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   1493e:	83a3      	strh	r3, [r4, #28]
			k_spin_unlock(&mgr->lock, key);
   14940:	f104 0a14 	add.w	sl, r4, #20
   14944:	4650      	mov	r0, sl
   14946:	f01c fd69 	bl	3141c <z_spin_unlock_valid>
   1494a:	2800      	cmp	r0, #0
   1494c:	f000 8102 	beq.w	14b54 <process_event+0x2d0>
   14950:	f385 8811 	msr	BASEPRI, r5
   14954:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   14958:	2e00      	cmp	r6, #0
   1495a:	f040 810a 	bne.w	14b72 <process_event+0x2ee>
   1495e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   14960:	b12b      	cbz	r3, 1496e <process_event+0xea>
				notify_all(mgr, &clients, state, res);
   14962:	464b      	mov	r3, r9
   14964:	4642      	mov	r2, r8
   14966:	4669      	mov	r1, sp
   14968:	4620      	mov	r0, r4
   1496a:	f021 fa0e 	bl	35d8a <notify_all>
			if (transit != NULL) {
   1496e:	b117      	cbz	r7, 14976 <process_event+0xf2>
				transit(mgr, transition_complete);
   14970:	4993      	ldr	r1, [pc, #588]	; (14bc0 <process_event+0x33c>)
   14972:	4620      	mov	r0, r4
   14974:	47b8      	blx	r7
	__asm__ volatile(
   14976:	f04f 0320 	mov.w	r3, #32
   1497a:	f3ef 8511 	mrs	r5, BASEPRI
   1497e:	f383 8812 	msr	BASEPRI_MAX, r3
   14982:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14986:	4650      	mov	r0, sl
   14988:	f01c fd38 	bl	313fc <z_spin_lock_valid>
   1498c:	2800      	cmp	r0, #0
   1498e:	f000 80f6 	beq.w	14b7e <process_event+0x2fa>
	z_spin_lock_set_owner(l);
   14992:	4650      	mov	r0, sl
   14994:	f01c fd52 	bl	3143c <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   14998:	8ba3      	ldrh	r3, [r4, #28]
   1499a:	f023 0308 	bic.w	r3, r3, #8
   1499e:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   149a0:	8ba3      	ldrh	r3, [r4, #28]
   149a2:	f013 0f10 	tst.w	r3, #16
   149a6:	f000 80f9 	beq.w	14b9c <process_event+0x318>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   149aa:	f023 0310 	bic.w	r3, r3, #16
   149ae:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   149b0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   149b2:	8ba6      	ldrh	r6, [r4, #28]
   149b4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   149b8:	2800      	cmp	r0, #0
   149ba:	f43f af77 	beq.w	148ac <process_event+0x28>
		if (evt == EVT_RECHECK) {
   149be:	2802      	cmp	r0, #2
   149c0:	d0a4      	beq.n	1490c <process_event+0x88>
		if (evt == EVT_NOP) {
   149c2:	2800      	cmp	r0, #0
   149c4:	f43f af72 	beq.w	148ac <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   149c8:	3801      	subs	r0, #1
   149ca:	2804      	cmp	r0, #4
   149cc:	f200 80ac 	bhi.w	14b28 <process_event+0x2a4>
   149d0:	a301      	add	r3, pc, #4	; (adr r3, 149d8 <process_event+0x154>)
   149d2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   149d6:	bf00      	nop
   149d8:	00014915 	.word	0x00014915
   149dc:	00014b29 	.word	0x00014b29
   149e0:	000149ed 	.word	0x000149ed
   149e4:	00014a55 	.word	0x00014a55
   149e8:	00014abf 	.word	0x00014abf
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   149ec:	b95e      	cbnz	r6, 14a06 <process_event+0x182>
   149ee:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   149f0:	b1b3      	cbz	r3, 14a20 <process_event+0x19c>
			transit = mgr->transitions->start;
   149f2:	6923      	ldr	r3, [r4, #16]
   149f4:	681f      	ldr	r7, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   149f6:	b307      	cbz	r7, 14a3a <process_event+0x1b6>
			set_state(mgr, ONOFF_STATE_TO_ON);
   149f8:	2106      	movs	r1, #6
   149fa:	4620      	mov	r0, r4
   149fc:	f021 f95a 	bl	35cb4 <set_state>
		res = 0;
   14a00:	f04f 0900 	mov.w	r9, #0
   14a04:	e78e      	b.n	14924 <process_event+0xa0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   14a06:	4c6a      	ldr	r4, [pc, #424]	; (14bb0 <process_event+0x32c>)
   14a08:	f44f 73ab 	mov.w	r3, #342	; 0x156
   14a0c:	4622      	mov	r2, r4
   14a0e:	496d      	ldr	r1, [pc, #436]	; (14bc4 <process_event+0x340>)
   14a10:	4869      	ldr	r0, [pc, #420]	; (14bb8 <process_event+0x334>)
   14a12:	f021 fc3f 	bl	36294 <assert_print>
   14a16:	f44f 71ab 	mov.w	r1, #342	; 0x156
   14a1a:	4620      	mov	r0, r4
   14a1c:	f021 fc33 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   14a20:	4c63      	ldr	r4, [pc, #396]	; (14bb0 <process_event+0x32c>)
   14a22:	f240 1357 	movw	r3, #343	; 0x157
   14a26:	4622      	mov	r2, r4
   14a28:	4967      	ldr	r1, [pc, #412]	; (14bc8 <process_event+0x344>)
   14a2a:	4863      	ldr	r0, [pc, #396]	; (14bb8 <process_event+0x334>)
   14a2c:	f021 fc32 	bl	36294 <assert_print>
   14a30:	f240 1157 	movw	r1, #343	; 0x157
   14a34:	4620      	mov	r0, r4
   14a36:	f021 fc26 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   14a3a:	4c5d      	ldr	r4, [pc, #372]	; (14bb0 <process_event+0x32c>)
   14a3c:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   14a40:	4622      	mov	r2, r4
   14a42:	4962      	ldr	r1, [pc, #392]	; (14bcc <process_event+0x348>)
   14a44:	485c      	ldr	r0, [pc, #368]	; (14bb8 <process_event+0x334>)
   14a46:	f021 fc25 	bl	36294 <assert_print>
   14a4a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   14a4e:	4620      	mov	r0, r4
   14a50:	f021 fc19 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   14a54:	2e02      	cmp	r6, #2
   14a56:	d10b      	bne.n	14a70 <process_event+0x1ec>
			__ASSERT_NO_MSG(mgr->refs == 0);
   14a58:	8be3      	ldrh	r3, [r4, #30]
   14a5a:	b9b3      	cbnz	r3, 14a8a <process_event+0x206>
			transit = mgr->transitions->stop;
   14a5c:	6923      	ldr	r3, [r4, #16]
   14a5e:	685f      	ldr	r7, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   14a60:	b307      	cbz	r7, 14aa4 <process_event+0x220>
			set_state(mgr, ONOFF_STATE_TO_OFF);
   14a62:	2104      	movs	r1, #4
   14a64:	4620      	mov	r0, r4
   14a66:	f021 f925 	bl	35cb4 <set_state>
		res = 0;
   14a6a:	f04f 0900 	mov.w	r9, #0
   14a6e:	e759      	b.n	14924 <process_event+0xa0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   14a70:	4c4f      	ldr	r4, [pc, #316]	; (14bb0 <process_event+0x32c>)
   14a72:	f240 135d 	movw	r3, #349	; 0x15d
   14a76:	4622      	mov	r2, r4
   14a78:	4955      	ldr	r1, [pc, #340]	; (14bd0 <process_event+0x34c>)
   14a7a:	484f      	ldr	r0, [pc, #316]	; (14bb8 <process_event+0x334>)
   14a7c:	f021 fc0a 	bl	36294 <assert_print>
   14a80:	f240 115d 	movw	r1, #349	; 0x15d
   14a84:	4620      	mov	r0, r4
   14a86:	f021 fbfe 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   14a8a:	4c49      	ldr	r4, [pc, #292]	; (14bb0 <process_event+0x32c>)
   14a8c:	f44f 73af 	mov.w	r3, #350	; 0x15e
   14a90:	4622      	mov	r2, r4
   14a92:	4950      	ldr	r1, [pc, #320]	; (14bd4 <process_event+0x350>)
   14a94:	4848      	ldr	r0, [pc, #288]	; (14bb8 <process_event+0x334>)
   14a96:	f021 fbfd 	bl	36294 <assert_print>
   14a9a:	f44f 71af 	mov.w	r1, #350	; 0x15e
   14a9e:	4620      	mov	r0, r4
   14aa0:	f021 fbf1 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   14aa4:	4c42      	ldr	r4, [pc, #264]	; (14bb0 <process_event+0x32c>)
   14aa6:	f240 1361 	movw	r3, #353	; 0x161
   14aaa:	4622      	mov	r2, r4
   14aac:	4947      	ldr	r1, [pc, #284]	; (14bcc <process_event+0x348>)
   14aae:	4842      	ldr	r0, [pc, #264]	; (14bb8 <process_event+0x334>)
   14ab0:	f021 fbf0 	bl	36294 <assert_print>
   14ab4:	f240 1161 	movw	r1, #353	; 0x161
   14ab8:	4620      	mov	r0, r4
   14aba:	f021 fbe4 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   14abe:	2e01      	cmp	r6, #1
   14ac0:	d10b      	bne.n	14ada <process_event+0x256>
   14ac2:	6823      	ldr	r3, [r4, #0]
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   14ac4:	b1b3      	cbz	r3, 14af4 <process_event+0x270>
			transit = mgr->transitions->reset;
   14ac6:	6923      	ldr	r3, [r4, #16]
   14ac8:	689f      	ldr	r7, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   14aca:	b307      	cbz	r7, 14b0e <process_event+0x28a>
			set_state(mgr, ONOFF_STATE_RESETTING);
   14acc:	2105      	movs	r1, #5
   14ace:	4620      	mov	r0, r4
   14ad0:	f021 f8f0 	bl	35cb4 <set_state>
		res = 0;
   14ad4:	f04f 0900 	mov.w	r9, #0
   14ad8:	e724      	b.n	14924 <process_event+0xa0>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   14ada:	4c35      	ldr	r4, [pc, #212]	; (14bb0 <process_event+0x32c>)
   14adc:	f44f 73b2 	mov.w	r3, #356	; 0x164
   14ae0:	4622      	mov	r2, r4
   14ae2:	493d      	ldr	r1, [pc, #244]	; (14bd8 <process_event+0x354>)
   14ae4:	4834      	ldr	r0, [pc, #208]	; (14bb8 <process_event+0x334>)
   14ae6:	f021 fbd5 	bl	36294 <assert_print>
   14aea:	f44f 71b2 	mov.w	r1, #356	; 0x164
   14aee:	4620      	mov	r0, r4
   14af0:	f021 fbc9 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   14af4:	4c2e      	ldr	r4, [pc, #184]	; (14bb0 <process_event+0x32c>)
   14af6:	f240 1365 	movw	r3, #357	; 0x165
   14afa:	4622      	mov	r2, r4
   14afc:	4932      	ldr	r1, [pc, #200]	; (14bc8 <process_event+0x344>)
   14afe:	482e      	ldr	r0, [pc, #184]	; (14bb8 <process_event+0x334>)
   14b00:	f021 fbc8 	bl	36294 <assert_print>
   14b04:	f240 1165 	movw	r1, #357	; 0x165
   14b08:	4620      	mov	r0, r4
   14b0a:	f021 fbbc 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(transit != NULL);
   14b0e:	4c28      	ldr	r4, [pc, #160]	; (14bb0 <process_event+0x32c>)
   14b10:	f44f 73b4 	mov.w	r3, #360	; 0x168
   14b14:	4622      	mov	r2, r4
   14b16:	492d      	ldr	r1, [pc, #180]	; (14bcc <process_event+0x348>)
   14b18:	4827      	ldr	r0, [pc, #156]	; (14bb8 <process_event+0x334>)
   14b1a:	f021 fbbb 	bl	36294 <assert_print>
   14b1e:	f44f 71b4 	mov.w	r1, #360	; 0x168
   14b22:	4620      	mov	r0, r4
   14b24:	f021 fbaf 	bl	36286 <assert_post_action>
			__ASSERT_NO_MSG(false);
   14b28:	4c21      	ldr	r4, [pc, #132]	; (14bb0 <process_event+0x32c>)
   14b2a:	f240 136b 	movw	r3, #363	; 0x16b
   14b2e:	4622      	mov	r2, r4
   14b30:	492a      	ldr	r1, [pc, #168]	; (14bdc <process_event+0x358>)
   14b32:	4821      	ldr	r0, [pc, #132]	; (14bb8 <process_event+0x334>)
   14b34:	f021 fbae 	bl	36294 <assert_print>
   14b38:	f240 116b 	movw	r1, #363	; 0x16b
   14b3c:	4620      	mov	r0, r4
   14b3e:	f021 fba2 	bl	36286 <assert_post_action>
   14b42:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   14b44:	b10a      	cbz	r2, 14b4a <process_event+0x2c6>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14b46:	2600      	movs	r6, #0
   14b48:	e6f7      	b.n	1493a <process_event+0xb6>
		    || (transit != NULL)) {
   14b4a:	2f00      	cmp	r7, #0
   14b4c:	f43f af28 	beq.w	149a0 <process_event+0x11c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14b50:	2600      	movs	r6, #0
   14b52:	e6f2      	b.n	1493a <process_event+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14b54:	4c22      	ldr	r4, [pc, #136]	; (14be0 <process_event+0x35c>)
   14b56:	23c2      	movs	r3, #194	; 0xc2
   14b58:	4622      	mov	r2, r4
   14b5a:	4922      	ldr	r1, [pc, #136]	; (14be4 <process_event+0x360>)
   14b5c:	4816      	ldr	r0, [pc, #88]	; (14bb8 <process_event+0x334>)
   14b5e:	f021 fb99 	bl	36294 <assert_print>
   14b62:	4651      	mov	r1, sl
   14b64:	4820      	ldr	r0, [pc, #128]	; (14be8 <process_event+0x364>)
   14b66:	f021 fb95 	bl	36294 <assert_print>
   14b6a:	21c2      	movs	r1, #194	; 0xc2
   14b6c:	4620      	mov	r0, r4
   14b6e:	f021 fb8a 	bl	36286 <assert_post_action>
				notify_monitors(mgr, state, res);
   14b72:	464a      	mov	r2, r9
   14b74:	4641      	mov	r1, r8
   14b76:	4620      	mov	r0, r4
   14b78:	f021 f8a4 	bl	35cc4 <notify_monitors>
   14b7c:	e6ef      	b.n	1495e <process_event+0xda>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14b7e:	4c18      	ldr	r4, [pc, #96]	; (14be0 <process_event+0x35c>)
   14b80:	2394      	movs	r3, #148	; 0x94
   14b82:	4622      	mov	r2, r4
   14b84:	4919      	ldr	r1, [pc, #100]	; (14bec <process_event+0x368>)
   14b86:	480c      	ldr	r0, [pc, #48]	; (14bb8 <process_event+0x334>)
   14b88:	f021 fb84 	bl	36294 <assert_print>
   14b8c:	4651      	mov	r1, sl
   14b8e:	4818      	ldr	r0, [pc, #96]	; (14bf0 <process_event+0x36c>)
   14b90:	f021 fb80 	bl	36294 <assert_print>
   14b94:	2194      	movs	r1, #148	; 0x94
   14b96:	4620      	mov	r0, r4
   14b98:	f021 fb75 	bl	36286 <assert_post_action>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   14b9c:	f013 0f20 	tst.w	r3, #32
   14ba0:	d004      	beq.n	14bac <process_event+0x328>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   14ba2:	f023 0320 	bic.w	r3, r3, #32
   14ba6:	83a3      	strh	r3, [r4, #28]
			evt = EVT_RECHECK;
   14ba8:	2002      	movs	r0, #2
   14baa:	e702      	b.n	149b2 <process_event+0x12e>
		evt = EVT_NOP;
   14bac:	2000      	movs	r0, #0
   14bae:	e700      	b.n	149b2 <process_event+0x12e>
   14bb0:	00040a30 	.word	0x00040a30
   14bb4:	00040a7c 	.word	0x00040a7c
   14bb8:	0003f72c 	.word	0x0003f72c
   14bbc:	00040a8c 	.word	0x00040a8c
   14bc0:	00014c25 	.word	0x00014c25
   14bc4:	00040aa0 	.word	0x00040aa0
   14bc8:	00040aac 	.word	0x00040aac
   14bcc:	00040ad0 	.word	0x00040ad0
   14bd0:	00040ae8 	.word	0x00040ae8
   14bd4:	00040b00 	.word	0x00040b00
   14bd8:	00040b10 	.word	0x00040b10
   14bdc:	0003f964 	.word	0x0003f964
   14be0:	00040b28 	.word	0x00040b28
   14be4:	00040b58 	.word	0x00040b58
   14be8:	00040b70 	.word	0x00040b70
   14bec:	00040b88 	.word	0x00040b88
   14bf0:	00040ba0 	.word	0x00040ba0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14bf4:	4d07      	ldr	r5, [pc, #28]	; (14c14 <process_event+0x390>)
   14bf6:	23c2      	movs	r3, #194	; 0xc2
   14bf8:	462a      	mov	r2, r5
   14bfa:	4907      	ldr	r1, [pc, #28]	; (14c18 <process_event+0x394>)
   14bfc:	4807      	ldr	r0, [pc, #28]	; (14c1c <process_event+0x398>)
   14bfe:	f021 fb49 	bl	36294 <assert_print>
   14c02:	4621      	mov	r1, r4
   14c04:	4806      	ldr	r0, [pc, #24]	; (14c20 <process_event+0x39c>)
   14c06:	f021 fb45 	bl	36294 <assert_print>
   14c0a:	21c2      	movs	r1, #194	; 0xc2
   14c0c:	4628      	mov	r0, r5
   14c0e:	f021 fb3a 	bl	36286 <assert_post_action>
   14c12:	bf00      	nop
   14c14:	00040b28 	.word	0x00040b28
   14c18:	00040b58 	.word	0x00040b58
   14c1c:	0003f72c 	.word	0x0003f72c
   14c20:	00040b70 	.word	0x00040b70

00014c24 <transition_complete>:
{
   14c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14c26:	4604      	mov	r4, r0
   14c28:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   14c2a:	f100 0614 	add.w	r6, r0, #20
   14c2e:	f04f 0320 	mov.w	r3, #32
   14c32:	f3ef 8711 	mrs	r7, BASEPRI
   14c36:	f383 8812 	msr	BASEPRI_MAX, r3
   14c3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14c3e:	4630      	mov	r0, r6
   14c40:	f01c fbdc 	bl	313fc <z_spin_lock_valid>
   14c44:	b148      	cbz	r0, 14c5a <transition_complete+0x36>
	z_spin_lock_set_owner(l);
   14c46:	4630      	mov	r0, r6
   14c48:	f01c fbf8 	bl	3143c <z_spin_lock_set_owner>
	mgr->last_res = res;
   14c4c:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   14c4e:	463a      	mov	r2, r7
   14c50:	2101      	movs	r1, #1
   14c52:	4620      	mov	r0, r4
   14c54:	f7ff fe16 	bl	14884 <process_event>
}
   14c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14c5a:	4c07      	ldr	r4, [pc, #28]	; (14c78 <transition_complete+0x54>)
   14c5c:	2394      	movs	r3, #148	; 0x94
   14c5e:	4622      	mov	r2, r4
   14c60:	4906      	ldr	r1, [pc, #24]	; (14c7c <transition_complete+0x58>)
   14c62:	4807      	ldr	r0, [pc, #28]	; (14c80 <transition_complete+0x5c>)
   14c64:	f021 fb16 	bl	36294 <assert_print>
   14c68:	4631      	mov	r1, r6
   14c6a:	4806      	ldr	r0, [pc, #24]	; (14c84 <transition_complete+0x60>)
   14c6c:	f021 fb12 	bl	36294 <assert_print>
   14c70:	2194      	movs	r1, #148	; 0x94
   14c72:	4620      	mov	r0, r4
   14c74:	f021 fb07 	bl	36286 <assert_post_action>
   14c78:	00040b28 	.word	0x00040b28
   14c7c:	00040b88 	.word	0x00040b88
   14c80:	0003f72c 	.word	0x0003f72c
   14c84:	00040ba0 	.word	0x00040ba0

00014c88 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   14c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c8c:	4604      	mov	r4, r0
   14c8e:	4688      	mov	r8, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   14c90:	f021 f853 	bl	35d3a <validate_args>

	if (rv < 0) {
   14c94:	1e06      	subs	r6, r0, #0
   14c96:	db48      	blt.n	14d2a <onoff_request+0xa2>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   14c98:	f104 0714 	add.w	r7, r4, #20
   14c9c:	f04f 0320 	mov.w	r3, #32
   14ca0:	f3ef 8a11 	mrs	sl, BASEPRI
   14ca4:	f383 8812 	msr	BASEPRI_MAX, r3
   14ca8:	f3bf 8f6f 	isb	sy
   14cac:	46d3      	mov	fp, sl
   14cae:	4638      	mov	r0, r7
   14cb0:	f01c fba4 	bl	313fc <z_spin_lock_valid>
   14cb4:	4681      	mov	r9, r0
   14cb6:	b1a8      	cbz	r0, 14ce4 <onoff_request+0x5c>
	z_spin_lock_set_owner(l);
   14cb8:	4638      	mov	r0, r7
   14cba:	f01c fbbf 	bl	3143c <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14cbe:	8ba5      	ldrh	r5, [r4, #28]
   14cc0:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   14cc4:	8be3      	ldrh	r3, [r4, #30]
   14cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14cca:	4293      	cmp	r3, r2
   14ccc:	d04b      	beq.n	14d66 <onoff_request+0xde>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   14cce:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   14cd0:	2d02      	cmp	r5, #2
   14cd2:	d016      	beq.n	14d02 <onoff_request+0x7a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   14cd4:	2d06      	cmp	r5, #6
   14cd6:	d839      	bhi.n	14d4c <onoff_request+0xc4>
   14cd8:	e8df f005 	tbb	[pc, r5]
   14cdc:	38384c31 	.word	0x38384c31
   14ce0:	2a31      	.short	0x2a31
   14ce2:	31          	.byte	0x31
   14ce3:	00          	.byte	0x00
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   14ce4:	4c3a      	ldr	r4, [pc, #232]	; (14dd0 <onoff_request+0x148>)
   14ce6:	2394      	movs	r3, #148	; 0x94
   14ce8:	4622      	mov	r2, r4
   14cea:	493a      	ldr	r1, [pc, #232]	; (14dd4 <onoff_request+0x14c>)
   14cec:	483a      	ldr	r0, [pc, #232]	; (14dd8 <onoff_request+0x150>)
   14cee:	f021 fad1 	bl	36294 <assert_print>
   14cf2:	4639      	mov	r1, r7
   14cf4:	4839      	ldr	r0, [pc, #228]	; (14ddc <onoff_request+0x154>)
   14cf6:	f021 facd 	bl	36294 <assert_print>
   14cfa:	2194      	movs	r1, #148	; 0x94
   14cfc:	4620      	mov	r0, r4
   14cfe:	f021 fac2 	bl	36286 <assert_post_action>
		mgr->refs += 1U;
   14d02:	3301      	adds	r3, #1
   14d04:	83e3      	strh	r3, [r4, #30]
	bool start = false;             /* trigger a start transition */
   14d06:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   14d08:	461a      	mov	r2, r3
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
   14d0a:	b142      	cbz	r2, 14d1e <onoff_request+0x96>
	parent->next = child;
   14d0c:	2200      	movs	r2, #0
   14d0e:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   14d12:	6862      	ldr	r2, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   14d14:	b3aa      	cbz	r2, 14d82 <onoff_request+0xfa>
	parent->next = child;
   14d16:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   14d1a:	f8c4 8004 	str.w	r8, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   14d1e:	b3ab      	cbz	r3, 14d8c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   14d20:	4652      	mov	r2, sl
   14d22:	2102      	movs	r1, #2
   14d24:	4620      	mov	r0, r4
   14d26:	f7ff fdad 	bl	14884 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   14d2a:	4630      	mov	r0, r6
   14d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (state == ONOFF_STATE_ON) {
   14d30:	f06f 0685 	mvn.w	r6, #133	; 0x85
   14d34:	f04f 0900 	mov.w	r9, #0
   14d38:	464b      	mov	r3, r9
   14d3a:	464a      	mov	r2, r9
   14d3c:	e7e5      	b.n	14d0a <onoff_request+0x82>
		start = (state == ONOFF_STATE_OFF);
   14d3e:	fab5 f385 	clz	r3, r5
   14d42:	095b      	lsrs	r3, r3, #5
		add_client = true;
   14d44:	464a      	mov	r2, r9
	bool notify = false;            /* do client notification */
   14d46:	f04f 0900 	mov.w	r9, #0
		add_client = true;
   14d4a:	e7de      	b.n	14d0a <onoff_request+0x82>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   14d4c:	4c24      	ldr	r4, [pc, #144]	; (14de0 <onoff_request+0x158>)
   14d4e:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   14d52:	4622      	mov	r2, r4
   14d54:	4923      	ldr	r1, [pc, #140]	; (14de4 <onoff_request+0x15c>)
   14d56:	4820      	ldr	r0, [pc, #128]	; (14dd8 <onoff_request+0x150>)
   14d58:	f021 fa9c 	bl	36294 <assert_print>
   14d5c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14d60:	4620      	mov	r0, r4
   14d62:	f021 fa90 	bl	36286 <assert_post_action>
		rv = -EAGAIN;
   14d66:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   14d6a:	f04f 0900 	mov.w	r9, #0
	bool start = false;             /* trigger a start transition */
   14d6e:	464b      	mov	r3, r9
	bool add_client = false;        /* add client to pending list */
   14d70:	464a      	mov	r2, r9
   14d72:	e7ca      	b.n	14d0a <onoff_request+0x82>
	if (state == ONOFF_STATE_ON) {
   14d74:	f06f 0604 	mvn.w	r6, #4
   14d78:	f04f 0900 	mov.w	r9, #0
   14d7c:	464b      	mov	r3, r9
   14d7e:	464a      	mov	r2, r9
   14d80:	e7c3      	b.n	14d0a <onoff_request+0x82>
   14d82:	f8c4 8004 	str.w	r8, [r4, #4]
	list->head = node;
   14d86:	f8c4 8000 	str.w	r8, [r4]
}
   14d8a:	e7c8      	b.n	14d1e <onoff_request+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14d8c:	4638      	mov	r0, r7
   14d8e:	f01c fb45 	bl	3141c <z_spin_unlock_valid>
   14d92:	b168      	cbz	r0, 14db0 <onoff_request+0x128>
	__asm__ volatile(
   14d94:	f38b 8811 	msr	BASEPRI, fp
   14d98:	f3bf 8f6f 	isb	sy
		if (notify) {
   14d9c:	f1b9 0f00 	cmp.w	r9, #0
   14da0:	d0c3      	beq.n	14d2a <onoff_request+0xa2>
			notify_one(mgr, cli, state, 0);
   14da2:	2300      	movs	r3, #0
   14da4:	462a      	mov	r2, r5
   14da6:	4641      	mov	r1, r8
   14da8:	4620      	mov	r0, r4
   14daa:	f020 ffdb 	bl	35d64 <notify_one>
   14dae:	e7bc      	b.n	14d2a <onoff_request+0xa2>
   14db0:	4c07      	ldr	r4, [pc, #28]	; (14dd0 <onoff_request+0x148>)
   14db2:	23c2      	movs	r3, #194	; 0xc2
   14db4:	4622      	mov	r2, r4
   14db6:	490c      	ldr	r1, [pc, #48]	; (14de8 <onoff_request+0x160>)
   14db8:	4807      	ldr	r0, [pc, #28]	; (14dd8 <onoff_request+0x150>)
   14dba:	f021 fa6b 	bl	36294 <assert_print>
   14dbe:	4639      	mov	r1, r7
   14dc0:	480a      	ldr	r0, [pc, #40]	; (14dec <onoff_request+0x164>)
   14dc2:	f021 fa67 	bl	36294 <assert_print>
   14dc6:	21c2      	movs	r1, #194	; 0xc2
   14dc8:	4620      	mov	r0, r4
   14dca:	f021 fa5c 	bl	36286 <assert_post_action>
   14dce:	bf00      	nop
   14dd0:	00040b28 	.word	0x00040b28
   14dd4:	00040b88 	.word	0x00040b88
   14dd8:	0003f72c 	.word	0x0003f72c
   14ddc:	00040ba0 	.word	0x00040ba0
   14de0:	00040a30 	.word	0x00040a30
   14de4:	00040b10 	.word	0x00040b10
   14de8:	00040b58 	.word	0x00040b58
   14dec:	00040b70 	.word	0x00040b70

00014df0 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   14df0:	b510      	push	{r4, lr}
   14df2:	4603      	mov	r3, r0
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   14df4:	6842      	ldr	r2, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   14df6:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   14dfa:	6081      	str	r1, [r0, #8]
	switch (method) {
   14dfc:	2a02      	cmp	r2, #2
   14dfe:	d011      	beq.n	14e24 <sys_notify_finalize+0x34>
   14e00:	2a03      	cmp	r2, #3
   14e02:	d00c      	beq.n	14e1e <sys_notify_finalize+0x2e>
   14e04:	2a01      	cmp	r2, #1
   14e06:	d010      	beq.n	14e2a <sys_notify_finalize+0x3a>
		break;
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
		break;
	default:
		__ASSERT_NO_MSG(false);
   14e08:	4c0c      	ldr	r4, [pc, #48]	; (14e3c <sys_notify_finalize+0x4c>)
   14e0a:	2345      	movs	r3, #69	; 0x45
   14e0c:	4622      	mov	r2, r4
   14e0e:	490c      	ldr	r1, [pc, #48]	; (14e40 <sys_notify_finalize+0x50>)
   14e10:	480c      	ldr	r0, [pc, #48]	; (14e44 <sys_notify_finalize+0x54>)
   14e12:	f021 fa3f 	bl	36294 <assert_print>
   14e16:	2145      	movs	r1, #69	; 0x45
   14e18:	4620      	mov	r0, r4
   14e1a:	f021 fa34 	bl	36286 <assert_post_action>
		rv = notify->method.callback;
   14e1e:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   14e20:	2000      	movs	r0, #0
		break;
   14e22:	e004      	b.n	14e2e <sys_notify_finalize+0x3e>
		sig = notify->method.signal;
   14e24:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   14e26:	2400      	movs	r4, #0
		break;
   14e28:	e001      	b.n	14e2e <sys_notify_finalize+0x3e>
	switch (method) {
   14e2a:	2400      	movs	r4, #0
   14e2c:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   14e2e:	2200      	movs	r2, #0
   14e30:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   14e32:	b108      	cbz	r0, 14e38 <sys_notify_finalize+0x48>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   14e34:	f020 fb1e 	bl	35474 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   14e38:	4620      	mov	r0, r4
   14e3a:	bd10      	pop	{r4, pc}
   14e3c:	00040bb8 	.word	0x00040bb8
   14e40:	0003f964 	.word	0x0003f964
   14e44:	0003f72c 	.word	0x0003f72c

00014e48 <crc8_ccitt>:
uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
   14e48:	f04f 0c00 	mov.w	ip, #0
   14e4c:	4594      	cmp	ip, r2
   14e4e:	d215      	bcs.n	14e7c <crc8_ccitt+0x34>
{
   14e50:	b510      	push	{r4, lr}
		val ^= p[i];
   14e52:	f811 300c 	ldrb.w	r3, [r1, ip]
   14e56:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   14e58:	0903      	lsrs	r3, r0, #4
   14e5a:	4c09      	ldr	r4, [pc, #36]	; (14e80 <crc8_ccitt+0x38>)
   14e5c:	5ce3      	ldrb	r3, [r4, r3]
   14e5e:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   14e62:	fa5f fe83 	uxtb.w	lr, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   14e66:	f3c3 1303 	ubfx	r3, r3, #4, #4
   14e6a:	5ce0      	ldrb	r0, [r4, r3]
   14e6c:	ea80 100e 	eor.w	r0, r0, lr, lsl #4
   14e70:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   14e72:	f10c 0c01 	add.w	ip, ip, #1
   14e76:	4594      	cmp	ip, r2
   14e78:	d3eb      	bcc.n	14e52 <crc8_ccitt+0xa>
	}
	return val;
}
   14e7a:	bd10      	pop	{r4, pc}
   14e7c:	4770      	bx	lr
   14e7e:	bf00      	nop
   14e80:	00040bdc 	.word	0x00040bdc

00014e84 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
   14e84:	4684      	mov	ip, r0
   14e86:	4608      	mov	r0, r1
	bool loop = true;
   14e88:	2201      	movs	r2, #1
   14e8a:	e026      	b.n	14eda <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
   14e8c:	f89c 3000 	ldrb.w	r3, [ip]
   14e90:	f043 0304 	orr.w	r3, r3, #4
   14e94:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
   14e98:	b1f2      	cbz	r2, 14ed8 <extract_flags+0x54>
			++sp;
   14e9a:	3001      	adds	r0, #1
   14e9c:	e01c      	b.n	14ed8 <extract_flags+0x54>
			conv->flag_plus = true;
   14e9e:	f89c 3000 	ldrb.w	r3, [ip]
   14ea2:	f043 0308 	orr.w	r3, r3, #8
   14ea6:	f88c 3000 	strb.w	r3, [ip]
			break;
   14eaa:	e7f5      	b.n	14e98 <extract_flags+0x14>
			conv->flag_space = true;
   14eac:	f89c 3000 	ldrb.w	r3, [ip]
   14eb0:	f043 0310 	orr.w	r3, r3, #16
   14eb4:	f88c 3000 	strb.w	r3, [ip]
			break;
   14eb8:	e7ee      	b.n	14e98 <extract_flags+0x14>
			conv->flag_hash = true;
   14eba:	f89c 3000 	ldrb.w	r3, [ip]
   14ebe:	f043 0320 	orr.w	r3, r3, #32
   14ec2:	f88c 3000 	strb.w	r3, [ip]
			break;
   14ec6:	e7e7      	b.n	14e98 <extract_flags+0x14>
			conv->flag_zero = true;
   14ec8:	f89c 3000 	ldrb.w	r3, [ip]
   14ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14ed0:	f88c 3000 	strb.w	r3, [ip]
			break;
   14ed4:	e7e0      	b.n	14e98 <extract_flags+0x14>
		switch (*sp) {
   14ed6:	2200      	movs	r2, #0
		}
	} while (loop);
   14ed8:	b342      	cbz	r2, 14f2c <extract_flags+0xa8>
		switch (*sp) {
   14eda:	7803      	ldrb	r3, [r0, #0]
   14edc:	3b20      	subs	r3, #32
   14ede:	2b10      	cmp	r3, #16
   14ee0:	d8f9      	bhi.n	14ed6 <extract_flags+0x52>
   14ee2:	a101      	add	r1, pc, #4	; (adr r1, 14ee8 <extract_flags+0x64>)
   14ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   14ee8:	00014ead 	.word	0x00014ead
   14eec:	00014ed7 	.word	0x00014ed7
   14ef0:	00014ed7 	.word	0x00014ed7
   14ef4:	00014ebb 	.word	0x00014ebb
   14ef8:	00014ed7 	.word	0x00014ed7
   14efc:	00014ed7 	.word	0x00014ed7
   14f00:	00014ed7 	.word	0x00014ed7
   14f04:	00014ed7 	.word	0x00014ed7
   14f08:	00014ed7 	.word	0x00014ed7
   14f0c:	00014ed7 	.word	0x00014ed7
   14f10:	00014ed7 	.word	0x00014ed7
   14f14:	00014e9f 	.word	0x00014e9f
   14f18:	00014ed7 	.word	0x00014ed7
   14f1c:	00014e8d 	.word	0x00014e8d
   14f20:	00014ed7 	.word	0x00014ed7
   14f24:	00014ed7 	.word	0x00014ed7
   14f28:	00014ec9 	.word	0x00014ec9

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
   14f2c:	f89c 3000 	ldrb.w	r3, [ip]
   14f30:	f003 0344 	and.w	r3, r3, #68	; 0x44
   14f34:	2b44      	cmp	r3, #68	; 0x44
   14f36:	d000      	beq.n	14f3a <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
   14f38:	4770      	bx	lr
		conv->flag_zero = false;
   14f3a:	f89c 3000 	ldrb.w	r3, [ip]
   14f3e:	f36f 1386 	bfc	r3, #6, #1
   14f42:	f88c 3000 	strb.w	r3, [ip]
   14f46:	e7f7      	b.n	14f38 <extract_flags+0xb4>

00014f48 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   14f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f4c:	b091      	sub	sp, #68	; 0x44
   14f4e:	4606      	mov	r6, r0
   14f50:	460d      	mov	r5, r1
   14f52:	4691      	mov	r9, r2
   14f54:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   14f56:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   14f58:	f899 0000 	ldrb.w	r0, [r9]
   14f5c:	2800      	cmp	r0, #0
   14f5e:	f000 82b9 	beq.w	154d4 <z_cbvprintf_impl+0x58c>
		if (*fp != '%') {
   14f62:	2825      	cmp	r0, #37	; 0x25
   14f64:	d008      	beq.n	14f78 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   14f66:	f109 0901 	add.w	r9, r9, #1
   14f6a:	4629      	mov	r1, r5
   14f6c:	47b0      	blx	r6
   14f6e:	2800      	cmp	r0, #0
   14f70:	f2c0 82b1 	blt.w	154d6 <z_cbvprintf_impl+0x58e>
   14f74:	3401      	adds	r4, #1
			continue;
   14f76:	e7ef      	b.n	14f58 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   14f78:	2300      	movs	r3, #0
   14f7a:	9304      	str	r3, [sp, #16]
   14f7c:	9305      	str	r3, [sp, #20]
   14f7e:	9306      	str	r3, [sp, #24]
   14f80:	9307      	str	r3, [sp, #28]
   14f82:	9308      	str	r3, [sp, #32]
   14f84:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
   14f86:	4649      	mov	r1, r9
   14f88:	a806      	add	r0, sp, #24
   14f8a:	f021 f8bc 	bl	36106 <extract_conversion>
   14f8e:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   14f90:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14f94:	f013 0f01 	tst.w	r3, #1
   14f98:	f000 8097 	beq.w	150ca <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
   14f9c:	9b03      	ldr	r3, [sp, #12]
   14f9e:	1d1a      	adds	r2, r3, #4
   14fa0:	9203      	str	r2, [sp, #12]
   14fa2:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   14fa4:	2f00      	cmp	r7, #0
   14fa6:	f2c0 8088 	blt.w	150ba <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   14faa:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14fae:	f013 0f04 	tst.w	r3, #4
   14fb2:	f000 809c 	beq.w	150ee <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
   14fb6:	9b03      	ldr	r3, [sp, #12]
   14fb8:	1d1a      	adds	r2, r3, #4
   14fba:	9203      	str	r2, [sp, #12]
   14fbc:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
   14fc0:	f1ba 0f00 	cmp.w	sl, #0
   14fc4:	f2c0 808a 	blt.w	150dc <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   14fc8:	2300      	movs	r3, #0
   14fca:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
   14fcc:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   14fce:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14fd2:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   14fd6:	f89d 1019 	ldrb.w	r1, [sp, #25]
   14fda:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   14fde:	2b01      	cmp	r3, #1
   14fe0:	f000 808e 	beq.w	15100 <z_cbvprintf_impl+0x1b8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   14fe4:	2b02      	cmp	r3, #2
   14fe6:	f000 80d3 	beq.w	15190 <z_cbvprintf_impl+0x248>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   14fea:	2b04      	cmp	r3, #4
   14fec:	f000 8124 	beq.w	15238 <z_cbvprintf_impl+0x2f0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   14ff0:	2b03      	cmp	r3, #3
   14ff2:	f000 813b 	beq.w	1526c <z_cbvprintf_impl+0x324>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   14ff6:	f89d 8018 	ldrb.w	r8, [sp, #24]
   14ffa:	f018 0b03 	ands.w	fp, r8, #3
   14ffe:	f040 813b 	bne.w	15278 <z_cbvprintf_impl+0x330>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   15002:	f89d 301b 	ldrb.w	r3, [sp, #27]
   15006:	3b25      	subs	r3, #37	; 0x25
   15008:	2b53      	cmp	r3, #83	; 0x53
   1500a:	f200 81ca 	bhi.w	153a2 <z_cbvprintf_impl+0x45a>
   1500e:	e8df f013 	tbh	[pc, r3, lsl #1]
   15012:	0140      	.short	0x0140
   15014:	01c801c8 	.word	0x01c801c8
   15018:	01c801c8 	.word	0x01c801c8
   1501c:	01c801c8 	.word	0x01c801c8
   15020:	01c801c8 	.word	0x01c801c8
   15024:	01c801c8 	.word	0x01c801c8
   15028:	01c801c8 	.word	0x01c801c8
   1502c:	01c801c8 	.word	0x01c801c8
   15030:	01c801c8 	.word	0x01c801c8
   15034:	01c801c8 	.word	0x01c801c8
   15038:	01c801c8 	.word	0x01c801c8
   1503c:	01c801c8 	.word	0x01c801c8
   15040:	01c801c8 	.word	0x01c801c8
   15044:	01c801c8 	.word	0x01c801c8
   15048:	01c801c8 	.word	0x01c801c8
   1504c:	01c801c8 	.word	0x01c801c8
   15050:	01c801c8 	.word	0x01c801c8
   15054:	01c801c8 	.word	0x01c801c8
   15058:	01c801c8 	.word	0x01c801c8
   1505c:	01c801c8 	.word	0x01c801c8
   15060:	01c801c8 	.word	0x01c801c8
   15064:	01c801c8 	.word	0x01c801c8
   15068:	01c801c8 	.word	0x01c801c8
   1506c:	01c801c8 	.word	0x01c801c8
   15070:	01c801c8 	.word	0x01c801c8
   15074:	01c801c8 	.word	0x01c801c8
   15078:	01c80181 	.word	0x01c80181
   1507c:	01c801c8 	.word	0x01c801c8
   15080:	01c801c8 	.word	0x01c801c8
   15084:	01c801c8 	.word	0x01c801c8
   15088:	01c801c8 	.word	0x01c801c8
   1508c:	015e01c8 	.word	0x015e01c8
   15090:	01c80167 	.word	0x01c80167
   15094:	01c801c8 	.word	0x01c801c8
   15098:	016701c8 	.word	0x016701c8
   1509c:	01c801c8 	.word	0x01c801c8
   150a0:	01c801c8 	.word	0x01c801c8
   150a4:	018101bd 	.word	0x018101bd
   150a8:	01c801a1 	.word	0x01c801a1
   150ac:	014d01c8 	.word	0x014d01c8
   150b0:	018101c8 	.word	0x018101c8
   150b4:	01c801c8 	.word	0x01c801c8
   150b8:	0181      	.short	0x0181
				conv->flag_dash = true;
   150ba:	f89d 3018 	ldrb.w	r3, [sp, #24]
   150be:	f043 0304 	orr.w	r3, r3, #4
   150c2:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
   150c6:	427f      	negs	r7, r7
   150c8:	e76f      	b.n	14faa <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
   150ca:	f99d 3018 	ldrsb.w	r3, [sp, #24]
   150ce:	2b00      	cmp	r3, #0
   150d0:	db02      	blt.n	150d8 <z_cbvprintf_impl+0x190>
		int width = -1;
   150d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   150d6:	e768      	b.n	14faa <z_cbvprintf_impl+0x62>
			width = conv->width_value;
   150d8:	9f07      	ldr	r7, [sp, #28]
   150da:	e766      	b.n	14faa <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
   150dc:	f89d 3019 	ldrb.w	r3, [sp, #25]
   150e0:	f36f 0341 	bfc	r3, #1, #1
   150e4:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
   150e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   150ec:	e76c      	b.n	14fc8 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
   150ee:	f013 0f02 	tst.w	r3, #2
   150f2:	d002      	beq.n	150fa <z_cbvprintf_impl+0x1b2>
			precision = conv->prec_value;
   150f4:	f8dd a020 	ldr.w	sl, [sp, #32]
   150f8:	e766      	b.n	14fc8 <z_cbvprintf_impl+0x80>
		int precision = -1;
   150fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   150fe:	e763      	b.n	14fc8 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
   15100:	1ecb      	subs	r3, r1, #3
   15102:	2b04      	cmp	r3, #4
   15104:	d804      	bhi.n	15110 <z_cbvprintf_impl+0x1c8>
   15106:	e8df f003 	tbb	[pc, r3]
   1510a:	1d0b      	.short	0x1d0b
   1510c:	3529      	.short	0x3529
   1510e:	35          	.byte	0x35
   1510f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   15110:	9b03      	ldr	r3, [sp, #12]
   15112:	1d1a      	adds	r2, r3, #4
   15114:	9203      	str	r2, [sp, #12]
   15116:	681b      	ldr	r3, [r3, #0]
   15118:	17da      	asrs	r2, r3, #31
   1511a:	9304      	str	r3, [sp, #16]
   1511c:	9205      	str	r2, [sp, #20]
				break;
   1511e:	e006      	b.n	1512e <z_cbvprintf_impl+0x1e6>
					value->sint = va_arg(ap, long);
   15120:	9b03      	ldr	r3, [sp, #12]
   15122:	1d1a      	adds	r2, r3, #4
   15124:	9203      	str	r2, [sp, #12]
   15126:	681b      	ldr	r3, [r3, #0]
   15128:	17da      	asrs	r2, r3, #31
   1512a:	9304      	str	r3, [sp, #16]
   1512c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
   1512e:	2901      	cmp	r1, #1
   15130:	d028      	beq.n	15184 <z_cbvprintf_impl+0x23c>
			} else if (length_mod == LENGTH_H) {
   15132:	2902      	cmp	r1, #2
   15134:	f47f af5f 	bne.w	14ff6 <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
   15138:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   1513c:	17da      	asrs	r2, r3, #31
   1513e:	9304      	str	r3, [sp, #16]
   15140:	9205      	str	r2, [sp, #20]
   15142:	e758      	b.n	14ff6 <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
   15144:	9b03      	ldr	r3, [sp, #12]
   15146:	3307      	adds	r3, #7
   15148:	f023 0307 	bic.w	r3, r3, #7
   1514c:	f103 0208 	add.w	r2, r3, #8
   15150:	9203      	str	r2, [sp, #12]
   15152:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   15156:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1515a:	e7e8      	b.n	1512e <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, intmax_t);
   1515c:	9b03      	ldr	r3, [sp, #12]
   1515e:	3307      	adds	r3, #7
   15160:	f023 0307 	bic.w	r3, r3, #7
   15164:	f103 0208 	add.w	r2, r3, #8
   15168:	9203      	str	r2, [sp, #12]
   1516a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1516e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   15172:	e7dc      	b.n	1512e <z_cbvprintf_impl+0x1e6>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   15174:	9b03      	ldr	r3, [sp, #12]
   15176:	1d1a      	adds	r2, r3, #4
   15178:	9203      	str	r2, [sp, #12]
   1517a:	681b      	ldr	r3, [r3, #0]
   1517c:	17da      	asrs	r2, r3, #31
				value->sint =
   1517e:	9304      	str	r3, [sp, #16]
   15180:	9205      	str	r2, [sp, #20]
				break;
   15182:	e7d4      	b.n	1512e <z_cbvprintf_impl+0x1e6>
				value->sint = (signed char)value->sint;
   15184:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   15188:	17da      	asrs	r2, r3, #31
   1518a:	9304      	str	r3, [sp, #16]
   1518c:	9205      	str	r2, [sp, #20]
   1518e:	e732      	b.n	14ff6 <z_cbvprintf_impl+0xae>
			switch (length_mod) {
   15190:	1ecb      	subs	r3, r1, #3
   15192:	2b04      	cmp	r3, #4
   15194:	d804      	bhi.n	151a0 <z_cbvprintf_impl+0x258>
   15196:	e8df f003 	tbb	[pc, r3]
   1519a:	1f0b      	.short	0x1f0b
   1519c:	4135      	.short	0x4135
   1519e:	41          	.byte	0x41
   1519f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   151a0:	9b03      	ldr	r3, [sp, #12]
   151a2:	1d1a      	adds	r2, r3, #4
   151a4:	9203      	str	r2, [sp, #12]
   151a6:	681b      	ldr	r3, [r3, #0]
   151a8:	9304      	str	r3, [sp, #16]
   151aa:	2300      	movs	r3, #0
   151ac:	9305      	str	r3, [sp, #20]
				break;
   151ae:	e01e      	b.n	151ee <z_cbvprintf_impl+0x2a6>
				    && (conv->specifier == 'c')) {
   151b0:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
   151b4:	2b63      	cmp	r3, #99	; 0x63
   151b6:	d007      	beq.n	151c8 <z_cbvprintf_impl+0x280>
					value->uint = va_arg(ap, unsigned long);
   151b8:	9b03      	ldr	r3, [sp, #12]
   151ba:	1d1a      	adds	r2, r3, #4
   151bc:	9203      	str	r2, [sp, #12]
   151be:	681b      	ldr	r3, [r3, #0]
   151c0:	9304      	str	r3, [sp, #16]
   151c2:	2300      	movs	r3, #0
   151c4:	9305      	str	r3, [sp, #20]
   151c6:	e012      	b.n	151ee <z_cbvprintf_impl+0x2a6>
					value->uint = (wchar_t)va_arg(ap,
   151c8:	9b03      	ldr	r3, [sp, #12]
   151ca:	1d1a      	adds	r2, r3, #4
   151cc:	9203      	str	r2, [sp, #12]
   151ce:	681b      	ldr	r3, [r3, #0]
   151d0:	9304      	str	r3, [sp, #16]
   151d2:	2300      	movs	r3, #0
   151d4:	9305      	str	r3, [sp, #20]
   151d6:	e00a      	b.n	151ee <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap,
   151d8:	9b03      	ldr	r3, [sp, #12]
   151da:	3307      	adds	r3, #7
   151dc:	f023 0307 	bic.w	r3, r3, #7
   151e0:	f103 0208 	add.w	r2, r3, #8
   151e4:	9203      	str	r2, [sp, #12]
   151e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   151ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
   151ee:	2901      	cmp	r1, #1
   151f0:	d01c      	beq.n	1522c <z_cbvprintf_impl+0x2e4>
			} else if (length_mod == LENGTH_H) {
   151f2:	2902      	cmp	r1, #2
   151f4:	f47f aeff 	bne.w	14ff6 <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
   151f8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   151fc:	9304      	str	r3, [sp, #16]
   151fe:	2300      	movs	r3, #0
   15200:	9305      	str	r3, [sp, #20]
   15202:	e6f8      	b.n	14ff6 <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
   15204:	9b03      	ldr	r3, [sp, #12]
   15206:	3307      	adds	r3, #7
   15208:	f023 0307 	bic.w	r3, r3, #7
   1520c:	f103 0208 	add.w	r2, r3, #8
   15210:	9203      	str	r2, [sp, #12]
   15212:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   15216:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
   1521a:	e7e8      	b.n	151ee <z_cbvprintf_impl+0x2a6>
					(uint_value_type)va_arg(ap, size_t);
   1521c:	9b03      	ldr	r3, [sp, #12]
   1521e:	1d1a      	adds	r2, r3, #4
   15220:	9203      	str	r2, [sp, #12]
   15222:	681b      	ldr	r3, [r3, #0]
				value->uint =
   15224:	9304      	str	r3, [sp, #16]
   15226:	2300      	movs	r3, #0
   15228:	9305      	str	r3, [sp, #20]
				break;
   1522a:	e7e0      	b.n	151ee <z_cbvprintf_impl+0x2a6>
				value->uint = (unsigned char)value->uint;
   1522c:	f89d 3010 	ldrb.w	r3, [sp, #16]
   15230:	9304      	str	r3, [sp, #16]
   15232:	2300      	movs	r3, #0
   15234:	9305      	str	r3, [sp, #20]
   15236:	e6de      	b.n	14ff6 <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
   15238:	2908      	cmp	r1, #8
   1523a:	d00b      	beq.n	15254 <z_cbvprintf_impl+0x30c>
				value->dbl = va_arg(ap, double);
   1523c:	9b03      	ldr	r3, [sp, #12]
   1523e:	3307      	adds	r3, #7
   15240:	f023 0307 	bic.w	r3, r3, #7
   15244:	f103 0208 	add.w	r2, r3, #8
   15248:	9203      	str	r2, [sp, #12]
   1524a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1524e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   15252:	e6d0      	b.n	14ff6 <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
   15254:	9b03      	ldr	r3, [sp, #12]
   15256:	3307      	adds	r3, #7
   15258:	f023 0307 	bic.w	r3, r3, #7
   1525c:	f103 0208 	add.w	r2, r3, #8
   15260:	9203      	str	r2, [sp, #12]
   15262:	e9d3 2300 	ldrd	r2, r3, [r3]
   15266:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1526a:	e6c4      	b.n	14ff6 <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
   1526c:	9b03      	ldr	r3, [sp, #12]
   1526e:	1d1a      	adds	r2, r3, #4
   15270:	9203      	str	r2, [sp, #12]
   15272:	681b      	ldr	r3, [r3, #0]
   15274:	9304      	str	r3, [sp, #16]
   15276:	e6be      	b.n	14ff6 <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
   15278:	9f02      	ldr	r7, [sp, #8]
   1527a:	463b      	mov	r3, r7
   1527c:	464a      	mov	r2, r9
   1527e:	4629      	mov	r1, r5
   15280:	4630      	mov	r0, r6
   15282:	f020 ffe6 	bl	36252 <outs>
   15286:	2800      	cmp	r0, #0
   15288:	f2c0 8125 	blt.w	154d6 <z_cbvprintf_impl+0x58e>
   1528c:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1528e:	46b9      	mov	r9, r7
			continue;
   15290:	e662      	b.n	14f58 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
   15292:	4629      	mov	r1, r5
   15294:	2025      	movs	r0, #37	; 0x25
   15296:	47b0      	blx	r6
   15298:	2800      	cmp	r0, #0
   1529a:	f2c0 811c 	blt.w	154d6 <z_cbvprintf_impl+0x58e>
   1529e:	3401      	adds	r4, #1
		char sign = 0;
   152a0:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   152a2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   152a6:	f04f 0900 	mov.w	r9, #0
			break;
   152aa:	e07f      	b.n	153ac <z_cbvprintf_impl+0x464>
		case 's': {
			bps = (const char *)value->ptr;
   152ac:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
   152b0:	f1ba 0f00 	cmp.w	sl, #0
   152b4:	db07      	blt.n	152c6 <z_cbvprintf_impl+0x37e>
				len = strnlen(bps, precision);
   152b6:	4651      	mov	r1, sl
   152b8:	4648      	mov	r0, r9
   152ba:	f023 f851 	bl	38360 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   152be:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
   152c2:	46d8      	mov	r8, fp
			precision = -1;

			break;
   152c4:	e072      	b.n	153ac <z_cbvprintf_impl+0x464>
				len = strlen(bps);
   152c6:	4648      	mov	r0, r9
   152c8:	f023 f841 	bl	3834e <strlen>
   152cc:	e7f7      	b.n	152be <z_cbvprintf_impl+0x376>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   152ce:	9b04      	ldr	r3, [sp, #16]
   152d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
   152d4:	46d8      	mov	r8, fp
			bpe = buf + 1;
   152d6:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
   152da:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
   152de:	e065      	b.n	153ac <z_cbvprintf_impl+0x464>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   152e0:	f018 0f08 	tst.w	r8, #8
   152e4:	d105      	bne.n	152f2 <z_cbvprintf_impl+0x3aa>
				sign = '+';
			} else if (conv->flag_space) {
   152e6:	f018 0810 	ands.w	r8, r8, #16
   152ea:	d004      	beq.n	152f6 <z_cbvprintf_impl+0x3ae>
				sign = ' ';
   152ec:	f04f 0820 	mov.w	r8, #32
   152f0:	e001      	b.n	152f6 <z_cbvprintf_impl+0x3ae>
				sign = '+';
   152f2:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   152f6:	9a04      	ldr	r2, [sp, #16]
   152f8:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
   152fa:	2b00      	cmp	r3, #0
   152fc:	db02      	blt.n	15304 <z_cbvprintf_impl+0x3bc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   152fe:	9204      	str	r2, [sp, #16]
   15300:	9305      	str	r3, [sp, #20]
   15302:	e008      	b.n	15316 <z_cbvprintf_impl+0x3ce>
				value->uint = (uint_value_type)-sint;
   15304:	4252      	negs	r2, r2
   15306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1530a:	9204      	str	r2, [sp, #16]
   1530c:	9305      	str	r3, [sp, #20]
				sign = '-';
   1530e:	f04f 082d 	mov.w	r8, #45	; 0x2d
   15312:	e000      	b.n	15316 <z_cbvprintf_impl+0x3ce>
		switch (conv->specifier) {
   15314:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   15316:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   1531a:	9300      	str	r3, [sp, #0]
   1531c:	ab0a      	add	r3, sp, #40	; 0x28
   1531e:	aa06      	add	r2, sp, #24
   15320:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   15324:	f020 ff26 	bl	36174 <encode_uint>
   15328:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   1532a:	f1ba 0f00 	cmp.w	sl, #0
   1532e:	db6c      	blt.n	1540a <z_cbvprintf_impl+0x4c2>
				size_t len = bpe - bps;
   15330:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   15334:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   15338:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1533c:	f36f 1286 	bfc	r2, #6, #1
   15340:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   15344:	459a      	cmp	sl, r3
   15346:	d963      	bls.n	15410 <z_cbvprintf_impl+0x4c8>
					conv->pad0_value = precision - (int)len;
   15348:	ebaa 0303 	sub.w	r3, sl, r3
   1534c:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
   1534e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   15352:	e02b      	b.n	153ac <z_cbvprintf_impl+0x464>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   15354:	9804      	ldr	r0, [sp, #16]
   15356:	b928      	cbnz	r0, 15364 <z_cbvprintf_impl+0x41c>
		char sign = 0;
   15358:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1535a:	f8df a180 	ldr.w	sl, [pc, #384]	; 154dc <z_cbvprintf_impl+0x594>
			bps = "(nil)";
   1535e:	f1aa 0905 	sub.w	r9, sl, #5
   15362:	e023      	b.n	153ac <z_cbvprintf_impl+0x464>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   15364:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
   15368:	9300      	str	r3, [sp, #0]
   1536a:	ab0a      	add	r3, sp, #40	; 0x28
   1536c:	aa06      	add	r2, sp, #24
   1536e:	2100      	movs	r1, #0
   15370:	f020 ff00 	bl	36174 <encode_uint>
   15374:	4681      	mov	r9, r0
				conv->altform_0c = true;
   15376:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1537a:	f043 0310 	orr.w	r3, r3, #16
   1537e:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
   15382:	2378      	movs	r3, #120	; 0x78
   15384:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
   15388:	46d8      	mov	r8, fp
				goto prec_int_pad0;
   1538a:	e7ce      	b.n	1532a <z_cbvprintf_impl+0x3e2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   1538c:	4622      	mov	r2, r4
   1538e:	9904      	ldr	r1, [sp, #16]
   15390:	a806      	add	r0, sp, #24
   15392:	f020 ff3f 	bl	36214 <store_count>
		char sign = 0;
   15396:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
   15398:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
   1539c:	f04f 0900 	mov.w	r9, #0
			}

			break;
   153a0:	e004      	b.n	153ac <z_cbvprintf_impl+0x464>
		switch (conv->specifier) {
   153a2:	46d8      	mov	r8, fp
   153a4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   153a8:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   153ac:	f1b9 0f00 	cmp.w	r9, #0
   153b0:	f000 808d 	beq.w	154ce <z_cbvprintf_impl+0x586>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   153b4:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
   153b8:	f1b8 0f00 	cmp.w	r8, #0
   153bc:	d000      	beq.n	153c0 <z_cbvprintf_impl+0x478>
			nj_len += 1U;
   153be:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
   153c0:	f89d 201a 	ldrb.w	r2, [sp, #26]
   153c4:	f012 0f10 	tst.w	r2, #16
   153c8:	d025      	beq.n	15416 <z_cbvprintf_impl+0x4ce>
			nj_len += 2U;
   153ca:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   153cc:	9907      	ldr	r1, [sp, #28]
   153ce:	440b      	add	r3, r1
		if (conv->pad_fp) {
   153d0:	f012 0f40 	tst.w	r2, #64	; 0x40
   153d4:	d001      	beq.n	153da <z_cbvprintf_impl+0x492>
			nj_len += conv->pad0_pre_exp;
   153d6:	9a08      	ldr	r2, [sp, #32]
   153d8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   153da:	2f00      	cmp	r7, #0
   153dc:	dd31      	ble.n	15442 <z_cbvprintf_impl+0x4fa>
			width -= (int)nj_len;
   153de:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   153e0:	f89d 3018 	ldrb.w	r3, [sp, #24]
   153e4:	f013 0f04 	tst.w	r3, #4
   153e8:	d12b      	bne.n	15442 <z_cbvprintf_impl+0x4fa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   153ea:	f013 0f40 	tst.w	r3, #64	; 0x40
   153ee:	d017      	beq.n	15420 <z_cbvprintf_impl+0x4d8>
					if (sign != 0) {
   153f0:	f1b8 0f00 	cmp.w	r8, #0
   153f4:	d017      	beq.n	15426 <z_cbvprintf_impl+0x4de>
						OUTC(sign);
   153f6:	4629      	mov	r1, r5
   153f8:	4640      	mov	r0, r8
   153fa:	47b0      	blx	r6
   153fc:	2800      	cmp	r0, #0
   153fe:	db6a      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   15400:	3401      	adds	r4, #1
						sign = 0;
   15402:	46d8      	mov	r8, fp
					}
					pad = '0';
   15404:	f04f 0b30 	mov.w	fp, #48	; 0x30
   15408:	e00f      	b.n	1542a <z_cbvprintf_impl+0x4e2>
		const char *bpe = buf + sizeof(buf);
   1540a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   1540e:	e7cd      	b.n	153ac <z_cbvprintf_impl+0x464>
   15410:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
   15414:	e7ca      	b.n	153ac <z_cbvprintf_impl+0x464>
		} else if (conv->altform_0) {
   15416:	f012 0f08 	tst.w	r2, #8
   1541a:	d0d7      	beq.n	153cc <z_cbvprintf_impl+0x484>
			nj_len += 1U;
   1541c:	3301      	adds	r3, #1
   1541e:	e7d5      	b.n	153cc <z_cbvprintf_impl+0x484>
				char pad = ' ';
   15420:	f04f 0b20 	mov.w	fp, #32
   15424:	e001      	b.n	1542a <z_cbvprintf_impl+0x4e2>
					pad = '0';
   15426:	f04f 0b30 	mov.w	fp, #48	; 0x30
   1542a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   1542c:	1e5f      	subs	r7, r3, #1
   1542e:	2b00      	cmp	r3, #0
   15430:	dd07      	ble.n	15442 <z_cbvprintf_impl+0x4fa>
					OUTC(pad);
   15432:	4629      	mov	r1, r5
   15434:	4658      	mov	r0, fp
   15436:	47b0      	blx	r6
   15438:	2800      	cmp	r0, #0
   1543a:	db4c      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   1543c:	3401      	adds	r4, #1
				while (width-- > 0) {
   1543e:	463b      	mov	r3, r7
   15440:	e7f4      	b.n	1542c <z_cbvprintf_impl+0x4e4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   15442:	f1b8 0f00 	cmp.w	r8, #0
   15446:	d005      	beq.n	15454 <z_cbvprintf_impl+0x50c>
			OUTC(sign);
   15448:	4629      	mov	r1, r5
   1544a:	4640      	mov	r0, r8
   1544c:	47b0      	blx	r6
   1544e:	2800      	cmp	r0, #0
   15450:	db41      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   15452:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   15454:	f89d 301a 	ldrb.w	r3, [sp, #26]
   15458:	f3c3 1200 	ubfx	r2, r3, #4, #1
   1545c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15460:	431a      	orrs	r2, r3
   15462:	d005      	beq.n	15470 <z_cbvprintf_impl+0x528>
				OUTC('0');
   15464:	4629      	mov	r1, r5
   15466:	2030      	movs	r0, #48	; 0x30
   15468:	47b0      	blx	r6
   1546a:	2800      	cmp	r0, #0
   1546c:	db33      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   1546e:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   15470:	f89d 301a 	ldrb.w	r3, [sp, #26]
   15474:	f013 0f10 	tst.w	r3, #16
   15478:	d006      	beq.n	15488 <z_cbvprintf_impl+0x540>
				OUTC(conv->specifier);
   1547a:	4629      	mov	r1, r5
   1547c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   15480:	47b0      	blx	r6
   15482:	2800      	cmp	r0, #0
   15484:	db27      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   15486:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   15488:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
   1548a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   1548e:	2b00      	cmp	r3, #0
   15490:	dd07      	ble.n	154a2 <z_cbvprintf_impl+0x55a>
				OUTC('0');
   15492:	4629      	mov	r1, r5
   15494:	2030      	movs	r0, #48	; 0x30
   15496:	47b0      	blx	r6
   15498:	2800      	cmp	r0, #0
   1549a:	db1c      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   1549c:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   1549e:	4643      	mov	r3, r8
   154a0:	e7f3      	b.n	1548a <z_cbvprintf_impl+0x542>
			}

			OUTS(bps, bpe);
   154a2:	4653      	mov	r3, sl
   154a4:	464a      	mov	r2, r9
   154a6:	4629      	mov	r1, r5
   154a8:	4630      	mov	r0, r6
   154aa:	f020 fed2 	bl	36252 <outs>
   154ae:	2800      	cmp	r0, #0
   154b0:	db11      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   154b2:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   154b4:	2f00      	cmp	r7, #0
   154b6:	dd07      	ble.n	154c8 <z_cbvprintf_impl+0x580>
			OUTC(' ');
   154b8:	4629      	mov	r1, r5
   154ba:	2020      	movs	r0, #32
   154bc:	47b0      	blx	r6
   154be:	2800      	cmp	r0, #0
   154c0:	db09      	blt.n	154d6 <z_cbvprintf_impl+0x58e>
   154c2:	3401      	adds	r4, #1
			--width;
   154c4:	3f01      	subs	r7, #1
   154c6:	e7f5      	b.n	154b4 <z_cbvprintf_impl+0x56c>
		fp = extract_conversion(conv, sp);
   154c8:	f8dd 9008 	ldr.w	r9, [sp, #8]
   154cc:	e544      	b.n	14f58 <z_cbvprintf_impl+0x10>
   154ce:	f8dd 9008 	ldr.w	r9, [sp, #8]
   154d2:	e541      	b.n	14f58 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
   154d4:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   154d6:	b011      	add	sp, #68	; 0x44
   154d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154dc:	00040bf1 	.word	0x00040bf1

000154e0 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   154e0:	b538      	push	{r3, r4, r5, lr}
   154e2:	4604      	mov	r4, r0
   154e4:	460d      	mov	r5, r1
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   154e6:	2220      	movs	r2, #32
   154e8:	2100      	movs	r1, #0
   154ea:	f022 ffb5 	bl	38458 <memset>
	buffer->get_wlen = cfg->get_wlen;
   154ee:	68eb      	ldr	r3, [r5, #12]
   154f0:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   154f2:	68ab      	ldr	r3, [r5, #8]
   154f4:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   154f6:	682b      	ldr	r3, [r5, #0]
   154f8:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   154fa:	686b      	ldr	r3, [r5, #4]
   154fc:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   154fe:	2200      	movs	r2, #0
   15500:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   15502:	692a      	ldr	r2, [r5, #16]
   15504:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   15506:	b12b      	cbz	r3, 15514 <mpsc_pbuf_init+0x34>
   15508:	1e59      	subs	r1, r3, #1
   1550a:	420b      	tst	r3, r1
   1550c:	d102      	bne.n	15514 <mpsc_pbuf_init+0x34>

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1550e:	f042 0201 	orr.w	r2, r2, #1
   15512:	6122      	str	r2, [r4, #16]
	}

	err = k_sem_init(&buffer->sem, 0, 1);
   15514:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return z_impl_k_sem_init(sem, initial_count, limit);
   15518:	2201      	movs	r2, #1
   1551a:	2100      	movs	r1, #0
   1551c:	f029 fa75 	bl	3ea0a <z_impl_k_sem_init>
	__ASSERT_NO_MSG(err == 0);
   15520:	b900      	cbnz	r0, 15524 <mpsc_pbuf_init+0x44>
	ARG_UNUSED(err);
}
   15522:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(err == 0);
   15524:	4c05      	ldr	r4, [pc, #20]	; (1553c <mpsc_pbuf_init+0x5c>)
   15526:	232e      	movs	r3, #46	; 0x2e
   15528:	4622      	mov	r2, r4
   1552a:	4905      	ldr	r1, [pc, #20]	; (15540 <mpsc_pbuf_init+0x60>)
   1552c:	4805      	ldr	r0, [pc, #20]	; (15544 <mpsc_pbuf_init+0x64>)
   1552e:	f020 feb1 	bl	36294 <assert_print>
   15532:	212e      	movs	r1, #46	; 0x2e
   15534:	4620      	mov	r0, r4
   15536:	f020 fea6 	bl	36286 <assert_post_action>
   1553a:	bf00      	nop
   1553c:	00040bf4 	.word	0x00040bf4
   15540:	00040c1c 	.word	0x00040c1c
   15544:	0003f72c 	.word	0x0003f72c

00015548 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   15548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1554c:	b087      	sub	sp, #28
   1554e:	9202      	str	r2, [sp, #8]
   15550:	469b      	mov	fp, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   15552:	6a43      	ldr	r3, [r0, #36]	; 0x24
   15554:	3b01      	subs	r3, #1
   15556:	428b      	cmp	r3, r1
   15558:	f0c0 80dd 	bcc.w	15716 <mpsc_pbuf_alloc+0x1ce>
   1555c:	4605      	mov	r5, r0
   1555e:	4688      	mov	r8, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   15560:	f04f 0900 	mov.w	r9, #0
	union mpsc_pbuf_generic *item = NULL;
   15564:	46ca      	mov	sl, r9
   15566:	e030      	b.n	155ca <mpsc_pbuf_alloc+0x82>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15568:	4c6e      	ldr	r4, [pc, #440]	; (15724 <mpsc_pbuf_alloc+0x1dc>)
   1556a:	2394      	movs	r3, #148	; 0x94
   1556c:	4622      	mov	r2, r4
   1556e:	496e      	ldr	r1, [pc, #440]	; (15728 <mpsc_pbuf_alloc+0x1e0>)
   15570:	486e      	ldr	r0, [pc, #440]	; (1572c <mpsc_pbuf_alloc+0x1e4>)
   15572:	f020 fe8f 	bl	36294 <assert_print>
   15576:	4631      	mov	r1, r6
   15578:	486d      	ldr	r0, [pc, #436]	; (15730 <mpsc_pbuf_alloc+0x1e8>)
   1557a:	f020 fe8b 	bl	36294 <assert_print>
   1557e:	2194      	movs	r1, #148	; 0x94
   15580:	4620      	mov	r0, r4
   15582:	f020 fe80 	bl	36286 <assert_post_action>
		return i & (buffer->size - 1);
   15586:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   15588:	3a01      	subs	r2, #1
   1558a:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   1558c:	602b      	str	r3, [r5, #0]
		cont = false;
   1558e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15590:	4630      	mov	r0, r6
   15592:	f01b ff43 	bl	3141c <z_spin_unlock_valid>
   15596:	2800      	cmp	r0, #0
   15598:	f000 80ab 	beq.w	156f2 <mpsc_pbuf_alloc+0x1aa>
   1559c:	f387 8811 	msr	BASEPRI, r7
   155a0:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   155a4:	b174      	cbz	r4, 155c4 <mpsc_pbuf_alloc+0x7c>
   155a6:	f1b9 0f00 	cmp.w	r9, #0
   155aa:	d00b      	beq.n	155c4 <mpsc_pbuf_alloc+0x7c>
   155ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
   155b0:	b143      	cbz	r3, 155c4 <mpsc_pbuf_alloc+0x7c>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   155b2:	69ab      	ldr	r3, [r5, #24]
   155b4:	2b00      	cmp	r3, #0
   155b6:	f000 80ab 	beq.w	15710 <mpsc_pbuf_alloc+0x1c8>
				buffer->notify_drop(buffer, dropped_item);
   155ba:	4649      	mov	r1, r9
   155bc:	4628      	mov	r0, r5
   155be:	4798      	blx	r3
			}
			dropped_item = NULL;
   155c0:	f04f 0900 	mov.w	r9, #0
		}
	} while (cont);
   155c4:	2c00      	cmp	r4, #0
   155c6:	f000 80a8 	beq.w	1571a <mpsc_pbuf_alloc+0x1d2>
		key = k_spin_lock(&buffer->lock);
   155ca:	f105 0614 	add.w	r6, r5, #20
	__asm__ volatile(
   155ce:	f04f 0320 	mov.w	r3, #32
   155d2:	f3ef 8711 	mrs	r7, BASEPRI
   155d6:	f383 8812 	msr	BASEPRI_MAX, r3
   155da:	f3bf 8f6f 	isb	sy
   155de:	9701      	str	r7, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   155e0:	4630      	mov	r0, r6
   155e2:	f01b ff0b 	bl	313fc <z_spin_lock_valid>
   155e6:	2800      	cmp	r0, #0
   155e8:	d0be      	beq.n	15568 <mpsc_pbuf_alloc+0x20>
	z_spin_lock_set_owner(l);
   155ea:	4630      	mov	r0, r6
   155ec:	f01b ff26 	bl	3143c <z_spin_lock_set_owner>
		wrap = free_space(buffer, &free_wlen);
   155f0:	a905      	add	r1, sp, #20
   155f2:	4628      	mov	r0, r5
   155f4:	f020 fe5c 	bl	362b0 <free_space>
   155f8:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
   155fa:	9905      	ldr	r1, [sp, #20]
   155fc:	4541      	cmp	r1, r8
   155fe:	d319      	bcc.n	15634 <mpsc_pbuf_alloc+0xec>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   15600:	6a2b      	ldr	r3, [r5, #32]
   15602:	682a      	ldr	r2, [r5, #0]
			item =
   15604:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
			item->hdr.valid = 0;
   15608:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   1560c:	f36f 0100 	bfc	r1, #0, #1
   15610:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
   15614:	b2c9      	uxtb	r1, r1
   15616:	f36f 0141 	bfc	r1, #1, #1
   1561a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   1561e:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
   15620:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   15622:	692a      	ldr	r2, [r5, #16]
   15624:	f012 0f01 	tst.w	r2, #1
   15628:	d1ad      	bne.n	15586 <mpsc_pbuf_alloc+0x3e>
	return (i >= buffer->size) ? i - buffer->size : i;
   1562a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1562c:	4293      	cmp	r3, r2
   1562e:	d3ad      	bcc.n	1558c <mpsc_pbuf_alloc+0x44>
   15630:	1a9b      	subs	r3, r3, r2
   15632:	e7ab      	b.n	1558c <mpsc_pbuf_alloc+0x44>
		} else if (wrap) {
   15634:	b9a8      	cbnz	r0, 15662 <mpsc_pbuf_alloc+0x11a>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15636:	9b02      	ldr	r3, [sp, #8]
   15638:	ea5b 0303 	orrs.w	r3, fp, r3
   1563c:	d003      	beq.n	15646 <mpsc_pbuf_alloc+0xfe>
			   !k_is_in_isr()) {
   1563e:	f029 f93a 	bl	3e8b6 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   15642:	9003      	str	r0, [sp, #12]
   15644:	b188      	cbz	r0, 1566a <mpsc_pbuf_alloc+0x122>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   15646:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   15648:	f10d 0313 	add.w	r3, sp, #19
   1564c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15650:	9905      	ldr	r1, [sp, #20]
   15652:	4628      	mov	r0, r5
   15654:	f020 fe8f 	bl	36376 <drop_item_locked>
			cont = dropped_item != NULL;
   15658:	4681      	mov	r9, r0
   1565a:	1e04      	subs	r4, r0, #0
   1565c:	bf18      	it	ne
   1565e:	2401      	movne	r4, #1
   15660:	e796      	b.n	15590 <mpsc_pbuf_alloc+0x48>
			add_skip_item(buffer, free_wlen);
   15662:	4628      	mov	r0, r5
   15664:	f020 fe5e 	bl	36324 <add_skip_item>
			cont = true;
   15668:	e792      	b.n	15590 <mpsc_pbuf_alloc+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1566a:	4630      	mov	r0, r6
   1566c:	f01b fed6 	bl	3141c <z_spin_unlock_valid>
   15670:	b308      	cbz	r0, 156b6 <mpsc_pbuf_alloc+0x16e>
	__asm__ volatile(
   15672:	9b01      	ldr	r3, [sp, #4]
   15674:	f383 8811 	msr	BASEPRI, r3
   15678:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
   1567c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
	return z_impl_k_sem_take(sem, timeout);
   15680:	9a02      	ldr	r2, [sp, #8]
   15682:	465b      	mov	r3, fp
   15684:	f01c fbf4 	bl	31e70 <z_impl_k_sem_take>
   15688:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   1568a:	f04f 0320 	mov.w	r3, #32
   1568e:	f3ef 8711 	mrs	r7, BASEPRI
   15692:	f383 8812 	msr	BASEPRI_MAX, r3
   15696:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1569a:	4630      	mov	r0, r6
   1569c:	f01b feae 	bl	313fc <z_spin_lock_valid>
   156a0:	4604      	mov	r4, r0
   156a2:	b1b8      	cbz	r0, 156d4 <mpsc_pbuf_alloc+0x18c>
	z_spin_lock_set_owner(l);
   156a4:	4630      	mov	r0, r6
   156a6:	f01b fec9 	bl	3143c <z_spin_lock_set_owner>
			if (err == 0) {
   156aa:	9b01      	ldr	r3, [sp, #4]
   156ac:	2b00      	cmp	r3, #0
   156ae:	f43f af6f 	beq.w	15590 <mpsc_pbuf_alloc+0x48>
		cont = false;
   156b2:	9c03      	ldr	r4, [sp, #12]
   156b4:	e76c      	b.n	15590 <mpsc_pbuf_alloc+0x48>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   156b6:	4c1b      	ldr	r4, [pc, #108]	; (15724 <mpsc_pbuf_alloc+0x1dc>)
   156b8:	23c2      	movs	r3, #194	; 0xc2
   156ba:	4622      	mov	r2, r4
   156bc:	491d      	ldr	r1, [pc, #116]	; (15734 <mpsc_pbuf_alloc+0x1ec>)
   156be:	481b      	ldr	r0, [pc, #108]	; (1572c <mpsc_pbuf_alloc+0x1e4>)
   156c0:	f020 fde8 	bl	36294 <assert_print>
   156c4:	4631      	mov	r1, r6
   156c6:	481c      	ldr	r0, [pc, #112]	; (15738 <mpsc_pbuf_alloc+0x1f0>)
   156c8:	f020 fde4 	bl	36294 <assert_print>
   156cc:	21c2      	movs	r1, #194	; 0xc2
   156ce:	4620      	mov	r0, r4
   156d0:	f020 fdd9 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   156d4:	4c13      	ldr	r4, [pc, #76]	; (15724 <mpsc_pbuf_alloc+0x1dc>)
   156d6:	2394      	movs	r3, #148	; 0x94
   156d8:	4622      	mov	r2, r4
   156da:	4913      	ldr	r1, [pc, #76]	; (15728 <mpsc_pbuf_alloc+0x1e0>)
   156dc:	4813      	ldr	r0, [pc, #76]	; (1572c <mpsc_pbuf_alloc+0x1e4>)
   156de:	f020 fdd9 	bl	36294 <assert_print>
   156e2:	4631      	mov	r1, r6
   156e4:	4812      	ldr	r0, [pc, #72]	; (15730 <mpsc_pbuf_alloc+0x1e8>)
   156e6:	f020 fdd5 	bl	36294 <assert_print>
   156ea:	2194      	movs	r1, #148	; 0x94
   156ec:	4620      	mov	r0, r4
   156ee:	f020 fdca 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   156f2:	4c0c      	ldr	r4, [pc, #48]	; (15724 <mpsc_pbuf_alloc+0x1dc>)
   156f4:	23c2      	movs	r3, #194	; 0xc2
   156f6:	4622      	mov	r2, r4
   156f8:	490e      	ldr	r1, [pc, #56]	; (15734 <mpsc_pbuf_alloc+0x1ec>)
   156fa:	480c      	ldr	r0, [pc, #48]	; (1572c <mpsc_pbuf_alloc+0x1e4>)
   156fc:	f020 fdca 	bl	36294 <assert_print>
   15700:	4631      	mov	r1, r6
   15702:	480d      	ldr	r0, [pc, #52]	; (15738 <mpsc_pbuf_alloc+0x1f0>)
   15704:	f020 fdc6 	bl	36294 <assert_print>
   15708:	21c2      	movs	r1, #194	; 0xc2
   1570a:	4620      	mov	r0, r4
   1570c:	f020 fdbb 	bl	36286 <assert_post_action>
			dropped_item = NULL;
   15710:	f04f 0900 	mov.w	r9, #0
   15714:	e756      	b.n	155c4 <mpsc_pbuf_alloc+0x7c>
		return NULL;
   15716:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   1571a:	4650      	mov	r0, sl
   1571c:	b007      	add	sp, #28
   1571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15722:	bf00      	nop
   15724:	00040b28 	.word	0x00040b28
   15728:	00040b88 	.word	0x00040b88
   1572c:	0003f72c 	.word	0x0003f72c
   15730:	00040ba0 	.word	0x00040ba0
   15734:	00040b58 	.word	0x00040b58
   15738:	00040b70 	.word	0x00040b70

0001573c <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   1573c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15740:	4604      	mov	r4, r0
   15742:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   15744:	69c3      	ldr	r3, [r0, #28]
   15746:	4608      	mov	r0, r1
   15748:	4798      	blx	r3
   1574a:	4680      	mov	r8, r0

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   1574c:	f104 0614 	add.w	r6, r4, #20
   15750:	f04f 0320 	mov.w	r3, #32
   15754:	f3ef 8711 	mrs	r7, BASEPRI
   15758:	f383 8812 	msr	BASEPRI_MAX, r3
   1575c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15760:	4630      	mov	r0, r6
   15762:	f01b fe4b 	bl	313fc <z_spin_lock_valid>
   15766:	b190      	cbz	r0, 1578e <mpsc_pbuf_commit+0x52>
	z_spin_lock_set_owner(l);
   15768:	4630      	mov	r0, r6
   1576a:	f01b fe67 	bl	3143c <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   1576e:	782b      	ldrb	r3, [r5, #0]
   15770:	f043 0301 	orr.w	r3, r3, #1
   15774:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   15776:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   15778:	eb03 0008 	add.w	r0, r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1577c:	6923      	ldr	r3, [r4, #16]
   1577e:	f013 0f01 	tst.w	r3, #1
   15782:	d113      	bne.n	157ac <mpsc_pbuf_commit+0x70>
	return (i >= buffer->size) ? i - buffer->size : i;
   15784:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15786:	4298      	cmp	r0, r3
   15788:	d313      	bcc.n	157b2 <mpsc_pbuf_commit+0x76>
   1578a:	1ac0      	subs	r0, r0, r3
   1578c:	e011      	b.n	157b2 <mpsc_pbuf_commit+0x76>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1578e:	4c17      	ldr	r4, [pc, #92]	; (157ec <mpsc_pbuf_commit+0xb0>)
   15790:	2394      	movs	r3, #148	; 0x94
   15792:	4622      	mov	r2, r4
   15794:	4916      	ldr	r1, [pc, #88]	; (157f0 <mpsc_pbuf_commit+0xb4>)
   15796:	4817      	ldr	r0, [pc, #92]	; (157f4 <mpsc_pbuf_commit+0xb8>)
   15798:	f020 fd7c 	bl	36294 <assert_print>
   1579c:	4631      	mov	r1, r6
   1579e:	4816      	ldr	r0, [pc, #88]	; (157f8 <mpsc_pbuf_commit+0xbc>)
   157a0:	f020 fd78 	bl	36294 <assert_print>
   157a4:	2194      	movs	r1, #148	; 0x94
   157a6:	4620      	mov	r0, r4
   157a8:	f020 fd6d 	bl	36286 <assert_post_action>
		return i & (buffer->size - 1);
   157ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   157ae:	3b01      	subs	r3, #1
   157b0:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   157b2:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   157b4:	4620      	mov	r0, r4
   157b6:	f020 fda2 	bl	362fe <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   157ba:	4630      	mov	r0, r6
   157bc:	f01b fe2e 	bl	3141c <z_spin_unlock_valid>
   157c0:	b128      	cbz	r0, 157ce <mpsc_pbuf_commit+0x92>
	__asm__ volatile(
   157c2:	f387 8811 	msr	BASEPRI, r7
   157c6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   157ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   157ce:	4c07      	ldr	r4, [pc, #28]	; (157ec <mpsc_pbuf_commit+0xb0>)
   157d0:	23c2      	movs	r3, #194	; 0xc2
   157d2:	4622      	mov	r2, r4
   157d4:	4909      	ldr	r1, [pc, #36]	; (157fc <mpsc_pbuf_commit+0xc0>)
   157d6:	4807      	ldr	r0, [pc, #28]	; (157f4 <mpsc_pbuf_commit+0xb8>)
   157d8:	f020 fd5c 	bl	36294 <assert_print>
   157dc:	4631      	mov	r1, r6
   157de:	4808      	ldr	r0, [pc, #32]	; (15800 <mpsc_pbuf_commit+0xc4>)
   157e0:	f020 fd58 	bl	36294 <assert_print>
   157e4:	21c2      	movs	r1, #194	; 0xc2
   157e6:	4620      	mov	r0, r4
   157e8:	f020 fd4d 	bl	36286 <assert_post_action>
   157ec:	00040b28 	.word	0x00040b28
   157f0:	00040b88 	.word	0x00040b88
   157f4:	0003f72c 	.word	0x0003f72c
   157f8:	00040ba0 	.word	0x00040ba0
   157fc:	00040b58 	.word	0x00040b58
   15800:	00040b70 	.word	0x00040b70

00015804 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   15804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15808:	4604      	mov	r4, r0
   1580a:	e04d      	b.n	158a8 <mpsc_pbuf_claim+0xa4>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1580c:	4c4e      	ldr	r4, [pc, #312]	; (15948 <mpsc_pbuf_claim+0x144>)
   1580e:	2394      	movs	r3, #148	; 0x94
   15810:	4622      	mov	r2, r4
   15812:	494e      	ldr	r1, [pc, #312]	; (1594c <mpsc_pbuf_claim+0x148>)
   15814:	484e      	ldr	r0, [pc, #312]	; (15950 <mpsc_pbuf_claim+0x14c>)
   15816:	f020 fd3d 	bl	36294 <assert_print>
   1581a:	4629      	mov	r1, r5
   1581c:	484d      	ldr	r0, [pc, #308]	; (15954 <mpsc_pbuf_claim+0x150>)
   1581e:	f020 fd39 	bl	36294 <assert_print>
   15822:	2194      	movs	r1, #148	; 0x94
   15824:	4620      	mov	r0, r4
   15826:	f020 fd2e 	bl	36286 <assert_post_action>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   1582a:	1a9b      	subs	r3, r3, r2
		return false;
   1582c:	e055      	b.n	158da <mpsc_pbuf_claim+0xd6>
		return item->skip.len;
   1582e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   15832:	0880      	lsrs	r0, r0, #2
   15834:	d167      	bne.n	15906 <mpsc_pbuf_claim+0x102>
   15836:	e05d      	b.n	158f4 <mpsc_pbuf_claim+0xf0>
		return i & (buffer->size - 1);
   15838:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1583a:	3901      	subs	r1, #1
   1583c:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
   1583e:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
   15840:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   15842:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   15844:	b922      	cbnz	r2, 15850 <mpsc_pbuf_claim+0x4c>
	return (i >= buffer->size) ? i - buffer->size : i;
   15846:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15848:	4293      	cmp	r3, r2
   1584a:	d304      	bcc.n	15856 <mpsc_pbuf_claim+0x52>
   1584c:	1a9b      	subs	r3, r3, r2
   1584e:	e002      	b.n	15856 <mpsc_pbuf_claim+0x52>
		return i & (buffer->size - 1);
   15850:	6a62      	ldr	r2, [r4, #36]	; 0x24
   15852:	3a01      	subs	r2, #1
   15854:	4013      	ands	r3, r2
				buffer->rd_idx =
   15856:	60e3      	str	r3, [r4, #12]
			if (skip || !is_valid(item)) {
   15858:	e01b      	b.n	15892 <mpsc_pbuf_claim+0x8e>
				cont = true;
			} else {
				item->hdr.busy = 1;
   1585a:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
   1585e:	f043 0302 	orr.w	r3, r3, #2
   15862:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
   15866:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
   15868:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
   1586a:	4640      	mov	r0, r8
   1586c:	4798      	blx	r3
	uint32_t i = idx + val;
   1586e:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   15870:	6923      	ldr	r3, [r4, #16]
   15872:	f013 0f01 	tst.w	r3, #1
   15876:	d104      	bne.n	15882 <mpsc_pbuf_claim+0x7e>
	return (i >= buffer->size) ? i - buffer->size : i;
   15878:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1587a:	4298      	cmp	r0, r3
   1587c:	d304      	bcc.n	15888 <mpsc_pbuf_claim+0x84>
   1587e:	1ac0      	subs	r0, r0, r3
   15880:	e002      	b.n	15888 <mpsc_pbuf_claim+0x84>
		return i & (buffer->size - 1);
   15882:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15884:	3b01      	subs	r3, #1
   15886:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
   15888:	60a0      	str	r0, [r4, #8]
		cont = false;
   1588a:	2700      	movs	r7, #0
   1588c:	e001      	b.n	15892 <mpsc_pbuf_claim+0x8e>
   1588e:	2700      	movs	r7, #0
			item = NULL;
   15890:	46b8      	mov	r8, r7
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15892:	4628      	mov	r0, r5
   15894:	f01b fdc2 	bl	3141c <z_spin_unlock_valid>
   15898:	2800      	cmp	r0, #0
   1589a:	d042      	beq.n	15922 <mpsc_pbuf_claim+0x11e>
   1589c:	f386 8811 	msr	BASEPRI, r6
   158a0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   158a4:	2f00      	cmp	r7, #0
   158a6:	d04b      	beq.n	15940 <mpsc_pbuf_claim+0x13c>
		key = k_spin_lock(&buffer->lock);
   158a8:	f104 0514 	add.w	r5, r4, #20
	__asm__ volatile(
   158ac:	f04f 0320 	mov.w	r3, #32
   158b0:	f3ef 8611 	mrs	r6, BASEPRI
   158b4:	f383 8812 	msr	BASEPRI_MAX, r3
   158b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   158bc:	4628      	mov	r0, r5
   158be:	f01b fd9d 	bl	313fc <z_spin_lock_valid>
   158c2:	4607      	mov	r7, r0
   158c4:	2800      	cmp	r0, #0
   158c6:	d0a1      	beq.n	1580c <mpsc_pbuf_claim+0x8>
	z_spin_lock_set_owner(l);
   158c8:	4628      	mov	r0, r5
   158ca:	f01b fdb7 	bl	3143c <z_spin_lock_set_owner>
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   158ce:	68a2      	ldr	r2, [r4, #8]
   158d0:	6863      	ldr	r3, [r4, #4]
   158d2:	429a      	cmp	r2, r3
   158d4:	d9a9      	bls.n	1582a <mpsc_pbuf_claim+0x26>
	*res = buffer->size - buffer->tmp_rd_idx;
   158d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   158d8:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
   158da:	6a21      	ldr	r1, [r4, #32]
		item = (union mpsc_pbuf_generic *)
   158dc:	eb01 0882 	add.w	r8, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   158e0:	2b00      	cmp	r3, #0
   158e2:	d0d4      	beq.n	1588e <mpsc_pbuf_claim+0x8a>
	return !item->hdr.valid && !item->hdr.busy;
   158e4:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   158e8:	f013 0303 	ands.w	r3, r3, #3
   158ec:	d016      	beq.n	1591c <mpsc_pbuf_claim+0x118>
	if (item->hdr.busy && !item->hdr.valid) {
   158ee:	2b02      	cmp	r3, #2
   158f0:	d09d      	beq.n	1582e <mpsc_pbuf_claim+0x2a>
	return 0;
   158f2:	2000      	movs	r0, #0
	return item->hdr.valid;
   158f4:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
   158f8:	f013 0f01 	tst.w	r3, #1
   158fc:	d1ad      	bne.n	1585a <mpsc_pbuf_claim+0x56>
					skip ? skip : buffer->get_wlen(item);
   158fe:	b910      	cbnz	r0, 15906 <mpsc_pbuf_claim+0x102>
   15900:	69e3      	ldr	r3, [r4, #28]
   15902:	4640      	mov	r0, r8
   15904:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   15906:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
   15908:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   1590a:	6922      	ldr	r2, [r4, #16]
   1590c:	f012 0201 	ands.w	r2, r2, #1
   15910:	d192      	bne.n	15838 <mpsc_pbuf_claim+0x34>
	return (i >= buffer->size) ? i - buffer->size : i;
   15912:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15914:	428b      	cmp	r3, r1
   15916:	d392      	bcc.n	1583e <mpsc_pbuf_claim+0x3a>
   15918:	1a5b      	subs	r3, r3, r1
   1591a:	e790      	b.n	1583e <mpsc_pbuf_claim+0x3a>
		cont = false;
   1591c:	2700      	movs	r7, #0
			item = NULL;
   1591e:	46b8      	mov	r8, r7
   15920:	e7b7      	b.n	15892 <mpsc_pbuf_claim+0x8e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   15922:	4c09      	ldr	r4, [pc, #36]	; (15948 <mpsc_pbuf_claim+0x144>)
   15924:	23c2      	movs	r3, #194	; 0xc2
   15926:	4622      	mov	r2, r4
   15928:	490b      	ldr	r1, [pc, #44]	; (15958 <mpsc_pbuf_claim+0x154>)
   1592a:	4809      	ldr	r0, [pc, #36]	; (15950 <mpsc_pbuf_claim+0x14c>)
   1592c:	f020 fcb2 	bl	36294 <assert_print>
   15930:	4629      	mov	r1, r5
   15932:	480a      	ldr	r0, [pc, #40]	; (1595c <mpsc_pbuf_claim+0x158>)
   15934:	f020 fcae 	bl	36294 <assert_print>
   15938:	21c2      	movs	r1, #194	; 0xc2
   1593a:	4620      	mov	r0, r4
   1593c:	f020 fca3 	bl	36286 <assert_post_action>

	return item;
}
   15940:	4640      	mov	r0, r8
   15942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15946:	bf00      	nop
   15948:	00040b28 	.word	0x00040b28
   1594c:	00040b88 	.word	0x00040b88
   15950:	0003f72c 	.word	0x0003f72c
   15954:	00040ba0 	.word	0x00040ba0
   15958:	00040b58 	.word	0x00040b58
   1595c:	00040b70 	.word	0x00040b70

00015960 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   15960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15964:	4604      	mov	r4, r0
   15966:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   15968:	69c3      	ldr	r3, [r0, #28]
   1596a:	4608      	mov	r0, r1
   1596c:	4798      	blx	r3
   1596e:	4680      	mov	r8, r0
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   15970:	f104 0614 	add.w	r6, r4, #20
   15974:	f04f 0320 	mov.w	r3, #32
   15978:	f3ef 8711 	mrs	r7, BASEPRI
   1597c:	f383 8812 	msr	BASEPRI_MAX, r3
   15980:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15984:	4630      	mov	r0, r6
   15986:	f01b fd39 	bl	313fc <z_spin_lock_valid>
   1598a:	b1a8      	cbz	r0, 159b8 <mpsc_pbuf_free+0x58>
	z_spin_lock_set_owner(l);
   1598c:	4630      	mov	r0, r6
   1598e:	f01b fd55 	bl	3143c <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   15992:	782b      	ldrb	r3, [r5, #0]
   15994:	f36f 0300 	bfc	r3, #0, #1
   15998:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   1599a:	6923      	ldr	r3, [r4, #16]
   1599c:	f013 0f02 	tst.w	r3, #2
   159a0:	d019      	beq.n	159d6 <mpsc_pbuf_free+0x76>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   159a2:	6a23      	ldr	r3, [r4, #32]
   159a4:	68e2      	ldr	r2, [r4, #12]
   159a6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   159aa:	42ab      	cmp	r3, r5
   159ac:	d013      	beq.n	159d6 <mpsc_pbuf_free+0x76>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
   159ae:	682b      	ldr	r3, [r5, #0]
   159b0:	f368 039f 	bfi	r3, r8, #2, #30
   159b4:	602b      	str	r3, [r5, #0]
   159b6:	e021      	b.n	159fc <mpsc_pbuf_free+0x9c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   159b8:	4c1f      	ldr	r4, [pc, #124]	; (15a38 <mpsc_pbuf_free+0xd8>)
   159ba:	2394      	movs	r3, #148	; 0x94
   159bc:	4622      	mov	r2, r4
   159be:	491f      	ldr	r1, [pc, #124]	; (15a3c <mpsc_pbuf_free+0xdc>)
   159c0:	481f      	ldr	r0, [pc, #124]	; (15a40 <mpsc_pbuf_free+0xe0>)
   159c2:	f020 fc67 	bl	36294 <assert_print>
   159c6:	4631      	mov	r1, r6
   159c8:	481e      	ldr	r0, [pc, #120]	; (15a44 <mpsc_pbuf_free+0xe4>)
   159ca:	f020 fc63 	bl	36294 <assert_print>
   159ce:	2194      	movs	r1, #148	; 0x94
   159d0:	4620      	mov	r0, r4
   159d2:	f020 fc58 	bl	36286 <assert_post_action>
		witem->hdr.busy = 0;
   159d6:	782b      	ldrb	r3, [r5, #0]
   159d8:	f36f 0341 	bfc	r3, #1, #1
   159dc:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   159de:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   159e0:	4443      	add	r3, r8
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   159e2:	6922      	ldr	r2, [r4, #16]
   159e4:	f012 0f01 	tst.w	r2, #1
   159e8:	d104      	bne.n	159f4 <mpsc_pbuf_free+0x94>
	return (i >= buffer->size) ? i - buffer->size : i;
   159ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
   159ec:	4293      	cmp	r3, r2
   159ee:	d304      	bcc.n	159fa <mpsc_pbuf_free+0x9a>
   159f0:	1a9b      	subs	r3, r3, r2
   159f2:	e002      	b.n	159fa <mpsc_pbuf_free+0x9a>
		return i & (buffer->size - 1);
   159f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   159f6:	3a01      	subs	r2, #1
   159f8:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   159fa:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   159fc:	4630      	mov	r0, r6
   159fe:	f01b fd0d 	bl	3141c <z_spin_unlock_valid>
   15a02:	b148      	cbz	r0, 15a18 <mpsc_pbuf_free+0xb8>
	__asm__ volatile(
   15a04:	f387 8811 	msr	BASEPRI, r7
   15a08:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
   15a0c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	z_impl_k_sem_give(sem);
   15a10:	f01c f9e6 	bl	31de0 <z_impl_k_sem_give>
}
   15a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15a18:	4c07      	ldr	r4, [pc, #28]	; (15a38 <mpsc_pbuf_free+0xd8>)
   15a1a:	23c2      	movs	r3, #194	; 0xc2
   15a1c:	4622      	mov	r2, r4
   15a1e:	490a      	ldr	r1, [pc, #40]	; (15a48 <mpsc_pbuf_free+0xe8>)
   15a20:	4807      	ldr	r0, [pc, #28]	; (15a40 <mpsc_pbuf_free+0xe0>)
   15a22:	f020 fc37 	bl	36294 <assert_print>
   15a26:	4631      	mov	r1, r6
   15a28:	4808      	ldr	r0, [pc, #32]	; (15a4c <mpsc_pbuf_free+0xec>)
   15a2a:	f020 fc33 	bl	36294 <assert_print>
   15a2e:	21c2      	movs	r1, #194	; 0xc2
   15a30:	4620      	mov	r0, r4
   15a32:	f020 fc28 	bl	36286 <assert_post_action>
   15a36:	bf00      	nop
   15a38:	00040b28 	.word	0x00040b28
   15a3c:	00040b88 	.word	0x00040b88
   15a40:	0003f72c 	.word	0x0003f72c
   15a44:	00040ba0 	.word	0x00040ba0
   15a48:	00040b58 	.word	0x00040b58
   15a4c:	00040b70 	.word	0x00040b70

00015a50 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15a50:	b168      	cbz	r0, 15a6e <nrfx_coredep_delay_us+0x1e>
{
   15a52:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   15a54:	4a06      	ldr	r2, [pc, #24]	; (15a70 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
   15a56:	4b07      	ldr	r3, [pc, #28]	; (15a74 <nrfx_coredep_delay_us+0x24>)
   15a58:	681b      	ldr	r3, [r3, #0]
   15a5a:	4907      	ldr	r1, [pc, #28]	; (15a78 <nrfx_coredep_delay_us+0x28>)
   15a5c:	fba1 1303 	umull	r1, r3, r1, r3
   15a60:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
   15a62:	fb00 f003 	mul.w	r0, r0, r3
   15a66:	f042 0301 	orr.w	r3, r2, #1
   15a6a:	4798      	blx	r3
}
   15a6c:	bd08      	pop	{r3, pc}
   15a6e:	4770      	bx	lr
   15a70:	0003f6b0 	.word	0x0003f6b0
   15a74:	20008774 	.word	0x20008774
   15a78:	431bde83 	.word	0x431bde83

00015a7c <nordicsemi_nrf53_init>:
	return true;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(const struct device *arg)
{
   15a7c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15a7e:	f04f 0320 	mov.w	r3, #32
   15a82:	f3ef 8511 	mrs	r5, BASEPRI
   15a86:	f383 8812 	msr	BASEPRI_MAX, r3
   15a8a:	f3bf 8f6f 	isb	sy
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
   15a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   15a92:	2202      	movs	r2, #2
   15a94:	f8c3 26d0 	str.w	r2, [r3, #1744]	; 0x6d0
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
   15a98:	2201      	movs	r2, #1
   15a9a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
   15a9e:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
   15aa2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
#if defined(CONFIG_SOC_NRF_GPIO_FORWARDER_FOR_NRF5340)
	static const uint8_t forwarded_psels[] = {
		DT_FOREACH_STATUS_OKAY(nordic_nrf_gpio_forwarder, ALL_GPIOS_IN_FORWARDER)
	};

	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
   15aa6:	2400      	movs	r4, #0
   15aa8:	e005      	b.n	15ab6 <nordicsemi_nrf53_init+0x3a>
		soc_secure_gpio_pin_mcu_select(forwarded_psels[i], NRF_GPIO_PIN_SEL_NETWORK);
   15aaa:	2101      	movs	r1, #1
   15aac:	4b06      	ldr	r3, [pc, #24]	; (15ac8 <nordicsemi_nrf53_init+0x4c>)
   15aae:	5d18      	ldrb	r0, [r3, r4]
   15ab0:	f000 fa50 	bl	15f54 <soc_secure_gpio_pin_mcu_select>
	for (int i = 0; i < ARRAY_SIZE(forwarded_psels); i++) {
   15ab4:	3401      	adds	r4, #1
   15ab6:	2c03      	cmp	r4, #3
   15ab8:	d9f7      	bls.n	15aaa <nordicsemi_nrf53_init+0x2e>
	__asm__ volatile(
   15aba:	f385 8811 	msr	BASEPRI, r5
   15abe:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15ac2:	2000      	movs	r0, #0
   15ac4:	bd38      	pop	{r3, r4, r5, pc}
   15ac6:	bf00      	nop
   15ac8:	00040c54 	.word	0x00040c54

00015acc <z_arm_on_enter_cpu_idle>:
{
   15acc:	b530      	push	{r4, r5, lr}
   15ace:	b089      	sub	sp, #36	; 0x24
	uint8_t oldest = (current + 1) % ARRAY_SIZE(timestamps);
   15ad0:	4b2f      	ldr	r3, [pc, #188]	; (15b90 <z_arm_on_enter_cpu_idle+0xc4>)
   15ad2:	781b      	ldrb	r3, [r3, #0]
   15ad4:	3301      	adds	r3, #1
   15ad6:	4a2f      	ldr	r2, [pc, #188]	; (15b94 <z_arm_on_enter_cpu_idle+0xc8>)
   15ad8:	fba2 1203 	umull	r1, r2, r2, r3
   15adc:	f402 71fe 	and.w	r1, r2, #508	; 0x1fc
   15ae0:	eb01 0292 	add.w	r2, r1, r2, lsr #2
   15ae4:	1a9c      	subs	r4, r3, r2
   15ae6:	b2e5      	uxtb	r5, r4
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   15ae8:	f027 fba1 	bl	3d22e <sys_clock_cycle_get_32>
	if (timestamps_filled &&
   15aec:	4b2a      	ldr	r3, [pc, #168]	; (15b98 <z_arm_on_enter_cpu_idle+0xcc>)
   15aee:	781b      	ldrb	r3, [r3, #0]
   15af0:	b12b      	cbz	r3, 15afe <z_arm_on_enter_cpu_idle+0x32>
	    (now - timestamps[oldest]) < (window_cycles + 1)) {
   15af2:	4a2a      	ldr	r2, [pc, #168]	; (15b9c <z_arm_on_enter_cpu_idle+0xd0>)
   15af4:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
   15af8:	1ac0      	subs	r0, r0, r3
	if (timestamps_filled &&
   15afa:	2807      	cmp	r0, #7
   15afc:	d91b      	bls.n	15b36 <z_arm_on_enter_cpu_idle+0x6a>
	suppress_warning = false;
   15afe:	4b28      	ldr	r3, [pc, #160]	; (15ba0 <z_arm_on_enter_cpu_idle+0xd4>)
   15b00:	2200      	movs	r2, #0
   15b02:	701a      	strb	r2, [r3, #0]
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_power_event_check(NRF_POWER_Type const * p_reg, nrf_power_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15b04:	4b27      	ldr	r3, [pc, #156]	; (15ba4 <z_arm_on_enter_cpu_idle+0xd8>)
   15b06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
	if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER)) {
   15b0a:	b153      	cbz	r3, 15b22 <z_arm_on_enter_cpu_idle+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15b0c:	4b25      	ldr	r3, [pc, #148]	; (15ba4 <z_arm_on_enter_cpu_idle+0xd8>)
   15b0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   15b12:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
		current = oldest;
   15b16:	4b1e      	ldr	r3, [pc, #120]	; (15b90 <z_arm_on_enter_cpu_idle+0xc4>)
   15b18:	701d      	strb	r5, [r3, #0]
		if (current == 0) {
   15b1a:	b915      	cbnz	r5, 15b22 <z_arm_on_enter_cpu_idle+0x56>
			timestamps_filled = true;
   15b1c:	4b1e      	ldr	r3, [pc, #120]	; (15b98 <z_arm_on_enter_cpu_idle+0xcc>)
   15b1e:	2201      	movs	r2, #1
   15b20:	701a      	strb	r2, [r3, #0]
	timestamps[current] = k_cycle_get_32();
   15b22:	4b1b      	ldr	r3, [pc, #108]	; (15b90 <z_arm_on_enter_cpu_idle+0xc4>)
   15b24:	781c      	ldrb	r4, [r3, #0]
   15b26:	f027 fb82 	bl	3d22e <sys_clock_cycle_get_32>
   15b2a:	4b1c      	ldr	r3, [pc, #112]	; (15b9c <z_arm_on_enter_cpu_idle+0xd0>)
   15b2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
	return true;
   15b30:	2001      	movs	r0, #1
}
   15b32:	b009      	add	sp, #36	; 0x24
   15b34:	bd30      	pop	{r4, r5, pc}
		if (!suppress_warning) {
   15b36:	4b1a      	ldr	r3, [pc, #104]	; (15ba0 <z_arm_on_enter_cpu_idle+0xd4>)
   15b38:	781b      	ldrb	r3, [r3, #0]
   15b3a:	b10b      	cbz	r3, 15b40 <z_arm_on_enter_cpu_idle+0x74>
		return false;
   15b3c:	2000      	movs	r0, #0
   15b3e:	e7f8      	b.n	15b32 <z_arm_on_enter_cpu_idle+0x66>
			LOG_WRN("Anomaly 160 trigger conditions detected.");
   15b40:	4b19      	ldr	r3, [pc, #100]	; (15ba8 <z_arm_on_enter_cpu_idle+0xdc>)
   15b42:	9307      	str	r3, [sp, #28]
   15b44:	2202      	movs	r2, #2
   15b46:	f88d 2004 	strb.w	r2, [sp, #4]
   15b4a:	2300      	movs	r3, #0
   15b4c:	f88d 3005 	strb.w	r3, [sp, #5]
   15b50:	f88d 3006 	strb.w	r3, [sp, #6]
   15b54:	f88d 3007 	strb.w	r3, [sp, #7]
   15b58:	9901      	ldr	r1, [sp, #4]
   15b5a:	9106      	str	r1, [sp, #24]
   15b5c:	4619      	mov	r1, r3
   15b5e:	f363 0100 	bfi	r1, r3, #0, #1
   15b62:	f363 0141 	bfi	r1, r3, #1, #1
   15b66:	f363 0182 	bfi	r1, r3, #2, #1
   15b6a:	f363 01c5 	bfi	r1, r3, #3, #3
   15b6e:	f362 1188 	bfi	r1, r2, #6, #3
   15b72:	2208      	movs	r2, #8
   15b74:	f362 2152 	bfi	r1, r2, #9, #10
   15b78:	f363 41de 	bfi	r1, r3, #19, #12
   15b7c:	f363 71df 	bfi	r1, r3, #31, #1
   15b80:	aa06      	add	r2, sp, #24
   15b82:	480a      	ldr	r0, [pc, #40]	; (15bac <z_arm_on_enter_cpu_idle+0xe0>)
   15b84:	f000 fee2 	bl	1694c <z_impl_z_log_msg_static_create>
			suppress_warning = true;
   15b88:	4b05      	ldr	r3, [pc, #20]	; (15ba0 <z_arm_on_enter_cpu_idle+0xd4>)
   15b8a:	2201      	movs	r2, #1
   15b8c:	701a      	strb	r2, [r3, #0]
   15b8e:	e7d5      	b.n	15b3c <z_arm_on_enter_cpu_idle+0x70>
   15b90:	2000caac 	.word	0x2000caac
   15b94:	cccccccd 	.word	0xcccccccd
   15b98:	2000caab 	.word	0x2000caab
   15b9c:	2000be44 	.word	0x2000be44
   15ba0:	2000caaa 	.word	0x2000caaa
   15ba4:	40005000 	.word	0x40005000
   15ba8:	00040c28 	.word	0x00040c28
   15bac:	0003f4b0 	.word	0x0003f4b0

00015bb0 <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
   15bb0:	b500      	push	{lr}
   15bb2:	b083      	sub	sp, #12
   15bb4:	4602      	mov	r2, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
   15bb6:	4b08      	ldr	r3, [pc, #32]	; (15bd8 <mbox_rx_init+0x28>)
   15bb8:	9300      	str	r3, [sp, #0]
	channel->id = ch_id;
   15bba:	2308      	movs	r3, #8
   15bbc:	9301      	str	r3, [sp, #4]
		return -ENODEV;
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
   15bbe:	4907      	ldr	r1, [pc, #28]	; (15bdc <mbox_rx_init+0x2c>)
   15bc0:	4668      	mov	r0, sp
   15bc2:	f020 fc88 	bl	364d6 <mbox_register_callback>
	if (err < 0) {
   15bc6:	2800      	cmp	r0, #0
   15bc8:	db03      	blt.n	15bd2 <mbox_rx_init+0x22>
		union { uintptr_t x; bool val; } parm1 = { .val = enable };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MBOX_SET_ENABLED);
	}
#endif
	compiler_barrier();
	return z_impl_mbox_set_enabled(channel, enable);
   15bca:	2101      	movs	r1, #1
   15bcc:	4668      	mov	r0, sp
   15bce:	f020 fc91 	bl	364f4 <z_impl_mbox_set_enabled>
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
   15bd2:	b003      	add	sp, #12
   15bd4:	f85d fb04 	ldr.w	pc, [sp], #4
   15bd8:	0003f014 	.word	0x0003f014
   15bdc:	00015e2d 	.word	0x00015e2d

00015be0 <nrf_ipc_send_task_get>:
    return p_reg->GPMEM[index];
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   15be0:	280f      	cmp	r0, #15
   15be2:	d803      	bhi.n	15bec <nrf_ipc_send_task_get+0xc>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   15be4:	0080      	lsls	r0, r0, #2
}
   15be6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
   15bea:	4770      	bx	lr
{
   15bec:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   15bee:	4c06      	ldr	r4, [pc, #24]	; (15c08 <nrf_ipc_send_task_get+0x28>)
   15bf0:	f240 13e1 	movw	r3, #481	; 0x1e1
   15bf4:	4622      	mov	r2, r4
   15bf6:	4905      	ldr	r1, [pc, #20]	; (15c0c <nrf_ipc_send_task_get+0x2c>)
   15bf8:	4805      	ldr	r0, [pc, #20]	; (15c10 <nrf_ipc_send_task_get+0x30>)
   15bfa:	f020 fb4b 	bl	36294 <assert_print>
   15bfe:	f240 11e1 	movw	r1, #481	; 0x1e1
   15c02:	4620      	mov	r0, r4
   15c04:	f020 fb3f 	bl	36286 <assert_post_action>
   15c08:	00040c5c 	.word	0x00040c5c
   15c0c:	00040c90 	.word	0x00040c90
   15c10:	0003f72c 	.word	0x0003f72c

00015c14 <nrfx_gppi_event_endpoint_setup>:
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   15c14:	b121      	cbz	r1, 15c20 <nrfx_gppi_event_endpoint_setup+0xc>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15c16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   15c1a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   15c1e:	4770      	bx	lr
{
   15c20:	b510      	push	{r4, lr}
    NRFX_ASSERT(eep);
   15c22:	4c06      	ldr	r4, [pc, #24]	; (15c3c <nrfx_gppi_event_endpoint_setup+0x28>)
   15c24:	f44f 7312 	mov.w	r3, #584	; 0x248
   15c28:	4622      	mov	r2, r4
   15c2a:	4905      	ldr	r1, [pc, #20]	; (15c40 <nrfx_gppi_event_endpoint_setup+0x2c>)
   15c2c:	4805      	ldr	r0, [pc, #20]	; (15c44 <nrfx_gppi_event_endpoint_setup+0x30>)
   15c2e:	f020 fb31 	bl	36294 <assert_print>
   15c32:	f44f 7112 	mov.w	r1, #584	; 0x248
   15c36:	4620      	mov	r0, r4
   15c38:	f020 fb25 	bl	36286 <assert_post_action>
   15c3c:	00040c9c 	.word	0x00040c9c
   15c40:	00040cd4 	.word	0x00040cd4
   15c44:	0003f72c 	.word	0x0003f72c

00015c48 <nrfx_gppi_event_endpoint_clear>:
    nrfx_gppi_task_endpoint_setup(channel, tep);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   15c48:	b119      	cbz	r1, 15c52 <nrfx_gppi_event_endpoint_clear+0xa>
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
   15c4a:	2200      	movs	r2, #0
   15c4c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   15c50:	4770      	bx	lr
{
   15c52:	b510      	push	{r4, lr}
    NRFX_ASSERT(eep);
   15c54:	4c06      	ldr	r4, [pc, #24]	; (15c70 <nrfx_gppi_event_endpoint_clear+0x28>)
   15c56:	f44f 7317 	mov.w	r3, #604	; 0x25c
   15c5a:	4622      	mov	r2, r4
   15c5c:	4905      	ldr	r1, [pc, #20]	; (15c74 <nrfx_gppi_event_endpoint_clear+0x2c>)
   15c5e:	4806      	ldr	r0, [pc, #24]	; (15c78 <nrfx_gppi_event_endpoint_clear+0x30>)
   15c60:	f020 fb18 	bl	36294 <assert_print>
   15c64:	f44f 7117 	mov.w	r1, #604	; 0x25c
   15c68:	4620      	mov	r0, r4
   15c6a:	f020 fb0c 	bl	36286 <assert_post_action>
   15c6e:	bf00      	nop
   15c70:	00040c9c 	.word	0x00040c9c
   15c74:	00040cd4 	.word	0x00040cd4
   15c78:	0003f72c 	.word	0x0003f72c

00015c7c <nrf_ipc_receive_event_get>:

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   15c7c:	280f      	cmp	r0, #15
   15c7e:	d803      	bhi.n	15c88 <nrf_ipc_receive_event_get+0xc>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   15c80:	0080      	lsls	r0, r0, #2
}
   15c82:	f500 7080 	add.w	r0, r0, #256	; 0x100
   15c86:	4770      	bx	lr
{
   15c88:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   15c8a:	4c06      	ldr	r4, [pc, #24]	; (15ca4 <nrf_ipc_receive_event_get+0x28>)
   15c8c:	f240 13e7 	movw	r3, #487	; 0x1e7
   15c90:	4622      	mov	r2, r4
   15c92:	4905      	ldr	r1, [pc, #20]	; (15ca8 <nrf_ipc_receive_event_get+0x2c>)
   15c94:	4805      	ldr	r0, [pc, #20]	; (15cac <nrf_ipc_receive_event_get+0x30>)
   15c96:	f020 fafd 	bl	36294 <assert_print>
   15c9a:	f240 11e7 	movw	r1, #487	; 0x1e7
   15c9e:	4620      	mov	r0, r4
   15ca0:	f020 faf1 	bl	36286 <assert_post_action>
   15ca4:	00040c5c 	.word	0x00040c5c
   15ca8:	00040c90 	.word	0x00040c90
   15cac:	0003f72c 	.word	0x0003f72c

00015cb0 <nrfx_gppi_task_endpoint_setup>:
    NRFX_ASSERT(tep);
   15cb0:	b121      	cbz	r1, 15cbc <nrfx_gppi_task_endpoint_setup+0xc>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   15cb2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   15cb6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   15cba:	4770      	bx	lr
{
   15cbc:	b510      	push	{r4, lr}
    NRFX_ASSERT(tep);
   15cbe:	4c06      	ldr	r4, [pc, #24]	; (15cd8 <nrfx_gppi_task_endpoint_setup+0x28>)
   15cc0:	f240 234e 	movw	r3, #590	; 0x24e
   15cc4:	4622      	mov	r2, r4
   15cc6:	4905      	ldr	r1, [pc, #20]	; (15cdc <nrfx_gppi_task_endpoint_setup+0x2c>)
   15cc8:	4805      	ldr	r0, [pc, #20]	; (15ce0 <nrfx_gppi_task_endpoint_setup+0x30>)
   15cca:	f020 fae3 	bl	36294 <assert_print>
   15cce:	f240 214e 	movw	r1, #590	; 0x24e
   15cd2:	4620      	mov	r0, r4
   15cd4:	f020 fad7 	bl	36286 <assert_post_action>
   15cd8:	00040c9c 	.word	0x00040c9c
   15cdc:	00040cd8 	.word	0x00040cd8
   15ce0:	0003f72c 	.word	0x0003f72c

00015ce4 <nrfx_gppi_task_endpoint_clear>:
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   15ce4:	b119      	cbz	r1, 15cee <nrfx_gppi_task_endpoint_clear+0xa>
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
   15ce6:	2200      	movs	r2, #0
   15ce8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
   15cec:	4770      	bx	lr
{
   15cee:	b510      	push	{r4, lr}
    NRFX_ASSERT(tep);
   15cf0:	4c06      	ldr	r4, [pc, #24]	; (15d0c <nrfx_gppi_task_endpoint_clear+0x28>)
   15cf2:	f240 2363 	movw	r3, #611	; 0x263
   15cf6:	4622      	mov	r2, r4
   15cf8:	4905      	ldr	r1, [pc, #20]	; (15d10 <nrfx_gppi_task_endpoint_clear+0x2c>)
   15cfa:	4806      	ldr	r0, [pc, #24]	; (15d14 <nrfx_gppi_task_endpoint_clear+0x30>)
   15cfc:	f020 faca 	bl	36294 <assert_print>
   15d00:	f240 2163 	movw	r1, #611	; 0x263
   15d04:	4620      	mov	r0, r4
   15d06:	f020 fabe 	bl	36286 <assert_post_action>
   15d0a:	bf00      	nop
   15d0c:	00040c9c 	.word	0x00040c9c
   15d10:	00040cd8 	.word	0x00040cd8
   15d14:	0003f72c 	.word	0x0003f72c

00015d18 <free_resources>:
{
   15d18:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
   15d1a:	b2c4      	uxtb	r4, r0
   15d1c:	2301      	movs	r3, #1
   15d1e:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   15d20:	4a0c      	ldr	r2, [pc, #48]	; (15d54 <free_resources+0x3c>)
   15d22:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
   15d26:	f3c0 2007 	ubfx	r0, r0, #8, #8
   15d2a:	f017 fa9f 	bl	2d26c <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
   15d2e:	4620      	mov	r0, r4
   15d30:	f018 fbc0 	bl	2e4b4 <nrfx_dppi_channel_free>
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   15d34:	4b08      	ldr	r3, [pc, #32]	; (15d58 <free_resources+0x40>)
   15d36:	4298      	cmp	r0, r3
   15d38:	d100      	bne.n	15d3c <free_resources+0x24>
}
   15d3a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   15d3c:	4c07      	ldr	r4, [pc, #28]	; (15d5c <free_resources+0x44>)
   15d3e:	2374      	movs	r3, #116	; 0x74
   15d40:	4622      	mov	r2, r4
   15d42:	4907      	ldr	r1, [pc, #28]	; (15d60 <free_resources+0x48>)
   15d44:	4807      	ldr	r0, [pc, #28]	; (15d64 <free_resources+0x4c>)
   15d46:	f020 faa5 	bl	36294 <assert_print>
   15d4a:	2174      	movs	r1, #116	; 0x74
   15d4c:	4620      	mov	r0, r4
   15d4e:	f020 fa9a 	bl	36286 <assert_post_action>
   15d52:	bf00      	nop
   15d54:	40017000 	.word	0x40017000
   15d58:	0bad0000 	.word	0x0bad0000
   15d5c:	00040cdc 	.word	0x00040cdc
   15d60:	00040d14 	.word	0x00040d14
   15d64:	0003f72c 	.word	0x0003f72c

00015d68 <ppi_rtc_to_ipc>:
{
   15d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d6a:	4604      	mov	r4, r0
   15d6c:	460f      	mov	r7, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
   15d6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
   15d72:	f017 f8c7 	bl	2cf04 <z_nrf_rtc_timer_compare_evt_address_get>
   15d76:	4606      	mov	r6, r0
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
   15d78:	f3c4 4007 	ubfx	r0, r4, #16, #8
   15d7c:	f7ff ff30 	bl	15be0 <nrf_ipc_send_task_get>
   15d80:	4605      	mov	r5, r0
	if (setup) {
   15d82:	b147      	cbz	r7, 15d96 <ppi_rtc_to_ipc+0x2e>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
   15d84:	b2e0      	uxtb	r0, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   15d86:	4b08      	ldr	r3, [pc, #32]	; (15da8 <ppi_rtc_to_ipc+0x40>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
   15d88:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
   15d8c:	515a      	str	r2, [r3, r5]
		nrfx_gppi_event_endpoint_setup(channels.ch.ppi, evt_addr);
   15d8e:	4631      	mov	r1, r6
   15d90:	f7ff ff40 	bl	15c14 <nrfx_gppi_event_endpoint_setup>
}
   15d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		nrfx_gppi_event_endpoint_clear(channels.ch.ppi, evt_addr);
   15d96:	4631      	mov	r1, r6
   15d98:	b2e0      	uxtb	r0, r4
   15d9a:	f7ff ff55 	bl	15c48 <nrfx_gppi_event_endpoint_clear>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
   15d9e:	4b02      	ldr	r3, [pc, #8]	; (15da8 <ppi_rtc_to_ipc+0x40>)
   15da0:	2200      	movs	r2, #0
   15da2:	515a      	str	r2, [r3, r5]
}
   15da4:	e7f6      	b.n	15d94 <ppi_rtc_to_ipc+0x2c>
   15da6:	bf00      	nop
   15da8:	4002a080 	.word	0x4002a080

00015dac <ppi_ipc_to_rtc>:
{
   15dac:	b570      	push	{r4, r5, r6, lr}
   15dae:	4604      	mov	r4, r0
   15db0:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
   15db2:	0e00      	lsrs	r0, r0, #24
   15db4:	f7ff ff62 	bl	15c7c <nrf_ipc_receive_event_get>
   15db8:	4605      	mov	r5, r0
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
   15dba:	f3c4 2007 	ubfx	r0, r4, #8, #8
   15dbe:	f017 f8bd 	bl	2cf3c <z_nrf_rtc_timer_capture_task_address_get>
   15dc2:	4601      	mov	r1, r0
	if (setup) {
   15dc4:	b146      	cbz	r6, 15dd8 <ppi_ipc_to_rtc+0x2c>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
   15dc6:	b2e4      	uxtb	r4, r4
   15dc8:	4620      	mov	r0, r4
   15dca:	f7ff ff71 	bl	15cb0 <nrfx_gppi_task_endpoint_setup>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   15dce:	4b06      	ldr	r3, [pc, #24]	; (15de8 <ppi_ipc_to_rtc+0x3c>)
            ((uint32_t)channel | IPC_PUBLISH_RECEIVE_EN_Msk);
   15dd0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
   15dd4:	515c      	str	r4, [r3, r5]
}
   15dd6:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_gppi_task_endpoint_clear(channels.ch.ppi, task_addr);
   15dd8:	b2e0      	uxtb	r0, r4
   15dda:	f7ff ff83 	bl	15ce4 <nrfx_gppi_task_endpoint_clear>
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
   15dde:	4b02      	ldr	r3, [pc, #8]	; (15de8 <ppi_ipc_to_rtc+0x3c>)
   15de0:	2200      	movs	r2, #0
   15de2:	515a      	str	r2, [r3, r5]
}
   15de4:	e7f7      	b.n	15dd6 <ppi_ipc_to_rtc+0x2a>
   15de6:	bf00      	nop
   15de8:	4002a080 	.word	0x4002a080

00015dec <remote_callback>:
{
   15dec:	b570      	push	{r4, r5, r6, lr}
   15dee:	b082      	sub	sp, #8
   15df0:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
   15df2:	f3c0 2607 	ubfx	r6, r0, #8, #8
   15df6:	4630      	mov	r0, r6
   15df8:	f017 f8c0 	bl	2cf7c <z_nrf_rtc_timer_compare_read>
   15dfc:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
   15dfe:	2100      	movs	r1, #0
   15e00:	4620      	mov	r0, r4
   15e02:	f7ff ffd3 	bl	15dac <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
   15e06:	2101      	movs	r1, #1
   15e08:	4620      	mov	r0, r4
   15e0a:	f7ff ffad 	bl	15d68 <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
   15e0e:	f105 0232 	add.w	r2, r5, #50	; 0x32
   15e12:	9401      	str	r4, [sp, #4]
   15e14:	4b04      	ldr	r3, [pc, #16]	; (15e28 <remote_callback+0x3c>)
   15e16:	9300      	str	r3, [sp, #0]
   15e18:	0052      	lsls	r2, r2, #1
   15e1a:	2300      	movs	r3, #0
   15e1c:	4630      	mov	r0, r6
   15e1e:	f017 f92d 	bl	2d07c <z_nrf_rtc_timer_set>
}
   15e22:	b002      	add	sp, #8
   15e24:	bd70      	pop	{r4, r5, r6, pc}
   15e26:	bf00      	nop
   15e28:	0003650f 	.word	0x0003650f

00015e2c <mbox_callback>:
{
   15e2c:	b510      	push	{r4, lr}
   15e2e:	b082      	sub	sp, #8
   15e30:	4614      	mov	r4, r2
	channel->dev = dev;
   15e32:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
   15e34:	9101      	str	r1, [sp, #4]
   15e36:	2100      	movs	r1, #0
   15e38:	4668      	mov	r0, sp
   15e3a:	f020 fb5b 	bl	364f4 <z_impl_mbox_set_enabled>
	__ASSERT_NO_MSG(err == 0);
   15e3e:	b920      	cbnz	r0, 15e4a <mbox_callback+0x1e>
	remote_callback(user_data);
   15e40:	4620      	mov	r0, r4
   15e42:	f7ff ffd3 	bl	15dec <remote_callback>
}
   15e46:	b002      	add	sp, #8
   15e48:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(err == 0);
   15e4a:	4c05      	ldr	r4, [pc, #20]	; (15e60 <mbox_callback+0x34>)
   15e4c:	23ca      	movs	r3, #202	; 0xca
   15e4e:	4622      	mov	r2, r4
   15e50:	4904      	ldr	r1, [pc, #16]	; (15e64 <mbox_callback+0x38>)
   15e52:	4805      	ldr	r0, [pc, #20]	; (15e68 <mbox_callback+0x3c>)
   15e54:	f020 fa1e 	bl	36294 <assert_print>
   15e58:	21ca      	movs	r1, #202	; 0xca
   15e5a:	4620      	mov	r0, r4
   15e5c:	f020 fa13 	bl	36286 <assert_post_action>
   15e60:	00040cdc 	.word	0x00040cdc
   15e64:	00040c1c 	.word	0x00040c1c
   15e68:	0003f72c 	.word	0x0003f72c

00015e6c <sync_rtc_setup>:

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
   15e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e6e:	b083      	sub	sp, #12
   15e70:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
   15e72:	1d38      	adds	r0, r7, #4
   15e74:	f018 fb16 	bl	2e4a4 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
   15e78:	4b31      	ldr	r3, [pc, #196]	; (15f40 <sync_rtc_setup+0xd4>)
   15e7a:	4298      	cmp	r0, r3
   15e7c:	d03b      	beq.n	15ef6 <sync_rtc_setup+0x8a>
		rv = -ENODEV;
   15e7e:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
   15e82:	466d      	mov	r5, sp
   15e84:	b088      	sub	sp, #32
   15e86:	466b      	mov	r3, sp
   15e88:	f113 0210 	adds.w	r2, r3, #16
   15e8c:	d052      	beq.n	15f34 <sync_rtc_setup+0xc8>
   15e8e:	210c      	movs	r1, #12
   15e90:	b13a      	cbz	r2, 15ea2 <sync_rtc_setup+0x36>
   15e92:	4608      	mov	r0, r1
   15e94:	2904      	cmp	r1, #4
   15e96:	dd01      	ble.n	15e9c <sync_rtc_setup+0x30>
   15e98:	4e2a      	ldr	r6, [pc, #168]	; (15f44 <sync_rtc_setup+0xd8>)
   15e9a:	615e      	str	r6, [r3, #20]
   15e9c:	2808      	cmp	r0, #8
   15e9e:	dd00      	ble.n	15ea2 <sync_rtc_setup+0x36>
   15ea0:	619c      	str	r4, [r3, #24]
   15ea2:	290b      	cmp	r1, #11
   15ea4:	dd49      	ble.n	15f3a <sync_rtc_setup+0xce>
   15ea6:	f04f 0c0c 	mov.w	ip, #12
   15eaa:	b13a      	cbz	r2, 15ebc <sync_rtc_setup+0x50>
   15eac:	2103      	movs	r1, #3
   15eae:	7039      	strb	r1, [r7, #0]
   15eb0:	2100      	movs	r1, #0
   15eb2:	7079      	strb	r1, [r7, #1]
   15eb4:	70b9      	strb	r1, [r7, #2]
   15eb6:	70f9      	strb	r1, [r7, #3]
   15eb8:	6838      	ldr	r0, [r7, #0]
   15eba:	6118      	str	r0, [r3, #16]
   15ebc:	2100      	movs	r1, #0
   15ebe:	f36f 0100 	bfc	r1, #0, #1
   15ec2:	f36f 0141 	bfc	r1, #1, #1
   15ec6:	f36f 0182 	bfc	r1, #2, #1
   15eca:	f36f 01c5 	bfc	r1, #3, #3
   15ece:	2301      	movs	r3, #1
   15ed0:	f363 1188 	bfi	r1, r3, #6, #3
   15ed4:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   15ed8:	f36c 2152 	bfi	r1, ip, #9, #10
   15edc:	f36f 41de 	bfc	r1, #19, #12
   15ee0:	f36f 71df 	bfc	r1, #31, #1
   15ee4:	2300      	movs	r3, #0
   15ee6:	4818      	ldr	r0, [pc, #96]	; (15f48 <sync_rtc_setup+0xdc>)
   15ee8:	f000 fd30 	bl	1694c <z_impl_z_log_msg_static_create>
   15eec:	46ad      	mov	sp, r5
	}

	return rv;
}
   15eee:	4620      	mov	r0, r4
   15ef0:	370c      	adds	r7, #12
   15ef2:	46bd      	mov	sp, r7
   15ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
   15ef6:	f017 f991 	bl	2d21c <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
   15efa:	1e04      	subs	r4, r0, #0
   15efc:	db16      	blt.n	15f2c <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
   15efe:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
   15f00:	2307      	movs	r3, #7
   15f02:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
   15f04:	2308      	movs	r3, #8
   15f06:	71fb      	strb	r3, [r7, #7]
	rv = mbox_rx_init((void *)channels.raw);
   15f08:	6878      	ldr	r0, [r7, #4]
   15f0a:	f7ff fe51 	bl	15bb0 <mbox_rx_init>
	if (rv < 0) {
   15f0e:	1e04      	subs	r4, r0, #0
   15f10:	dbb7      	blt.n	15e82 <sync_rtc_setup+0x16>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
   15f12:	793b      	ldrb	r3, [r7, #4]
   15f14:	2101      	movs	r1, #1
   15f16:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
   15f1a:	4a0c      	ldr	r2, [pc, #48]	; (15f4c <sync_rtc_setup+0xe0>)
   15f1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
   15f20:	6878      	ldr	r0, [r7, #4]
   15f22:	f7ff ff43 	bl	15dac <ppi_ipc_to_rtc>
	if (rv != 0) {
   15f26:	2c00      	cmp	r4, #0
   15f28:	d0e1      	beq.n	15eee <sync_rtc_setup+0x82>
   15f2a:	e7aa      	b.n	15e82 <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
   15f2c:	7938      	ldrb	r0, [r7, #4]
   15f2e:	f018 fac1 	bl	2e4b4 <nrfx_dppi_channel_free>
		goto bail;
   15f32:	e7f8      	b.n	15f26 <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
   15f34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   15f38:	e7aa      	b.n	15e90 <sync_rtc_setup+0x24>
   15f3a:	f06f 0c1b 	mvn.w	ip, #27
   15f3e:	e7b4      	b.n	15eaa <sync_rtc_setup+0x3e>
   15f40:	0bad0000 	.word	0x0bad0000
   15f44:	00040d28 	.word	0x00040d28
   15f48:	0003f4c0 	.word	0x0003f4c0
   15f4c:	40017000 	.word	0x40017000

00015f50 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15f50:	f027 ba6c 	b.w	3d42c <SystemInit>

00015f54 <soc_secure_gpio_pin_mcu_select>:
#include "tfm_platform_api.h"
#include "tfm_ioctl_api.h"

#if NRF_GPIO_HAS_SEL
void soc_secure_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_sel_t mcu)
{
   15f54:	b530      	push	{r4, r5, lr}
   15f56:	b083      	sub	sp, #12
	uint32_t result;
	enum tfm_platform_err_t err;

	err = tfm_platform_gpio_pin_mcu_select(pin_number, mcu, &result);
   15f58:	aa01      	add	r2, sp, #4
   15f5a:	f027 fa4f 	bl	3d3fc <tfm_platform_gpio_pin_mcu_select>
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
   15f5e:	b918      	cbnz	r0, 15f68 <soc_secure_gpio_pin_mcu_select+0x14>
	__ASSERT(result == 0, "GPIO service error (%d)", result);
   15f60:	9b01      	ldr	r3, [sp, #4]
   15f62:	b98b      	cbnz	r3, 15f88 <soc_secure_gpio_pin_mcu_select+0x34>
}
   15f64:	b003      	add	sp, #12
   15f66:	bd30      	pop	{r4, r5, pc}
   15f68:	4604      	mov	r4, r0
	__ASSERT(err == TFM_PLATFORM_ERR_SUCCESS, "TFM platform error (%d)", err);
   15f6a:	4d0f      	ldr	r5, [pc, #60]	; (15fa8 <soc_secure_gpio_pin_mcu_select+0x54>)
   15f6c:	2316      	movs	r3, #22
   15f6e:	462a      	mov	r2, r5
   15f70:	490e      	ldr	r1, [pc, #56]	; (15fac <soc_secure_gpio_pin_mcu_select+0x58>)
   15f72:	480f      	ldr	r0, [pc, #60]	; (15fb0 <soc_secure_gpio_pin_mcu_select+0x5c>)
   15f74:	f020 f98e 	bl	36294 <assert_print>
   15f78:	4621      	mov	r1, r4
   15f7a:	480e      	ldr	r0, [pc, #56]	; (15fb4 <soc_secure_gpio_pin_mcu_select+0x60>)
   15f7c:	f020 f98a 	bl	36294 <assert_print>
   15f80:	2116      	movs	r1, #22
   15f82:	4628      	mov	r0, r5
   15f84:	f020 f97f 	bl	36286 <assert_post_action>
	__ASSERT(result == 0, "GPIO service error (%d)", result);
   15f88:	4c07      	ldr	r4, [pc, #28]	; (15fa8 <soc_secure_gpio_pin_mcu_select+0x54>)
   15f8a:	2317      	movs	r3, #23
   15f8c:	4622      	mov	r2, r4
   15f8e:	490a      	ldr	r1, [pc, #40]	; (15fb8 <soc_secure_gpio_pin_mcu_select+0x64>)
   15f90:	4807      	ldr	r0, [pc, #28]	; (15fb0 <soc_secure_gpio_pin_mcu_select+0x5c>)
   15f92:	f020 f97f 	bl	36294 <assert_print>
   15f96:	9901      	ldr	r1, [sp, #4]
   15f98:	4808      	ldr	r0, [pc, #32]	; (15fbc <soc_secure_gpio_pin_mcu_select+0x68>)
   15f9a:	f020 f97b 	bl	36294 <assert_print>
   15f9e:	2117      	movs	r1, #23
   15fa0:	4620      	mov	r0, r4
   15fa2:	f020 f970 	bl	36286 <assert_post_action>
   15fa6:	bf00      	nop
   15fa8:	00040d5c 	.word	0x00040d5c
   15fac:	00040d98 	.word	0x00040d98
   15fb0:	0003f72c 	.word	0x0003f72c
   15fb4:	00040db8 	.word	0x00040db8
   15fb8:	00040dd4 	.word	0x00040dd4
   15fbc:	00040de0 	.word	0x00040de0

00015fc0 <log_backend_is_active>:
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   15fc0:	b110      	cbz	r0, 15fc8 <log_backend_is_active+0x8>
	return backend->cb->active;
   15fc2:	6843      	ldr	r3, [r0, #4]
}
   15fc4:	7958      	ldrb	r0, [r3, #5]
   15fc6:	4770      	bx	lr
{
   15fc8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   15fca:	4c06      	ldr	r4, [pc, #24]	; (15fe4 <log_backend_is_active+0x24>)
   15fcc:	f44f 7399 	mov.w	r3, #306	; 0x132
   15fd0:	4622      	mov	r2, r4
   15fd2:	4905      	ldr	r1, [pc, #20]	; (15fe8 <log_backend_is_active+0x28>)
   15fd4:	4805      	ldr	r0, [pc, #20]	; (15fec <log_backend_is_active+0x2c>)
   15fd6:	f020 f95d 	bl	36294 <assert_print>
   15fda:	f44f 7199 	mov.w	r1, #306	; 0x132
   15fde:	4620      	mov	r0, r4
   15fe0:	f020 f951 	bl	36286 <assert_post_action>
   15fe4:	00040dfc 	.word	0x00040dfc
   15fe8:	00040e34 	.word	0x00040e34
   15fec:	0003f72c 	.word	0x0003f72c

00015ff0 <log_backend_init>:
{
   15ff0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   15ff2:	b120      	cbz	r0, 15ffe <log_backend_init+0xe>
	if (backend->api->init) {
   15ff4:	6802      	ldr	r2, [r0, #0]
   15ff6:	68d2      	ldr	r2, [r2, #12]
   15ff8:	b102      	cbz	r2, 15ffc <log_backend_init+0xc>
		backend->api->init(backend);
   15ffa:	4790      	blx	r2
}
   15ffc:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   15ffe:	4c05      	ldr	r4, [pc, #20]	; (16014 <log_backend_init+0x24>)
   16000:	238a      	movs	r3, #138	; 0x8a
   16002:	4622      	mov	r2, r4
   16004:	4904      	ldr	r1, [pc, #16]	; (16018 <log_backend_init+0x28>)
   16006:	4805      	ldr	r0, [pc, #20]	; (1601c <log_backend_init+0x2c>)
   16008:	f020 f944 	bl	36294 <assert_print>
   1600c:	218a      	movs	r1, #138	; 0x8a
   1600e:	4620      	mov	r0, r4
   16010:	f020 f939 	bl	36286 <assert_post_action>
   16014:	00040dfc 	.word	0x00040dfc
   16018:	00040e34 	.word	0x00040e34
   1601c:	0003f72c 	.word	0x0003f72c

00016020 <log_backend_is_ready>:
{
   16020:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   16022:	b120      	cbz	r0, 1602e <log_backend_is_ready+0xe>
	if (backend->api->is_ready != NULL) {
   16024:	6802      	ldr	r2, [r0, #0]
   16026:	6912      	ldr	r2, [r2, #16]
   16028:	b162      	cbz	r2, 16044 <log_backend_is_ready+0x24>
		return backend->api->is_ready(backend);
   1602a:	4790      	blx	r2
}
   1602c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   1602e:	4c06      	ldr	r4, [pc, #24]	; (16048 <log_backend_is_ready+0x28>)
   16030:	239d      	movs	r3, #157	; 0x9d
   16032:	4622      	mov	r2, r4
   16034:	4905      	ldr	r1, [pc, #20]	; (1604c <log_backend_is_ready+0x2c>)
   16036:	4806      	ldr	r0, [pc, #24]	; (16050 <log_backend_is_ready+0x30>)
   16038:	f020 f92c 	bl	36294 <assert_print>
   1603c:	219d      	movs	r1, #157	; 0x9d
   1603e:	4620      	mov	r0, r4
   16040:	f020 f921 	bl	36286 <assert_post_action>
	return 0;
   16044:	2000      	movs	r0, #0
   16046:	e7f1      	b.n	1602c <log_backend_is_ready+0xc>
   16048:	00040dfc 	.word	0x00040dfc
   1604c:	00040e34 	.word	0x00040e34
   16050:	0003f72c 	.word	0x0003f72c

00016054 <log_backend_panic>:
{
   16054:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   16056:	b118      	cbz	r0, 16060 <log_backend_panic+0xc>
	backend->api->panic(backend);
   16058:	6802      	ldr	r2, [r0, #0]
   1605a:	6892      	ldr	r2, [r2, #8]
   1605c:	4790      	blx	r2
}
   1605e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   16060:	4c05      	ldr	r4, [pc, #20]	; (16078 <log_backend_panic+0x24>)
   16062:	23cf      	movs	r3, #207	; 0xcf
   16064:	4622      	mov	r2, r4
   16066:	4905      	ldr	r1, [pc, #20]	; (1607c <log_backend_panic+0x28>)
   16068:	4805      	ldr	r0, [pc, #20]	; (16080 <log_backend_panic+0x2c>)
   1606a:	f020 f913 	bl	36294 <assert_print>
   1606e:	21cf      	movs	r1, #207	; 0xcf
   16070:	4620      	mov	r0, r4
   16072:	f020 f908 	bl	36286 <assert_post_action>
   16076:	bf00      	nop
   16078:	00040dfc 	.word	0x00040dfc
   1607c:	00040e34 	.word	0x00040e34
   16080:	0003f72c 	.word	0x0003f72c

00016084 <log_backend_dropped>:
{
   16084:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   16086:	b120      	cbz	r0, 16092 <log_backend_dropped+0xe>
	if (backend->api->dropped != NULL) {
   16088:	6802      	ldr	r2, [r0, #0]
   1608a:	6852      	ldr	r2, [r2, #4]
   1608c:	b102      	cbz	r2, 16090 <log_backend_dropped+0xc>
		backend->api->dropped(backend, cnt);
   1608e:	4790      	blx	r2
}
   16090:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   16092:	4c05      	ldr	r4, [pc, #20]	; (160a8 <log_backend_dropped+0x24>)
   16094:	23c1      	movs	r3, #193	; 0xc1
   16096:	4622      	mov	r2, r4
   16098:	4904      	ldr	r1, [pc, #16]	; (160ac <log_backend_dropped+0x28>)
   1609a:	4805      	ldr	r0, [pc, #20]	; (160b0 <log_backend_dropped+0x2c>)
   1609c:	f020 f8fa 	bl	36294 <assert_print>
   160a0:	21c1      	movs	r1, #193	; 0xc1
   160a2:	4620      	mov	r0, r4
   160a4:	f020 f8ef 	bl	36286 <assert_post_action>
   160a8:	00040dfc 	.word	0x00040dfc
   160ac:	00040e34 	.word	0x00040e34
   160b0:	0003f72c 	.word	0x0003f72c

000160b4 <log_backend_msg_process>:
{
   160b4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   160b6:	b120      	cbz	r0, 160c2 <log_backend_msg_process+0xe>
	__ASSERT_NO_MSG(msg != NULL);
   160b8:	b171      	cbz	r1, 160d8 <log_backend_msg_process+0x24>
	backend->api->process(backend, msg);
   160ba:	6802      	ldr	r2, [r0, #0]
   160bc:	6812      	ldr	r2, [r2, #0]
   160be:	4790      	blx	r2
}
   160c0:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   160c2:	4c0b      	ldr	r4, [pc, #44]	; (160f0 <log_backend_msg_process+0x3c>)
   160c4:	23b1      	movs	r3, #177	; 0xb1
   160c6:	4622      	mov	r2, r4
   160c8:	490a      	ldr	r1, [pc, #40]	; (160f4 <log_backend_msg_process+0x40>)
   160ca:	480b      	ldr	r0, [pc, #44]	; (160f8 <log_backend_msg_process+0x44>)
   160cc:	f020 f8e2 	bl	36294 <assert_print>
   160d0:	21b1      	movs	r1, #177	; 0xb1
   160d2:	4620      	mov	r0, r4
   160d4:	f020 f8d7 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(msg != NULL);
   160d8:	4c05      	ldr	r4, [pc, #20]	; (160f0 <log_backend_msg_process+0x3c>)
   160da:	23b2      	movs	r3, #178	; 0xb2
   160dc:	4622      	mov	r2, r4
   160de:	4907      	ldr	r1, [pc, #28]	; (160fc <log_backend_msg_process+0x48>)
   160e0:	4805      	ldr	r0, [pc, #20]	; (160f8 <log_backend_msg_process+0x44>)
   160e2:	f020 f8d7 	bl	36294 <assert_print>
   160e6:	21b2      	movs	r1, #178	; 0xb2
   160e8:	4620      	mov	r0, r4
   160ea:	f020 f8cc 	bl	36286 <assert_post_action>
   160ee:	bf00      	nop
   160f0:	00040dfc 	.word	0x00040dfc
   160f4:	00040e34 	.word	0x00040e34
   160f8:	0003f72c 	.word	0x0003f72c
   160fc:	00040e4c 	.word	0x00040e4c

00016100 <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
   16100:	b538      	push	{r3, r4, r5, lr}
   16102:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   16104:	4c14      	ldr	r4, [pc, #80]	; (16158 <msg_process+0x58>)
   16106:	e000      	b.n	1610a <msg_process+0xa>
   16108:	3410      	adds	r4, #16
   1610a:	4b14      	ldr	r3, [pc, #80]	; (1615c <msg_process+0x5c>)
   1610c:	429c      	cmp	r4, r3
   1610e:	d812      	bhi.n	16136 <msg_process+0x36>
   16110:	4b12      	ldr	r3, [pc, #72]	; (1615c <msg_process+0x5c>)
   16112:	429c      	cmp	r4, r3
   16114:	d21f      	bcs.n	16156 <msg_process+0x56>
		if (log_backend_is_active(backend) &&
   16116:	4620      	mov	r0, r4
   16118:	f7ff ff52 	bl	15fc0 <log_backend_is_active>
   1611c:	2800      	cmp	r0, #0
   1611e:	d0f3      	beq.n	16108 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
   16120:	4629      	mov	r1, r5
   16122:	4620      	mov	r0, r4
   16124:	f020 fa2c 	bl	36580 <msg_filter_check>
		if (log_backend_is_active(backend) &&
   16128:	2800      	cmp	r0, #0
   1612a:	d0ed      	beq.n	16108 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
   1612c:	4629      	mov	r1, r5
   1612e:	4620      	mov	r0, r4
   16130:	f7ff ffc0 	bl	160b4 <log_backend_msg_process>
   16134:	e7e8      	b.n	16108 <msg_process+0x8>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   16136:	4c0a      	ldr	r4, [pc, #40]	; (16160 <msg_process+0x60>)
   16138:	f240 13c1 	movw	r3, #449	; 0x1c1
   1613c:	4622      	mov	r2, r4
   1613e:	4909      	ldr	r1, [pc, #36]	; (16164 <msg_process+0x64>)
   16140:	4809      	ldr	r0, [pc, #36]	; (16168 <msg_process+0x68>)
   16142:	f020 f8a7 	bl	36294 <assert_print>
   16146:	4809      	ldr	r0, [pc, #36]	; (1616c <msg_process+0x6c>)
   16148:	f020 f8a4 	bl	36294 <assert_print>
   1614c:	f240 11c1 	movw	r1, #449	; 0x1c1
   16150:	4620      	mov	r0, r4
   16152:	f020 f898 	bl	36286 <assert_post_action>
		}
	}
}
   16156:	bd38      	pop	{r3, r4, r5, pc}
   16158:	0003f4d0 	.word	0x0003f4d0
   1615c:	0003f4f0 	.word	0x0003f4f0
   16160:	00040e60 	.word	0x00040e60
   16164:	00040e90 	.word	0x00040e90
   16168:	0003f72c 	.word	0x0003f72c
   1616c:	00040eb4 	.word	0x00040eb4

00016170 <log_backend_notify>:
 * @param arg Pointer to the argument(s).
 */
static inline void log_backend_notify(const struct log_backend *const backend,
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
   16170:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   16172:	b130      	cbz	r0, 16182 <log_backend_notify+0x12>
   16174:	4603      	mov	r3, r0

	if (backend->api->notify) {
   16176:	6800      	ldr	r0, [r0, #0]
   16178:	6984      	ldr	r4, [r0, #24]
   1617a:	b10c      	cbz	r4, 16180 <log_backend_notify+0x10>
		backend->api->notify(backend, event, arg);
   1617c:	4618      	mov	r0, r3
   1617e:	47a0      	blx	r4
	}
}
   16180:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(backend != NULL);
   16182:	4c06      	ldr	r4, [pc, #24]	; (1619c <log_backend_notify+0x2c>)
   16184:	f240 1361 	movw	r3, #353	; 0x161
   16188:	4622      	mov	r2, r4
   1618a:	4905      	ldr	r1, [pc, #20]	; (161a0 <log_backend_notify+0x30>)
   1618c:	4805      	ldr	r0, [pc, #20]	; (161a4 <log_backend_notify+0x34>)
   1618e:	f020 f881 	bl	36294 <assert_print>
   16192:	f240 1161 	movw	r1, #353	; 0x161
   16196:	4620      	mov	r0, r4
   16198:	f020 f875 	bl	36286 <assert_post_action>
   1619c:	00040dfc 	.word	0x00040dfc
   161a0:	00040e34 	.word	0x00040e34
   161a4:	0003f72c 	.word	0x0003f72c

000161a8 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
   161a8:	b570      	push	{r4, r5, r6, lr}
   161aa:	4606      	mov	r6, r0
   161ac:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   161ae:	4c0f      	ldr	r4, [pc, #60]	; (161ec <log_backend_notify_all+0x44>)
   161b0:	e005      	b.n	161be <log_backend_notify_all+0x16>
		log_backend_notify(backend, event, arg);
   161b2:	462a      	mov	r2, r5
   161b4:	4631      	mov	r1, r6
   161b6:	4620      	mov	r0, r4
   161b8:	f7ff ffda 	bl	16170 <log_backend_notify>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   161bc:	3410      	adds	r4, #16
   161be:	4b0c      	ldr	r3, [pc, #48]	; (161f0 <log_backend_notify_all+0x48>)
   161c0:	429c      	cmp	r4, r3
   161c2:	d803      	bhi.n	161cc <log_backend_notify_all+0x24>
   161c4:	4b0a      	ldr	r3, [pc, #40]	; (161f0 <log_backend_notify_all+0x48>)
   161c6:	429c      	cmp	r4, r3
   161c8:	d3f3      	bcc.n	161b2 <log_backend_notify_all+0xa>
	}
}
   161ca:	bd70      	pop	{r4, r5, r6, pc}
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   161cc:	4c09      	ldr	r4, [pc, #36]	; (161f4 <log_backend_notify_all+0x4c>)
   161ce:	f240 333b 	movw	r3, #827	; 0x33b
   161d2:	4622      	mov	r2, r4
   161d4:	4908      	ldr	r1, [pc, #32]	; (161f8 <log_backend_notify_all+0x50>)
   161d6:	4809      	ldr	r0, [pc, #36]	; (161fc <log_backend_notify_all+0x54>)
   161d8:	f020 f85c 	bl	36294 <assert_print>
   161dc:	4808      	ldr	r0, [pc, #32]	; (16200 <log_backend_notify_all+0x58>)
   161de:	f020 f859 	bl	36294 <assert_print>
   161e2:	f240 313b 	movw	r1, #827	; 0x33b
   161e6:	4620      	mov	r0, r4
   161e8:	f020 f84d 	bl	36286 <assert_post_action>
   161ec:	0003f4d0 	.word	0x0003f4d0
   161f0:	0003f4f0 	.word	0x0003f4f0
   161f4:	00040e60 	.word	0x00040e60
   161f8:	00040e90 	.word	0x00040e90
   161fc:	0003f72c 	.word	0x0003f72c
   16200:	00040eb4 	.word	0x00040eb4

00016204 <activate_foreach_backend>:
{
   16204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16208:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
   1620a:	4605      	mov	r5, r0
	while (mask_cpy) {
   1620c:	b1ed      	cbz	r5, 1624a <activate_foreach_backend+0x46>
		uint32_t i = __builtin_ctz(mask_cpy);
   1620e:	fa95 f6a5 	rbit	r6, r5
   16212:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
   16216:	4c0e      	ldr	r4, [pc, #56]	; (16250 <activate_foreach_backend+0x4c>)
   16218:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
   1621c:	2301      	movs	r3, #1
   1621e:	40b3      	lsls	r3, r6
   16220:	ea6f 0803 	mvn.w	r8, r3
   16224:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   16228:	7b23      	ldrb	r3, [r4, #12]
   1622a:	2b00      	cmp	r3, #0
   1622c:	d0ee      	beq.n	1620c <activate_foreach_backend+0x8>
   1622e:	4620      	mov	r0, r4
   16230:	f7ff fef6 	bl	16020 <log_backend_is_ready>
   16234:	2800      	cmp	r0, #0
   16236:	d1e9      	bne.n	1620c <activate_foreach_backend+0x8>
			mask &= ~BIT(i);
   16238:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
   1623c:	6863      	ldr	r3, [r4, #4]
			log_backend_enable(backend,
   1623e:	2204      	movs	r2, #4
   16240:	6819      	ldr	r1, [r3, #0]
   16242:	4620      	mov	r0, r4
   16244:	f000 fb54 	bl	168f0 <log_backend_enable>
   16248:	e7e0      	b.n	1620c <activate_foreach_backend+0x8>
}
   1624a:	4638      	mov	r0, r7
   1624c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16250:	0003f4d0 	.word	0x0003f4d0

00016254 <z_log_init>:
{
   16254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   16258:	4b2f      	ldr	r3, [pc, #188]	; (16318 <z_log_init+0xc4>)
   1625a:	4a30      	ldr	r2, [pc, #192]	; (1631c <z_log_init+0xc8>)
   1625c:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   1625e:	2b9f      	cmp	r3, #159	; 0x9f
   16260:	d80e      	bhi.n	16280 <z_log_init+0x2c>
   16262:	4680      	mov	r8, r0
   16264:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16266:	4b2e      	ldr	r3, [pc, #184]	; (16320 <z_log_init+0xcc>)
   16268:	e8d3 5fef 	ldaex	r5, [r3]
   1626c:	1c6a      	adds	r2, r5, #1
   1626e:	e8c3 2fe1 	stlex	r1, r2, [r3]
   16272:	2900      	cmp	r1, #0
   16274:	d1f8      	bne.n	16268 <z_log_init+0x14>
	if (atomic_inc(&initialized) != 0) {
   16276:	2d00      	cmp	r5, #0
   16278:	d14a      	bne.n	16310 <z_log_init+0xbc>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1627a:	4c28      	ldr	r4, [pc, #160]	; (1631c <z_log_init+0xc8>)
	int i = 0;
   1627c:	2600      	movs	r6, #0
   1627e:	e014      	b.n	162aa <z_log_init+0x56>
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   16280:	4c28      	ldr	r4, [pc, #160]	; (16324 <z_log_init+0xd0>)
   16282:	f240 1315 	movw	r3, #277	; 0x115
   16286:	4622      	mov	r2, r4
   16288:	4927      	ldr	r1, [pc, #156]	; (16328 <z_log_init+0xd4>)
   1628a:	4828      	ldr	r0, [pc, #160]	; (1632c <z_log_init+0xd8>)
   1628c:	f020 f802 	bl	36294 <assert_print>
   16290:	f240 1115 	movw	r1, #277	; 0x115
   16294:	4620      	mov	r0, r4
   16296:	f01f fff6 	bl	36286 <assert_post_action>
						   backend->cb->ctx,
   1629a:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
   1629c:	2204      	movs	r2, #4
   1629e:	6819      	ldr	r1, [r3, #0]
   162a0:	4620      	mov	r0, r4
   162a2:	f000 fb25 	bl	168f0 <log_backend_enable>
			i++;
   162a6:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   162a8:	3410      	adds	r4, #16
   162aa:	4b1b      	ldr	r3, [pc, #108]	; (16318 <z_log_init+0xc4>)
   162ac:	429c      	cmp	r4, r3
   162ae:	d811      	bhi.n	162d4 <z_log_init+0x80>
   162b0:	4b19      	ldr	r3, [pc, #100]	; (16318 <z_log_init+0xc4>)
   162b2:	429c      	cmp	r4, r3
   162b4:	d21e      	bcs.n	162f4 <z_log_init+0xa0>
		if (backend->autostart) {
   162b6:	7b23      	ldrb	r3, [r4, #12]
   162b8:	2b00      	cmp	r3, #0
   162ba:	d0f5      	beq.n	162a8 <z_log_init+0x54>
			log_backend_init(backend);
   162bc:	4620      	mov	r0, r4
   162be:	f7ff fe97 	bl	15ff0 <log_backend_init>
			if (log_backend_is_ready(backend) == 0) {
   162c2:	4620      	mov	r0, r4
   162c4:	f7ff feac 	bl	16020 <log_backend_is_ready>
   162c8:	2800      	cmp	r0, #0
   162ca:	d0e6      	beq.n	1629a <z_log_init+0x46>
				mask |= BIT(i);
   162cc:	2301      	movs	r3, #1
   162ce:	40b3      	lsls	r3, r6
   162d0:	431d      	orrs	r5, r3
   162d2:	e7e8      	b.n	162a6 <z_log_init+0x52>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   162d4:	4c13      	ldr	r4, [pc, #76]	; (16324 <z_log_init+0xd0>)
   162d6:	f44f 7391 	mov.w	r3, #290	; 0x122
   162da:	4622      	mov	r2, r4
   162dc:	4914      	ldr	r1, [pc, #80]	; (16330 <z_log_init+0xdc>)
   162de:	4813      	ldr	r0, [pc, #76]	; (1632c <z_log_init+0xd8>)
   162e0:	f01f ffd8 	bl	36294 <assert_print>
   162e4:	4813      	ldr	r0, [pc, #76]	; (16334 <z_log_init+0xe0>)
   162e6:	f01f ffd5 	bl	36294 <assert_print>
   162ea:	f44f 7191 	mov.w	r1, #290	; 0x122
   162ee:	4620      	mov	r0, r4
   162f0:	f01f ffc9 	bl	36286 <assert_post_action>
	if (blocking) {
   162f4:	f1b8 0f00 	cmp.w	r8, #0
   162f8:	d00b      	beq.n	16312 <z_log_init+0xbe>
		while (mask) {
   162fa:	b155      	cbz	r5, 16312 <z_log_init+0xbe>
			mask = activate_foreach_backend(mask);
   162fc:	4628      	mov	r0, r5
   162fe:	f7ff ff81 	bl	16204 <activate_foreach_backend>
   16302:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   16304:	2f00      	cmp	r7, #0
   16306:	d0f8      	beq.n	162fa <z_log_init+0xa6>
				k_msleep(10);
   16308:	200a      	movs	r0, #10
   1630a:	f020 f93f 	bl	3658c <k_msleep>
   1630e:	e7f4      	b.n	162fa <z_log_init+0xa6>
		return 0;
   16310:	2500      	movs	r5, #0
}
   16312:	4628      	mov	r0, r5
   16314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16318:	0003f4f0 	.word	0x0003f4f0
   1631c:	0003f4d0 	.word	0x0003f4d0
   16320:	2000be70 	.word	0x2000be70
   16324:	00040e60 	.word	0x00040e60
   16328:	00040ed4 	.word	0x00040ed4
   1632c:	0003f72c 	.word	0x0003f72c
   16330:	00040e90 	.word	0x00040e90
   16334:	00040eb4 	.word	0x00040eb4

00016338 <thread_set>:
{
   16338:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   1633a:	4b06      	ldr	r3, [pc, #24]	; (16354 <thread_set+0x1c>)
   1633c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1633e:	b118      	cbz	r0, 16348 <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   16340:	4b05      	ldr	r3, [pc, #20]	; (16358 <thread_set+0x20>)
   16342:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   16344:	2b09      	cmp	r3, #9
   16346:	dc00      	bgt.n	1634a <thread_set+0x12>
}
   16348:	bd08      	pop	{r3, pc}
   1634a:	4804      	ldr	r0, [pc, #16]	; (1635c <thread_set+0x24>)
   1634c:	f01b fd48 	bl	31de0 <z_impl_k_sem_give>
}
   16350:	e7fa      	b.n	16348 <thread_set+0x10>
   16352:	bf00      	nop
   16354:	2000be64 	.word	0x2000be64
   16358:	2000be6c 	.word	0x2000be6c
   1635c:	20008994 	.word	0x20008994

00016360 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   16360:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   16362:	4802      	ldr	r0, [pc, #8]	; (1636c <log_process_thread_timer_expiry_fn+0xc>)
   16364:	f01b fd3c 	bl	31de0 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   16368:	bd08      	pop	{r3, pc}
   1636a:	bf00      	nop
   1636c:	20008994 	.word	0x20008994

00016370 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   16370:	b530      	push	{r4, r5, lr}
   16372:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   16374:	2200      	movs	r2, #0
   16376:	490f      	ldr	r1, [pc, #60]	; (163b4 <enable_logger+0x44>)
   16378:	480f      	ldr	r0, [pc, #60]	; (163b8 <enable_logger+0x48>)
   1637a:	f028 fcb2 	bl	3ece2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1637e:	4d0f      	ldr	r5, [pc, #60]	; (163bc <enable_logger+0x4c>)
   16380:	2200      	movs	r2, #0
   16382:	2300      	movs	r3, #0
   16384:	e9cd 2306 	strd	r2, r3, [sp, #24]
   16388:	2400      	movs	r4, #0
   1638a:	9404      	str	r4, [sp, #16]
   1638c:	230e      	movs	r3, #14
   1638e:	9303      	str	r3, [sp, #12]
   16390:	9402      	str	r4, [sp, #8]
   16392:	9401      	str	r4, [sp, #4]
   16394:	9400      	str	r4, [sp, #0]
   16396:	4b0a      	ldr	r3, [pc, #40]	; (163c0 <enable_logger+0x50>)
   16398:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1639c:	4909      	ldr	r1, [pc, #36]	; (163c4 <enable_logger+0x54>)
   1639e:	4628      	mov	r0, r5
   163a0:	f01b f972 	bl	31688 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   163a4:	4908      	ldr	r1, [pc, #32]	; (163c8 <enable_logger+0x58>)
   163a6:	4628      	mov	r0, r5
   163a8:	f01b f808 	bl	313bc <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   163ac:	4620      	mov	r0, r4
   163ae:	b009      	add	sp, #36	; 0x24
   163b0:	bd30      	pop	{r4, r5, pc}
   163b2:	bf00      	nop
   163b4:	00016361 	.word	0x00016361
   163b8:	2000ae38 	.word	0x2000ae38
   163bc:	20008d78 	.word	0x20008d78
   163c0:	000167b5 	.word	0x000167b5
   163c4:	2000dac0 	.word	0x2000dac0
   163c8:	00040ef8 	.word	0x00040ef8

000163cc <log_format_func_t_get>:
}
   163cc:	4b01      	ldr	r3, [pc, #4]	; (163d4 <log_format_func_t_get+0x8>)
   163ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   163d2:	4770      	bx	lr
   163d4:	00040f30 	.word	0x00040f30

000163d8 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   163d8:	b148      	cbz	r0, 163ee <log_set_timestamp_func+0x16>
{
   163da:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   163dc:	4a05      	ldr	r2, [pc, #20]	; (163f4 <log_set_timestamp_func+0x1c>)
   163de:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
   163e0:	4b05      	ldr	r3, [pc, #20]	; (163f8 <log_set_timestamp_func+0x20>)
   163e2:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
   163e4:	4608      	mov	r0, r1
   163e6:	f000 fdaf 	bl	16f48 <log_output_timestamp_freq_set>
	return 0;
   163ea:	2000      	movs	r0, #0
}
   163ec:	bd08      	pop	{r3, pc}
		return -EINVAL;
   163ee:	f06f 0015 	mvn.w	r0, #21
}
   163f2:	4770      	bx	lr
   163f4:	20008324 	.word	0x20008324
   163f8:	2000be60 	.word	0x2000be60

000163fc <z_log_notify_backend_enabled>:
{
   163fc:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   163fe:	4b05      	ldr	r3, [pc, #20]	; (16414 <z_log_notify_backend_enabled+0x18>)
   16400:	781b      	ldrb	r3, [r3, #0]
   16402:	b11b      	cbz	r3, 1640c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   16404:	4b03      	ldr	r3, [pc, #12]	; (16414 <z_log_notify_backend_enabled+0x18>)
   16406:	2201      	movs	r2, #1
   16408:	701a      	strb	r2, [r3, #0]
}
   1640a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   1640c:	4802      	ldr	r0, [pc, #8]	; (16418 <z_log_notify_backend_enabled+0x1c>)
   1640e:	f01b fce7 	bl	31de0 <z_impl_k_sem_give>
}
   16412:	e7f7      	b.n	16404 <z_log_notify_backend_enabled+0x8>
   16414:	2000caad 	.word	0x2000caad
   16418:	20008994 	.word	0x20008994

0001641c <z_log_dropped>:
   1641c:	4b09      	ldr	r3, [pc, #36]	; (16444 <z_log_dropped+0x28>)
   1641e:	e8d3 1fef 	ldaex	r1, [r3]
   16422:	3101      	adds	r1, #1
   16424:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16428:	2a00      	cmp	r2, #0
   1642a:	d1f8      	bne.n	1641e <z_log_dropped+0x2>
	if (buffered) {
   1642c:	b900      	cbnz	r0, 16430 <z_log_dropped+0x14>
}
   1642e:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16430:	4b05      	ldr	r3, [pc, #20]	; (16448 <z_log_dropped+0x2c>)
   16432:	e8d3 1fef 	ldaex	r1, [r3]
   16436:	3901      	subs	r1, #1
   16438:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1643c:	2a00      	cmp	r2, #0
   1643e:	d0f6      	beq.n	1642e <z_log_dropped+0x12>
   16440:	e7f7      	b.n	16432 <z_log_dropped+0x16>
   16442:	bf00      	nop
   16444:	2000be68 	.word	0x2000be68
   16448:	2000be6c 	.word	0x2000be6c

0001644c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1644c:	4b04      	ldr	r3, [pc, #16]	; (16460 <z_log_dropped_read_and_clear+0x14>)
}
   1644e:	2000      	movs	r0, #0
   16450:	4601      	mov	r1, r0
   16452:	e8d3 0fef 	ldaex	r0, [r3]
   16456:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1645a:	2a00      	cmp	r2, #0
   1645c:	d1f9      	bne.n	16452 <z_log_dropped_read_and_clear+0x6>
   1645e:	4770      	bx	lr
   16460:	2000be68 	.word	0x2000be68

00016464 <dropped_notify>:
{
   16464:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   16466:	f7ff fff1 	bl	1644c <z_log_dropped_read_and_clear>
   1646a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1646c:	4c11      	ldr	r4, [pc, #68]	; (164b4 <dropped_notify+0x50>)
   1646e:	e000      	b.n	16472 <dropped_notify+0xe>
   16470:	3410      	adds	r4, #16
   16472:	4b11      	ldr	r3, [pc, #68]	; (164b8 <dropped_notify+0x54>)
   16474:	429c      	cmp	r4, r3
   16476:	d80c      	bhi.n	16492 <dropped_notify+0x2e>
   16478:	4b0f      	ldr	r3, [pc, #60]	; (164b8 <dropped_notify+0x54>)
   1647a:	429c      	cmp	r4, r3
   1647c:	d219      	bcs.n	164b2 <dropped_notify+0x4e>
		if (log_backend_is_active(backend)) {
   1647e:	4620      	mov	r0, r4
   16480:	f7ff fd9e 	bl	15fc0 <log_backend_is_active>
   16484:	2800      	cmp	r0, #0
   16486:	d0f3      	beq.n	16470 <dropped_notify+0xc>
			log_backend_dropped(backend, dropped);
   16488:	4629      	mov	r1, r5
   1648a:	4620      	mov	r0, r4
   1648c:	f7ff fdfa 	bl	16084 <log_backend_dropped>
   16490:	e7ee      	b.n	16470 <dropped_notify+0xc>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   16492:	4c0a      	ldr	r4, [pc, #40]	; (164bc <dropped_notify+0x58>)
   16494:	f240 13cd 	movw	r3, #461	; 0x1cd
   16498:	4622      	mov	r2, r4
   1649a:	4909      	ldr	r1, [pc, #36]	; (164c0 <dropped_notify+0x5c>)
   1649c:	4809      	ldr	r0, [pc, #36]	; (164c4 <dropped_notify+0x60>)
   1649e:	f01f fef9 	bl	36294 <assert_print>
   164a2:	4809      	ldr	r0, [pc, #36]	; (164c8 <dropped_notify+0x64>)
   164a4:	f01f fef6 	bl	36294 <assert_print>
   164a8:	f240 11cd 	movw	r1, #461	; 0x1cd
   164ac:	4620      	mov	r0, r4
   164ae:	f01f feea 	bl	36286 <assert_post_action>
}
   164b2:	bd38      	pop	{r3, r4, r5, pc}
   164b4:	0003f4d0 	.word	0x0003f4d0
   164b8:	0003f4f0 	.word	0x0003f4f0
   164bc:	00040e60 	.word	0x00040e60
   164c0:	00040e90 	.word	0x00040e90
   164c4:	0003f72c 	.word	0x0003f72c
   164c8:	00040eb4 	.word	0x00040eb4

000164cc <z_log_dropped_pending>:
	return dropped_cnt > 0;
   164cc:	4b03      	ldr	r3, [pc, #12]	; (164dc <z_log_dropped_pending+0x10>)
   164ce:	6818      	ldr	r0, [r3, #0]
}
   164d0:	2800      	cmp	r0, #0
   164d2:	bfd4      	ite	le
   164d4:	2000      	movle	r0, #0
   164d6:	2001      	movgt	r0, #1
   164d8:	4770      	bx	lr
   164da:	bf00      	nop
   164dc:	2000be68 	.word	0x2000be68

000164e0 <z_log_msg_init>:
{
   164e0:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   164e2:	4c04      	ldr	r4, [pc, #16]	; (164f4 <z_log_msg_init+0x14>)
   164e4:	4904      	ldr	r1, [pc, #16]	; (164f8 <z_log_msg_init+0x18>)
   164e6:	4620      	mov	r0, r4
   164e8:	f7fe fffa 	bl	154e0 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   164ec:	4b03      	ldr	r3, [pc, #12]	; (164fc <z_log_msg_init+0x1c>)
   164ee:	601c      	str	r4, [r3, #0]
}
   164f0:	bd10      	pop	{r4, pc}
   164f2:	bf00      	nop
   164f4:	20008854 	.word	0x20008854
   164f8:	00040f1c 	.word	0x00040f1c
   164fc:	2000be5c 	.word	0x2000be5c

00016500 <log_core_init>:
{
   16500:	b508      	push	{r3, lr}
	panic_mode = false;
   16502:	2300      	movs	r3, #0
   16504:	4a05      	ldr	r2, [pc, #20]	; (1651c <log_core_init+0x1c>)
   16506:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   16508:	4a05      	ldr	r2, [pc, #20]	; (16520 <log_core_init+0x20>)
   1650a:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   1650c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   16510:	4804      	ldr	r0, [pc, #16]	; (16524 <log_core_init+0x24>)
   16512:	f7ff ff61 	bl	163d8 <log_set_timestamp_func>
		z_log_msg_init();
   16516:	f7ff ffe3 	bl	164e0 <z_log_msg_init>
}
   1651a:	bd08      	pop	{r3, pc}
   1651c:	2000caae 	.word	0x2000caae
   16520:	2000be68 	.word	0x2000be68
   16524:	00036585 	.word	0x00036585

00016528 <z_log_msg_alloc>:
{
   16528:	b508      	push	{r3, lr}
   1652a:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
   1652c:	4801      	ldr	r0, [pc, #4]	; (16534 <z_log_msg_alloc+0xc>)
   1652e:	f020 f843 	bl	365b8 <msg_alloc>
}
   16532:	bd08      	pop	{r3, pc}
   16534:	20008854 	.word	0x20008854

00016538 <z_log_msg_local_claim>:
{
   16538:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1653a:	4802      	ldr	r0, [pc, #8]	; (16544 <z_log_msg_local_claim+0xc>)
   1653c:	f7ff f962 	bl	15804 <mpsc_pbuf_claim>
}
   16540:	bd08      	pop	{r3, pc}
   16542:	bf00      	nop
   16544:	20008854 	.word	0x20008854

00016548 <z_log_msg_free>:
{
   16548:	b508      	push	{r3, lr}
   1654a:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
   1654c:	4b02      	ldr	r3, [pc, #8]	; (16558 <z_log_msg_free+0x10>)
   1654e:	6818      	ldr	r0, [r3, #0]
   16550:	f020 f838 	bl	365c4 <msg_free>
}
   16554:	bd08      	pop	{r3, pc}
   16556:	bf00      	nop
   16558:	2000be5c 	.word	0x2000be5c

0001655c <z_log_msg_pending>:
{
   1655c:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
   1655e:	4802      	ldr	r0, [pc, #8]	; (16568 <z_log_msg_pending+0xc>)
   16560:	f020 f834 	bl	365cc <msg_pending>
}
   16564:	bd08      	pop	{r3, pc}
   16566:	bf00      	nop
   16568:	20008854 	.word	0x20008854

0001656c <z_impl_log_process>:
{
   1656c:	b510      	push	{r4, lr}
   1656e:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
   16570:	2200      	movs	r2, #0
   16572:	2300      	movs	r3, #0
   16574:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
   16578:	4b26      	ldr	r3, [pc, #152]	; (16614 <z_impl_log_process+0xa8>)
   1657a:	7818      	ldrb	r0, [r3, #0]
   1657c:	b908      	cbnz	r0, 16582 <z_impl_log_process+0x16>
}
   1657e:	b002      	add	sp, #8
   16580:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
   16582:	4668      	mov	r0, sp
   16584:	f020 f83a 	bl	365fc <z_log_msg_claim>
	if (msg) {
   16588:	4604      	mov	r4, r0
   1658a:	b168      	cbz	r0, 165a8 <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1658c:	4b22      	ldr	r3, [pc, #136]	; (16618 <z_impl_log_process+0xac>)
   1658e:	e8d3 1fef 	ldaex	r1, [r3]
   16592:	3901      	subs	r1, #1
   16594:	e8c3 1fe2 	stlex	r2, r1, [r3]
   16598:	2a00      	cmp	r2, #0
   1659a:	d1f8      	bne.n	1658e <z_impl_log_process+0x22>
		msg_process(msg);
   1659c:	4620      	mov	r0, r4
   1659e:	f7ff fdaf 	bl	16100 <msg_process>
		z_log_msg_free(msg);
   165a2:	4620      	mov	r0, r4
   165a4:	f7ff ffd0 	bl	16548 <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
   165a8:	f7ff ff90 	bl	164cc <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
   165ac:	b958      	cbnz	r0, 165c6 <z_impl_log_process+0x5a>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   165ae:	4a1b      	ldr	r2, [pc, #108]	; (1661c <z_impl_log_process+0xb0>)
   165b0:	6813      	ldr	r3, [r2, #0]
   165b2:	6851      	ldr	r1, [r2, #4]
   165b4:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   165b8:	f141 0100 	adc.w	r1, r1, #0
   165bc:	6013      	str	r3, [r2, #0]
   165be:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
   165c0:	f7ff ffcc 	bl	1655c <z_log_msg_pending>
   165c4:	e7db      	b.n	1657e <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
   165c6:	f028 fb49 	bl	3ec5c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   165ca:	014a      	lsls	r2, r1, #5
   165cc:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   165d0:	0143      	lsls	r3, r0, #5
   165d2:	1a1b      	subs	r3, r3, r0
   165d4:	eb62 0201 	sbc.w	r2, r2, r1
   165d8:	0092      	lsls	r2, r2, #2
   165da:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   165de:	009b      	lsls	r3, r3, #2
   165e0:	181b      	adds	r3, r3, r0
   165e2:	eb42 0201 	adc.w	r2, r2, r1
   165e6:	00d2      	lsls	r2, r2, #3
   165e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   165ec:	f3c3 3310 	ubfx	r3, r3, #12, #17
   165f0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   165f4:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   165f6:	4809      	ldr	r0, [pc, #36]	; (1661c <z_impl_log_process+0xb0>)
   165f8:	6801      	ldr	r1, [r0, #0]
   165fa:	6840      	ldr	r0, [r0, #4]
   165fc:	1a5b      	subs	r3, r3, r1
   165fe:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
   16602:	f240 31e9 	movw	r1, #1001	; 0x3e9
   16606:	428b      	cmp	r3, r1
   16608:	f172 0200 	sbcs.w	r2, r2, #0
   1660c:	d3cf      	bcc.n	165ae <z_impl_log_process+0x42>
				dropped_notify();
   1660e:	f7ff ff29 	bl	16464 <dropped_notify>
			if (unordered_pend) {
   16612:	e7cc      	b.n	165ae <z_impl_log_process+0x42>
   16614:	2000caad 	.word	0x2000caad
   16618:	2000be6c 	.word	0x2000be6c
   1661c:	2000ae30 	.word	0x2000ae30

00016620 <z_impl_log_panic>:
	if (panic_mode) {
   16620:	4b19      	ldr	r3, [pc, #100]	; (16688 <z_impl_log_panic+0x68>)
   16622:	781b      	ldrb	r3, [r3, #0]
   16624:	b103      	cbz	r3, 16628 <z_impl_log_panic+0x8>
   16626:	4770      	bx	lr
{
   16628:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
   1662a:	2100      	movs	r1, #0
   1662c:	2001      	movs	r0, #1
   1662e:	f7ff fe11 	bl	16254 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   16632:	4c16      	ldr	r4, [pc, #88]	; (1668c <z_impl_log_panic+0x6c>)
   16634:	e000      	b.n	16638 <z_impl_log_panic+0x18>
   16636:	3410      	adds	r4, #16
   16638:	4b15      	ldr	r3, [pc, #84]	; (16690 <z_impl_log_panic+0x70>)
   1663a:	429c      	cmp	r4, r3
   1663c:	d80b      	bhi.n	16656 <z_impl_log_panic+0x36>
   1663e:	4b14      	ldr	r3, [pc, #80]	; (16690 <z_impl_log_panic+0x70>)
   16640:	429c      	cmp	r4, r3
   16642:	d218      	bcs.n	16676 <z_impl_log_panic+0x56>
		if (log_backend_is_active(backend)) {
   16644:	4620      	mov	r0, r4
   16646:	f7ff fcbb 	bl	15fc0 <log_backend_is_active>
   1664a:	2800      	cmp	r0, #0
   1664c:	d0f3      	beq.n	16636 <z_impl_log_panic+0x16>
			log_backend_panic(backend);
   1664e:	4620      	mov	r0, r4
   16650:	f7ff fd00 	bl	16054 <log_backend_panic>
   16654:	e7ef      	b.n	16636 <z_impl_log_panic+0x16>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   16656:	4c0f      	ldr	r4, [pc, #60]	; (16694 <z_impl_log_panic+0x74>)
   16658:	f44f 73c2 	mov.w	r3, #388	; 0x184
   1665c:	4622      	mov	r2, r4
   1665e:	490e      	ldr	r1, [pc, #56]	; (16698 <z_impl_log_panic+0x78>)
   16660:	480e      	ldr	r0, [pc, #56]	; (1669c <z_impl_log_panic+0x7c>)
   16662:	f01f fe17 	bl	36294 <assert_print>
   16666:	480e      	ldr	r0, [pc, #56]	; (166a0 <z_impl_log_panic+0x80>)
   16668:	f01f fe14 	bl	36294 <assert_print>
   1666c:	f44f 71c2 	mov.w	r1, #388	; 0x184
   16670:	4620      	mov	r0, r4
   16672:	f01f fe08 	bl	36286 <assert_post_action>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   16676:	f7ff ff79 	bl	1656c <z_impl_log_process>
		while (log_process() == true) {
   1667a:	2800      	cmp	r0, #0
   1667c:	d1fb      	bne.n	16676 <z_impl_log_panic+0x56>
	panic_mode = true;
   1667e:	4b02      	ldr	r3, [pc, #8]	; (16688 <z_impl_log_panic+0x68>)
   16680:	2201      	movs	r2, #1
   16682:	701a      	strb	r2, [r3, #0]
}
   16684:	bd10      	pop	{r4, pc}
   16686:	bf00      	nop
   16688:	2000caae 	.word	0x2000caae
   1668c:	0003f4d0 	.word	0x0003f4d0
   16690:	0003f4f0 	.word	0x0003f4f0
   16694:	00040e60 	.word	0x00040e60
   16698:	00040e90 	.word	0x00040e90
   1669c:	0003f72c 	.word	0x0003f72c
   166a0:	00040eb4 	.word	0x00040eb4

000166a4 <z_log_msg_post_finalize>:
{
   166a4:	b530      	push	{r4, r5, lr}
   166a6:	b083      	sub	sp, #12
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   166a8:	4b2e      	ldr	r3, [pc, #184]	; (16764 <z_log_msg_post_finalize+0xc0>)
   166aa:	e8d3 2fef 	ldaex	r2, [r3]
   166ae:	1c51      	adds	r1, r2, #1
   166b0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   166b4:	2800      	cmp	r0, #0
   166b6:	d1f8      	bne.n	166aa <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
   166b8:	4b2b      	ldr	r3, [pc, #172]	; (16768 <z_log_msg_post_finalize+0xc4>)
   166ba:	781b      	ldrb	r3, [r3, #0]
   166bc:	b96b      	cbnz	r3, 166da <z_log_msg_post_finalize+0x36>
	} else if (proc_tid != NULL) {
   166be:	4b2b      	ldr	r3, [pc, #172]	; (1676c <z_log_msg_post_finalize+0xc8>)
   166c0:	681b      	ldr	r3, [r3, #0]
   166c2:	b323      	cbz	r3, 1670e <z_log_msg_post_finalize+0x6a>
		if (cnt == 0) {
   166c4:	2a00      	cmp	r2, #0
   166c6:	d042      	beq.n	1674e <z_log_msg_post_finalize+0xaa>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   166c8:	2a0a      	cmp	r2, #10
   166ca:	d120      	bne.n	1670e <z_log_msg_post_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   166cc:	4828      	ldr	r0, [pc, #160]	; (16770 <z_log_msg_post_finalize+0xcc>)
   166ce:	f028 fb14 	bl	3ecfa <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   166d2:	4828      	ldr	r0, [pc, #160]	; (16774 <z_log_msg_post_finalize+0xd0>)
   166d4:	f01b fb84 	bl	31de0 <z_impl_k_sem_give>
}
   166d8:	e019      	b.n	1670e <z_log_msg_post_finalize+0x6a>
	__asm__ volatile(
   166da:	f04f 0320 	mov.w	r3, #32
   166de:	f3ef 8411 	mrs	r4, BASEPRI
   166e2:	f383 8812 	msr	BASEPRI_MAX, r3
   166e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   166ea:	4823      	ldr	r0, [pc, #140]	; (16778 <z_log_msg_post_finalize+0xd4>)
   166ec:	f01a fe86 	bl	313fc <z_spin_lock_valid>
   166f0:	b178      	cbz	r0, 16712 <z_log_msg_post_finalize+0x6e>
	z_spin_lock_set_owner(l);
   166f2:	4d21      	ldr	r5, [pc, #132]	; (16778 <z_log_msg_post_finalize+0xd4>)
   166f4:	4628      	mov	r0, r5
   166f6:	f01a fea1 	bl	3143c <z_spin_lock_set_owner>
   166fa:	f7ff ff37 	bl	1656c <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   166fe:	4628      	mov	r0, r5
   16700:	f01a fe8c 	bl	3141c <z_spin_unlock_valid>
   16704:	b1a0      	cbz	r0, 16730 <z_log_msg_post_finalize+0x8c>
	__asm__ volatile(
   16706:	f384 8811 	msr	BASEPRI, r4
   1670a:	f3bf 8f6f 	isb	sy
   1670e:	b003      	add	sp, #12
   16710:	bd30      	pop	{r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   16712:	4c1a      	ldr	r4, [pc, #104]	; (1677c <z_log_msg_post_finalize+0xd8>)
   16714:	2394      	movs	r3, #148	; 0x94
   16716:	4622      	mov	r2, r4
   16718:	4919      	ldr	r1, [pc, #100]	; (16780 <z_log_msg_post_finalize+0xdc>)
   1671a:	481a      	ldr	r0, [pc, #104]	; (16784 <z_log_msg_post_finalize+0xe0>)
   1671c:	f01f fdba 	bl	36294 <assert_print>
   16720:	4915      	ldr	r1, [pc, #84]	; (16778 <z_log_msg_post_finalize+0xd4>)
   16722:	4819      	ldr	r0, [pc, #100]	; (16788 <z_log_msg_post_finalize+0xe4>)
   16724:	f01f fdb6 	bl	36294 <assert_print>
   16728:	2194      	movs	r1, #148	; 0x94
   1672a:	4620      	mov	r0, r4
   1672c:	f01f fdab 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16730:	4c12      	ldr	r4, [pc, #72]	; (1677c <z_log_msg_post_finalize+0xd8>)
   16732:	23c2      	movs	r3, #194	; 0xc2
   16734:	4622      	mov	r2, r4
   16736:	4915      	ldr	r1, [pc, #84]	; (1678c <z_log_msg_post_finalize+0xe8>)
   16738:	4812      	ldr	r0, [pc, #72]	; (16784 <z_log_msg_post_finalize+0xe0>)
   1673a:	f01f fdab 	bl	36294 <assert_print>
   1673e:	4629      	mov	r1, r5
   16740:	4813      	ldr	r0, [pc, #76]	; (16790 <z_log_msg_post_finalize+0xec>)
   16742:	f01f fda7 	bl	36294 <assert_print>
   16746:	21c2      	movs	r1, #194	; 0xc2
   16748:	4620      	mov	r0, r4
   1674a:	f01f fd9c 	bl	36286 <assert_post_action>
	z_impl_k_timer_start(timer, duration, period);
   1674e:	2200      	movs	r2, #0
   16750:	2300      	movs	r3, #0
   16752:	e9cd 2300 	strd	r2, r3, [sp]
   16756:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1675a:	2300      	movs	r3, #0
   1675c:	4804      	ldr	r0, [pc, #16]	; (16770 <z_log_msg_post_finalize+0xcc>)
   1675e:	f01e fa47 	bl	34bf0 <z_impl_k_timer_start>
   16762:	e7d4      	b.n	1670e <z_log_msg_post_finalize+0x6a>
   16764:	2000be6c 	.word	0x2000be6c
   16768:	2000caae 	.word	0x2000caae
   1676c:	2000be64 	.word	0x2000be64
   16770:	2000ae38 	.word	0x2000ae38
   16774:	20008994 	.word	0x20008994
   16778:	2000be58 	.word	0x2000be58
   1677c:	00040b28 	.word	0x00040b28
   16780:	00040b88 	.word	0x00040b88
   16784:	0003f72c 	.word	0x0003f72c
   16788:	00040ba0 	.word	0x00040ba0
   1678c:	00040b58 	.word	0x00040b58
   16790:	00040b70 	.word	0x00040b70

00016794 <z_log_msg_commit>:
{
   16794:	b510      	push	{r4, lr}
   16796:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   16798:	4b04      	ldr	r3, [pc, #16]	; (167ac <z_log_msg_commit+0x18>)
   1679a:	681b      	ldr	r3, [r3, #0]
   1679c:	4798      	blx	r3
   1679e:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
   167a0:	4621      	mov	r1, r4
   167a2:	4803      	ldr	r0, [pc, #12]	; (167b0 <z_log_msg_commit+0x1c>)
   167a4:	f01f ff2e 	bl	36604 <msg_commit>
}
   167a8:	bd10      	pop	{r4, pc}
   167aa:	bf00      	nop
   167ac:	20008324 	.word	0x20008324
   167b0:	20008854 	.word	0x20008854

000167b4 <log_process_thread_func>:
{
   167b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   167b8:	4a22      	ldr	r2, [pc, #136]	; (16844 <log_process_thread_func+0x90>)
   167ba:	4b23      	ldr	r3, [pc, #140]	; (16848 <log_process_thread_func+0x94>)
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   167bc:	1a9b      	subs	r3, r3, r2
   167be:	091b      	lsrs	r3, r3, #4
   167c0:	d00e      	beq.n	167e0 <log_process_thread_func+0x2c>
	uint32_t activate_mask = z_log_init(false, false);
   167c2:	2100      	movs	r1, #0
   167c4:	4608      	mov	r0, r1
   167c6:	f7ff fd45 	bl	16254 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   167ca:	4680      	mov	r8, r0
   167cc:	b1a8      	cbz	r0, 167fa <log_process_thread_func+0x46>
   167ce:	f240 6667 	movw	r6, #1639	; 0x667
   167d2:	2700      	movs	r7, #0
	return z_impl_z_current_get();
   167d4:	f01d fc78 	bl	340c8 <z_impl_z_current_get>
	thread_set(k_current_get());
   167d8:	f7ff fdae 	bl	16338 <thread_set>
	bool processed_any = false;
   167dc:	2500      	movs	r5, #0
   167de:	e025      	b.n	1682c <log_process_thread_func+0x78>
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   167e0:	4c1a      	ldr	r4, [pc, #104]	; (1684c <log_process_thread_func+0x98>)
   167e2:	f240 3347 	movw	r3, #839	; 0x347
   167e6:	4622      	mov	r2, r4
   167e8:	4919      	ldr	r1, [pc, #100]	; (16850 <log_process_thread_func+0x9c>)
   167ea:	481a      	ldr	r0, [pc, #104]	; (16854 <log_process_thread_func+0xa0>)
   167ec:	f01f fd52 	bl	36294 <assert_print>
   167f0:	f240 3147 	movw	r1, #839	; 0x347
   167f4:	4620      	mov	r0, r4
   167f6:	f01f fd46 	bl	36286 <assert_post_action>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   167fa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   167fe:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16802:	e7e7      	b.n	167d4 <log_process_thread_func+0x20>
			activate_mask = activate_foreach_backend(activate_mask);
   16804:	4640      	mov	r0, r8
   16806:	f7ff fcfd 	bl	16204 <activate_foreach_backend>
			if (!activate_mask) {
   1680a:	4680      	mov	r8, r0
   1680c:	b988      	cbnz	r0, 16832 <log_process_thread_func+0x7e>
				timeout = K_FOREVER;
   1680e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   16812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   16816:	e00c      	b.n	16832 <log_process_thread_func+0x7e>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
   16818:	2100      	movs	r1, #0
   1681a:	4608      	mov	r0, r1
   1681c:	f7ff fcc4 	bl	161a8 <log_backend_notify_all>
	return z_impl_k_sem_take(sem, timeout);
   16820:	4632      	mov	r2, r6
   16822:	463b      	mov	r3, r7
   16824:	480c      	ldr	r0, [pc, #48]	; (16858 <log_process_thread_func+0xa4>)
   16826:	f01b fb23 	bl	31e70 <z_impl_k_sem_take>
{
   1682a:	4625      	mov	r5, r4
		if (activate_mask) {
   1682c:	f1b8 0f00 	cmp.w	r8, #0
   16830:	d1e8      	bne.n	16804 <log_process_thread_func+0x50>
   16832:	f7ff fe9b 	bl	1656c <z_impl_log_process>
		if (log_process() == false) {
   16836:	4604      	mov	r4, r0
   16838:	2800      	cmp	r0, #0
   1683a:	d1f6      	bne.n	1682a <log_process_thread_func+0x76>
			if (processed_any) {
   1683c:	2d00      	cmp	r5, #0
   1683e:	d1eb      	bne.n	16818 <log_process_thread_func+0x64>
   16840:	462c      	mov	r4, r5
   16842:	e7ed      	b.n	16820 <log_process_thread_func+0x6c>
   16844:	0003f4d0 	.word	0x0003f4d0
   16848:	0003f4f0 	.word	0x0003f4f0
   1684c:	00040e60 	.word	0x00040e60
   16850:	00040f00 	.word	0x00040f00
   16854:	0003f72c 	.word	0x0003f72c
   16858:	20008994 	.word	0x20008994

0001685c <log_backend_id_set>:
	__ASSERT_NO_MSG(backend != NULL);
   1685c:	b110      	cbz	r0, 16864 <log_backend_id_set+0x8>
	backend->cb->id = id;
   1685e:	6843      	ldr	r3, [r0, #4]
   16860:	7119      	strb	r1, [r3, #4]
   16862:	4770      	bx	lr
{
   16864:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   16866:	4c05      	ldr	r4, [pc, #20]	; (1687c <log_backend_id_set+0x20>)
   16868:	23de      	movs	r3, #222	; 0xde
   1686a:	4622      	mov	r2, r4
   1686c:	4904      	ldr	r1, [pc, #16]	; (16880 <log_backend_id_set+0x24>)
   1686e:	4805      	ldr	r0, [pc, #20]	; (16884 <log_backend_id_set+0x28>)
   16870:	f01f fd10 	bl	36294 <assert_print>
   16874:	21de      	movs	r1, #222	; 0xde
   16876:	4620      	mov	r0, r4
   16878:	f01f fd05 	bl	36286 <assert_post_action>
   1687c:	00040dfc 	.word	0x00040dfc
   16880:	00040e34 	.word	0x00040e34
   16884:	0003f72c 	.word	0x0003f72c

00016888 <log_backend_activate>:
	__ASSERT_NO_MSG(backend != NULL);
   16888:	b128      	cbz	r0, 16896 <log_backend_activate+0xe>
	backend->cb->ctx = ctx;
   1688a:	6842      	ldr	r2, [r0, #4]
   1688c:	6011      	str	r1, [r2, #0]
	backend->cb->active = true;
   1688e:	6843      	ldr	r3, [r0, #4]
   16890:	2201      	movs	r2, #1
   16892:	715a      	strb	r2, [r3, #5]
   16894:	4770      	bx	lr
{
   16896:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   16898:	4c06      	ldr	r4, [pc, #24]	; (168b4 <log_backend_activate+0x2c>)
   1689a:	f240 1317 	movw	r3, #279	; 0x117
   1689e:	4622      	mov	r2, r4
   168a0:	4905      	ldr	r1, [pc, #20]	; (168b8 <log_backend_activate+0x30>)
   168a2:	4806      	ldr	r0, [pc, #24]	; (168bc <log_backend_activate+0x34>)
   168a4:	f01f fcf6 	bl	36294 <assert_print>
   168a8:	f240 1117 	movw	r1, #279	; 0x117
   168ac:	4620      	mov	r0, r4
   168ae:	f01f fcea 	bl	36286 <assert_post_action>
   168b2:	bf00      	nop
   168b4:	00040dfc 	.word	0x00040dfc
   168b8:	00040e34 	.word	0x00040e34
   168bc:	0003f72c 	.word	0x0003f72c

000168c0 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
   168c0:	4802      	ldr	r0, [pc, #8]	; (168cc <log_src_cnt_get+0xc>)
   168c2:	4b03      	ldr	r3, [pc, #12]	; (168d0 <log_src_cnt_get+0x10>)
   168c4:	1ac0      	subs	r0, r0, r3
   168c6:	08c0      	lsrs	r0, r0, #3
   168c8:	4770      	bx	lr
   168ca:	bf00      	nop
   168cc:	0003f4d0 	.word	0x0003f4d0
   168d0:	0003f370 	.word	0x0003f370

000168d4 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
   168d4:	b510      	push	{r4, lr}
   168d6:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   168d8:	f7ff fff2 	bl	168c0 <log_src_cnt_get>
   168dc:	42a0      	cmp	r0, r4
   168de:	d903      	bls.n	168e8 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
   168e0:	4b02      	ldr	r3, [pc, #8]	; (168ec <log_source_name_get+0x18>)
   168e2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   168e6:	bd10      	pop	{r4, pc}
			return NULL;
   168e8:	2000      	movs	r0, #0
   168ea:	e7fc      	b.n	168e6 <log_source_name_get+0x12>
   168ec:	0003f370 	.word	0x0003f370

000168f0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   168f0:	b570      	push	{r4, r5, r6, lr}
   168f2:	4604      	mov	r4, r0
   168f4:	460d      	mov	r5, r1
   168f6:	4616      	mov	r6, r2
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   168f8:	4b07      	ldr	r3, [pc, #28]	; (16918 <log_backend_enable+0x28>)
   168fa:	1ac3      	subs	r3, r0, r3
   168fc:	111b      	asrs	r3, r3, #4
   168fe:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   16900:	b2d9      	uxtb	r1, r3
   16902:	f7ff ffab 	bl	1685c <log_backend_id_set>
	backend->cb->level = level;
   16906:	6863      	ldr	r3, [r4, #4]
   16908:	719e      	strb	r6, [r3, #6]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);
   1690a:	4629      	mov	r1, r5
   1690c:	4620      	mov	r0, r4
   1690e:	f7ff ffbb 	bl	16888 <log_backend_activate>

	z_log_notify_backend_enabled();
   16912:	f7ff fd73 	bl	163fc <z_log_notify_backend_enabled>
}
   16916:	bd70      	pop	{r4, r5, r6, pc}
   16918:	0003f4d0 	.word	0x0003f4d0

0001691c <cbprintf_package_copy>:
{
   1691c:	b500      	push	{lr}
   1691e:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
   16920:	9205      	str	r2, [sp, #20]
   16922:	9306      	str	r3, [sp, #24]
   16924:	2300      	movs	r3, #0
   16926:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   16928:	b162      	cbz	r2, 16944 <cbprintf_package_copy+0x28>
   1692a:	4a07      	ldr	r2, [pc, #28]	; (16948 <cbprintf_package_copy+0x2c>)
   1692c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1692e:	9302      	str	r3, [sp, #8]
   16930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16932:	9301      	str	r3, [sp, #4]
   16934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16936:	9300      	str	r3, [sp, #0]
   16938:	ab05      	add	r3, sp, #20
   1693a:	f7fd faa5 	bl	13e88 <cbprintf_package_convert>
}
   1693e:	b009      	add	sp, #36	; 0x24
   16940:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
   16944:	2200      	movs	r2, #0
   16946:	e7f1      	b.n	1692c <cbprintf_package_copy+0x10>
   16948:	00036615 	.word	0x00036615

0001694c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   1694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16950:	b08a      	sub	sp, #40	; 0x28
   16952:	4605      	mov	r5, r0
   16954:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   16956:	460f      	mov	r7, r1
	int inlen = desc.package_len;
   16958:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
   1695c:	2c00      	cmp	r4, #0
   1695e:	d038      	beq.n	169d2 <z_impl_z_log_msg_static_create+0x86>
   16960:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
   16962:	2200      	movs	r2, #0
   16964:	9207      	str	r2, [sp, #28]
   16966:	9208      	str	r2, [sp, #32]
   16968:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   1696a:	2304      	movs	r3, #4
   1696c:	9302      	str	r3, [sp, #8]
   1696e:	ab05      	add	r3, sp, #20
   16970:	9301      	str	r3, [sp, #4]
   16972:	230a      	movs	r3, #10
   16974:	9300      	str	r3, [sp, #0]
   16976:	ab07      	add	r3, sp, #28
   16978:	4621      	mov	r1, r4
   1697a:	4640      	mov	r0, r8
   1697c:	f7fd fa84 	bl	13e88 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   16980:	f360 2752 	bfi	r7, r0, #9, #10
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   16984:	f3c0 0909 	ubfx	r9, r0, #0, #10
   16988:	f3c7 41cb 	ubfx	r1, r7, #19, #12
   1698c:	4449      	add	r1, r9
   1698e:	3117      	adds	r1, #23
   16990:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   16994:	0888      	lsrs	r0, r1, #2
   16996:	f7ff fdc7 	bl	16528 <z_log_msg_alloc>
		if (msg) {
   1699a:	4682      	mov	sl, r0
   1699c:	b318      	cbz	r0, 169e6 <z_impl_z_log_msg_static_create+0x9a>
			len = cbprintf_package_copy(package, inlen,
   1699e:	2304      	movs	r3, #4
   169a0:	9302      	str	r3, [sp, #8]
   169a2:	ab05      	add	r3, sp, #20
   169a4:	9301      	str	r3, [sp, #4]
   169a6:	230a      	movs	r3, #10
   169a8:	9300      	str	r3, [sp, #0]
   169aa:	464b      	mov	r3, r9
   169ac:	f100 0210 	add.w	r2, r0, #16
   169b0:	4621      	mov	r1, r4
   169b2:	4640      	mov	r0, r8
   169b4:	f7ff ffb2 	bl	1691c <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
   169b8:	2800      	cmp	r0, #0
   169ba:	da14      	bge.n	169e6 <z_impl_z_log_msg_static_create+0x9a>
   169bc:	4c0e      	ldr	r4, [pc, #56]	; (169f8 <z_impl_z_log_msg_static_create+0xac>)
   169be:	2349      	movs	r3, #73	; 0x49
   169c0:	4622      	mov	r2, r4
   169c2:	490e      	ldr	r1, [pc, #56]	; (169fc <z_impl_z_log_msg_static_create+0xb0>)
   169c4:	480e      	ldr	r0, [pc, #56]	; (16a00 <z_impl_z_log_msg_static_create+0xb4>)
   169c6:	f01f fc65 	bl	36294 <assert_print>
   169ca:	2149      	movs	r1, #73	; 0x49
   169cc:	4620      	mov	r0, r4
   169ce:	f01f fc5a 	bl	36286 <assert_post_action>
   169d2:	f3c1 41cb 	ubfx	r1, r1, #19, #12
   169d6:	440c      	add	r4, r1
   169d8:	3417      	adds	r4, #23
   169da:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   169de:	08a0      	lsrs	r0, r4, #2
   169e0:	f7ff fda2 	bl	16528 <z_log_msg_alloc>
   169e4:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   169e6:	4633      	mov	r3, r6
   169e8:	463a      	mov	r2, r7
   169ea:	4629      	mov	r1, r5
   169ec:	4650      	mov	r0, sl
   169ee:	f01f fe27 	bl	36640 <z_log_msg_finalize>
}
   169f2:	b00a      	add	sp, #40	; 0x28
   169f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169f8:	00040f9c 	.word	0x00040f9c
   169fc:	00040fc8 	.word	0x00040fc8
   16a00:	0003f72c 	.word	0x0003f72c

00016a04 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   16a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a08:	b085      	sub	sp, #20
   16a0a:	4680      	mov	r8, r0
   16a0c:	460d      	mov	r5, r1
   16a0e:	4617      	mov	r7, r2
   16a10:	461e      	mov	r6, r3
   16a12:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   16a16:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
	int plen;

	if (fmt) {
   16a1a:	f1b9 0f00 	cmp.w	r9, #0
   16a1e:	d047      	beq.n	16ab0 <z_impl_z_log_msg_runtime_vcreate+0xac>
		va_list ap2;

		va_copy(ap2, ap);
   16a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a22:	9303      	str	r3, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   16a24:	9300      	str	r3, [sp, #0]
   16a26:	464b      	mov	r3, r9
   16a28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16a2a:	2110      	movs	r1, #16
   16a2c:	2000      	movs	r0, #0
   16a2e:	f7fc ff97 	bl	13960 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   16a32:	1e03      	subs	r3, r0, #0
   16a34:	db31      	blt.n	16a9a <z_impl_z_log_msg_runtime_vcreate+0x96>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   16a36:	469b      	mov	fp, r3
   16a38:	eb03 000a 	add.w	r0, r3, sl
   16a3c:	3017      	adds	r0, #23
   16a3e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   16a42:	2400      	movs	r4, #0
   16a44:	f36f 0400 	bfc	r4, #0, #1
   16a48:	f36f 0441 	bfc	r4, #1, #1
   16a4c:	f36f 0482 	bfc	r4, #2, #1
   16a50:	f368 04c5 	bfi	r4, r8, #3, #3
   16a54:	f367 1488 	bfi	r4, r7, #6, #3
   16a58:	f363 2452 	bfi	r4, r3, #9, #10
   16a5c:	f36a 44de 	bfi	r4, sl, #19, #12
   16a60:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   16a64:	0880      	lsrs	r0, r0, #2
   16a66:	f7ff fd5f 	bl	16528 <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   16a6a:	4607      	mov	r7, r0
   16a6c:	b160      	cbz	r0, 16a88 <z_impl_z_log_msg_runtime_vcreate+0x84>
   16a6e:	3010      	adds	r0, #16
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   16a70:	f1b9 0f00 	cmp.w	r9, #0
   16a74:	d008      	beq.n	16a88 <z_impl_z_log_msg_runtime_vcreate+0x84>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   16a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16a78:	9300      	str	r3, [sp, #0]
   16a7a:	464b      	mov	r3, r9
   16a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   16a7e:	4659      	mov	r1, fp
   16a80:	f7fc ff6e 	bl	13960 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   16a84:	2800      	cmp	r0, #0
   16a86:	db15      	blt.n	16ab4 <z_impl_z_log_msg_runtime_vcreate+0xb0>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   16a88:	4633      	mov	r3, r6
   16a8a:	4622      	mov	r2, r4
   16a8c:	4629      	mov	r1, r5
   16a8e:	4638      	mov	r0, r7
   16a90:	f01f fdd6 	bl	36640 <z_log_msg_finalize>
	}
}
   16a94:	b005      	add	sp, #20
   16a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(plen >= 0);
   16a9a:	4c0c      	ldr	r4, [pc, #48]	; (16acc <z_impl_z_log_msg_runtime_vcreate+0xc8>)
   16a9c:	2368      	movs	r3, #104	; 0x68
   16a9e:	4622      	mov	r2, r4
   16aa0:	490b      	ldr	r1, [pc, #44]	; (16ad0 <z_impl_z_log_msg_runtime_vcreate+0xcc>)
   16aa2:	480c      	ldr	r0, [pc, #48]	; (16ad4 <z_impl_z_log_msg_runtime_vcreate+0xd0>)
   16aa4:	f01f fbf6 	bl	36294 <assert_print>
   16aa8:	2168      	movs	r1, #104	; 0x68
   16aaa:	4620      	mov	r0, r4
   16aac:	f01f fbeb 	bl	36286 <assert_post_action>
		plen = 0;
   16ab0:	2300      	movs	r3, #0
   16ab2:	e7c0      	b.n	16a36 <z_impl_z_log_msg_runtime_vcreate+0x32>
		__ASSERT_NO_MSG(plen >= 0);
   16ab4:	4c05      	ldr	r4, [pc, #20]	; (16acc <z_impl_z_log_msg_runtime_vcreate+0xc8>)
   16ab6:	2382      	movs	r3, #130	; 0x82
   16ab8:	4622      	mov	r2, r4
   16aba:	4905      	ldr	r1, [pc, #20]	; (16ad0 <z_impl_z_log_msg_runtime_vcreate+0xcc>)
   16abc:	4805      	ldr	r0, [pc, #20]	; (16ad4 <z_impl_z_log_msg_runtime_vcreate+0xd0>)
   16abe:	f01f fbe9 	bl	36294 <assert_print>
   16ac2:	2182      	movs	r1, #130	; 0x82
   16ac4:	4620      	mov	r0, r4
   16ac6:	f01f fbde 	bl	36286 <assert_post_action>
   16aca:	bf00      	nop
   16acc:	00040f9c 	.word	0x00040f9c
   16ad0:	00040fd4 	.word	0x00040fd4
   16ad4:	0003f72c 	.word	0x0003f72c

00016ad8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   16ad8:	b40e      	push	{r1, r2, r3}
   16ada:	b500      	push	{lr}
   16adc:	b084      	sub	sp, #16
   16ade:	4601      	mov	r1, r0
   16ae0:	ab05      	add	r3, sp, #20
   16ae2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   16ae6:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   16ae8:	2000      	movs	r0, #0
   16aea:	9000      	str	r0, [sp, #0]
   16aec:	4803      	ldr	r0, [pc, #12]	; (16afc <print_formatted+0x24>)
   16aee:	f7fe fa2b 	bl	14f48 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
   16af2:	b004      	add	sp, #16
   16af4:	f85d eb04 	ldr.w	lr, [sp], #4
   16af8:	b003      	add	sp, #12
   16afa:	4770      	bx	lr
   16afc:	00016d7d 	.word	0x00016d7d

00016b00 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
   16b00:	b530      	push	{r4, r5, lr}
   16b02:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
   16b04:	f011 0f44 	tst.w	r1, #68	; 0x44
   16b08:	d005      	beq.n	16b16 <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
   16b0a:	4b1a      	ldr	r3, [pc, #104]	; (16b74 <timestamp_print+0x74>)
   16b0c:	681c      	ldr	r4, [r3, #0]
   16b0e:	b934      	cbnz	r4, 16b1e <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
   16b10:	2000      	movs	r0, #0
	}

	return length;
}
   16b12:	b005      	add	sp, #20
   16b14:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   16b16:	4918      	ldr	r1, [pc, #96]	; (16b78 <timestamp_print+0x78>)
   16b18:	f7ff ffde 	bl	16ad8 <print_formatted>
   16b1c:	e7f9      	b.n	16b12 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   16b1e:	4b17      	ldr	r3, [pc, #92]	; (16b7c <timestamp_print+0x7c>)
   16b20:	6819      	ldr	r1, [r3, #0]
   16b22:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   16b26:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
   16b2a:	4a15      	ldr	r2, [pc, #84]	; (16b80 <timestamp_print+0x80>)
   16b2c:	fba2 320c 	umull	r3, r2, r2, ip
   16b30:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   16b32:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   16b36:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
   16b3a:	4b12      	ldr	r3, [pc, #72]	; (16b84 <timestamp_print+0x84>)
   16b3c:	fba3 530e 	umull	r5, r3, r3, lr
   16b40:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   16b42:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
   16b46:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   16b4a:	fb0c f101 	mul.w	r1, ip, r1
   16b4e:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   16b52:	fb04 1115 	mls	r1, r4, r5, r1
   16b56:	fb0c f101 	mul.w	r1, ip, r1
   16b5a:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
   16b5e:	9102      	str	r1, [sp, #8]
   16b60:	9501      	str	r5, [sp, #4]
   16b62:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   16b66:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
   16b6a:	9100      	str	r1, [sp, #0]
   16b6c:	4906      	ldr	r1, [pc, #24]	; (16b88 <timestamp_print+0x88>)
   16b6e:	f7ff ffb3 	bl	16ad8 <print_formatted>
   16b72:	e7ce      	b.n	16b12 <timestamp_print+0x12>
   16b74:	2000be78 	.word	0x2000be78
   16b78:	00040fe0 	.word	0x00040fe0
   16b7c:	2000be74 	.word	0x2000be74
   16b80:	91a2b3c5 	.word	0x91a2b3c5
   16b84:	88888889 	.word	0x88888889
   16b88:	00040fec 	.word	0x00040fec

00016b8c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   16b8c:	b161      	cbz	r1, 16ba8 <color_print+0x1c>
{
   16b8e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   16b90:	b12a      	cbz	r2, 16b9e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   16b92:	4a06      	ldr	r2, [pc, #24]	; (16bac <color_print+0x20>)
   16b94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   16b98:	b912      	cbnz	r2, 16ba0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   16b9a:	4a05      	ldr	r2, [pc, #20]	; (16bb0 <color_print+0x24>)
   16b9c:	e000      	b.n	16ba0 <color_print+0x14>
   16b9e:	4a04      	ldr	r2, [pc, #16]	; (16bb0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   16ba0:	4904      	ldr	r1, [pc, #16]	; (16bb4 <color_print+0x28>)
   16ba2:	f7ff ff99 	bl	16ad8 <print_formatted>
	}
}
   16ba6:	bd08      	pop	{r3, pc}
   16ba8:	4770      	bx	lr
   16baa:	bf00      	nop
   16bac:	000410f4 	.word	0x000410f4
   16bb0:	00041008 	.word	0x00041008
   16bb4:	0003ff2c 	.word	0x0003ff2c

00016bb8 <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
   16bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16bbc:	4605      	mov	r5, r0
   16bbe:	4690      	mov	r8, r2
   16bc0:	461e      	mov	r6, r3
   16bc2:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
   16bc4:	b981      	cbnz	r1, 16be8 <ids_print+0x30>
	int total = 0;
   16bc6:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
   16bc8:	b12e      	cbz	r6, 16bd6 <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
   16bca:	4632      	mov	r2, r6
   16bcc:	4910      	ldr	r1, [pc, #64]	; (16c10 <ids_print+0x58>)
   16bce:	4628      	mov	r0, r5
   16bd0:	f7ff ff82 	bl	16ad8 <print_formatted>
   16bd4:	4404      	add	r4, r0
	}

	if (source) {
   16bd6:	b1b7      	cbz	r7, 16c06 <ids_print+0x4e>
		total += print_formatted(output,
   16bd8:	f1b8 0f00 	cmp.w	r8, #0
   16bdc:	d00d      	beq.n	16bfa <ids_print+0x42>
				(func_on &&
   16bde:	9b07      	ldr	r3, [sp, #28]
   16be0:	2b04      	cmp	r3, #4
   16be2:	d013      	beq.n	16c0c <ids_print+0x54>
		total += print_formatted(output,
   16be4:	490b      	ldr	r1, [pc, #44]	; (16c14 <ids_print+0x5c>)
   16be6:	e009      	b.n	16bfc <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
   16be8:	4b0b      	ldr	r3, [pc, #44]	; (16c18 <ids_print+0x60>)
   16bea:	9a07      	ldr	r2, [sp, #28]
   16bec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16bf0:	490a      	ldr	r1, [pc, #40]	; (16c1c <ids_print+0x64>)
   16bf2:	f7ff ff71 	bl	16ad8 <print_formatted>
   16bf6:	4604      	mov	r4, r0
   16bf8:	e7e6      	b.n	16bc8 <ids_print+0x10>
		total += print_formatted(output,
   16bfa:	4906      	ldr	r1, [pc, #24]	; (16c14 <ids_print+0x5c>)
   16bfc:	463a      	mov	r2, r7
   16bfe:	4628      	mov	r0, r5
   16c00:	f7ff ff6a 	bl	16ad8 <print_formatted>
   16c04:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
   16c06:	4620      	mov	r0, r4
   16c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   16c0c:	4904      	ldr	r1, [pc, #16]	; (16c20 <ids_print+0x68>)
   16c0e:	e7f5      	b.n	16bfc <ids_print+0x44>
   16c10:	00041024 	.word	0x00041024
   16c14:	00041014 	.word	0x00041014
   16c18:	00041108 	.word	0x00041108
   16c1c:	0004101c 	.word	0x0004101c
   16c20:	00041010 	.word	0x00041010

00016c24 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
   16c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c28:	b085      	sub	sp, #20
   16c2a:	4605      	mov	r5, r0
   16c2c:	460c      	mov	r4, r1
   16c2e:	4616      	mov	r6, r2
   16c30:	9303      	str	r3, [sp, #12]
   16c32:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   16c36:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   16c3a:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   16c3e:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   16c42:	f01f fce5 	bl	36610 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   16c46:	b1d8      	cbz	r0, 16c80 <prefix_print+0x5c>
   16c48:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   16c4a:	4912      	ldr	r1, [pc, #72]	; (16c94 <prefix_print+0x70>)
   16c4c:	4628      	mov	r0, r5
   16c4e:	f7ff ff43 	bl	16ad8 <print_formatted>
   16c52:	4607      	mov	r7, r0
	}

	if (stamp) {
   16c54:	f1bb 0f00 	cmp.w	fp, #0
   16c58:	d114      	bne.n	16c84 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   16c5a:	4642      	mov	r2, r8
   16c5c:	4651      	mov	r1, sl
   16c5e:	4628      	mov	r0, r5
   16c60:	f01f fd1b 	bl	3669a <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
   16c64:	f8cd 8004 	str.w	r8, [sp, #4]
   16c68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16c6a:	9300      	str	r3, [sp, #0]
   16c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16c6e:	4632      	mov	r2, r6
   16c70:	4649      	mov	r1, r9
   16c72:	4628      	mov	r0, r5
   16c74:	f7ff ffa0 	bl	16bb8 <ids_print>

	return length;
}
   16c78:	4438      	add	r0, r7
   16c7a:	b005      	add	sp, #20
   16c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   16c80:	2700      	movs	r7, #0
   16c82:	e7e7      	b.n	16c54 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   16c84:	9a03      	ldr	r2, [sp, #12]
   16c86:	4621      	mov	r1, r4
   16c88:	4628      	mov	r0, r5
   16c8a:	f7ff ff39 	bl	16b00 <timestamp_print>
   16c8e:	4407      	add	r7, r0
   16c90:	e7e3      	b.n	16c5a <prefix_print+0x36>
   16c92:	bf00      	nop
   16c94:	00041028 	.word	0x00041028

00016c98 <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   16c98:	f011 0f10 	tst.w	r1, #16
   16c9c:	d10b      	bne.n	16cb6 <newline_print+0x1e>
{
   16c9e:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   16ca0:	f011 0f20 	tst.w	r1, #32
   16ca4:	d003      	beq.n	16cae <newline_print+0x16>
		print_formatted(ctx, "\n");
   16ca6:	4904      	ldr	r1, [pc, #16]	; (16cb8 <newline_print+0x20>)
   16ca8:	f7ff ff16 	bl	16ad8 <print_formatted>
}
   16cac:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   16cae:	4903      	ldr	r1, [pc, #12]	; (16cbc <newline_print+0x24>)
   16cb0:	f7ff ff12 	bl	16ad8 <print_formatted>
   16cb4:	e7fa      	b.n	16cac <newline_print+0x14>
   16cb6:	4770      	bx	lr
   16cb8:	0004682c 	.word	0x0004682c
   16cbc:	0003ffa0 	.word	0x0003ffa0

00016cc0 <hexdump_line_print>:
{
   16cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16cc4:	4605      	mov	r5, r0
   16cc6:	460f      	mov	r7, r1
   16cc8:	4616      	mov	r6, r2
   16cca:	4698      	mov	r8, r3
	newline_print(output, flags);
   16ccc:	9906      	ldr	r1, [sp, #24]
   16cce:	f7ff ffe3 	bl	16c98 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   16cd2:	2400      	movs	r4, #0
   16cd4:	4544      	cmp	r4, r8
   16cd6:	da05      	bge.n	16ce4 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   16cd8:	4923      	ldr	r1, [pc, #140]	; (16d68 <hexdump_line_print+0xa8>)
   16cda:	4628      	mov	r0, r5
   16cdc:	f7ff fefc 	bl	16ad8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   16ce0:	3401      	adds	r4, #1
   16ce2:	e7f7      	b.n	16cd4 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16ce4:	2400      	movs	r4, #0
   16ce6:	e009      	b.n	16cfc <hexdump_line_print+0x3c>
			print_formatted(output, " ");
   16ce8:	491f      	ldr	r1, [pc, #124]	; (16d68 <hexdump_line_print+0xa8>)
   16cea:	4628      	mov	r0, r5
   16cec:	f7ff fef4 	bl	16ad8 <print_formatted>
   16cf0:	e00b      	b.n	16d0a <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
   16cf2:	491e      	ldr	r1, [pc, #120]	; (16d6c <hexdump_line_print+0xac>)
   16cf4:	4628      	mov	r0, r5
   16cf6:	f7ff feef 	bl	16ad8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16cfa:	3401      	adds	r4, #1
   16cfc:	2c0f      	cmp	r4, #15
   16cfe:	dc0c      	bgt.n	16d1a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   16d00:	2c00      	cmp	r4, #0
   16d02:	dd02      	ble.n	16d0a <hexdump_line_print+0x4a>
   16d04:	f014 0f07 	tst.w	r4, #7
   16d08:	d0ee      	beq.n	16ce8 <hexdump_line_print+0x28>
		if (i < length) {
   16d0a:	42b4      	cmp	r4, r6
   16d0c:	d2f1      	bcs.n	16cf2 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   16d0e:	5d3a      	ldrb	r2, [r7, r4]
   16d10:	4917      	ldr	r1, [pc, #92]	; (16d70 <hexdump_line_print+0xb0>)
   16d12:	4628      	mov	r0, r5
   16d14:	f7ff fee0 	bl	16ad8 <print_formatted>
   16d18:	e7ef      	b.n	16cfa <hexdump_line_print+0x3a>
	print_formatted(output, "|");
   16d1a:	4916      	ldr	r1, [pc, #88]	; (16d74 <hexdump_line_print+0xb4>)
   16d1c:	4628      	mov	r0, r5
   16d1e:	f7ff fedb 	bl	16ad8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16d22:	2400      	movs	r4, #0
   16d24:	e009      	b.n	16d3a <hexdump_line_print+0x7a>
			print_formatted(output, " ");
   16d26:	4910      	ldr	r1, [pc, #64]	; (16d68 <hexdump_line_print+0xa8>)
   16d28:	4628      	mov	r0, r5
   16d2a:	f7ff fed5 	bl	16ad8 <print_formatted>
   16d2e:	e00b      	b.n	16d48 <hexdump_line_print+0x88>
			print_formatted(output, "%c",
   16d30:	4911      	ldr	r1, [pc, #68]	; (16d78 <hexdump_line_print+0xb8>)
   16d32:	4628      	mov	r0, r5
   16d34:	f7ff fed0 	bl	16ad8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   16d38:	3401      	adds	r4, #1
   16d3a:	2c0f      	cmp	r4, #15
   16d3c:	dc12      	bgt.n	16d64 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   16d3e:	2c00      	cmp	r4, #0
   16d40:	dd02      	ble.n	16d48 <hexdump_line_print+0x88>
   16d42:	f014 0f07 	tst.w	r4, #7
   16d46:	d0ee      	beq.n	16d26 <hexdump_line_print+0x66>
		if (i < length) {
   16d48:	42b4      	cmp	r4, r6
   16d4a:	d206      	bcs.n	16d5a <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
   16d4c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   16d4e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   16d52:	2b5e      	cmp	r3, #94	; 0x5e
   16d54:	d9ec      	bls.n	16d30 <hexdump_line_print+0x70>
   16d56:	222e      	movs	r2, #46	; 0x2e
   16d58:	e7ea      	b.n	16d30 <hexdump_line_print+0x70>
			print_formatted(output, " ");
   16d5a:	4903      	ldr	r1, [pc, #12]	; (16d68 <hexdump_line_print+0xa8>)
   16d5c:	4628      	mov	r0, r5
   16d5e:	f7ff febb 	bl	16ad8 <print_formatted>
   16d62:	e7e9      	b.n	16d38 <hexdump_line_print+0x78>
}
   16d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16d68:	00041020 	.word	0x00041020
   16d6c:	00041034 	.word	0x00041034
   16d70:	0004102c 	.word	0x0004102c
   16d74:	00041038 	.word	0x00041038
   16d78:	0004103c 	.word	0x0004103c

00016d7c <out_func>:
{
   16d7c:	b538      	push	{r3, r4, r5, lr}
   16d7e:	4605      	mov	r5, r0
   16d80:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   16d82:	684b      	ldr	r3, [r1, #4]
   16d84:	681a      	ldr	r2, [r3, #0]
   16d86:	68cb      	ldr	r3, [r1, #12]
   16d88:	429a      	cmp	r2, r3
   16d8a:	d010      	beq.n	16dae <out_func+0x32>
	idx = atomic_inc(&out_ctx->control_block->offset);
   16d8c:	6863      	ldr	r3, [r4, #4]
   16d8e:	e8d3 2fef 	ldaex	r2, [r3]
   16d92:	1c51      	adds	r1, r2, #1
   16d94:	e8c3 1fe0 	stlex	r0, r1, [r3]
   16d98:	2800      	cmp	r0, #0
   16d9a:	d1f8      	bne.n	16d8e <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
   16d9c:	68a3      	ldr	r3, [r4, #8]
   16d9e:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   16da0:	6863      	ldr	r3, [r4, #4]
   16da2:	681a      	ldr	r2, [r3, #0]
   16da4:	68e3      	ldr	r3, [r4, #12]
   16da6:	429a      	cmp	r2, r3
   16da8:	d805      	bhi.n	16db6 <out_func+0x3a>
}
   16daa:	2000      	movs	r0, #0
   16dac:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   16dae:	4608      	mov	r0, r1
   16db0:	f01f fca6 	bl	36700 <log_output_flush>
   16db4:	e7ea      	b.n	16d8c <out_func+0x10>
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   16db6:	4c05      	ldr	r4, [pc, #20]	; (16dcc <out_func+0x50>)
   16db8:	2379      	movs	r3, #121	; 0x79
   16dba:	4622      	mov	r2, r4
   16dbc:	4904      	ldr	r1, [pc, #16]	; (16dd0 <out_func+0x54>)
   16dbe:	4805      	ldr	r0, [pc, #20]	; (16dd4 <out_func+0x58>)
   16dc0:	f01f fa68 	bl	36294 <assert_print>
   16dc4:	2179      	movs	r1, #121	; 0x79
   16dc6:	4620      	mov	r0, r4
   16dc8:	f01f fa5d 	bl	36286 <assert_post_action>
   16dcc:	00041040 	.word	0x00041040
   16dd0:	00041070 	.word	0x00041070
   16dd4:	0003f72c 	.word	0x0003f72c

00016dd8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   16dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ddc:	b084      	sub	sp, #16
   16dde:	4604      	mov	r4, r0
   16de0:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   16de4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   16de6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   16de8:	b9a5      	cbnz	r5, 16e14 <log_output_process+0x3c>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   16dea:	2b01      	cmp	r3, #1
   16dec:	d01d      	beq.n	16e2a <log_output_process+0x52>
   16dee:	481f      	ldr	r0, [pc, #124]	; (16e6c <log_output_process+0x94>)
		prefix_offset = 0;
   16df0:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
   16df4:	b137      	cbz	r7, 16e04 <log_output_process+0x2c>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   16df6:	463b      	mov	r3, r7
   16df8:	4622      	mov	r2, r4
   16dfa:	491d      	ldr	r1, [pc, #116]	; (16e70 <log_output_process+0x98>)
   16dfc:	f01e fd1e 	bl	3583c <cbpprintf_external>
		int err = cbpprintf(cb, (void *)output, (void *)package);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
   16e00:	2800      	cmp	r0, #0
   16e02:	db16      	blt.n	16e32 <log_output_process+0x5a>
	}

	if (data_len) {
   16e04:	bb16      	cbnz	r6, 16e4c <log_output_process+0x74>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   16e06:	bb55      	cbnz	r5, 16e5e <log_output_process+0x86>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   16e08:	4620      	mov	r0, r4
   16e0a:	f01f fc79 	bl	36700 <log_output_flush>
}
   16e0e:	b004      	add	sp, #16
   16e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
   16e14:	9502      	str	r5, [sp, #8]
   16e16:	9301      	str	r3, [sp, #4]
   16e18:	9200      	str	r2, [sp, #0]
   16e1a:	460b      	mov	r3, r1
   16e1c:	2200      	movs	r2, #0
   16e1e:	990e      	ldr	r1, [sp, #56]	; 0x38
   16e20:	f7ff ff00 	bl	16c24 <prefix_print>
   16e24:	4680      	mov	r8, r0
		cb = out_func;
   16e26:	4813      	ldr	r0, [pc, #76]	; (16e74 <log_output_process+0x9c>)
   16e28:	e7e4      	b.n	16df4 <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   16e2a:	4812      	ldr	r0, [pc, #72]	; (16e74 <log_output_process+0x9c>)
		prefix_offset = 0;
   16e2c:	f04f 0800 	mov.w	r8, #0
   16e30:	e7e0      	b.n	16df4 <log_output_process+0x1c>
		__ASSERT_NO_MSG(err >= 0);
   16e32:	4c11      	ldr	r4, [pc, #68]	; (16e78 <log_output_process+0xa0>)
   16e34:	f44f 7300 	mov.w	r3, #512	; 0x200
   16e38:	4622      	mov	r2, r4
   16e3a:	4910      	ldr	r1, [pc, #64]	; (16e7c <log_output_process+0xa4>)
   16e3c:	4810      	ldr	r0, [pc, #64]	; (16e80 <log_output_process+0xa8>)
   16e3e:	f01f fa29 	bl	36294 <assert_print>
   16e42:	f44f 7100 	mov.w	r1, #512	; 0x200
   16e46:	4620      	mov	r0, r4
   16e48:	f01f fa1d 	bl	36286 <assert_post_action>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
   16e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16e4e:	9300      	str	r3, [sp, #0]
   16e50:	4643      	mov	r3, r8
   16e52:	4632      	mov	r2, r6
   16e54:	990c      	ldr	r1, [sp, #48]	; 0x30
   16e56:	4620      	mov	r0, r4
   16e58:	f01f fc37 	bl	366ca <log_msg_hexdump>
   16e5c:	e7d3      	b.n	16e06 <log_output_process+0x2e>
		postfix_print(output, flags, level);
   16e5e:	462a      	mov	r2, r5
   16e60:	990e      	ldr	r1, [sp, #56]	; 0x38
   16e62:	4620      	mov	r0, r4
   16e64:	f01f fc25 	bl	366b2 <postfix_print>
   16e68:	e7ce      	b.n	16e08 <log_output_process+0x30>
   16e6a:	bf00      	nop
   16e6c:	0003671b 	.word	0x0003671b
   16e70:	0003668b 	.word	0x0003668b
   16e74:	00016d7d 	.word	0x00016d7d
   16e78:	00041040 	.word	0x00041040
   16e7c:	000410a0 	.word	0x000410a0
   16e80:	0003f72c 	.word	0x0003f72c

00016e84 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   16e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e88:	b086      	sub	sp, #24
   16e8a:	4605      	mov	r5, r0
   16e8c:	460c      	mov	r4, r1
   16e8e:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   16e90:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
   16e94:	880e      	ldrh	r6, [r1, #0]
   16e96:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
   16e9a:	7808      	ldrb	r0, [r1, #0]
   16e9c:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
   16ea0:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   16ea2:	b133      	cbz	r3, 16eb2 <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   16ea4:	4a11      	ldr	r2, [pc, #68]	; (16eec <log_output_msg_process+0x68>)
   16ea6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   16ea8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   16eac:	2900      	cmp	r1, #0
   16eae:	da18      	bge.n	16ee2 <log_output_msg_process+0x5e>
   16eb0:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   16eb2:	4622      	mov	r2, r4
   16eb4:	f852 1b10 	ldr.w	r1, [r2], #16
   16eb8:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
   16ebc:	8860      	ldrh	r0, [r4, #2]
   16ebe:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   16ec2:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   16ec4:	b901      	cbnz	r1, 16ec8 <log_output_msg_process+0x44>
   16ec6:	2200      	movs	r2, #0
   16ec8:	9704      	str	r7, [sp, #16]
   16eca:	9003      	str	r0, [sp, #12]
   16ecc:	9402      	str	r4, [sp, #8]
   16ece:	9201      	str	r2, [sp, #4]
   16ed0:	9600      	str	r6, [sp, #0]
   16ed2:	2200      	movs	r2, #0
   16ed4:	4641      	mov	r1, r8
   16ed6:	4628      	mov	r0, r5
   16ed8:	f7ff ff7e 	bl	16dd8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   16edc:	b006      	add	sp, #24
   16ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   16ee2:	f7ff fcf7 	bl	168d4 <log_source_name_get>
   16ee6:	4603      	mov	r3, r0
   16ee8:	e7e3      	b.n	16eb2 <log_output_msg_process+0x2e>
   16eea:	bf00      	nop
   16eec:	0003f370 	.word	0x0003f370

00016ef0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   16ef0:	b570      	push	{r4, r5, r6, lr}
   16ef2:	b082      	sub	sp, #8
   16ef4:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   16ef6:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   16ef8:	f242 730f 	movw	r3, #9999	; 0x270f
   16efc:	428b      	cmp	r3, r1
   16efe:	bf28      	it	cs
   16f00:	460b      	movcs	r3, r1
   16f02:	4a0e      	ldr	r2, [pc, #56]	; (16f3c <log_output_dropped_process+0x4c>)
   16f04:	2105      	movs	r1, #5
   16f06:	4668      	mov	r0, sp
   16f08:	f01e fd81 	bl	35a0e <snprintk>
   16f0c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   16f0e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   16f10:	685b      	ldr	r3, [r3, #4]
   16f12:	220b      	movs	r2, #11
   16f14:	490a      	ldr	r1, [pc, #40]	; (16f40 <log_output_dropped_process+0x50>)
   16f16:	4628      	mov	r0, r5
   16f18:	f01f fbaa 	bl	36670 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   16f1c:	6863      	ldr	r3, [r4, #4]
   16f1e:	685b      	ldr	r3, [r3, #4]
   16f20:	4632      	mov	r2, r6
   16f22:	4669      	mov	r1, sp
   16f24:	4628      	mov	r0, r5
   16f26:	f01f fba3 	bl	36670 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   16f2a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   16f2c:	685b      	ldr	r3, [r3, #4]
   16f2e:	221b      	movs	r2, #27
   16f30:	4904      	ldr	r1, [pc, #16]	; (16f44 <log_output_dropped_process+0x54>)
   16f32:	4628      	mov	r0, r5
   16f34:	f01f fb9c 	bl	36670 <buffer_write>
}
   16f38:	b002      	add	sp, #8
   16f3a:	bd70      	pop	{r4, r5, r6, pc}
   16f3c:	00042cec 	.word	0x00042cec
   16f40:	000410c8 	.word	0x000410c8
   16f44:	000410ac 	.word	0x000410ac

00016f48 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   16f48:	4b07      	ldr	r3, [pc, #28]	; (16f68 <log_output_timestamp_freq_set+0x20>)
   16f4a:	2201      	movs	r2, #1
   16f4c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   16f4e:	e004      	b.n	16f5a <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
   16f50:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   16f52:	4a05      	ldr	r2, [pc, #20]	; (16f68 <log_output_timestamp_freq_set+0x20>)
   16f54:	6813      	ldr	r3, [r2, #0]
   16f56:	005b      	lsls	r3, r3, #1
   16f58:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   16f5a:	4b04      	ldr	r3, [pc, #16]	; (16f6c <log_output_timestamp_freq_set+0x24>)
   16f5c:	4298      	cmp	r0, r3
   16f5e:	d8f7      	bhi.n	16f50 <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
   16f60:	4b03      	ldr	r3, [pc, #12]	; (16f70 <log_output_timestamp_freq_set+0x28>)
   16f62:	6018      	str	r0, [r3, #0]
}
   16f64:	4770      	bx	lr
   16f66:	bf00      	nop
   16f68:	2000be74 	.word	0x2000be74
   16f6c:	000f4240 	.word	0x000f4240
   16f70:	2000be78 	.word	0x2000be78

00016f74 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   16f74:	4b03      	ldr	r3, [pc, #12]	; (16f84 <log_backend_rtt_init+0x10>)
   16f76:	2201      	movs	r2, #1
   16f78:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
   16f7a:	4b03      	ldr	r3, [pc, #12]	; (16f88 <log_backend_rtt_init+0x14>)
   16f7c:	4a03      	ldr	r2, [pc, #12]	; (16f8c <log_backend_rtt_init+0x18>)
   16f7e:	601a      	str	r2, [r3, #0]
}
   16f80:	4770      	bx	lr
   16f82:	bf00      	nop
   16f84:	2000caaf 	.word	0x2000caaf
   16f88:	2000bea4 	.word	0x2000bea4
   16f8c:	2000bea8 	.word	0x2000bea8

00016f90 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   16f90:	4b01      	ldr	r3, [pc, #4]	; (16f98 <format_set+0x8>)
   16f92:	6019      	str	r1, [r3, #0]
	return 0;
}
   16f94:	2000      	movs	r0, #0
   16f96:	4770      	bx	lr
   16f98:	2000be90 	.word	0x2000be90

00016f9c <on_failed_write>:
{
   16f9c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   16f9e:	b918      	cbnz	r0, 16fa8 <on_failed_write+0xc>
		host_present = false;
   16fa0:	4b07      	ldr	r3, [pc, #28]	; (16fc0 <on_failed_write+0x24>)
   16fa2:	2200      	movs	r2, #0
   16fa4:	701a      	strb	r2, [r3, #0]
}
   16fa6:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   16fa8:	4b06      	ldr	r3, [pc, #24]	; (16fc4 <on_failed_write+0x28>)
   16faa:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   16fac:	b123      	cbz	r3, 16fb8 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   16fae:	f241 3088 	movw	r0, #5000	; 0x1388
   16fb2:	f027 fe57 	bl	3ec64 <z_impl_k_busy_wait>
}
   16fb6:	e7f6      	b.n	16fa6 <on_failed_write+0xa>
		k_msleep(CONFIG_LOG_BACKEND_RTT_RETRY_DELAY_MS);
   16fb8:	2005      	movs	r0, #5
   16fba:	f01f fbbd 	bl	36738 <k_msleep>
}
   16fbe:	e7f2      	b.n	16fa6 <on_failed_write+0xa>
   16fc0:	2000caaf 	.word	0x2000caaf
   16fc4:	2000cab0 	.word	0x2000cab0

00016fc8 <on_write>:
{
   16fc8:	b538      	push	{r3, r4, r5, lr}
   16fca:	4604      	mov	r4, r0
	host_present = true;
   16fcc:	4b0a      	ldr	r3, [pc, #40]	; (16ff8 <on_write+0x30>)
   16fce:	2201      	movs	r2, #1
   16fd0:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   16fd2:	4b0a      	ldr	r3, [pc, #40]	; (16ffc <on_write+0x34>)
   16fd4:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   16fd6:	b92b      	cbnz	r3, 16fe4 <on_write+0x1c>
}
   16fd8:	bd38      	pop	{r3, r4, r5, pc}
			on_failed_write(retry_cnt--);
   16fda:	1e65      	subs	r5, r4, #1
   16fdc:	4620      	mov	r0, r4
   16fde:	f7ff ffdd 	bl	16f9c <on_failed_write>
   16fe2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   16fe4:	2000      	movs	r0, #0
   16fe6:	f019 fc85 	bl	308f4 <SEGGER_RTT_HasDataUp>
   16fea:	2800      	cmp	r0, #0
   16fec:	d0f4      	beq.n	16fd8 <on_write+0x10>
   16fee:	4b02      	ldr	r3, [pc, #8]	; (16ff8 <on_write+0x30>)
   16ff0:	781b      	ldrb	r3, [r3, #0]
   16ff2:	2b00      	cmp	r3, #0
   16ff4:	d1f1      	bne.n	16fda <on_write+0x12>
   16ff6:	e7ef      	b.n	16fd8 <on_write+0x10>
   16ff8:	2000caaf 	.word	0x2000caaf
   16ffc:	2000cab0 	.word	0x2000cab0

00017000 <data_out_block_mode>:
{
   17000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17002:	4606      	mov	r6, r0
   17004:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   17006:	2704      	movs	r7, #4
   17008:	e00d      	b.n	17026 <data_out_block_mode+0x26>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1700a:	462a      	mov	r2, r5
   1700c:	4631      	mov	r1, r6
   1700e:	2000      	movs	r0, #0
   17010:	f019 fc0c 	bl	3082c <SEGGER_RTT_WriteSkipNoLock>
   17014:	4604      	mov	r4, r0
   17016:	e014      	b.n	17042 <data_out_block_mode+0x42>
			on_write(retry_cnt);
   17018:	4638      	mov	r0, r7
   1701a:	f7ff ffd5 	bl	16fc8 <on_write>
	} while ((ret == 0) && host_present);
   1701e:	b9dc      	cbnz	r4, 17058 <data_out_block_mode+0x58>
   17020:	4b11      	ldr	r3, [pc, #68]	; (17068 <data_out_block_mode+0x68>)
   17022:	781b      	ldrb	r3, [r3, #0]
   17024:	b1c3      	cbz	r3, 17058 <data_out_block_mode+0x58>
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   17026:	4b11      	ldr	r3, [pc, #68]	; (1706c <data_out_block_mode+0x6c>)
   17028:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   1702a:	2b00      	cmp	r3, #0
   1702c:	d1ed      	bne.n	1700a <data_out_block_mode+0xa>
			RTT_LOCK();
   1702e:	f019 fc71 	bl	30914 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   17032:	462a      	mov	r2, r5
   17034:	4631      	mov	r1, r6
   17036:	2000      	movs	r0, #0
   17038:	f019 fbf8 	bl	3082c <SEGGER_RTT_WriteSkipNoLock>
   1703c:	4604      	mov	r4, r0
			RTT_UNLOCK();
   1703e:	f019 fc75 	bl	3092c <zephyr_rtt_mutex_unlock>
		if (ret) {
   17042:	2c00      	cmp	r4, #0
   17044:	d1e8      	bne.n	17018 <data_out_block_mode+0x18>
		} else if (host_present) {
   17046:	4b08      	ldr	r3, [pc, #32]	; (17068 <data_out_block_mode+0x68>)
   17048:	781b      	ldrb	r3, [r3, #0]
   1704a:	2b00      	cmp	r3, #0
   1704c:	d0e7      	beq.n	1701e <data_out_block_mode+0x1e>
			retry_cnt--;
   1704e:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   17050:	4638      	mov	r0, r7
   17052:	f7ff ffa3 	bl	16f9c <on_failed_write>
   17056:	e7e2      	b.n	1701e <data_out_block_mode+0x1e>
	return ((ret == 0) && host_present) ? 0 : length;
   17058:	b914      	cbnz	r4, 17060 <data_out_block_mode+0x60>
   1705a:	4b03      	ldr	r3, [pc, #12]	; (17068 <data_out_block_mode+0x68>)
   1705c:	781b      	ldrb	r3, [r3, #0]
   1705e:	b903      	cbnz	r3, 17062 <data_out_block_mode+0x62>
   17060:	462c      	mov	r4, r5
}
   17062:	4620      	mov	r0, r4
   17064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17066:	bf00      	nop
   17068:	2000caaf 	.word	0x2000caaf
   1706c:	2000cab0 	.word	0x2000cab0

00017070 <panic>:
{
   17070:	b508      	push	{r3, lr}
	panic_mode = true;
   17072:	4b03      	ldr	r3, [pc, #12]	; (17080 <panic+0x10>)
   17074:	2201      	movs	r2, #1
   17076:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   17078:	4802      	ldr	r0, [pc, #8]	; (17084 <panic+0x14>)
   1707a:	f01f fb41 	bl	36700 <log_output_flush>
}
   1707e:	bd08      	pop	{r3, pc}
   17080:	2000cab0 	.word	0x2000cab0
   17084:	00041148 	.word	0x00041148

00017088 <dropped>:
{
   17088:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1708a:	4802      	ldr	r0, [pc, #8]	; (17094 <dropped+0xc>)
   1708c:	f7ff ff30 	bl	16ef0 <log_output_dropped_process>
}
   17090:	bd08      	pop	{r3, pc}
   17092:	bf00      	nop
   17094:	00041148 	.word	0x00041148

00017098 <process>:
{
   17098:	b510      	push	{r4, lr}
   1709a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1709c:	4b04      	ldr	r3, [pc, #16]	; (170b0 <process+0x18>)
   1709e:	6818      	ldr	r0, [r3, #0]
   170a0:	f7ff f994 	bl	163cc <log_format_func_t_get>
   170a4:	4603      	mov	r3, r0
	log_output_func(&log_output_rtt, &msg->log, flags);
   170a6:	220f      	movs	r2, #15
   170a8:	4621      	mov	r1, r4
   170aa:	4802      	ldr	r0, [pc, #8]	; (170b4 <process+0x1c>)
   170ac:	4798      	blx	r3
}
   170ae:	bd10      	pop	{r4, pc}
   170b0:	2000be90 	.word	0x2000be90
   170b4:	00041148 	.word	0x00041148

000170b8 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   170b8:	b570      	push	{r4, r5, r6, lr}
   170ba:	4606      	mov	r6, r0
   170bc:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   170be:	2400      	movs	r4, #0
   170c0:	e005      	b.n	170ce <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
   170c2:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
   170c4:	4804      	ldr	r0, [pc, #16]	; (170d8 <char_out+0x20>)
   170c6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   170c8:	69db      	ldr	r3, [r3, #28]
   170ca:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   170cc:	3401      	adds	r4, #1
   170ce:	42ac      	cmp	r4, r5
   170d0:	d3f7      	bcc.n	170c2 <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   170d2:	4628      	mov	r0, r5
   170d4:	bd70      	pop	{r4, r5, r6, pc}
   170d6:	bf00      	nop
   170d8:	0003efcc 	.word	0x0003efcc

000170dc <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   170dc:	4b01      	ldr	r3, [pc, #4]	; (170e4 <format_set+0x8>)
   170de:	6019      	str	r1, [r3, #0]
	return 0;
}
   170e0:	2000      	movs	r0, #0
   170e2:	4770      	bx	lr
   170e4:	2000bed8 	.word	0x2000bed8

000170e8 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
   170e8:	b510      	push	{r4, lr}
   170ea:	4808      	ldr	r0, [pc, #32]	; (1710c <log_backend_uart_init+0x24>)
   170ec:	f027 fb97 	bl	3e81e <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   170f0:	b100      	cbz	r0, 170f4 <log_backend_uart_init+0xc>
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   170f2:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   170f4:	4c06      	ldr	r4, [pc, #24]	; (17110 <log_backend_uart_init+0x28>)
   170f6:	2370      	movs	r3, #112	; 0x70
   170f8:	4622      	mov	r2, r4
   170fa:	4906      	ldr	r1, [pc, #24]	; (17114 <log_backend_uart_init+0x2c>)
   170fc:	4806      	ldr	r0, [pc, #24]	; (17118 <log_backend_uart_init+0x30>)
   170fe:	f01f f8c9 	bl	36294 <assert_print>
   17102:	2170      	movs	r1, #112	; 0x70
   17104:	4620      	mov	r0, r4
   17106:	f01f f8be 	bl	36286 <assert_post_action>
   1710a:	bf00      	nop
   1710c:	0003efcc 	.word	0x0003efcc
   17110:	00041158 	.word	0x00041158
   17114:	00041198 	.word	0x00041198
   17118:	0003f72c 	.word	0x0003f72c

0001711c <panic>:

static void panic(struct log_backend const *const backend)
{
   1711c:	b508      	push	{r3, lr}
	in_panic = true;
   1711e:	4b03      	ldr	r3, [pc, #12]	; (1712c <panic+0x10>)
   17120:	2201      	movs	r2, #1
   17122:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
   17124:	4802      	ldr	r0, [pc, #8]	; (17130 <panic+0x14>)
   17126:	f01f faeb 	bl	36700 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   1712a:	bd08      	pop	{r3, pc}
   1712c:	2000cab1 	.word	0x2000cab1
   17130:	000411f0 	.word	0x000411f0

00017134 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   17134:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
   17136:	4802      	ldr	r0, [pc, #8]	; (17140 <dropped+0xc>)
   17138:	f7ff feda 	bl	16ef0 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   1713c:	bd08      	pop	{r3, pc}
   1713e:	bf00      	nop
   17140:	000411f0 	.word	0x000411f0

00017144 <process>:
{
   17144:	b510      	push	{r4, lr}
   17146:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   17148:	4b04      	ldr	r3, [pc, #16]	; (1715c <process+0x18>)
   1714a:	6818      	ldr	r0, [r3, #0]
   1714c:	f7ff f93e 	bl	163cc <log_format_func_t_get>
   17150:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   17152:	220f      	movs	r2, #15
   17154:	4621      	mov	r1, r4
   17156:	4802      	ldr	r0, [pc, #8]	; (17160 <process+0x1c>)
   17158:	4798      	blx	r3
}
   1715a:	bd10      	pop	{r4, pc}
   1715c:	2000bed8 	.word	0x2000bed8
   17160:	000411f0 	.word	0x000411f0

00017164 <nvs_startup>:
	}
	return 0;
}

static int nvs_startup(struct nvs_fs *fs)
{
   17164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17168:	b093      	sub	sp, #76	; 0x4c
   1716a:	4604      	mov	r4, r0
	size_t ate_size, empty_len;
	/* Initialize addr to 0 for the case fs->sector_count == 0. This
	 * should never happen as this is verified in nvs_mount() but both
	 * Coverity and GCC believe the contrary.
	 */
	uint32_t addr = 0U;
   1716c:	2300      	movs	r3, #0
   1716e:	9303      	str	r3, [sp, #12]
	uint16_t i, closed_sectors = 0;
	uint8_t erase_value = fs->flash_parameters->erase_value;
   17170:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   17172:	791e      	ldrb	r6, [r3, #4]

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   17174:	f100 0914 	add.w	r9, r0, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   17178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1717c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17180:	4648      	mov	r0, r9
   17182:	f01a fb6b 	bl	3185c <z_impl_k_mutex_lock>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   17186:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   17188:	681b      	ldr	r3, [r3, #0]
   1718a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   1718c:	2a01      	cmp	r2, #1
   1718e:	d906      	bls.n	1719e <nvs_startup+0x3a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   17190:	1dd7      	adds	r7, r2, #7
   17192:	4253      	negs	r3, r2
   17194:	401f      	ands	r7, r3
	uint16_t i, closed_sectors = 0;
   17196:	f04f 0800 	mov.w	r8, #0

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
	/* step through the sectors to find a open sector following
	 * a closed sector, this is where NVS can write.
	 */
	for (i = 0; i < fs->sector_count; i++) {
   1719a:	4645      	mov	r5, r8
   1719c:	e003      	b.n	171a6 <nvs_startup+0x42>
		return len;
   1719e:	2708      	movs	r7, #8
   171a0:	e7f9      	b.n	17196 <nvs_startup+0x32>
	for (i = 0; i < fs->sector_count; i++) {
   171a2:	3501      	adds	r5, #1
   171a4:	b2ad      	uxth	r5, r5
   171a6:	89e3      	ldrh	r3, [r4, #14]
   171a8:	42ab      	cmp	r3, r5
   171aa:	d91c      	bls.n	171e6 <nvs_startup+0x82>
		addr = (i << ADDR_SECT_SHIFT) +
		       (uint16_t)(fs->sector_size - ate_size);
   171ac:	89a1      	ldrh	r1, [r4, #12]
   171ae:	1bc9      	subs	r1, r1, r7
   171b0:	b289      	uxth	r1, r1
		addr = (i << ADDR_SECT_SHIFT) +
   171b2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   171b6:	9103      	str	r1, [sp, #12]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
   171b8:	2308      	movs	r3, #8
   171ba:	4632      	mov	r2, r6
   171bc:	4620      	mov	r0, r4
   171be:	f01f fb2a 	bl	36816 <nvs_flash_cmp_const>
					 sizeof(struct nvs_ate));
		if (rc) {
   171c2:	2800      	cmp	r0, #0
   171c4:	d0ed      	beq.n	171a2 <nvs_startup+0x3e>
			/* closed sector */
			closed_sectors++;
   171c6:	f108 0801 	add.w	r8, r8, #1
   171ca:	fa1f f888 	uxth.w	r8, r8
			nvs_sector_advance(fs, &addr);
   171ce:	a903      	add	r1, sp, #12
   171d0:	4620      	mov	r0, r4
   171d2:	f01f fae7 	bl	367a4 <nvs_sector_advance>
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
   171d6:	2308      	movs	r3, #8
   171d8:	4632      	mov	r2, r6
   171da:	9903      	ldr	r1, [sp, #12]
   171dc:	4620      	mov	r0, r4
   171de:	f01f fb1a 	bl	36816 <nvs_flash_cmp_const>
						 sizeof(struct nvs_ate));
			if (!rc) {
   171e2:	2800      	cmp	r0, #0
   171e4:	d1dd      	bne.n	171a2 <nvs_startup+0x3e>
				break;
			}
		}
	}
	/* all sectors are closed, this is not a nvs fs */
	if (closed_sectors == fs->sector_count) {
   171e6:	89e3      	ldrh	r3, [r4, #14]
   171e8:	4543      	cmp	r3, r8
   171ea:	f000 8139 	beq.w	17460 <nvs_startup+0x2fc>
		rc = -EDEADLK;
		goto end;
	}

	if (i == fs->sector_count) {
   171ee:	42ab      	cmp	r3, r5
   171f0:	d00d      	beq.n	1720e <nvs_startup+0xaa>

	/* addr contains address of closing ate in the most recent sector,
	 * search for the last valid ate using the recover_last_ate routine
	 */

	rc = nvs_recover_last_ate(fs, &addr);
   171f2:	a903      	add	r1, sp, #12
   171f4:	4620      	mov	r0, r4
   171f6:	f01f fb7c 	bl	368f2 <nvs_recover_last_ate>
	if (rc) {
   171fa:	4605      	mov	r5, r0
   171fc:	2800      	cmp	r0, #0
   171fe:	f040 8114 	bne.w	1742a <nvs_startup+0x2c6>

	/* addr contains address of the last valid ate in the most recent sector
	 * search for the first ate containing all cells erased, in the process
	 * also update fs->data_wra.
	 */
	fs->ate_wra = addr;
   17202:	9b03      	ldr	r3, [sp, #12]
   17204:	6063      	str	r3, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
   17206:	0c1b      	lsrs	r3, r3, #16
   17208:	041b      	lsls	r3, r3, #16
   1720a:	60a3      	str	r3, [r4, #8]

	while (fs->ate_wra >= fs->data_wra) {
   1720c:	e010      	b.n	17230 <nvs_startup+0xcc>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
   1720e:	2308      	movs	r3, #8
   17210:	4632      	mov	r2, r6
   17212:	9903      	ldr	r1, [sp, #12]
   17214:	1bc9      	subs	r1, r1, r7
   17216:	4620      	mov	r0, r4
   17218:	f01f fafd 	bl	36816 <nvs_flash_cmp_const>
		if (!rc) {
   1721c:	2800      	cmp	r0, #0
   1721e:	d1e8      	bne.n	171f2 <nvs_startup+0x8e>
			nvs_sector_advance(fs, &addr);
   17220:	a903      	add	r1, sp, #12
   17222:	4620      	mov	r0, r4
   17224:	f01f fabe 	bl	367a4 <nvs_sector_advance>
   17228:	e7e3      	b.n	171f2 <nvs_startup+0x8e>
				rc = -ESPIPE;
				goto end;
			}
		}

		fs->ate_wra -= ate_size;
   1722a:	6863      	ldr	r3, [r4, #4]
   1722c:	1bdb      	subs	r3, r3, r7
   1722e:	6063      	str	r3, [r4, #4]
	while (fs->ate_wra >= fs->data_wra) {
   17230:	6861      	ldr	r1, [r4, #4]
   17232:	68a3      	ldr	r3, [r4, #8]
   17234:	4299      	cmp	r1, r3
   17236:	d32e      	bcc.n	17296 <nvs_startup+0x132>
		rc = nvs_flash_ate_rd(fs, fs->ate_wra, &last_ate);
   17238:	aa04      	add	r2, sp, #16
   1723a:	4620      	mov	r0, r4
   1723c:	f01f faa1 	bl	36782 <nvs_flash_ate_rd>
		if (rc) {
   17240:	4605      	mov	r5, r0
   17242:	2800      	cmp	r0, #0
   17244:	f040 80ea 	bne.w	1741c <nvs_startup+0x2b8>
		rc = nvs_ate_cmp_const(&last_ate, erase_value);
   17248:	4631      	mov	r1, r6
   1724a:	a804      	add	r0, sp, #16
   1724c:	f01f fa9e 	bl	3678c <nvs_ate_cmp_const>
		if (!rc) {
   17250:	b308      	cbz	r0, 17296 <nvs_startup+0x132>
		if (nvs_ate_valid(fs, &last_ate)) {
   17252:	a904      	add	r1, sp, #16
   17254:	4620      	mov	r0, r4
   17256:	f01f fb30 	bl	368ba <nvs_ate_valid>
   1725a:	2800      	cmp	r0, #0
   1725c:	d0e5      	beq.n	1722a <nvs_startup+0xc6>
			fs->data_wra = addr & ADDR_SECT_MASK;
   1725e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17262:	0419      	lsls	r1, r3, #16
   17264:	60a1      	str	r1, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   17266:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1726a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1726e:	4403      	add	r3, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   17270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   17272:	6812      	ldr	r2, [r2, #0]
   17274:	b2d5      	uxtb	r5, r2
	if (write_block_size <= 1U) {
   17276:	2d01      	cmp	r5, #1
   17278:	d903      	bls.n	17282 <nvs_startup+0x11e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1727a:	442b      	add	r3, r5
   1727c:	3b01      	subs	r3, #1
   1727e:	426a      	negs	r2, r5
   17280:	4013      	ands	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.offset + last_ate.len);
   17282:	440b      	add	r3, r1
   17284:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
   17286:	6862      	ldr	r2, [r4, #4]
   17288:	4293      	cmp	r3, r2
   1728a:	d1ce      	bne.n	1722a <nvs_startup+0xc6>
   1728c:	2800      	cmp	r0, #0
   1728e:	d0cc      	beq.n	1722a <nvs_startup+0xc6>
				rc = -ESPIPE;
   17290:	f06f 051c 	mvn.w	r5, #28
   17294:	e0c9      	b.n	1742a <nvs_startup+0x2c6>
	 * we might need to restart gc if it has not yet finished. Otherwise
	 * just erase the sector.
	 * When gc needs to be restarted, first erase the sector otherwise the
	 * data might not fit into the sector.
	 */
	addr = fs->ate_wra & ADDR_SECT_MASK;
   17296:	88e3      	ldrh	r3, [r4, #6]
   17298:	041b      	lsls	r3, r3, #16
   1729a:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &addr);
   1729c:	a903      	add	r1, sp, #12
   1729e:	4620      	mov	r0, r4
   172a0:	f01f fa80 	bl	367a4 <nvs_sector_advance>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
   172a4:	89a3      	ldrh	r3, [r4, #12]
   172a6:	4632      	mov	r2, r6
   172a8:	9903      	ldr	r1, [sp, #12]
   172aa:	4620      	mov	r0, r4
   172ac:	f01f fab3 	bl	36816 <nvs_flash_cmp_const>
	if (rc < 0) {
   172b0:	1e05      	subs	r5, r0, #0
   172b2:	f2c0 80ba 	blt.w	1742a <nvs_startup+0x2c6>
		goto end;
	}
	if (rc) {
   172b6:	2d00      	cmp	r5, #0
   172b8:	f000 809d 	beq.w	173f6 <nvs_startup+0x292>
		 * (gc_done_ate) that indicates that gc was finished.
		 */
		bool gc_done_marker = false;
		struct nvs_ate gc_done_ate;

		addr = fs->ate_wra + ate_size;
   172bc:	6863      	ldr	r3, [r4, #4]
   172be:	443b      	add	r3, r7
   172c0:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   172c2:	e002      	b.n	172ca <nvs_startup+0x166>
			    (gc_done_ate.id == 0xffff) &&
			    (gc_done_ate.len == 0U)) {
				gc_done_marker = true;
				break;
			}
			addr += ate_size;
   172c4:	9b03      	ldr	r3, [sp, #12]
   172c6:	443b      	add	r3, r7
   172c8:	9303      	str	r3, [sp, #12]
		while ((addr & ADDR_OFFS_MASK) < (fs->sector_size - ate_size)) {
   172ca:	9903      	ldr	r1, [sp, #12]
   172cc:	b28a      	uxth	r2, r1
   172ce:	89a3      	ldrh	r3, [r4, #12]
   172d0:	1bdb      	subs	r3, r3, r7
   172d2:	429a      	cmp	r2, r3
   172d4:	d219      	bcs.n	1730a <nvs_startup+0x1a6>
			rc = nvs_flash_ate_rd(fs, addr, &gc_done_ate);
   172d6:	aa01      	add	r2, sp, #4
   172d8:	4620      	mov	r0, r4
   172da:	f01f fa52 	bl	36782 <nvs_flash_ate_rd>
			if (rc) {
   172de:	4605      	mov	r5, r0
   172e0:	2800      	cmp	r0, #0
   172e2:	f040 809b 	bne.w	1741c <nvs_startup+0x2b8>
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   172e6:	a901      	add	r1, sp, #4
   172e8:	4620      	mov	r0, r4
   172ea:	f01f fae6 	bl	368ba <nvs_ate_valid>
   172ee:	2800      	cmp	r0, #0
   172f0:	d0e8      	beq.n	172c4 <nvs_startup+0x160>
			    (gc_done_ate.id == 0xffff) &&
   172f2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			if (nvs_ate_valid(fs, &gc_done_ate) &&
   172f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   172fa:	429a      	cmp	r2, r3
   172fc:	d1e2      	bne.n	172c4 <nvs_startup+0x160>
			    (gc_done_ate.len == 0U)) {
   172fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
			    (gc_done_ate.id == 0xffff) &&
   17302:	2b00      	cmp	r3, #0
   17304:	d1de      	bne.n	172c4 <nvs_startup+0x160>
				gc_done_marker = true;
   17306:	2301      	movs	r3, #1
   17308:	e000      	b.n	1730c <nvs_startup+0x1a8>
		bool gc_done_marker = false;
   1730a:	2300      	movs	r3, #0
		}

		if (gc_done_marker) {
   1730c:	2b00      	cmp	r3, #0
   1730e:	d13b      	bne.n	17388 <nvs_startup+0x224>
			addr = fs->ate_wra & ADDR_SECT_MASK;
			nvs_sector_advance(fs, &addr);
			rc = nvs_flash_erase_sector(fs, addr);
			goto end;
		}
		LOG_INF("No GC Done marker found: restarting gc");
   17310:	4b55      	ldr	r3, [pc, #340]	; (17468 <nvs_startup+0x304>)
   17312:	930b      	str	r3, [sp, #44]	; 0x2c
   17314:	2302      	movs	r3, #2
   17316:	f88d 3000 	strb.w	r3, [sp]
   1731a:	2300      	movs	r3, #0
   1731c:	f88d 3001 	strb.w	r3, [sp, #1]
   17320:	f88d 3002 	strb.w	r3, [sp, #2]
   17324:	f88d 3003 	strb.w	r3, [sp, #3]
   17328:	9a00      	ldr	r2, [sp, #0]
   1732a:	920a      	str	r2, [sp, #40]	; 0x28
   1732c:	4619      	mov	r1, r3
   1732e:	f363 0100 	bfi	r1, r3, #0, #1
   17332:	f363 0141 	bfi	r1, r3, #1, #1
   17336:	f363 0182 	bfi	r1, r3, #2, #1
   1733a:	f363 01c5 	bfi	r1, r3, #3, #3
   1733e:	2203      	movs	r2, #3
   17340:	f362 1188 	bfi	r1, r2, #6, #3
   17344:	2208      	movs	r2, #8
   17346:	f362 2152 	bfi	r1, r2, #9, #10
   1734a:	f363 41de 	bfi	r1, r3, #19, #12
   1734e:	f363 71df 	bfi	r1, r3, #31, #1
   17352:	aa0a      	add	r2, sp, #40	; 0x28
   17354:	4845      	ldr	r0, [pc, #276]	; (1746c <nvs_startup+0x308>)
   17356:	f7ff faf9 	bl	1694c <z_impl_z_log_msg_static_create>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   1735a:	6861      	ldr	r1, [r4, #4]
   1735c:	4620      	mov	r0, r4
   1735e:	f01f fa81 	bl	36864 <nvs_flash_erase_sector>
		if (rc) {
   17362:	4605      	mov	r5, r0
   17364:	2800      	cmp	r0, #0
   17366:	d160      	bne.n	1742a <nvs_startup+0x2c6>
			goto end;
		}
		fs->ate_wra &= ADDR_SECT_MASK;
   17368:	88e3      	ldrh	r3, [r4, #6]
   1736a:	041b      	lsls	r3, r3, #16
   1736c:	6063      	str	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
   1736e:	89a2      	ldrh	r2, [r4, #12]
   17370:	eba2 0247 	sub.w	r2, r2, r7, lsl #1
   17374:	4413      	add	r3, r2
   17376:	6063      	str	r3, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
   17378:	0c1b      	lsrs	r3, r3, #16
   1737a:	041b      	lsls	r3, r3, #16
   1737c:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
   1737e:	4620      	mov	r0, r4
   17380:	f01f fc1d 	bl	36bbe <nvs_gc>
   17384:	4605      	mov	r5, r0
		goto end;
   17386:	e049      	b.n	1741c <nvs_startup+0x2b8>
			LOG_INF("GC Done marker found");
   17388:	4b39      	ldr	r3, [pc, #228]	; (17470 <nvs_startup+0x30c>)
   1738a:	9311      	str	r3, [sp, #68]	; 0x44
   1738c:	2302      	movs	r3, #2
   1738e:	f88d 3000 	strb.w	r3, [sp]
   17392:	2300      	movs	r3, #0
   17394:	f88d 3001 	strb.w	r3, [sp, #1]
   17398:	f88d 3002 	strb.w	r3, [sp, #2]
   1739c:	f88d 3003 	strb.w	r3, [sp, #3]
   173a0:	9a00      	ldr	r2, [sp, #0]
   173a2:	9210      	str	r2, [sp, #64]	; 0x40
   173a4:	4619      	mov	r1, r3
   173a6:	f363 0100 	bfi	r1, r3, #0, #1
   173aa:	f363 0141 	bfi	r1, r3, #1, #1
   173ae:	f363 0182 	bfi	r1, r3, #2, #1
   173b2:	f363 01c5 	bfi	r1, r3, #3, #3
   173b6:	2203      	movs	r2, #3
   173b8:	f362 1188 	bfi	r1, r2, #6, #3
   173bc:	2208      	movs	r2, #8
   173be:	f362 2152 	bfi	r1, r2, #9, #10
   173c2:	f363 41de 	bfi	r1, r3, #19, #12
   173c6:	f363 71df 	bfi	r1, r3, #31, #1
   173ca:	aa10      	add	r2, sp, #64	; 0x40
   173cc:	4827      	ldr	r0, [pc, #156]	; (1746c <nvs_startup+0x308>)
   173ce:	f7ff fabd 	bl	1694c <z_impl_z_log_msg_static_create>
			addr = fs->ate_wra & ADDR_SECT_MASK;
   173d2:	88e3      	ldrh	r3, [r4, #6]
   173d4:	041b      	lsls	r3, r3, #16
   173d6:	9303      	str	r3, [sp, #12]
			nvs_sector_advance(fs, &addr);
   173d8:	a903      	add	r1, sp, #12
   173da:	4620      	mov	r0, r4
   173dc:	f01f f9e2 	bl	367a4 <nvs_sector_advance>
			rc = nvs_flash_erase_sector(fs, addr);
   173e0:	9903      	ldr	r1, [sp, #12]
   173e2:	4620      	mov	r0, r4
   173e4:	f01f fa3e 	bl	36864 <nvs_flash_erase_sector>
   173e8:	4605      	mov	r5, r0
			goto end;
   173ea:	e017      	b.n	1741c <nvs_startup+0x2b8>
		}
		if (!rc) {
			break;
		}

		fs->data_wra += fs->flash_parameters->write_block_size;
   173ec:	68a3      	ldr	r3, [r4, #8]
   173ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   173f0:	6812      	ldr	r2, [r2, #0]
   173f2:	4413      	add	r3, r2
   173f4:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra > fs->data_wra) {
   173f6:	6863      	ldr	r3, [r4, #4]
   173f8:	68a1      	ldr	r1, [r4, #8]
   173fa:	428b      	cmp	r3, r1
   173fc:	d908      	bls.n	17410 <nvs_startup+0x2ac>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
   173fe:	1a5b      	subs	r3, r3, r1
   17400:	4632      	mov	r2, r6
   17402:	4620      	mov	r0, r4
   17404:	f01f fa07 	bl	36816 <nvs_flash_cmp_const>
		if (rc < 0) {
   17408:	1e05      	subs	r5, r0, #0
   1740a:	db07      	blt.n	1741c <nvs_startup+0x2b8>
		if (!rc) {
   1740c:	2d00      	cmp	r5, #0
   1740e:	d1ed      	bne.n	173ec <nvs_startup+0x288>

	/* If the ate_wra is pointing to the first ate write location in a
	 * sector and data_wra is not 0, erase the sector as it contains no
	 * valid data (this also avoids closing a sector without any data).
	 */
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   17410:	6861      	ldr	r1, [r4, #4]
   17412:	eb01 0247 	add.w	r2, r1, r7, lsl #1
   17416:	89a3      	ldrh	r3, [r4, #12]
   17418:	429a      	cmp	r2, r3
   1741a:	d00d      	beq.n	17438 <nvs_startup+0x2d4>

end:
	/* If the sector is empty add a gc done ate to avoid having insufficient
	 * space when doing gc.
	 */
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   1741c:	b92d      	cbnz	r5, 1742a <nvs_startup+0x2c6>
   1741e:	88a2      	ldrh	r2, [r4, #4]
		      (fs->sector_size - 2 * ate_size))) {
   17420:	89a3      	ldrh	r3, [r4, #12]
   17422:	eba3 0347 	sub.w	r3, r3, r7, lsl #1
	if ((!rc) && ((fs->ate_wra & ADDR_OFFS_MASK) ==
   17426:	429a      	cmp	r2, r3
   17428:	d015      	beq.n	17456 <nvs_startup+0x2f2>
	return z_impl_k_mutex_unlock(mutex);
   1742a:	4648      	mov	r0, r9
   1742c:	f01a fb2c 	bl	31a88 <z_impl_k_mutex_unlock>

		rc = nvs_add_gc_done_ate(fs);
	}
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   17430:	4628      	mov	r0, r5
   17432:	b013      	add	sp, #76	; 0x4c
   17434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    (fs->data_wra != (fs->ate_wra & ADDR_SECT_MASK))) {
   17438:	68a2      	ldr	r2, [r4, #8]
   1743a:	0c0b      	lsrs	r3, r1, #16
   1743c:	041b      	lsls	r3, r3, #16
	if (((fs->ate_wra + 2 * ate_size) == fs->sector_size) &&
   1743e:	429a      	cmp	r2, r3
   17440:	d0ec      	beq.n	1741c <nvs_startup+0x2b8>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
   17442:	4620      	mov	r0, r4
   17444:	f01f fa0e 	bl	36864 <nvs_flash_erase_sector>
		if (rc) {
   17448:	4605      	mov	r5, r0
   1744a:	2800      	cmp	r0, #0
   1744c:	d1ed      	bne.n	1742a <nvs_startup+0x2c6>
		fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   1744e:	88e3      	ldrh	r3, [r4, #6]
   17450:	041b      	lsls	r3, r3, #16
   17452:	60a3      	str	r3, [r4, #8]
   17454:	e7e2      	b.n	1741c <nvs_startup+0x2b8>
		rc = nvs_add_gc_done_ate(fs);
   17456:	4620      	mov	r0, r4
   17458:	f01f fb9b 	bl	36b92 <nvs_add_gc_done_ate>
   1745c:	4605      	mov	r5, r0
   1745e:	e7e4      	b.n	1742a <nvs_startup+0x2c6>
		rc = -EDEADLK;
   17460:	f06f 052c 	mvn.w	r5, #44	; 0x2c
   17464:	e7e1      	b.n	1742a <nvs_startup+0x2c6>
   17466:	bf00      	nop
   17468:	00041218 	.word	0x00041218
   1746c:	0003f440 	.word	0x0003f440
   17470:	00041200 	.word	0x00041200

00017474 <nvs_mount>:

	return 0;
}

int nvs_mount(struct nvs_fs *fs)
{
   17474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17478:	b0a2      	sub	sp, #136	; 0x88
   1747a:	af00      	add	r7, sp, #0
   1747c:	4604      	mov	r4, r0

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
   1747e:	3014      	adds	r0, #20
	return z_impl_k_mutex_init(mutex);
   17480:	f027 fa4c 	bl	3e91c <z_impl_k_mutex_init>

	fs->flash_parameters = flash_get_parameters(fs->flash_device);
   17484:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
__syscall const struct flash_parameters *flash_get_parameters(const struct device *dev);

static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
   17486:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   17488:	68db      	ldr	r3, [r3, #12]
   1748a:	4798      	blx	r3
   1748c:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
   1748e:	2800      	cmp	r0, #0
   17490:	d04b      	beq.n	1752a <nvs_mount+0xb6>
		LOG_ERR("Could not obtain flash parameters");
		return -EINVAL;
	}

	write_block_size = flash_get_write_block_size(fs->flash_device);
   17492:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	const struct flash_driver_api *api =
   17494:	6883      	ldr	r3, [r0, #8]
	return api->get_parameters(dev)->write_block_size;
   17496:	68db      	ldr	r3, [r3, #12]
   17498:	4798      	blx	r3
   1749a:	6803      	ldr	r3, [r0, #0]

	/* check that the write block size is supported */
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
   1749c:	3b01      	subs	r3, #1
   1749e:	2b1f      	cmp	r3, #31
   174a0:	d86a      	bhi.n	17578 <nvs_mount+0x104>
		LOG_ERR("Unsupported write block size");
		return -EINVAL;
	}

	/* check that sector size is a multiple of pagesize */
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
   174a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   174a4:	6821      	ldr	r1, [r4, #0]
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   174a6:	1d3a      	adds	r2, r7, #4
   174a8:	f025 f928 	bl	3c6fc <z_impl_flash_get_page_info_by_offs>
	if (rc) {
   174ac:	2800      	cmp	r0, #0
   174ae:	f040 8088 	bne.w	175c2 <nvs_mount+0x14e>
		LOG_ERR("Unable to get page info");
		return -EINVAL;
	}
	if (!fs->sector_size || fs->sector_size % info.size) {
   174b2:	89a3      	ldrh	r3, [r4, #12]
   174b4:	2b00      	cmp	r3, #0
   174b6:	f000 80a9 	beq.w	1760c <nvs_mount+0x198>
   174ba:	68ba      	ldr	r2, [r7, #8]
   174bc:	fbb3 f1f2 	udiv	r1, r3, r2
   174c0:	fb02 3311 	mls	r3, r2, r1, r3
   174c4:	2b00      	cmp	r3, #0
   174c6:	f040 80a1 	bne.w	1760c <nvs_mount+0x198>
		LOG_ERR("Invalid sector size");
		return -EINVAL;
	}

	/* check the number of sectors, it should be at least 2 */
	if (fs->sector_count < 2) {
   174ca:	89e3      	ldrh	r3, [r4, #14]
   174cc:	2b01      	cmp	r3, #1
   174ce:	f240 80c2 	bls.w	17656 <nvs_mount+0x1e2>
		LOG_ERR("Configuration error - sector count");
		return -EINVAL;
	}

	rc = nvs_startup(fs);
   174d2:	4620      	mov	r0, r4
   174d4:	f7ff fe46 	bl	17164 <nvs_startup>
	if (rc) {
   174d8:	4605      	mov	r5, r0
   174da:	2800      	cmp	r0, #0
   174dc:	f040 819b 	bne.w	17816 <nvs_mount+0x3a2>
		return rc;
	}

	/* nvs is ready for use */
	fs->ready = true;
   174e0:	2301      	movs	r3, #1
   174e2:	7423      	strb	r3, [r4, #16]

	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   174e4:	f8b4 e00e 	ldrh.w	lr, [r4, #14]
   174e8:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   174ec:	466e      	mov	r6, sp
   174ee:	b088      	sub	sp, #32
   174f0:	466b      	mov	r3, sp
   174f2:	f113 0210 	adds.w	r2, r3, #16
   174f6:	f000 80d3 	beq.w	176a0 <nvs_mount+0x22c>
   174fa:	2110      	movs	r1, #16
   174fc:	b17a      	cbz	r2, 1751e <nvs_mount+0xaa>
   174fe:	4608      	mov	r0, r1
   17500:	2904      	cmp	r1, #4
   17502:	dd03      	ble.n	1750c <nvs_mount+0x98>
   17504:	f8df 8320 	ldr.w	r8, [pc, #800]	; 17828 <nvs_mount+0x3b4>
   17508:	f8c3 8014 	str.w	r8, [r3, #20]
   1750c:	2808      	cmp	r0, #8
   1750e:	dd01      	ble.n	17514 <nvs_mount+0xa0>
   17510:	f8c3 e018 	str.w	lr, [r3, #24]
   17514:	280c      	cmp	r0, #12
   17516:	f340 80c6 	ble.w	176a6 <nvs_mount+0x232>
   1751a:	f8c3 c01c 	str.w	ip, [r3, #28]
   1751e:	290f      	cmp	r1, #15
   17520:	f340 8106 	ble.w	17730 <nvs_mount+0x2bc>
   17524:	f04f 0c10 	mov.w	ip, #16
   17528:	e0bf      	b.n	176aa <nvs_mount+0x236>
		LOG_ERR("Could not obtain flash parameters");
   1752a:	4bc0      	ldr	r3, [pc, #768]	; (1782c <nvs_mount+0x3b8>)
   1752c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   17530:	2302      	movs	r3, #2
   17532:	703b      	strb	r3, [r7, #0]
   17534:	2300      	movs	r3, #0
   17536:	707b      	strb	r3, [r7, #1]
   17538:	70bb      	strb	r3, [r7, #2]
   1753a:	70fb      	strb	r3, [r7, #3]
   1753c:	683a      	ldr	r2, [r7, #0]
   1753e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
   17542:	4619      	mov	r1, r3
   17544:	f363 0100 	bfi	r1, r3, #0, #1
   17548:	f363 0141 	bfi	r1, r3, #1, #1
   1754c:	f363 0182 	bfi	r1, r3, #2, #1
   17550:	f363 01c5 	bfi	r1, r3, #3, #3
   17554:	2201      	movs	r2, #1
   17556:	f362 1188 	bfi	r1, r2, #6, #3
   1755a:	2208      	movs	r2, #8
   1755c:	f362 2152 	bfi	r1, r2, #9, #10
   17560:	f363 41de 	bfi	r1, r3, #19, #12
   17564:	f363 71df 	bfi	r1, r3, #31, #1
   17568:	f107 0280 	add.w	r2, r7, #128	; 0x80
   1756c:	48b0      	ldr	r0, [pc, #704]	; (17830 <nvs_mount+0x3bc>)
   1756e:	f7ff f9ed 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   17572:	f06f 0515 	mvn.w	r5, #21
   17576:	e14e      	b.n	17816 <nvs_mount+0x3a2>
		LOG_ERR("Unsupported write block size");
   17578:	4bae      	ldr	r3, [pc, #696]	; (17834 <nvs_mount+0x3c0>)
   1757a:	66fb      	str	r3, [r7, #108]	; 0x6c
   1757c:	2302      	movs	r3, #2
   1757e:	703b      	strb	r3, [r7, #0]
   17580:	2300      	movs	r3, #0
   17582:	707b      	strb	r3, [r7, #1]
   17584:	70bb      	strb	r3, [r7, #2]
   17586:	70fb      	strb	r3, [r7, #3]
   17588:	683a      	ldr	r2, [r7, #0]
   1758a:	66ba      	str	r2, [r7, #104]	; 0x68
   1758c:	4619      	mov	r1, r3
   1758e:	f363 0100 	bfi	r1, r3, #0, #1
   17592:	f363 0141 	bfi	r1, r3, #1, #1
   17596:	f363 0182 	bfi	r1, r3, #2, #1
   1759a:	f363 01c5 	bfi	r1, r3, #3, #3
   1759e:	2201      	movs	r2, #1
   175a0:	f362 1188 	bfi	r1, r2, #6, #3
   175a4:	2208      	movs	r2, #8
   175a6:	f362 2152 	bfi	r1, r2, #9, #10
   175aa:	f363 41de 	bfi	r1, r3, #19, #12
   175ae:	f363 71df 	bfi	r1, r3, #31, #1
   175b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
   175b6:	489e      	ldr	r0, [pc, #632]	; (17830 <nvs_mount+0x3bc>)
   175b8:	f7ff f9c8 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   175bc:	f06f 0515 	mvn.w	r5, #21
   175c0:	e129      	b.n	17816 <nvs_mount+0x3a2>
		LOG_ERR("Unable to get page info");
   175c2:	4b9d      	ldr	r3, [pc, #628]	; (17838 <nvs_mount+0x3c4>)
   175c4:	657b      	str	r3, [r7, #84]	; 0x54
   175c6:	2302      	movs	r3, #2
   175c8:	703b      	strb	r3, [r7, #0]
   175ca:	2300      	movs	r3, #0
   175cc:	707b      	strb	r3, [r7, #1]
   175ce:	70bb      	strb	r3, [r7, #2]
   175d0:	70fb      	strb	r3, [r7, #3]
   175d2:	683a      	ldr	r2, [r7, #0]
   175d4:	653a      	str	r2, [r7, #80]	; 0x50
   175d6:	4619      	mov	r1, r3
   175d8:	f363 0100 	bfi	r1, r3, #0, #1
   175dc:	f363 0141 	bfi	r1, r3, #1, #1
   175e0:	f363 0182 	bfi	r1, r3, #2, #1
   175e4:	f363 01c5 	bfi	r1, r3, #3, #3
   175e8:	2201      	movs	r2, #1
   175ea:	f362 1188 	bfi	r1, r2, #6, #3
   175ee:	2208      	movs	r2, #8
   175f0:	f362 2152 	bfi	r1, r2, #9, #10
   175f4:	f363 41de 	bfi	r1, r3, #19, #12
   175f8:	f363 71df 	bfi	r1, r3, #31, #1
   175fc:	f107 0250 	add.w	r2, r7, #80	; 0x50
   17600:	488b      	ldr	r0, [pc, #556]	; (17830 <nvs_mount+0x3bc>)
   17602:	f7ff f9a3 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   17606:	f06f 0515 	mvn.w	r5, #21
   1760a:	e104      	b.n	17816 <nvs_mount+0x3a2>
		LOG_ERR("Invalid sector size");
   1760c:	4b8b      	ldr	r3, [pc, #556]	; (1783c <nvs_mount+0x3c8>)
   1760e:	63fb      	str	r3, [r7, #60]	; 0x3c
   17610:	2302      	movs	r3, #2
   17612:	703b      	strb	r3, [r7, #0]
   17614:	2300      	movs	r3, #0
   17616:	707b      	strb	r3, [r7, #1]
   17618:	70bb      	strb	r3, [r7, #2]
   1761a:	70fb      	strb	r3, [r7, #3]
   1761c:	683a      	ldr	r2, [r7, #0]
   1761e:	63ba      	str	r2, [r7, #56]	; 0x38
   17620:	4619      	mov	r1, r3
   17622:	f363 0100 	bfi	r1, r3, #0, #1
   17626:	f363 0141 	bfi	r1, r3, #1, #1
   1762a:	f363 0182 	bfi	r1, r3, #2, #1
   1762e:	f363 01c5 	bfi	r1, r3, #3, #3
   17632:	2201      	movs	r2, #1
   17634:	f362 1188 	bfi	r1, r2, #6, #3
   17638:	2208      	movs	r2, #8
   1763a:	f362 2152 	bfi	r1, r2, #9, #10
   1763e:	f363 41de 	bfi	r1, r3, #19, #12
   17642:	f363 71df 	bfi	r1, r3, #31, #1
   17646:	f107 0238 	add.w	r2, r7, #56	; 0x38
   1764a:	4879      	ldr	r0, [pc, #484]	; (17830 <nvs_mount+0x3bc>)
   1764c:	f7ff f97e 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   17650:	f06f 0515 	mvn.w	r5, #21
   17654:	e0df      	b.n	17816 <nvs_mount+0x3a2>
		LOG_ERR("Configuration error - sector count");
   17656:	4b7a      	ldr	r3, [pc, #488]	; (17840 <nvs_mount+0x3cc>)
   17658:	627b      	str	r3, [r7, #36]	; 0x24
   1765a:	2302      	movs	r3, #2
   1765c:	703b      	strb	r3, [r7, #0]
   1765e:	2300      	movs	r3, #0
   17660:	707b      	strb	r3, [r7, #1]
   17662:	70bb      	strb	r3, [r7, #2]
   17664:	70fb      	strb	r3, [r7, #3]
   17666:	683a      	ldr	r2, [r7, #0]
   17668:	623a      	str	r2, [r7, #32]
   1766a:	4619      	mov	r1, r3
   1766c:	f363 0100 	bfi	r1, r3, #0, #1
   17670:	f363 0141 	bfi	r1, r3, #1, #1
   17674:	f363 0182 	bfi	r1, r3, #2, #1
   17678:	f363 01c5 	bfi	r1, r3, #3, #3
   1767c:	2201      	movs	r2, #1
   1767e:	f362 1188 	bfi	r1, r2, #6, #3
   17682:	2208      	movs	r2, #8
   17684:	f362 2152 	bfi	r1, r2, #9, #10
   17688:	f363 41de 	bfi	r1, r3, #19, #12
   1768c:	f363 71df 	bfi	r1, r3, #31, #1
   17690:	f107 0220 	add.w	r2, r7, #32
   17694:	4866      	ldr	r0, [pc, #408]	; (17830 <nvs_mount+0x3bc>)
   17696:	f7ff f959 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1769a:	f06f 0515 	mvn.w	r5, #21
   1769e:	e0ba      	b.n	17816 <nvs_mount+0x3a2>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   176a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   176a4:	e72a      	b.n	174fc <nvs_mount+0x88>
   176a6:	f06f 0c1b 	mvn.w	ip, #27
   176aa:	b13a      	cbz	r2, 176bc <nvs_mount+0x248>
   176ac:	2104      	movs	r1, #4
   176ae:	7039      	strb	r1, [r7, #0]
   176b0:	2100      	movs	r1, #0
   176b2:	7079      	strb	r1, [r7, #1]
   176b4:	70b9      	strb	r1, [r7, #2]
   176b6:	70f9      	strb	r1, [r7, #3]
   176b8:	6838      	ldr	r0, [r7, #0]
   176ba:	6118      	str	r0, [r3, #16]
   176bc:	2100      	movs	r1, #0
   176be:	f36f 0100 	bfc	r1, #0, #1
   176c2:	f36f 0141 	bfc	r1, #1, #1
   176c6:	f36f 0182 	bfc	r1, #2, #1
   176ca:	f36f 01c5 	bfc	r1, #3, #3
   176ce:	2303      	movs	r3, #3
   176d0:	f363 1188 	bfi	r1, r3, #6, #3
   176d4:	f40c 737d 	and.w	r3, ip, #1012	; 0x3f4
   176d8:	f363 2152 	bfi	r1, r3, #9, #10
   176dc:	f36f 41de 	bfc	r1, #19, #12
   176e0:	f36f 71df 	bfc	r1, #31, #1
   176e4:	2300      	movs	r3, #0
   176e6:	4852      	ldr	r0, [pc, #328]	; (17830 <nvs_mount+0x3bc>)
   176e8:	f7ff f930 	bl	1694c <z_impl_z_log_msg_static_create>
   176ec:	46b5      	mov	sp, r6
	LOG_INF("alloc wra: %d, %x",
   176ee:	6863      	ldr	r3, [r4, #4]
   176f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   176f4:	b299      	uxth	r1, r3
   176f6:	466e      	mov	r6, sp
   176f8:	b088      	sub	sp, #32
   176fa:	466b      	mov	r3, sp
   176fc:	f113 0210 	adds.w	r2, r3, #16
   17700:	d019      	beq.n	17736 <nvs_mount+0x2c2>
   17702:	2010      	movs	r0, #16
   17704:	b17a      	cbz	r2, 17726 <nvs_mount+0x2b2>
   17706:	4684      	mov	ip, r0
   17708:	2804      	cmp	r0, #4
   1770a:	dd03      	ble.n	17714 <nvs_mount+0x2a0>
   1770c:	f8df 8134 	ldr.w	r8, [pc, #308]	; 17844 <nvs_mount+0x3d0>
   17710:	f8c3 8014 	str.w	r8, [r3, #20]
   17714:	f1bc 0f08 	cmp.w	ip, #8
   17718:	dd01      	ble.n	1771e <nvs_mount+0x2aa>
   1771a:	f8c3 e018 	str.w	lr, [r3, #24]
   1771e:	f1bc 0f0c 	cmp.w	ip, #12
   17722:	dd0b      	ble.n	1773c <nvs_mount+0x2c8>
   17724:	61d9      	str	r1, [r3, #28]
   17726:	280f      	cmp	r0, #15
   17728:	dd4b      	ble.n	177c2 <nvs_mount+0x34e>
   1772a:	f04f 0c10 	mov.w	ip, #16
   1772e:	e007      	b.n	17740 <nvs_mount+0x2cc>
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
   17730:	f06f 0c1b 	mvn.w	ip, #27
   17734:	e7b9      	b.n	176aa <nvs_mount+0x236>
	LOG_INF("alloc wra: %d, %x",
   17736:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1773a:	e7e3      	b.n	17704 <nvs_mount+0x290>
   1773c:	f06f 0c1b 	mvn.w	ip, #27
   17740:	b13a      	cbz	r2, 17752 <nvs_mount+0x2de>
   17742:	2104      	movs	r1, #4
   17744:	7039      	strb	r1, [r7, #0]
   17746:	2100      	movs	r1, #0
   17748:	7079      	strb	r1, [r7, #1]
   1774a:	70b9      	strb	r1, [r7, #2]
   1774c:	70f9      	strb	r1, [r7, #3]
   1774e:	6838      	ldr	r0, [r7, #0]
   17750:	6118      	str	r0, [r3, #16]
   17752:	2100      	movs	r1, #0
   17754:	f36f 0100 	bfc	r1, #0, #1
   17758:	f36f 0141 	bfc	r1, #1, #1
   1775c:	f36f 0182 	bfc	r1, #2, #1
   17760:	f36f 01c5 	bfc	r1, #3, #3
   17764:	2303      	movs	r3, #3
   17766:	f363 1188 	bfi	r1, r3, #6, #3
   1776a:	f40c 737d 	and.w	r3, ip, #1012	; 0x3f4
   1776e:	f363 2152 	bfi	r1, r3, #9, #10
   17772:	f36f 41de 	bfc	r1, #19, #12
   17776:	f36f 71df 	bfc	r1, #31, #1
   1777a:	2300      	movs	r3, #0
   1777c:	482c      	ldr	r0, [pc, #176]	; (17830 <nvs_mount+0x3bc>)
   1777e:	f7ff f8e5 	bl	1694c <z_impl_z_log_msg_static_create>
   17782:	46b5      	mov	sp, r6
		(fs->ate_wra >> ADDR_SECT_SHIFT),
		(fs->ate_wra & ADDR_OFFS_MASK));
	LOG_INF("data wra: %d, %x",
   17784:	68a1      	ldr	r1, [r4, #8]
   17786:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   1778a:	b289      	uxth	r1, r1
   1778c:	466c      	mov	r4, sp
   1778e:	b088      	sub	sp, #32
   17790:	466b      	mov	r3, sp
   17792:	f113 0210 	adds.w	r2, r3, #16
   17796:	d017      	beq.n	177c8 <nvs_mount+0x354>
   17798:	2010      	movs	r0, #16
   1779a:	b16a      	cbz	r2, 177b8 <nvs_mount+0x344>
   1779c:	4606      	mov	r6, r0
   1779e:	2804      	cmp	r0, #4
   177a0:	dd03      	ble.n	177aa <nvs_mount+0x336>
   177a2:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 17848 <nvs_mount+0x3d4>
   177a6:	f8c3 e014 	str.w	lr, [r3, #20]
   177aa:	2e08      	cmp	r6, #8
   177ac:	dd01      	ble.n	177b2 <nvs_mount+0x33e>
   177ae:	f8c3 c018 	str.w	ip, [r3, #24]
   177b2:	2e0c      	cmp	r6, #12
   177b4:	dd0b      	ble.n	177ce <nvs_mount+0x35a>
   177b6:	61d9      	str	r1, [r3, #28]
   177b8:	280f      	cmp	r0, #15
   177ba:	dd31      	ble.n	17820 <nvs_mount+0x3ac>
   177bc:	f04f 0c10 	mov.w	ip, #16
   177c0:	e007      	b.n	177d2 <nvs_mount+0x35e>
	LOG_INF("alloc wra: %d, %x",
   177c2:	f06f 0c1b 	mvn.w	ip, #27
   177c6:	e7bb      	b.n	17740 <nvs_mount+0x2cc>
	LOG_INF("data wra: %d, %x",
   177c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   177cc:	e7e5      	b.n	1779a <nvs_mount+0x326>
   177ce:	f06f 0c1b 	mvn.w	ip, #27
   177d2:	b13a      	cbz	r2, 177e4 <nvs_mount+0x370>
   177d4:	2104      	movs	r1, #4
   177d6:	7039      	strb	r1, [r7, #0]
   177d8:	2100      	movs	r1, #0
   177da:	7079      	strb	r1, [r7, #1]
   177dc:	70b9      	strb	r1, [r7, #2]
   177de:	70f9      	strb	r1, [r7, #3]
   177e0:	6838      	ldr	r0, [r7, #0]
   177e2:	6118      	str	r0, [r3, #16]
   177e4:	2100      	movs	r1, #0
   177e6:	f36f 0100 	bfc	r1, #0, #1
   177ea:	f36f 0141 	bfc	r1, #1, #1
   177ee:	f36f 0182 	bfc	r1, #2, #1
   177f2:	f36f 01c5 	bfc	r1, #3, #3
   177f6:	2303      	movs	r3, #3
   177f8:	f363 1188 	bfi	r1, r3, #6, #3
   177fc:	f40c 737d 	and.w	r3, ip, #1012	; 0x3f4
   17800:	f363 2152 	bfi	r1, r3, #9, #10
   17804:	f36f 41de 	bfc	r1, #19, #12
   17808:	f36f 71df 	bfc	r1, #31, #1
   1780c:	2300      	movs	r3, #0
   1780e:	4808      	ldr	r0, [pc, #32]	; (17830 <nvs_mount+0x3bc>)
   17810:	f7ff f89c 	bl	1694c <z_impl_z_log_msg_static_create>
   17814:	46a5      	mov	sp, r4
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
   17816:	4628      	mov	r0, r5
   17818:	3788      	adds	r7, #136	; 0x88
   1781a:	46bd      	mov	sp, r7
   1781c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("data wra: %d, %x",
   17820:	f06f 0c1b 	mvn.w	ip, #27
   17824:	e7d5      	b.n	177d2 <nvs_mount+0x35e>
   17826:	bf00      	nop
   17828:	000412e8 	.word	0x000412e8
   1782c:	00041254 	.word	0x00041254
   17830:	0003f440 	.word	0x0003f440
   17834:	00041278 	.word	0x00041278
   17838:	00041298 	.word	0x00041298
   1783c:	000412b0 	.word	0x000412b0
   17840:	000412c4 	.word	0x000412c4
   17844:	00041300 	.word	0x00041300
   17848:	00041314 	.word	0x00041314

0001784c <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
   1784c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17850:	b08d      	sub	sp, #52	; 0x34
   17852:	9201      	str	r2, [sp, #4]
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
   17854:	f890 b010 	ldrb.w	fp, [r0, #16]
   17858:	f1bb 0f00 	cmp.w	fp, #0
   1785c:	d026      	beq.n	178ac <nvs_write+0x60>
   1785e:	4604      	mov	r4, r0
   17860:	460e      	mov	r6, r1
   17862:	4699      	mov	r9, r3
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   17864:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   17866:	681b      	ldr	r3, [r3, #0]
   17868:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   1786a:	2901      	cmp	r1, #1
   1786c:	d946      	bls.n	178fc <nvs_write+0xb0>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1786e:	f101 0a07 	add.w	sl, r1, #7
   17872:	424a      	negs	r2, r1
   17874:	ea0a 0a02 	and.w	sl, sl, r2
	if (write_block_size <= 1U) {
   17878:	2901      	cmp	r1, #1
   1787a:	d942      	bls.n	17902 <nvs_write+0xb6>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1787c:	b2db      	uxtb	r3, r3
   1787e:	eb09 0803 	add.w	r8, r9, r3
   17882:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   17886:	425b      	negs	r3, r3
   17888:	ea08 0803 	and.w	r8, r8, r3

	/* The maximum data size is sector size - 4 ate
	 * where: 1 ate for data, 1 ate for sector close, 1 ate for gc done,
	 * and 1 ate to always allow a delete.
	 */
	if ((len > (fs->sector_size - 4 * ate_size)) ||
   1788c:	89a3      	ldrh	r3, [r4, #12]
   1788e:	eba3 038a 	sub.w	r3, r3, sl, lsl #2
   17892:	454b      	cmp	r3, r9
   17894:	f0c0 80aa 	bcc.w	179ec <nvs_write+0x1a0>
   17898:	f1b9 0f00 	cmp.w	r9, #0
   1789c:	d003      	beq.n	178a6 <nvs_write+0x5a>
	    ((len > 0) && (data == NULL))) {
   1789e:	9b01      	ldr	r3, [sp, #4]
   178a0:	2b00      	cmp	r3, #0
   178a2:	f000 80a6 	beq.w	179f2 <nvs_write+0x1a6>
		return -EINVAL;
	}

	/* find latest entry with same id */
	wlk_addr = fs->ate_wra;
   178a6:	6863      	ldr	r3, [r4, #4]
   178a8:	9303      	str	r3, [sp, #12]
	rd_addr = wlk_addr;
   178aa:	e030      	b.n	1790e <nvs_write+0xc2>
		LOG_ERR("NVS not initialized");
   178ac:	4b52      	ldr	r3, [pc, #328]	; (179f8 <nvs_write+0x1ac>)
   178ae:	930b      	str	r3, [sp, #44]	; 0x2c
   178b0:	2302      	movs	r3, #2
   178b2:	f88d 3008 	strb.w	r3, [sp, #8]
   178b6:	2300      	movs	r3, #0
   178b8:	f88d 3009 	strb.w	r3, [sp, #9]
   178bc:	f88d 300a 	strb.w	r3, [sp, #10]
   178c0:	f88d 300b 	strb.w	r3, [sp, #11]
   178c4:	9a02      	ldr	r2, [sp, #8]
   178c6:	920a      	str	r2, [sp, #40]	; 0x28
   178c8:	4619      	mov	r1, r3
   178ca:	f363 0100 	bfi	r1, r3, #0, #1
   178ce:	f363 0141 	bfi	r1, r3, #1, #1
   178d2:	f363 0182 	bfi	r1, r3, #2, #1
   178d6:	f363 01c5 	bfi	r1, r3, #3, #3
   178da:	2201      	movs	r2, #1
   178dc:	f362 1188 	bfi	r1, r2, #6, #3
   178e0:	2208      	movs	r2, #8
   178e2:	f362 2152 	bfi	r1, r2, #9, #10
   178e6:	f363 41de 	bfi	r1, r3, #19, #12
   178ea:	f363 71df 	bfi	r1, r3, #31, #1
   178ee:	aa0a      	add	r2, sp, #40	; 0x28
   178f0:	4842      	ldr	r0, [pc, #264]	; (179fc <nvs_write+0x1b0>)
   178f2:	f7ff f82b 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EACCES;
   178f6:	f06f 050c 	mvn.w	r5, #12
   178fa:	e06f      	b.n	179dc <nvs_write+0x190>
		return len;
   178fc:	f04f 0a08 	mov.w	sl, #8
   17900:	e7ba      	b.n	17878 <nvs_write+0x2c>
   17902:	46c8      	mov	r8, r9
   17904:	e7c2      	b.n	1788c <nvs_write+0x40>
		}
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
			prev_found = true;
			break;
		}
		if (wlk_addr == fs->ate_wra) {
   17906:	6862      	ldr	r2, [r4, #4]
   17908:	9b03      	ldr	r3, [sp, #12]
   1790a:	429a      	cmp	r2, r3
   1790c:	d013      	beq.n	17936 <nvs_write+0xea>
		rd_addr = wlk_addr;
   1790e:	9f03      	ldr	r7, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   17910:	aa04      	add	r2, sp, #16
   17912:	a903      	add	r1, sp, #12
   17914:	4620      	mov	r0, r4
   17916:	f01f f84c 	bl	369b2 <nvs_prev_ate>
		if (rc) {
   1791a:	4605      	mov	r5, r0
   1791c:	2800      	cmp	r0, #0
   1791e:	d15d      	bne.n	179dc <nvs_write+0x190>
		if ((wlk_ate.id == id) && (nvs_ate_valid(fs, &wlk_ate))) {
   17920:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   17924:	42b3      	cmp	r3, r6
   17926:	d1ee      	bne.n	17906 <nvs_write+0xba>
   17928:	a904      	add	r1, sp, #16
   1792a:	4620      	mov	r0, r4
   1792c:	f01e ffc5 	bl	368ba <nvs_ate_valid>
   17930:	2800      	cmp	r0, #0
   17932:	d0e8      	beq.n	17906 <nvs_write+0xba>
   17934:	e001      	b.n	1793a <nvs_write+0xee>
	bool prev_found = false;
   17936:	f04f 0b00 	mov.w	fp, #0
			break;
		}
	}

	if (prev_found) {
   1793a:	f1bb 0f00 	cmp.w	fp, #0
   1793e:	d018      	beq.n	17972 <nvs_write+0x126>
		/* previous entry found */
		rd_addr &= ADDR_SECT_MASK;
   17940:	0c3f      	lsrs	r7, r7, #16
   17942:	043f      	lsls	r7, r7, #16
		rd_addr += wlk_ate.offset;
   17944:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   17948:	4439      	add	r1, r7

		if (len == 0) {
   1794a:	f1b9 0f00 	cmp.w	r9, #0
   1794e:	d103      	bne.n	17958 <nvs_write+0x10c>
			/* do not try to compare with empty data */
			if (wlk_ate.len == 0U) {
   17950:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   17954:	b983      	cbnz	r3, 17978 <nvs_write+0x12c>
   17956:	e041      	b.n	179dc <nvs_write+0x190>
				/* skip delete entry as it is already the
				 * last one
				 */
				return 0;
			}
		} else if (len == wlk_ate.len) {
   17958:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1795c:	454b      	cmp	r3, r9
   1795e:	d10b      	bne.n	17978 <nvs_write+0x12c>
			/* do not try to compare if lengths are not equal */
			/* compare the data and if equal return 0 */
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
   17960:	464b      	mov	r3, r9
   17962:	9a01      	ldr	r2, [sp, #4]
   17964:	4620      	mov	r0, r4
   17966:	f01e ff2a 	bl	367be <nvs_flash_block_cmp>
			if (rc <= 0) {
   1796a:	2800      	cmp	r0, #0
   1796c:	dc04      	bgt.n	17978 <nvs_write+0x12c>
				return rc;
   1796e:	4605      	mov	r5, r0
   17970:	e034      	b.n	179dc <nvs_write+0x190>
			}
		}
	} else {
		/* skip delete entry for non-existing entry */
		if (len == 0) {
   17972:	f1b9 0f00 	cmp.w	r9, #0
   17976:	d031      	beq.n	179dc <nvs_write+0x190>
			return 0;
		}
	}

	/* calculate required space if the entry contains data */
	if (data_size) {
   17978:	f1b8 0f00 	cmp.w	r8, #0
   1797c:	d01d      	beq.n	179ba <nvs_write+0x16e>
		/* Leave space for delete ate */
		required_space = data_size + ate_size;
   1797e:	fa1a f788 	uxtah	r7, sl, r8
   17982:	b2bf      	uxth	r7, r7
	}

	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
   17984:	f104 0814 	add.w	r8, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   17988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1798c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17990:	4640      	mov	r0, r8
   17992:	f019 ff63 	bl	3185c <z_impl_k_mutex_lock>

	gc_count = 0;
	while (1) {
		if (gc_count == fs->sector_count) {
   17996:	89e3      	ldrh	r3, [r4, #14]
   17998:	429d      	cmp	r5, r3
   1799a:	d01a      	beq.n	179d2 <nvs_write+0x186>
			 */
			rc = -ENOSPC;
			goto end;
		}

		if (fs->ate_wra >= (fs->data_wra + required_space)) {
   1799c:	6862      	ldr	r2, [r4, #4]
   1799e:	68a3      	ldr	r3, [r4, #8]
   179a0:	443b      	add	r3, r7
   179a2:	429a      	cmp	r2, r3
   179a4:	d20b      	bcs.n	179be <nvs_write+0x172>
			}
			break;
		}


		rc = nvs_sector_close(fs);
   179a6:	4620      	mov	r0, r4
   179a8:	f01f f9c8 	bl	36d3c <nvs_sector_close>
		if (rc) {
   179ac:	b9d0      	cbnz	r0, 179e4 <nvs_write+0x198>
			goto end;
		}

		rc = nvs_gc(fs);
   179ae:	4620      	mov	r0, r4
   179b0:	f01f f905 	bl	36bbe <nvs_gc>
		if (rc) {
   179b4:	b9c0      	cbnz	r0, 179e8 <nvs_write+0x19c>
			goto end;
		}
		gc_count++;
   179b6:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
   179b8:	e7ed      	b.n	17996 <nvs_write+0x14a>
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
   179ba:	2700      	movs	r7, #0
   179bc:	e7e2      	b.n	17984 <nvs_write+0x138>
			rc = nvs_flash_wrt_entry(fs, id, data, len);
   179be:	464b      	mov	r3, r9
   179c0:	9a01      	ldr	r2, [sp, #4]
   179c2:	4631      	mov	r1, r6
   179c4:	4620      	mov	r0, r4
   179c6:	f01f f99a 	bl	36cfe <nvs_flash_wrt_entry>
			if (rc) {
   179ca:	4605      	mov	r5, r0
   179cc:	b918      	cbnz	r0, 179d6 <nvs_write+0x18a>
	}
	rc = len;
   179ce:	464d      	mov	r5, r9
   179d0:	e001      	b.n	179d6 <nvs_write+0x18a>
			rc = -ENOSPC;
   179d2:	f06f 051b 	mvn.w	r5, #27
	return z_impl_k_mutex_unlock(mutex);
   179d6:	4640      	mov	r0, r8
   179d8:	f01a f856 	bl	31a88 <z_impl_k_mutex_unlock>
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
   179dc:	4628      	mov	r0, r5
   179de:	b00d      	add	sp, #52	; 0x34
   179e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_sector_close(fs);
   179e4:	4605      	mov	r5, r0
   179e6:	e7f6      	b.n	179d6 <nvs_write+0x18a>
		rc = nvs_gc(fs);
   179e8:	4605      	mov	r5, r0
   179ea:	e7f4      	b.n	179d6 <nvs_write+0x18a>
		return -EINVAL;
   179ec:	f06f 0515 	mvn.w	r5, #21
   179f0:	e7f4      	b.n	179dc <nvs_write+0x190>
   179f2:	f06f 0515 	mvn.w	r5, #21
   179f6:	e7f1      	b.n	179dc <nvs_write+0x190>
   179f8:	00041240 	.word	0x00041240
   179fc:	0003f440 	.word	0x0003f440

00017a00 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
   17a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17a04:	b08a      	sub	sp, #40	; 0x28
   17a06:	4699      	mov	r9, r3
   17a08:	f8bd 8048 	ldrh.w	r8, [sp, #72]	; 0x48
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
   17a0c:	7c03      	ldrb	r3, [r0, #16]
   17a0e:	b1a3      	cbz	r3, 17a3a <nvs_read_hist+0x3a>
   17a10:	4604      	mov	r4, r0
   17a12:	460f      	mov	r7, r1
   17a14:	4692      	mov	sl, r2
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   17a16:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   17a18:	681b      	ldr	r3, [r3, #0]
   17a1a:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   17a1c:	2a01      	cmp	r2, #1
   17a1e:	d934      	bls.n	17a8a <nvs_read_hist+0x8a>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   17a20:	4613      	mov	r3, r2
   17a22:	3207      	adds	r2, #7
   17a24:	425b      	negs	r3, r3
   17a26:	401a      	ands	r2, r3
		return -EACCES;
	}

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));

	if (len > (fs->sector_size - 2 * ate_size)) {
   17a28:	89a3      	ldrh	r3, [r4, #12]
   17a2a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   17a2e:	454b      	cmp	r3, r9
   17a30:	d36c      	bcc.n	17b0c <nvs_read_hist+0x10c>
	if (wlk_addr == NVS_LOOKUP_CACHE_NO_ADDR) {
		rc = -ENOENT;
		goto err;
	}
#else
	wlk_addr = fs->ate_wra;
   17a32:	6866      	ldr	r6, [r4, #4]
   17a34:	9603      	str	r6, [sp, #12]
	cnt_his = 0U;
   17a36:	2500      	movs	r5, #0
#endif
	rd_addr = wlk_addr;

	while (cnt_his <= cnt) {
   17a38:	e02d      	b.n	17a96 <nvs_read_hist+0x96>
		LOG_ERR("NVS not initialized");
   17a3a:	4b39      	ldr	r3, [pc, #228]	; (17b20 <nvs_read_hist+0x120>)
   17a3c:	9309      	str	r3, [sp, #36]	; 0x24
   17a3e:	2302      	movs	r3, #2
   17a40:	f88d 3000 	strb.w	r3, [sp]
   17a44:	2300      	movs	r3, #0
   17a46:	f88d 3001 	strb.w	r3, [sp, #1]
   17a4a:	f88d 3002 	strb.w	r3, [sp, #2]
   17a4e:	f88d 3003 	strb.w	r3, [sp, #3]
   17a52:	9a00      	ldr	r2, [sp, #0]
   17a54:	9208      	str	r2, [sp, #32]
   17a56:	4619      	mov	r1, r3
   17a58:	f363 0100 	bfi	r1, r3, #0, #1
   17a5c:	f363 0141 	bfi	r1, r3, #1, #1
   17a60:	f363 0182 	bfi	r1, r3, #2, #1
   17a64:	f363 01c5 	bfi	r1, r3, #3, #3
   17a68:	2201      	movs	r2, #1
   17a6a:	f362 1188 	bfi	r1, r2, #6, #3
   17a6e:	2208      	movs	r2, #8
   17a70:	f362 2152 	bfi	r1, r2, #9, #10
   17a74:	f363 41de 	bfi	r1, r3, #19, #12
   17a78:	f363 71df 	bfi	r1, r3, #31, #1
   17a7c:	aa08      	add	r2, sp, #32
   17a7e:	4829      	ldr	r0, [pc, #164]	; (17b24 <nvs_read_hist+0x124>)
   17a80:	f7fe ff64 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EACCES;
   17a84:	f06f 030c 	mvn.w	r3, #12
   17a88:	e035      	b.n	17af6 <nvs_read_hist+0xf6>
		return len;
   17a8a:	2208      	movs	r2, #8
   17a8c:	e7cc      	b.n	17a28 <nvs_read_hist+0x28>
			goto err;
		}
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
			cnt_his++;
		}
		if (wlk_addr == fs->ate_wra) {
   17a8e:	6862      	ldr	r2, [r4, #4]
   17a90:	9b03      	ldr	r3, [sp, #12]
   17a92:	429a      	cmp	r2, r3
   17a94:	d016      	beq.n	17ac4 <nvs_read_hist+0xc4>
	while (cnt_his <= cnt) {
   17a96:	4545      	cmp	r5, r8
   17a98:	d814      	bhi.n	17ac4 <nvs_read_hist+0xc4>
		rd_addr = wlk_addr;
   17a9a:	9e03      	ldr	r6, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   17a9c:	aa01      	add	r2, sp, #4
   17a9e:	a903      	add	r1, sp, #12
   17aa0:	4620      	mov	r0, r4
   17aa2:	f01e ff86 	bl	369b2 <nvs_prev_ate>
		if (rc) {
   17aa6:	4603      	mov	r3, r0
   17aa8:	bb28      	cbnz	r0, 17af6 <nvs_read_hist+0xf6>
		if ((wlk_ate.id == id) &&  (nvs_ate_valid(fs, &wlk_ate))) {
   17aaa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17aae:	42bb      	cmp	r3, r7
   17ab0:	d1ed      	bne.n	17a8e <nvs_read_hist+0x8e>
   17ab2:	a901      	add	r1, sp, #4
   17ab4:	4620      	mov	r0, r4
   17ab6:	f01e ff00 	bl	368ba <nvs_ate_valid>
   17aba:	2800      	cmp	r0, #0
   17abc:	d0e7      	beq.n	17a8e <nvs_read_hist+0x8e>
			cnt_his++;
   17abe:	3501      	adds	r5, #1
   17ac0:	b2ad      	uxth	r5, r5
   17ac2:	e7e4      	b.n	17a8e <nvs_read_hist+0x8e>
			break;
		}
	}

	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   17ac4:	6862      	ldr	r2, [r4, #4]
   17ac6:	9b03      	ldr	r3, [sp, #12]
   17ac8:	429a      	cmp	r2, r3
   17aca:	d018      	beq.n	17afe <nvs_read_hist+0xfe>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   17acc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   17ad0:	b1fb      	cbz	r3, 17b12 <nvs_read_hist+0x112>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
   17ad2:	4545      	cmp	r5, r8
   17ad4:	d320      	bcc.n	17b18 <nvs_read_hist+0x118>
		return -ENOENT;
	}

	rd_addr &= ADDR_SECT_MASK;
   17ad6:	0c36      	lsrs	r6, r6, #16
   17ad8:	0436      	lsls	r6, r6, #16
	rd_addr += wlk_ate.offset;
   17ada:	f8bd 1006 	ldrh.w	r1, [sp, #6]
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
   17ade:	454b      	cmp	r3, r9
   17ae0:	bf28      	it	cs
   17ae2:	464b      	movcs	r3, r9
   17ae4:	4652      	mov	r2, sl
   17ae6:	4431      	add	r1, r6
   17ae8:	4620      	mov	r0, r4
   17aea:	f01e fe3b 	bl	36764 <nvs_flash_rd>
	if (rc) {
   17aee:	4603      	mov	r3, r0
   17af0:	b908      	cbnz	r0, 17af6 <nvs_read_hist+0xf6>
		goto err;
	}

	return wlk_ate.len;
   17af2:	f8bd 3008 	ldrh.w	r3, [sp, #8]

err:
	return rc;
}
   17af6:	4618      	mov	r0, r3
   17af8:	b00a      	add	sp, #40	; 0x28
   17afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
   17afe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   17b02:	42bb      	cmp	r3, r7
   17b04:	d0e2      	beq.n	17acc <nvs_read_hist+0xcc>
		return -ENOENT;
   17b06:	f06f 0301 	mvn.w	r3, #1
   17b0a:	e7f4      	b.n	17af6 <nvs_read_hist+0xf6>
		return -EINVAL;
   17b0c:	f06f 0315 	mvn.w	r3, #21
   17b10:	e7f1      	b.n	17af6 <nvs_read_hist+0xf6>
		return -ENOENT;
   17b12:	f06f 0301 	mvn.w	r3, #1
   17b16:	e7ee      	b.n	17af6 <nvs_read_hist+0xf6>
   17b18:	f06f 0301 	mvn.w	r3, #1
   17b1c:	e7eb      	b.n	17af6 <nvs_read_hist+0xf6>
   17b1e:	bf00      	nop
   17b20:	00041240 	.word	0x00041240
   17b24:	0003f440 	.word	0x0003f440

00017b28 <ipc_service_open_instance>:
#include <zephyr/device.h>

LOG_MODULE_REGISTER(ipc_service, CONFIG_IPC_SERVICE_LOG_LEVEL);

int ipc_service_open_instance(const struct device *instance)
{
   17b28:	b500      	push	{lr}
   17b2a:	b08f      	sub	sp, #60	; 0x3c
	const struct ipc_service_backend *backend;

	if (!instance) {
   17b2c:	b140      	cbz	r0, 17b40 <ipc_service_open_instance+0x18>
		LOG_ERR("Invalid instance");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
   17b2e:	6883      	ldr	r3, [r0, #8]

	if (!backend) {
   17b30:	b373      	cbz	r3, 17b90 <ipc_service_open_instance+0x68>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	if (!backend->open_instance) {
   17b32:	681b      	ldr	r3, [r3, #0]
   17b34:	2b00      	cmp	r3, #0
   17b36:	d053      	beq.n	17be0 <ipc_service_open_instance+0xb8>
		/* maybe not needed on backend */
		return 0;
	}

	return backend->open_instance(instance);
   17b38:	4798      	blx	r3
}
   17b3a:	b00f      	add	sp, #60	; 0x3c
   17b3c:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_ERR("Invalid instance");
   17b40:	4b28      	ldr	r3, [pc, #160]	; (17be4 <ipc_service_open_instance+0xbc>)
   17b42:	930d      	str	r3, [sp, #52]	; 0x34
   17b44:	2302      	movs	r3, #2
   17b46:	f88d 3004 	strb.w	r3, [sp, #4]
   17b4a:	2300      	movs	r3, #0
   17b4c:	f88d 3005 	strb.w	r3, [sp, #5]
   17b50:	f88d 3006 	strb.w	r3, [sp, #6]
   17b54:	f88d 3007 	strb.w	r3, [sp, #7]
   17b58:	9a01      	ldr	r2, [sp, #4]
   17b5a:	920c      	str	r2, [sp, #48]	; 0x30
   17b5c:	4619      	mov	r1, r3
   17b5e:	f363 0100 	bfi	r1, r3, #0, #1
   17b62:	f363 0141 	bfi	r1, r3, #1, #1
   17b66:	f363 0182 	bfi	r1, r3, #2, #1
   17b6a:	f363 01c5 	bfi	r1, r3, #3, #3
   17b6e:	2201      	movs	r2, #1
   17b70:	f362 1188 	bfi	r1, r2, #6, #3
   17b74:	2208      	movs	r2, #8
   17b76:	f362 2152 	bfi	r1, r2, #9, #10
   17b7a:	f363 41de 	bfi	r1, r3, #19, #12
   17b7e:	f363 71df 	bfi	r1, r3, #31, #1
   17b82:	aa0c      	add	r2, sp, #48	; 0x30
   17b84:	4818      	ldr	r0, [pc, #96]	; (17be8 <ipc_service_open_instance+0xc0>)
   17b86:	f7fe fee1 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   17b8a:	f06f 0015 	mvn.w	r0, #21
   17b8e:	e7d4      	b.n	17b3a <ipc_service_open_instance+0x12>
		LOG_ERR("Invalid backend configuration");
   17b90:	4b16      	ldr	r3, [pc, #88]	; (17bec <ipc_service_open_instance+0xc4>)
   17b92:	9307      	str	r3, [sp, #28]
   17b94:	2302      	movs	r3, #2
   17b96:	f88d 3004 	strb.w	r3, [sp, #4]
   17b9a:	2300      	movs	r3, #0
   17b9c:	f88d 3005 	strb.w	r3, [sp, #5]
   17ba0:	f88d 3006 	strb.w	r3, [sp, #6]
   17ba4:	f88d 3007 	strb.w	r3, [sp, #7]
   17ba8:	9a01      	ldr	r2, [sp, #4]
   17baa:	9206      	str	r2, [sp, #24]
   17bac:	4619      	mov	r1, r3
   17bae:	f363 0100 	bfi	r1, r3, #0, #1
   17bb2:	f363 0141 	bfi	r1, r3, #1, #1
   17bb6:	f363 0182 	bfi	r1, r3, #2, #1
   17bba:	f363 01c5 	bfi	r1, r3, #3, #3
   17bbe:	2201      	movs	r2, #1
   17bc0:	f362 1188 	bfi	r1, r2, #6, #3
   17bc4:	2208      	movs	r2, #8
   17bc6:	f362 2152 	bfi	r1, r2, #9, #10
   17bca:	f363 41de 	bfi	r1, r3, #19, #12
   17bce:	f363 71df 	bfi	r1, r3, #31, #1
   17bd2:	aa06      	add	r2, sp, #24
   17bd4:	4804      	ldr	r0, [pc, #16]	; (17be8 <ipc_service_open_instance+0xc0>)
   17bd6:	f7fe feb9 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   17bda:	f06f 0004 	mvn.w	r0, #4
   17bde:	e7ac      	b.n	17b3a <ipc_service_open_instance+0x12>
		return 0;
   17be0:	2000      	movs	r0, #0
   17be2:	e7aa      	b.n	17b3a <ipc_service_open_instance+0x12>
   17be4:	00041330 	.word	0x00041330
   17be8:	0003f448 	.word	0x0003f448
   17bec:	00041344 	.word	0x00041344

00017bf0 <ipc_service_register_endpoint>:
}

int ipc_service_register_endpoint(const struct device *instance,
				  struct ipc_ept *ept,
				  const struct ipc_ept_cfg *cfg)
{
   17bf0:	b510      	push	{r4, lr}
   17bf2:	b08e      	sub	sp, #56	; 0x38
	const struct ipc_service_backend *backend;

	if (!instance || !ept || !cfg) {
   17bf4:	b168      	cbz	r0, 17c12 <ipc_service_register_endpoint+0x22>
   17bf6:	4603      	mov	r3, r0
   17bf8:	b159      	cbz	r1, 17c12 <ipc_service_register_endpoint+0x22>
   17bfa:	b152      	cbz	r2, 17c12 <ipc_service_register_endpoint+0x22>
		LOG_ERR("Invalid instance, endpoint or configuration");
		return -EINVAL;
	}

	backend = (const struct ipc_service_backend *) instance->api;
   17bfc:	6880      	ldr	r0, [r0, #8]

	if (!backend || !backend->register_endpoint) {
   17bfe:	b380      	cbz	r0, 17c62 <ipc_service_register_endpoint+0x72>
   17c00:	68c4      	ldr	r4, [r0, #12]
   17c02:	b374      	cbz	r4, 17c62 <ipc_service_register_endpoint+0x72>
		return -EIO;
	}

	LOG_DBG("Register endpoint %s", cfg->name ? cfg->name : "");

	ept->instance = instance;
   17c04:	f841 3b04 	str.w	r3, [r1], #4

	return backend->register_endpoint(instance, &ept->token, cfg);
   17c08:	68c4      	ldr	r4, [r0, #12]
   17c0a:	4618      	mov	r0, r3
   17c0c:	47a0      	blx	r4
}
   17c0e:	b00e      	add	sp, #56	; 0x38
   17c10:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid instance, endpoint or configuration");
   17c12:	4b28      	ldr	r3, [pc, #160]	; (17cb4 <ipc_service_register_endpoint+0xc4>)
   17c14:	930d      	str	r3, [sp, #52]	; 0x34
   17c16:	2302      	movs	r3, #2
   17c18:	f88d 3004 	strb.w	r3, [sp, #4]
   17c1c:	2300      	movs	r3, #0
   17c1e:	f88d 3005 	strb.w	r3, [sp, #5]
   17c22:	f88d 3006 	strb.w	r3, [sp, #6]
   17c26:	f88d 3007 	strb.w	r3, [sp, #7]
   17c2a:	9a01      	ldr	r2, [sp, #4]
   17c2c:	920c      	str	r2, [sp, #48]	; 0x30
   17c2e:	4619      	mov	r1, r3
   17c30:	f363 0100 	bfi	r1, r3, #0, #1
   17c34:	f363 0141 	bfi	r1, r3, #1, #1
   17c38:	f363 0182 	bfi	r1, r3, #2, #1
   17c3c:	f363 01c5 	bfi	r1, r3, #3, #3
   17c40:	2201      	movs	r2, #1
   17c42:	f362 1188 	bfi	r1, r2, #6, #3
   17c46:	2208      	movs	r2, #8
   17c48:	f362 2152 	bfi	r1, r2, #9, #10
   17c4c:	f363 41de 	bfi	r1, r3, #19, #12
   17c50:	f363 71df 	bfi	r1, r3, #31, #1
   17c54:	aa0c      	add	r2, sp, #48	; 0x30
   17c56:	4818      	ldr	r0, [pc, #96]	; (17cb8 <ipc_service_register_endpoint+0xc8>)
   17c58:	f7fe fe78 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   17c5c:	f06f 0015 	mvn.w	r0, #21
   17c60:	e7d5      	b.n	17c0e <ipc_service_register_endpoint+0x1e>
		LOG_ERR("Invalid backend configuration");
   17c62:	4b16      	ldr	r3, [pc, #88]	; (17cbc <ipc_service_register_endpoint+0xcc>)
   17c64:	9307      	str	r3, [sp, #28]
   17c66:	2302      	movs	r3, #2
   17c68:	f88d 3004 	strb.w	r3, [sp, #4]
   17c6c:	2300      	movs	r3, #0
   17c6e:	f88d 3005 	strb.w	r3, [sp, #5]
   17c72:	f88d 3006 	strb.w	r3, [sp, #6]
   17c76:	f88d 3007 	strb.w	r3, [sp, #7]
   17c7a:	9a01      	ldr	r2, [sp, #4]
   17c7c:	9206      	str	r2, [sp, #24]
   17c7e:	4619      	mov	r1, r3
   17c80:	f363 0100 	bfi	r1, r3, #0, #1
   17c84:	f363 0141 	bfi	r1, r3, #1, #1
   17c88:	f363 0182 	bfi	r1, r3, #2, #1
   17c8c:	f363 01c5 	bfi	r1, r3, #3, #3
   17c90:	2201      	movs	r2, #1
   17c92:	f362 1188 	bfi	r1, r2, #6, #3
   17c96:	2208      	movs	r2, #8
   17c98:	f362 2152 	bfi	r1, r2, #9, #10
   17c9c:	f363 41de 	bfi	r1, r3, #19, #12
   17ca0:	f363 71df 	bfi	r1, r3, #31, #1
   17ca4:	aa06      	add	r2, sp, #24
   17ca6:	4804      	ldr	r0, [pc, #16]	; (17cb8 <ipc_service_register_endpoint+0xc8>)
   17ca8:	f7fe fe50 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   17cac:	f06f 0004 	mvn.w	r0, #4
   17cb0:	e7ad      	b.n	17c0e <ipc_service_register_endpoint+0x1e>
   17cb2:	bf00      	nop
   17cb4:	00041364 	.word	0x00041364
   17cb8:	0003f448 	.word	0x0003f448
   17cbc:	00041344 	.word	0x00041344

00017cc0 <ipc_service_send>:
	return 0;
}


int ipc_service_send(struct ipc_ept *ept, const void *data, size_t len)
{
   17cc0:	b510      	push	{r4, lr}
   17cc2:	b094      	sub	sp, #80	; 0x50
	const struct ipc_service_backend *backend;

	if (!ept) {
   17cc4:	b180      	cbz	r0, 17ce8 <ipc_service_send+0x28>
   17cc6:	4613      	mov	r3, r2
   17cc8:	4684      	mov	ip, r0
		LOG_ERR("Invalid endpoint");
		return -EINVAL;
	}

	if (!ept->instance) {
   17cca:	6800      	ldr	r0, [r0, #0]
   17ccc:	2800      	cmp	r0, #0
   17cce:	d033      	beq.n	17d38 <ipc_service_send+0x78>
		LOG_ERR("Endpoint not registered\n");
		return -ENOENT;
	}

	backend = ept->instance->api;
   17cd0:	6882      	ldr	r2, [r0, #8]

	if (!backend || !backend->send) {
   17cd2:	2a00      	cmp	r2, #0
   17cd4:	d058      	beq.n	17d88 <ipc_service_send+0xc8>
   17cd6:	6894      	ldr	r4, [r2, #8]
   17cd8:	2c00      	cmp	r4, #0
   17cda:	d055      	beq.n	17d88 <ipc_service_send+0xc8>
		LOG_ERR("Invalid backend configuration");
		return -EIO;
	}

	return backend->send(ept->instance, ept->token, data, len);
   17cdc:	460a      	mov	r2, r1
   17cde:	f8dc 1004 	ldr.w	r1, [ip, #4]
   17ce2:	47a0      	blx	r4
}
   17ce4:	b014      	add	sp, #80	; 0x50
   17ce6:	bd10      	pop	{r4, pc}
		LOG_ERR("Invalid endpoint");
   17ce8:	4b3b      	ldr	r3, [pc, #236]	; (17dd8 <ipc_service_send+0x118>)
   17cea:	9313      	str	r3, [sp, #76]	; 0x4c
   17cec:	2302      	movs	r3, #2
   17cee:	f88d 3004 	strb.w	r3, [sp, #4]
   17cf2:	2300      	movs	r3, #0
   17cf4:	f88d 3005 	strb.w	r3, [sp, #5]
   17cf8:	f88d 3006 	strb.w	r3, [sp, #6]
   17cfc:	f88d 3007 	strb.w	r3, [sp, #7]
   17d00:	9a01      	ldr	r2, [sp, #4]
   17d02:	9212      	str	r2, [sp, #72]	; 0x48
   17d04:	4619      	mov	r1, r3
   17d06:	f363 0100 	bfi	r1, r3, #0, #1
   17d0a:	f363 0141 	bfi	r1, r3, #1, #1
   17d0e:	f363 0182 	bfi	r1, r3, #2, #1
   17d12:	f363 01c5 	bfi	r1, r3, #3, #3
   17d16:	2201      	movs	r2, #1
   17d18:	f362 1188 	bfi	r1, r2, #6, #3
   17d1c:	2208      	movs	r2, #8
   17d1e:	f362 2152 	bfi	r1, r2, #9, #10
   17d22:	f363 41de 	bfi	r1, r3, #19, #12
   17d26:	f363 71df 	bfi	r1, r3, #31, #1
   17d2a:	aa12      	add	r2, sp, #72	; 0x48
   17d2c:	482b      	ldr	r0, [pc, #172]	; (17ddc <ipc_service_send+0x11c>)
   17d2e:	f7fe fe0d 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   17d32:	f06f 0015 	mvn.w	r0, #21
   17d36:	e7d5      	b.n	17ce4 <ipc_service_send+0x24>
		LOG_ERR("Endpoint not registered\n");
   17d38:	4b29      	ldr	r3, [pc, #164]	; (17de0 <ipc_service_send+0x120>)
   17d3a:	930d      	str	r3, [sp, #52]	; 0x34
   17d3c:	2302      	movs	r3, #2
   17d3e:	f88d 3004 	strb.w	r3, [sp, #4]
   17d42:	2300      	movs	r3, #0
   17d44:	f88d 3005 	strb.w	r3, [sp, #5]
   17d48:	f88d 3006 	strb.w	r3, [sp, #6]
   17d4c:	f88d 3007 	strb.w	r3, [sp, #7]
   17d50:	9a01      	ldr	r2, [sp, #4]
   17d52:	920c      	str	r2, [sp, #48]	; 0x30
   17d54:	4619      	mov	r1, r3
   17d56:	f363 0100 	bfi	r1, r3, #0, #1
   17d5a:	f363 0141 	bfi	r1, r3, #1, #1
   17d5e:	f363 0182 	bfi	r1, r3, #2, #1
   17d62:	f363 01c5 	bfi	r1, r3, #3, #3
   17d66:	2201      	movs	r2, #1
   17d68:	f362 1188 	bfi	r1, r2, #6, #3
   17d6c:	2208      	movs	r2, #8
   17d6e:	f362 2152 	bfi	r1, r2, #9, #10
   17d72:	f363 41de 	bfi	r1, r3, #19, #12
   17d76:	f363 71df 	bfi	r1, r3, #31, #1
   17d7a:	aa0c      	add	r2, sp, #48	; 0x30
   17d7c:	4817      	ldr	r0, [pc, #92]	; (17ddc <ipc_service_send+0x11c>)
   17d7e:	f7fe fde5 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENOENT;
   17d82:	f06f 0001 	mvn.w	r0, #1
   17d86:	e7ad      	b.n	17ce4 <ipc_service_send+0x24>
		LOG_ERR("Invalid backend configuration");
   17d88:	4b16      	ldr	r3, [pc, #88]	; (17de4 <ipc_service_send+0x124>)
   17d8a:	9307      	str	r3, [sp, #28]
   17d8c:	2302      	movs	r3, #2
   17d8e:	f88d 3004 	strb.w	r3, [sp, #4]
   17d92:	2300      	movs	r3, #0
   17d94:	f88d 3005 	strb.w	r3, [sp, #5]
   17d98:	f88d 3006 	strb.w	r3, [sp, #6]
   17d9c:	f88d 3007 	strb.w	r3, [sp, #7]
   17da0:	9a01      	ldr	r2, [sp, #4]
   17da2:	9206      	str	r2, [sp, #24]
   17da4:	4619      	mov	r1, r3
   17da6:	f363 0100 	bfi	r1, r3, #0, #1
   17daa:	f363 0141 	bfi	r1, r3, #1, #1
   17dae:	f363 0182 	bfi	r1, r3, #2, #1
   17db2:	f363 01c5 	bfi	r1, r3, #3, #3
   17db6:	2201      	movs	r2, #1
   17db8:	f362 1188 	bfi	r1, r2, #6, #3
   17dbc:	2208      	movs	r2, #8
   17dbe:	f362 2152 	bfi	r1, r2, #9, #10
   17dc2:	f363 41de 	bfi	r1, r3, #19, #12
   17dc6:	f363 71df 	bfi	r1, r3, #31, #1
   17dca:	aa06      	add	r2, sp, #24
   17dcc:	4803      	ldr	r0, [pc, #12]	; (17ddc <ipc_service_send+0x11c>)
   17dce:	f7fe fdbd 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   17dd2:	f06f 0004 	mvn.w	r0, #4
   17dd6:	e785      	b.n	17ce4 <ipc_service_send+0x24>
   17dd8:	00041390 	.word	0x00041390
   17ddc:	0003f448 	.word	0x0003f448
   17de0:	000413a4 	.word	0x000413a4
   17de4:	00041344 	.word	0x00041344

00017de8 <rpmsg_send_nocopy>:
 * @see rpmsg_sendto_nocopy
 */
static inline int rpmsg_send_nocopy(struct rpmsg_endpoint *ept,
				    const void *data, int len)
{
	if (!ept)
   17de8:	b150      	cbz	r0, 17e00 <rpmsg_send_nocopy+0x18>
{
   17dea:	b500      	push	{lr}
   17dec:	b083      	sub	sp, #12
   17dee:	460b      	mov	r3, r1
		return RPMSG_ERR_PARAM;

	return rpmsg_send_offchannel_nocopy(ept, ept->addr,
   17df0:	9200      	str	r2, [sp, #0]
   17df2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   17df4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   17df6:	f018 f991 	bl	3011c <rpmsg_send_offchannel_nocopy>
					    ept->dest_addr, data, len);
}
   17dfa:	b003      	add	sp, #12
   17dfc:	f85d fb04 	ldr.w	pc, [sp], #4
		return RPMSG_ERR_PARAM;
   17e00:	4800      	ldr	r0, [pc, #0]	; (17e04 <rpmsg_send_nocopy+0x1c>)
}
   17e02:	4770      	bx	lr
   17e04:	fffff82d 	.word	0xfffff82d

00017e08 <shared_memory_prepare>:

#define BACKEND_CONFIG_DEFINE(i) BACKEND_CONFIG_POPULATE(i),

#if defined(CONFIG_IPC_SERVICE_BACKEND_RPMSG_SHMEM_RESET)
static int shared_memory_prepare(const struct device *arg)
{
   17e08:	b510      	push	{r4, lr}
   17e0a:	b08c      	sub	sp, #48	; 0x30
	const struct backend_config_t *backend_config;
	const struct backend_config_t backend_configs[] = {
   17e0c:	f10d 0c04 	add.w	ip, sp, #4
   17e10:	4c0d      	ldr	r4, [pc, #52]	; (17e48 <shared_memory_prepare+0x40>)
   17e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17e14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   17e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17e1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   17e1e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   17e22:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		DT_INST_FOREACH_STATUS_OKAY(BACKEND_CONFIG_DEFINE)
	};

	for (backend_config = backend_configs;
   17e26:	ac01      	add	r4, sp, #4
	     backend_config < backend_configs + ARRAY_SIZE(backend_configs);
   17e28:	ab0c      	add	r3, sp, #48	; 0x30
   17e2a:	429c      	cmp	r4, r3
   17e2c:	d302      	bcc.n	17e34 <shared_memory_prepare+0x2c>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
		}
	}

	return 0;
}
   17e2e:	2000      	movs	r0, #0
   17e30:	b00c      	add	sp, #48	; 0x30
   17e32:	bd10      	pop	{r4, pc}
		if (backend_config->role == ROLE_HOST) {
   17e34:	6823      	ldr	r3, [r4, #0]
   17e36:	b10b      	cbz	r3, 17e3c <shared_memory_prepare+0x34>
	     backend_config++) {
   17e38:	342c      	adds	r4, #44	; 0x2c
   17e3a:	e7f5      	b.n	17e28 <shared_memory_prepare+0x20>
			memset((void *) backend_config->shm_addr, 0, VDEV_STATUS_SIZE);
   17e3c:	2204      	movs	r2, #4
   17e3e:	2100      	movs	r1, #0
   17e40:	6860      	ldr	r0, [r4, #4]
   17e42:	f020 fb09 	bl	38458 <memset>
   17e46:	e7f7      	b.n	17e38 <shared_memory_prepare+0x30>
   17e48:	0003f5f8 	.word	0x0003f5f8

00017e4c <get_available_ept_slot>:
{
   17e4c:	b508      	push	{r3, lr}
	return get_ept_slot_with_name(rpmsg_inst, "");
   17e4e:	4902      	ldr	r1, [pc, #8]	; (17e58 <get_available_ept_slot+0xc>)
   17e50:	f01f f895 	bl	36f7e <get_ept_slot_with_name>
}
   17e54:	bd08      	pop	{r3, pc}
   17e56:	bf00      	nop
   17e58:	000466c0 	.word	0x000466c0

00017e5c <check_endpoints_freed>:
{
   17e5c:	b538      	push	{r3, r4, r5, lr}
   17e5e:	4605      	mov	r5, r0
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   17e60:	2400      	movs	r4, #0
   17e62:	2c01      	cmp	r4, #1
   17e64:	d80a      	bhi.n	17e7c <check_endpoints_freed+0x20>
		if (strcmp("", rpmsg_ept->name) != 0) {
   17e66:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   17e6a:	0109      	lsls	r1, r1, #4
   17e6c:	3140      	adds	r1, #64	; 0x40
   17e6e:	4429      	add	r1, r5
   17e70:	4804      	ldr	r0, [pc, #16]	; (17e84 <check_endpoints_freed+0x28>)
   17e72:	f020 fa7f 	bl	38374 <strcmp>
   17e76:	b918      	cbnz	r0, 17e80 <check_endpoints_freed+0x24>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   17e78:	3401      	adds	r4, #1
   17e7a:	e7f2      	b.n	17e62 <check_endpoints_freed+0x6>
	return true;
   17e7c:	2001      	movs	r0, #1
}
   17e7e:	bd38      	pop	{r3, r4, r5, pc}
			return false;
   17e80:	2000      	movs	r0, #0
   17e82:	e7fc      	b.n	17e7e <check_endpoints_freed+0x22>
   17e84:	000466c0 	.word	0x000466c0

00017e88 <advertise_ept>:
{
   17e88:	b530      	push	{r4, r5, lr}
   17e8a:	b085      	sub	sp, #20
   17e8c:	4604      	mov	r4, r0
   17e8e:	460d      	mov	r5, r1
	err = rpmsg_create_ept(&rpmsg_ept->ep, rdev, name, RPMSG_ADDR_ANY,
   17e90:	490b      	ldr	r1, [pc, #44]	; (17ec0 <advertise_ept+0x38>)
   17e92:	9102      	str	r1, [sp, #8]
   17e94:	f8d0 11ac 	ldr.w	r1, [r0, #428]	; 0x1ac
   17e98:	9101      	str	r1, [sp, #4]
   17e9a:	9300      	str	r3, [sp, #0]
   17e9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ea0:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
   17ea4:	4628      	mov	r0, r5
   17ea6:	f018 f97b 	bl	301a0 <rpmsg_create_ept>
	if (err != 0) {
   17eaa:	b938      	cbnz	r0, 17ebc <advertise_ept+0x34>
	rpmsg_ept->bound = true;
   17eac:	2301      	movs	r3, #1
   17eae:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (rpmsg_inst->bound_cb) {
   17eb2:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   17eb6:	b10b      	cbz	r3, 17ebc <advertise_ept+0x34>
		rpmsg_inst->bound_cb(rpmsg_ept);
   17eb8:	4628      	mov	r0, r5
   17eba:	4798      	blx	r3
}
   17ebc:	b005      	add	sp, #20
   17ebe:	bd30      	pop	{r4, r5, pc}
   17ec0:	00036f43 	.word	0x00036f43

00017ec4 <rpmsg_send>:
	if (!ept)
   17ec4:	b160      	cbz	r0, 17ee0 <rpmsg_send+0x1c>
{
   17ec6:	b500      	push	{lr}
   17ec8:	b083      	sub	sp, #12
   17eca:	460b      	mov	r3, r1
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
   17ecc:	2101      	movs	r1, #1
   17ece:	9101      	str	r1, [sp, #4]
   17ed0:	9200      	str	r2, [sp, #0]
   17ed2:	6a82      	ldr	r2, [r0, #40]	; 0x28
   17ed4:	6a41      	ldr	r1, [r0, #36]	; 0x24
   17ed6:	f018 f8fd 	bl	300d4 <rpmsg_send_offchannel_raw>
}
   17eda:	b003      	add	sp, #12
   17edc:	f85d fb04 	ldr.w	pc, [sp], #4
		return RPMSG_ERR_PARAM;
   17ee0:	4800      	ldr	r0, [pc, #0]	; (17ee4 <rpmsg_send+0x20>)
}
   17ee2:	4770      	bx	lr
   17ee4:	fffff82d 	.word	0xfffff82d

00017ee8 <send>:
{
   17ee8:	b508      	push	{r3, lr}
   17eea:	4684      	mov	ip, r0
   17eec:	4608      	mov	r0, r1
   17eee:	4611      	mov	r1, r2
   17ef0:	461a      	mov	r2, r3
	struct backend_data_t *data = instance->data;
   17ef2:	f8dc 3010 	ldr.w	r3, [ip, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   17ef6:	f503 7367 	add.w	r3, r3, #924	; 0x39c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17efa:	e8d3 3faf 	lda	r3, [r3]
   17efe:	2b02      	cmp	r3, #2
   17f00:	d107      	bne.n	17f12 <send+0x2a>
	if (len == 0) {
   17f02:	b14a      	cbz	r2, 17f18 <send+0x30>
	if (!rpmsg_ept) {
   17f04:	b158      	cbz	r0, 17f1e <send+0x36>
	ret = rpmsg_send(&rpmsg_ept->ep, msg, len);
   17f06:	f7ff ffdd 	bl	17ec4 <rpmsg_send>
	if (ret == RPMSG_ERR_NO_BUFF) {
   17f0a:	4b08      	ldr	r3, [pc, #32]	; (17f2c <send+0x44>)
   17f0c:	4298      	cmp	r0, r3
   17f0e:	d009      	beq.n	17f24 <send+0x3c>
}
   17f10:	bd08      	pop	{r3, pc}
		return -EBUSY;
   17f12:	f06f 000f 	mvn.w	r0, #15
   17f16:	e7fb      	b.n	17f10 <send+0x28>
		return -EBADMSG;
   17f18:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   17f1c:	e7f8      	b.n	17f10 <send+0x28>
		return -ENOENT;
   17f1e:	f06f 0001 	mvn.w	r0, #1
   17f22:	e7f5      	b.n	17f10 <send+0x28>
		return -ENOMEM;
   17f24:	f06f 000b 	mvn.w	r0, #11
   17f28:	e7f2      	b.n	17f10 <send+0x28>
   17f2a:	bf00      	nop
   17f2c:	fffff82e 	.word	0xfffff82e

00017f30 <bound_cb>:
{
   17f30:	b510      	push	{r4, lr}
   17f32:	4604      	mov	r4, r0
	rpmsg_send(&ept->ep, (uint8_t *)"", 0);
   17f34:	2200      	movs	r2, #0
   17f36:	4904      	ldr	r1, [pc, #16]	; (17f48 <bound_cb+0x18>)
   17f38:	f7ff ffc4 	bl	17ec4 <rpmsg_send>
	if (ept->cb->bound) {
   17f3c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   17f3e:	681b      	ldr	r3, [r3, #0]
   17f40:	b10b      	cbz	r3, 17f46 <bound_cb+0x16>
		ept->cb->bound(ept->priv);
   17f42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   17f44:	4798      	blx	r3
}
   17f46:	bd10      	pop	{r4, pc}
   17f48:	000466c0 	.word	0x000466c0

00017f4c <mbox_init>:
{
   17f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f4e:	b083      	sub	sp, #12
	const struct backend_config_t *conf = instance->config;
   17f50:	6844      	ldr	r4, [r0, #4]
	struct backend_data_t *data = instance->data;
   17f52:	6905      	ldr	r5, [r0, #16]
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   17f54:	69e3      	ldr	r3, [r4, #28]
   17f56:	2b01      	cmp	r3, #1
   17f58:	d01f      	beq.n	17f9a <mbox_init+0x4e>
						   K_PRIO_PREEMPT(conf->wq_prio);
   17f5a:	6a27      	ldr	r7, [r4, #32]
	k_work_queue_init(&data->mbox_wq);
   17f5c:	f505 7630 	add.w	r6, r5, #704	; 0x2c0
   17f60:	4630      	mov	r0, r6
   17f62:	f01a faf5 	bl	32550 <k_work_queue_init>
	k_work_queue_start(&data->mbox_wq, mbox_stack[conf->id], WQ_STACK_SIZE, prio, NULL);
   17f66:	6a60      	ldr	r0, [r4, #36]	; 0x24
   17f68:	2300      	movs	r3, #0
   17f6a:	9300      	str	r3, [sp, #0]
   17f6c:	463b      	mov	r3, r7
   17f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17f72:	490e      	ldr	r1, [pc, #56]	; (17fac <mbox_init+0x60>)
   17f74:	eb01 2180 	add.w	r1, r1, r0, lsl #10
   17f78:	4630      	mov	r0, r6
   17f7a:	f01a fb03 	bl	32584 <k_work_queue_start>
	k_work_init(&data->mbox_work, mbox_callback_process);
   17f7e:	490c      	ldr	r1, [pc, #48]	; (17fb0 <mbox_init+0x64>)
   17f80:	f505 702c 	add.w	r0, r5, #688	; 0x2b0
   17f84:	f01a fa50 	bl	32428 <k_work_init>
	err = mbox_register_callback(&conf->mbox_rx, mbox_callback, data);
   17f88:	3414      	adds	r4, #20
   17f8a:	462a      	mov	r2, r5
   17f8c:	4909      	ldr	r1, [pc, #36]	; (17fb4 <mbox_init+0x68>)
   17f8e:	4620      	mov	r0, r4
   17f90:	f01e ff20 	bl	36dd4 <mbox_register_callback>
	if (err != 0) {
   17f94:	b120      	cbz	r0, 17fa0 <mbox_init+0x54>
}
   17f96:	b003      	add	sp, #12
   17f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	prio = (conf->wq_prio_type == PRIO_COOP) ? K_PRIO_COOP(conf->wq_prio) :
   17f9a:	6a27      	ldr	r7, [r4, #32]
   17f9c:	3f10      	subs	r7, #16
   17f9e:	e7dd      	b.n	17f5c <mbox_init+0x10>
   17fa0:	2101      	movs	r1, #1
   17fa2:	4620      	mov	r0, r4
   17fa4:	f01e ff25 	bl	36df2 <z_impl_mbox_set_enabled>
	return mbox_set_enabled(&conf->mbox_rx, 1);
   17fa8:	e7f5      	b.n	17f96 <mbox_init+0x4a>
   17faa:	bf00      	nop
   17fac:	2000e2c0 	.word	0x2000e2c0
   17fb0:	000372d7 	.word	0x000372d7
   17fb4:	000372c7 	.word	0x000372c7

00017fb8 <open>:
{
   17fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17fbc:	b085      	sub	sp, #20
   17fbe:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
   17fc0:	6846      	ldr	r6, [r0, #4]
	struct backend_data_t *data = instance->data;
   17fc2:	6905      	ldr	r5, [r0, #16]
	if (!atomic_cas(&data->state, STATE_READY, STATE_BUSY)) {
   17fc4:	f505 7967 	add.w	r9, r5, #924	; 0x39c
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17fc8:	2301      	movs	r3, #1
   17fca:	e8d9 2fef 	ldaex	r2, [r9]
   17fce:	2a00      	cmp	r2, #0
   17fd0:	d103      	bne.n	17fda <open+0x22>
   17fd2:	e8c9 3fe1 	stlex	r1, r3, [r9]
   17fd6:	2900      	cmp	r1, #0
   17fd8:	d1f7      	bne.n	17fca <open+0x12>
   17fda:	d152      	bne.n	18082 <open+0xca>
	err = vr_shm_configure(&data->vr, conf);
   17fdc:	f505 78e4 	add.w	r8, r5, #456	; 0x1c8
   17fe0:	4631      	mov	r1, r6
   17fe2:	4640      	mov	r0, r8
   17fe4:	f01f f929 	bl	3723a <vr_shm_configure>
	if (err != 0) {
   17fe8:	4607      	mov	r7, r0
   17fea:	b150      	cbz	r0, 18002 <open+0x4a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17fec:	2300      	movs	r3, #0
   17fee:	e8d9 2fef 	ldaex	r2, [r9]
   17ff2:	e8c9 3fe1 	stlex	r1, r3, [r9]
   17ff6:	2900      	cmp	r1, #0
   17ff8:	d1f9      	bne.n	17fee <open+0x36>
}
   17ffa:	4638      	mov	r0, r7
   17ffc:	b005      	add	sp, #20
   17ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->vr.notify_cb = virtio_notify_cb;
   18002:	4b21      	ldr	r3, [pc, #132]	; (18088 <open+0xd0>)
   18004:	f8c5 32a8 	str.w	r3, [r5, #680]	; 0x2a8
	data->vr.priv = (void *) conf;
   18008:	f8c5 62a4 	str.w	r6, [r5, #676]	; 0x2a4
	err = ipc_static_vrings_init(&data->vr, conf->role);
   1800c:	6831      	ldr	r1, [r6, #0]
   1800e:	4640      	mov	r0, r8
   18010:	f000 f94a 	bl	182a8 <ipc_static_vrings_init>
	if (err != 0) {
   18014:	4607      	mov	r7, r0
   18016:	2800      	cmp	r0, #0
   18018:	d1e8      	bne.n	17fec <open+0x34>
	err = mbox_init(instance);
   1801a:	4620      	mov	r0, r4
   1801c:	f7ff ff96 	bl	17f4c <mbox_init>
	if (err != 0) {
   18020:	4607      	mov	r7, r0
   18022:	2800      	cmp	r0, #0
   18024:	d1e2      	bne.n	17fec <open+0x34>
	rpmsg_inst->bound_cb = bound_cb;
   18026:	4b19      	ldr	r3, [pc, #100]	; (1808c <open+0xd4>)
   18028:	f8c5 31a8 	str.w	r3, [r5, #424]	; 0x1a8
	rpmsg_inst->cb = ept_cb;
   1802c:	4b18      	ldr	r3, [pc, #96]	; (18090 <open+0xd8>)
   1802e:	f8c5 31ac 	str.w	r3, [r5, #428]	; 0x1ac
	err = ipc_rpmsg_init(rpmsg_inst, data->role, conf->buffer_size,
   18032:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   18034:	f8d5 3268 	ldr.w	r3, [r5, #616]	; 0x268
   18038:	f8d5 1398 	ldr.w	r1, [r5, #920]	; 0x398
   1803c:	4815      	ldr	r0, [pc, #84]	; (18094 <open+0xdc>)
   1803e:	9003      	str	r0, [sp, #12]
   18040:	f8d5 0210 	ldr.w	r0, [r5, #528]	; 0x210
   18044:	9002      	str	r0, [sp, #8]
   18046:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
   1804a:	9001      	str	r0, [sp, #4]
   1804c:	f8cd 8000 	str.w	r8, [sp]
   18050:	4628      	mov	r0, r5
   18052:	f000 f881 	bl	18158 <ipc_rpmsg_init>
	if (err != 0) {
   18056:	4607      	mov	r7, r0
   18058:	2800      	cmp	r0, #0
   1805a:	d1c7      	bne.n	17fec <open+0x34>
	data->tx_buffer_size = rpmsg_virtio_get_buffer_size(rdev);
   1805c:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   18060:	f018 fa58 	bl	30514 <rpmsg_virtio_get_buffer_size>
   18064:	f8c5 03a0 	str.w	r0, [r5, #928]	; 0x3a0
	if (data->tx_buffer_size < 0) {
   18068:	2800      	cmp	r0, #0
   1806a:	db07      	blt.n	1807c <open+0xc4>
   1806c:	2302      	movs	r3, #2
   1806e:	e8d9 2fef 	ldaex	r2, [r9]
   18072:	e8c9 3fe1 	stlex	r1, r3, [r9]
   18076:	2900      	cmp	r1, #0
   18078:	d0bf      	beq.n	17ffa <open+0x42>
   1807a:	e7f8      	b.n	1806e <open+0xb6>
		err = -EINVAL;
   1807c:	f06f 0715 	mvn.w	r7, #21
   18080:	e7b4      	b.n	17fec <open+0x34>
		return -EALREADY;
   18082:	f06f 0777 	mvn.w	r7, #119	; 0x77
   18086:	e7b8      	b.n	17ffa <open+0x42>
   18088:	00036e2f 	.word	0x00036e2f
   1808c:	00017f31 	.word	0x00017f31
   18090:	00037141 	.word	0x00037141
   18094:	00037049 	.word	0x00037049

00018098 <ns_bind_cb>:
{
	rpmsg_destroy_ept(ep);
}

static void ns_bind_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
   18098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1809c:	b085      	sub	sp, #20
   1809e:	4607      	mov	r7, r0
   180a0:	460e      	mov	r6, r1
   180a2:	4691      	mov	r9, r2
	struct ipc_rpmsg_instance *instance;
	struct ipc_rpmsg_ept *ept;
	int err;

	p_rvdev = CONTAINER_OF(rdev, struct rpmsg_virtio_device, rdev);
	instance = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   180a4:	f8d0 80b0 	ldr.w	r8, [r0, #176]	; 0xb0

	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   180a8:	2400      	movs	r4, #0
   180aa:	e000      	b.n	180ae <ns_bind_cb+0x16>
   180ac:	3401      	adds	r4, #1
   180ae:	2c01      	cmp	r4, #1
   180b0:	d828      	bhi.n	18104 <ns_bind_cb+0x6c>
		ept = &instance->endpoint[i];
   180b2:	f5a8 71ce 	sub.w	r1, r8, #412	; 0x19c
   180b6:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
   180ba:	eb01 1505 	add.w	r5, r1, r5, lsl #4

		if (strcmp(name, ept->name) == 0) {
   180be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   180c2:	011b      	lsls	r3, r3, #4
   180c4:	3340      	adds	r3, #64	; 0x40
   180c6:	4419      	add	r1, r3
   180c8:	4630      	mov	r0, r6
   180ca:	f020 f953 	bl	38374 <strcmp>
   180ce:	2800      	cmp	r0, #0
   180d0:	d1ec      	bne.n	180ac <ns_bind_cb+0x14>
			 * The destination address is 'dest' so ns_bind_cb() is
			 * *NOT* called on the REMOTE side. The bound_cb()
			 * function will eventually take care of notifying the
			 * REMOTE side if needed.
			 */
			err = rpmsg_create_ept(&ept->ep, rdev, name, RPMSG_ADDR_ANY,
   180d2:	4b0e      	ldr	r3, [pc, #56]	; (1810c <ns_bind_cb+0x74>)
   180d4:	9302      	str	r3, [sp, #8]
   180d6:	f8d8 3010 	ldr.w	r3, [r8, #16]
   180da:	9301      	str	r3, [sp, #4]
   180dc:	f8cd 9000 	str.w	r9, [sp]
   180e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   180e4:	4632      	mov	r2, r6
   180e6:	4639      	mov	r1, r7
   180e8:	4628      	mov	r0, r5
   180ea:	f018 f859 	bl	301a0 <rpmsg_create_ept>
					       dest, instance->cb, rpmsg_service_unbind);
			if (err != 0) {
   180ee:	b948      	cbnz	r0, 18104 <ns_bind_cb+0x6c>
				return;
			}

			ept->bound = true;
   180f0:	2101      	movs	r1, #1
   180f2:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
			if (instance->bound_cb) {
   180f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   180fa:	2b00      	cmp	r3, #0
   180fc:	d0d6      	beq.n	180ac <ns_bind_cb+0x14>
				instance->bound_cb(ept);
   180fe:	4628      	mov	r0, r5
   18100:	4798      	blx	r3
   18102:	e7d3      	b.n	180ac <ns_bind_cb+0x14>
			}
		}
	}
}
   18104:	b005      	add	sp, #20
   18106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1810a:	bf00      	nop
   1810c:	0003731d 	.word	0x0003731d

00018110 <ipc_rpmsg_register_ept>:
int ipc_rpmsg_register_ept(struct ipc_rpmsg_instance *instance, unsigned int role,
			   struct ipc_rpmsg_ept *ept)
{
	struct rpmsg_device *rdev;

	if (!instance || !ept) {
   18110:	b1c8      	cbz	r0, 18146 <ipc_rpmsg_register_ept+0x36>
{
   18112:	b510      	push	{r4, lr}
   18114:	b084      	sub	sp, #16
   18116:	4614      	mov	r4, r2
   18118:	4603      	mov	r3, r0
	if (!instance || !ept) {
   1811a:	b1ba      	cbz	r2, 1814c <ipc_rpmsg_register_ept+0x3c>
rpmsg_virtio_get_rpmsg_device(struct rpmsg_virtio_device *rvdev)
{
	if (!rvdev)
		return NULL;

	return &rvdev->rdev;
   1811c:	30e0      	adds	r0, #224	; 0xe0
		return -EINVAL;
	}

	rdev = rpmsg_virtio_get_rpmsg_device(&instance->rvdev);

	if (role == RPMSG_REMOTE) {
   1811e:	2901      	cmp	r1, #1
   18120:	d002      	beq.n	18128 <ipc_rpmsg_register_ept+0x18>
		 */
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
					RPMSG_ADDR_ANY, instance->cb, rpmsg_service_unbind);
	}

	return RPMSG_SUCCESS;
   18122:	2000      	movs	r0, #0
}
   18124:	b004      	add	sp, #16
   18126:	bd10      	pop	{r4, pc}
		return rpmsg_create_ept(&ept->ep, rdev, ept->name, RPMSG_ADDR_ANY,
   18128:	4a0a      	ldr	r2, [pc, #40]	; (18154 <ipc_rpmsg_register_ept+0x44>)
   1812a:	9202      	str	r2, [sp, #8]
   1812c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
   18130:	9301      	str	r3, [sp, #4]
   18132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18136:	9300      	str	r3, [sp, #0]
   18138:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1813c:	4601      	mov	r1, r0
   1813e:	4620      	mov	r0, r4
   18140:	f018 f82e 	bl	301a0 <rpmsg_create_ept>
   18144:	e7ee      	b.n	18124 <ipc_rpmsg_register_ept+0x14>
		return -EINVAL;
   18146:	f06f 0015 	mvn.w	r0, #21
}
   1814a:	4770      	bx	lr
		return -EINVAL;
   1814c:	f06f 0015 	mvn.w	r0, #21
   18150:	e7e8      	b.n	18124 <ipc_rpmsg_register_ept+0x14>
   18152:	bf00      	nop
   18154:	0003731d 	.word	0x0003731d

00018158 <ipc_rpmsg_init>:
		   unsigned int buffer_size,
		   struct metal_io_region *shm_io,
		   struct virtio_device *vdev,
		   void *shb, size_t size,
		   rpmsg_ns_bind_cb p_bind_cb)
{
   18158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1815c:	b086      	sub	sp, #24
   1815e:	461e      	mov	r6, r3
   18160:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18162:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	rpmsg_ns_bind_cb bind_cb = p_bind_cb;

	if (!instance || !shb) {
   18164:	b348      	cbz	r0, 181ba <ipc_rpmsg_init+0x62>
   18166:	4605      	mov	r5, r0
   18168:	b353      	cbz	r3, 181c0 <ipc_rpmsg_init+0x68>
		return -EINVAL;
	}

	if (p_bind_cb == NULL) {
   1816a:	b1d4      	cbz	r4, 181a2 <ipc_rpmsg_init+0x4a>
		bind_cb = ns_bind_cb;
	}

	if (role == RPMSG_HOST) {
   1816c:	b9d9      	cbnz	r1, 181a6 <ipc_rpmsg_init+0x4e>
		struct rpmsg_virtio_config config = { 0 };
   1816e:	af03      	add	r7, sp, #12
   18170:	9103      	str	r1, [sp, #12]
   18172:	9104      	str	r1, [sp, #16]
   18174:	9105      	str	r1, [sp, #20]

		config.h2r_buf_size = (uint32_t) buffer_size;
   18176:	9203      	str	r2, [sp, #12]
		config.r2h_buf_size = (uint32_t) buffer_size;
   18178:	9204      	str	r2, [sp, #16]

		rpmsg_virtio_init_shm_pool(&instance->shm_pool, shb, size);
   1817a:	f505 78ce 	add.w	r8, r5, #412	; 0x19c
   1817e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18180:	4619      	mov	r1, r3
   18182:	4640      	mov	r0, r8
   18184:	f026 fb2b 	bl	3e7de <rpmsg_virtio_init_shm_pool>

		return rpmsg_init_vdev_with_config(&instance->rvdev, vdev, bind_cb,
   18188:	9701      	str	r7, [sp, #4]
   1818a:	f8cd 8000 	str.w	r8, [sp]
   1818e:	4633      	mov	r3, r6
   18190:	4622      	mov	r2, r4
   18192:	990c      	ldr	r1, [sp, #48]	; 0x30
   18194:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   18198:	f018 f9d2 	bl	30540 <rpmsg_init_vdev_with_config>
						   shm_io, &instance->shm_pool,
						   &config);
	} else {
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
	}
}
   1819c:	b006      	add	sp, #24
   1819e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bind_cb = ns_bind_cb;
   181a2:	4c09      	ldr	r4, [pc, #36]	; (181c8 <ipc_rpmsg_init+0x70>)
   181a4:	e7e2      	b.n	1816c <ipc_rpmsg_init+0x14>
		return rpmsg_init_vdev(&instance->rvdev, vdev, bind_cb, shm_io, NULL);
   181a6:	2300      	movs	r3, #0
   181a8:	9300      	str	r3, [sp, #0]
   181aa:	4633      	mov	r3, r6
   181ac:	4622      	mov	r2, r4
   181ae:	990c      	ldr	r1, [sp, #48]	; 0x30
   181b0:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   181b4:	f018 faf4 	bl	307a0 <rpmsg_init_vdev>
   181b8:	e7f0      	b.n	1819c <ipc_rpmsg_init+0x44>
		return -EINVAL;
   181ba:	f06f 0015 	mvn.w	r0, #21
   181be:	e7ed      	b.n	1819c <ipc_rpmsg_init+0x44>
   181c0:	f06f 0015 	mvn.w	r0, #21
   181c4:	e7ea      	b.n	1819c <ipc_rpmsg_init+0x44>
   181c6:	bf00      	nop
   181c8:	00018099 	.word	0x00018099

000181cc <libmetal_setup>:
	.set_features = virtio_set_features,
	.notify = virtio_notify,
};

static int libmetal_setup(struct ipc_static_vrings *vr)
{
   181cc:	b510      	push	{r4, lr}
   181ce:	b084      	sub	sp, #16
   181d0:	4604      	mov	r4, r0
	struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
   181d2:	4a11      	ldr	r2, [pc, #68]	; (18218 <libmetal_setup+0x4c>)
   181d4:	ab02      	add	r3, sp, #8
   181d6:	e892 0003 	ldmia.w	r2, {r0, r1}
   181da:	e883 0003 	stmia.w	r3, {r0, r1}
	struct metal_device *device;
	int err;

	err = metal_init(&metal_params);
   181de:	4618      	mov	r0, r3
   181e0:	f017 fe6a 	bl	2feb8 <metal_init>
	if (err != 0) {
   181e4:	b108      	cbz	r0, 181ea <libmetal_setup+0x1e>
	if (vr->shm_io == NULL) {
		return err;
	}

	return 0;
}
   181e6:	b004      	add	sp, #16
   181e8:	bd10      	pop	{r4, pc}
	err = metal_register_generic_device(&vr->shm_device);
   181ea:	f104 0034 	add.w	r0, r4, #52	; 0x34
   181ee:	f017 fe43 	bl	2fe78 <metal_register_generic_device>
	if (err != 0) {
   181f2:	2800      	cmp	r0, #0
   181f4:	d1f7      	bne.n	181e6 <libmetal_setup+0x1a>
	err = metal_device_open("generic", SHM_DEVICE_NAME, &device);
   181f6:	aa01      	add	r2, sp, #4
   181f8:	4908      	ldr	r1, [pc, #32]	; (1821c <libmetal_setup+0x50>)
   181fa:	4809      	ldr	r0, [pc, #36]	; (18220 <libmetal_setup+0x54>)
   181fc:	f025 fd18 	bl	3dc30 <metal_device_open>
	if (err != 0) {
   18200:	2800      	cmp	r0, #0
   18202:	d1f0      	bne.n	181e6 <libmetal_setup+0x1a>
	vr->shm_io = metal_device_io_region(device, 0);
   18204:	9b01      	ldr	r3, [sp, #4]
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned int index)
{
	return (index < device->num_regions
   18206:	689a      	ldr	r2, [r3, #8]
		? &device->regions[index]
		: NULL);
   18208:	b11a      	cbz	r2, 18212 <libmetal_setup+0x46>
   1820a:	330c      	adds	r3, #12
   1820c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	if (vr->shm_io == NULL) {
   18210:	e7e9      	b.n	181e6 <libmetal_setup+0x1a>
   18212:	2300      	movs	r3, #0
   18214:	e7fa      	b.n	1820c <libmetal_setup+0x40>
   18216:	bf00      	nop
   18218:	0003f624 	.word	0x0003f624
   1821c:	00041400 	.word	0x00041400
   18220:	0004140c 	.word	0x0004140c

00018224 <vq_setup>:

	return 0;
}

static int vq_setup(struct ipc_static_vrings *vr, unsigned int role)
{
   18224:	b538      	push	{r3, r4, r5, lr}
   18226:	4604      	mov	r4, r0
   18228:	460d      	mov	r5, r1
	vr->vq[RPMSG_VQ_0] = virtqueue_allocate(vr->vring_size);
   1822a:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   1822e:	f01f f8b5 	bl	3739c <virtqueue_allocate>
   18232:	f8c4 00d4 	str.w	r0, [r4, #212]	; 0xd4
	if (vr->vq[RPMSG_VQ_0] == NULL) {
   18236:	b378      	cbz	r0, 18298 <vq_setup+0x74>
		return -ENOMEM;
	}

	vr->vq[RPMSG_VQ_1] = virtqueue_allocate(vr->vring_size);
   18238:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1823c:	f01f f8ae 	bl	3739c <virtqueue_allocate>
   18240:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
	if (vr->vq[RPMSG_VQ_1] == NULL) {
   18244:	b358      	cbz	r0, 1829e <vq_setup+0x7a>
		return -ENOMEM;
	}

	vr->rvrings[RPMSG_VQ_0].io = vr->shm_io;
   18246:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
   1824a:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
	vr->rvrings[RPMSG_VQ_0].info.vaddr = (void *) vr->tx_addr;
   1824e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   18252:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	vr->rvrings[RPMSG_VQ_0].info.num_descs = vr->vring_size;
   18256:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   1825a:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
	vr->rvrings[RPMSG_VQ_0].info.align = VRING_ALIGNMENT;
   1825e:	2304      	movs	r3, #4
   18260:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	vr->rvrings[RPMSG_VQ_0].vq = vr->vq[RPMSG_VQ_0];
   18264:	f8d4 c0d4 	ldr.w	ip, [r4, #212]	; 0xd4
   18268:	f8c4 c0a4 	str.w	ip, [r4, #164]	; 0xa4

	vr->rvrings[RPMSG_VQ_1].io = vr->shm_io;
   1826c:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
	vr->rvrings[RPMSG_VQ_1].info.vaddr = (void *) vr->rx_addr;
   18270:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   18274:	f8c4 10c0 	str.w	r1, [r4, #192]	; 0xc0
	vr->rvrings[RPMSG_VQ_1].info.num_descs = vr->vring_size;
   18278:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	vr->rvrings[RPMSG_VQ_1].info.align = VRING_ALIGNMENT;
   1827c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	vr->rvrings[RPMSG_VQ_1].vq = vr->vq[RPMSG_VQ_1];
   18280:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

	vr->vdev.role = role;
   18284:	61a5      	str	r5, [r4, #24]

	vr->vdev.vrings_num = VRING_COUNT;
   18286:	2302      	movs	r3, #2
   18288:	62a3      	str	r3, [r4, #40]	; 0x28
	vr->vdev.func = &dispatch;
   1828a:	4b06      	ldr	r3, [pc, #24]	; (182a4 <vq_setup+0x80>)
   1828c:	6223      	str	r3, [r4, #32]
	vr->vdev.vrings_info = &vr->rvrings[0];
   1828e:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
   18292:	62e3      	str	r3, [r4, #44]	; 0x2c

	return 0;
   18294:	2000      	movs	r0, #0
}
   18296:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   18298:	f06f 000b 	mvn.w	r0, #11
   1829c:	e7fb      	b.n	18296 <vq_setup+0x72>
		return -ENOMEM;
   1829e:	f06f 000b 	mvn.w	r0, #11
   182a2:	e7f8      	b.n	18296 <vq_setup+0x72>
   182a4:	00041414 	.word	0x00041414

000182a8 <ipc_static_vrings_init>:

int ipc_static_vrings_init(struct ipc_static_vrings *vr, unsigned int role)
{
	int err = 0;

	if (!vr) {
   182a8:	b310      	cbz	r0, 182f0 <ipc_static_vrings_init+0x48>
{
   182aa:	b530      	push	{r4, r5, lr}
   182ac:	b085      	sub	sp, #20
   182ae:	460d      	mov	r5, r1
   182b0:	4604      	mov	r4, r0
		return -EINVAL;
	}

	vr->shm_device.name = SHM_DEVICE_NAME;
   182b2:	4b11      	ldr	r3, [pc, #68]	; (182f8 <ipc_static_vrings_init+0x50>)
   182b4:	6343      	str	r3, [r0, #52]	; 0x34
	vr->shm_device.num_regions = 1;
   182b6:	2301      	movs	r3, #1
   182b8:	63c3      	str	r3, [r0, #60]	; 0x3c
	vr->shm_physmap[0] = vr->shm_addr;
   182ba:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
   182be:	6301      	str	r1, [r0, #48]	; 0x30

	metal_io_init(vr->shm_device.regions, (void *) vr->shm_addr,
   182c0:	2300      	movs	r3, #0
   182c2:	9302      	str	r3, [sp, #8]
   182c4:	9301      	str	r3, [sp, #4]
   182c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   182ca:	9300      	str	r3, [sp, #0]
   182cc:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   182d0:	f100 0230 	add.w	r2, r0, #48	; 0x30
   182d4:	3040      	adds	r0, #64	; 0x40
   182d6:	f025 fcd0 	bl	3dc7a <metal_io_init>
		      vr->shm_physmap, vr->shm_size, -1, 0, NULL);

	err = libmetal_setup(vr);
   182da:	4620      	mov	r0, r4
   182dc:	f7ff ff76 	bl	181cc <libmetal_setup>
	if (err != 0) {
   182e0:	b108      	cbz	r0, 182e6 <ipc_static_vrings_init+0x3e>
		return err;
	}

	return vq_setup(vr, role);
}
   182e2:	b005      	add	sp, #20
   182e4:	bd30      	pop	{r4, r5, pc}
	return vq_setup(vr, role);
   182e6:	4629      	mov	r1, r5
   182e8:	4620      	mov	r0, r4
   182ea:	f7ff ff9b 	bl	18224 <vq_setup>
   182ee:	e7f8      	b.n	182e2 <ipc_static_vrings_init+0x3a>
		return -EINVAL;
   182f0:	f06f 0015 	mvn.w	r0, #21
}
   182f4:	4770      	bx	lr
   182f6:	bf00      	nop
   182f8:	00041400 	.word	0x00041400

000182fc <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
   182fc:	4684      	mov	ip, r0
	for (int i = 0; i < flash_map_entries; i++) {
   182fe:	2300      	movs	r3, #0
   18300:	e000      	b.n	18304 <get_flash_area_from_id+0x8>
   18302:	3301      	adds	r3, #1
   18304:	4a07      	ldr	r2, [pc, #28]	; (18324 <get_flash_area_from_id+0x28>)
   18306:	6812      	ldr	r2, [r2, #0]
   18308:	429a      	cmp	r2, r3
   1830a:	dd08      	ble.n	1831e <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
   1830c:	011a      	lsls	r2, r3, #4
   1830e:	4906      	ldr	r1, [pc, #24]	; (18328 <get_flash_area_from_id+0x2c>)
   18310:	6809      	ldr	r1, [r1, #0]
   18312:	eb01 1003 	add.w	r0, r1, r3, lsl #4
   18316:	5c8a      	ldrb	r2, [r1, r2]
   18318:	4562      	cmp	r2, ip
   1831a:	d1f2      	bne.n	18302 <get_flash_area_from_id+0x6>
   1831c:	e000      	b.n	18320 <get_flash_area_from_id+0x24>
			return &flash_map[i];
		}
	}

	return NULL;
   1831e:	2000      	movs	r0, #0
}
   18320:	4770      	bx	lr
   18322:	bf00      	nop
   18324:	00041558 	.word	0x00041558
   18328:	20008408 	.word	0x20008408

0001832c <flash_area_open>:
		user_cb(&flash_map[i], user_data);
	}
}

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
   1832c:	b538      	push	{r3, r4, r5, lr}
	const struct flash_area *area;

	if (flash_map == NULL) {
   1832e:	4b0c      	ldr	r3, [pc, #48]	; (18360 <flash_area_open+0x34>)
   18330:	681b      	ldr	r3, [r3, #0]
   18332:	b17b      	cbz	r3, 18354 <flash_area_open+0x28>
   18334:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   18336:	f7ff ffe1 	bl	182fc <get_flash_area_from_id>
	if (area == NULL) {
   1833a:	4605      	mov	r5, r0
   1833c:	b168      	cbz	r0, 1835a <flash_area_open+0x2e>
		return -ENOENT;
	}

	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   1833e:	68c0      	ldr	r0, [r0, #12]
   18340:	b128      	cbz	r0, 1834e <flash_area_open+0x22>
   18342:	f026 fa6c 	bl	3e81e <z_device_is_ready>
   18346:	b110      	cbz	r0, 1834e <flash_area_open+0x22>
		return -ENODEV;
	}

	*fap = area;
   18348:	6025      	str	r5, [r4, #0]

	return 0;
   1834a:	2000      	movs	r0, #0
}
   1834c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1834e:	f06f 0012 	mvn.w	r0, #18
   18352:	e7fb      	b.n	1834c <flash_area_open+0x20>
		return -EACCES;
   18354:	f06f 000c 	mvn.w	r0, #12
   18358:	e7f8      	b.n	1834c <flash_area_open+0x20>
		return -ENOENT;
   1835a:	f06f 0001 	mvn.w	r0, #1
   1835e:	e7f5      	b.n	1834c <flash_area_open+0x20>
   18360:	20008408 	.word	0x20008408

00018364 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   18364:	b500      	push	{lr}
   18366:	b08b      	sub	sp, #44	; 0x2c
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   18368:	ab03      	add	r3, sp, #12
   1836a:	9300      	str	r3, [sp, #0]
   1836c:	4b02      	ldr	r3, [pc, #8]	; (18378 <flash_area_get_sectors+0x14>)
   1836e:	f01f f899 	bl	374a4 <flash_area_layout>
}
   18372:	b00b      	add	sp, #44	; 0x2c
   18374:	f85d fb04 	ldr.w	pc, [sp], #4
   18378:	00037469 	.word	0x00037469

0001837c <settings_save_one>:

/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int settings_save_one(const char *name, const void *value, size_t val_len)
{
   1837c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   18380:	4b0f      	ldr	r3, [pc, #60]	; (183c0 <settings_save_one+0x44>)
   18382:	681d      	ldr	r5, [r3, #0]
	if (!cs) {
   18384:	b1cd      	cbz	r5, 183ba <settings_save_one+0x3e>
   18386:	4680      	mov	r8, r0
   18388:	460f      	mov	r7, r1
   1838a:	4614      	mov	r4, r2
	return z_impl_k_mutex_lock(mutex, timeout);
   1838c:	4e0d      	ldr	r6, [pc, #52]	; (183c4 <settings_save_one+0x48>)
   1838e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18396:	4630      	mov	r0, r6
   18398:	f019 fa60 	bl	3185c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   1839c:	686b      	ldr	r3, [r5, #4]
   1839e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   183a2:	4623      	mov	r3, r4
   183a4:	463a      	mov	r2, r7
   183a6:	4641      	mov	r1, r8
   183a8:	4628      	mov	r0, r5
   183aa:	47c8      	blx	r9
   183ac:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   183ae:	4630      	mov	r0, r6
   183b0:	f019 fb6a 	bl	31a88 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   183b4:	4620      	mov	r0, r4
   183b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOENT;
   183ba:	f06f 0401 	mvn.w	r4, #1
   183be:	e7f9      	b.n	183b4 <settings_save_one+0x38>
   183c0:	2000bedc 	.word	0x2000bedc
   183c4:	2000893c 	.word	0x2000893c

000183c8 <settings_src_register>:
	parent->next = child;
   183c8:	2300      	movs	r3, #0
   183ca:	6003      	str	r3, [r0, #0]
	return list->tail;
   183cc:	4b05      	ldr	r3, [pc, #20]	; (183e4 <settings_src_register+0x1c>)
   183ce:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   183d0:	b11b      	cbz	r3, 183da <settings_src_register+0x12>
	parent->next = child;
   183d2:	6018      	str	r0, [r3, #0]
	list->tail = node;
   183d4:	4b03      	ldr	r3, [pc, #12]	; (183e4 <settings_src_register+0x1c>)
   183d6:	6058      	str	r0, [r3, #4]
}
   183d8:	4770      	bx	lr
   183da:	4b02      	ldr	r3, [pc, #8]	; (183e4 <settings_src_register+0x1c>)
   183dc:	6058      	str	r0, [r3, #4]
	list->head = node;
   183de:	6018      	str	r0, [r3, #0]
}
   183e0:	4770      	bx	lr
   183e2:	bf00      	nop
   183e4:	2000bee0 	.word	0x2000bee0

000183e8 <settings_dst_register>:
	settings_save_dst = cs;
   183e8:	4b01      	ldr	r3, [pc, #4]	; (183f0 <settings_dst_register+0x8>)
   183ea:	6018      	str	r0, [r3, #0]
}
   183ec:	4770      	bx	lr
   183ee:	bf00      	nop
   183f0:	2000bedc 	.word	0x2000bedc

000183f4 <settings_load_subtree>:
{
   183f4:	b530      	push	{r4, r5, lr}
   183f6:	b085      	sub	sp, #20
   183f8:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   183fa:	2300      	movs	r3, #0
   183fc:	9301      	str	r3, [sp, #4]
   183fe:	9302      	str	r3, [sp, #8]
   18400:	9303      	str	r3, [sp, #12]
   18402:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   18404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1840c:	480e      	ldr	r0, [pc, #56]	; (18448 <settings_load_subtree+0x54>)
   1840e:	f019 fa25 	bl	3185c <z_impl_k_mutex_lock>
	return list->head;
   18412:	4b0e      	ldr	r3, [pc, #56]	; (1844c <settings_load_subtree+0x58>)
   18414:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   18416:	b164      	cbz	r4, 18432 <settings_load_subtree+0x3e>
		cs->cs_itf->csi_load(cs, &arg);
   18418:	6863      	ldr	r3, [r4, #4]
   1841a:	681b      	ldr	r3, [r3, #0]
   1841c:	a901      	add	r1, sp, #4
   1841e:	4620      	mov	r0, r4
   18420:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   18422:	4623      	mov	r3, r4
	return node->next;
   18424:	6824      	ldr	r4, [r4, #0]
   18426:	2c00      	cmp	r4, #0
   18428:	d0f5      	beq.n	18416 <settings_load_subtree+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1842a:	2b00      	cmp	r3, #0
   1842c:	d1f3      	bne.n	18416 <settings_load_subtree+0x22>
   1842e:	461c      	mov	r4, r3
   18430:	e7f1      	b.n	18416 <settings_load_subtree+0x22>
	rc = settings_commit_subtree(subtree);
   18432:	4628      	mov	r0, r5
   18434:	f000 f94c 	bl	186d0 <settings_commit_subtree>
   18438:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1843a:	4803      	ldr	r0, [pc, #12]	; (18448 <settings_load_subtree+0x54>)
   1843c:	f019 fb24 	bl	31a88 <z_impl_k_mutex_unlock>
}
   18440:	4620      	mov	r0, r4
   18442:	b005      	add	sp, #20
   18444:	bd30      	pop	{r4, r5, pc}
   18446:	bf00      	nop
   18448:	2000893c 	.word	0x2000893c
   1844c:	2000bee0 	.word	0x2000bee0

00018450 <settings_load_subtree_direct>:
{
   18450:	b510      	push	{r4, lr}
   18452:	b084      	sub	sp, #16
	const struct settings_load_arg arg = {
   18454:	9001      	str	r0, [sp, #4]
   18456:	9102      	str	r1, [sp, #8]
   18458:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
   1845a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1845e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18462:	480c      	ldr	r0, [pc, #48]	; (18494 <settings_load_subtree_direct+0x44>)
   18464:	f019 f9fa 	bl	3185c <z_impl_k_mutex_lock>
	return list->head;
   18468:	4b0b      	ldr	r3, [pc, #44]	; (18498 <settings_load_subtree_direct+0x48>)
   1846a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   1846c:	b164      	cbz	r4, 18488 <settings_load_subtree_direct+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   1846e:	6863      	ldr	r3, [r4, #4]
   18470:	681b      	ldr	r3, [r3, #0]
   18472:	a901      	add	r1, sp, #4
   18474:	4620      	mov	r0, r4
   18476:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   18478:	4623      	mov	r3, r4
	return node->next;
   1847a:	6824      	ldr	r4, [r4, #0]
   1847c:	2c00      	cmp	r4, #0
   1847e:	d0f5      	beq.n	1846c <settings_load_subtree_direct+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18480:	2b00      	cmp	r3, #0
   18482:	d1f3      	bne.n	1846c <settings_load_subtree_direct+0x1c>
   18484:	461c      	mov	r4, r3
   18486:	e7f1      	b.n	1846c <settings_load_subtree_direct+0x1c>
	return z_impl_k_mutex_unlock(mutex);
   18488:	4802      	ldr	r0, [pc, #8]	; (18494 <settings_load_subtree_direct+0x44>)
   1848a:	f019 fafd 	bl	31a88 <z_impl_k_mutex_unlock>
}
   1848e:	2000      	movs	r0, #0
   18490:	b004      	add	sp, #16
   18492:	bd10      	pop	{r4, pc}
   18494:	2000893c 	.word	0x2000893c
   18498:	2000bee0 	.word	0x2000bee0

0001849c <settings_store_init>:
	list->head = NULL;
   1849c:	4b02      	ldr	r3, [pc, #8]	; (184a8 <settings_store_init+0xc>)
   1849e:	2200      	movs	r2, #0
   184a0:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   184a2:	605a      	str	r2, [r3, #4]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   184a4:	4770      	bx	lr
   184a6:	bf00      	nop
   184a8:	2000bee0 	.word	0x2000bee0

000184ac <settings_init>:


void settings_store_init(void);

void settings_init(void)
{
   184ac:	b508      	push	{r3, lr}
	list->head = NULL;
   184ae:	4b03      	ldr	r3, [pc, #12]	; (184bc <settings_init+0x10>)
   184b0:	2200      	movs	r2, #0
   184b2:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   184b4:	605a      	str	r2, [r3, #4]
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   184b6:	f7ff fff1 	bl	1849c <settings_store_init>
}
   184ba:	bd08      	pop	{r3, pc}
   184bc:	2000bee8 	.word	0x2000bee8

000184c0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   184c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   184c2:	b083      	sub	sp, #12
   184c4:	4606      	mov	r6, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   184c6:	460f      	mov	r7, r1
   184c8:	b109      	cbz	r1, 184ce <settings_parse_and_lookup+0xe>
		*next = NULL;
   184ca:	2300      	movs	r3, #0
   184cc:	600b      	str	r3, [r1, #0]
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = ch;
   184ce:	4c2f      	ldr	r4, [pc, #188]	; (1858c <settings_parse_and_lookup+0xcc>)
   184d0:	2500      	movs	r5, #0
   184d2:	e004      	b.n	184de <settings_parse_and_lookup+0x1e>
			if (next) {
   184d4:	b10f      	cbz	r7, 184da <settings_parse_and_lookup+0x1a>
				*next = tmpnext;
   184d6:	9b01      	ldr	r3, [sp, #4]
   184d8:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   184da:	4625      	mov	r5, r4
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   184dc:	3414      	adds	r4, #20
   184de:	4b2c      	ldr	r3, [pc, #176]	; (18590 <settings_parse_and_lookup+0xd0>)
   184e0:	429c      	cmp	r4, r3
   184e2:	d819      	bhi.n	18518 <settings_parse_and_lookup+0x58>
   184e4:	4b2a      	ldr	r3, [pc, #168]	; (18590 <settings_parse_and_lookup+0xd0>)
   184e6:	429c      	cmp	r4, r3
   184e8:	d224      	bcs.n	18534 <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   184ea:	aa01      	add	r2, sp, #4
   184ec:	6821      	ldr	r1, [r4, #0]
   184ee:	4630      	mov	r0, r6
   184f0:	f01f f81a 	bl	37528 <settings_name_steq>
   184f4:	2800      	cmp	r0, #0
   184f6:	d0f1      	beq.n	184dc <settings_parse_and_lookup+0x1c>
		if (!bestmatch) {
   184f8:	2d00      	cmp	r5, #0
   184fa:	d0eb      	beq.n	184d4 <settings_parse_and_lookup+0x14>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   184fc:	2200      	movs	r2, #0
   184fe:	6829      	ldr	r1, [r5, #0]
   18500:	6820      	ldr	r0, [r4, #0]
   18502:	f01f f811 	bl	37528 <settings_name_steq>
   18506:	2800      	cmp	r0, #0
   18508:	d0e8      	beq.n	184dc <settings_parse_and_lookup+0x1c>
			if (next) {
   1850a:	b11f      	cbz	r7, 18514 <settings_parse_and_lookup+0x54>
				*next = tmpnext;
   1850c:	9b01      	ldr	r3, [sp, #4]
   1850e:	603b      	str	r3, [r7, #0]
			bestmatch = ch;
   18510:	4625      	mov	r5, r4
   18512:	e7e3      	b.n	184dc <settings_parse_and_lookup+0x1c>
   18514:	4625      	mov	r5, r4
   18516:	e7e1      	b.n	184dc <settings_parse_and_lookup+0x1c>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   18518:	4c1e      	ldr	r4, [pc, #120]	; (18594 <settings_parse_and_lookup+0xd4>)
   1851a:	2394      	movs	r3, #148	; 0x94
   1851c:	4622      	mov	r2, r4
   1851e:	491e      	ldr	r1, [pc, #120]	; (18598 <settings_parse_and_lookup+0xd8>)
   18520:	481e      	ldr	r0, [pc, #120]	; (1859c <settings_parse_and_lookup+0xdc>)
   18522:	f01d feb7 	bl	36294 <assert_print>
   18526:	481e      	ldr	r0, [pc, #120]	; (185a0 <settings_parse_and_lookup+0xe0>)
   18528:	f01d feb4 	bl	36294 <assert_print>
   1852c:	2194      	movs	r1, #148	; 0x94
   1852e:	4620      	mov	r0, r4
   18530:	f01d fea9 	bl	36286 <assert_post_action>
	return list->head;
   18534:	4b1b      	ldr	r3, [pc, #108]	; (185a4 <settings_parse_and_lookup+0xe4>)
   18536:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   18538:	b13c      	cbz	r4, 1854a <settings_parse_and_lookup+0x8a>
   1853a:	3c14      	subs	r4, #20
   1853c:	e005      	b.n	1854a <settings_parse_and_lookup+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1853e:	f114 0314 	adds.w	r3, r4, #20
   18542:	d017      	beq.n	18574 <settings_parse_and_lookup+0xb4>
	return node->next;
   18544:	6964      	ldr	r4, [r4, #20]
   18546:	b104      	cbz	r4, 1854a <settings_parse_and_lookup+0x8a>
   18548:	3c14      	subs	r4, #20
   1854a:	b1e4      	cbz	r4, 18586 <settings_parse_and_lookup+0xc6>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   1854c:	aa01      	add	r2, sp, #4
   1854e:	6821      	ldr	r1, [r4, #0]
   18550:	4630      	mov	r0, r6
   18552:	f01e ffe9 	bl	37528 <settings_name_steq>
   18556:	2800      	cmp	r0, #0
   18558:	d0f1      	beq.n	1853e <settings_parse_and_lookup+0x7e>
			continue;
		}
		if (!bestmatch) {
   1855a:	b16d      	cbz	r5, 18578 <settings_parse_and_lookup+0xb8>
			if (next) {
				*next = tmpnext;
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   1855c:	2200      	movs	r2, #0
   1855e:	6829      	ldr	r1, [r5, #0]
   18560:	6820      	ldr	r0, [r4, #0]
   18562:	f01e ffe1 	bl	37528 <settings_name_steq>
   18566:	2800      	cmp	r0, #0
   18568:	d0ec      	beq.n	18544 <settings_parse_and_lookup+0x84>
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   1856a:	b157      	cbz	r7, 18582 <settings_parse_and_lookup+0xc2>
				*next = tmpnext;
   1856c:	9b01      	ldr	r3, [sp, #4]
   1856e:	603b      	str	r3, [r7, #0]
   18570:	4625      	mov	r5, r4
   18572:	e7e7      	b.n	18544 <settings_parse_and_lookup+0x84>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   18574:	461c      	mov	r4, r3
   18576:	e7e8      	b.n	1854a <settings_parse_and_lookup+0x8a>
			if (next) {
   18578:	b10f      	cbz	r7, 1857e <settings_parse_and_lookup+0xbe>
				*next = tmpnext;
   1857a:	9b01      	ldr	r3, [sp, #4]
   1857c:	603b      	str	r3, [r7, #0]
			continue;
   1857e:	4625      	mov	r5, r4
   18580:	e7e0      	b.n	18544 <settings_parse_and_lookup+0x84>
   18582:	4625      	mov	r5, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   18584:	e7de      	b.n	18544 <settings_parse_and_lookup+0x84>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   18586:	4628      	mov	r0, r5
   18588:	b003      	add	sp, #12
   1858a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1858c:	0003f530 	.word	0x0003f530
   18590:	0003f5a8 	.word	0x0003f5a8
   18594:	00041438 	.word	0x00041438
   18598:	0004146c 	.word	0x0004146c
   1859c:	0003f72c 	.word	0x0003f72c
   185a0:	00040eb4 	.word	0x00040eb4
   185a4:	2000bee8 	.word	0x2000bee8

000185a8 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   185a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   185ac:	b086      	sub	sp, #24
   185ae:	af02      	add	r7, sp, #8
   185b0:	4604      	mov	r4, r0
   185b2:	460e      	mov	r6, r1
   185b4:	4690      	mov	r8, r2
   185b6:	4699      	mov	r9, r3
   185b8:	6b3d      	ldr	r5, [r7, #48]	; 0x30
	int rc;
	const char *name_key = name;
   185ba:	60f8      	str	r0, [r7, #12]

	if (load_arg && load_arg->subtree &&
   185bc:	b1b5      	cbz	r5, 185ec <settings_call_set_handler+0x44>
   185be:	6829      	ldr	r1, [r5, #0]
   185c0:	b121      	cbz	r1, 185cc <settings_call_set_handler+0x24>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   185c2:	f107 020c 	add.w	r2, r7, #12
   185c6:	f01e ffaf 	bl	37528 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   185ca:	b158      	cbz	r0, 185e4 <settings_call_set_handler+0x3c>
		return 0;
	}

	if (load_arg && load_arg->cb) {
   185cc:	f8d5 a004 	ldr.w	sl, [r5, #4]
   185d0:	f1ba 0f00 	cmp.w	sl, #0
   185d4:	d00a      	beq.n	185ec <settings_call_set_handler+0x44>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
				  load_arg->param);
   185d6:	68ab      	ldr	r3, [r5, #8]
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   185d8:	68f8      	ldr	r0, [r7, #12]
   185da:	9300      	str	r3, [sp, #0]
   185dc:	464b      	mov	r3, r9
   185de:	4642      	mov	r2, r8
   185e0:	4631      	mov	r1, r6
   185e2:	47d0      	blx	sl
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   185e4:	3710      	adds	r7, #16
   185e6:	46bd      	mov	sp, r7
   185e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ch = settings_parse_and_lookup(name, &name_key);
   185ec:	f107 010c 	add.w	r1, r7, #12
   185f0:	4620      	mov	r0, r4
   185f2:	f7ff ff65 	bl	184c0 <settings_parse_and_lookup>
		if (!ch) {
   185f6:	2800      	cmp	r0, #0
   185f8:	d063      	beq.n	186c2 <settings_call_set_handler+0x11a>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   185fa:	6885      	ldr	r5, [r0, #8]
   185fc:	464b      	mov	r3, r9
   185fe:	4642      	mov	r2, r8
   18600:	4631      	mov	r1, r6
   18602:	68f8      	ldr	r0, [r7, #12]
   18604:	47a8      	blx	r5
		if (rc != 0) {
   18606:	2800      	cmp	r0, #0
   18608:	d0ec      	beq.n	185e4 <settings_call_set_handler+0x3c>
			LOG_ERR("set-value failure. key: %s error(%d)",
   1860a:	466d      	mov	r5, sp
   1860c:	2300      	movs	r3, #0
   1860e:	723b      	strb	r3, [r7, #8]
   18610:	2302      	movs	r3, #2
   18612:	727b      	strb	r3, [r7, #9]
   18614:	b08a      	sub	sp, #40	; 0x28
   18616:	ae02      	add	r6, sp, #8
   18618:	f116 0210 	adds.w	r2, r6, #16
   1861c:	d018      	beq.n	18650 <settings_call_set_handler+0xa8>
   1861e:	f04f 0c12 	mov.w	ip, #18
   18622:	b122      	cbz	r2, 1862e <settings_call_set_handler+0x86>
   18624:	f1bc 0f04 	cmp.w	ip, #4
   18628:	dd01      	ble.n	1862e <settings_call_set_handler+0x86>
   1862a:	4b27      	ldr	r3, [pc, #156]	; (186c8 <settings_call_set_handler+0x120>)
   1862c:	6173      	str	r3, [r6, #20]
   1862e:	2300      	movs	r3, #0
   18630:	713b      	strb	r3, [r7, #4]
   18632:	2302      	movs	r3, #2
   18634:	717b      	strb	r3, [r7, #5]
   18636:	b1c2      	cbz	r2, 1866a <settings_call_set_handler+0xc2>
   18638:	4663      	mov	r3, ip
   1863a:	f1bc 0f08 	cmp.w	ip, #8
   1863e:	dd00      	ble.n	18642 <settings_call_set_handler+0x9a>
   18640:	61b4      	str	r4, [r6, #24]
   18642:	2b0c      	cmp	r3, #12
   18644:	dd00      	ble.n	18648 <settings_call_set_handler+0xa0>
   18646:	61f0      	str	r0, [r6, #28]
   18648:	f106 0320 	add.w	r3, r6, #32
   1864c:	2100      	movs	r1, #0
   1864e:	e00a      	b.n	18666 <settings_call_set_handler+0xbe>
   18650:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   18654:	e7e5      	b.n	18622 <settings_call_set_handler+0x7a>
   18656:	f101 0010 	add.w	r0, r1, #16
   1865a:	4438      	add	r0, r7
   1865c:	f810 0c0c 	ldrb.w	r0, [r0, #-12]
   18660:	f803 0b01 	strb.w	r0, [r3], #1
   18664:	3101      	adds	r1, #1
   18666:	2901      	cmp	r1, #1
   18668:	d9f5      	bls.n	18656 <settings_call_set_handler+0xae>
   1866a:	f1bc 0f11 	cmp.w	ip, #17
   1866e:	dd25      	ble.n	186bc <settings_call_set_handler+0x114>
   18670:	2312      	movs	r3, #18
   18672:	b142      	cbz	r2, 18686 <settings_call_set_handler+0xde>
   18674:	2104      	movs	r1, #4
   18676:	7239      	strb	r1, [r7, #8]
   18678:	2100      	movs	r1, #0
   1867a:	7279      	strb	r1, [r7, #9]
   1867c:	72b9      	strb	r1, [r7, #10]
   1867e:	2101      	movs	r1, #1
   18680:	72f9      	strb	r1, [r7, #11]
   18682:	68b8      	ldr	r0, [r7, #8]
   18684:	6130      	str	r0, [r6, #16]
   18686:	2100      	movs	r1, #0
   18688:	f36f 0100 	bfc	r1, #0, #1
   1868c:	f36f 0141 	bfc	r1, #1, #1
   18690:	f36f 0182 	bfc	r1, #2, #1
   18694:	f36f 01c5 	bfc	r1, #3, #3
   18698:	2001      	movs	r0, #1
   1869a:	f360 1188 	bfi	r1, r0, #6, #3
   1869e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   186a2:	f363 2152 	bfi	r1, r3, #9, #10
   186a6:	f36f 41de 	bfc	r1, #19, #12
   186aa:	f36f 71df 	bfc	r1, #31, #1
   186ae:	2300      	movs	r3, #0
   186b0:	4806      	ldr	r0, [pc, #24]	; (186cc <settings_call_set_handler+0x124>)
   186b2:	f7fe f94b 	bl	1694c <z_impl_z_log_msg_static_create>
   186b6:	46ad      	mov	sp, r5
			rc = 0;
   186b8:	2000      	movs	r0, #0
   186ba:	e793      	b.n	185e4 <settings_call_set_handler+0x3c>
			LOG_ERR("set-value failure. key: %s error(%d)",
   186bc:	f06f 031b 	mvn.w	r3, #27
   186c0:	e7d7      	b.n	18672 <settings_call_set_handler+0xca>
			return 0;
   186c2:	2000      	movs	r0, #0
   186c4:	e78e      	b.n	185e4 <settings_call_set_handler+0x3c>
   186c6:	bf00      	nop
   186c8:	00041494 	.word	0x00041494
   186cc:	0003f4a8 	.word	0x0003f4a8

000186d0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   186d0:	b570      	push	{r4, r5, r6, lr}
   186d2:	4605      	mov	r5, r0
	int rc;
	int rc2;

	rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   186d4:	4c23      	ldr	r4, [pc, #140]	; (18764 <settings_commit_subtree+0x94>)
	rc = 0;
   186d6:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   186d8:	e000      	b.n	186dc <settings_commit_subtree+0xc>
   186da:	3414      	adds	r4, #20
   186dc:	4b22      	ldr	r3, [pc, #136]	; (18768 <settings_commit_subtree+0x98>)
   186de:	429c      	cmp	r4, r3
   186e0:	d812      	bhi.n	18708 <settings_commit_subtree+0x38>
   186e2:	4b21      	ldr	r3, [pc, #132]	; (18768 <settings_commit_subtree+0x98>)
   186e4:	429c      	cmp	r4, r3
   186e6:	d21d      	bcs.n	18724 <settings_commit_subtree+0x54>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   186e8:	b135      	cbz	r5, 186f8 <settings_commit_subtree+0x28>
   186ea:	2200      	movs	r2, #0
   186ec:	4629      	mov	r1, r5
   186ee:	6820      	ldr	r0, [r4, #0]
   186f0:	f01e ff1a 	bl	37528 <settings_name_steq>
   186f4:	2800      	cmp	r0, #0
   186f6:	d0f0      	beq.n	186da <settings_commit_subtree+0xa>
			continue;
		}
		if (ch->h_commit) {
   186f8:	68e3      	ldr	r3, [r4, #12]
   186fa:	2b00      	cmp	r3, #0
   186fc:	d0ed      	beq.n	186da <settings_commit_subtree+0xa>
			rc2 = ch->h_commit();
   186fe:	4798      	blx	r3
			if (!rc) {
   18700:	2e00      	cmp	r6, #0
   18702:	d1ea      	bne.n	186da <settings_commit_subtree+0xa>
				rc = rc2;
   18704:	4606      	mov	r6, r0
   18706:	e7e8      	b.n	186da <settings_commit_subtree+0xa>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   18708:	4c18      	ldr	r4, [pc, #96]	; (1876c <settings_commit_subtree+0x9c>)
   1870a:	23f4      	movs	r3, #244	; 0xf4
   1870c:	4622      	mov	r2, r4
   1870e:	4918      	ldr	r1, [pc, #96]	; (18770 <settings_commit_subtree+0xa0>)
   18710:	4818      	ldr	r0, [pc, #96]	; (18774 <settings_commit_subtree+0xa4>)
   18712:	f01d fdbf 	bl	36294 <assert_print>
   18716:	4818      	ldr	r0, [pc, #96]	; (18778 <settings_commit_subtree+0xa8>)
   18718:	f01d fdbc 	bl	36294 <assert_print>
   1871c:	21f4      	movs	r1, #244	; 0xf4
   1871e:	4620      	mov	r0, r4
   18720:	f01d fdb1 	bl	36286 <assert_post_action>
	return list->head;
   18724:	4b15      	ldr	r3, [pc, #84]	; (1877c <settings_commit_subtree+0xac>)
   18726:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   18728:	b13c      	cbz	r4, 1873a <settings_commit_subtree+0x6a>
   1872a:	3c14      	subs	r4, #20
   1872c:	e005      	b.n	1873a <settings_commit_subtree+0x6a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1872e:	f114 0314 	adds.w	r3, r4, #20
   18732:	d013      	beq.n	1875c <settings_commit_subtree+0x8c>
	return node->next;
   18734:	6964      	ldr	r4, [r4, #20]
   18736:	b104      	cbz	r4, 1873a <settings_commit_subtree+0x6a>
   18738:	3c14      	subs	r4, #20
   1873a:	b18c      	cbz	r4, 18760 <settings_commit_subtree+0x90>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   1873c:	b135      	cbz	r5, 1874c <settings_commit_subtree+0x7c>
   1873e:	2200      	movs	r2, #0
   18740:	4629      	mov	r1, r5
   18742:	6820      	ldr	r0, [r4, #0]
   18744:	f01e fef0 	bl	37528 <settings_name_steq>
   18748:	2800      	cmp	r0, #0
   1874a:	d0f0      	beq.n	1872e <settings_commit_subtree+0x5e>
			continue;
		}
		if (ch->h_commit) {
   1874c:	68e3      	ldr	r3, [r4, #12]
   1874e:	2b00      	cmp	r3, #0
   18750:	d0f0      	beq.n	18734 <settings_commit_subtree+0x64>
			rc2 = ch->h_commit();
   18752:	4798      	blx	r3
			if (!rc) {
   18754:	2e00      	cmp	r6, #0
   18756:	d1ed      	bne.n	18734 <settings_commit_subtree+0x64>
				rc = rc2;
   18758:	4606      	mov	r6, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1875a:	e7eb      	b.n	18734 <settings_commit_subtree+0x64>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   1875c:	461c      	mov	r4, r3
   1875e:	e7ec      	b.n	1873a <settings_commit_subtree+0x6a>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   18760:	4630      	mov	r0, r6
   18762:	bd70      	pop	{r4, r5, r6, pc}
   18764:	0003f530 	.word	0x0003f530
   18768:	0003f5a8 	.word	0x0003f5a8
   1876c:	00041438 	.word	0x00041438
   18770:	0004146c 	.word	0x0004146c
   18774:	0003f72c 	.word	0x0003f72c
   18778:	00040eb4 	.word	0x00040eb4
   1877c:	2000bee8 	.word	0x2000bee8

00018780 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   18780:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   18782:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1878a:	480b      	ldr	r0, [pc, #44]	; (187b8 <settings_subsys_init+0x38>)
   1878c:	f019 f866 	bl	3185c <z_impl_k_mutex_lock>

	int err = 0;

	k_mutex_lock(&settings_lock, K_FOREVER);

	if (!settings_subsys_initialized) {
   18790:	4b0a      	ldr	r3, [pc, #40]	; (187bc <settings_subsys_init+0x3c>)
   18792:	781b      	ldrb	r3, [r3, #0]
   18794:	b12b      	cbz	r3, 187a2 <settings_subsys_init+0x22>
	int err = 0;
   18796:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   18798:	4807      	ldr	r0, [pc, #28]	; (187b8 <settings_subsys_init+0x38>)
   1879a:	f019 f975 	bl	31a88 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&settings_lock);

	return err;
}
   1879e:	4620      	mov	r0, r4
   187a0:	bd10      	pop	{r4, pc}
		settings_init();
   187a2:	f7ff fe83 	bl	184ac <settings_init>
		err = settings_backend_init(); /* func rises kernel panic once error */
   187a6:	f000 f87d 	bl	188a4 <settings_backend_init>
		if (!err) {
   187aa:	4604      	mov	r4, r0
   187ac:	2800      	cmp	r0, #0
   187ae:	d1f3      	bne.n	18798 <settings_subsys_init+0x18>
			settings_subsys_initialized = true;
   187b0:	4b02      	ldr	r3, [pc, #8]	; (187bc <settings_subsys_init+0x3c>)
   187b2:	2201      	movs	r2, #1
   187b4:	701a      	strb	r2, [r3, #0]
   187b6:	e7ef      	b.n	18798 <settings_subsys_init+0x18>
   187b8:	2000893c 	.word	0x2000893c
   187bc:	2000cab2 	.word	0x2000cab2

000187c0 <settings_nvs_load>:
}
#endif /* CONFIG_SETTINGS_NVS_NAME_CACHE */

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   187c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   187c4:	b098      	sub	sp, #96	; 0x60
   187c6:	4680      	mov	r8, r0
   187c8:	4689      	mov	r9, r1
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
   187ca:	8f04      	ldrh	r4, [r0, #56]	; 0x38
   187cc:	3401      	adds	r4, #1
   187ce:	b2a4      	uxth	r4, r4
	int ret = 0;
   187d0:	f04f 0a00 	mov.w	sl, #0
   187d4:	e00e      	b.n	187f4 <settings_nvs_load+0x34>
		 */
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
			       &buf, sizeof(buf));

		if ((rc1 <= 0) && (rc2 <= 0)) {
   187d6:	2800      	cmp	r0, #0
   187d8:	dd0b      	ble.n	187f2 <settings_nvs_load+0x32>
			/* Settings item is not stored correctly in the NVS.
			 * NVS entry for its name or value is either missing
			 * or deleted. Clean dirty entries to make space for
			 * future settings item.
			 */
			if (name_id == cf->last_name_id) {
   187da:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
   187de:	42ab      	cmp	r3, r5
   187e0:	d03e      	beq.n	18860 <settings_nvs_load+0xa0>
				cf->last_name_id--;
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
					  &cf->last_name_id, sizeof(uint16_t));
			}
			nvs_delete(&cf->cf_nvs, name_id);
   187e2:	4629      	mov	r1, r5
   187e4:	4638      	mov	r0, r7
   187e6:	f01e fada 	bl	36d9e <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
   187ea:	4621      	mov	r1, r4
   187ec:	4638      	mov	r0, r7
   187ee:	f01e fad6 	bl	36d9e <nvs_delete>
{
   187f2:	462c      	mov	r4, r5
		name_id--;
   187f4:	1e65      	subs	r5, r4, #1
   187f6:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
   187f8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   187fc:	d02c      	beq.n	18858 <settings_nvs_load+0x98>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
   187fe:	f108 0708 	add.w	r7, r8, #8
   18802:	234a      	movs	r3, #74	; 0x4a
   18804:	aa03      	add	r2, sp, #12
   18806:	4629      	mov	r1, r5
   18808:	4638      	mov	r0, r7
   1880a:	f01e face 	bl	36daa <nvs_read>
   1880e:	4606      	mov	r6, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
   18810:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
   18814:	343f      	adds	r4, #63	; 0x3f
   18816:	b2a4      	uxth	r4, r4
   18818:	2301      	movs	r3, #1
   1881a:	f10d 020b 	add.w	r2, sp, #11
   1881e:	4621      	mov	r1, r4
   18820:	4638      	mov	r0, r7
   18822:	f01e fac2 	bl	36daa <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
   18826:	2e00      	cmp	r6, #0
   18828:	ddd5      	ble.n	187d6 <settings_nvs_load+0x16>
		if ((rc1 <= 0) || (rc2 <= 0)) {
   1882a:	2800      	cmp	r0, #0
   1882c:	ddd5      	ble.n	187da <settings_nvs_load+0x1a>
			continue;
		}

		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
   1882e:	f106 0360 	add.w	r3, r6, #96	; 0x60
   18832:	eb0d 0603 	add.w	r6, sp, r3
   18836:	2300      	movs	r3, #0
   18838:	f806 3c54 	strb.w	r3, [r6, #-84]
		read_fn_arg.fs = &cf->cf_nvs;
   1883c:	9716      	str	r7, [sp, #88]	; 0x58
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
   1883e:	f8ad 405c 	strh.w	r4, [sp, #92]	; 0x5c

#if CONFIG_SETTINGS_NVS_NAME_CACHE
		settings_nvs_cache_add(cf, name, name_id);
#endif

		ret = settings_call_set_handler(
   18842:	f8cd 9000 	str.w	r9, [sp]
   18846:	ab16      	add	r3, sp, #88	; 0x58
   18848:	4a0b      	ldr	r2, [pc, #44]	; (18878 <settings_nvs_load+0xb8>)
   1884a:	4601      	mov	r1, r0
   1884c:	a803      	add	r0, sp, #12
   1884e:	f7ff feab 	bl	185a8 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
   18852:	4682      	mov	sl, r0
   18854:	2800      	cmp	r0, #0
   18856:	d0cc      	beq.n	187f2 <settings_nvs_load+0x32>
			break;
		}
	}
	return ret;
}
   18858:	4650      	mov	r0, sl
   1885a:	b018      	add	sp, #96	; 0x60
   1885c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				cf->last_name_id--;
   18860:	3b01      	subs	r3, #1
   18862:	4642      	mov	r2, r8
   18864:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   18868:	2302      	movs	r3, #2
   1886a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1886e:	4638      	mov	r0, r7
   18870:	f7fe ffec 	bl	1784c <nvs_write>
   18874:	e7b5      	b.n	187e2 <settings_nvs_load+0x22>
   18876:	bf00      	nop
   18878:	000375b9 	.word	0x000375b9

0001887c <settings_nvs_src>:
{
   1887c:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   1887e:	4b03      	ldr	r3, [pc, #12]	; (1888c <settings_nvs_src+0x10>)
   18880:	6043      	str	r3, [r0, #4]
	settings_src_register(&cf->cf_store);
   18882:	f7ff fda1 	bl	183c8 <settings_src_register>
}
   18886:	2000      	movs	r0, #0
   18888:	bd08      	pop	{r3, pc}
   1888a:	bf00      	nop
   1888c:	20008354 	.word	0x20008354

00018890 <settings_nvs_dst>:
{
   18890:	b508      	push	{r3, lr}
	cf->cf_store.cs_itf = &settings_nvs_itf;
   18892:	4b03      	ldr	r3, [pc, #12]	; (188a0 <settings_nvs_dst+0x10>)
   18894:	6043      	str	r3, [r0, #4]
	settings_dst_register(&cf->cf_store);
   18896:	f7ff fda7 	bl	183e8 <settings_dst_register>
}
   1889a:	2000      	movs	r0, #0
   1889c:	bd08      	pop	{r3, pc}
   1889e:	bf00      	nop
   188a0:	20008354 	.word	0x20008354

000188a4 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
   188a4:	b510      	push	{r4, lr}
   188a6:	b084      	sub	sp, #16
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
   188a8:	2301      	movs	r3, #1
   188aa:	9300      	str	r3, [sp, #0]

	rc = flash_area_open(SETTINGS_PARTITION, &fa);
   188ac:	a903      	add	r1, sp, #12
   188ae:	2005      	movs	r0, #5
   188b0:	f7ff fd3c 	bl	1832c <flash_area_open>
	if (rc) {
   188b4:	4603      	mov	r3, r0
   188b6:	b110      	cbz	r0, 188be <settings_backend_init+0x1a>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
   188b8:	4618      	mov	r0, r3
   188ba:	b004      	add	sp, #16
   188bc:	bd10      	pop	{r4, pc}
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &sector_cnt,
   188be:	aa01      	add	r2, sp, #4
   188c0:	4669      	mov	r1, sp
   188c2:	2005      	movs	r0, #5
   188c4:	f7ff fd4e 	bl	18364 <flash_area_get_sectors>
   188c8:	4603      	mov	r3, r0
	if (rc == -ENODEV) {
   188ca:	f110 0f13 	cmn.w	r0, #19
   188ce:	d0f3      	beq.n	188b8 <settings_backend_init+0x14>
	} else if (rc != 0 && rc != -ENOMEM) {
   188d0:	b140      	cbz	r0, 188e4 <settings_backend_init+0x40>
   188d2:	f110 0f0c 	cmn.w	r0, #12
   188d6:	d005      	beq.n	188e4 <settings_backend_init+0x40>
		k_panic();
   188d8:	4040      	eors	r0, r0
   188da:	f380 8811 	msr	BASEPRI, r0
   188de:	f04f 0004 	mov.w	r0, #4
   188e2:	df02      	svc	2
	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
   188e4:	9c02      	ldr	r4, [sp, #8]
	if (nvs_sector_size > UINT16_MAX) {
   188e6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   188ea:	d223      	bcs.n	18934 <settings_backend_init+0x90>
	size_t nvs_sector_size, nvs_size = 0;
   188ec:	2200      	movs	r2, #0
	uint16_t cnt = 0;
   188ee:	4613      	mov	r3, r2
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
   188f0:	2b07      	cmp	r3, #7
   188f2:	d807      	bhi.n	18904 <settings_backend_init+0x60>
		nvs_size += nvs_sector_size;
   188f4:	4422      	add	r2, r4
		if (nvs_size > fa->fa_size) {
   188f6:	9903      	ldr	r1, [sp, #12]
   188f8:	6889      	ldr	r1, [r1, #8]
   188fa:	4291      	cmp	r1, r2
   188fc:	d302      	bcc.n	18904 <settings_backend_init+0x60>
		cnt++;
   188fe:	3301      	adds	r3, #1
   18900:	b29b      	uxth	r3, r3
   18902:	e7f5      	b.n	188f0 <settings_backend_init+0x4c>
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
   18904:	480d      	ldr	r0, [pc, #52]	; (1893c <settings_backend_init+0x98>)
   18906:	8284      	strh	r4, [r0, #20]
	default_settings_nvs.cf_nvs.sector_count = cnt;
   18908:	82c3      	strh	r3, [r0, #22]
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
   1890a:	9b03      	ldr	r3, [sp, #12]
   1890c:	685a      	ldr	r2, [r3, #4]
   1890e:	6082      	str	r2, [r0, #8]
	default_settings_nvs.flash_dev = fa->fa_dev;
   18910:	68db      	ldr	r3, [r3, #12]
   18912:	63c3      	str	r3, [r0, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
   18914:	f01e fefc 	bl	37710 <settings_nvs_backend_init>
	if (rc) {
   18918:	4603      	mov	r3, r0
   1891a:	2800      	cmp	r0, #0
   1891c:	d1cc      	bne.n	188b8 <settings_backend_init+0x14>
	rc = settings_nvs_src(&default_settings_nvs);
   1891e:	4807      	ldr	r0, [pc, #28]	; (1893c <settings_backend_init+0x98>)
   18920:	f7ff ffac 	bl	1887c <settings_nvs_src>
	if (rc) {
   18924:	4603      	mov	r3, r0
   18926:	2800      	cmp	r0, #0
   18928:	d1c6      	bne.n	188b8 <settings_backend_init+0x14>
	rc = settings_nvs_dst(&default_settings_nvs);
   1892a:	4804      	ldr	r0, [pc, #16]	; (1893c <settings_backend_init+0x98>)
   1892c:	f7ff ffb0 	bl	18890 <settings_nvs_dst>
   18930:	4603      	mov	r3, r0
	return rc;
   18932:	e7c1      	b.n	188b8 <settings_backend_init+0x14>
		return -EDOM;
   18934:	f06f 0320 	mvn.w	r3, #32
   18938:	e7be      	b.n	188b8 <settings_backend_init+0x14>
   1893a:	bf00      	nop
   1893c:	2000bef0 	.word	0x2000bef0

00018940 <pm_exit_pos_ops>:
}
#endif  /* !CONFIG_PM_DEVICE_RUNTIME_EXCLUSIVE */
#endif	/* CONFIG_PM_DEVICE */

static inline void pm_exit_pos_ops(struct pm_state_info *info)
{
   18940:	b508      	push	{r3, lr}
	extern __weak void
		pm_state_exit_post_ops(enum pm_state state, uint8_t substate_id);

	if (pm_state_exit_post_ops != NULL) {
   18942:	4b06      	ldr	r3, [pc, #24]	; (1895c <pm_exit_pos_ops+0x1c>)
   18944:	b123      	cbz	r3, 18950 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
   18946:	7841      	ldrb	r1, [r0, #1]
   18948:	7800      	ldrb	r0, [r0, #0]
   1894a:	f01d fdbe 	bl	364ca <pm_state_exit_post_ops>
		 * The kernel expects that irqs are unlocked after this.
		 */

		irq_unlock(0);
	}
}
   1894e:	bd08      	pop	{r3, pc}
   18950:	2300      	movs	r3, #0
   18952:	f383 8811 	msr	BASEPRI, r3
   18956:	f3bf 8f6f 	isb	sy
   1895a:	e7f8      	b.n	1894e <pm_exit_pos_ops+0xe>
   1895c:	000364cb 	.word	0x000364cb

00018960 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   18960:	b570      	push	{r4, r5, r6, lr}
   18962:	4605      	mov	r5, r0
	__asm__ volatile(
   18964:	f04f 0320 	mov.w	r3, #32
   18968:	f3ef 8611 	mrs	r6, BASEPRI
   1896c:	f383 8812 	msr	BASEPRI_MAX, r3
   18970:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18974:	4822      	ldr	r0, [pc, #136]	; (18a00 <pm_state_notify+0xa0>)
   18976:	f018 fd41 	bl	313fc <z_spin_lock_valid>
   1897a:	b128      	cbz	r0, 18988 <pm_state_notify+0x28>
	z_spin_lock_set_owner(l);
   1897c:	4820      	ldr	r0, [pc, #128]	; (18a00 <pm_state_notify+0xa0>)
   1897e:	f018 fd5d 	bl	3143c <z_spin_lock_set_owner>
	return list->head;
   18982:	4b20      	ldr	r3, [pc, #128]	; (18a04 <pm_state_notify+0xa4>)
   18984:	681c      	ldr	r4, [r3, #0]
   18986:	e01c      	b.n	189c2 <pm_state_notify+0x62>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18988:	4c1f      	ldr	r4, [pc, #124]	; (18a08 <pm_state_notify+0xa8>)
   1898a:	2394      	movs	r3, #148	; 0x94
   1898c:	4622      	mov	r2, r4
   1898e:	491f      	ldr	r1, [pc, #124]	; (18a0c <pm_state_notify+0xac>)
   18990:	481f      	ldr	r0, [pc, #124]	; (18a10 <pm_state_notify+0xb0>)
   18992:	f01d fc7f 	bl	36294 <assert_print>
   18996:	491a      	ldr	r1, [pc, #104]	; (18a00 <pm_state_notify+0xa0>)
   18998:	481e      	ldr	r0, [pc, #120]	; (18a14 <pm_state_notify+0xb4>)
   1899a:	f01d fc7b 	bl	36294 <assert_print>
   1899e:	2194      	movs	r1, #148	; 0x94
   189a0:	4620      	mov	r0, r4
   189a2:	f01d fc70 	bl	36286 <assert_post_action>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
   189a6:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
   189a8:	b13a      	cbz	r2, 189ba <pm_state_notify+0x5a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   189aa:	4b1b      	ldr	r3, [pc, #108]	; (18a18 <pm_state_notify+0xb8>)
   189ac:	7d1b      	ldrb	r3, [r3, #20]
   189ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   189b2:	491a      	ldr	r1, [pc, #104]	; (18a1c <pm_state_notify+0xbc>)
   189b4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   189b8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   189ba:	4623      	mov	r3, r4
	return node->next;
   189bc:	6824      	ldr	r4, [r4, #0]
   189be:	b104      	cbz	r4, 189c2 <pm_state_notify+0x62>
Z_GENLIST_PEEK_NEXT(slist, snode)
   189c0:	b123      	cbz	r3, 189cc <pm_state_notify+0x6c>
   189c2:	b12c      	cbz	r4, 189d0 <pm_state_notify+0x70>
		if (entering_state) {
   189c4:	2d00      	cmp	r5, #0
   189c6:	d0ee      	beq.n	189a6 <pm_state_notify+0x46>
			callback = notifier->state_entry;
   189c8:	6862      	ldr	r2, [r4, #4]
   189ca:	e7ed      	b.n	189a8 <pm_state_notify+0x48>
   189cc:	461c      	mov	r4, r3
   189ce:	e7f8      	b.n	189c2 <pm_state_notify+0x62>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   189d0:	480b      	ldr	r0, [pc, #44]	; (18a00 <pm_state_notify+0xa0>)
   189d2:	f018 fd23 	bl	3141c <z_spin_unlock_valid>
   189d6:	b120      	cbz	r0, 189e2 <pm_state_notify+0x82>
	__asm__ volatile(
   189d8:	f386 8811 	msr	BASEPRI, r6
   189dc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   189e0:	bd70      	pop	{r4, r5, r6, pc}
   189e2:	4c09      	ldr	r4, [pc, #36]	; (18a08 <pm_state_notify+0xa8>)
   189e4:	23c2      	movs	r3, #194	; 0xc2
   189e6:	4622      	mov	r2, r4
   189e8:	490d      	ldr	r1, [pc, #52]	; (18a20 <pm_state_notify+0xc0>)
   189ea:	4809      	ldr	r0, [pc, #36]	; (18a10 <pm_state_notify+0xb0>)
   189ec:	f01d fc52 	bl	36294 <assert_print>
   189f0:	4903      	ldr	r1, [pc, #12]	; (18a00 <pm_state_notify+0xa0>)
   189f2:	480c      	ldr	r0, [pc, #48]	; (18a24 <pm_state_notify+0xc4>)
   189f4:	f01d fc4e 	bl	36294 <assert_print>
   189f8:	21c2      	movs	r1, #194	; 0xc2
   189fa:	4620      	mov	r0, r4
   189fc:	f01d fc43 	bl	36286 <assert_post_action>
   18a00:	2000bf30 	.word	0x2000bf30
   18a04:	2000bf50 	.word	0x2000bf50
   18a08:	00040b28 	.word	0x00040b28
   18a0c:	00040b88 	.word	0x00040b88
   18a10:	0003f72c 	.word	0x0003f72c
   18a14:	00040ba0 	.word	0x00040ba0
   18a18:	2000ca40 	.word	0x2000ca40
   18a1c:	2000bf44 	.word	0x2000bf44
   18a20:	00040b58 	.word	0x00040b58
   18a24:	00040b70 	.word	0x00040b70

00018a28 <pm_system_resume>:

void pm_system_resume(void)
{
   18a28:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   18a2a:	4b0e      	ldr	r3, [pc, #56]	; (18a64 <pm_system_resume+0x3c>)
   18a2c:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   18a2e:	4621      	mov	r1, r4
   18a30:	480d      	ldr	r0, [pc, #52]	; (18a68 <pm_system_resume+0x40>)
   18a32:	f01e fe92 	bl	3775a <atomic_test_and_clear_bit>
   18a36:	b900      	cbnz	r0, 18a3a <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
   18a38:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
   18a3a:	0065      	lsls	r5, r4, #1
   18a3c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18a40:	4e0a      	ldr	r6, [pc, #40]	; (18a6c <pm_system_resume+0x44>)
   18a42:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   18a46:	f7ff ff7b 	bl	18940 <pm_exit_pos_ops>
		pm_state_notify(false);
   18a4a:	2000      	movs	r0, #0
   18a4c:	f7ff ff88 	bl	18960 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   18a50:	192b      	adds	r3, r5, r4
   18a52:	0099      	lsls	r1, r3, #2
   18a54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   18a58:	2200      	movs	r2, #0
   18a5a:	5072      	str	r2, [r6, r1]
   18a5c:	605a      	str	r2, [r3, #4]
   18a5e:	609a      	str	r2, [r3, #8]
}
   18a60:	e7ea      	b.n	18a38 <pm_system_resume+0x10>
   18a62:	bf00      	nop
   18a64:	2000ca40 	.word	0x2000ca40
   18a68:	2000bf58 	.word	0x2000bf58
   18a6c:	2000bf44 	.word	0x2000bf44

00018a70 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   18a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a72:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
   18a74:	4b4f      	ldr	r3, [pc, #316]	; (18bb4 <pm_system_suspend+0x144>)
   18a76:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
   18a78:	f04f 0320 	mov.w	r3, #32
   18a7c:	f3ef 8611 	mrs	r6, BASEPRI
   18a80:	f383 8812 	msr	BASEPRI_MAX, r3
   18a84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18a88:	484b      	ldr	r0, [pc, #300]	; (18bb8 <pm_system_suspend+0x148>)
   18a8a:	f018 fcb7 	bl	313fc <z_spin_lock_valid>
   18a8e:	2800      	cmp	r0, #0
   18a90:	d04b      	beq.n	18b2a <pm_system_suspend+0xba>
	z_spin_lock_set_owner(l);
   18a92:	4849      	ldr	r0, [pc, #292]	; (18bb8 <pm_system_suspend+0x148>)
   18a94:	f018 fcd2 	bl	3143c <z_spin_lock_set_owner>
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   18a98:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18a9c:	4a47      	ldr	r2, [pc, #284]	; (18bbc <pm_system_suspend+0x14c>)
   18a9e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   18aa2:	2b00      	cmp	r3, #0
   18aa4:	d050      	beq.n	18b48 <pm_system_suspend+0xd8>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   18aa6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   18aaa:	4b45      	ldr	r3, [pc, #276]	; (18bc0 <pm_system_suspend+0x150>)
   18aac:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   18ab0:	4f42      	ldr	r7, [pc, #264]	; (18bbc <pm_system_suspend+0x14c>)
   18ab2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   18ab6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
   18aba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   18abe:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   18ac2:	2300      	movs	r3, #0
   18ac4:	f807 300e 	strb.w	r3, [r7, lr]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18ac8:	483b      	ldr	r0, [pc, #236]	; (18bb8 <pm_system_suspend+0x148>)
   18aca:	f018 fca7 	bl	3141c <z_spin_unlock_valid>
   18ace:	4607      	mov	r7, r0
   18ad0:	2800      	cmp	r0, #0
   18ad2:	d048      	beq.n	18b66 <pm_system_suspend+0xf6>
	__asm__ volatile(
   18ad4:	f386 8811 	msr	BASEPRI, r6
   18ad8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   18adc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18ae0:	4a37      	ldr	r2, [pc, #220]	; (18bc0 <pm_system_suspend+0x150>)
   18ae2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   18ae6:	2b00      	cmp	r3, #0
   18ae8:	d062      	beq.n	18bb0 <pm_system_suspend+0x140>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   18aea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18aee:	d149      	bne.n	18b84 <pm_system_suspend+0x114>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   18af0:	f01a fa4e 	bl	32f90 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   18af4:	2001      	movs	r0, #1
   18af6:	f7ff ff33 	bl	18960 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
   18afa:	4621      	mov	r1, r4
   18afc:	4831      	ldr	r0, [pc, #196]	; (18bc4 <pm_system_suspend+0x154>)
   18afe:	f01e fe44 	bl	3778a <atomic_set_bit>
	if (pm_state_set != NULL) {
   18b02:	4b31      	ldr	r3, [pc, #196]	; (18bc8 <pm_system_suspend+0x158>)
   18b04:	b15b      	cbz	r3, 18b1e <pm_system_suspend+0xae>
		pm_state_set(info->state, info->substate_id);
   18b06:	4a2e      	ldr	r2, [pc, #184]	; (18bc0 <pm_system_suspend+0x150>)
   18b08:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   18b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18b10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   18b14:	7859      	ldrb	r1, [r3, #1]
   18b16:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
   18b1a:	f01d fcce 	bl	364ba <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   18b1e:	f7ff ff83 	bl	18a28 <pm_system_resume>
	k_sched_unlock();
   18b22:	f01a ff83 	bl	33a2c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   18b26:	4638      	mov	r0, r7
   18b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   18b2a:	4c28      	ldr	r4, [pc, #160]	; (18bcc <pm_system_suspend+0x15c>)
   18b2c:	2394      	movs	r3, #148	; 0x94
   18b2e:	4622      	mov	r2, r4
   18b30:	4927      	ldr	r1, [pc, #156]	; (18bd0 <pm_system_suspend+0x160>)
   18b32:	4828      	ldr	r0, [pc, #160]	; (18bd4 <pm_system_suspend+0x164>)
   18b34:	f01d fbae 	bl	36294 <assert_print>
   18b38:	491f      	ldr	r1, [pc, #124]	; (18bb8 <pm_system_suspend+0x148>)
   18b3a:	4827      	ldr	r0, [pc, #156]	; (18bd8 <pm_system_suspend+0x168>)
   18b3c:	f01d fbaa 	bl	36294 <assert_print>
   18b40:	2194      	movs	r1, #148	; 0x94
   18b42:	4620      	mov	r0, r4
   18b44:	f01d fb9f 	bl	36286 <assert_post_action>
		info = pm_policy_next_state(id, ticks);
   18b48:	4629      	mov	r1, r5
   18b4a:	4620      	mov	r0, r4
   18b4c:	f000 f84e 	bl	18bec <pm_policy_next_state>
		if (info != NULL) {
   18b50:	2800      	cmp	r0, #0
   18b52:	d0b9      	beq.n	18ac8 <pm_system_suspend+0x58>
			z_cpus_pm_state[id] = *info;
   18b54:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   18b58:	4b19      	ldr	r3, [pc, #100]	; (18bc0 <pm_system_suspend+0x150>)
   18b5a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18b5e:	c807      	ldmia	r0, {r0, r1, r2}
   18b60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   18b64:	e7b0      	b.n	18ac8 <pm_system_suspend+0x58>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   18b66:	4c19      	ldr	r4, [pc, #100]	; (18bcc <pm_system_suspend+0x15c>)
   18b68:	23c2      	movs	r3, #194	; 0xc2
   18b6a:	4622      	mov	r2, r4
   18b6c:	491b      	ldr	r1, [pc, #108]	; (18bdc <pm_system_suspend+0x16c>)
   18b6e:	4819      	ldr	r0, [pc, #100]	; (18bd4 <pm_system_suspend+0x164>)
   18b70:	f01d fb90 	bl	36294 <assert_print>
   18b74:	4910      	ldr	r1, [pc, #64]	; (18bb8 <pm_system_suspend+0x148>)
   18b76:	481a      	ldr	r0, [pc, #104]	; (18be0 <pm_system_suspend+0x170>)
   18b78:	f01d fb8c 	bl	36294 <assert_print>
   18b7c:	21c2      	movs	r1, #194	; 0xc2
   18b7e:	4620      	mov	r0, r4
   18b80:	f01d fb81 	bl	36286 <assert_post_action>
		     k_us_to_ticks_ceil32(
   18b84:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   18b88:	4b0d      	ldr	r3, [pc, #52]	; (18bc0 <pm_system_suspend+0x150>)
   18b8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18b8e:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   18b90:	0c41      	lsrs	r1, r0, #17
   18b92:	03c0      	lsls	r0, r0, #15
   18b94:	4b13      	ldr	r3, [pc, #76]	; (18be4 <pm_system_suspend+0x174>)
   18b96:	18c0      	adds	r0, r0, r3
   18b98:	4a13      	ldr	r2, [pc, #76]	; (18be8 <pm_system_suspend+0x178>)
   18b9a:	f04f 0300 	mov.w	r3, #0
   18b9e:	f141 0100 	adc.w	r1, r1, #0
   18ba2:	f7f7 fad9 	bl	10158 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   18ba6:	2101      	movs	r1, #1
   18ba8:	1a28      	subs	r0, r5, r0
   18baa:	f01b fdbb 	bl	34724 <z_set_timeout_expiry>
   18bae:	e79f      	b.n	18af0 <pm_system_suspend+0x80>
		return false;
   18bb0:	2700      	movs	r7, #0
   18bb2:	e7b8      	b.n	18b26 <pm_system_suspend+0xb6>
   18bb4:	2000ca40 	.word	0x2000ca40
   18bb8:	2000bf34 	.word	0x2000bf34
   18bbc:	2000bf38 	.word	0x2000bf38
   18bc0:	2000bf44 	.word	0x2000bf44
   18bc4:	2000bf58 	.word	0x2000bf58
   18bc8:	000364bb 	.word	0x000364bb
   18bcc:	00040b28 	.word	0x00040b28
   18bd0:	00040b88 	.word	0x00040b88
   18bd4:	0003f72c 	.word	0x0003f72c
   18bd8:	00040ba0 	.word	0x00040ba0
   18bdc:	00040b58 	.word	0x00040b58
   18be0:	00040b70 	.word	0x00040b70
   18be4:	000f423f 	.word	0x000f423f
   18be8:	000f4240 	.word	0x000f4240

00018bec <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   18bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18bf0:	b082      	sub	sp, #8
   18bf2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   18bf4:	a901      	add	r1, sp, #4
   18bf6:	f000 f845 	bl	18c84 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   18bfa:	1e44      	subs	r4, r0, #1
   18bfc:	b224      	sxth	r4, r4
   18bfe:	e007      	b.n	18c10 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
   18c00:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   18c04:	d033      	beq.n	18c6e <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
   18c06:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
   18c08:	45b0      	cmp	r8, r6
   18c0a:	d930      	bls.n	18c6e <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   18c0c:	3c01      	subs	r4, #1
   18c0e:	b224      	sxth	r4, r4
   18c10:	2c00      	cmp	r4, #0
   18c12:	db2b      	blt.n	18c6c <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
   18c14:	9b01      	ldr	r3, [sp, #4]
   18c16:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   18c1a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
   18c1e:	7869      	ldrb	r1, [r5, #1]
   18c20:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
   18c24:	f01e fdc0 	bl	377a8 <pm_policy_state_lock_is_active>
   18c28:	2800      	cmp	r0, #0
   18c2a:	d1ef      	bne.n	18c0c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
   18c2c:	6868      	ldr	r0, [r5, #4]
   18c2e:	0c41      	lsrs	r1, r0, #17
   18c30:	03c0      	lsls	r0, r0, #15
   18c32:	4f11      	ldr	r7, [pc, #68]	; (18c78 <pm_policy_next_state+0x8c>)
   18c34:	19c0      	adds	r0, r0, r7
   18c36:	4a11      	ldr	r2, [pc, #68]	; (18c7c <pm_policy_next_state+0x90>)
   18c38:	f04f 0300 	mov.w	r3, #0
   18c3c:	f141 0100 	adc.w	r1, r1, #0
   18c40:	f7f7 fa8a 	bl	10158 <__aeabi_uldivmod>
   18c44:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
   18c46:	68ab      	ldr	r3, [r5, #8]
   18c48:	0c59      	lsrs	r1, r3, #17
   18c4a:	03db      	lsls	r3, r3, #15
   18c4c:	19d8      	adds	r0, r3, r7
   18c4e:	4a0b      	ldr	r2, [pc, #44]	; (18c7c <pm_policy_next_state+0x90>)
   18c50:	f04f 0300 	mov.w	r3, #0
   18c54:	f141 0100 	adc.w	r1, r1, #0
   18c58:	f7f7 fa7e 	bl	10158 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   18c5c:	4b08      	ldr	r3, [pc, #32]	; (18c80 <pm_policy_next_state+0x94>)
   18c5e:	681b      	ldr	r3, [r3, #0]
   18c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18c64:	d0cc      	beq.n	18c00 <pm_policy_next_state+0x14>
   18c66:	4283      	cmp	r3, r0
   18c68:	d8ca      	bhi.n	18c00 <pm_policy_next_state+0x14>
   18c6a:	e7cf      	b.n	18c0c <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
   18c6c:	2500      	movs	r5, #0
}
   18c6e:	4628      	mov	r0, r5
   18c70:	b002      	add	sp, #8
   18c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18c76:	bf00      	nop
   18c78:	000f423f 	.word	0x000f423f
   18c7c:	000f4240 	.word	0x000f4240
   18c80:	20008368 	.word	0x20008368

00018c84 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   18c84:	b908      	cbnz	r0, 18c8a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   18c86:	4b02      	ldr	r3, [pc, #8]	; (18c90 <pm_state_cpu_get_all+0xc>)
   18c88:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   18c8a:	2000      	movs	r0, #0
   18c8c:	4770      	bx	lr
   18c8e:	bf00      	nop
   18c90:	000414cc 	.word	0x000414cc

00018c94 <nus_ccc_cfg_changed>:

static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
   18c94:	b508      	push	{r3, lr}
	if (nus_cb.send_enabled) {
   18c96:	4b04      	ldr	r3, [pc, #16]	; (18ca8 <nus_ccc_cfg_changed+0x14>)
   18c98:	689b      	ldr	r3, [r3, #8]
   18c9a:	b11b      	cbz	r3, 18ca4 <nus_ccc_cfg_changed+0x10>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   18c9c:	1e48      	subs	r0, r1, #1
   18c9e:	bf18      	it	ne
   18ca0:	2001      	movne	r0, #1
   18ca2:	4798      	blx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   18ca4:	bd08      	pop	{r3, pc}
   18ca6:	bf00      	nop
   18ca8:	2000bf5c 	.word	0x2000bf5c

00018cac <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   18cac:	b510      	push	{r4, lr}
   18cae:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   18cb0:	4b03      	ldr	r3, [pc, #12]	; (18cc0 <on_receive+0x14>)
   18cb2:	681b      	ldr	r3, [r3, #0]
   18cb4:	b113      	cbz	r3, 18cbc <on_receive+0x10>
   18cb6:	4611      	mov	r1, r2
		nus_cb.received(conn, buf, len);
   18cb8:	4622      	mov	r2, r4
   18cba:	4798      	blx	r3
}
	return len;
}
   18cbc:	4620      	mov	r0, r4
   18cbe:	bd10      	pop	{r4, pc}
   18cc0:	2000bf5c 	.word	0x2000bf5c

00018cc4 <on_sent>:

static void on_sent(struct bt_conn *conn, void *user_data)
{
   18cc4:	b508      	push	{r3, lr}
	ARG_UNUSED(user_data);

	LOG_DBG("Data send, conn %p", (void *)conn);

	if (nus_cb.sent) {
   18cc6:	4b02      	ldr	r3, [pc, #8]	; (18cd0 <on_sent+0xc>)
   18cc8:	685b      	ldr	r3, [r3, #4]
   18cca:	b103      	cbz	r3, 18cce <on_sent+0xa>
		nus_cb.sent(conn);
   18ccc:	4798      	blx	r3
	}
}
   18cce:	bd08      	pop	{r3, pc}
   18cd0:	2000bf5c 	.word	0x2000bf5c

00018cd4 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   18cd4:	b130      	cbz	r0, 18ce4 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   18cd6:	6801      	ldr	r1, [r0, #0]
   18cd8:	4a03      	ldr	r2, [pc, #12]	; (18ce8 <bt_nus_init+0x14>)
   18cda:	6011      	str	r1, [r2, #0]
		nus_cb.sent = callbacks->sent;
   18cdc:	6841      	ldr	r1, [r0, #4]
   18cde:	6051      	str	r1, [r2, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   18ce0:	6883      	ldr	r3, [r0, #8]
   18ce2:	6093      	str	r3, [r2, #8]
	}

	return 0;
}
   18ce4:	2000      	movs	r0, #0
   18ce6:	4770      	bx	lr
   18ce8:	2000bf5c 	.word	0x2000bf5c

00018cec <bt_nus_send>:

int bt_nus_send(struct bt_conn *conn, const uint8_t *data, uint16_t len)
{
   18cec:	b510      	push	{r4, lr}
   18cee:	b086      	sub	sp, #24
	struct bt_gatt_notify_params params = {0};
   18cf0:	2300      	movs	r3, #0
   18cf2:	9300      	str	r3, [sp, #0]
   18cf4:	9301      	str	r3, [sp, #4]
   18cf6:	9302      	str	r3, [sp, #8]
   18cf8:	9303      	str	r3, [sp, #12]
   18cfa:	9304      	str	r3, [sp, #16]
   18cfc:	9305      	str	r3, [sp, #20]
	const struct bt_gatt_attr *attr = &nus_svc.attrs[2];

	params.attr = attr;
   18cfe:	4b0d      	ldr	r3, [pc, #52]	; (18d34 <bt_nus_send+0x48>)
   18d00:	9301      	str	r3, [sp, #4]
	params.data = data;
   18d02:	9102      	str	r1, [sp, #8]
	params.len = len;
   18d04:	f8ad 200c 	strh.w	r2, [sp, #12]
	params.func = on_sent;
   18d08:	4b0b      	ldr	r3, [pc, #44]	; (18d38 <bt_nus_send+0x4c>)
   18d0a:	9304      	str	r3, [sp, #16]

	if (!conn) {
   18d0c:	b158      	cbz	r0, 18d26 <bt_nus_send+0x3a>
   18d0e:	4604      	mov	r4, r0
		LOG_DBG("Notification send to all connected peers");
		return bt_gatt_notify_cb(NULL, &params);
	} else if (bt_gatt_is_subscribed(conn, attr, BT_GATT_CCC_NOTIFY)) {
   18d10:	2201      	movs	r2, #1
   18d12:	4908      	ldr	r1, [pc, #32]	; (18d34 <bt_nus_send+0x48>)
   18d14:	f00b ffa6 	bl	24c64 <bt_gatt_is_subscribed>
   18d18:	b148      	cbz	r0, 18d2e <bt_nus_send+0x42>
		return bt_gatt_notify_cb(conn, &params);
   18d1a:	4669      	mov	r1, sp
   18d1c:	4620      	mov	r0, r4
   18d1e:	f00c fc03 	bl	25528 <bt_gatt_notify_cb>
	} else {
		return -EINVAL;
	}
}
   18d22:	b006      	add	sp, #24
   18d24:	bd10      	pop	{r4, pc}
		return bt_gatt_notify_cb(NULL, &params);
   18d26:	4669      	mov	r1, sp
   18d28:	f00c fbfe 	bl	25528 <bt_gatt_notify_cb>
   18d2c:	e7f9      	b.n	18d22 <bt_nus_send+0x36>
		return -EINVAL;
   18d2e:	f06f 0015 	mvn.w	r0, #21
   18d32:	e7f6      	b.n	18d22 <bt_nus_send+0x36>
   18d34:	00041500 	.word	0x00041500
   18d38:	00018cc5 	.word	0x00018cc5

00018d3c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   18d3c:	b470      	push	{r4, r5, r6}
   18d3e:	b08d      	sub	sp, #52	; 0x34
   18d40:	4606      	mov	r6, r0
   18d42:	460d      	mov	r5, r1
	const unsigned int rconst[11] = {
   18d44:	f10d 0c04 	add.w	ip, sp, #4
   18d48:	4c2b      	ldr	r4, [pc, #172]	; (18df8 <tc_aes128_set_encrypt_key+0xbc>)
   18d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18d4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   18d52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18d56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   18d5a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   18d5e:	2e00      	cmp	r6, #0
   18d60:	d045      	beq.n	18dee <tc_aes128_set_encrypt_key+0xb2>
   18d62:	4630      	mov	r0, r6
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   18d64:	2d00      	cmp	r5, #0
   18d66:	d044      	beq.n	18df2 <tc_aes128_set_encrypt_key+0xb6>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   18d68:	2300      	movs	r3, #0
   18d6a:	e00f      	b.n	18d8c <tc_aes128_set_encrypt_key+0x50>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18d6c:	f815 4023 	ldrb.w	r4, [r5, r3, lsl #2]
   18d70:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   18d74:	784a      	ldrb	r2, [r1, #1]
   18d76:	0412      	lsls	r2, r2, #16
   18d78:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   18d7c:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18d7e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   18d82:	78c9      	ldrb	r1, [r1, #3]
   18d84:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18d86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   18d8a:	3301      	adds	r3, #1
   18d8c:	2b03      	cmp	r3, #3
   18d8e:	d9ed      	bls.n	18d6c <tc_aes128_set_encrypt_key+0x30>
   18d90:	e006      	b.n	18da0 <tc_aes128_set_encrypt_key+0x64>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   18d92:	1f19      	subs	r1, r3, #4
   18d94:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   18d98:	404a      	eors	r2, r1
   18d9a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   18d9e:	3301      	adds	r3, #1
   18da0:	2b2b      	cmp	r3, #43	; 0x2b
   18da2:	d820      	bhi.n	18de6 <tc_aes128_set_encrypt_key+0xaa>
		t = s->words[i-1];
   18da4:	1e5a      	subs	r2, r3, #1
   18da6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   18daa:	f013 0f03 	tst.w	r3, #3
   18dae:	d1f0      	bne.n	18d92 <tc_aes128_set_encrypt_key+0x56>
	return (((a) >> 24)|((a) << 8));
   18db0:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   18db4:	0e11      	lsrs	r1, r2, #24
   18db6:	4c11      	ldr	r4, [pc, #68]	; (18dfc <tc_aes128_set_encrypt_key+0xc0>)
   18db8:	5c65      	ldrb	r5, [r4, r1]
   18dba:	f3c2 4107 	ubfx	r1, r2, #16, #8
   18dbe:	5c61      	ldrb	r1, [r4, r1]
   18dc0:	0409      	lsls	r1, r1, #16
   18dc2:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   18dc6:	f3c2 2507 	ubfx	r5, r2, #8, #8
   18dca:	5d65      	ldrb	r5, [r4, r5]
   18dcc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   18dd0:	b2d2      	uxtb	r2, r2
   18dd2:	5ca2      	ldrb	r2, [r4, r2]
   18dd4:	4311      	orrs	r1, r2
   18dd6:	f023 0203 	bic.w	r2, r3, #3
   18dda:	3230      	adds	r2, #48	; 0x30
   18ddc:	446a      	add	r2, sp
   18dde:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   18de2:	404a      	eors	r2, r1
   18de4:	e7d5      	b.n	18d92 <tc_aes128_set_encrypt_key+0x56>
	}

	return TC_CRYPTO_SUCCESS;
   18de6:	2001      	movs	r0, #1
}
   18de8:	b00d      	add	sp, #52	; 0x34
   18dea:	bc70      	pop	{r4, r5, r6}
   18dec:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   18dee:	2000      	movs	r0, #0
   18df0:	e7fa      	b.n	18de8 <tc_aes128_set_encrypt_key+0xac>
		return TC_CRYPTO_FAIL;
   18df2:	2000      	movs	r0, #0
   18df4:	e7f8      	b.n	18de8 <tc_aes128_set_encrypt_key+0xac>
   18df6:	bf00      	nop
   18df8:	0003f62c 	.word	0x0003f62c
   18dfc:	000415cc 	.word	0x000415cc

00018e00 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   18e00:	2800      	cmp	r0, #0
   18e02:	d04e      	beq.n	18ea2 <tc_aes_encrypt+0xa2>
{
   18e04:	b570      	push	{r4, r5, r6, lr}
   18e06:	b084      	sub	sp, #16
   18e08:	4615      	mov	r5, r2
   18e0a:	4606      	mov	r6, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   18e0c:	2900      	cmp	r1, #0
   18e0e:	d04a      	beq.n	18ea6 <tc_aes_encrypt+0xa6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   18e10:	2a00      	cmp	r2, #0
   18e12:	d04a      	beq.n	18eaa <tc_aes_encrypt+0xaa>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   18e14:	2310      	movs	r3, #16
   18e16:	460a      	mov	r2, r1
   18e18:	4619      	mov	r1, r3
   18e1a:	4668      	mov	r0, sp
   18e1c:	f01e fcc6 	bl	377ac <_copy>
	add_round_key(state, s->words);
   18e20:	4629      	mov	r1, r5
   18e22:	4668      	mov	r0, sp
   18e24:	f01e fcdc 	bl	377e0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   18e28:	2400      	movs	r4, #0
   18e2a:	e014      	b.n	18e56 <tc_aes_encrypt+0x56>
		s[i] = sbox[s[i]];
   18e2c:	f81d 1003 	ldrb.w	r1, [sp, r3]
   18e30:	481f      	ldr	r0, [pc, #124]	; (18eb0 <tc_aes_encrypt+0xb0>)
   18e32:	5c41      	ldrb	r1, [r0, r1]
   18e34:	f80d 1003 	strb.w	r1, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   18e38:	3301      	adds	r3, #1
   18e3a:	2b0f      	cmp	r3, #15
   18e3c:	d9f6      	bls.n	18e2c <tc_aes_encrypt+0x2c>
		sub_bytes(state);
		shift_rows(state);
   18e3e:	4668      	mov	r0, sp
   18e40:	f01e fd0f 	bl	37862 <shift_rows>
		mix_columns(state);
   18e44:	4668      	mov	r0, sp
   18e46:	f01e fd86 	bl	37956 <mix_columns>
		add_round_key(state, s->words + Nb*(i+1));
   18e4a:	3401      	adds	r4, #1
   18e4c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
   18e50:	4668      	mov	r0, sp
   18e52:	f01e fcc5 	bl	377e0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   18e56:	2c08      	cmp	r4, #8
   18e58:	d801      	bhi.n	18e5e <tc_aes_encrypt+0x5e>
	for (i = 0; i < (Nb * Nk); ++i) {
   18e5a:	2300      	movs	r3, #0
   18e5c:	e7ed      	b.n	18e3a <tc_aes_encrypt+0x3a>
   18e5e:	2300      	movs	r3, #0
   18e60:	e006      	b.n	18e70 <tc_aes_encrypt+0x70>
		s[i] = sbox[s[i]];
   18e62:	f81d 2003 	ldrb.w	r2, [sp, r3]
   18e66:	4912      	ldr	r1, [pc, #72]	; (18eb0 <tc_aes_encrypt+0xb0>)
   18e68:	5c8a      	ldrb	r2, [r1, r2]
   18e6a:	f80d 2003 	strb.w	r2, [sp, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   18e6e:	3301      	adds	r3, #1
   18e70:	2b0f      	cmp	r3, #15
   18e72:	d9f6      	bls.n	18e62 <tc_aes_encrypt+0x62>
	}

	sub_bytes(state);
	shift_rows(state);
   18e74:	4668      	mov	r0, sp
   18e76:	f01e fcf4 	bl	37862 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   18e7a:	1c61      	adds	r1, r4, #1
   18e7c:	eb05 1101 	add.w	r1, r5, r1, lsl #4
   18e80:	4668      	mov	r0, sp
   18e82:	f01e fcad 	bl	377e0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   18e86:	2310      	movs	r3, #16
   18e88:	466a      	mov	r2, sp
   18e8a:	4619      	mov	r1, r3
   18e8c:	4630      	mov	r0, r6
   18e8e:	f01e fc8d 	bl	377ac <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   18e92:	2210      	movs	r2, #16
   18e94:	2100      	movs	r1, #0
   18e96:	4668      	mov	r0, sp
   18e98:	f01e fc95 	bl	377c6 <_set>

	return TC_CRYPTO_SUCCESS;
   18e9c:	2001      	movs	r0, #1
}
   18e9e:	b004      	add	sp, #16
   18ea0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   18ea2:	2000      	movs	r0, #0
}
   18ea4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   18ea6:	2000      	movs	r0, #0
   18ea8:	e7f9      	b.n	18e9e <tc_aes_encrypt+0x9e>
		return TC_CRYPTO_FAIL;
   18eaa:	2000      	movs	r0, #0
   18eac:	e7f7      	b.n	18e9e <tc_aes_encrypt+0x9e>
   18eae:	bf00      	nop
   18eb0:	000415cc 	.word	0x000415cc

00018eb4 <compress>:
	n |= ((unsigned int)(*((*c)++)));
	return n;
}

static void compress(unsigned int *iv, const uint8_t *data)
{
   18eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eb8:	b095      	sub	sp, #84	; 0x54
   18eba:	9103      	str	r1, [sp, #12]
	unsigned int t1, t2;
	unsigned int work_space[16];
	unsigned int n;
	unsigned int i;

	a = iv[0]; b = iv[1]; c = iv[2]; d = iv[3];
   18ebc:	6805      	ldr	r5, [r0, #0]
   18ebe:	f8d0 8004 	ldr.w	r8, [r0, #4]
   18ec2:	6887      	ldr	r7, [r0, #8]
   18ec4:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	e = iv[4]; f = iv[5]; g = iv[6]; h = iv[7];
   18ec8:	6904      	ldr	r4, [r0, #16]
   18eca:	f8d0 a014 	ldr.w	sl, [r0, #20]
   18ece:	f8d0 9018 	ldr.w	r9, [r0, #24]
   18ed2:	f8d0 c01c 	ldr.w	ip, [r0, #28]

	for (i = 0; i < 16; ++i) {
   18ed6:	2600      	movs	r6, #0
   18ed8:	f8cd b004 	str.w	fp, [sp, #4]
   18edc:	46e3      	mov	fp, ip
   18ede:	9002      	str	r0, [sp, #8]
   18ee0:	e030      	b.n	18f44 <compress+0x90>
		n = BigEndian(&data);
   18ee2:	a803      	add	r0, sp, #12
   18ee4:	f01e fe62 	bl	37bac <BigEndian>
		t1 = work_space[i] = n;
   18ee8:	ab14      	add	r3, sp, #80	; 0x50
   18eea:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   18eee:	f843 0c40 	str.w	r0, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   18ef2:	ea4f 23f4 	mov.w	r3, r4, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   18ef6:	ea83 13b4 	eor.w	r3, r3, r4, ror #6
   18efa:	ea83 6374 	eor.w	r3, r3, r4, ror #25
   18efe:	445b      	add	r3, fp
   18f00:	ea04 020a 	and.w	r2, r4, sl
   18f04:	ea29 0104 	bic.w	r1, r9, r4
   18f08:	404a      	eors	r2, r1
   18f0a:	4413      	add	r3, r2
   18f0c:	4a4e      	ldr	r2, [pc, #312]	; (19048 <compress+0x194>)
   18f0e:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
   18f12:	4413      	add	r3, r2
   18f14:	4418      	add	r0, r3
	return (((a) >> n) | ((a) << (32 - n)));
   18f16:	ea4f 3375 	mov.w	r3, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   18f1a:	ea83 03b5 	eor.w	r3, r3, r5, ror #2
   18f1e:	ea83 53b5 	eor.w	r3, r3, r5, ror #22
   18f22:	ea88 0207 	eor.w	r2, r8, r7
   18f26:	402a      	ands	r2, r5
   18f28:	ea08 0107 	and.w	r1, r8, r7
   18f2c:	404a      	eors	r2, r1
   18f2e:	4413      	add	r3, r2
	for (i = 0; i < 16; ++i) {
   18f30:	3601      	adds	r6, #1
		h = g; g = f; f = e; e = d + t1;
   18f32:	46cb      	mov	fp, r9
   18f34:	46d1      	mov	r9, sl
   18f36:	46a2      	mov	sl, r4
   18f38:	9c01      	ldr	r4, [sp, #4]
   18f3a:	4404      	add	r4, r0
		d = c; c = b; b = a; a = t1 + t2;
   18f3c:	9701      	str	r7, [sp, #4]
   18f3e:	4647      	mov	r7, r8
   18f40:	46a8      	mov	r8, r5
   18f42:	18c5      	adds	r5, r0, r3
	for (i = 0; i < 16; ++i) {
   18f44:	2e0f      	cmp	r6, #15
   18f46:	d9cc      	bls.n	18ee2 <compress+0x2e>
   18f48:	46dc      	mov	ip, fp
   18f4a:	f8dd b004 	ldr.w	fp, [sp, #4]
	}

	for ( ; i < 64; ++i) {
   18f4e:	2e3f      	cmp	r6, #63	; 0x3f
   18f50:	d85e      	bhi.n	19010 <compress+0x15c>
		s0 = work_space[(i+1)&0x0f];
   18f52:	f106 0e01 	add.w	lr, r6, #1
   18f56:	f00e 030f 	and.w	r3, lr, #15
   18f5a:	aa14      	add	r2, sp, #80	; 0x50
   18f5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   18f60:	f853 2c40 	ldr.w	r2, [r3, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   18f64:	ea4f 43b2 	mov.w	r3, r2, ror #18
		s0 = sigma0(s0);
   18f68:	ea83 13f2 	eor.w	r3, r3, r2, ror #7
   18f6c:	ea83 03d2 	eor.w	r3, r3, r2, lsr #3
		s1 = work_space[(i+14)&0x0f];
   18f70:	f106 020e 	add.w	r2, r6, #14
   18f74:	f002 020f 	and.w	r2, r2, #15
   18f78:	a914      	add	r1, sp, #80	; 0x50
   18f7a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   18f7e:	f852 1c40 	ldr.w	r1, [r2, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   18f82:	ea4f 42f1 	mov.w	r2, r1, ror #19
		s1 = sigma1(s1);
   18f86:	ea82 4271 	eor.w	r2, r2, r1, ror #17
   18f8a:	ea82 2291 	eor.w	r2, r2, r1, lsr #10

		t1 = work_space[i&0xf] += s0 + s1 + work_space[(i+9)&0xf];
   18f8e:	f006 010f 	and.w	r1, r6, #15
   18f92:	a814      	add	r0, sp, #80	; 0x50
   18f94:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18f98:	f851 0c40 	ldr.w	r0, [r1, #-64]
   18f9c:	9001      	str	r0, [sp, #4]
   18f9e:	4413      	add	r3, r2
   18fa0:	f106 0209 	add.w	r2, r6, #9
   18fa4:	f002 020f 	and.w	r2, r2, #15
   18fa8:	a814      	add	r0, sp, #80	; 0x50
   18faa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   18fae:	f852 2c40 	ldr.w	r2, [r2, #-64]
   18fb2:	4413      	add	r3, r2
   18fb4:	9a01      	ldr	r2, [sp, #4]
   18fb6:	4413      	add	r3, r2
   18fb8:	f841 3c40 	str.w	r3, [r1, #-64]
	return (((a) >> n) | ((a) << (32 - n)));
   18fbc:	ea4f 22f4 	mov.w	r2, r4, ror #11
		t1 += h + Sigma1(e) + Ch(e, f, g) + k256[i];
   18fc0:	ea82 12b4 	eor.w	r2, r2, r4, ror #6
   18fc4:	ea82 6274 	eor.w	r2, r2, r4, ror #25
   18fc8:	4462      	add	r2, ip
   18fca:	ea04 010a 	and.w	r1, r4, sl
   18fce:	ea29 0004 	bic.w	r0, r9, r4
   18fd2:	4041      	eors	r1, r0
   18fd4:	440a      	add	r2, r1
   18fd6:	491c      	ldr	r1, [pc, #112]	; (19048 <compress+0x194>)
   18fd8:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
   18fdc:	440a      	add	r2, r1
   18fde:	4413      	add	r3, r2
	return (((a) >> n) | ((a) << (32 - n)));
   18fe0:	ea4f 3275 	mov.w	r2, r5, ror #13
		t2 = Sigma0(a) + Maj(a, b, c);
   18fe4:	ea82 02b5 	eor.w	r2, r2, r5, ror #2
   18fe8:	ea82 51b5 	eor.w	r1, r2, r5, ror #22
   18fec:	ea88 0207 	eor.w	r2, r8, r7
   18ff0:	402a      	ands	r2, r5
   18ff2:	ea08 0007 	and.w	r0, r8, r7
   18ff6:	4042      	eors	r2, r0
   18ff8:	440a      	add	r2, r1
	for ( ; i < 64; ++i) {
   18ffa:	4676      	mov	r6, lr
		h = g; g = f; f = e; e = d + t1;
   18ffc:	46cc      	mov	ip, r9
   18ffe:	46d1      	mov	r9, sl
   19000:	46a2      	mov	sl, r4
   19002:	eb0b 0403 	add.w	r4, fp, r3
		d = c; c = b; b = a; a = t1 + t2;
   19006:	46bb      	mov	fp, r7
   19008:	4647      	mov	r7, r8
   1900a:	46a8      	mov	r8, r5
   1900c:	189d      	adds	r5, r3, r2
   1900e:	e79e      	b.n	18f4e <compress+0x9a>
	}

	iv[0] += a; iv[1] += b; iv[2] += c; iv[3] += d;
   19010:	9802      	ldr	r0, [sp, #8]
   19012:	6803      	ldr	r3, [r0, #0]
   19014:	442b      	add	r3, r5
   19016:	6003      	str	r3, [r0, #0]
   19018:	6843      	ldr	r3, [r0, #4]
   1901a:	4443      	add	r3, r8
   1901c:	6043      	str	r3, [r0, #4]
   1901e:	6883      	ldr	r3, [r0, #8]
   19020:	443b      	add	r3, r7
   19022:	6083      	str	r3, [r0, #8]
   19024:	68c3      	ldr	r3, [r0, #12]
   19026:	445b      	add	r3, fp
   19028:	60c3      	str	r3, [r0, #12]
	iv[4] += e; iv[5] += f; iv[6] += g; iv[7] += h;
   1902a:	6903      	ldr	r3, [r0, #16]
   1902c:	4423      	add	r3, r4
   1902e:	6103      	str	r3, [r0, #16]
   19030:	6943      	ldr	r3, [r0, #20]
   19032:	4453      	add	r3, sl
   19034:	6143      	str	r3, [r0, #20]
   19036:	6983      	ldr	r3, [r0, #24]
   19038:	444b      	add	r3, r9
   1903a:	6183      	str	r3, [r0, #24]
   1903c:	69c3      	ldr	r3, [r0, #28]
   1903e:	4463      	add	r3, ip
   19040:	61c3      	str	r3, [r0, #28]
}
   19042:	b015      	add	sp, #84	; 0x54
   19044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19048:	000416cc 	.word	0x000416cc

0001904c <tc_sha256_init>:
	if (s == (TCSha256State_t) 0) {
   1904c:	b1e0      	cbz	r0, 19088 <tc_sha256_init+0x3c>
{
   1904e:	b510      	push	{r4, lr}
   19050:	4604      	mov	r4, r0
	_set((uint8_t *) s, 0x00, sizeof(*s));
   19052:	2270      	movs	r2, #112	; 0x70
   19054:	2100      	movs	r1, #0
   19056:	f01e fbb6 	bl	377c6 <_set>
	s->iv[0] = 0x6a09e667;
   1905a:	4b0c      	ldr	r3, [pc, #48]	; (1908c <tc_sha256_init+0x40>)
   1905c:	6023      	str	r3, [r4, #0]
	s->iv[1] = 0xbb67ae85;
   1905e:	4b0c      	ldr	r3, [pc, #48]	; (19090 <tc_sha256_init+0x44>)
   19060:	6063      	str	r3, [r4, #4]
	s->iv[2] = 0x3c6ef372;
   19062:	4b0c      	ldr	r3, [pc, #48]	; (19094 <tc_sha256_init+0x48>)
   19064:	60a3      	str	r3, [r4, #8]
	s->iv[3] = 0xa54ff53a;
   19066:	4b0c      	ldr	r3, [pc, #48]	; (19098 <tc_sha256_init+0x4c>)
   19068:	60e3      	str	r3, [r4, #12]
	s->iv[4] = 0x510e527f;
   1906a:	4b0c      	ldr	r3, [pc, #48]	; (1909c <tc_sha256_init+0x50>)
   1906c:	6123      	str	r3, [r4, #16]
	s->iv[5] = 0x9b05688c;
   1906e:	4b0c      	ldr	r3, [pc, #48]	; (190a0 <tc_sha256_init+0x54>)
   19070:	6163      	str	r3, [r4, #20]
	s->iv[6] = 0x1f83d9ab;
   19072:	4b0c      	ldr	r3, [pc, #48]	; (190a4 <tc_sha256_init+0x58>)
   19074:	61a3      	str	r3, [r4, #24]
	s->iv[7] = 0x5be0cd19;
   19076:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
   1907a:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
   1907e:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
   19082:	61e3      	str	r3, [r4, #28]
	return TC_CRYPTO_SUCCESS;
   19084:	2001      	movs	r0, #1
}
   19086:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   19088:	2000      	movs	r0, #0
}
   1908a:	4770      	bx	lr
   1908c:	6a09e667 	.word	0x6a09e667
   19090:	bb67ae85 	.word	0xbb67ae85
   19094:	3c6ef372 	.word	0x3c6ef372
   19098:	a54ff53a 	.word	0xa54ff53a
   1909c:	510e527f 	.word	0x510e527f
   190a0:	9b05688c 	.word	0x9b05688c
   190a4:	1f83d9ab 	.word	0x1f83d9ab

000190a8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   190a8:	4901      	ldr	r1, [pc, #4]	; (190b0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   190aa:	2210      	movs	r2, #16
	str	r2, [r1]
   190ac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   190ae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   190b0:	e000ed10 	.word	0xe000ed10

000190b4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   190b4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   190b6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   190b8:	f380 8811 	msr	BASEPRI, r0
	isb
   190bc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   190c0:	b501      	push	{r0, lr}
   190c2:	f7fc fd03 	bl	15acc <z_arm_on_enter_cpu_idle>
   190c6:	2800      	cmp	r0, #0
   190c8:	d002      	beq.n	190d0 <_skip_0>
   190ca:	f3bf 8f4f 	dsb	sy
   190ce:	bf30      	wfi

000190d0 <_skip_0>:
   190d0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   190d4:	b662      	cpsie	i
	isb
   190d6:	f3bf 8f6f 	isb	sy

	bx	lr
   190da:	4770      	bx	lr

000190dc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   190dc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   190de:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   190e0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   190e4:	b501      	push	{r0, lr}
   190e6:	f7fc fcf1 	bl	15acc <z_arm_on_enter_cpu_idle>
   190ea:	2800      	cmp	r0, #0
   190ec:	d002      	beq.n	190f4 <_skip_1>
   190ee:	f3bf 8f4f 	dsb	sy
   190f2:	bf20      	wfe

000190f4 <_skip_1>:
   190f4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

	msr	BASEPRI, r0
   190f8:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   190fc:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   190fe:	4770      	bx	lr

00019100 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   19100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19104:	b082      	sub	sp, #8
   19106:	af00      	add	r7, sp, #0
   19108:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1910a:	f8d0 e000 	ldr.w	lr, [r0]
   1910e:	f8d0 c004 	ldr.w	ip, [r0, #4]
   19112:	6886      	ldr	r6, [r0, #8]
   19114:	466d      	mov	r5, sp
   19116:	b08a      	sub	sp, #40	; 0x28
   19118:	466b      	mov	r3, sp
   1911a:	f113 0210 	adds.w	r2, r3, #16
   1911e:	f000 80f3 	beq.w	19308 <esf_dump+0x208>
   19122:	2114      	movs	r1, #20
   19124:	b18a      	cbz	r2, 1914a <esf_dump+0x4a>
   19126:	4608      	mov	r0, r1
   19128:	2904      	cmp	r1, #4
   1912a:	dd03      	ble.n	19134 <esf_dump+0x34>
   1912c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 19338 <esf_dump+0x238>
   19130:	f8c3 8014 	str.w	r8, [r3, #20]
   19134:	2808      	cmp	r0, #8
   19136:	dd01      	ble.n	1913c <esf_dump+0x3c>
   19138:	f8c3 e018 	str.w	lr, [r3, #24]
   1913c:	280c      	cmp	r0, #12
   1913e:	dd01      	ble.n	19144 <esf_dump+0x44>
   19140:	f8c3 c01c 	str.w	ip, [r3, #28]
   19144:	2810      	cmp	r0, #16
   19146:	dd00      	ble.n	1914a <esf_dump+0x4a>
   19148:	621e      	str	r6, [r3, #32]
   1914a:	2913      	cmp	r1, #19
   1914c:	f340 80df 	ble.w	1930e <esf_dump+0x20e>
   19150:	f04f 0c14 	mov.w	ip, #20
   19154:	b13a      	cbz	r2, 19166 <esf_dump+0x66>
   19156:	2105      	movs	r1, #5
   19158:	7139      	strb	r1, [r7, #4]
   1915a:	2100      	movs	r1, #0
   1915c:	7179      	strb	r1, [r7, #5]
   1915e:	71b9      	strb	r1, [r7, #6]
   19160:	71f9      	strb	r1, [r7, #7]
   19162:	6878      	ldr	r0, [r7, #4]
   19164:	6118      	str	r0, [r3, #16]
   19166:	2100      	movs	r1, #0
   19168:	f36f 0100 	bfc	r1, #0, #1
   1916c:	f36f 0141 	bfc	r1, #1, #1
   19170:	f36f 0182 	bfc	r1, #2, #1
   19174:	f36f 01c5 	bfc	r1, #3, #3
   19178:	2301      	movs	r3, #1
   1917a:	f363 1188 	bfi	r1, r3, #6, #3
   1917e:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   19182:	f36c 2152 	bfi	r1, ip, #9, #10
   19186:	f36f 41de 	bfc	r1, #19, #12
   1918a:	f36f 71df 	bfc	r1, #31, #1
   1918e:	2300      	movs	r3, #0
   19190:	486a      	ldr	r0, [pc, #424]	; (1933c <esf_dump+0x23c>)
   19192:	f7fd fbdb 	bl	1694c <z_impl_z_log_msg_static_create>
   19196:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   19198:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   1919c:	f8d4 c010 	ldr.w	ip, [r4, #16]
   191a0:	6966      	ldr	r6, [r4, #20]
   191a2:	466d      	mov	r5, sp
   191a4:	b08a      	sub	sp, #40	; 0x28
   191a6:	466b      	mov	r3, sp
   191a8:	f113 0210 	adds.w	r2, r3, #16
   191ac:	f000 80b2 	beq.w	19314 <esf_dump+0x214>
   191b0:	2114      	movs	r1, #20
   191b2:	b18a      	cbz	r2, 191d8 <esf_dump+0xd8>
   191b4:	4608      	mov	r0, r1
   191b6:	2904      	cmp	r1, #4
   191b8:	dd03      	ble.n	191c2 <esf_dump+0xc2>
   191ba:	f8df 8184 	ldr.w	r8, [pc, #388]	; 19340 <esf_dump+0x240>
   191be:	f8c3 8014 	str.w	r8, [r3, #20]
   191c2:	2808      	cmp	r0, #8
   191c4:	dd01      	ble.n	191ca <esf_dump+0xca>
   191c6:	f8c3 e018 	str.w	lr, [r3, #24]
   191ca:	280c      	cmp	r0, #12
   191cc:	dd01      	ble.n	191d2 <esf_dump+0xd2>
   191ce:	f8c3 c01c 	str.w	ip, [r3, #28]
   191d2:	2810      	cmp	r0, #16
   191d4:	dd00      	ble.n	191d8 <esf_dump+0xd8>
   191d6:	621e      	str	r6, [r3, #32]
   191d8:	2913      	cmp	r1, #19
   191da:	f340 809e 	ble.w	1931a <esf_dump+0x21a>
   191de:	f04f 0c14 	mov.w	ip, #20
   191e2:	b13a      	cbz	r2, 191f4 <esf_dump+0xf4>
   191e4:	2105      	movs	r1, #5
   191e6:	7139      	strb	r1, [r7, #4]
   191e8:	2100      	movs	r1, #0
   191ea:	7179      	strb	r1, [r7, #5]
   191ec:	71b9      	strb	r1, [r7, #6]
   191ee:	71f9      	strb	r1, [r7, #7]
   191f0:	6878      	ldr	r0, [r7, #4]
   191f2:	6118      	str	r0, [r3, #16]
   191f4:	2100      	movs	r1, #0
   191f6:	f36f 0100 	bfc	r1, #0, #1
   191fa:	f36f 0141 	bfc	r1, #1, #1
   191fe:	f36f 0182 	bfc	r1, #2, #1
   19202:	f36f 01c5 	bfc	r1, #3, #3
   19206:	2301      	movs	r3, #1
   19208:	f363 1188 	bfi	r1, r3, #6, #3
   1920c:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   19210:	f36c 2152 	bfi	r1, ip, #9, #10
   19214:	f36f 41de 	bfc	r1, #19, #12
   19218:	f36f 71df 	bfc	r1, #31, #1
   1921c:	2300      	movs	r3, #0
   1921e:	4847      	ldr	r0, [pc, #284]	; (1933c <esf_dump+0x23c>)
   19220:	f7fd fb94 	bl	1694c <z_impl_z_log_msg_static_create>
   19224:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   19226:	69e6      	ldr	r6, [r4, #28]
   19228:	466d      	mov	r5, sp
   1922a:	b088      	sub	sp, #32
   1922c:	466b      	mov	r3, sp
   1922e:	f113 0210 	adds.w	r2, r3, #16
   19232:	d075      	beq.n	19320 <esf_dump+0x220>
   19234:	210c      	movs	r1, #12
   19236:	b14a      	cbz	r2, 1924c <esf_dump+0x14c>
   19238:	4608      	mov	r0, r1
   1923a:	2904      	cmp	r1, #4
   1923c:	dd03      	ble.n	19246 <esf_dump+0x146>
   1923e:	f8df c104 	ldr.w	ip, [pc, #260]	; 19344 <esf_dump+0x244>
   19242:	f8c3 c014 	str.w	ip, [r3, #20]
   19246:	2808      	cmp	r0, #8
   19248:	dd00      	ble.n	1924c <esf_dump+0x14c>
   1924a:	619e      	str	r6, [r3, #24]
   1924c:	290b      	cmp	r1, #11
   1924e:	dd6a      	ble.n	19326 <esf_dump+0x226>
   19250:	f04f 0c0c 	mov.w	ip, #12
   19254:	b13a      	cbz	r2, 19266 <esf_dump+0x166>
   19256:	2103      	movs	r1, #3
   19258:	7139      	strb	r1, [r7, #4]
   1925a:	2100      	movs	r1, #0
   1925c:	7179      	strb	r1, [r7, #5]
   1925e:	71b9      	strb	r1, [r7, #6]
   19260:	71f9      	strb	r1, [r7, #7]
   19262:	6878      	ldr	r0, [r7, #4]
   19264:	6118      	str	r0, [r3, #16]
   19266:	2100      	movs	r1, #0
   19268:	f36f 0100 	bfc	r1, #0, #1
   1926c:	f36f 0141 	bfc	r1, #1, #1
   19270:	f36f 0182 	bfc	r1, #2, #1
   19274:	f36f 01c5 	bfc	r1, #3, #3
   19278:	2301      	movs	r3, #1
   1927a:	f363 1188 	bfi	r1, r3, #6, #3
   1927e:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   19282:	f36c 2152 	bfi	r1, ip, #9, #10
   19286:	f36f 41de 	bfc	r1, #19, #12
   1928a:	f36f 71df 	bfc	r1, #31, #1
   1928e:	2300      	movs	r3, #0
   19290:	482a      	ldr	r0, [pc, #168]	; (1933c <esf_dump+0x23c>)
   19292:	f7fd fb5b 	bl	1694c <z_impl_z_log_msg_static_create>
   19296:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   19298:	69a4      	ldr	r4, [r4, #24]
   1929a:	b088      	sub	sp, #32
   1929c:	466b      	mov	r3, sp
   1929e:	f113 0210 	adds.w	r2, r3, #16
   192a2:	d043      	beq.n	1932c <esf_dump+0x22c>
   192a4:	210c      	movs	r1, #12
   192a6:	b13a      	cbz	r2, 192b8 <esf_dump+0x1b8>
   192a8:	4608      	mov	r0, r1
   192aa:	2904      	cmp	r1, #4
   192ac:	dd01      	ble.n	192b2 <esf_dump+0x1b2>
   192ae:	4d26      	ldr	r5, [pc, #152]	; (19348 <esf_dump+0x248>)
   192b0:	615d      	str	r5, [r3, #20]
   192b2:	2808      	cmp	r0, #8
   192b4:	dd00      	ble.n	192b8 <esf_dump+0x1b8>
   192b6:	619c      	str	r4, [r3, #24]
   192b8:	290b      	cmp	r1, #11
   192ba:	dd3a      	ble.n	19332 <esf_dump+0x232>
   192bc:	240c      	movs	r4, #12
   192be:	b13a      	cbz	r2, 192d0 <esf_dump+0x1d0>
   192c0:	2103      	movs	r1, #3
   192c2:	7139      	strb	r1, [r7, #4]
   192c4:	2100      	movs	r1, #0
   192c6:	7179      	strb	r1, [r7, #5]
   192c8:	71b9      	strb	r1, [r7, #6]
   192ca:	71f9      	strb	r1, [r7, #7]
   192cc:	6878      	ldr	r0, [r7, #4]
   192ce:	6118      	str	r0, [r3, #16]
   192d0:	2100      	movs	r1, #0
   192d2:	f36f 0100 	bfc	r1, #0, #1
   192d6:	f36f 0141 	bfc	r1, #1, #1
   192da:	f36f 0182 	bfc	r1, #2, #1
   192de:	f36f 01c5 	bfc	r1, #3, #3
   192e2:	2301      	movs	r3, #1
   192e4:	f363 1188 	bfi	r1, r3, #6, #3
   192e8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   192ec:	f364 2152 	bfi	r1, r4, #9, #10
   192f0:	f36f 41de 	bfc	r1, #19, #12
   192f4:	f36f 71df 	bfc	r1, #31, #1
   192f8:	2300      	movs	r3, #0
   192fa:	4810      	ldr	r0, [pc, #64]	; (1933c <esf_dump+0x23c>)
   192fc:	f7fd fb26 	bl	1694c <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
   19300:	3708      	adds	r7, #8
   19302:	46bd      	mov	sp, r7
   19304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   19308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1930c:	e70a      	b.n	19124 <esf_dump+0x24>
   1930e:	f06f 0c1b 	mvn.w	ip, #27
   19312:	e71f      	b.n	19154 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   19314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19318:	e74b      	b.n	191b2 <esf_dump+0xb2>
   1931a:	f06f 0c1b 	mvn.w	ip, #27
   1931e:	e760      	b.n	191e2 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   19320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19324:	e787      	b.n	19236 <esf_dump+0x136>
   19326:	f06f 0c1b 	mvn.w	ip, #27
   1932a:	e793      	b.n	19254 <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   1932c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19330:	e7b9      	b.n	192a6 <esf_dump+0x1a6>
   19332:	f06f 041b 	mvn.w	r4, #27
   19336:	e7c2      	b.n	192be <esf_dump+0x1be>
   19338:	000417cc 	.word	0x000417cc
   1933c:	0003f488 	.word	0x0003f488
   19340:	000417fc 	.word	0x000417fc
   19344:	0004182c 	.word	0x0004182c
   19348:	0004183c 	.word	0x0004183c

0001934c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1934c:	2800      	cmp	r0, #0
   1934e:	db07      	blt.n	19360 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19350:	f000 021f 	and.w	r2, r0, #31
   19354:	0940      	lsrs	r0, r0, #5
   19356:	2301      	movs	r3, #1
   19358:	4093      	lsls	r3, r2
   1935a:	4a02      	ldr	r2, [pc, #8]	; (19364 <__NVIC_EnableIRQ+0x18>)
   1935c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
   19360:	4770      	bx	lr
   19362:	bf00      	nop
   19364:	e000e100 	.word	0xe000e100

00019368 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   19368:	2800      	cmp	r0, #0
   1936a:	db0c      	blt.n	19386 <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1936c:	f000 021f 	and.w	r2, r0, #31
   19370:	0940      	lsrs	r0, r0, #5
   19372:	2301      	movs	r3, #1
   19374:	4093      	lsls	r3, r2
   19376:	3020      	adds	r0, #32
   19378:	4a03      	ldr	r2, [pc, #12]	; (19388 <__NVIC_DisableIRQ+0x20>)
   1937a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1937e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19382:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
   19386:	4770      	bx	lr
   19388:	e000e100 	.word	0xe000e100

0001938c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1938c:	2800      	cmp	r0, #0
   1938e:	db08      	blt.n	193a2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19390:	0149      	lsls	r1, r1, #5
   19392:	b2c9      	uxtb	r1, r1
   19394:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   19398:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   1939c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
   193a0:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   193a2:	f000 000f 	and.w	r0, r0, #15
   193a6:	0149      	lsls	r1, r1, #5
   193a8:	b2c9      	uxtb	r1, r1
   193aa:	4b01      	ldr	r3, [pc, #4]	; (193b0 <__NVIC_SetPriority+0x24>)
   193ac:	5419      	strb	r1, [r3, r0]
  }
}
   193ae:	4770      	bx	lr
   193b0:	e000ed14 	.word	0xe000ed14

000193b4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   193b4:	0942      	lsrs	r2, r0, #5
   193b6:	4b05      	ldr	r3, [pc, #20]	; (193cc <arch_irq_is_enabled+0x18>)
   193b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   193bc:	f000 001f 	and.w	r0, r0, #31
   193c0:	2301      	movs	r3, #1
   193c2:	fa03 f000 	lsl.w	r0, r3, r0
}
   193c6:	4010      	ands	r0, r2
   193c8:	4770      	bx	lr
   193ca:	bf00      	nop
   193cc:	e000e100 	.word	0xe000e100

000193d0 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   193d0:	b570      	push	{r4, r5, r6, lr}
   193d2:	4605      	mov	r5, r0
   193d4:	460c      	mov	r4, r1
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   193d6:	3101      	adds	r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   193d8:	2907      	cmp	r1, #7
   193da:	d803      	bhi.n	193e4 <z_arm_irq_priority_set+0x14>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   193dc:	b240      	sxtb	r0, r0
   193de:	f7ff ffd5 	bl	1938c <__NVIC_SetPriority>
}
   193e2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   193e4:	4e08      	ldr	r6, [pc, #32]	; (19408 <z_arm_irq_priority_set+0x38>)
   193e6:	235b      	movs	r3, #91	; 0x5b
   193e8:	4632      	mov	r2, r6
   193ea:	4908      	ldr	r1, [pc, #32]	; (1940c <z_arm_irq_priority_set+0x3c>)
   193ec:	4808      	ldr	r0, [pc, #32]	; (19410 <z_arm_irq_priority_set+0x40>)
   193ee:	f01c ff51 	bl	36294 <assert_print>
   193f2:	2307      	movs	r3, #7
   193f4:	462a      	mov	r2, r5
   193f6:	4621      	mov	r1, r4
   193f8:	4806      	ldr	r0, [pc, #24]	; (19414 <z_arm_irq_priority_set+0x44>)
   193fa:	f01c ff4b 	bl	36294 <assert_print>
   193fe:	215b      	movs	r1, #91	; 0x5b
   19400:	4630      	mov	r0, r6
   19402:	f01c ff40 	bl	36286 <assert_post_action>
   19406:	bf00      	nop
   19408:	0004186c 	.word	0x0004186c
   1940c:	000418a4 	.word	0x000418a4
   19410:	0003f72c 	.word	0x0003f72c
   19414:	000418c0 	.word	0x000418c0

00019418 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   19418:	bf30      	wfi
    b z_SysNmiOnReset
   1941a:	f7ff bffd 	b.w	19418 <z_SysNmiOnReset>
   1941e:	bf00      	nop

00019420 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   19420:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   19422:	4b0b      	ldr	r3, [pc, #44]	; (19450 <z_arm_prep_c+0x30>)
   19424:	4a0b      	ldr	r2, [pc, #44]	; (19454 <z_arm_prep_c+0x34>)
   19426:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1942a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1942c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19430:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   19434:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   19438:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1943c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   19440:	f017 fcd0 	bl	30de4 <z_bss_zero>
	z_data_copy();
   19444:	f01a ff8e 	bl	34364 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   19448:	f001 f836 	bl	1a4b8 <z_arm_interrupt_init>
	z_cstart();
   1944c:	f017 fd26 	bl	30e9c <z_cstart>
   19450:	e000ed00 	.word	0xe000ed00
   19454:	00010000 	.word	0x00010000

00019458 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   19458:	4a0a      	ldr	r2, [pc, #40]	; (19484 <arch_swap+0x2c>)
   1945a:	6893      	ldr	r3, [r2, #8]
   1945c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   19460:	4909      	ldr	r1, [pc, #36]	; (19488 <arch_swap+0x30>)
   19462:	6809      	ldr	r1, [r1, #0]
   19464:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   19468:	4908      	ldr	r1, [pc, #32]	; (1948c <arch_swap+0x34>)
   1946a:	684b      	ldr	r3, [r1, #4]
   1946c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   19470:	604b      	str	r3, [r1, #4]
   19472:	2300      	movs	r3, #0
   19474:	f383 8811 	msr	BASEPRI, r3
   19478:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1947c:	6893      	ldr	r3, [r2, #8]
}
   1947e:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   19482:	4770      	bx	lr
   19484:	2000ca40 	.word	0x2000ca40
   19488:	00045e48 	.word	0x00045e48
   1948c:	e000ed00 	.word	0xe000ed00

00019490 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   19490:	4916      	ldr	r1, [pc, #88]	; (194ec <z_arm_pendsv+0x5c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   19492:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   19494:	f882 e0b5 	strb.w	lr, [r2, #181]	; 0xb5
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   19498:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1949c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1949e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   194a2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   194a6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   194a8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   194ac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   194b0:	4f0f      	ldr	r7, [pc, #60]	; (194f0 <z_arm_pendsv+0x60>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   194b2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   194b6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   194b8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   194ba:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   194bc:	f992 e0b5 	ldrsb.w	lr, [r2, #181]	; 0xb5

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   194c0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   194c4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   194c6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   194ca:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   194ce:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   194d2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   194d6:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   194da:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   194de:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   194e0:	f01e fdfa 	bl	380d8 <configure_builtin_stack_guard>
    pop {r2, lr}
   194e4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   194e8:	4770      	bx	lr
   194ea:	0000      	.short	0x0000
    ldr r1, =_kernel
   194ec:	2000ca40 	.word	0x2000ca40
    ldr v4, =_SCS_ICSR
   194f0:	e000ed04 	.word	0xe000ed04

000194f4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   194f4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   194f8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   194fa:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   194fe:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   19502:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   19504:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   19508:	2902      	cmp	r1, #2
    beq _oops
   1950a:	d0ff      	beq.n	1950c <_oops>

0001950c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   1950c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   1950e:	f01e fdc7 	bl	380a0 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   19512:	bd01      	pop	{r0, pc}

00019514 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   19514:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   19516:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1951a:	4910      	ldr	r1, [pc, #64]	; (1955c <arch_new_thread+0x48>)
   1951c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   19520:	f021 0101 	bic.w	r1, r1, #1
   19524:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   19528:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1952c:	9b01      	ldr	r3, [sp, #4]
   1952e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   19532:	9b02      	ldr	r3, [sp, #8]
   19534:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   19538:	9b03      	ldr	r3, [sp, #12]
   1953a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1953e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19542:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
   19546:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   19548:	2300      	movs	r3, #0
   1954a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   1954e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
   19552:	23bc      	movs	r3, #188	; 0xbc
   19554:	f880 30b5 	strb.w	r3, [r0, #181]	; 0xb5
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   19558:	bc10      	pop	{r4}
   1955a:	4770      	bx	lr
   1955c:	00035a2b 	.word	0x00035a2b

00019560 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   19560:	4b09      	ldr	r3, [pc, #36]	; (19588 <arch_switch_to_main_thread+0x28>)
   19562:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
   19564:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   19568:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1956c:	4610      	mov	r0, r2
   1956e:	f381 8809 	msr	PSP, r1
   19572:	2100      	movs	r1, #0
   19574:	b663      	cpsie	if
   19576:	f381 8811 	msr	BASEPRI, r1
   1957a:	f3bf 8f6f 	isb	sy
   1957e:	2200      	movs	r2, #0
   19580:	2300      	movs	r3, #0
   19582:	f01c fa52 	bl	35a2a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   19586:	bf00      	nop
   19588:	2000ca40 	.word	0x2000ca40

0001958c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1958c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1958e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   19590:	4a0b      	ldr	r2, [pc, #44]	; (195c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   19592:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   19594:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   19596:	bf1e      	ittt	ne
	movne	r1, #0
   19598:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1959a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   1959c:	f025 f9a2 	blne	3e8e4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   195a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   195a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   195a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   195aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   195ae:	4905      	ldr	r1, [pc, #20]	; (195c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   195b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   195b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   195b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   195b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   195ba:	4903      	ldr	r1, [pc, #12]	; (195c8 <_isr_wrapper+0x3c>)
	bx r1
   195bc:	4708      	bx	r1
   195be:	0000      	.short	0x0000
	ldr r2, =_kernel
   195c0:	2000ca40 	.word	0x2000ca40
	ldr r1, =_sw_isr_table
   195c4:	0003f08c 	.word	0x0003f08c
	ldr r1, =z_arm_int_exit
   195c8:	000195cd 	.word	0x000195cd

000195cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   195cc:	4b04      	ldr	r3, [pc, #16]	; (195e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   195ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   195d0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   195d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   195d4:	d003      	beq.n	195de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   195d6:	4903      	ldr	r1, [pc, #12]	; (195e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   195d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   195dc:	600a      	str	r2, [r1, #0]

000195de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   195de:	4770      	bx	lr
	ldr r3, =_kernel
   195e0:	2000ca40 	.word	0x2000ca40
	ldr r1, =_SCS_ICSR
   195e4:	e000ed04 	.word	0xe000ed04

000195e8 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   195e8:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   195ea:	4b0d      	ldr	r3, [pc, #52]	; (19620 <z_arm_is_synchronous_svc+0x38>)
   195ec:	695a      	ldr	r2, [r3, #20]
   195ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   195f2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   195f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   195f8:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
   195fc:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   19600:	695a      	ldr	r2, [r3, #20]
   19602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   19606:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   19608:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1960c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   19610:	f64d 7302 	movw	r3, #57090	; 0xdf02
   19614:	4299      	cmp	r1, r3
   19616:	d001      	beq.n	1961c <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
   19618:	2000      	movs	r0, #0
   1961a:	4770      	bx	lr
		return true;
   1961c:	2001      	movs	r0, #1
}
   1961e:	4770      	bx	lr
   19620:	e000ed00 	.word	0xe000ed00

00019624 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
   19624:	b5f0      	push	{r4, r5, r6, r7, lr}
   19626:	b089      	sub	sp, #36	; 0x24
   19628:	461d      	mov	r5, r3
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
   1962a:	2300      	movs	r3, #0
   1962c:	702b      	strb	r3, [r5, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1962e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   19632:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   19636:	d142      	bne.n	196be <get_esf+0x9a>
   19638:	4606      	mov	r6, r0
   1963a:	460f      	mov	r7, r1
   1963c:	4614      	mov	r4, r2
		} else {
			ptr_esf = (z_arch_esf_t *)__TZ_get_MSP_NS();
		}
	}
#elif defined(CONFIG_ARM_NONSECURE_FIRMWARE)
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   1963e:	f012 0f01 	tst.w	r2, #1
   19642:	d13f      	bne.n	196c4 <get_esf+0xa0>
		 * This is a fatal error.
		 */
		return NULL;
	}

	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   19644:	f012 0f40 	tst.w	r2, #64	; 0x40
   19648:	d107      	bne.n	1965a <get_esf+0x36>
	z_arch_esf_t *ptr_esf = NULL;
   1964a:	2000      	movs	r0, #0
	bool alternative_state_exc = false;
   1964c:	4603      	mov	r3, r0
		PR_EXC("SPSEL in thread mode does not indicate PSP");
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
   1964e:	bbbb      	cbnz	r3, 196c0 <get_esf+0x9c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   19650:	f014 0f08 	tst.w	r4, #8
   19654:	d02f      	beq.n	196b6 <get_esf+0x92>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
   19656:	4638      	mov	r0, r7
   19658:	e032      	b.n	196c0 <get_esf+0x9c>
		PR_FAULT_INFO("Exception occurred in Secure State");
   1965a:	4b1b      	ldr	r3, [pc, #108]	; (196c8 <get_esf+0xa4>)
   1965c:	9307      	str	r3, [sp, #28]
   1965e:	2302      	movs	r3, #2
   19660:	f88d 3004 	strb.w	r3, [sp, #4]
   19664:	2300      	movs	r3, #0
   19666:	f88d 3005 	strb.w	r3, [sp, #5]
   1966a:	f88d 3006 	strb.w	r3, [sp, #6]
   1966e:	f88d 3007 	strb.w	r3, [sp, #7]
   19672:	9a01      	ldr	r2, [sp, #4]
   19674:	9206      	str	r2, [sp, #24]
   19676:	4619      	mov	r1, r3
   19678:	f363 0100 	bfi	r1, r3, #0, #1
   1967c:	f363 0141 	bfi	r1, r3, #1, #1
   19680:	f363 0182 	bfi	r1, r3, #2, #1
   19684:	f363 01c5 	bfi	r1, r3, #3, #3
   19688:	2201      	movs	r2, #1
   1968a:	f362 1188 	bfi	r1, r2, #6, #3
   1968e:	2208      	movs	r2, #8
   19690:	f362 2152 	bfi	r1, r2, #9, #10
   19694:	f363 41de 	bfi	r1, r3, #19, #12
   19698:	f363 71df 	bfi	r1, r3, #31, #1
   1969c:	aa06      	add	r2, sp, #24
   1969e:	480b      	ldr	r0, [pc, #44]	; (196cc <get_esf+0xa8>)
   196a0:	f7fd f954 	bl	1694c <z_impl_z_log_msg_static_create>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   196a4:	f014 0f04 	tst.w	r4, #4
   196a8:	d002      	beq.n	196b0 <get_esf+0x8c>
			ptr_esf = (z_arch_esf_t *)psp;
   196aa:	4638      	mov	r0, r7
		alternative_state_exc = true;
   196ac:	2301      	movs	r3, #1
   196ae:	e7ce      	b.n	1964e <get_esf+0x2a>
			ptr_esf = (z_arch_esf_t *)msp;
   196b0:	4630      	mov	r0, r6
		alternative_state_exc = true;
   196b2:	2301      	movs	r3, #1
   196b4:	e7cb      	b.n	1964e <get_esf+0x2a>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
   196b6:	4630      	mov	r0, r6
			*nested_exc = true;
   196b8:	2301      	movs	r3, #1
   196ba:	702b      	strb	r3, [r5, #0]
   196bc:	e000      	b.n	196c0 <get_esf+0x9c>
		return NULL;
   196be:	2000      	movs	r0, #0
		}
	}

	return ptr_esf;
}
   196c0:	b009      	add	sp, #36	; 0x24
   196c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   196c4:	2000      	movs	r0, #0
   196c6:	e7fb      	b.n	196c0 <get_esf+0x9c>
   196c8:	00041900 	.word	0x00041900
   196cc:	0003f488 	.word	0x0003f488

000196d0 <mem_manage_fault>:
{
   196d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196d4:	b0a6      	sub	sp, #152	; 0x98
   196d6:	af00      	add	r7, sp, #0
   196d8:	4605      	mov	r5, r0
   196da:	460e      	mov	r6, r1
   196dc:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   196de:	4bbc      	ldr	r3, [pc, #752]	; (199d0 <mem_manage_fault+0x300>)
   196e0:	61fb      	str	r3, [r7, #28]
   196e2:	2302      	movs	r3, #2
   196e4:	713b      	strb	r3, [r7, #4]
   196e6:	2300      	movs	r3, #0
   196e8:	717b      	strb	r3, [r7, #5]
   196ea:	71bb      	strb	r3, [r7, #6]
   196ec:	71fb      	strb	r3, [r7, #7]
   196ee:	687a      	ldr	r2, [r7, #4]
   196f0:	61ba      	str	r2, [r7, #24]
   196f2:	4619      	mov	r1, r3
   196f4:	f363 0100 	bfi	r1, r3, #0, #1
   196f8:	f363 0141 	bfi	r1, r3, #1, #1
   196fc:	f363 0182 	bfi	r1, r3, #2, #1
   19700:	f363 01c5 	bfi	r1, r3, #3, #3
   19704:	2201      	movs	r2, #1
   19706:	f362 1188 	bfi	r1, r2, #6, #3
   1970a:	2208      	movs	r2, #8
   1970c:	f362 2152 	bfi	r1, r2, #9, #10
   19710:	f363 41de 	bfi	r1, r3, #19, #12
   19714:	f363 71df 	bfi	r1, r3, #31, #1
   19718:	f107 0218 	add.w	r2, r7, #24
   1971c:	48ad      	ldr	r0, [pc, #692]	; (199d4 <mem_manage_fault+0x304>)
   1971e:	f7fd f915 	bl	1694c <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   19722:	4bad      	ldr	r3, [pc, #692]	; (199d8 <mem_manage_fault+0x308>)
   19724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19726:	f013 0f10 	tst.w	r3, #16
   1972a:	d13e      	bne.n	197aa <mem_manage_fault+0xda>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1972c:	4baa      	ldr	r3, [pc, #680]	; (199d8 <mem_manage_fault+0x308>)
   1972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19730:	f013 0f08 	tst.w	r3, #8
   19734:	d15c      	bne.n	197f0 <mem_manage_fault+0x120>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   19736:	4ba8      	ldr	r3, [pc, #672]	; (199d8 <mem_manage_fault+0x308>)
   19738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1973a:	f013 0f02 	tst.w	r3, #2
   1973e:	d17a      	bne.n	19836 <mem_manage_fault+0x166>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   19740:	4ba5      	ldr	r3, [pc, #660]	; (199d8 <mem_manage_fault+0x308>)
   19742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19744:	f013 0f01 	tst.w	r3, #1
   19748:	f040 80e9 	bne.w	1991e <mem_manage_fault+0x24e>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1974c:	4ba2      	ldr	r3, [pc, #648]	; (199d8 <mem_manage_fault+0x308>)
   1974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19750:	f013 0f20 	tst.w	r3, #32
   19754:	f040 8106 	bne.w	19964 <mem_manage_fault+0x294>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   19758:	4b9f      	ldr	r3, [pc, #636]	; (199d8 <mem_manage_fault+0x308>)
   1975a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1975c:	f013 0f10 	tst.w	r3, #16
   19760:	d104      	bne.n	1976c <mem_manage_fault+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   19762:	4b9d      	ldr	r3, [pc, #628]	; (199d8 <mem_manage_fault+0x308>)
   19764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   19766:	f013 0f02 	tst.w	r3, #2
   1976a:	d005      	beq.n	19778 <mem_manage_fault+0xa8>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1976c:	4b9a      	ldr	r3, [pc, #616]	; (199d8 <mem_manage_fault+0x308>)
   1976e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19770:	f013 0f10 	tst.w	r3, #16
   19774:	f040 811b 	bne.w	199ae <mem_manage_fault+0x2de>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   19778:	4b97      	ldr	r3, [pc, #604]	; (199d8 <mem_manage_fault+0x308>)
   1977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1977c:	f013 0f20 	tst.w	r3, #32
   19780:	d004      	beq.n	1978c <mem_manage_fault+0xbc>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   19782:	4a95      	ldr	r2, [pc, #596]	; (199d8 <mem_manage_fault+0x308>)
   19784:	6a53      	ldr	r3, [r2, #36]	; 0x24
   19786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1978a:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1978c:	4a92      	ldr	r2, [pc, #584]	; (199d8 <mem_manage_fault+0x308>)
   1978e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19790:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   19794:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   19796:	2101      	movs	r1, #1
   19798:	4628      	mov	r0, r5
   1979a:	f01e fca2 	bl	380e2 <memory_fault_recoverable>
   1979e:	7020      	strb	r0, [r4, #0]
}
   197a0:	2000      	movs	r0, #0
   197a2:	3798      	adds	r7, #152	; 0x98
   197a4:	46bd      	mov	sp, r7
   197a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   197aa:	4b8c      	ldr	r3, [pc, #560]	; (199dc <mem_manage_fault+0x30c>)
   197ac:	637b      	str	r3, [r7, #52]	; 0x34
   197ae:	2302      	movs	r3, #2
   197b0:	713b      	strb	r3, [r7, #4]
   197b2:	2300      	movs	r3, #0
   197b4:	717b      	strb	r3, [r7, #5]
   197b6:	71bb      	strb	r3, [r7, #6]
   197b8:	71fb      	strb	r3, [r7, #7]
   197ba:	687a      	ldr	r2, [r7, #4]
   197bc:	633a      	str	r2, [r7, #48]	; 0x30
   197be:	4619      	mov	r1, r3
   197c0:	f363 0100 	bfi	r1, r3, #0, #1
   197c4:	f363 0141 	bfi	r1, r3, #1, #1
   197c8:	f363 0182 	bfi	r1, r3, #2, #1
   197cc:	f363 01c5 	bfi	r1, r3, #3, #3
   197d0:	2201      	movs	r2, #1
   197d2:	f362 1188 	bfi	r1, r2, #6, #3
   197d6:	2208      	movs	r2, #8
   197d8:	f362 2152 	bfi	r1, r2, #9, #10
   197dc:	f363 41de 	bfi	r1, r3, #19, #12
   197e0:	f363 71df 	bfi	r1, r3, #31, #1
   197e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   197e8:	487a      	ldr	r0, [pc, #488]	; (199d4 <mem_manage_fault+0x304>)
   197ea:	f7fd f8af 	bl	1694c <z_impl_z_log_msg_static_create>
   197ee:	e79d      	b.n	1972c <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   197f0:	4b7b      	ldr	r3, [pc, #492]	; (199e0 <mem_manage_fault+0x310>)
   197f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   197f4:	2302      	movs	r3, #2
   197f6:	713b      	strb	r3, [r7, #4]
   197f8:	2300      	movs	r3, #0
   197fa:	717b      	strb	r3, [r7, #5]
   197fc:	71bb      	strb	r3, [r7, #6]
   197fe:	71fb      	strb	r3, [r7, #7]
   19800:	687a      	ldr	r2, [r7, #4]
   19802:	64ba      	str	r2, [r7, #72]	; 0x48
   19804:	4619      	mov	r1, r3
   19806:	f363 0100 	bfi	r1, r3, #0, #1
   1980a:	f363 0141 	bfi	r1, r3, #1, #1
   1980e:	f363 0182 	bfi	r1, r3, #2, #1
   19812:	f363 01c5 	bfi	r1, r3, #3, #3
   19816:	2201      	movs	r2, #1
   19818:	f362 1188 	bfi	r1, r2, #6, #3
   1981c:	2208      	movs	r2, #8
   1981e:	f362 2152 	bfi	r1, r2, #9, #10
   19822:	f363 41de 	bfi	r1, r3, #19, #12
   19826:	f363 71df 	bfi	r1, r3, #31, #1
   1982a:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1982e:	4869      	ldr	r0, [pc, #420]	; (199d4 <mem_manage_fault+0x304>)
   19830:	f7fd f88c 	bl	1694c <z_impl_z_log_msg_static_create>
   19834:	e77f      	b.n	19736 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   19836:	4b6b      	ldr	r3, [pc, #428]	; (199e4 <mem_manage_fault+0x314>)
   19838:	667b      	str	r3, [r7, #100]	; 0x64
   1983a:	2302      	movs	r3, #2
   1983c:	713b      	strb	r3, [r7, #4]
   1983e:	2300      	movs	r3, #0
   19840:	717b      	strb	r3, [r7, #5]
   19842:	71bb      	strb	r3, [r7, #6]
   19844:	71fb      	strb	r3, [r7, #7]
   19846:	687a      	ldr	r2, [r7, #4]
   19848:	663a      	str	r2, [r7, #96]	; 0x60
   1984a:	4619      	mov	r1, r3
   1984c:	f363 0100 	bfi	r1, r3, #0, #1
   19850:	f363 0141 	bfi	r1, r3, #1, #1
   19854:	f363 0182 	bfi	r1, r3, #2, #1
   19858:	f363 01c5 	bfi	r1, r3, #3, #3
   1985c:	2201      	movs	r2, #1
   1985e:	f362 1188 	bfi	r1, r2, #6, #3
   19862:	2208      	movs	r2, #8
   19864:	f362 2152 	bfi	r1, r2, #9, #10
   19868:	f363 41de 	bfi	r1, r3, #19, #12
   1986c:	f363 71df 	bfi	r1, r3, #31, #1
   19870:	f107 0260 	add.w	r2, r7, #96	; 0x60
   19874:	4857      	ldr	r0, [pc, #348]	; (199d4 <mem_manage_fault+0x304>)
   19876:	f7fd f869 	bl	1694c <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
   1987a:	4b57      	ldr	r3, [pc, #348]	; (199d8 <mem_manage_fault+0x308>)
   1987c:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1987e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19880:	f013 0f80 	tst.w	r3, #128	; 0x80
   19884:	f43f af5c 	beq.w	19740 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   19888:	46e8      	mov	r8, sp
   1988a:	b088      	sub	sp, #32
   1988c:	466b      	mov	r3, sp
   1988e:	f113 0210 	adds.w	r2, r3, #16
   19892:	d011      	beq.n	198b8 <mem_manage_fault+0x1e8>
   19894:	210c      	movs	r1, #12
   19896:	b152      	cbz	r2, 198ae <mem_manage_fault+0x1de>
   19898:	468c      	mov	ip, r1
   1989a:	2904      	cmp	r1, #4
   1989c:	dd03      	ble.n	198a6 <mem_manage_fault+0x1d6>
   1989e:	f8df e148 	ldr.w	lr, [pc, #328]	; 199e8 <mem_manage_fault+0x318>
   198a2:	f8c3 e014 	str.w	lr, [r3, #20]
   198a6:	f1bc 0f08 	cmp.w	ip, #8
   198aa:	dd08      	ble.n	198be <mem_manage_fault+0x1ee>
   198ac:	6198      	str	r0, [r3, #24]
   198ae:	290b      	cmp	r1, #11
   198b0:	dd32      	ble.n	19918 <mem_manage_fault+0x248>
   198b2:	f04f 0c0c 	mov.w	ip, #12
   198b6:	e004      	b.n	198c2 <mem_manage_fault+0x1f2>
   198b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   198bc:	e7eb      	b.n	19896 <mem_manage_fault+0x1c6>
   198be:	f06f 0c1b 	mvn.w	ip, #27
   198c2:	b13a      	cbz	r2, 198d4 <mem_manage_fault+0x204>
   198c4:	2103      	movs	r1, #3
   198c6:	7139      	strb	r1, [r7, #4]
   198c8:	2100      	movs	r1, #0
   198ca:	7179      	strb	r1, [r7, #5]
   198cc:	71b9      	strb	r1, [r7, #6]
   198ce:	71f9      	strb	r1, [r7, #7]
   198d0:	6878      	ldr	r0, [r7, #4]
   198d2:	6118      	str	r0, [r3, #16]
   198d4:	2100      	movs	r1, #0
   198d6:	f36f 0100 	bfc	r1, #0, #1
   198da:	f36f 0141 	bfc	r1, #1, #1
   198de:	f36f 0182 	bfc	r1, #2, #1
   198e2:	f36f 01c5 	bfc	r1, #3, #3
   198e6:	2301      	movs	r3, #1
   198e8:	f363 1188 	bfi	r1, r3, #6, #3
   198ec:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   198f0:	f363 2152 	bfi	r1, r3, #9, #10
   198f4:	f36f 41de 	bfc	r1, #19, #12
   198f8:	f36f 71df 	bfc	r1, #31, #1
   198fc:	2300      	movs	r3, #0
   198fe:	4835      	ldr	r0, [pc, #212]	; (199d4 <mem_manage_fault+0x304>)
   19900:	f7fd f824 	bl	1694c <z_impl_z_log_msg_static_create>
   19904:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   19906:	2e00      	cmp	r6, #0
   19908:	f43f af1a 	beq.w	19740 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1990c:	4a32      	ldr	r2, [pc, #200]	; (199d8 <mem_manage_fault+0x308>)
   1990e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19914:	6293      	str	r3, [r2, #40]	; 0x28
   19916:	e713      	b.n	19740 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   19918:	f06f 0c1b 	mvn.w	ip, #27
   1991c:	e7d1      	b.n	198c2 <mem_manage_fault+0x1f2>
		PR_FAULT_INFO("  Instruction Access Violation");
   1991e:	4b33      	ldr	r3, [pc, #204]	; (199ec <mem_manage_fault+0x31c>)
   19920:	67fb      	str	r3, [r7, #124]	; 0x7c
   19922:	2302      	movs	r3, #2
   19924:	713b      	strb	r3, [r7, #4]
   19926:	2300      	movs	r3, #0
   19928:	717b      	strb	r3, [r7, #5]
   1992a:	71bb      	strb	r3, [r7, #6]
   1992c:	71fb      	strb	r3, [r7, #7]
   1992e:	687a      	ldr	r2, [r7, #4]
   19930:	67ba      	str	r2, [r7, #120]	; 0x78
   19932:	4619      	mov	r1, r3
   19934:	f363 0100 	bfi	r1, r3, #0, #1
   19938:	f363 0141 	bfi	r1, r3, #1, #1
   1993c:	f363 0182 	bfi	r1, r3, #2, #1
   19940:	f363 01c5 	bfi	r1, r3, #3, #3
   19944:	2201      	movs	r2, #1
   19946:	f362 1188 	bfi	r1, r2, #6, #3
   1994a:	2208      	movs	r2, #8
   1994c:	f362 2152 	bfi	r1, r2, #9, #10
   19950:	f363 41de 	bfi	r1, r3, #19, #12
   19954:	f363 71df 	bfi	r1, r3, #31, #1
   19958:	f107 0278 	add.w	r2, r7, #120	; 0x78
   1995c:	481d      	ldr	r0, [pc, #116]	; (199d4 <mem_manage_fault+0x304>)
   1995e:	f7fc fff5 	bl	1694c <z_impl_z_log_msg_static_create>
   19962:	e6f3      	b.n	1974c <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
   19964:	4b22      	ldr	r3, [pc, #136]	; (199f0 <mem_manage_fault+0x320>)
   19966:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1996a:	2302      	movs	r3, #2
   1996c:	713b      	strb	r3, [r7, #4]
   1996e:	2300      	movs	r3, #0
   19970:	717b      	strb	r3, [r7, #5]
   19972:	71bb      	strb	r3, [r7, #6]
   19974:	71fb      	strb	r3, [r7, #7]
   19976:	687a      	ldr	r2, [r7, #4]
   19978:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   1997c:	4619      	mov	r1, r3
   1997e:	f363 0100 	bfi	r1, r3, #0, #1
   19982:	f363 0141 	bfi	r1, r3, #1, #1
   19986:	f363 0182 	bfi	r1, r3, #2, #1
   1998a:	f363 01c5 	bfi	r1, r3, #3, #3
   1998e:	2201      	movs	r2, #1
   19990:	f362 1188 	bfi	r1, r2, #6, #3
   19994:	2208      	movs	r2, #8
   19996:	f362 2152 	bfi	r1, r2, #9, #10
   1999a:	f363 41de 	bfi	r1, r3, #19, #12
   1999e:	f363 71df 	bfi	r1, r3, #31, #1
   199a2:	f107 0290 	add.w	r2, r7, #144	; 0x90
   199a6:	480b      	ldr	r0, [pc, #44]	; (199d4 <mem_manage_fault+0x304>)
   199a8:	f7fc ffd0 	bl	1694c <z_impl_z_log_msg_static_create>
   199ac:	e6d4      	b.n	19758 <mem_manage_fault+0x88>
	__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   199ae:	4c11      	ldr	r4, [pc, #68]	; (199f4 <mem_manage_fault+0x324>)
   199b0:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   199b4:	4622      	mov	r2, r4
   199b6:	4910      	ldr	r1, [pc, #64]	; (199f8 <mem_manage_fault+0x328>)
   199b8:	4810      	ldr	r0, [pc, #64]	; (199fc <mem_manage_fault+0x32c>)
   199ba:	f01c fc6b 	bl	36294 <assert_print>
   199be:	4810      	ldr	r0, [pc, #64]	; (19a00 <mem_manage_fault+0x330>)
   199c0:	f01c fc68 	bl	36294 <assert_print>
   199c4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   199c8:	4620      	mov	r0, r4
   199ca:	f01c fc5c 	bl	36286 <assert_post_action>
   199ce:	bf00      	nop
   199d0:	00041924 	.word	0x00041924
   199d4:	0003f488 	.word	0x0003f488
   199d8:	e000ed00 	.word	0xe000ed00
   199dc:	0004193c 	.word	0x0004193c
   199e0:	00041970 	.word	0x00041970
   199e4:	00041984 	.word	0x00041984
   199e8:	0004199c 	.word	0x0004199c
   199ec:	000419b4 	.word	0x000419b4
   199f0:	000419d4 	.word	0x000419d4
   199f4:	00041a04 	.word	0x00041a04
   199f8:	00041a40 	.word	0x00041a40
   199fc:	0003f72c 	.word	0x0003f72c
   19a00:	00041a8c 	.word	0x00041a8c

00019a04 <bus_fault>:
{
   19a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a08:	b0ac      	sub	sp, #176	; 0xb0
   19a0a:	af00      	add	r7, sp, #0
   19a0c:	4605      	mov	r5, r0
   19a0e:	460e      	mov	r6, r1
   19a10:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
   19a12:	4bbc      	ldr	r3, [pc, #752]	; (19d04 <bus_fault+0x300>)
   19a14:	61fb      	str	r3, [r7, #28]
   19a16:	2302      	movs	r3, #2
   19a18:	713b      	strb	r3, [r7, #4]
   19a1a:	2300      	movs	r3, #0
   19a1c:	717b      	strb	r3, [r7, #5]
   19a1e:	71bb      	strb	r3, [r7, #6]
   19a20:	71fb      	strb	r3, [r7, #7]
   19a22:	687a      	ldr	r2, [r7, #4]
   19a24:	61ba      	str	r2, [r7, #24]
   19a26:	4619      	mov	r1, r3
   19a28:	f363 0100 	bfi	r1, r3, #0, #1
   19a2c:	f363 0141 	bfi	r1, r3, #1, #1
   19a30:	f363 0182 	bfi	r1, r3, #2, #1
   19a34:	f363 01c5 	bfi	r1, r3, #3, #3
   19a38:	2201      	movs	r2, #1
   19a3a:	f362 1188 	bfi	r1, r2, #6, #3
   19a3e:	2208      	movs	r2, #8
   19a40:	f362 2152 	bfi	r1, r2, #9, #10
   19a44:	f363 41de 	bfi	r1, r3, #19, #12
   19a48:	f363 71df 	bfi	r1, r3, #31, #1
   19a4c:	f107 0218 	add.w	r2, r7, #24
   19a50:	48ad      	ldr	r0, [pc, #692]	; (19d08 <bus_fault+0x304>)
   19a52:	f7fc ff7b 	bl	1694c <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   19a56:	4bad      	ldr	r3, [pc, #692]	; (19d0c <bus_fault+0x308>)
   19a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a5a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   19a5e:	d12a      	bne.n	19ab6 <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   19a60:	4baa      	ldr	r3, [pc, #680]	; (19d0c <bus_fault+0x308>)
   19a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a64:	f413 6f00 	tst.w	r3, #2048	; 0x800
   19a68:	d148      	bne.n	19afc <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   19a6a:	4ba8      	ldr	r3, [pc, #672]	; (19d0c <bus_fault+0x308>)
   19a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a6e:	f413 7f00 	tst.w	r3, #512	; 0x200
   19a72:	d166      	bne.n	19b42 <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   19a74:	4ba5      	ldr	r3, [pc, #660]	; (19d0c <bus_fault+0x308>)
   19a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a78:	f413 6f80 	tst.w	r3, #1024	; 0x400
   19a7c:	f040 80d5 	bne.w	19c2a <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   19a80:	4ba2      	ldr	r3, [pc, #648]	; (19d0c <bus_fault+0x308>)
   19a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a84:	f413 7f80 	tst.w	r3, #256	; 0x100
   19a88:	f040 80f2 	bne.w	19c70 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   19a8c:	4b9f      	ldr	r3, [pc, #636]	; (19d0c <bus_fault+0x308>)
   19a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19a90:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   19a94:	f040 8111 	bne.w	19cba <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   19a98:	4a9c      	ldr	r2, [pc, #624]	; (19d0c <bus_fault+0x308>)
   19a9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19a9c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   19aa0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   19aa2:	2101      	movs	r1, #1
   19aa4:	4628      	mov	r0, r5
   19aa6:	f01e fb1c 	bl	380e2 <memory_fault_recoverable>
   19aaa:	7020      	strb	r0, [r4, #0]
}
   19aac:	2000      	movs	r0, #0
   19aae:	37b0      	adds	r7, #176	; 0xb0
   19ab0:	46bd      	mov	sp, r7
   19ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
   19ab6:	4b96      	ldr	r3, [pc, #600]	; (19d10 <bus_fault+0x30c>)
   19ab8:	637b      	str	r3, [r7, #52]	; 0x34
   19aba:	2302      	movs	r3, #2
   19abc:	713b      	strb	r3, [r7, #4]
   19abe:	2300      	movs	r3, #0
   19ac0:	717b      	strb	r3, [r7, #5]
   19ac2:	71bb      	strb	r3, [r7, #6]
   19ac4:	71fb      	strb	r3, [r7, #7]
   19ac6:	687a      	ldr	r2, [r7, #4]
   19ac8:	633a      	str	r2, [r7, #48]	; 0x30
   19aca:	4619      	mov	r1, r3
   19acc:	f363 0100 	bfi	r1, r3, #0, #1
   19ad0:	f363 0141 	bfi	r1, r3, #1, #1
   19ad4:	f363 0182 	bfi	r1, r3, #2, #1
   19ad8:	f363 01c5 	bfi	r1, r3, #3, #3
   19adc:	2201      	movs	r2, #1
   19ade:	f362 1188 	bfi	r1, r2, #6, #3
   19ae2:	2208      	movs	r2, #8
   19ae4:	f362 2152 	bfi	r1, r2, #9, #10
   19ae8:	f363 41de 	bfi	r1, r3, #19, #12
   19aec:	f363 71df 	bfi	r1, r3, #31, #1
   19af0:	f107 0230 	add.w	r2, r7, #48	; 0x30
   19af4:	4884      	ldr	r0, [pc, #528]	; (19d08 <bus_fault+0x304>)
   19af6:	f7fc ff29 	bl	1694c <z_impl_z_log_msg_static_create>
   19afa:	e7b1      	b.n	19a60 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   19afc:	4b85      	ldr	r3, [pc, #532]	; (19d14 <bus_fault+0x310>)
   19afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   19b00:	2302      	movs	r3, #2
   19b02:	713b      	strb	r3, [r7, #4]
   19b04:	2300      	movs	r3, #0
   19b06:	717b      	strb	r3, [r7, #5]
   19b08:	71bb      	strb	r3, [r7, #6]
   19b0a:	71fb      	strb	r3, [r7, #7]
   19b0c:	687a      	ldr	r2, [r7, #4]
   19b0e:	64ba      	str	r2, [r7, #72]	; 0x48
   19b10:	4619      	mov	r1, r3
   19b12:	f363 0100 	bfi	r1, r3, #0, #1
   19b16:	f363 0141 	bfi	r1, r3, #1, #1
   19b1a:	f363 0182 	bfi	r1, r3, #2, #1
   19b1e:	f363 01c5 	bfi	r1, r3, #3, #3
   19b22:	2201      	movs	r2, #1
   19b24:	f362 1188 	bfi	r1, r2, #6, #3
   19b28:	2208      	movs	r2, #8
   19b2a:	f362 2152 	bfi	r1, r2, #9, #10
   19b2e:	f363 41de 	bfi	r1, r3, #19, #12
   19b32:	f363 71df 	bfi	r1, r3, #31, #1
   19b36:	f107 0248 	add.w	r2, r7, #72	; 0x48
   19b3a:	4873      	ldr	r0, [pc, #460]	; (19d08 <bus_fault+0x304>)
   19b3c:	f7fc ff06 	bl	1694c <z_impl_z_log_msg_static_create>
   19b40:	e793      	b.n	19a6a <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
   19b42:	4b75      	ldr	r3, [pc, #468]	; (19d18 <bus_fault+0x314>)
   19b44:	667b      	str	r3, [r7, #100]	; 0x64
   19b46:	2302      	movs	r3, #2
   19b48:	713b      	strb	r3, [r7, #4]
   19b4a:	2300      	movs	r3, #0
   19b4c:	717b      	strb	r3, [r7, #5]
   19b4e:	71bb      	strb	r3, [r7, #6]
   19b50:	71fb      	strb	r3, [r7, #7]
   19b52:	687a      	ldr	r2, [r7, #4]
   19b54:	663a      	str	r2, [r7, #96]	; 0x60
   19b56:	4619      	mov	r1, r3
   19b58:	f363 0100 	bfi	r1, r3, #0, #1
   19b5c:	f363 0141 	bfi	r1, r3, #1, #1
   19b60:	f363 0182 	bfi	r1, r3, #2, #1
   19b64:	f363 01c5 	bfi	r1, r3, #3, #3
   19b68:	2201      	movs	r2, #1
   19b6a:	f362 1188 	bfi	r1, r2, #6, #3
   19b6e:	2208      	movs	r2, #8
   19b70:	f362 2152 	bfi	r1, r2, #9, #10
   19b74:	f363 41de 	bfi	r1, r3, #19, #12
   19b78:	f363 71df 	bfi	r1, r3, #31, #1
   19b7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
   19b80:	4861      	ldr	r0, [pc, #388]	; (19d08 <bus_fault+0x304>)
   19b82:	f7fc fee3 	bl	1694c <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
   19b86:	4b61      	ldr	r3, [pc, #388]	; (19d0c <bus_fault+0x308>)
   19b88:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   19b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19b8c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   19b90:	f43f af70 	beq.w	19a74 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   19b94:	46e8      	mov	r8, sp
   19b96:	b088      	sub	sp, #32
   19b98:	466b      	mov	r3, sp
   19b9a:	f113 0210 	adds.w	r2, r3, #16
   19b9e:	d011      	beq.n	19bc4 <bus_fault+0x1c0>
   19ba0:	210c      	movs	r1, #12
   19ba2:	b152      	cbz	r2, 19bba <bus_fault+0x1b6>
   19ba4:	468c      	mov	ip, r1
   19ba6:	2904      	cmp	r1, #4
   19ba8:	dd03      	ble.n	19bb2 <bus_fault+0x1ae>
   19baa:	f8df e170 	ldr.w	lr, [pc, #368]	; 19d1c <bus_fault+0x318>
   19bae:	f8c3 e014 	str.w	lr, [r3, #20]
   19bb2:	f1bc 0f08 	cmp.w	ip, #8
   19bb6:	dd08      	ble.n	19bca <bus_fault+0x1c6>
   19bb8:	6198      	str	r0, [r3, #24]
   19bba:	290b      	cmp	r1, #11
   19bbc:	dd32      	ble.n	19c24 <bus_fault+0x220>
   19bbe:	f04f 0c0c 	mov.w	ip, #12
   19bc2:	e004      	b.n	19bce <bus_fault+0x1ca>
   19bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   19bc8:	e7eb      	b.n	19ba2 <bus_fault+0x19e>
   19bca:	f06f 0c1b 	mvn.w	ip, #27
   19bce:	b13a      	cbz	r2, 19be0 <bus_fault+0x1dc>
   19bd0:	2103      	movs	r1, #3
   19bd2:	7139      	strb	r1, [r7, #4]
   19bd4:	2100      	movs	r1, #0
   19bd6:	7179      	strb	r1, [r7, #5]
   19bd8:	71b9      	strb	r1, [r7, #6]
   19bda:	71f9      	strb	r1, [r7, #7]
   19bdc:	6878      	ldr	r0, [r7, #4]
   19bde:	6118      	str	r0, [r3, #16]
   19be0:	2100      	movs	r1, #0
   19be2:	f36f 0100 	bfc	r1, #0, #1
   19be6:	f36f 0141 	bfc	r1, #1, #1
   19bea:	f36f 0182 	bfc	r1, #2, #1
   19bee:	f36f 01c5 	bfc	r1, #3, #3
   19bf2:	2301      	movs	r3, #1
   19bf4:	f363 1188 	bfi	r1, r3, #6, #3
   19bf8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   19bfc:	f363 2152 	bfi	r1, r3, #9, #10
   19c00:	f36f 41de 	bfc	r1, #19, #12
   19c04:	f36f 71df 	bfc	r1, #31, #1
   19c08:	2300      	movs	r3, #0
   19c0a:	483f      	ldr	r0, [pc, #252]	; (19d08 <bus_fault+0x304>)
   19c0c:	f7fc fe9e 	bl	1694c <z_impl_z_log_msg_static_create>
   19c10:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   19c12:	2e00      	cmp	r6, #0
   19c14:	f43f af2e 	beq.w	19a74 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   19c18:	4a3c      	ldr	r2, [pc, #240]	; (19d0c <bus_fault+0x308>)
   19c1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19c1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   19c20:	6293      	str	r3, [r2, #40]	; 0x28
   19c22:	e727      	b.n	19a74 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   19c24:	f06f 0c1b 	mvn.w	ip, #27
   19c28:	e7d1      	b.n	19bce <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
   19c2a:	4b3d      	ldr	r3, [pc, #244]	; (19d20 <bus_fault+0x31c>)
   19c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   19c2e:	2302      	movs	r3, #2
   19c30:	713b      	strb	r3, [r7, #4]
   19c32:	2300      	movs	r3, #0
   19c34:	717b      	strb	r3, [r7, #5]
   19c36:	71bb      	strb	r3, [r7, #6]
   19c38:	71fb      	strb	r3, [r7, #7]
   19c3a:	687a      	ldr	r2, [r7, #4]
   19c3c:	67ba      	str	r2, [r7, #120]	; 0x78
   19c3e:	4619      	mov	r1, r3
   19c40:	f363 0100 	bfi	r1, r3, #0, #1
   19c44:	f363 0141 	bfi	r1, r3, #1, #1
   19c48:	f363 0182 	bfi	r1, r3, #2, #1
   19c4c:	f363 01c5 	bfi	r1, r3, #3, #3
   19c50:	2201      	movs	r2, #1
   19c52:	f362 1188 	bfi	r1, r2, #6, #3
   19c56:	2208      	movs	r2, #8
   19c58:	f362 2152 	bfi	r1, r2, #9, #10
   19c5c:	f363 41de 	bfi	r1, r3, #19, #12
   19c60:	f363 71df 	bfi	r1, r3, #31, #1
   19c64:	f107 0278 	add.w	r2, r7, #120	; 0x78
   19c68:	4827      	ldr	r0, [pc, #156]	; (19d08 <bus_fault+0x304>)
   19c6a:	f7fc fe6f 	bl	1694c <z_impl_z_log_msg_static_create>
   19c6e:	e707      	b.n	19a80 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
   19c70:	4b2c      	ldr	r3, [pc, #176]	; (19d24 <bus_fault+0x320>)
   19c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   19c76:	2302      	movs	r3, #2
   19c78:	713b      	strb	r3, [r7, #4]
   19c7a:	2300      	movs	r3, #0
   19c7c:	717b      	strb	r3, [r7, #5]
   19c7e:	71bb      	strb	r3, [r7, #6]
   19c80:	71fb      	strb	r3, [r7, #7]
   19c82:	687a      	ldr	r2, [r7, #4]
   19c84:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
   19c88:	4619      	mov	r1, r3
   19c8a:	f363 0100 	bfi	r1, r3, #0, #1
   19c8e:	f363 0141 	bfi	r1, r3, #1, #1
   19c92:	f363 0182 	bfi	r1, r3, #2, #1
   19c96:	f363 01c5 	bfi	r1, r3, #3, #3
   19c9a:	2201      	movs	r2, #1
   19c9c:	f362 1188 	bfi	r1, r2, #6, #3
   19ca0:	2208      	movs	r2, #8
   19ca2:	f362 2152 	bfi	r1, r2, #9, #10
   19ca6:	f363 41de 	bfi	r1, r3, #19, #12
   19caa:	f363 71df 	bfi	r1, r3, #31, #1
   19cae:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
   19cb2:	4815      	ldr	r0, [pc, #84]	; (19d08 <bus_fault+0x304>)
   19cb4:	f7fc fe4a 	bl	1694c <z_impl_z_log_msg_static_create>
   19cb8:	e6ee      	b.n	19a98 <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   19cba:	4b1b      	ldr	r3, [pc, #108]	; (19d28 <bus_fault+0x324>)
   19cbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   19cc0:	2302      	movs	r3, #2
   19cc2:	713b      	strb	r3, [r7, #4]
   19cc4:	2300      	movs	r3, #0
   19cc6:	717b      	strb	r3, [r7, #5]
   19cc8:	71bb      	strb	r3, [r7, #6]
   19cca:	71fb      	strb	r3, [r7, #7]
   19ccc:	687a      	ldr	r2, [r7, #4]
   19cce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   19cd2:	4619      	mov	r1, r3
   19cd4:	f363 0100 	bfi	r1, r3, #0, #1
   19cd8:	f363 0141 	bfi	r1, r3, #1, #1
   19cdc:	f363 0182 	bfi	r1, r3, #2, #1
   19ce0:	f363 01c5 	bfi	r1, r3, #3, #3
   19ce4:	2201      	movs	r2, #1
   19ce6:	f362 1188 	bfi	r1, r2, #6, #3
   19cea:	2208      	movs	r2, #8
   19cec:	f362 2152 	bfi	r1, r2, #9, #10
   19cf0:	f363 41de 	bfi	r1, r3, #19, #12
   19cf4:	f363 71df 	bfi	r1, r3, #31, #1
   19cf8:	f107 0290 	add.w	r2, r7, #144	; 0x90
   19cfc:	4802      	ldr	r0, [pc, #8]	; (19d08 <bus_fault+0x304>)
   19cfe:	f7fc fe25 	bl	1694c <z_impl_z_log_msg_static_create>
   19d02:	e6c9      	b.n	19a98 <bus_fault+0x94>
   19d04:	00041af0 	.word	0x00041af0
   19d08:	0003f488 	.word	0x0003f488
   19d0c:	e000ed00 	.word	0xe000ed00
   19d10:	00041b08 	.word	0x00041b08
   19d14:	00041970 	.word	0x00041970
   19d18:	00041b1c 	.word	0x00041b1c
   19d1c:	00041b38 	.word	0x00041b38
   19d20:	00041b50 	.word	0x00041b50
   19d24:	00041b6c 	.word	0x00041b6c
   19d28:	000419d4 	.word	0x000419d4

00019d2c <usage_fault>:
{
   19d2c:	b510      	push	{r4, lr}
   19d2e:	b0b2      	sub	sp, #200	; 0xc8
	PR_FAULT_INFO("***** USAGE FAULT *****");
   19d30:	4baf      	ldr	r3, [pc, #700]	; (19ff0 <usage_fault+0x2c4>)
   19d32:	9307      	str	r3, [sp, #28]
   19d34:	2302      	movs	r3, #2
   19d36:	f88d 3004 	strb.w	r3, [sp, #4]
   19d3a:	2300      	movs	r3, #0
   19d3c:	f88d 3005 	strb.w	r3, [sp, #5]
   19d40:	f88d 3006 	strb.w	r3, [sp, #6]
   19d44:	f88d 3007 	strb.w	r3, [sp, #7]
   19d48:	9a01      	ldr	r2, [sp, #4]
   19d4a:	9206      	str	r2, [sp, #24]
   19d4c:	4619      	mov	r1, r3
   19d4e:	f363 0100 	bfi	r1, r3, #0, #1
   19d52:	f363 0141 	bfi	r1, r3, #1, #1
   19d56:	f363 0182 	bfi	r1, r3, #2, #1
   19d5a:	f363 01c5 	bfi	r1, r3, #3, #3
   19d5e:	2201      	movs	r2, #1
   19d60:	f362 1188 	bfi	r1, r2, #6, #3
   19d64:	2208      	movs	r2, #8
   19d66:	f362 2152 	bfi	r1, r2, #9, #10
   19d6a:	f363 41de 	bfi	r1, r3, #19, #12
   19d6e:	f363 71df 	bfi	r1, r3, #31, #1
   19d72:	aa06      	add	r2, sp, #24
   19d74:	489f      	ldr	r0, [pc, #636]	; (19ff4 <usage_fault+0x2c8>)
   19d76:	f7fc fde9 	bl	1694c <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   19d7a:	4b9f      	ldr	r3, [pc, #636]	; (19ff8 <usage_fault+0x2cc>)
   19d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19d7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   19d82:	d12b      	bne.n	19ddc <usage_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   19d84:	4b9c      	ldr	r3, [pc, #624]	; (19ff8 <usage_fault+0x2cc>)
   19d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19d88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   19d8c:	d14c      	bne.n	19e28 <usage_fault+0xfc>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   19d8e:	4b9a      	ldr	r3, [pc, #616]	; (19ff8 <usage_fault+0x2cc>)
   19d90:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   19d92:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   19d96:	d16d      	bne.n	19e74 <usage_fault+0x148>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   19d98:	4b97      	ldr	r3, [pc, #604]	; (19ff8 <usage_fault+0x2cc>)
   19d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19d9c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   19da0:	f040 808e 	bne.w	19ec0 <usage_fault+0x194>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   19da4:	4b94      	ldr	r3, [pc, #592]	; (19ff8 <usage_fault+0x2cc>)
   19da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19da8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   19dac:	f040 80ae 	bne.w	19f0c <usage_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   19db0:	4b91      	ldr	r3, [pc, #580]	; (19ff8 <usage_fault+0x2cc>)
   19db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19db4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   19db8:	f040 80ce 	bne.w	19f58 <usage_fault+0x22c>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   19dbc:	4b8e      	ldr	r3, [pc, #568]	; (19ff8 <usage_fault+0x2cc>)
   19dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   19dc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   19dc4:	f040 80ee 	bne.w	19fa4 <usage_fault+0x278>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   19dc8:	4a8b      	ldr	r2, [pc, #556]	; (19ff8 <usage_fault+0x2cc>)
   19dca:	6a93      	ldr	r3, [r2, #40]	; 0x28
   19dcc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   19dd0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   19dd4:	6293      	str	r3, [r2, #40]	; 0x28
}
   19dd6:	4620      	mov	r0, r4
   19dd8:	b032      	add	sp, #200	; 0xc8
   19dda:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
   19ddc:	4b87      	ldr	r3, [pc, #540]	; (19ffc <usage_fault+0x2d0>)
   19dde:	930d      	str	r3, [sp, #52]	; 0x34
   19de0:	2302      	movs	r3, #2
   19de2:	f88d 3004 	strb.w	r3, [sp, #4]
   19de6:	2300      	movs	r3, #0
   19de8:	f88d 3005 	strb.w	r3, [sp, #5]
   19dec:	f88d 3006 	strb.w	r3, [sp, #6]
   19df0:	f88d 3007 	strb.w	r3, [sp, #7]
   19df4:	9a01      	ldr	r2, [sp, #4]
   19df6:	920c      	str	r2, [sp, #48]	; 0x30
   19df8:	4619      	mov	r1, r3
   19dfa:	f363 0100 	bfi	r1, r3, #0, #1
   19dfe:	f363 0141 	bfi	r1, r3, #1, #1
   19e02:	f363 0182 	bfi	r1, r3, #2, #1
   19e06:	f363 01c5 	bfi	r1, r3, #3, #3
   19e0a:	2201      	movs	r2, #1
   19e0c:	f362 1188 	bfi	r1, r2, #6, #3
   19e10:	2208      	movs	r2, #8
   19e12:	f362 2152 	bfi	r1, r2, #9, #10
   19e16:	f363 41de 	bfi	r1, r3, #19, #12
   19e1a:	f363 71df 	bfi	r1, r3, #31, #1
   19e1e:	aa0c      	add	r2, sp, #48	; 0x30
   19e20:	4874      	ldr	r0, [pc, #464]	; (19ff4 <usage_fault+0x2c8>)
   19e22:	f7fc fd93 	bl	1694c <z_impl_z_log_msg_static_create>
   19e26:	e7ad      	b.n	19d84 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
   19e28:	4b75      	ldr	r3, [pc, #468]	; (1a000 <usage_fault+0x2d4>)
   19e2a:	9313      	str	r3, [sp, #76]	; 0x4c
   19e2c:	2302      	movs	r3, #2
   19e2e:	f88d 3004 	strb.w	r3, [sp, #4]
   19e32:	2300      	movs	r3, #0
   19e34:	f88d 3005 	strb.w	r3, [sp, #5]
   19e38:	f88d 3006 	strb.w	r3, [sp, #6]
   19e3c:	f88d 3007 	strb.w	r3, [sp, #7]
   19e40:	9a01      	ldr	r2, [sp, #4]
   19e42:	9212      	str	r2, [sp, #72]	; 0x48
   19e44:	4619      	mov	r1, r3
   19e46:	f363 0100 	bfi	r1, r3, #0, #1
   19e4a:	f363 0141 	bfi	r1, r3, #1, #1
   19e4e:	f363 0182 	bfi	r1, r3, #2, #1
   19e52:	f363 01c5 	bfi	r1, r3, #3, #3
   19e56:	2201      	movs	r2, #1
   19e58:	f362 1188 	bfi	r1, r2, #6, #3
   19e5c:	2208      	movs	r2, #8
   19e5e:	f362 2152 	bfi	r1, r2, #9, #10
   19e62:	f363 41de 	bfi	r1, r3, #19, #12
   19e66:	f363 71df 	bfi	r1, r3, #31, #1
   19e6a:	aa12      	add	r2, sp, #72	; 0x48
   19e6c:	4861      	ldr	r0, [pc, #388]	; (19ff4 <usage_fault+0x2c8>)
   19e6e:	f7fc fd6d 	bl	1694c <z_impl_z_log_msg_static_create>
   19e72:	e78c      	b.n	19d8e <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   19e74:	4b63      	ldr	r3, [pc, #396]	; (1a004 <usage_fault+0x2d8>)
   19e76:	9319      	str	r3, [sp, #100]	; 0x64
   19e78:	2402      	movs	r4, #2
   19e7a:	f88d 4004 	strb.w	r4, [sp, #4]
   19e7e:	2300      	movs	r3, #0
   19e80:	f88d 3005 	strb.w	r3, [sp, #5]
   19e84:	f88d 3006 	strb.w	r3, [sp, #6]
   19e88:	f88d 3007 	strb.w	r3, [sp, #7]
   19e8c:	9a01      	ldr	r2, [sp, #4]
   19e8e:	9218      	str	r2, [sp, #96]	; 0x60
   19e90:	4619      	mov	r1, r3
   19e92:	f363 0100 	bfi	r1, r3, #0, #1
   19e96:	f363 0141 	bfi	r1, r3, #1, #1
   19e9a:	f363 0182 	bfi	r1, r3, #2, #1
   19e9e:	f363 01c5 	bfi	r1, r3, #3, #3
   19ea2:	2201      	movs	r2, #1
   19ea4:	f362 1188 	bfi	r1, r2, #6, #3
   19ea8:	2208      	movs	r2, #8
   19eaa:	f362 2152 	bfi	r1, r2, #9, #10
   19eae:	f363 41de 	bfi	r1, r3, #19, #12
   19eb2:	f363 71df 	bfi	r1, r3, #31, #1
   19eb6:	aa18      	add	r2, sp, #96	; 0x60
   19eb8:	484e      	ldr	r0, [pc, #312]	; (19ff4 <usage_fault+0x2c8>)
   19eba:	f7fc fd47 	bl	1694c <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
   19ebe:	e76b      	b.n	19d98 <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
   19ec0:	4b51      	ldr	r3, [pc, #324]	; (1a008 <usage_fault+0x2dc>)
   19ec2:	931f      	str	r3, [sp, #124]	; 0x7c
   19ec4:	2302      	movs	r3, #2
   19ec6:	f88d 3004 	strb.w	r3, [sp, #4]
   19eca:	2300      	movs	r3, #0
   19ecc:	f88d 3005 	strb.w	r3, [sp, #5]
   19ed0:	f88d 3006 	strb.w	r3, [sp, #6]
   19ed4:	f88d 3007 	strb.w	r3, [sp, #7]
   19ed8:	9a01      	ldr	r2, [sp, #4]
   19eda:	921e      	str	r2, [sp, #120]	; 0x78
   19edc:	4619      	mov	r1, r3
   19ede:	f363 0100 	bfi	r1, r3, #0, #1
   19ee2:	f363 0141 	bfi	r1, r3, #1, #1
   19ee6:	f363 0182 	bfi	r1, r3, #2, #1
   19eea:	f363 01c5 	bfi	r1, r3, #3, #3
   19eee:	2201      	movs	r2, #1
   19ef0:	f362 1188 	bfi	r1, r2, #6, #3
   19ef4:	2208      	movs	r2, #8
   19ef6:	f362 2152 	bfi	r1, r2, #9, #10
   19efa:	f363 41de 	bfi	r1, r3, #19, #12
   19efe:	f363 71df 	bfi	r1, r3, #31, #1
   19f02:	aa1e      	add	r2, sp, #120	; 0x78
   19f04:	483b      	ldr	r0, [pc, #236]	; (19ff4 <usage_fault+0x2c8>)
   19f06:	f7fc fd21 	bl	1694c <z_impl_z_log_msg_static_create>
   19f0a:	e74b      	b.n	19da4 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   19f0c:	4b3f      	ldr	r3, [pc, #252]	; (1a00c <usage_fault+0x2e0>)
   19f0e:	9325      	str	r3, [sp, #148]	; 0x94
   19f10:	2302      	movs	r3, #2
   19f12:	f88d 3004 	strb.w	r3, [sp, #4]
   19f16:	2300      	movs	r3, #0
   19f18:	f88d 3005 	strb.w	r3, [sp, #5]
   19f1c:	f88d 3006 	strb.w	r3, [sp, #6]
   19f20:	f88d 3007 	strb.w	r3, [sp, #7]
   19f24:	9a01      	ldr	r2, [sp, #4]
   19f26:	9224      	str	r2, [sp, #144]	; 0x90
   19f28:	4619      	mov	r1, r3
   19f2a:	f363 0100 	bfi	r1, r3, #0, #1
   19f2e:	f363 0141 	bfi	r1, r3, #1, #1
   19f32:	f363 0182 	bfi	r1, r3, #2, #1
   19f36:	f363 01c5 	bfi	r1, r3, #3, #3
   19f3a:	2201      	movs	r2, #1
   19f3c:	f362 1188 	bfi	r1, r2, #6, #3
   19f40:	2208      	movs	r2, #8
   19f42:	f362 2152 	bfi	r1, r2, #9, #10
   19f46:	f363 41de 	bfi	r1, r3, #19, #12
   19f4a:	f363 71df 	bfi	r1, r3, #31, #1
   19f4e:	aa24      	add	r2, sp, #144	; 0x90
   19f50:	4828      	ldr	r0, [pc, #160]	; (19ff4 <usage_fault+0x2c8>)
   19f52:	f7fc fcfb 	bl	1694c <z_impl_z_log_msg_static_create>
   19f56:	e72b      	b.n	19db0 <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   19f58:	4b2d      	ldr	r3, [pc, #180]	; (1a010 <usage_fault+0x2e4>)
   19f5a:	932b      	str	r3, [sp, #172]	; 0xac
   19f5c:	2302      	movs	r3, #2
   19f5e:	f88d 3004 	strb.w	r3, [sp, #4]
   19f62:	2300      	movs	r3, #0
   19f64:	f88d 3005 	strb.w	r3, [sp, #5]
   19f68:	f88d 3006 	strb.w	r3, [sp, #6]
   19f6c:	f88d 3007 	strb.w	r3, [sp, #7]
   19f70:	9a01      	ldr	r2, [sp, #4]
   19f72:	922a      	str	r2, [sp, #168]	; 0xa8
   19f74:	4619      	mov	r1, r3
   19f76:	f363 0100 	bfi	r1, r3, #0, #1
   19f7a:	f363 0141 	bfi	r1, r3, #1, #1
   19f7e:	f363 0182 	bfi	r1, r3, #2, #1
   19f82:	f363 01c5 	bfi	r1, r3, #3, #3
   19f86:	2201      	movs	r2, #1
   19f88:	f362 1188 	bfi	r1, r2, #6, #3
   19f8c:	2208      	movs	r2, #8
   19f8e:	f362 2152 	bfi	r1, r2, #9, #10
   19f92:	f363 41de 	bfi	r1, r3, #19, #12
   19f96:	f363 71df 	bfi	r1, r3, #31, #1
   19f9a:	aa2a      	add	r2, sp, #168	; 0xa8
   19f9c:	4815      	ldr	r0, [pc, #84]	; (19ff4 <usage_fault+0x2c8>)
   19f9e:	f7fc fcd5 	bl	1694c <z_impl_z_log_msg_static_create>
   19fa2:	e70b      	b.n	19dbc <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   19fa4:	4b1b      	ldr	r3, [pc, #108]	; (1a014 <usage_fault+0x2e8>)
   19fa6:	9331      	str	r3, [sp, #196]	; 0xc4
   19fa8:	2302      	movs	r3, #2
   19faa:	f88d 3004 	strb.w	r3, [sp, #4]
   19fae:	2300      	movs	r3, #0
   19fb0:	f88d 3005 	strb.w	r3, [sp, #5]
   19fb4:	f88d 3006 	strb.w	r3, [sp, #6]
   19fb8:	f88d 3007 	strb.w	r3, [sp, #7]
   19fbc:	9a01      	ldr	r2, [sp, #4]
   19fbe:	9230      	str	r2, [sp, #192]	; 0xc0
   19fc0:	4619      	mov	r1, r3
   19fc2:	f363 0100 	bfi	r1, r3, #0, #1
   19fc6:	f363 0141 	bfi	r1, r3, #1, #1
   19fca:	f363 0182 	bfi	r1, r3, #2, #1
   19fce:	f363 01c5 	bfi	r1, r3, #3, #3
   19fd2:	2201      	movs	r2, #1
   19fd4:	f362 1188 	bfi	r1, r2, #6, #3
   19fd8:	2208      	movs	r2, #8
   19fda:	f362 2152 	bfi	r1, r2, #9, #10
   19fde:	f363 41de 	bfi	r1, r3, #19, #12
   19fe2:	f363 71df 	bfi	r1, r3, #31, #1
   19fe6:	aa30      	add	r2, sp, #192	; 0xc0
   19fe8:	4802      	ldr	r0, [pc, #8]	; (19ff4 <usage_fault+0x2c8>)
   19fea:	f7fc fcaf 	bl	1694c <z_impl_z_log_msg_static_create>
   19fee:	e6eb      	b.n	19dc8 <usage_fault+0x9c>
   19ff0:	00041b84 	.word	0x00041b84
   19ff4:	0003f488 	.word	0x0003f488
   19ff8:	e000ed00 	.word	0xe000ed00
   19ffc:	00041b9c 	.word	0x00041b9c
   1a000:	00041bb0 	.word	0x00041bb0
   1a004:	00041bcc 	.word	0x00041bcc
   1a008:	00041bf8 	.word	0x00041bf8
   1a00c:	00041c18 	.word	0x00041c18
   1a010:	00041c40 	.word	0x00041c40
   1a014:	00041c5c 	.word	0x00041c5c

0001a018 <hard_fault>:
{
   1a018:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a01a:	b09b      	sub	sp, #108	; 0x6c
   1a01c:	af00      	add	r7, sp, #0
   1a01e:	4605      	mov	r5, r0
   1a020:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   1a022:	4b95      	ldr	r3, [pc, #596]	; (1a278 <hard_fault+0x260>)
   1a024:	61fb      	str	r3, [r7, #28]
   1a026:	2302      	movs	r3, #2
   1a028:	713b      	strb	r3, [r7, #4]
   1a02a:	2400      	movs	r4, #0
   1a02c:	717c      	strb	r4, [r7, #5]
   1a02e:	71bc      	strb	r4, [r7, #6]
   1a030:	71fc      	strb	r4, [r7, #7]
   1a032:	687b      	ldr	r3, [r7, #4]
   1a034:	61bb      	str	r3, [r7, #24]
   1a036:	4621      	mov	r1, r4
   1a038:	f364 0100 	bfi	r1, r4, #0, #1
   1a03c:	f364 0141 	bfi	r1, r4, #1, #1
   1a040:	f364 0182 	bfi	r1, r4, #2, #1
   1a044:	f364 01c5 	bfi	r1, r4, #3, #3
   1a048:	2301      	movs	r3, #1
   1a04a:	f363 1188 	bfi	r1, r3, #6, #3
   1a04e:	2308      	movs	r3, #8
   1a050:	f363 2152 	bfi	r1, r3, #9, #10
   1a054:	f364 41de 	bfi	r1, r4, #19, #12
   1a058:	f364 71df 	bfi	r1, r4, #31, #1
   1a05c:	4623      	mov	r3, r4
   1a05e:	f107 0218 	add.w	r2, r7, #24
   1a062:	4886      	ldr	r0, [pc, #536]	; (1a27c <hard_fault+0x264>)
   1a064:	f7fc fc72 	bl	1694c <z_impl_z_log_msg_static_create>
	*recoverable = false;
   1a068:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1a06a:	4b85      	ldr	r3, [pc, #532]	; (1a280 <hard_fault+0x268>)
   1a06c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1a06e:	f014 0402 	ands.w	r4, r4, #2
   1a072:	d148      	bne.n	1a106 <hard_fault+0xee>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1a074:	4b82      	ldr	r3, [pc, #520]	; (1a280 <hard_fault+0x268>)
   1a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a078:	2b00      	cmp	r3, #0
   1a07a:	db6b      	blt.n	1a154 <hard_fault+0x13c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1a07c:	4b80      	ldr	r3, [pc, #512]	; (1a280 <hard_fault+0x268>)
   1a07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a080:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   1a084:	f000 80e7 	beq.w	1a256 <hard_fault+0x23e>
		PR_EXC("  Fault escalation (see below)");
   1a088:	4b7e      	ldr	r3, [pc, #504]	; (1a284 <hard_fault+0x26c>)
   1a08a:	637b      	str	r3, [r7, #52]	; 0x34
   1a08c:	2302      	movs	r3, #2
   1a08e:	713b      	strb	r3, [r7, #4]
   1a090:	2300      	movs	r3, #0
   1a092:	717b      	strb	r3, [r7, #5]
   1a094:	71bb      	strb	r3, [r7, #6]
   1a096:	71fb      	strb	r3, [r7, #7]
   1a098:	687a      	ldr	r2, [r7, #4]
   1a09a:	633a      	str	r2, [r7, #48]	; 0x30
   1a09c:	4619      	mov	r1, r3
   1a09e:	f363 0100 	bfi	r1, r3, #0, #1
   1a0a2:	f363 0141 	bfi	r1, r3, #1, #1
   1a0a6:	f363 0182 	bfi	r1, r3, #2, #1
   1a0aa:	f363 01c5 	bfi	r1, r3, #3, #3
   1a0ae:	2201      	movs	r2, #1
   1a0b0:	f362 1188 	bfi	r1, r2, #6, #3
   1a0b4:	2208      	movs	r2, #8
   1a0b6:	f362 2152 	bfi	r1, r2, #9, #10
   1a0ba:	f363 41de 	bfi	r1, r3, #19, #12
   1a0be:	f363 71df 	bfi	r1, r3, #31, #1
   1a0c2:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1a0c6:	486d      	ldr	r0, [pc, #436]	; (1a27c <hard_fault+0x264>)
   1a0c8:	f7fc fc40 	bl	1694c <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
   1a0cc:	4628      	mov	r0, r5
   1a0ce:	f7ff fa8b 	bl	195e8 <z_arm_is_synchronous_svc>
   1a0d2:	2800      	cmp	r0, #0
   1a0d4:	f000 808d 	beq.w	1a1f2 <hard_fault+0x1da>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1a0d8:	682c      	ldr	r4, [r5, #0]
   1a0da:	466e      	mov	r6, sp
   1a0dc:	b088      	sub	sp, #32
   1a0de:	466b      	mov	r3, sp
   1a0e0:	f113 0210 	adds.w	r2, r3, #16
   1a0e4:	d059      	beq.n	1a19a <hard_fault+0x182>
   1a0e6:	210c      	movs	r1, #12
   1a0e8:	b14a      	cbz	r2, 1a0fe <hard_fault+0xe6>
   1a0ea:	4608      	mov	r0, r1
   1a0ec:	2904      	cmp	r1, #4
   1a0ee:	dd03      	ble.n	1a0f8 <hard_fault+0xe0>
   1a0f0:	f8df c194 	ldr.w	ip, [pc, #404]	; 1a288 <hard_fault+0x270>
   1a0f4:	f8c3 c014 	str.w	ip, [r3, #20]
   1a0f8:	2808      	cmp	r0, #8
   1a0fa:	dd51      	ble.n	1a1a0 <hard_fault+0x188>
   1a0fc:	619c      	str	r4, [r3, #24]
   1a0fe:	290b      	cmp	r1, #11
   1a100:	dd74      	ble.n	1a1ec <hard_fault+0x1d4>
   1a102:	240c      	movs	r4, #12
   1a104:	e04e      	b.n	1a1a4 <hard_fault+0x18c>
		PR_EXC("  Bus fault on vector table read");
   1a106:	4b61      	ldr	r3, [pc, #388]	; (1a28c <hard_fault+0x274>)
   1a108:	667b      	str	r3, [r7, #100]	; 0x64
   1a10a:	2302      	movs	r3, #2
   1a10c:	713b      	strb	r3, [r7, #4]
   1a10e:	2400      	movs	r4, #0
   1a110:	717c      	strb	r4, [r7, #5]
   1a112:	71bc      	strb	r4, [r7, #6]
   1a114:	71fc      	strb	r4, [r7, #7]
   1a116:	687b      	ldr	r3, [r7, #4]
   1a118:	663b      	str	r3, [r7, #96]	; 0x60
   1a11a:	4621      	mov	r1, r4
   1a11c:	f364 0100 	bfi	r1, r4, #0, #1
   1a120:	f364 0141 	bfi	r1, r4, #1, #1
   1a124:	f364 0182 	bfi	r1, r4, #2, #1
   1a128:	f364 01c5 	bfi	r1, r4, #3, #3
   1a12c:	2301      	movs	r3, #1
   1a12e:	f363 1188 	bfi	r1, r3, #6, #3
   1a132:	2308      	movs	r3, #8
   1a134:	f363 2152 	bfi	r1, r3, #9, #10
   1a138:	f364 41de 	bfi	r1, r4, #19, #12
   1a13c:	f364 71df 	bfi	r1, r4, #31, #1
   1a140:	4623      	mov	r3, r4
   1a142:	f107 0260 	add.w	r2, r7, #96	; 0x60
   1a146:	484d      	ldr	r0, [pc, #308]	; (1a27c <hard_fault+0x264>)
   1a148:	f7fc fc00 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1a14c:	4620      	mov	r0, r4
   1a14e:	376c      	adds	r7, #108	; 0x6c
   1a150:	46bd      	mov	sp, r7
   1a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Debug event");
   1a154:	4b4e      	ldr	r3, [pc, #312]	; (1a290 <hard_fault+0x278>)
   1a156:	64fb      	str	r3, [r7, #76]	; 0x4c
   1a158:	2302      	movs	r3, #2
   1a15a:	713b      	strb	r3, [r7, #4]
   1a15c:	2300      	movs	r3, #0
   1a15e:	717b      	strb	r3, [r7, #5]
   1a160:	71bb      	strb	r3, [r7, #6]
   1a162:	71fb      	strb	r3, [r7, #7]
   1a164:	687a      	ldr	r2, [r7, #4]
   1a166:	64ba      	str	r2, [r7, #72]	; 0x48
   1a168:	4619      	mov	r1, r3
   1a16a:	f363 0100 	bfi	r1, r3, #0, #1
   1a16e:	f363 0141 	bfi	r1, r3, #1, #1
   1a172:	f363 0182 	bfi	r1, r3, #2, #1
   1a176:	f363 01c5 	bfi	r1, r3, #3, #3
   1a17a:	2201      	movs	r2, #1
   1a17c:	f362 1188 	bfi	r1, r2, #6, #3
   1a180:	2208      	movs	r2, #8
   1a182:	f362 2152 	bfi	r1, r2, #9, #10
   1a186:	f363 41de 	bfi	r1, r3, #19, #12
   1a18a:	f363 71df 	bfi	r1, r3, #31, #1
   1a18e:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1a192:	483a      	ldr	r0, [pc, #232]	; (1a27c <hard_fault+0x264>)
   1a194:	f7fc fbda 	bl	1694c <z_impl_z_log_msg_static_create>
   1a198:	e7d8      	b.n	1a14c <hard_fault+0x134>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1a19a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a19e:	e7a3      	b.n	1a0e8 <hard_fault+0xd0>
   1a1a0:	f06f 041b 	mvn.w	r4, #27
   1a1a4:	b13a      	cbz	r2, 1a1b6 <hard_fault+0x19e>
   1a1a6:	2103      	movs	r1, #3
   1a1a8:	7139      	strb	r1, [r7, #4]
   1a1aa:	2100      	movs	r1, #0
   1a1ac:	7179      	strb	r1, [r7, #5]
   1a1ae:	71b9      	strb	r1, [r7, #6]
   1a1b0:	71f9      	strb	r1, [r7, #7]
   1a1b2:	6878      	ldr	r0, [r7, #4]
   1a1b4:	6118      	str	r0, [r3, #16]
   1a1b6:	2100      	movs	r1, #0
   1a1b8:	f36f 0100 	bfc	r1, #0, #1
   1a1bc:	f36f 0141 	bfc	r1, #1, #1
   1a1c0:	f36f 0182 	bfc	r1, #2, #1
   1a1c4:	f36f 01c5 	bfc	r1, #3, #3
   1a1c8:	2301      	movs	r3, #1
   1a1ca:	f363 1188 	bfi	r1, r3, #6, #3
   1a1ce:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1a1d2:	f364 2152 	bfi	r1, r4, #9, #10
   1a1d6:	f36f 41de 	bfc	r1, #19, #12
   1a1da:	f36f 71df 	bfc	r1, #31, #1
   1a1de:	2300      	movs	r3, #0
   1a1e0:	4826      	ldr	r0, [pc, #152]	; (1a27c <hard_fault+0x264>)
   1a1e2:	f7fc fbb3 	bl	1694c <z_impl_z_log_msg_static_create>
   1a1e6:	46b5      	mov	sp, r6
			reason = esf->basic.r0;
   1a1e8:	682c      	ldr	r4, [r5, #0]
   1a1ea:	e7af      	b.n	1a14c <hard_fault+0x134>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1a1ec:	f06f 041b 	mvn.w	r4, #27
   1a1f0:	e7d8      	b.n	1a1a4 <hard_fault+0x18c>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1a1f2:	4b23      	ldr	r3, [pc, #140]	; (1a280 <hard_fault+0x268>)
   1a1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a1f6:	f013 0fff 	tst.w	r3, #255	; 0xff
   1a1fa:	d10e      	bne.n	1a21a <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1a1fc:	4b20      	ldr	r3, [pc, #128]	; (1a280 <hard_fault+0x268>)
   1a1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a200:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   1a204:	d110      	bne.n	1a228 <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   1a206:	4b1e      	ldr	r3, [pc, #120]	; (1a280 <hard_fault+0x268>)
   1a208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1a20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1a20e:	d312      	bcc.n	1a236 <hard_fault+0x21e>
			reason = usage_fault(esf);
   1a210:	4628      	mov	r0, r5
   1a212:	f7ff fd8b 	bl	19d2c <usage_fault>
   1a216:	4604      	mov	r4, r0
   1a218:	e798      	b.n	1a14c <hard_fault+0x134>
			reason = mem_manage_fault(esf, 1, recoverable);
   1a21a:	4632      	mov	r2, r6
   1a21c:	2101      	movs	r1, #1
   1a21e:	4628      	mov	r0, r5
   1a220:	f7ff fa56 	bl	196d0 <mem_manage_fault>
   1a224:	4604      	mov	r4, r0
   1a226:	e791      	b.n	1a14c <hard_fault+0x134>
			reason = bus_fault(esf, 1, recoverable);
   1a228:	4632      	mov	r2, r6
   1a22a:	2101      	movs	r1, #1
   1a22c:	4628      	mov	r0, r5
   1a22e:	f7ff fbe9 	bl	19a04 <bus_fault>
   1a232:	4604      	mov	r4, r0
   1a234:	e78a      	b.n	1a14c <hard_fault+0x134>
			__ASSERT(0,
   1a236:	4c17      	ldr	r4, [pc, #92]	; (1a294 <hard_fault+0x27c>)
   1a238:	f240 23f2 	movw	r3, #754	; 0x2f2
   1a23c:	4622      	mov	r2, r4
   1a23e:	4916      	ldr	r1, [pc, #88]	; (1a298 <hard_fault+0x280>)
   1a240:	4816      	ldr	r0, [pc, #88]	; (1a29c <hard_fault+0x284>)
   1a242:	f01c f827 	bl	36294 <assert_print>
   1a246:	4816      	ldr	r0, [pc, #88]	; (1a2a0 <hard_fault+0x288>)
   1a248:	f01c f824 	bl	36294 <assert_print>
   1a24c:	f240 21f2 	movw	r1, #754	; 0x2f2
   1a250:	4620      	mov	r0, r4
   1a252:	f01c f818 	bl	36286 <assert_post_action>
		__ASSERT(0,
   1a256:	4c0f      	ldr	r4, [pc, #60]	; (1a294 <hard_fault+0x27c>)
   1a258:	f240 23f6 	movw	r3, #758	; 0x2f6
   1a25c:	4622      	mov	r2, r4
   1a25e:	490e      	ldr	r1, [pc, #56]	; (1a298 <hard_fault+0x280>)
   1a260:	480e      	ldr	r0, [pc, #56]	; (1a29c <hard_fault+0x284>)
   1a262:	f01c f817 	bl	36294 <assert_print>
   1a266:	480f      	ldr	r0, [pc, #60]	; (1a2a4 <hard_fault+0x28c>)
   1a268:	f01c f814 	bl	36294 <assert_print>
   1a26c:	f240 21f6 	movw	r1, #758	; 0x2f6
   1a270:	4620      	mov	r0, r4
   1a272:	f01c f808 	bl	36286 <assert_post_action>
   1a276:	bf00      	nop
   1a278:	00041c88 	.word	0x00041c88
   1a27c:	0003f488 	.word	0x0003f488
   1a280:	e000ed00 	.word	0xe000ed00
   1a284:	00041cd4 	.word	0x00041cd4
   1a288:	00041cf4 	.word	0x00041cf4
   1a28c:	00041ca0 	.word	0x00041ca0
   1a290:	00041cc4 	.word	0x00041cc4
   1a294:	00041a04 	.word	0x00041a04
   1a298:	0003f964 	.word	0x0003f964
   1a29c:	0003f72c 	.word	0x0003f72c
   1a2a0:	00041d10 	.word	0x00041d10
   1a2a4:	00041d34 	.word	0x00041d34

0001a2a8 <debug_monitor>:
{
   1a2a8:	b500      	push	{lr}
   1a2aa:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
   1a2b0:	4a13      	ldr	r2, [pc, #76]	; (1a300 <debug_monitor+0x58>)
   1a2b2:	9207      	str	r2, [sp, #28]
   1a2b4:	2202      	movs	r2, #2
   1a2b6:	f88d 2004 	strb.w	r2, [sp, #4]
   1a2ba:	f88d 3005 	strb.w	r3, [sp, #5]
   1a2be:	f88d 3006 	strb.w	r3, [sp, #6]
   1a2c2:	f88d 3007 	strb.w	r3, [sp, #7]
   1a2c6:	9a01      	ldr	r2, [sp, #4]
   1a2c8:	9206      	str	r2, [sp, #24]
   1a2ca:	4619      	mov	r1, r3
   1a2cc:	f363 0100 	bfi	r1, r3, #0, #1
   1a2d0:	f363 0141 	bfi	r1, r3, #1, #1
   1a2d4:	f363 0182 	bfi	r1, r3, #2, #1
   1a2d8:	f363 01c5 	bfi	r1, r3, #3, #3
   1a2dc:	2201      	movs	r2, #1
   1a2de:	f362 1188 	bfi	r1, r2, #6, #3
   1a2e2:	2208      	movs	r2, #8
   1a2e4:	f362 2152 	bfi	r1, r2, #9, #10
   1a2e8:	f363 41de 	bfi	r1, r3, #19, #12
   1a2ec:	f363 71df 	bfi	r1, r3, #31, #1
   1a2f0:	aa06      	add	r2, sp, #24
   1a2f2:	4804      	ldr	r0, [pc, #16]	; (1a304 <debug_monitor+0x5c>)
   1a2f4:	f7fc fb2a 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1a2f8:	b009      	add	sp, #36	; 0x24
   1a2fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1a2fe:	bf00      	nop
   1a300:	00041d64 	.word	0x00041d64
   1a304:	0003f488 	.word	0x0003f488

0001a308 <reserved_exception>:
{
   1a308:	b590      	push	{r4, r7, lr}
   1a30a:	b083      	sub	sp, #12
   1a30c:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
   1a30e:	290f      	cmp	r1, #15
   1a310:	dc23      	bgt.n	1a35a <reserved_exception+0x52>
   1a312:	4c30      	ldr	r4, [pc, #192]	; (1a3d4 <reserved_exception+0xcc>)
   1a314:	3910      	subs	r1, #16
   1a316:	2300      	movs	r3, #0
   1a318:	713b      	strb	r3, [r7, #4]
   1a31a:	2302      	movs	r3, #2
   1a31c:	717b      	strb	r3, [r7, #5]
   1a31e:	b08a      	sub	sp, #40	; 0x28
   1a320:	46ec      	mov	ip, sp
   1a322:	f11c 0210 	adds.w	r2, ip, #16
   1a326:	d01a      	beq.n	1a35e <reserved_exception+0x56>
   1a328:	2012      	movs	r0, #18
   1a32a:	b122      	cbz	r2, 1a336 <reserved_exception+0x2e>
   1a32c:	2804      	cmp	r0, #4
   1a32e:	dd02      	ble.n	1a336 <reserved_exception+0x2e>
   1a330:	4b29      	ldr	r3, [pc, #164]	; (1a3d8 <reserved_exception+0xd0>)
   1a332:	f8cc 3014 	str.w	r3, [ip, #20]
   1a336:	2300      	movs	r3, #0
   1a338:	703b      	strb	r3, [r7, #0]
   1a33a:	2302      	movs	r3, #2
   1a33c:	707b      	strb	r3, [r7, #1]
   1a33e:	b1e2      	cbz	r2, 1a37a <reserved_exception+0x72>
   1a340:	4603      	mov	r3, r0
   1a342:	2808      	cmp	r0, #8
   1a344:	dd01      	ble.n	1a34a <reserved_exception+0x42>
   1a346:	f8cc 4018 	str.w	r4, [ip, #24]
   1a34a:	2b0c      	cmp	r3, #12
   1a34c:	dd01      	ble.n	1a352 <reserved_exception+0x4a>
   1a34e:	f8cc 101c 	str.w	r1, [ip, #28]
   1a352:	f10c 0320 	add.w	r3, ip, #32
   1a356:	2100      	movs	r1, #0
   1a358:	e00d      	b.n	1a376 <reserved_exception+0x6e>
   1a35a:	4c20      	ldr	r4, [pc, #128]	; (1a3dc <reserved_exception+0xd4>)
   1a35c:	e7da      	b.n	1a314 <reserved_exception+0xc>
   1a35e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a362:	e7e2      	b.n	1a32a <reserved_exception+0x22>
   1a364:	f101 0408 	add.w	r4, r1, #8
   1a368:	eb04 0e07 	add.w	lr, r4, r7
   1a36c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
   1a370:	f803 eb01 	strb.w	lr, [r3], #1
   1a374:	3101      	adds	r1, #1
   1a376:	2901      	cmp	r1, #1
   1a378:	d9f4      	bls.n	1a364 <reserved_exception+0x5c>
   1a37a:	2811      	cmp	r0, #17
   1a37c:	dd26      	ble.n	1a3cc <reserved_exception+0xc4>
   1a37e:	2312      	movs	r3, #18
   1a380:	b14a      	cbz	r2, 1a396 <reserved_exception+0x8e>
   1a382:	2104      	movs	r1, #4
   1a384:	7139      	strb	r1, [r7, #4]
   1a386:	2100      	movs	r1, #0
   1a388:	7179      	strb	r1, [r7, #5]
   1a38a:	71b9      	strb	r1, [r7, #6]
   1a38c:	2101      	movs	r1, #1
   1a38e:	71f9      	strb	r1, [r7, #7]
   1a390:	6878      	ldr	r0, [r7, #4]
   1a392:	f8cc 0010 	str.w	r0, [ip, #16]
   1a396:	2100      	movs	r1, #0
   1a398:	f36f 0100 	bfc	r1, #0, #1
   1a39c:	f36f 0141 	bfc	r1, #1, #1
   1a3a0:	f36f 0182 	bfc	r1, #2, #1
   1a3a4:	f36f 01c5 	bfc	r1, #3, #3
   1a3a8:	2001      	movs	r0, #1
   1a3aa:	f360 1188 	bfi	r1, r0, #6, #3
   1a3ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1a3b2:	f363 2152 	bfi	r1, r3, #9, #10
   1a3b6:	f36f 41de 	bfc	r1, #19, #12
   1a3ba:	f36f 71df 	bfc	r1, #31, #1
   1a3be:	2300      	movs	r3, #0
   1a3c0:	4807      	ldr	r0, [pc, #28]	; (1a3e0 <reserved_exception+0xd8>)
   1a3c2:	f7fc fac3 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1a3c6:	370c      	adds	r7, #12
   1a3c8:	46bd      	mov	sp, r7
   1a3ca:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   1a3cc:	f06f 031b 	mvn.w	r3, #27
   1a3d0:	e7d6      	b.n	1a380 <reserved_exception+0x78>
   1a3d2:	bf00      	nop
   1a3d4:	00041d88 	.word	0x00041d88
   1a3d8:	00041dbc 	.word	0x00041dbc
   1a3dc:	00041da0 	.word	0x00041da0
   1a3e0:	0003f488 	.word	0x0003f488

0001a3e4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   1a3e4:	b530      	push	{r4, r5, lr}
   1a3e6:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1a3e8:	4b23      	ldr	r3, [pc, #140]	; (1a478 <z_arm_fault+0x94>)
   1a3ea:	685c      	ldr	r4, [r3, #4]
   1a3ec:	f3c4 0408 	ubfx	r4, r4, #0, #9
   1a3f0:	2300      	movs	r3, #0
   1a3f2:	f383 8811 	msr	BASEPRI, r3
   1a3f6:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
   1a3fa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   1a3fe:	f7ff f911 	bl	19624 <get_esf>
	__ASSERT(esf != NULL,
   1a402:	b158      	cbz	r0, 1a41c <z_arm_fault+0x38>
   1a404:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   1a406:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1a40a:	4621      	mov	r1, r4
   1a40c:	f01d fe6b 	bl	380e6 <fault_handle>
   1a410:	4604      	mov	r4, r0
	if (recoverable) {
   1a412:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1a416:	b18b      	cbz	r3, 1a43c <z_arm_fault+0x58>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   1a418:	b00b      	add	sp, #44	; 0x2c
   1a41a:	bd30      	pop	{r4, r5, pc}
	__ASSERT(esf != NULL,
   1a41c:	4c17      	ldr	r4, [pc, #92]	; (1a47c <z_arm_fault+0x98>)
   1a41e:	f44f 6384 	mov.w	r3, #1056	; 0x420
   1a422:	4622      	mov	r2, r4
   1a424:	4916      	ldr	r1, [pc, #88]	; (1a480 <z_arm_fault+0x9c>)
   1a426:	4817      	ldr	r0, [pc, #92]	; (1a484 <z_arm_fault+0xa0>)
   1a428:	f01b ff34 	bl	36294 <assert_print>
   1a42c:	4816      	ldr	r0, [pc, #88]	; (1a488 <z_arm_fault+0xa4>)
   1a42e:	f01b ff31 	bl	36294 <assert_print>
   1a432:	f44f 6184 	mov.w	r1, #1056	; 0x420
   1a436:	4620      	mov	r0, r4
   1a438:	f01b ff25 	bl	36286 <assert_post_action>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1a43c:	2220      	movs	r2, #32
   1a43e:	4629      	mov	r1, r5
   1a440:	a801      	add	r0, sp, #4
   1a442:	f01d ffda 	bl	383fa <memcpy>
	if (nested_exc) {
   1a446:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1a44a:	b14b      	cbz	r3, 1a460 <z_arm_fault+0x7c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1a44c:	9b08      	ldr	r3, [sp, #32]
   1a44e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1a452:	b95a      	cbnz	r2, 1a46c <z_arm_fault+0x88>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1a454:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1a458:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a45c:	9308      	str	r3, [sp, #32]
   1a45e:	e005      	b.n	1a46c <z_arm_fault+0x88>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1a460:	9b08      	ldr	r3, [sp, #32]
   1a462:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   1a466:	f023 0301 	bic.w	r3, r3, #1
   1a46a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1a46c:	a901      	add	r1, sp, #4
   1a46e:	4620      	mov	r0, r4
   1a470:	f01d fe0a 	bl	38088 <z_arm_fatal_error>
   1a474:	e7d0      	b.n	1a418 <z_arm_fault+0x34>
   1a476:	bf00      	nop
   1a478:	e000ed00 	.word	0xe000ed00
   1a47c:	00041a04 	.word	0x00041a04
   1a480:	00041dd0 	.word	0x00041dd0
   1a484:	0003f72c 	.word	0x0003f72c
   1a488:	00041de4 	.word	0x00041de4

0001a48c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1a48c:	4b04      	ldr	r3, [pc, #16]	; (1a4a0 <z_arm_fault_init+0x14>)
   1a48e:	695a      	ldr	r2, [r3, #20]
   1a490:	f042 0210 	orr.w	r2, r2, #16
   1a494:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   1a496:	695a      	ldr	r2, [r3, #20]
   1a498:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   1a49c:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   1a49e:	4770      	bx	lr
   1a4a0:	e000ed00 	.word	0xe000ed00

0001a4a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1a4a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1a4a8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1a4ac:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1a4ae:	4672      	mov	r2, lr
	bl z_arm_fault
   1a4b0:	f7ff ff98 	bl	1a3e4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   1a4b4:	bd01      	pop	{r0, pc}
   1a4b6:	bf00      	nop

0001a4b8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1a4b8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1a4ba:	e007      	b.n	1a4cc <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a4bc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1a4c0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1a4c4:	2120      	movs	r1, #32
   1a4c6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   1a4ca:	3201      	adds	r2, #1
   1a4cc:	2a44      	cmp	r2, #68	; 0x44
   1a4ce:	dc09      	bgt.n	1a4e4 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   1a4d0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a4d2:	2b00      	cmp	r3, #0
   1a4d4:	daf2      	bge.n	1a4bc <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a4d6:	f003 030f 	and.w	r3, r3, #15
   1a4da:	4903      	ldr	r1, [pc, #12]	; (1a4e8 <z_arm_interrupt_init+0x30>)
   1a4dc:	4419      	add	r1, r3
   1a4de:	2320      	movs	r3, #32
   1a4e0:	760b      	strb	r3, [r1, #24]
   1a4e2:	e7f2      	b.n	1a4ca <z_arm_interrupt_init+0x12>
	}
}
   1a4e4:	4770      	bx	lr
   1a4e6:	bf00      	nop
   1a4e8:	e000ecfc 	.word	0xe000ecfc

0001a4ec <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
   1a4ec:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
   1a4ee:	4915      	ldr	r1, [pc, #84]	; (1a544 <__start+0x58>)
    strb r0, [r1]
   1a4f0:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1a4f2:	2000      	movs	r0, #0
    msr CONTROL, r0
   1a4f4:	f380 8814 	msr	CONTROL, r0
    isb
   1a4f8:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   1a4fc:	2000      	movs	r0, #0
    msr MSPLIM, r0
   1a4fe:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   1a502:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1a506:	f7fb fd23 	bl	15f50 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1a50a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1a50c:	490e      	ldr	r1, [pc, #56]	; (1a548 <__start+0x5c>)
    str r0, [r1]
   1a50e:	6008      	str	r0, [r1, #0]
    dsb
   1a510:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1a514:	480d      	ldr	r0, [pc, #52]	; (1a54c <__start+0x60>)
    msr msp, r0
   1a516:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1a51a:	f000 f82f 	bl	1a57c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1a51e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   1a520:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   1a524:	480a      	ldr	r0, [pc, #40]	; (1a550 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1a526:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   1a52a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1a52c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1a530:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1a534:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1a536:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1a538:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1a53c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1a540:	f7fe ff6e 	bl	19420 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
   1a544:	2000cabb 	.word	0x2000cabb
    ldr r1, =_SCS_MPU_CTRL
   1a548:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1a54c:	200112a8 	.word	0x200112a8
    ldr r0, =z_interrupt_stacks
   1a550:	2000f968 	.word	0x2000f968

0001a554 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1a554:	4b08      	ldr	r3, [pc, #32]	; (1a578 <z_arm_clear_arm_mpu_config+0x24>)
   1a556:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
   1a55a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   1a55e:	2300      	movs	r3, #0
   1a560:	e006      	b.n	1a570 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
   1a562:	4a05      	ldr	r2, [pc, #20]	; (1a578 <z_arm_clear_arm_mpu_config+0x24>)
   1a564:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
   1a568:	2100      	movs	r1, #0
   1a56a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
   1a56e:	3301      	adds	r3, #1
   1a570:	4283      	cmp	r3, r0
   1a572:	dbf6      	blt.n	1a562 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
   1a574:	4770      	bx	lr
   1a576:	bf00      	nop
   1a578:	e000ed00 	.word	0xe000ed00

0001a57c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   1a57c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1a57e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   1a580:	2400      	movs	r4, #0
   1a582:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1a586:	f7ff ffe5 	bl	1a554 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1a58a:	4623      	mov	r3, r4
   1a58c:	e008      	b.n	1a5a0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   1a58e:	f103 0120 	add.w	r1, r3, #32
   1a592:	4a0e      	ldr	r2, [pc, #56]	; (1a5cc <z_arm_init_arch_hw_at_boot+0x50>)
   1a594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a598:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1a59c:	3301      	adds	r3, #1
   1a59e:	b2db      	uxtb	r3, r3
   1a5a0:	2b0f      	cmp	r3, #15
   1a5a2:	d9f4      	bls.n	1a58e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1a5a4:	2300      	movs	r3, #0
   1a5a6:	e008      	b.n	1a5ba <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1a5a8:	f103 0160 	add.w	r1, r3, #96	; 0x60
   1a5ac:	4a07      	ldr	r2, [pc, #28]	; (1a5cc <z_arm_init_arch_hw_at_boot+0x50>)
   1a5ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a5b2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1a5b6:	3301      	adds	r3, #1
   1a5b8:	b2db      	uxtb	r3, r3
   1a5ba:	2b0f      	cmp	r3, #15
   1a5bc:	d9f4      	bls.n	1a5a8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   1a5be:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   1a5c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a5c4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1a5c8:	bd10      	pop	{r4, pc}
   1a5ca:	bf00      	nop
   1a5cc:	e000e100 	.word	0xe000e100

0001a5d0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   1a5d0:	b508      	push	{r3, lr}
	if (_current == thread) {
   1a5d2:	4b0a      	ldr	r3, [pc, #40]	; (1a5fc <z_impl_k_thread_abort+0x2c>)
   1a5d4:	689b      	ldr	r3, [r3, #8]
   1a5d6:	4283      	cmp	r3, r0
   1a5d8:	d002      	beq.n	1a5e0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
   1a5da:	f019 fd7b 	bl	340d4 <z_thread_abort>
}
   1a5de:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1a5e0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   1a5e4:	2b00      	cmp	r3, #0
   1a5e6:	d0f8      	beq.n	1a5da <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1a5e8:	4b05      	ldr	r3, [pc, #20]	; (1a600 <z_impl_k_thread_abort+0x30>)
   1a5ea:	685a      	ldr	r2, [r3, #4]
   1a5ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   1a5f0:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   1a5f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a5f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   1a5f8:	625a      	str	r2, [r3, #36]	; 0x24
   1a5fa:	e7ee      	b.n	1a5da <z_impl_k_thread_abort+0xa>
   1a5fc:	2000ca40 	.word	0x2000ca40
   1a600:	e000ed00 	.word	0xe000ed00

0001a604 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   1a604:	b510      	push	{r4, lr}
   1a606:	b084      	sub	sp, #16
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1a608:	4c0a      	ldr	r4, [pc, #40]	; (1a634 <z_arm_configure_static_mpu_regions+0x30>)
   1a60a:	4623      	mov	r3, r4
   1a60c:	4a0a      	ldr	r2, [pc, #40]	; (1a638 <z_arm_configure_static_mpu_regions+0x34>)
   1a60e:	2101      	movs	r1, #1
   1a610:	480a      	ldr	r0, [pc, #40]	; (1a63c <z_arm_configure_static_mpu_regions+0x38>)
   1a612:	f000 fa31 	bl	1aa78 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1a616:	2300      	movs	r3, #0
   1a618:	9301      	str	r3, [sp, #4]
   1a61a:	9302      	str	r3, [sp, #8]
   1a61c:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1a61e:	4b08      	ldr	r3, [pc, #32]	; (1a640 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1a620:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   1a622:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   1a624:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1a626:	2101      	movs	r1, #1
   1a628:	a801      	add	r0, sp, #4
   1a62a:	f000 fa47 	bl	1aabc <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1a62e:	b004      	add	sp, #16
   1a630:	bd10      	pop	{r4, pc}
   1a632:	bf00      	nop
   1a634:	20070000 	.word	0x20070000
   1a638:	20008000 	.word	0x20008000
   1a63c:	00041e24 	.word	0x00041e24
   1a640:	20008ba0 	.word	0x20008ba0

0001a644 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
   1a644:	4b02      	ldr	r3, [pc, #8]	; (1a650 <mpu_init+0xc>)
   1a646:	4a03      	ldr	r2, [pc, #12]	; (1a654 <mpu_init+0x10>)
   1a648:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
   1a64c:	4770      	bx	lr
   1a64e:	bf00      	nop
   1a650:	e000ed00 	.word	0xe000ed00
   1a654:	0044ffaa 	.word	0x0044ffaa

0001a658 <mpu_set_region>:
	MPU->RNR = rnr;
   1a658:	4b03      	ldr	r3, [pc, #12]	; (1a668 <mpu_set_region+0x10>)
   1a65a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
   1a65e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
   1a662:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
   1a666:	4770      	bx	lr
   1a668:	e000ed00 	.word	0xe000ed00

0001a66c <mpu_region_get_conf>:
	MPU->RNR = rnr;
   1a66c:	4b0e      	ldr	r3, [pc, #56]	; (1a6a8 <mpu_region_get_conf+0x3c>)
   1a66e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
   1a672:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   1a676:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
   1a67a:	7a0a      	ldrb	r2, [r1, #8]
   1a67c:	f360 0204 	bfi	r2, r0, #0, #5
   1a680:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
   1a682:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1a686:	f3c2 0242 	ubfx	r2, r2, #1, #3
   1a68a:	7a08      	ldrb	r0, [r1, #8]
   1a68c:	f362 1047 	bfi	r0, r2, #5, #3
   1a690:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
   1a692:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1a696:	f022 021f 	bic.w	r2, r2, #31
   1a69a:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
   1a69c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   1a6a0:	f023 031f 	bic.w	r3, r3, #31
   1a6a4:	60cb      	str	r3, [r1, #12]
}
   1a6a6:	4770      	bx	lr
   1a6a8:	e000ed00 	.word	0xe000ed00

0001a6ac <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
   1a6ac:	b570      	push	{r4, r5, r6, lr}
   1a6ae:	4605      	mov	r5, r0
   1a6b0:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   1a6b2:	2400      	movs	r4, #0
   1a6b4:	e000      	b.n	1a6b8 <mpu_mark_areas_for_dynamic_regions+0xc>
   1a6b6:	3401      	adds	r4, #1
   1a6b8:	42a6      	cmp	r6, r4
   1a6ba:	dd1e      	ble.n	1a6fa <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   1a6bc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1a6c0:	009a      	lsls	r2, r3, #2
   1a6c2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1a6c6:	6859      	ldr	r1, [r3, #4]
   1a6c8:	2900      	cmp	r1, #0
   1a6ca:	d0f4      	beq.n	1a6b6 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   1a6cc:	58a8      	ldr	r0, [r5, r2]
   1a6ce:	f01d fd61 	bl	38194 <get_region_index>
		dyn_reg_info[i].index =
   1a6d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a6d6:	4a0b      	ldr	r2, [pc, #44]	; (1a704 <mpu_mark_areas_for_dynamic_regions+0x58>)
   1a6d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   1a6dc:	f110 0f16 	cmn.w	r0, #22
   1a6e0:	d00c      	beq.n	1a6fc <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1a6e2:	4b09      	ldr	r3, [pc, #36]	; (1a708 <mpu_mark_areas_for_dynamic_regions+0x5c>)
   1a6e4:	781b      	ldrb	r3, [r3, #0]
   1a6e6:	4298      	cmp	r0, r3
   1a6e8:	da09      	bge.n	1a6fe <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
   1a6ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a6ee:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1a6f2:	3104      	adds	r1, #4
   1a6f4:	f7ff ffba 	bl	1a66c <mpu_region_get_conf>
   1a6f8:	e7dd      	b.n	1a6b6 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
   1a6fa:	2000      	movs	r0, #0
}
   1a6fc:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   1a6fe:	f06f 0015 	mvn.w	r0, #21
   1a702:	e7fb      	b.n	1a6fc <mpu_mark_areas_for_dynamic_regions+0x50>
   1a704:	2000bf68 	.word	0x2000bf68
   1a708:	2000cab3 	.word	0x2000cab3

0001a70c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   1a70c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a70e:	b083      	sub	sp, #12
   1a710:	af00      	add	r7, sp, #0
   1a712:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   1a714:	2807      	cmp	r0, #7
   1a716:	d805      	bhi.n	1a724 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1a718:	f01d fd16 	bl	38148 <region_init>

	return index;
   1a71c:	4620      	mov	r0, r4
}
   1a71e:	370c      	adds	r7, #12
   1a720:	46bd      	mov	sp, r7
   1a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1a724:	466d      	mov	r5, sp
   1a726:	b088      	sub	sp, #32
   1a728:	466b      	mov	r3, sp
   1a72a:	f113 0210 	adds.w	r2, r3, #16
   1a72e:	d031      	beq.n	1a794 <region_allocate_and_init+0x88>
   1a730:	210c      	movs	r1, #12
   1a732:	b13a      	cbz	r2, 1a744 <region_allocate_and_init+0x38>
   1a734:	4608      	mov	r0, r1
   1a736:	2904      	cmp	r1, #4
   1a738:	dd01      	ble.n	1a73e <region_allocate_and_init+0x32>
   1a73a:	4e19      	ldr	r6, [pc, #100]	; (1a7a0 <region_allocate_and_init+0x94>)
   1a73c:	615e      	str	r6, [r3, #20]
   1a73e:	2808      	cmp	r0, #8
   1a740:	dd00      	ble.n	1a744 <region_allocate_and_init+0x38>
   1a742:	619c      	str	r4, [r3, #24]
   1a744:	290b      	cmp	r1, #11
   1a746:	dd28      	ble.n	1a79a <region_allocate_and_init+0x8e>
   1a748:	240c      	movs	r4, #12
   1a74a:	b13a      	cbz	r2, 1a75c <region_allocate_and_init+0x50>
   1a74c:	2103      	movs	r1, #3
   1a74e:	7139      	strb	r1, [r7, #4]
   1a750:	2100      	movs	r1, #0
   1a752:	7179      	strb	r1, [r7, #5]
   1a754:	71b9      	strb	r1, [r7, #6]
   1a756:	71f9      	strb	r1, [r7, #7]
   1a758:	6878      	ldr	r0, [r7, #4]
   1a75a:	6118      	str	r0, [r3, #16]
   1a75c:	2100      	movs	r1, #0
   1a75e:	f36f 0100 	bfc	r1, #0, #1
   1a762:	f36f 0141 	bfc	r1, #1, #1
   1a766:	f36f 0182 	bfc	r1, #2, #1
   1a76a:	f36f 01c5 	bfc	r1, #3, #3
   1a76e:	2301      	movs	r3, #1
   1a770:	f363 1188 	bfi	r1, r3, #6, #3
   1a774:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1a778:	f364 2152 	bfi	r1, r4, #9, #10
   1a77c:	f36f 41de 	bfc	r1, #19, #12
   1a780:	f36f 71df 	bfc	r1, #31, #1
   1a784:	2300      	movs	r3, #0
   1a786:	4807      	ldr	r0, [pc, #28]	; (1a7a4 <region_allocate_and_init+0x98>)
   1a788:	f7fc f8e0 	bl	1694c <z_impl_z_log_msg_static_create>
   1a78c:	46ad      	mov	sp, r5
		return -EINVAL;
   1a78e:	f06f 0015 	mvn.w	r0, #21
   1a792:	e7c4      	b.n	1a71e <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1a794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a798:	e7cb      	b.n	1a732 <region_allocate_and_init+0x26>
   1a79a:	f06f 041b 	mvn.w	r4, #27
   1a79e:	e7d4      	b.n	1a74a <region_allocate_and_init+0x3e>
   1a7a0:	00041e34 	.word	0x00041e34
   1a7a4:	0003f470 	.word	0x0003f470

0001a7a8 <mpu_configure_regions_and_partition>:
{
   1a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7ac:	b089      	sub	sp, #36	; 0x24
   1a7ae:	af00      	add	r7, sp, #0
   1a7b0:	4682      	mov	sl, r0
   1a7b2:	60b9      	str	r1, [r7, #8]
   1a7b4:	607b      	str	r3, [r7, #4]
	int reg_index = start_reg_index;
   1a7b6:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
   1a7b8:	f04f 0800 	mov.w	r8, #0
   1a7bc:	e0b5      	b.n	1a92a <mpu_configure_regions_and_partition+0x182>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1a7be:	466d      	mov	r5, sp
   1a7c0:	b088      	sub	sp, #32
   1a7c2:	466b      	mov	r3, sp
   1a7c4:	f113 0210 	adds.w	r2, r3, #16
   1a7c8:	d032      	beq.n	1a830 <mpu_configure_regions_and_partition+0x88>
   1a7ca:	210c      	movs	r1, #12
   1a7cc:	b142      	cbz	r2, 1a7e0 <mpu_configure_regions_and_partition+0x38>
   1a7ce:	4608      	mov	r0, r1
   1a7d0:	2904      	cmp	r1, #4
   1a7d2:	dd01      	ble.n	1a7d8 <mpu_configure_regions_and_partition+0x30>
   1a7d4:	4c94      	ldr	r4, [pc, #592]	; (1aa28 <mpu_configure_regions_and_partition+0x280>)
   1a7d6:	615c      	str	r4, [r3, #20]
   1a7d8:	2808      	cmp	r0, #8
   1a7da:	dd01      	ble.n	1a7e0 <mpu_configure_regions_and_partition+0x38>
   1a7dc:	f8c3 8018 	str.w	r8, [r3, #24]
   1a7e0:	290b      	cmp	r1, #11
   1a7e2:	dd28      	ble.n	1a836 <mpu_configure_regions_and_partition+0x8e>
   1a7e4:	240c      	movs	r4, #12
   1a7e6:	b13a      	cbz	r2, 1a7f8 <mpu_configure_regions_and_partition+0x50>
   1a7e8:	2103      	movs	r1, #3
   1a7ea:	7439      	strb	r1, [r7, #16]
   1a7ec:	2100      	movs	r1, #0
   1a7ee:	7479      	strb	r1, [r7, #17]
   1a7f0:	74b9      	strb	r1, [r7, #18]
   1a7f2:	74f9      	strb	r1, [r7, #19]
   1a7f4:	6938      	ldr	r0, [r7, #16]
   1a7f6:	6118      	str	r0, [r3, #16]
   1a7f8:	2100      	movs	r1, #0
   1a7fa:	f36f 0100 	bfc	r1, #0, #1
   1a7fe:	f36f 0141 	bfc	r1, #1, #1
   1a802:	f36f 0182 	bfc	r1, #2, #1
   1a806:	f36f 01c5 	bfc	r1, #3, #3
   1a80a:	2301      	movs	r3, #1
   1a80c:	f363 1188 	bfi	r1, r3, #6, #3
   1a810:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1a814:	f364 2152 	bfi	r1, r4, #9, #10
   1a818:	f36f 41de 	bfc	r1, #19, #12
   1a81c:	f36f 71df 	bfc	r1, #31, #1
   1a820:	2300      	movs	r3, #0
   1a822:	4882      	ldr	r0, [pc, #520]	; (1aa2c <mpu_configure_regions_and_partition+0x284>)
   1a824:	f7fc f892 	bl	1694c <z_impl_z_log_msg_static_create>
   1a828:	46ad      	mov	sp, r5
			return -EINVAL;
   1a82a:	f06f 0415 	mvn.w	r4, #21
   1a82e:	e03c      	b.n	1a8aa <mpu_configure_regions_and_partition+0x102>
			LOG_ERR("Partition %u: sanity check failed.", i);
   1a830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a834:	e7ca      	b.n	1a7cc <mpu_configure_regions_and_partition+0x24>
   1a836:	f06f 041b 	mvn.w	r4, #27
   1a83a:	e7d4      	b.n	1a7e6 <mpu_configure_regions_and_partition+0x3e>
			LOG_ERR("Invalid underlying region index %u",
   1a83c:	466d      	mov	r5, sp
   1a83e:	b088      	sub	sp, #32
   1a840:	466b      	mov	r3, sp
   1a842:	f113 0210 	adds.w	r2, r3, #16
   1a846:	d035      	beq.n	1a8b4 <mpu_configure_regions_and_partition+0x10c>
   1a848:	210c      	movs	r1, #12
   1a84a:	b13a      	cbz	r2, 1a85c <mpu_configure_regions_and_partition+0xb4>
   1a84c:	4608      	mov	r0, r1
   1a84e:	2904      	cmp	r1, #4
   1a850:	dd01      	ble.n	1a856 <mpu_configure_regions_and_partition+0xae>
   1a852:	4c77      	ldr	r4, [pc, #476]	; (1aa30 <mpu_configure_regions_and_partition+0x288>)
   1a854:	615c      	str	r4, [r3, #20]
   1a856:	2808      	cmp	r0, #8
   1a858:	dd00      	ble.n	1a85c <mpu_configure_regions_and_partition+0xb4>
   1a85a:	619e      	str	r6, [r3, #24]
   1a85c:	290b      	cmp	r1, #11
   1a85e:	dd2c      	ble.n	1a8ba <mpu_configure_regions_and_partition+0x112>
   1a860:	240c      	movs	r4, #12
   1a862:	b13a      	cbz	r2, 1a874 <mpu_configure_regions_and_partition+0xcc>
   1a864:	2103      	movs	r1, #3
   1a866:	7439      	strb	r1, [r7, #16]
   1a868:	2100      	movs	r1, #0
   1a86a:	7479      	strb	r1, [r7, #17]
   1a86c:	74b9      	strb	r1, [r7, #18]
   1a86e:	74f9      	strb	r1, [r7, #19]
   1a870:	6938      	ldr	r0, [r7, #16]
   1a872:	6118      	str	r0, [r3, #16]
   1a874:	2100      	movs	r1, #0
   1a876:	f36f 0100 	bfc	r1, #0, #1
   1a87a:	f36f 0141 	bfc	r1, #1, #1
   1a87e:	f36f 0182 	bfc	r1, #2, #1
   1a882:	f36f 01c5 	bfc	r1, #3, #3
   1a886:	2301      	movs	r3, #1
   1a888:	f363 1188 	bfi	r1, r3, #6, #3
   1a88c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1a890:	f363 2152 	bfi	r1, r3, #9, #10
   1a894:	f36f 41de 	bfc	r1, #19, #12
   1a898:	f36f 71df 	bfc	r1, #31, #1
   1a89c:	2300      	movs	r3, #0
   1a89e:	4863      	ldr	r0, [pc, #396]	; (1aa2c <mpu_configure_regions_and_partition+0x284>)
   1a8a0:	f7fc f854 	bl	1694c <z_impl_z_log_msg_static_create>
   1a8a4:	46ad      	mov	sp, r5
			return -EINVAL;
   1a8a6:	f06f 0415 	mvn.w	r4, #21
}
   1a8aa:	4620      	mov	r0, r4
   1a8ac:	3724      	adds	r7, #36	; 0x24
   1a8ae:	46bd      	mov	sp, r7
   1a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
   1a8b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a8b8:	e7c7      	b.n	1a84a <mpu_configure_regions_and_partition+0xa2>
   1a8ba:	f06f 041b 	mvn.w	r4, #27
   1a8be:	e7d0      	b.n	1a862 <mpu_configure_regions_and_partition+0xba>
		if ((regions[i].start == u_reg_base) &&
   1a8c0:	4581      	cmp	r9, r0
   1a8c2:	d168      	bne.n	1a996 <mpu_configure_regions_and_partition+0x1ee>
			mpu_configure_region(u_reg_index, &regions[i]);
   1a8c4:	4629      	mov	r1, r5
   1a8c6:	b2f0      	uxtb	r0, r6
   1a8c8:	f01d fc75 	bl	381b6 <mpu_configure_region>
   1a8cc:	e02b      	b.n	1a926 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
   1a8ce:	4a59      	ldr	r2, [pc, #356]	; (1aa34 <mpu_configure_regions_and_partition+0x28c>)
   1a8d0:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
   1a8d4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   1a8d8:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   1a8dc:	f021 011f 	bic.w	r1, r1, #31
   1a8e0:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
   1a8e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   1a8e6:	4629      	mov	r1, r5
   1a8e8:	b2e0      	uxtb	r0, r4
   1a8ea:	f01d fc64 	bl	381b6 <mpu_configure_region>
   1a8ee:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   1a8f0:	f110 0f16 	cmn.w	r0, #22
   1a8f4:	d0d9      	beq.n	1a8aa <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   1a8f6:	3401      	adds	r4, #1
   1a8f8:	e015      	b.n	1a926 <mpu_configure_regions_and_partition+0x17e>
				regions[i].start - 1);
   1a8fa:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   1a8fc:	494d      	ldr	r1, [pc, #308]	; (1aa34 <mpu_configure_regions_and_partition+0x28c>)
   1a8fe:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   1a902:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1a906:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1a90a:	f023 031f 	bic.w	r3, r3, #31
   1a90e:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1a910:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1a914:	4629      	mov	r1, r5
   1a916:	b2e0      	uxtb	r0, r4
   1a918:	f01d fc4d 	bl	381b6 <mpu_configure_region>
   1a91c:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   1a91e:	f110 0f16 	cmn.w	r0, #22
   1a922:	d0c2      	beq.n	1a8aa <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   1a924:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
   1a926:	f108 0801 	add.w	r8, r8, #1
   1a92a:	68bb      	ldr	r3, [r7, #8]
   1a92c:	4598      	cmp	r8, r3
   1a92e:	dabc      	bge.n	1a8aa <mpu_configure_regions_and_partition+0x102>
		if (regions[i].size == 0U) {
   1a930:	eb08 0548 	add.w	r5, r8, r8, lsl #1
   1a934:	ea4f 0b85 	mov.w	fp, r5, lsl #2
   1a938:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   1a93c:	686e      	ldr	r6, [r5, #4]
   1a93e:	2e00      	cmp	r6, #0
   1a940:	d0f1      	beq.n	1a926 <mpu_configure_regions_and_partition+0x17e>
		if (do_sanity_check &&
   1a942:	687b      	ldr	r3, [r7, #4]
   1a944:	b12b      	cbz	r3, 1a952 <mpu_configure_regions_and_partition+0x1aa>
			(!mpu_partition_is_valid(&regions[i]))) {
   1a946:	4628      	mov	r0, r5
   1a948:	f01d fc12 	bl	38170 <mpu_partition_is_valid>
		if (do_sanity_check &&
   1a94c:	2800      	cmp	r0, #0
   1a94e:	f43f af36 	beq.w	1a7be <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
   1a952:	4631      	mov	r1, r6
   1a954:	f85a 000b 	ldr.w	r0, [sl, fp]
   1a958:	f01d fc1c 	bl	38194 <get_region_index>
   1a95c:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
   1a95e:	f110 0f16 	cmn.w	r0, #22
   1a962:	f43f af6b 	beq.w	1a83c <mpu_configure_regions_and_partition+0x94>
   1a966:	4284      	cmp	r4, r0
   1a968:	f77f af68 	ble.w	1a83c <mpu_configure_regions_and_partition+0x94>
	MPU->RNR = rnr;
   1a96c:	4b31      	ldr	r3, [pc, #196]	; (1aa34 <mpu_configure_regions_and_partition+0x28c>)
   1a96e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
   1a972:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   1a976:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
   1a97a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
   1a97e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   1a982:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   1a986:	f85a 300b 	ldr.w	r3, [sl, fp]
   1a98a:	6869      	ldr	r1, [r5, #4]
   1a98c:	4419      	add	r1, r3
   1a98e:	1e48      	subs	r0, r1, #1
   1a990:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
   1a992:	4293      	cmp	r3, r2
   1a994:	d094      	beq.n	1a8c0 <mpu_configure_regions_and_partition+0x118>
		} else if (regions[i].start == u_reg_base) {
   1a996:	4293      	cmp	r3, r2
   1a998:	d099      	beq.n	1a8ce <mpu_configure_regions_and_partition+0x126>
		} else if (reg_last == u_reg_last) {
   1a99a:	68fa      	ldr	r2, [r7, #12]
   1a99c:	4591      	cmp	r9, r2
   1a99e:	d0ac      	beq.n	1a8fa <mpu_configure_regions_and_partition+0x152>
				regions[i].start - 1);
   1a9a0:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
   1a9a2:	4924      	ldr	r1, [pc, #144]	; (1aa34 <mpu_configure_regions_and_partition+0x28c>)
   1a9a4:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
   1a9a8:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   1a9ac:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   1a9b0:	f023 031f 	bic.w	r3, r3, #31
   1a9b4:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   1a9b6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   1a9ba:	4629      	mov	r1, r5
   1a9bc:	b2e0      	uxtb	r0, r4
   1a9be:	f01d fbfa 	bl	381b6 <mpu_configure_region>
   1a9c2:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   1a9c4:	f110 0f16 	cmn.w	r0, #22
   1a9c8:	f43f af6f 	beq.w	1a8aa <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   1a9cc:	3001      	adds	r0, #1
	MPU->RNR = rnr;
   1a9ce:	4b19      	ldr	r3, [pc, #100]	; (1aa34 <mpu_configure_regions_and_partition+0x28c>)
   1a9d0:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
   1a9d4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   1a9d8:	7e3a      	ldrb	r2, [r7, #24]
   1a9da:	f361 0204 	bfi	r2, r1, #0, #5
   1a9de:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
   1a9e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   1a9e4:	f3c3 0342 	ubfx	r3, r3, #1, #3
   1a9e8:	b2d2      	uxtb	r2, r2
   1a9ea:	f363 1247 	bfi	r2, r3, #5, #3
   1a9ee:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
   1a9f0:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
   1a9f4:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
   1a9f6:	4413      	add	r3, r2
   1a9f8:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   1a9fa:	f023 031f 	bic.w	r3, r3, #31
   1a9fe:	68fa      	ldr	r2, [r7, #12]
   1aa00:	eba9 0902 	sub.w	r9, r9, r2
   1aa04:	444b      	add	r3, r9
   1aa06:	3b01      	subs	r3, #1
   1aa08:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
   1aa0c:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
   1aa0e:	f107 0110 	add.w	r1, r7, #16
   1aa12:	b2c0      	uxtb	r0, r0
   1aa14:	f7ff fe7a 	bl	1a70c <region_allocate_and_init>
   1aa18:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
   1aa1a:	f110 0f16 	cmn.w	r0, #22
   1aa1e:	f43f af44 	beq.w	1a8aa <mpu_configure_regions_and_partition+0x102>
			reg_index++;
   1aa22:	3401      	adds	r4, #1
   1aa24:	e77f      	b.n	1a926 <mpu_configure_regions_and_partition+0x17e>
   1aa26:	bf00      	nop
   1aa28:	00041e5c 	.word	0x00041e5c
   1aa2c:	0003f470 	.word	0x0003f470
   1aa30:	00041e80 	.word	0x00041e80
   1aa34:	e000ed00 	.word	0xe000ed00

0001aa38 <mpu_configure_static_mpu_regions>:
{
   1aa38:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   1aa3a:	4c03      	ldr	r4, [pc, #12]	; (1aa48 <mpu_configure_static_mpu_regions+0x10>)
	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   1aa3c:	2301      	movs	r3, #1
   1aa3e:	7822      	ldrb	r2, [r4, #0]
   1aa40:	f7ff feb2 	bl	1a7a8 <mpu_configure_regions_and_partition>
	static_regions_num = mpu_reg_index;
   1aa44:	7020      	strb	r0, [r4, #0]
}
   1aa46:	bd10      	pop	{r4, pc}
   1aa48:	2000cab3 	.word	0x2000cab3

0001aa4c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1aa4c:	4b04      	ldr	r3, [pc, #16]	; (1aa60 <arm_core_mpu_enable+0x14>)
   1aa4e:	2205      	movs	r2, #5
   1aa50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   1aa54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1aa58:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1aa5c:	4770      	bx	lr
   1aa5e:	bf00      	nop
   1aa60:	e000ed00 	.word	0xe000ed00

0001aa64 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   1aa64:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1aa68:	4b02      	ldr	r3, [pc, #8]	; (1aa74 <arm_core_mpu_disable+0x10>)
   1aa6a:	2200      	movs	r2, #0
   1aa6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1aa70:	4770      	bx	lr
   1aa72:	bf00      	nop
   1aa74:	e000ed00 	.word	0xe000ed00

0001aa78 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1aa78:	b538      	push	{r3, r4, r5, lr}
   1aa7a:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1aa7c:	f7ff ffdc 	bl	1aa38 <mpu_configure_static_mpu_regions>
   1aa80:	f110 0f16 	cmn.w	r0, #22
   1aa84:	d000      	beq.n	1aa88 <arm_core_mpu_configure_static_mpu_regions+0x10>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   1aa86:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   1aa88:	4d08      	ldr	r5, [pc, #32]	; (1aaac <arm_core_mpu_configure_static_mpu_regions+0x34>)
   1aa8a:	f44f 738d 	mov.w	r3, #282	; 0x11a
   1aa8e:	462a      	mov	r2, r5
   1aa90:	4907      	ldr	r1, [pc, #28]	; (1aab0 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   1aa92:	4808      	ldr	r0, [pc, #32]	; (1aab4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   1aa94:	f01b fbfe 	bl	36294 <assert_print>
   1aa98:	4621      	mov	r1, r4
   1aa9a:	4807      	ldr	r0, [pc, #28]	; (1aab8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   1aa9c:	f01b fbfa 	bl	36294 <assert_print>
   1aaa0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1aaa4:	4628      	mov	r0, r5
   1aaa6:	f01b fbee 	bl	36286 <assert_post_action>
   1aaaa:	bf00      	nop
   1aaac:	00041ea4 	.word	0x00041ea4
   1aab0:	0003f964 	.word	0x0003f964
   1aab4:	0003f72c 	.word	0x0003f72c
   1aab8:	00041edc 	.word	0x00041edc

0001aabc <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   1aabc:	b538      	push	{r3, r4, r5, lr}
   1aabe:	460c      	mov	r4, r1
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1aac0:	f7ff fdf4 	bl	1a6ac <mpu_mark_areas_for_dynamic_regions>
   1aac4:	f110 0f16 	cmn.w	r0, #22
   1aac8:	d000      	beq.n	1aacc <arm_core_mpu_mark_areas_for_dynamic_regions+0x10>
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   1aaca:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   1aacc:	4d08      	ldr	r5, [pc, #32]	; (1aaf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x34>)
   1aace:	f44f 7395 	mov.w	r3, #298	; 0x12a
   1aad2:	462a      	mov	r2, r5
   1aad4:	4907      	ldr	r1, [pc, #28]	; (1aaf4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x38>)
   1aad6:	4808      	ldr	r0, [pc, #32]	; (1aaf8 <arm_core_mpu_mark_areas_for_dynamic_regions+0x3c>)
   1aad8:	f01b fbdc 	bl	36294 <assert_print>
   1aadc:	4621      	mov	r1, r4
   1aade:	4807      	ldr	r0, [pc, #28]	; (1aafc <arm_core_mpu_mark_areas_for_dynamic_regions+0x40>)
   1aae0:	f01b fbd8 	bl	36294 <assert_print>
   1aae4:	f44f 7195 	mov.w	r1, #298	; 0x12a
   1aae8:	4628      	mov	r0, r5
   1aaea:	f01b fbcc 	bl	36286 <assert_post_action>
   1aaee:	bf00      	nop
   1aaf0:	00041ea4 	.word	0x00041ea4
   1aaf4:	0003f964 	.word	0x0003f964
   1aaf8:	0003f72c 	.word	0x0003f72c
   1aafc:	00041f08 	.word	0x00041f08

0001ab00 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   1ab00:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1ab02:	4b21      	ldr	r3, [pc, #132]	; (1ab88 <z_arm_mpu_init+0x88>)
   1ab04:	681d      	ldr	r5, [r3, #0]
   1ab06:	2d08      	cmp	r5, #8
   1ab08:	d805      	bhi.n	1ab16 <z_arm_mpu_init+0x16>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1ab0a:	f7ff ffab 	bl	1aa64 <arm_core_mpu_disable>
#endif
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
   1ab0e:	f7ff fd99 	bl	1a644 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1ab12:	2400      	movs	r4, #0
   1ab14:	e019      	b.n	1ab4a <z_arm_mpu_init+0x4a>
		__ASSERT(0,
   1ab16:	4c1d      	ldr	r4, [pc, #116]	; (1ab8c <z_arm_mpu_init+0x8c>)
   1ab18:	f240 1351 	movw	r3, #337	; 0x151
   1ab1c:	4622      	mov	r2, r4
   1ab1e:	491c      	ldr	r1, [pc, #112]	; (1ab90 <z_arm_mpu_init+0x90>)
   1ab20:	481c      	ldr	r0, [pc, #112]	; (1ab94 <z_arm_mpu_init+0x94>)
   1ab22:	f01b fbb7 	bl	36294 <assert_print>
   1ab26:	2208      	movs	r2, #8
   1ab28:	4629      	mov	r1, r5
   1ab2a:	481b      	ldr	r0, [pc, #108]	; (1ab98 <z_arm_mpu_init+0x98>)
   1ab2c:	f01b fbb2 	bl	36294 <assert_print>
   1ab30:	f240 1151 	movw	r1, #337	; 0x151
   1ab34:	4620      	mov	r0, r4
   1ab36:	f01b fba6 	bl	36286 <assert_post_action>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1ab3a:	4b13      	ldr	r3, [pc, #76]	; (1ab88 <z_arm_mpu_init+0x88>)
   1ab3c:	6859      	ldr	r1, [r3, #4]
   1ab3e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1ab42:	4620      	mov	r0, r4
   1ab44:	f01d fb00 	bl	38148 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1ab48:	3401      	adds	r4, #1
   1ab4a:	42a5      	cmp	r5, r4
   1ab4c:	d8f5      	bhi.n	1ab3a <z_arm_mpu_init+0x3a>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1ab4e:	4b13      	ldr	r3, [pc, #76]	; (1ab9c <z_arm_mpu_init+0x9c>)
   1ab50:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1ab52:	f7ff ff7b 	bl	1aa4c <arm_core_mpu_enable>
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos == 8,
		"Invalid number of MPU regions\n");
#elif defined(NUM_MPU_REGIONS)
	__ASSERT(
   1ab56:	4b12      	ldr	r3, [pc, #72]	; (1aba0 <z_arm_mpu_init+0xa0>)
   1ab58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1ab5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1ab60:	2b08      	cmp	r3, #8
   1ab62:	d101      	bne.n	1ab68 <z_arm_mpu_init+0x68>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1ab64:	2000      	movs	r0, #0
   1ab66:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(
   1ab68:	4c08      	ldr	r4, [pc, #32]	; (1ab8c <z_arm_mpu_init+0x8c>)
   1ab6a:	f240 13bb 	movw	r3, #443	; 0x1bb
   1ab6e:	4622      	mov	r2, r4
   1ab70:	490c      	ldr	r1, [pc, #48]	; (1aba4 <z_arm_mpu_init+0xa4>)
   1ab72:	4808      	ldr	r0, [pc, #32]	; (1ab94 <z_arm_mpu_init+0x94>)
   1ab74:	f01b fb8e 	bl	36294 <assert_print>
   1ab78:	480b      	ldr	r0, [pc, #44]	; (1aba8 <z_arm_mpu_init+0xa8>)
   1ab7a:	f01b fb8b 	bl	36294 <assert_print>
   1ab7e:	f240 11bb 	movw	r1, #443	; 0x1bb
   1ab82:	4620      	mov	r0, r4
   1ab84:	f01b fb7f 	bl	36286 <assert_post_action>
   1ab88:	00041fe0 	.word	0x00041fe0
   1ab8c:	00041ea4 	.word	0x00041ea4
   1ab90:	0003f964 	.word	0x0003f964
   1ab94:	0003f72c 	.word	0x0003f72c
   1ab98:	00041f38 	.word	0x00041f38
   1ab9c:	2000cab3 	.word	0x2000cab3
   1aba0:	e000ed00 	.word	0xe000ed00
   1aba4:	00041f6c 	.word	0x00041f6c
   1aba8:	00041fbc 	.word	0x00041fbc

0001abac <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   1abac:	4b01      	ldr	r3, [pc, #4]	; (1abb4 <__stdout_hook_install+0x8>)
   1abae:	6018      	str	r0, [r3, #0]
}
   1abb0:	4770      	bx	lr
   1abb2:	bf00      	nop
   1abb4:	2000840c 	.word	0x2000840c

0001abb8 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   1abb8:	b40c      	push	{r2, r3}
   1abba:	b510      	push	{r4, lr}
   1abbc:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   1abbe:	460b      	mov	r3, r1
   1abc0:	b909      	cbnz	r1, 1abc6 <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   1abc2:	f10d 000b 	add.w	r0, sp, #11
	}

	p.ptr = str;
   1abc6:	9003      	str	r0, [sp, #12]
	p.len = (int) len;
   1abc8:	9304      	str	r3, [sp, #16]

	va_start(vargs, format);
   1abca:	ab09      	add	r3, sp, #36	; 0x24
   1abcc:	9305      	str	r3, [sp, #20]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1abce:	2400      	movs	r4, #0
   1abd0:	9400      	str	r4, [sp, #0]
   1abd2:	9a08      	ldr	r2, [sp, #32]
   1abd4:	a903      	add	r1, sp, #12
   1abd6:	4805      	ldr	r0, [pc, #20]	; (1abec <snprintf+0x34>)
   1abd8:	f7fa f9b6 	bl	14f48 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   1abdc:	9b03      	ldr	r3, [sp, #12]
   1abde:	701c      	strb	r4, [r3, #0]
	return r;
}
   1abe0:	b006      	add	sp, #24
   1abe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1abe6:	b002      	add	sp, #8
   1abe8:	4770      	bx	lr
   1abea:	bf00      	nop
   1abec:	0003849b 	.word	0x0003849b

0001abf0 <remoteproc_mgr_boot>:
	 * this case do the remainder of actions to properly configure and
	 * boot the Network MCU.
	 */

	/* Release the Network MCU, 'Release force off signal' */
	NRF_RESET->NETWORK.FORCEOFF = RESET_NETWORK_FORCEOFF_FORCEOFF_Release;
   1abf0:	2000      	movs	r0, #0
   1abf2:	4b02      	ldr	r3, [pc, #8]	; (1abfc <remoteproc_mgr_boot+0xc>)
   1abf4:	f8c3 0614 	str.w	r0, [r3, #1556]	; 0x614

	LOG_DBG("Network MCU released.");
#endif /* !CONFIG_TRUSTED_EXECUTION_SECURE */

	return 0;
}
   1abf8:	4770      	bx	lr
   1abfa:	bf00      	nop
   1abfc:	40005000 	.word	0x40005000

0001ac00 <bt_addr_le_to_str>:
{
   1ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac02:	b08b      	sub	sp, #44	; 0x2c
   1ac04:	4604      	mov	r4, r0
   1ac06:	460d      	mov	r5, r1
   1ac08:	4616      	mov	r6, r2
	switch (addr->type) {
   1ac0a:	7803      	ldrb	r3, [r0, #0]
   1ac0c:	2b03      	cmp	r3, #3
   1ac0e:	d82c      	bhi.n	1ac6a <bt_addr_le_to_str+0x6a>
   1ac10:	e8df f003 	tbb	[pc, r3]
   1ac14:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   1ac18:	4917      	ldr	r1, [pc, #92]	; (1ac78 <bt_addr_le_to_str+0x78>)
   1ac1a:	a807      	add	r0, sp, #28
   1ac1c:	f01d fb73 	bl	38306 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1ac20:	7963      	ldrb	r3, [r4, #5]
   1ac22:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   1ac24:	78e1      	ldrb	r1, [r4, #3]
   1ac26:	78a0      	ldrb	r0, [r4, #2]
   1ac28:	7867      	ldrb	r7, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1ac2a:	f10d 0c1c 	add.w	ip, sp, #28
   1ac2e:	f8cd c014 	str.w	ip, [sp, #20]
   1ac32:	9704      	str	r7, [sp, #16]
   1ac34:	9003      	str	r0, [sp, #12]
   1ac36:	9102      	str	r1, [sp, #8]
   1ac38:	9201      	str	r2, [sp, #4]
   1ac3a:	9300      	str	r3, [sp, #0]
   1ac3c:	79a3      	ldrb	r3, [r4, #6]
   1ac3e:	4a0f      	ldr	r2, [pc, #60]	; (1ac7c <bt_addr_le_to_str+0x7c>)
   1ac40:	4631      	mov	r1, r6
   1ac42:	4628      	mov	r0, r5
   1ac44:	f01a fee3 	bl	35a0e <snprintk>
}
   1ac48:	b00b      	add	sp, #44	; 0x2c
   1ac4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1ac4c:	490c      	ldr	r1, [pc, #48]	; (1ac80 <bt_addr_le_to_str+0x80>)
   1ac4e:	a807      	add	r0, sp, #28
   1ac50:	f01d fb59 	bl	38306 <strcpy>
		break;
   1ac54:	e7e4      	b.n	1ac20 <bt_addr_le_to_str+0x20>
		strcpy(type, "public-id");
   1ac56:	490b      	ldr	r1, [pc, #44]	; (1ac84 <bt_addr_le_to_str+0x84>)
   1ac58:	a807      	add	r0, sp, #28
   1ac5a:	f01d fb54 	bl	38306 <strcpy>
		break;
   1ac5e:	e7df      	b.n	1ac20 <bt_addr_le_to_str+0x20>
		strcpy(type, "random-id");
   1ac60:	4909      	ldr	r1, [pc, #36]	; (1ac88 <bt_addr_le_to_str+0x88>)
   1ac62:	a807      	add	r0, sp, #28
   1ac64:	f01d fb4f 	bl	38306 <strcpy>
		break;
   1ac68:	e7da      	b.n	1ac20 <bt_addr_le_to_str+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1ac6a:	4a08      	ldr	r2, [pc, #32]	; (1ac8c <bt_addr_le_to_str+0x8c>)
   1ac6c:	210a      	movs	r1, #10
   1ac6e:	a807      	add	r0, sp, #28
   1ac70:	f01a fecd 	bl	35a0e <snprintk>
		break;
   1ac74:	e7d4      	b.n	1ac20 <bt_addr_le_to_str+0x20>
   1ac76:	bf00      	nop
   1ac78:	0003fccc 	.word	0x0003fccc
   1ac7c:	0003fcf4 	.word	0x0003fcf4
   1ac80:	0003fcd4 	.word	0x0003fcd4
   1ac84:	0003fcdc 	.word	0x0003fcdc
   1ac88:	0003fce8 	.word	0x0003fce8
   1ac8c:	00044318 	.word	0x00044318

0001ac90 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   1ac90:	2940      	cmp	r1, #64	; 0x40
   1ac92:	bf28      	it	cs
   1ac94:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   1ac96:	2300      	movs	r3, #0
   1ac98:	428b      	cmp	r3, r1
   1ac9a:	d21c      	bcs.n	1acd6 <bt_hex+0x46>
{
   1ac9c:	b430      	push	{r4, r5}
		str[i * 2] = hex[b[i] >> 4];
   1ac9e:	f810 c003 	ldrb.w	ip, [r0, r3]
   1aca2:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
   1aca6:	005a      	lsls	r2, r3, #1
   1aca8:	4d0d      	ldr	r5, [pc, #52]	; (1ace0 <bt_hex+0x50>)
   1acaa:	f815 c00c 	ldrb.w	ip, [r5, ip]
   1acae:	4c0d      	ldr	r4, [pc, #52]	; (1ace4 <bt_hex+0x54>)
   1acb0:	f804 c013 	strb.w	ip, [r4, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   1acb4:	f810 c003 	ldrb.w	ip, [r0, r3]
   1acb8:	f00c 0c0f 	and.w	ip, ip, #15
   1acbc:	3201      	adds	r2, #1
   1acbe:	f815 500c 	ldrb.w	r5, [r5, ip]
   1acc2:	54a5      	strb	r5, [r4, r2]
	for (i = 0; i < len; i++) {
   1acc4:	3301      	adds	r3, #1
   1acc6:	428b      	cmp	r3, r1
   1acc8:	d3e9      	bcc.n	1ac9e <bt_hex+0xe>
	}

	str[i * 2] = '\0';
   1acca:	4806      	ldr	r0, [pc, #24]	; (1ace4 <bt_hex+0x54>)
   1accc:	2200      	movs	r2, #0
   1acce:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   1acd2:	bc30      	pop	{r4, r5}
   1acd4:	4770      	bx	lr
	str[i * 2] = '\0';
   1acd6:	4803      	ldr	r0, [pc, #12]	; (1ace4 <bt_hex+0x54>)
   1acd8:	2200      	movs	r2, #0
   1acda:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   1acde:	4770      	bx	lr
   1ace0:	00042054 	.word	0x00042054
   1ace4:	2000bf9c 	.word	0x2000bf9c

0001ace8 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   1ace8:	b510      	push	{r4, lr}
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));
   1acea:	4c03      	ldr	r4, [pc, #12]	; (1acf8 <bt_addr_le_str+0x10>)
   1acec:	221e      	movs	r2, #30
   1acee:	4621      	mov	r1, r4
   1acf0:	f7ff ff86 	bl	1ac00 <bt_addr_le_to_str>

	return str;
}
   1acf4:	4620      	mov	r0, r4
   1acf6:	bd10      	pop	{r4, pc}
   1acf8:	2000bf7c 	.word	0x2000bf7c

0001acfc <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
   1acfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acfe:	b089      	sub	sp, #36	; 0x24
   1ad00:	af00      	add	r7, sp, #0
	int err;
	LOG_INF("Saving ID");
   1ad02:	4b37      	ldr	r3, [pc, #220]	; (1ade0 <save_id+0xe4>)
   1ad04:	61fb      	str	r3, [r7, #28]
   1ad06:	2302      	movs	r3, #2
   1ad08:	713b      	strb	r3, [r7, #4]
   1ad0a:	2300      	movs	r3, #0
   1ad0c:	717b      	strb	r3, [r7, #5]
   1ad0e:	71bb      	strb	r3, [r7, #6]
   1ad10:	71fb      	strb	r3, [r7, #7]
   1ad12:	687a      	ldr	r2, [r7, #4]
   1ad14:	61ba      	str	r2, [r7, #24]
   1ad16:	4619      	mov	r1, r3
   1ad18:	f363 0100 	bfi	r1, r3, #0, #1
   1ad1c:	f363 0141 	bfi	r1, r3, #1, #1
   1ad20:	f363 0182 	bfi	r1, r3, #2, #1
   1ad24:	f363 01c5 	bfi	r1, r3, #3, #3
   1ad28:	2203      	movs	r2, #3
   1ad2a:	f362 1188 	bfi	r1, r2, #6, #3
   1ad2e:	2208      	movs	r2, #8
   1ad30:	f362 2152 	bfi	r1, r2, #9, #10
   1ad34:	f363 41de 	bfi	r1, r3, #19, #12
   1ad38:	f363 71df 	bfi	r1, r3, #31, #1
   1ad3c:	f107 0218 	add.w	r2, r7, #24
   1ad40:	4828      	ldr	r0, [pc, #160]	; (1ade4 <save_id+0xe8>)
   1ad42:	f7fb fe03 	bl	1694c <z_impl_z_log_msg_static_create>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
   1ad46:	4928      	ldr	r1, [pc, #160]	; (1ade8 <save_id+0xec>)
   1ad48:	79ca      	ldrb	r2, [r1, #7]
	err = settings_save_one("bt/id", &bt_dev.id_addr,
   1ad4a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   1ad4e:	4827      	ldr	r0, [pc, #156]	; (1adec <save_id+0xf0>)
   1ad50:	f7fd fb14 	bl	1837c <settings_save_one>
	if (err) {
   1ad54:	2800      	cmp	r0, #0
   1ad56:	d03c      	beq.n	1add2 <save_id+0xd6>
   1ad58:	4605      	mov	r5, r0
		LOG_ERR("Failed to save ID (err %d)", err);
   1ad5a:	466c      	mov	r4, sp
   1ad5c:	b088      	sub	sp, #32
   1ad5e:	466b      	mov	r3, sp
   1ad60:	f113 0210 	adds.w	r2, r3, #16
   1ad64:	d00e      	beq.n	1ad84 <save_id+0x88>
   1ad66:	210c      	movs	r1, #12
   1ad68:	b13a      	cbz	r2, 1ad7a <save_id+0x7e>
   1ad6a:	4608      	mov	r0, r1
   1ad6c:	2904      	cmp	r1, #4
   1ad6e:	dd01      	ble.n	1ad74 <save_id+0x78>
   1ad70:	4e1f      	ldr	r6, [pc, #124]	; (1adf0 <save_id+0xf4>)
   1ad72:	615e      	str	r6, [r3, #20]
   1ad74:	2808      	cmp	r0, #8
   1ad76:	dd08      	ble.n	1ad8a <save_id+0x8e>
   1ad78:	619d      	str	r5, [r3, #24]
   1ad7a:	290b      	cmp	r1, #11
   1ad7c:	dd2c      	ble.n	1add8 <save_id+0xdc>
   1ad7e:	f04f 0c0c 	mov.w	ip, #12
   1ad82:	e004      	b.n	1ad8e <save_id+0x92>
   1ad84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ad88:	e7ee      	b.n	1ad68 <save_id+0x6c>
   1ad8a:	f06f 0c1b 	mvn.w	ip, #27
   1ad8e:	b13a      	cbz	r2, 1ada0 <save_id+0xa4>
   1ad90:	2103      	movs	r1, #3
   1ad92:	7139      	strb	r1, [r7, #4]
   1ad94:	2100      	movs	r1, #0
   1ad96:	7179      	strb	r1, [r7, #5]
   1ad98:	71b9      	strb	r1, [r7, #6]
   1ad9a:	71f9      	strb	r1, [r7, #7]
   1ad9c:	6878      	ldr	r0, [r7, #4]
   1ad9e:	6118      	str	r0, [r3, #16]
   1ada0:	2100      	movs	r1, #0
   1ada2:	f36f 0100 	bfc	r1, #0, #1
   1ada6:	f36f 0141 	bfc	r1, #1, #1
   1adaa:	f36f 0182 	bfc	r1, #2, #1
   1adae:	f36f 01c5 	bfc	r1, #3, #3
   1adb2:	2301      	movs	r3, #1
   1adb4:	f363 1188 	bfi	r1, r3, #6, #3
   1adb8:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1adbc:	f363 2152 	bfi	r1, r3, #9, #10
   1adc0:	f36f 41de 	bfc	r1, #19, #12
   1adc4:	f36f 71df 	bfc	r1, #31, #1
   1adc8:	2300      	movs	r3, #0
   1adca:	4806      	ldr	r0, [pc, #24]	; (1ade4 <save_id+0xe8>)
   1adcc:	f7fb fdbe 	bl	1694c <z_impl_z_log_msg_static_create>
   1add0:	46a5      	mov	sp, r4
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		LOG_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
   1add2:	3724      	adds	r7, #36	; 0x24
   1add4:	46bd      	mov	sp, r7
   1add6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to save ID (err %d)", err);
   1add8:	f06f 0c1b 	mvn.w	ip, #27
   1addc:	e7d7      	b.n	1ad8e <save_id+0x92>
   1adde:	bf00      	nop
   1ade0:	00042070 	.word	0x00042070
   1ade4:	0003f410 	.word	0x0003f410
   1ade8:	20008000 	.word	0x20008000
   1adec:	0004207c 	.word	0x0004207c
   1adf0:	00042084 	.word	0x00042084

0001adf4 <set_setting>:
{
   1adf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1adf6:	b095      	sub	sp, #84	; 0x54
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1adf8:	495b      	ldr	r1, [pc, #364]	; (1af68 <set_setting+0x174>)
   1adfa:	e8d1 1faf 	lda	r1, [r1]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1adfe:	f011 0f01 	tst.w	r1, #1
   1ae02:	f000 80aa 	beq.w	1af5a <set_setting+0x166>
   1ae06:	4604      	mov	r4, r0
   1ae08:	4616      	mov	r6, r2
   1ae0a:	461d      	mov	r5, r3
	if (!name) {
   1ae0c:	b320      	cbz	r0, 1ae58 <set_setting+0x64>
	len = settings_name_next(name, &next);
   1ae0e:	a901      	add	r1, sp, #4
   1ae10:	f01c fbb4 	bl	3757c <settings_name_next>
   1ae14:	4602      	mov	r2, r0
	if (!strncmp(name, "id", len)) {
   1ae16:	4955      	ldr	r1, [pc, #340]	; (1af6c <set_setting+0x178>)
   1ae18:	4620      	mov	r0, r4
   1ae1a:	f01d fab6 	bl	3838a <strncmp>
   1ae1e:	4607      	mov	r7, r0
   1ae20:	2800      	cmp	r0, #0
   1ae22:	f040 809e 	bne.w	1af62 <set_setting+0x16e>
   1ae26:	4b50      	ldr	r3, [pc, #320]	; (1af68 <set_setting+0x174>)
   1ae28:	e8d3 3faf 	lda	r3, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ae2c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
   1ae30:	f013 0f08 	tst.w	r3, #8
   1ae34:	d138      	bne.n	1aea8 <set_setting+0xb4>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
   1ae36:	2207      	movs	r2, #7
   1ae38:	494d      	ldr	r1, [pc, #308]	; (1af70 <set_setting+0x17c>)
   1ae3a:	4628      	mov	r0, r5
   1ae3c:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
   1ae3e:	2806      	cmp	r0, #6
   1ae40:	d958      	bls.n	1aef4 <set_setting+0x100>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
   1ae42:	494c      	ldr	r1, [pc, #304]	; (1af74 <set_setting+0x180>)
   1ae44:	fba1 3100 	umull	r3, r1, r1, r0
   1ae48:	1a40      	subs	r0, r0, r1
   1ae4a:	eb01 0150 	add.w	r1, r1, r0, lsr #1
   1ae4e:	0889      	lsrs	r1, r1, #2
   1ae50:	4b47      	ldr	r3, [pc, #284]	; (1af70 <set_setting+0x17c>)
   1ae52:	71d9      	strb	r1, [r3, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
   1ae54:	4623      	mov	r3, r4
   1ae56:	e07c      	b.n	1af52 <set_setting+0x15e>
		LOG_ERR("Insufficient number of arguments");
   1ae58:	4b47      	ldr	r3, [pc, #284]	; (1af78 <set_setting+0x184>)
   1ae5a:	9313      	str	r3, [sp, #76]	; 0x4c
   1ae5c:	2302      	movs	r3, #2
   1ae5e:	f88d 3000 	strb.w	r3, [sp]
   1ae62:	2300      	movs	r3, #0
   1ae64:	f88d 3001 	strb.w	r3, [sp, #1]
   1ae68:	f88d 3002 	strb.w	r3, [sp, #2]
   1ae6c:	f88d 3003 	strb.w	r3, [sp, #3]
   1ae70:	9a00      	ldr	r2, [sp, #0]
   1ae72:	9212      	str	r2, [sp, #72]	; 0x48
   1ae74:	4619      	mov	r1, r3
   1ae76:	f363 0100 	bfi	r1, r3, #0, #1
   1ae7a:	f363 0141 	bfi	r1, r3, #1, #1
   1ae7e:	f363 0182 	bfi	r1, r3, #2, #1
   1ae82:	f363 01c5 	bfi	r1, r3, #3, #3
   1ae86:	2201      	movs	r2, #1
   1ae88:	f362 1188 	bfi	r1, r2, #6, #3
   1ae8c:	2208      	movs	r2, #8
   1ae8e:	f362 2152 	bfi	r1, r2, #9, #10
   1ae92:	f363 41de 	bfi	r1, r3, #19, #12
   1ae96:	f363 71df 	bfi	r1, r3, #31, #1
   1ae9a:	aa12      	add	r2, sp, #72	; 0x48
   1ae9c:	4837      	ldr	r0, [pc, #220]	; (1af7c <set_setting+0x188>)
   1ae9e:	f7fb fd55 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENOENT;
   1aea2:	f06f 0401 	mvn.w	r4, #1
   1aea6:	e059      	b.n	1af5c <set_setting+0x168>
			LOG_WRN("Ignoring identities stored in flash");
   1aea8:	4b35      	ldr	r3, [pc, #212]	; (1af80 <set_setting+0x18c>)
   1aeaa:	930d      	str	r3, [sp, #52]	; 0x34
   1aeac:	2202      	movs	r2, #2
   1aeae:	f88d 2000 	strb.w	r2, [sp]
   1aeb2:	2300      	movs	r3, #0
   1aeb4:	f88d 3001 	strb.w	r3, [sp, #1]
   1aeb8:	f88d 3002 	strb.w	r3, [sp, #2]
   1aebc:	f88d 3003 	strb.w	r3, [sp, #3]
   1aec0:	9900      	ldr	r1, [sp, #0]
   1aec2:	910c      	str	r1, [sp, #48]	; 0x30
   1aec4:	4619      	mov	r1, r3
   1aec6:	f363 0100 	bfi	r1, r3, #0, #1
   1aeca:	f363 0141 	bfi	r1, r3, #1, #1
   1aece:	f363 0182 	bfi	r1, r3, #2, #1
   1aed2:	f363 01c5 	bfi	r1, r3, #3, #3
   1aed6:	f362 1188 	bfi	r1, r2, #6, #3
   1aeda:	2208      	movs	r2, #8
   1aedc:	f362 2152 	bfi	r1, r2, #9, #10
   1aee0:	f363 41de 	bfi	r1, r3, #19, #12
   1aee4:	f363 71df 	bfi	r1, r3, #31, #1
   1aee8:	aa0c      	add	r2, sp, #48	; 0x30
   1aeea:	4824      	ldr	r0, [pc, #144]	; (1af7c <set_setting+0x188>)
   1aeec:	f7fb fd2e 	bl	1694c <z_impl_z_log_msg_static_create>
			return 0;
   1aef0:	463c      	mov	r4, r7
   1aef2:	e033      	b.n	1af5c <set_setting+0x168>
				LOG_ERR("Invalid length ID address in storage");
   1aef4:	4b23      	ldr	r3, [pc, #140]	; (1af84 <set_setting+0x190>)
   1aef6:	9307      	str	r3, [sp, #28]
   1aef8:	2302      	movs	r3, #2
   1aefa:	f88d 3000 	strb.w	r3, [sp]
   1aefe:	2500      	movs	r5, #0
   1af00:	f88d 5001 	strb.w	r5, [sp, #1]
   1af04:	f88d 5002 	strb.w	r5, [sp, #2]
   1af08:	f88d 5003 	strb.w	r5, [sp, #3]
   1af0c:	9b00      	ldr	r3, [sp, #0]
   1af0e:	9306      	str	r3, [sp, #24]
   1af10:	4629      	mov	r1, r5
   1af12:	f365 0100 	bfi	r1, r5, #0, #1
   1af16:	f365 0141 	bfi	r1, r5, #1, #1
   1af1a:	f365 0182 	bfi	r1, r5, #2, #1
   1af1e:	f365 01c5 	bfi	r1, r5, #3, #3
   1af22:	2301      	movs	r3, #1
   1af24:	f363 1188 	bfi	r1, r3, #6, #3
   1af28:	2308      	movs	r3, #8
   1af2a:	f363 2152 	bfi	r1, r3, #9, #10
   1af2e:	f365 41de 	bfi	r1, r5, #19, #12
   1af32:	f365 71df 	bfi	r1, r5, #31, #1
   1af36:	462b      	mov	r3, r5
   1af38:	aa06      	add	r2, sp, #24
   1af3a:	4810      	ldr	r0, [pc, #64]	; (1af7c <set_setting+0x188>)
   1af3c:	f7fb fd06 	bl	1694c <z_impl_z_log_msg_static_create>
			(void)memset(bt_dev.id_addr, 0,
   1af40:	4e0b      	ldr	r6, [pc, #44]	; (1af70 <set_setting+0x17c>)
   1af42:	2207      	movs	r2, #7
   1af44:	4629      	mov	r1, r5
   1af46:	4630      	mov	r0, r6
   1af48:	f01d fa86 	bl	38458 <memset>
			bt_dev.id_count = 0U;
   1af4c:	71f5      	strb	r5, [r6, #7]
   1af4e:	e005      	b.n	1af5c <set_setting+0x168>
			for (i = 0; i < bt_dev.id_count; i++) {
   1af50:	3301      	adds	r3, #1
   1af52:	b2ca      	uxtb	r2, r1
   1af54:	4293      	cmp	r3, r2
   1af56:	dbfb      	blt.n	1af50 <set_setting+0x15c>
   1af58:	e000      	b.n	1af5c <set_setting+0x168>
		return 0;
   1af5a:	2400      	movs	r4, #0
}
   1af5c:	4620      	mov	r0, r4
   1af5e:	b015      	add	sp, #84	; 0x54
   1af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -ENOENT;
   1af62:	f06f 0401 	mvn.w	r4, #1
   1af66:	e7f9      	b.n	1af5c <set_setting+0x168>
   1af68:	200080cc 	.word	0x200080cc
   1af6c:	000420c4 	.word	0x000420c4
   1af70:	20008000 	.word	0x20008000
   1af74:	24924925 	.word	0x24924925
   1af78:	000420a0 	.word	0x000420a0
   1af7c:	0003f410 	.word	0x0003f410
   1af80:	000420c8 	.word	0x000420c8
   1af84:	000420ec 	.word	0x000420ec

0001af88 <bt_settings_encode_key>:
{
   1af88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af8c:	b088      	sub	sp, #32
   1af8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	if (key) {
   1af90:	b1dc      	cbz	r4, 1afca <bt_settings_encode_key+0x42>
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1af92:	799d      	ldrb	r5, [r3, #6]
   1af94:	795e      	ldrb	r6, [r3, #5]
   1af96:	791f      	ldrb	r7, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   1af98:	f893 c003 	ldrb.w	ip, [r3, #3]
   1af9c:	f893 e002 	ldrb.w	lr, [r3, #2]
   1afa0:	f893 8001 	ldrb.w	r8, [r3, #1]
			 addr->type, key);
   1afa4:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   1afa6:	9407      	str	r4, [sp, #28]
   1afa8:	9306      	str	r3, [sp, #24]
   1afaa:	f8cd 8014 	str.w	r8, [sp, #20]
   1afae:	f8cd e010 	str.w	lr, [sp, #16]
   1afb2:	f8cd c00c 	str.w	ip, [sp, #12]
   1afb6:	9702      	str	r7, [sp, #8]
   1afb8:	9601      	str	r6, [sp, #4]
   1afba:	9500      	str	r5, [sp, #0]
   1afbc:	4613      	mov	r3, r2
   1afbe:	4a0e      	ldr	r2, [pc, #56]	; (1aff8 <bt_settings_encode_key+0x70>)
   1afc0:	f01a fd25 	bl	35a0e <snprintk>
}
   1afc4:	b008      	add	sp, #32
   1afc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			 addr->a.val[5], addr->a.val[4], addr->a.val[3],
   1afca:	799c      	ldrb	r4, [r3, #6]
   1afcc:	795d      	ldrb	r5, [r3, #5]
   1afce:	791e      	ldrb	r6, [r3, #4]
			 addr->a.val[2], addr->a.val[1], addr->a.val[0],
   1afd0:	78df      	ldrb	r7, [r3, #3]
   1afd2:	f893 c002 	ldrb.w	ip, [r3, #2]
   1afd6:	f893 e001 	ldrb.w	lr, [r3, #1]
			 addr->type);
   1afda:	781b      	ldrb	r3, [r3, #0]
		snprintk(path, path_size,
   1afdc:	9306      	str	r3, [sp, #24]
   1afde:	f8cd e014 	str.w	lr, [sp, #20]
   1afe2:	f8cd c010 	str.w	ip, [sp, #16]
   1afe6:	9703      	str	r7, [sp, #12]
   1afe8:	9602      	str	r6, [sp, #8]
   1afea:	9501      	str	r5, [sp, #4]
   1afec:	9400      	str	r4, [sp, #0]
   1afee:	4613      	mov	r3, r2
   1aff0:	4a02      	ldr	r2, [pc, #8]	; (1affc <bt_settings_encode_key+0x74>)
   1aff2:	f01a fd0c 	bl	35a0e <snprintk>
}
   1aff6:	e7e5      	b.n	1afc4 <bt_settings_encode_key+0x3c>
   1aff8:	00042114 	.word	0x00042114
   1affc:	00042138 	.word	0x00042138

0001b000 <bt_settings_save_id>:

K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
   1b000:	b508      	push	{r3, lr}
	k_work_submit(&save_id_work);
   1b002:	4802      	ldr	r0, [pc, #8]	; (1b00c <bt_settings_save_id+0xc>)
   1b004:	f017 fa9c 	bl	32540 <k_work_submit>
}
   1b008:	bd08      	pop	{r3, pc}
   1b00a:	bf00      	nop
   1b00c:	20008410 	.word	0x20008410

0001b010 <commit_settings>:

static int commit_settings(void)
{
   1b010:	b510      	push	{r4, lr}
   1b012:	b08e      	sub	sp, #56	; 0x38
   1b014:	4b40      	ldr	r3, [pc, #256]	; (1b118 <commit_settings+0x108>)
   1b016:	e8d3 3faf 	lda	r3, [r3]
	int err;

	LOG_DBG("");

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1b01a:	f013 0f01 	tst.w	r3, #1
   1b01e:	d078      	beq.n	1b112 <commit_settings+0x102>
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
   1b020:	4b3e      	ldr	r3, [pc, #248]	; (1b11c <commit_settings+0x10c>)
   1b022:	79db      	ldrb	r3, [r3, #7]
   1b024:	b1eb      	cbz	r3, 1b062 <commit_settings+0x52>
			LOG_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!bt_dev.id_count) {
   1b026:	4b3d      	ldr	r3, [pc, #244]	; (1b11c <commit_settings+0x10c>)
   1b028:	79db      	ldrb	r3, [r3, #7]
   1b02a:	b923      	cbnz	r3, 1b036 <commit_settings+0x26>
		err = bt_setup_random_id_addr();
   1b02c:	f003 fde8 	bl	1ec00 <bt_setup_random_id_addr>
		if (err) {
   1b030:	4604      	mov	r4, r0
   1b032:	2800      	cmp	r0, #0
   1b034:	d140      	bne.n	1b0b8 <commit_settings+0xa8>
   1b036:	4b38      	ldr	r3, [pc, #224]	; (1b118 <commit_settings+0x108>)
   1b038:	e8d3 3faf 	lda	r3, [r3]
			LOG_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b03c:	f013 0f04 	tst.w	r3, #4
   1b040:	d060      	beq.n	1b104 <commit_settings+0xf4>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b042:	4b35      	ldr	r3, [pc, #212]	; (1b118 <commit_settings+0x108>)
   1b044:	e8d3 2fef 	ldaex	r2, [r3]
   1b048:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
   1b04c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1b050:	2800      	cmp	r0, #0
   1b052:	d1f7      	bne.n	1b044 <commit_settings+0x34>
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
   1b054:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1b058:	d157      	bne.n	1b10a <commit_settings+0xfa>
		LOG_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
   1b05a:	2400      	movs	r4, #0
}
   1b05c:	4620      	mov	r0, r4
   1b05e:	b00e      	add	sp, #56	; 0x38
   1b060:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   1b062:	f003 fd11 	bl	1ea88 <bt_setup_public_id_addr>
		if (err) {
   1b066:	4604      	mov	r4, r0
   1b068:	2800      	cmp	r0, #0
   1b06a:	d0dc      	beq.n	1b026 <commit_settings+0x16>
			LOG_ERR("Unable to setup an identity address");
   1b06c:	4b2c      	ldr	r3, [pc, #176]	; (1b120 <commit_settings+0x110>)
   1b06e:	9307      	str	r3, [sp, #28]
   1b070:	2302      	movs	r3, #2
   1b072:	f88d 3004 	strb.w	r3, [sp, #4]
   1b076:	2300      	movs	r3, #0
   1b078:	f88d 3005 	strb.w	r3, [sp, #5]
   1b07c:	f88d 3006 	strb.w	r3, [sp, #6]
   1b080:	f88d 3007 	strb.w	r3, [sp, #7]
   1b084:	9a01      	ldr	r2, [sp, #4]
   1b086:	9206      	str	r2, [sp, #24]
   1b088:	4619      	mov	r1, r3
   1b08a:	f363 0100 	bfi	r1, r3, #0, #1
   1b08e:	f363 0141 	bfi	r1, r3, #1, #1
   1b092:	f363 0182 	bfi	r1, r3, #2, #1
   1b096:	f363 01c5 	bfi	r1, r3, #3, #3
   1b09a:	2201      	movs	r2, #1
   1b09c:	f362 1188 	bfi	r1, r2, #6, #3
   1b0a0:	2208      	movs	r2, #8
   1b0a2:	f362 2152 	bfi	r1, r2, #9, #10
   1b0a6:	f363 41de 	bfi	r1, r3, #19, #12
   1b0aa:	f363 71df 	bfi	r1, r3, #31, #1
   1b0ae:	aa06      	add	r2, sp, #24
   1b0b0:	481c      	ldr	r0, [pc, #112]	; (1b124 <commit_settings+0x114>)
   1b0b2:	f7fb fc4b 	bl	1694c <z_impl_z_log_msg_static_create>
			return err;
   1b0b6:	e7d1      	b.n	1b05c <commit_settings+0x4c>
			LOG_ERR("Unable to setup an identity address");
   1b0b8:	4b19      	ldr	r3, [pc, #100]	; (1b120 <commit_settings+0x110>)
   1b0ba:	930d      	str	r3, [sp, #52]	; 0x34
   1b0bc:	2302      	movs	r3, #2
   1b0be:	f88d 3004 	strb.w	r3, [sp, #4]
   1b0c2:	2300      	movs	r3, #0
   1b0c4:	f88d 3005 	strb.w	r3, [sp, #5]
   1b0c8:	f88d 3006 	strb.w	r3, [sp, #6]
   1b0cc:	f88d 3007 	strb.w	r3, [sp, #7]
   1b0d0:	9a01      	ldr	r2, [sp, #4]
   1b0d2:	920c      	str	r2, [sp, #48]	; 0x30
   1b0d4:	4619      	mov	r1, r3
   1b0d6:	f363 0100 	bfi	r1, r3, #0, #1
   1b0da:	f363 0141 	bfi	r1, r3, #1, #1
   1b0de:	f363 0182 	bfi	r1, r3, #2, #1
   1b0e2:	f363 01c5 	bfi	r1, r3, #3, #3
   1b0e6:	2201      	movs	r2, #1
   1b0e8:	f362 1188 	bfi	r1, r2, #6, #3
   1b0ec:	2208      	movs	r2, #8
   1b0ee:	f362 2152 	bfi	r1, r2, #9, #10
   1b0f2:	f363 41de 	bfi	r1, r3, #19, #12
   1b0f6:	f363 71df 	bfi	r1, r3, #31, #1
   1b0fa:	aa0c      	add	r2, sp, #48	; 0x30
   1b0fc:	4809      	ldr	r0, [pc, #36]	; (1b124 <commit_settings+0x114>)
   1b0fe:	f7fb fc25 	bl	1694c <z_impl_z_log_msg_static_create>
			return err;
   1b102:	e7ab      	b.n	1b05c <commit_settings+0x4c>
		bt_finalize_init();
   1b104:	f002 fe94 	bl	1de30 <bt_finalize_init>
   1b108:	e79b      	b.n	1b042 <commit_settings+0x32>
		bt_settings_save_id();
   1b10a:	f7ff ff79 	bl	1b000 <bt_settings_save_id>
	return 0;
   1b10e:	2400      	movs	r4, #0
   1b110:	e7a4      	b.n	1b05c <commit_settings+0x4c>
		return 0;
   1b112:	2400      	movs	r4, #0
   1b114:	e7a2      	b.n	1b05c <commit_settings+0x4c>
   1b116:	bf00      	nop
   1b118:	200080cc 	.word	0x200080cc
   1b11c:	20008000 	.word	0x20008000
   1b120:	0004215c 	.word	0x0004215c
   1b124:	0003f410 	.word	0x0003f410

0001b128 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set_setting, commit_settings, NULL);

int bt_settings_init(void)
{
   1b128:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b12a:	b083      	sub	sp, #12
   1b12c:	af00      	add	r7, sp, #0
	int err;

	LOG_DBG("");

	err = settings_subsys_init();
   1b12e:	f7fd fb27 	bl	18780 <settings_subsys_init>
	if (err) {
   1b132:	4604      	mov	r4, r0
   1b134:	b918      	cbnz	r0, 1b13e <bt_settings_init+0x16>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
		return err;
	}

	return 0;
}
   1b136:	4620      	mov	r0, r4
   1b138:	370c      	adds	r7, #12
   1b13a:	46bd      	mov	sp, r7
   1b13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   1b13e:	466d      	mov	r5, sp
   1b140:	b088      	sub	sp, #32
   1b142:	466b      	mov	r3, sp
   1b144:	f113 0210 	adds.w	r2, r3, #16
   1b148:	d030      	beq.n	1b1ac <bt_settings_init+0x84>
   1b14a:	210c      	movs	r1, #12
   1b14c:	b13a      	cbz	r2, 1b15e <bt_settings_init+0x36>
   1b14e:	4608      	mov	r0, r1
   1b150:	2904      	cmp	r1, #4
   1b152:	dd01      	ble.n	1b158 <bt_settings_init+0x30>
   1b154:	4e18      	ldr	r6, [pc, #96]	; (1b1b8 <bt_settings_init+0x90>)
   1b156:	615e      	str	r6, [r3, #20]
   1b158:	2808      	cmp	r0, #8
   1b15a:	dd00      	ble.n	1b15e <bt_settings_init+0x36>
   1b15c:	619c      	str	r4, [r3, #24]
   1b15e:	290b      	cmp	r1, #11
   1b160:	dd27      	ble.n	1b1b2 <bt_settings_init+0x8a>
   1b162:	f04f 0c0c 	mov.w	ip, #12
   1b166:	b13a      	cbz	r2, 1b178 <bt_settings_init+0x50>
   1b168:	2103      	movs	r1, #3
   1b16a:	7139      	strb	r1, [r7, #4]
   1b16c:	2100      	movs	r1, #0
   1b16e:	7179      	strb	r1, [r7, #5]
   1b170:	71b9      	strb	r1, [r7, #6]
   1b172:	71f9      	strb	r1, [r7, #7]
   1b174:	6878      	ldr	r0, [r7, #4]
   1b176:	6118      	str	r0, [r3, #16]
   1b178:	2100      	movs	r1, #0
   1b17a:	f36f 0100 	bfc	r1, #0, #1
   1b17e:	f36f 0141 	bfc	r1, #1, #1
   1b182:	f36f 0182 	bfc	r1, #2, #1
   1b186:	f36f 01c5 	bfc	r1, #3, #3
   1b18a:	2301      	movs	r3, #1
   1b18c:	f363 1188 	bfi	r1, r3, #6, #3
   1b190:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1b194:	f36c 2152 	bfi	r1, ip, #9, #10
   1b198:	f36f 41de 	bfc	r1, #19, #12
   1b19c:	f36f 71df 	bfc	r1, #31, #1
   1b1a0:	2300      	movs	r3, #0
   1b1a2:	4806      	ldr	r0, [pc, #24]	; (1b1bc <bt_settings_init+0x94>)
   1b1a4:	f7fb fbd2 	bl	1694c <z_impl_z_log_msg_static_create>
   1b1a8:	46ad      	mov	sp, r5
		return err;
   1b1aa:	e7c4      	b.n	1b136 <bt_settings_init+0xe>
		LOG_ERR("settings_subsys_init failed (err %d)", err);
   1b1ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b1b0:	e7cc      	b.n	1b14c <bt_settings_init+0x24>
   1b1b2:	f06f 0c1b 	mvn.w	ip, #27
   1b1b6:	e7d6      	b.n	1b166 <bt_settings_init+0x3e>
   1b1b8:	00042180 	.word	0x00042180
   1b1bc:	0003f410 	.word	0x0003f410

0001b1c0 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   1b1c0:	b570      	push	{r4, r5, r6, lr}
   1b1c2:	b084      	sub	sp, #16
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   1b1c4:	ae02      	add	r6, sp, #8
   1b1c6:	2400      	movs	r4, #0
   1b1c8:	9402      	str	r4, [sp, #8]
   1b1ca:	9403      	str	r4, [sp, #12]
   1b1cc:	4b08      	ldr	r3, [pc, #32]	; (1b1f0 <long_wq_init+0x30>)
   1b1ce:	9302      	str	r3, [sp, #8]

	k_work_queue_init(&bt_long_wq);
   1b1d0:	4d08      	ldr	r5, [pc, #32]	; (1b1f4 <long_wq_init+0x34>)
   1b1d2:	4628      	mov	r0, r5
   1b1d4:	f017 f9bc 	bl	32550 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   1b1d8:	9600      	str	r6, [sp, #0]
   1b1da:	230a      	movs	r3, #10
   1b1dc:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1b1e0:	4905      	ldr	r1, [pc, #20]	; (1b1f8 <long_wq_init+0x38>)
   1b1e2:	4628      	mov	r0, r5
   1b1e4:	f017 f9ce 	bl	32584 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   1b1e8:	4620      	mov	r0, r4
   1b1ea:	b004      	add	sp, #16
   1b1ec:	bd70      	pop	{r4, r5, r6, pc}
   1b1ee:	bf00      	nop
   1b1f0:	000421b8 	.word	0x000421b8
   1b1f4:	2000b218 	.word	0x2000b218
   1b1f8:	2000e6c0 	.word	0x2000e6c0

0001b1fc <bt_long_wq_schedule>:
{
   1b1fc:	b508      	push	{r3, lr}
   1b1fe:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   1b200:	4801      	ldr	r0, [pc, #4]	; (1b208 <bt_long_wq_schedule+0xc>)
   1b202:	f017 fb4b 	bl	3289c <k_work_schedule_for_queue>
}
   1b206:	bd08      	pop	{r3, pc}
   1b208:	2000b218 	.word	0x2000b218

0001b20c <bt_long_wq_reschedule>:
{
   1b20c:	b508      	push	{r3, lr}
   1b20e:	4601      	mov	r1, r0
	return k_work_reschedule_for_queue(&bt_long_wq, dwork, timeout);
   1b210:	4801      	ldr	r0, [pc, #4]	; (1b218 <bt_long_wq_reschedule+0xc>)
   1b212:	f017 fbb7 	bl	32984 <k_work_reschedule_for_queue>
}
   1b216:	bd08      	pop	{r3, pc}
   1b218:	2000b218 	.word	0x2000b218

0001b21c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1b21c:	b510      	push	{r4, lr}
   1b21e:	4686      	mov	lr, r0
   1b220:	468c      	mov	ip, r1
	switch (src->type) {
   1b222:	7803      	ldrb	r3, [r0, #0]
   1b224:	2b01      	cmp	r3, #1
   1b226:	d018      	beq.n	1b25a <uuid_to_uuid128+0x3e>
   1b228:	2b02      	cmp	r3, #2
   1b22a:	d032      	beq.n	1b292 <uuid_to_uuid128+0x76>
   1b22c:	b103      	cbz	r3, 1b230 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1b22e:	bd10      	pop	{r4, pc}
		*dst = uuid128_base;
   1b230:	4c1b      	ldr	r4, [pc, #108]	; (1b2a0 <uuid_to_uuid128+0x84>)
   1b232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b234:	f8cc 0000 	str.w	r0, [ip]
   1b238:	f8cc 1004 	str.w	r1, [ip, #4]
   1b23c:	f8cc 2008 	str.w	r2, [ip, #8]
   1b240:	f8cc 300c 	str.w	r3, [ip, #12]
   1b244:	7823      	ldrb	r3, [r4, #0]
   1b246:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   1b24a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1b24e:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   1b252:	0a1b      	lsrs	r3, r3, #8
   1b254:	f88c 300e 	strb.w	r3, [ip, #14]
}
   1b258:	e7e9      	b.n	1b22e <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   1b25a:	4c11      	ldr	r4, [pc, #68]	; (1b2a0 <uuid_to_uuid128+0x84>)
   1b25c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b25e:	f8cc 0000 	str.w	r0, [ip]
   1b262:	f8cc 1004 	str.w	r1, [ip, #4]
   1b266:	f8cc 2008 	str.w	r2, [ip, #8]
   1b26a:	f8cc 300c 	str.w	r3, [ip, #12]
   1b26e:	7823      	ldrb	r3, [r4, #0]
   1b270:	f88c 3010 	strb.w	r3, [ip, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   1b274:	f8de 3004 	ldr.w	r3, [lr, #4]
	dst[0] = val;
   1b278:	f88c 300d 	strb.w	r3, [ip, #13]
	dst[1] = val >> 8;
   1b27c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1b280:	f88c 200e 	strb.w	r2, [ip, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1b284:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1b286:	f88c 200f 	strb.w	r2, [ip, #15]
	dst[1] = val >> 8;
   1b28a:	0e1b      	lsrs	r3, r3, #24
   1b28c:	f88c 3010 	strb.w	r3, [ip, #16]
}
   1b290:	e7cd      	b.n	1b22e <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   1b292:	2211      	movs	r2, #17
   1b294:	4601      	mov	r1, r0
   1b296:	4660      	mov	r0, ip
   1b298:	f01d f8af 	bl	383fa <memcpy>
		return;
   1b29c:	e7c7      	b.n	1b22e <uuid_to_uuid128+0x12>
   1b29e:	bf00      	nop
   1b2a0:	000421c4 	.word	0x000421c4

0001b2a4 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   1b2a4:	b538      	push	{r3, r4, r5, lr}
   1b2a6:	4605      	mov	r5, r0
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1b2a8:	2801      	cmp	r0, #1
   1b2aa:	d01e      	beq.n	1b2ea <bt_buf_get_rx+0x46>
   1b2ac:	2803      	cmp	r0, #3
   1b2ae:	d001      	beq.n	1b2b4 <bt_buf_get_rx+0x10>
   1b2b0:	2805      	cmp	r0, #5
   1b2b2:	d10c      	bne.n	1b2ce <bt_buf_get_rx+0x2a>
	return net_buf_alloc_fixed(pool, timeout);
   1b2b4:	480f      	ldr	r0, [pc, #60]	; (1b2f4 <bt_buf_get_rx+0x50>)
   1b2b6:	f020 fd7c 	bl	3bdb2 <net_buf_alloc_fixed>
   1b2ba:	4604      	mov	r4, r0
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1b2bc:	b12c      	cbz	r4, 1b2ca <bt_buf_get_rx+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1b2be:	2101      	movs	r1, #1
   1b2c0:	f104 000c 	add.w	r0, r4, #12
   1b2c4:	f00e f8c6 	bl	29454 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1b2c8:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1b2ca:	4620      	mov	r0, r4
   1b2cc:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   1b2ce:	4c0a      	ldr	r4, [pc, #40]	; (1b2f8 <bt_buf_get_rx+0x54>)
   1b2d0:	233d      	movs	r3, #61	; 0x3d
   1b2d2:	4622      	mov	r2, r4
   1b2d4:	4909      	ldr	r1, [pc, #36]	; (1b2fc <bt_buf_get_rx+0x58>)
   1b2d6:	480a      	ldr	r0, [pc, #40]	; (1b300 <bt_buf_get_rx+0x5c>)
   1b2d8:	f01a ffdc 	bl	36294 <assert_print>
   1b2dc:	4809      	ldr	r0, [pc, #36]	; (1b304 <bt_buf_get_rx+0x60>)
   1b2de:	f01a ffd9 	bl	36294 <assert_print>
   1b2e2:	213d      	movs	r1, #61	; 0x3d
   1b2e4:	4620      	mov	r0, r4
   1b2e6:	f01a ffce 	bl	36286 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1b2ea:	4807      	ldr	r0, [pc, #28]	; (1b308 <bt_buf_get_rx+0x64>)
   1b2ec:	f020 fd61 	bl	3bdb2 <net_buf_alloc_fixed>
   1b2f0:	4604      	mov	r4, r0
   1b2f2:	e7e3      	b.n	1b2bc <bt_buf_get_rx+0x18>
   1b2f4:	20008a34 	.word	0x20008a34
   1b2f8:	000421d8 	.word	0x000421d8
   1b2fc:	00042208 	.word	0x00042208
   1b300:	0003f72c 	.word	0x0003f72c
   1b304:	00042250 	.word	0x00042250
   1b308:	20008ad0 	.word	0x20008ad0

0001b30c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1b30c:	b510      	push	{r4, lr}
   1b30e:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1b310:	4b0a      	ldr	r3, [pc, #40]	; (1b33c <bt_buf_get_cmd_complete+0x30>)
   1b312:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   1b316:	b158      	cbz	r0, 1b330 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   1b318:	f00e f9fa 	bl	29710 <net_buf_ref>
   1b31c:	4604      	mov	r4, r0
   1b31e:	2101      	movs	r1, #1
   1b320:	7601      	strb	r1, [r0, #24]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   1b322:	2300      	movs	r3, #0
   1b324:	8203      	strh	r3, [r0, #16]
	net_buf_simple_reserve(&buf->b, reserve);
   1b326:	300c      	adds	r0, #12
   1b328:	f00e f894 	bl	29454 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1b32c:	4620      	mov	r0, r4
   1b32e:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1b330:	460b      	mov	r3, r1
   1b332:	2001      	movs	r0, #1
   1b334:	f7ff ffb6 	bl	1b2a4 <bt_buf_get_rx>
   1b338:	4604      	mov	r4, r0
   1b33a:	e7f7      	b.n	1b32c <bt_buf_get_cmd_complete+0x20>
   1b33c:	20008000 	.word	0x20008000

0001b340 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1b340:	b510      	push	{r4, lr}
	switch (evt) {
   1b342:	280f      	cmp	r0, #15
   1b344:	d90d      	bls.n	1b362 <bt_buf_get_evt+0x22>
   1b346:	2813      	cmp	r0, #19
   1b348:	d10d      	bne.n	1b366 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   1b34a:	4814      	ldr	r0, [pc, #80]	; (1b39c <bt_buf_get_evt+0x5c>)
   1b34c:	f020 fd31 	bl	3bdb2 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   1b350:	4604      	mov	r4, r0
   1b352:	b198      	cbz	r0, 1b37c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1b354:	2101      	movs	r1, #1
   1b356:	300c      	adds	r0, #12
   1b358:	f00e f87c 	bl	29454 <net_buf_simple_reserve>
   1b35c:	2301      	movs	r3, #1
   1b35e:	7623      	strb	r3, [r4, #24]
}
   1b360:	e00c      	b.n	1b37c <bt_buf_get_evt+0x3c>
	switch (evt) {
   1b362:	280e      	cmp	r0, #14
   1b364:	d205      	bcs.n	1b372 <bt_buf_get_evt+0x32>
#endif /* CONFIG_BT_CONN || CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
		if (discardable) {
   1b366:	b959      	cbnz	r1, 1b380 <bt_buf_get_evt+0x40>
			}

			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1b368:	2001      	movs	r0, #1
   1b36a:	f7ff ff9b 	bl	1b2a4 <bt_buf_get_rx>
   1b36e:	4604      	mov	r4, r0
   1b370:	e004      	b.n	1b37c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   1b372:	4610      	mov	r0, r2
   1b374:	4619      	mov	r1, r3
   1b376:	f7ff ffc9 	bl	1b30c <bt_buf_get_cmd_complete>
   1b37a:	4604      	mov	r4, r0
	}
}
   1b37c:	4620      	mov	r0, r4
   1b37e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   1b380:	4807      	ldr	r0, [pc, #28]	; (1b3a0 <bt_buf_get_evt+0x60>)
   1b382:	f020 fd16 	bl	3bdb2 <net_buf_alloc_fixed>
			if (buf) {
   1b386:	4604      	mov	r4, r0
   1b388:	2800      	cmp	r0, #0
   1b38a:	d0f7      	beq.n	1b37c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1b38c:	2101      	movs	r1, #1
   1b38e:	300c      	adds	r0, #12
   1b390:	f00e f860 	bl	29454 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1b394:	2301      	movs	r3, #1
   1b396:	7623      	strb	r3, [r4, #24]
			return buf;
   1b398:	e7f0      	b.n	1b37c <bt_buf_get_evt+0x3c>
   1b39a:	bf00      	nop
   1b39c:	20008b6c 	.word	0x20008b6c
   1b3a0:	20008a9c 	.word	0x20008a9c

0001b3a4 <conn_handle_disconnected>:
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1b3a4:	2300      	movs	r3, #0
   1b3a6:	b103      	cbz	r3, 1b3aa <conn_handle_disconnected+0x6>
}
   1b3a8:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   1b3aa:	4a05      	ldr	r2, [pc, #20]	; (1b3c0 <conn_handle_disconnected+0x1c>)
   1b3ac:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1b3b0:	b922      	cbnz	r2, 1b3bc <conn_handle_disconnected+0x18>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1b3b2:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   1b3b6:	4902      	ldr	r1, [pc, #8]	; (1b3c0 <conn_handle_disconnected+0x1c>)
   1b3b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1b3bc:	3301      	adds	r3, #1
   1b3be:	e7f2      	b.n	1b3a6 <conn_handle_disconnected+0x2>
   1b3c0:	2000c020 	.word	0x2000c020

0001b3c4 <conn_handle_is_disconnected>:
	handle |= ~BT_ACL_HANDLE_MASK;
   1b3c4:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1b3c8:	2300      	movs	r3, #0
   1b3ca:	b10b      	cbz	r3, 1b3d0 <conn_handle_is_disconnected+0xc>
	return false;
   1b3cc:	2000      	movs	r0, #0
}
   1b3ce:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   1b3d0:	4a06      	ldr	r2, [pc, #24]	; (1b3ec <conn_handle_is_disconnected+0x28>)
   1b3d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   1b3d6:	4282      	cmp	r2, r0
   1b3d8:	d001      	beq.n	1b3de <conn_handle_is_disconnected+0x1a>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   1b3da:	3301      	adds	r3, #1
   1b3dc:	e7f5      	b.n	1b3ca <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   1b3de:	4a03      	ldr	r2, [pc, #12]	; (1b3ec <conn_handle_is_disconnected+0x28>)
   1b3e0:	2100      	movs	r1, #0
   1b3e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   1b3e6:	2001      	movs	r0, #1
   1b3e8:	4770      	bx	lr
   1b3ea:	bf00      	nop
   1b3ec:	2000c020 	.word	0x2000c020

0001b3f0 <read_local_ver_complete>:
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1b3f0:	68c2      	ldr	r2, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   1b3f2:	7851      	ldrb	r1, [r2, #1]
   1b3f4:	4b08      	ldr	r3, [pc, #32]	; (1b418 <read_local_ver_complete+0x28>)
   1b3f6:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1b3fa:	8851      	ldrh	r1, [r2, #2]
   1b3fc:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   1b400:	7911      	ldrb	r1, [r2, #4]
   1b402:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   1b406:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   1b40a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1b40e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   1b412:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   1b416:	4770      	bx	lr
   1b418:	20008000 	.word	0x20008000

0001b41c <le_read_supp_states_complete>:
{
   1b41c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   1b41e:	68c0      	ldr	r0, [r0, #12]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1b420:	3001      	adds	r0, #1
   1b422:	f01d f922 	bl	3866a <sys_get_le64>
   1b426:	4b02      	ldr	r3, [pc, #8]	; (1b430 <le_read_supp_states_complete+0x14>)
   1b428:	e9c3 0136 	strd	r0, r1, [r3, #216]	; 0xd8
}
   1b42c:	bd08      	pop	{r3, pc}
   1b42e:	bf00      	nop
   1b430:	20008000 	.word	0x20008000

0001b434 <le_read_resolving_list_size_complete>:
	struct bt_hci_rp_le_read_rl_size *rp = (void *)buf->data;
   1b434:	68c3      	ldr	r3, [r0, #12]
	bt_dev.le.rl_size = rp->rl_size;
   1b436:	785a      	ldrb	r2, [r3, #1]
   1b438:	4b01      	ldr	r3, [pc, #4]	; (1b440 <le_read_resolving_list_size_complete+0xc>)
   1b43a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1b43e:	4770      	bx	lr
   1b440:	20008000 	.word	0x20008000

0001b444 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   1b444:	68c3      	ldr	r3, [r0, #12]
   1b446:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   1b448:	b953      	cbnz	r3, 1b460 <hci_reset_complete+0x1c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b44a:	4b06      	ldr	r3, [pc, #24]	; (1b464 <hci_reset_complete+0x20>)
   1b44c:	e8d3 2faf 	lda	r2, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b450:	f002 0209 	and.w	r2, r2, #9
   1b454:	e8d3 1fef 	ldaex	r1, [r3]
   1b458:	e8c3 2fe0 	stlex	r0, r2, [r3]
   1b45c:	2800      	cmp	r0, #0
   1b45e:	d1f9      	bne.n	1b454 <hci_reset_complete+0x10>
}
   1b460:	4770      	bx	lr
   1b462:	bf00      	nop
   1b464:	200080cc 	.word	0x200080cc

0001b468 <read_local_features_complete>:
{
   1b468:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   1b46a:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1b46c:	2208      	movs	r2, #8
   1b46e:	3101      	adds	r1, #1
   1b470:	4801      	ldr	r0, [pc, #4]	; (1b478 <read_local_features_complete+0x10>)
   1b472:	f01c ffc2 	bl	383fa <memcpy>
}
   1b476:	bd08      	pop	{r3, pc}
   1b478:	20008070 	.word	0x20008070

0001b47c <read_supported_commands_complete>:
{
   1b47c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   1b47e:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   1b480:	2240      	movs	r2, #64	; 0x40
   1b482:	3101      	adds	r1, #1
   1b484:	4801      	ldr	r0, [pc, #4]	; (1b48c <read_supported_commands_complete+0x10>)
   1b486:	f01c ffb8 	bl	383fa <memcpy>
}
   1b48a:	bd08      	pop	{r3, pc}
   1b48c:	20008078 	.word	0x20008078

0001b490 <read_le_features_complete>:
{
   1b490:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1b492:	68c1      	ldr	r1, [r0, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1b494:	2208      	movs	r2, #8
   1b496:	3101      	adds	r1, #1
   1b498:	4801      	ldr	r0, [pc, #4]	; (1b4a0 <read_le_features_complete+0x10>)
   1b49a:	f01c ffae 	bl	383fa <memcpy>
}
   1b49e:	bd08      	pop	{r3, pc}
   1b4a0:	200080d0 	.word	0x200080d0

0001b4a4 <le_read_buffer_size_complete>:
{
   1b4a4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1b4a6:	68c2      	ldr	r2, [r0, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1b4a8:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   1b4ac:	b299      	uxth	r1, r3
   1b4ae:	4806      	ldr	r0, [pc, #24]	; (1b4c8 <le_read_buffer_size_complete+0x24>)
   1b4b0:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   1b4b4:	b901      	cbnz	r1, 1b4b8 <le_read_buffer_size_complete+0x14>
}
   1b4b6:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1b4b8:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b4ba:	460a      	mov	r2, r1
   1b4bc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1b4c0:	f023 faa3 	bl	3ea0a <z_impl_k_sem_init>
   1b4c4:	e7f7      	b.n	1b4b6 <le_read_buffer_size_complete+0x12>
   1b4c6:	bf00      	nop
   1b4c8:	20008000 	.word	0x20008000

0001b4cc <read_buffer_size_complete>:
{
   1b4cc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1b4ce:	68c2      	ldr	r2, [r0, #12]
	if (bt_dev.le.acl_mtu) {
   1b4d0:	4b08      	ldr	r3, [pc, #32]	; (1b4f4 <read_buffer_size_complete+0x28>)
   1b4d2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1b4d6:	b103      	cbz	r3, 1b4da <read_buffer_size_complete+0xe>
}
   1b4d8:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1b4da:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   1b4de:	4805      	ldr	r0, [pc, #20]	; (1b4f4 <read_buffer_size_complete+0x28>)
   1b4e0:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   1b4e4:	8891      	ldrh	r1, [r2, #4]
   1b4e6:	460a      	mov	r2, r1
   1b4e8:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1b4ec:	f023 fa8d 	bl	3ea0a <z_impl_k_sem_init>
   1b4f0:	e7f2      	b.n	1b4d8 <read_buffer_size_complete+0xc>
   1b4f2:	bf00      	nop
   1b4f4:	20008000 	.word	0x20008000

0001b4f8 <hci_data_buf_overflow>:
{
   1b4f8:	b5b0      	push	{r4, r5, r7, lr}
   1b4fa:	b082      	sub	sp, #8
   1b4fc:	af00      	add	r7, sp, #0
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   1b4fe:	68c3      	ldr	r3, [r0, #12]
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1b500:	781c      	ldrb	r4, [r3, #0]
   1b502:	b088      	sub	sp, #32
   1b504:	466b      	mov	r3, sp
   1b506:	f113 0210 	adds.w	r2, r3, #16
   1b50a:	d031      	beq.n	1b570 <hci_data_buf_overflow+0x78>
   1b50c:	210c      	movs	r1, #12
   1b50e:	b13a      	cbz	r2, 1b520 <hci_data_buf_overflow+0x28>
   1b510:	4608      	mov	r0, r1
   1b512:	2904      	cmp	r1, #4
   1b514:	dd01      	ble.n	1b51a <hci_data_buf_overflow+0x22>
   1b516:	4d19      	ldr	r5, [pc, #100]	; (1b57c <hci_data_buf_overflow+0x84>)
   1b518:	615d      	str	r5, [r3, #20]
   1b51a:	2808      	cmp	r0, #8
   1b51c:	dd00      	ble.n	1b520 <hci_data_buf_overflow+0x28>
   1b51e:	619c      	str	r4, [r3, #24]
   1b520:	290b      	cmp	r1, #11
   1b522:	dd28      	ble.n	1b576 <hci_data_buf_overflow+0x7e>
   1b524:	f04f 0c0c 	mov.w	ip, #12
   1b528:	b13a      	cbz	r2, 1b53a <hci_data_buf_overflow+0x42>
   1b52a:	2103      	movs	r1, #3
   1b52c:	7139      	strb	r1, [r7, #4]
   1b52e:	2100      	movs	r1, #0
   1b530:	7179      	strb	r1, [r7, #5]
   1b532:	71b9      	strb	r1, [r7, #6]
   1b534:	71f9      	strb	r1, [r7, #7]
   1b536:	6878      	ldr	r0, [r7, #4]
   1b538:	6118      	str	r0, [r3, #16]
   1b53a:	2100      	movs	r1, #0
   1b53c:	f36f 0100 	bfc	r1, #0, #1
   1b540:	f36f 0141 	bfc	r1, #1, #1
   1b544:	f36f 0182 	bfc	r1, #2, #1
   1b548:	f36f 01c5 	bfc	r1, #3, #3
   1b54c:	2302      	movs	r3, #2
   1b54e:	f363 1188 	bfi	r1, r3, #6, #3
   1b552:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1b556:	f36c 2152 	bfi	r1, ip, #9, #10
   1b55a:	f36f 41de 	bfc	r1, #19, #12
   1b55e:	f36f 71df 	bfc	r1, #31, #1
   1b562:	2300      	movs	r3, #0
   1b564:	4806      	ldr	r0, [pc, #24]	; (1b580 <hci_data_buf_overflow+0x88>)
   1b566:	f7fb f9f1 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1b56a:	3708      	adds	r7, #8
   1b56c:	46bd      	mov	sp, r7
   1b56e:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1b570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b574:	e7cb      	b.n	1b50e <hci_data_buf_overflow+0x16>
   1b576:	f06f 0c1b 	mvn.w	ip, #27
   1b57a:	e7d5      	b.n	1b528 <hci_data_buf_overflow+0x30>
   1b57c:	000422b0 	.word	0x000422b0
   1b580:	0003f3d0 	.word	0x0003f3d0

0001b584 <handle_event_common>:
{
   1b584:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b586:	b083      	sub	sp, #12
   1b588:	af00      	add	r7, sp, #0
   1b58a:	4604      	mov	r4, r0
   1b58c:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   1b58e:	f04f 0c00 	mov.w	ip, #0
   1b592:	4563      	cmp	r3, ip
   1b594:	d955      	bls.n	1b642 <handle_event_common+0xbe>
		const struct event_handler *handler = &handlers[i];
   1b596:	eb02 01cc 	add.w	r1, r2, ip, lsl #3
		if (handler->event != event) {
   1b59a:	f812 e03c 	ldrb.w	lr, [r2, ip, lsl #3]
   1b59e:	45a6      	cmp	lr, r4
   1b5a0:	d109      	bne.n	1b5b6 <handle_event_common+0x32>
		if (buf->len < handler->min_len) {
   1b5a2:	8a03      	ldrh	r3, [r0, #16]
   1b5a4:	784a      	ldrb	r2, [r1, #1]
   1b5a6:	4293      	cmp	r3, r2
   1b5a8:	d308      	bcc.n	1b5bc <handle_event_common+0x38>
		handler->handler(buf);
   1b5aa:	684b      	ldr	r3, [r1, #4]
   1b5ac:	4798      	blx	r3
		return 0;
   1b5ae:	2000      	movs	r0, #0
}
   1b5b0:	370c      	adds	r7, #12
   1b5b2:	46bd      	mov	sp, r7
   1b5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   1b5b6:	f10c 0c01 	add.w	ip, ip, #1
   1b5ba:	e7ea      	b.n	1b592 <handle_event_common+0xe>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   1b5bc:	466d      	mov	r5, sp
   1b5be:	b088      	sub	sp, #32
   1b5c0:	4669      	mov	r1, sp
   1b5c2:	f111 0210 	adds.w	r2, r1, #16
   1b5c6:	d036      	beq.n	1b636 <handle_event_common+0xb2>
   1b5c8:	2010      	movs	r0, #16
   1b5ca:	b162      	cbz	r2, 1b5e6 <handle_event_common+0x62>
   1b5cc:	4684      	mov	ip, r0
   1b5ce:	2804      	cmp	r0, #4
   1b5d0:	dd01      	ble.n	1b5d6 <handle_event_common+0x52>
   1b5d2:	4e1d      	ldr	r6, [pc, #116]	; (1b648 <handle_event_common+0xc4>)
   1b5d4:	614e      	str	r6, [r1, #20]
   1b5d6:	f1bc 0f08 	cmp.w	ip, #8
   1b5da:	dd00      	ble.n	1b5de <handle_event_common+0x5a>
   1b5dc:	618b      	str	r3, [r1, #24]
   1b5de:	f1bc 0f0c 	cmp.w	ip, #12
   1b5e2:	dd00      	ble.n	1b5e6 <handle_event_common+0x62>
   1b5e4:	61cc      	str	r4, [r1, #28]
   1b5e6:	280f      	cmp	r0, #15
   1b5e8:	dd28      	ble.n	1b63c <handle_event_common+0xb8>
   1b5ea:	2310      	movs	r3, #16
   1b5ec:	b13a      	cbz	r2, 1b5fe <handle_event_common+0x7a>
   1b5ee:	2004      	movs	r0, #4
   1b5f0:	7138      	strb	r0, [r7, #4]
   1b5f2:	2000      	movs	r0, #0
   1b5f4:	7178      	strb	r0, [r7, #5]
   1b5f6:	71b8      	strb	r0, [r7, #6]
   1b5f8:	71f8      	strb	r0, [r7, #7]
   1b5fa:	6878      	ldr	r0, [r7, #4]
   1b5fc:	6108      	str	r0, [r1, #16]
   1b5fe:	2100      	movs	r1, #0
   1b600:	f36f 0100 	bfc	r1, #0, #1
   1b604:	f36f 0141 	bfc	r1, #1, #1
   1b608:	f36f 0182 	bfc	r1, #2, #1
   1b60c:	f36f 01c5 	bfc	r1, #3, #3
   1b610:	2001      	movs	r0, #1
   1b612:	f360 1188 	bfi	r1, r0, #6, #3
   1b616:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1b61a:	f363 2152 	bfi	r1, r3, #9, #10
   1b61e:	f36f 41de 	bfc	r1, #19, #12
   1b622:	f36f 71df 	bfc	r1, #31, #1
   1b626:	2300      	movs	r3, #0
   1b628:	4808      	ldr	r0, [pc, #32]	; (1b64c <handle_event_common+0xc8>)
   1b62a:	f7fb f98f 	bl	1694c <z_impl_z_log_msg_static_create>
   1b62e:	46ad      	mov	sp, r5
			return -EINVAL;
   1b630:	f06f 0015 	mvn.w	r0, #21
   1b634:	e7bc      	b.n	1b5b0 <handle_event_common+0x2c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   1b636:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b63a:	e7c6      	b.n	1b5ca <handle_event_common+0x46>
   1b63c:	f06f 031b 	mvn.w	r3, #27
   1b640:	e7d4      	b.n	1b5ec <handle_event_common+0x68>
	return -EOPNOTSUPP;
   1b642:	f06f 005e 	mvn.w	r0, #94	; 0x5e
   1b646:	e7b3      	b.n	1b5b0 <handle_event_common+0x2c>
   1b648:	000422d8 	.word	0x000422d8
   1b64c:	0003f3d0 	.word	0x0003f3d0

0001b650 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   1b650:	2801      	cmp	r0, #1
   1b652:	d001      	beq.n	1b658 <find_pending_connect+0x8>
	return NULL;
   1b654:	2000      	movs	r0, #0
}
   1b656:	4770      	bx	lr
{
   1b658:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1b65a:	2205      	movs	r2, #5
   1b65c:	4b07      	ldr	r3, [pc, #28]	; (1b67c <find_pending_connect+0x2c>)
   1b65e:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1b662:	f005 fad3 	bl	20c0c <bt_conn_lookup_state_le>
		if (!conn) {
   1b666:	b100      	cbz	r0, 1b66a <find_pending_connect+0x1a>
}
   1b668:	bd08      	pop	{r3, pc}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1b66a:	2204      	movs	r2, #4
   1b66c:	4904      	ldr	r1, [pc, #16]	; (1b680 <find_pending_connect+0x30>)
   1b66e:	4b03      	ldr	r3, [pc, #12]	; (1b67c <find_pending_connect+0x2c>)
   1b670:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1b674:	f005 faca 	bl	20c0c <bt_conn_lookup_state_le>
		return conn;
   1b678:	e7f6      	b.n	1b668 <find_pending_connect+0x18>
   1b67a:	bf00      	nop
   1b67c:	20008000 	.word	0x20008000
   1b680:	00042034 	.word	0x00042034

0001b684 <le_conn_complete_adv_timeout>:
{
   1b684:	b510      	push	{r4, lr}
   1b686:	b088      	sub	sp, #32
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1b688:	f003 fc84 	bl	1ef94 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   1b68c:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b68e:	e8d0 3fef 	ldaex	r3, [r0]
   1b692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1b696:	e8c0 3fe2 	stlex	r2, r3, [r0]
   1b69a:	2a00      	cmp	r2, #0
   1b69c:	d1f7      	bne.n	1b68e <le_conn_complete_adv_timeout+0xa>
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   1b69e:	2100      	movs	r1, #0
   1b6a0:	2001      	movs	r0, #1
   1b6a2:	f7ff ffd5 	bl	1b650 <find_pending_connect>
		if (!conn) {
   1b6a6:	4604      	mov	r4, r0
   1b6a8:	b148      	cbz	r0, 1b6be <le_conn_complete_adv_timeout+0x3a>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1b6aa:	233c      	movs	r3, #60	; 0x3c
   1b6ac:	7303      	strb	r3, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b6ae:	2100      	movs	r1, #0
   1b6b0:	f004 fe3e 	bl	20330 <bt_conn_set_state>
		bt_conn_unref(conn);
   1b6b4:	4620      	mov	r0, r4
   1b6b6:	f004 fdff 	bl	202b8 <bt_conn_unref>
}
   1b6ba:	b008      	add	sp, #32
   1b6bc:	bd10      	pop	{r4, pc}
			LOG_ERR("No pending peripheral connection");
   1b6be:	4b13      	ldr	r3, [pc, #76]	; (1b70c <le_conn_complete_adv_timeout+0x88>)
   1b6c0:	9307      	str	r3, [sp, #28]
   1b6c2:	2302      	movs	r3, #2
   1b6c4:	f88d 3004 	strb.w	r3, [sp, #4]
   1b6c8:	2300      	movs	r3, #0
   1b6ca:	f88d 3005 	strb.w	r3, [sp, #5]
   1b6ce:	f88d 3006 	strb.w	r3, [sp, #6]
   1b6d2:	f88d 3007 	strb.w	r3, [sp, #7]
   1b6d6:	9a01      	ldr	r2, [sp, #4]
   1b6d8:	9206      	str	r2, [sp, #24]
   1b6da:	4619      	mov	r1, r3
   1b6dc:	f363 0100 	bfi	r1, r3, #0, #1
   1b6e0:	f363 0141 	bfi	r1, r3, #1, #1
   1b6e4:	f363 0182 	bfi	r1, r3, #2, #1
   1b6e8:	f363 01c5 	bfi	r1, r3, #3, #3
   1b6ec:	2201      	movs	r2, #1
   1b6ee:	f362 1188 	bfi	r1, r2, #6, #3
   1b6f2:	2208      	movs	r2, #8
   1b6f4:	f362 2152 	bfi	r1, r2, #9, #10
   1b6f8:	f363 41de 	bfi	r1, r3, #19, #12
   1b6fc:	f363 71df 	bfi	r1, r3, #31, #1
   1b700:	aa06      	add	r2, sp, #24
   1b702:	4803      	ldr	r0, [pc, #12]	; (1b710 <le_conn_complete_adv_timeout+0x8c>)
   1b704:	f7fb f922 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   1b708:	e7d7      	b.n	1b6ba <le_conn_complete_adv_timeout+0x36>
   1b70a:	bf00      	nop
   1b70c:	000422fc 	.word	0x000422fc
   1b710:	0003f3d0 	.word	0x0003f3d0

0001b714 <hci_disconn_complete>:
{
   1b714:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b716:	b083      	sub	sp, #12
   1b718:	af00      	add	r7, sp, #0
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1b71a:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1b71c:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   1b720:	7823      	ldrb	r3, [r4, #0]
   1b722:	b113      	cbz	r3, 1b72a <hci_disconn_complete+0x16>
}
   1b724:	370c      	adds	r7, #12
   1b726:	46bd      	mov	sp, r7
   1b728:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_handle(handle);
   1b72a:	4630      	mov	r0, r6
   1b72c:	f004 fdf6 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1b730:	4605      	mov	r5, r0
   1b732:	b158      	cbz	r0, 1b74c <hci_disconn_complete+0x38>
	conn->err = evt->reason;
   1b734:	78e3      	ldrb	r3, [r4, #3]
   1b736:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b738:	2100      	movs	r1, #0
   1b73a:	f004 fdf9 	bl	20330 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1b73e:	78ab      	ldrb	r3, [r5, #2]
   1b740:	2b01      	cmp	r3, #1
   1b742:	d03f      	beq.n	1b7c4 <hci_disconn_complete+0xb0>
		bt_conn_unref(conn);
   1b744:	4628      	mov	r0, r5
   1b746:	f004 fdb7 	bl	202b8 <bt_conn_unref>
		return;
   1b74a:	e7eb      	b.n	1b724 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1b74c:	466d      	mov	r5, sp
   1b74e:	b088      	sub	sp, #32
   1b750:	466b      	mov	r3, sp
   1b752:	f113 0210 	adds.w	r2, r3, #16
   1b756:	d02f      	beq.n	1b7b8 <hci_disconn_complete+0xa4>
   1b758:	210c      	movs	r1, #12
   1b75a:	b13a      	cbz	r2, 1b76c <hci_disconn_complete+0x58>
   1b75c:	4608      	mov	r0, r1
   1b75e:	2904      	cmp	r1, #4
   1b760:	dd01      	ble.n	1b766 <hci_disconn_complete+0x52>
   1b762:	4c1a      	ldr	r4, [pc, #104]	; (1b7cc <hci_disconn_complete+0xb8>)
   1b764:	615c      	str	r4, [r3, #20]
   1b766:	2808      	cmp	r0, #8
   1b768:	dd00      	ble.n	1b76c <hci_disconn_complete+0x58>
   1b76a:	619e      	str	r6, [r3, #24]
   1b76c:	290b      	cmp	r1, #11
   1b76e:	dd26      	ble.n	1b7be <hci_disconn_complete+0xaa>
   1b770:	240c      	movs	r4, #12
   1b772:	b13a      	cbz	r2, 1b784 <hci_disconn_complete+0x70>
   1b774:	2103      	movs	r1, #3
   1b776:	7139      	strb	r1, [r7, #4]
   1b778:	2100      	movs	r1, #0
   1b77a:	7179      	strb	r1, [r7, #5]
   1b77c:	71b9      	strb	r1, [r7, #6]
   1b77e:	71f9      	strb	r1, [r7, #7]
   1b780:	6878      	ldr	r0, [r7, #4]
   1b782:	6118      	str	r0, [r3, #16]
   1b784:	2100      	movs	r1, #0
   1b786:	f36f 0100 	bfc	r1, #0, #1
   1b78a:	f36f 0141 	bfc	r1, #1, #1
   1b78e:	f36f 0182 	bfc	r1, #2, #1
   1b792:	f36f 01c5 	bfc	r1, #3, #3
   1b796:	2301      	movs	r3, #1
   1b798:	f363 1188 	bfi	r1, r3, #6, #3
   1b79c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1b7a0:	f363 2152 	bfi	r1, r3, #9, #10
   1b7a4:	f36f 41de 	bfc	r1, #19, #12
   1b7a8:	f36f 71df 	bfc	r1, #31, #1
   1b7ac:	2300      	movs	r3, #0
   1b7ae:	4808      	ldr	r0, [pc, #32]	; (1b7d0 <hci_disconn_complete+0xbc>)
   1b7b0:	f7fb f8cc 	bl	1694c <z_impl_z_log_msg_static_create>
   1b7b4:	46ad      	mov	sp, r5
		return;
   1b7b6:	e7b5      	b.n	1b724 <hci_disconn_complete+0x10>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1b7b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b7bc:	e7cd      	b.n	1b75a <hci_disconn_complete+0x46>
   1b7be:	f06f 041b 	mvn.w	r4, #27
   1b7c2:	e7d6      	b.n	1b772 <hci_disconn_complete+0x5e>
	bt_conn_unref(conn);
   1b7c4:	4628      	mov	r0, r5
   1b7c6:	f004 fd77 	bl	202b8 <bt_conn_unref>
   1b7ca:	e7ab      	b.n	1b724 <hci_disconn_complete+0x10>
   1b7cc:	00042320 	.word	0x00042320
   1b7d0:	0003f3d0 	.word	0x0003f3d0

0001b7d4 <le_remote_feat_complete>:
{
   1b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7d6:	b083      	sub	sp, #12
   1b7d8:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1b7da:	68c4      	ldr	r4, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1b7dc:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   1b7e0:	4630      	mov	r0, r6
   1b7e2:	f004 fd9b 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1b7e6:	b190      	cbz	r0, 1b80e <le_remote_feat_complete+0x3a>
   1b7e8:	4605      	mov	r5, r0
	if (!evt->status) {
   1b7ea:	7823      	ldrb	r3, [r4, #0]
   1b7ec:	2b00      	cmp	r3, #0
   1b7ee:	d04a      	beq.n	1b886 <le_remote_feat_complete+0xb2>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   1b7f0:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b7f2:	e8d3 1fef 	ldaex	r1, [r3]
   1b7f6:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   1b7fa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1b7fe:	2a00      	cmp	r2, #0
   1b800:	d1f7      	bne.n	1b7f2 <le_remote_feat_complete+0x1e>
	bt_conn_unref(conn);
   1b802:	4628      	mov	r0, r5
   1b804:	f004 fd58 	bl	202b8 <bt_conn_unref>
}
   1b808:	370c      	adds	r7, #12
   1b80a:	46bd      	mov	sp, r7
   1b80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1b80e:	466d      	mov	r5, sp
   1b810:	b088      	sub	sp, #32
   1b812:	466b      	mov	r3, sp
   1b814:	f113 0210 	adds.w	r2, r3, #16
   1b818:	d02f      	beq.n	1b87a <le_remote_feat_complete+0xa6>
   1b81a:	210c      	movs	r1, #12
   1b81c:	b13a      	cbz	r2, 1b82e <le_remote_feat_complete+0x5a>
   1b81e:	4608      	mov	r0, r1
   1b820:	2904      	cmp	r1, #4
   1b822:	dd01      	ble.n	1b828 <le_remote_feat_complete+0x54>
   1b824:	4c1b      	ldr	r4, [pc, #108]	; (1b894 <le_remote_feat_complete+0xc0>)
   1b826:	615c      	str	r4, [r3, #20]
   1b828:	2808      	cmp	r0, #8
   1b82a:	dd00      	ble.n	1b82e <le_remote_feat_complete+0x5a>
   1b82c:	619e      	str	r6, [r3, #24]
   1b82e:	290b      	cmp	r1, #11
   1b830:	dd26      	ble.n	1b880 <le_remote_feat_complete+0xac>
   1b832:	240c      	movs	r4, #12
   1b834:	b13a      	cbz	r2, 1b846 <le_remote_feat_complete+0x72>
   1b836:	2103      	movs	r1, #3
   1b838:	7139      	strb	r1, [r7, #4]
   1b83a:	2100      	movs	r1, #0
   1b83c:	7179      	strb	r1, [r7, #5]
   1b83e:	71b9      	strb	r1, [r7, #6]
   1b840:	71f9      	strb	r1, [r7, #7]
   1b842:	6878      	ldr	r0, [r7, #4]
   1b844:	6118      	str	r0, [r3, #16]
   1b846:	2100      	movs	r1, #0
   1b848:	f36f 0100 	bfc	r1, #0, #1
   1b84c:	f36f 0141 	bfc	r1, #1, #1
   1b850:	f36f 0182 	bfc	r1, #2, #1
   1b854:	f36f 01c5 	bfc	r1, #3, #3
   1b858:	2301      	movs	r3, #1
   1b85a:	f363 1188 	bfi	r1, r3, #6, #3
   1b85e:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1b862:	f364 2152 	bfi	r1, r4, #9, #10
   1b866:	f36f 41de 	bfc	r1, #19, #12
   1b86a:	f36f 71df 	bfc	r1, #31, #1
   1b86e:	2300      	movs	r3, #0
   1b870:	4809      	ldr	r0, [pc, #36]	; (1b898 <le_remote_feat_complete+0xc4>)
   1b872:	f7fb f86b 	bl	1694c <z_impl_z_log_msg_static_create>
   1b876:	46ad      	mov	sp, r5
		return;
   1b878:	e7c6      	b.n	1b808 <le_remote_feat_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1b87a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b87e:	e7cd      	b.n	1b81c <le_remote_feat_complete+0x48>
   1b880:	f06f 041b 	mvn.w	r4, #27
   1b884:	e7d6      	b.n	1b834 <le_remote_feat_complete+0x60>
		memcpy(conn->le.features, evt->features,
   1b886:	2208      	movs	r2, #8
   1b888:	1ce1      	adds	r1, r4, #3
   1b88a:	30b5      	adds	r0, #181	; 0xb5
   1b88c:	f01c fdb5 	bl	383fa <memcpy>
   1b890:	e7ae      	b.n	1b7f0 <le_remote_feat_complete+0x1c>
   1b892:	bf00      	nop
   1b894:	00042348 	.word	0x00042348
   1b898:	0003f3d0 	.word	0x0003f3d0

0001b89c <hci_num_completed_packets>:
{
   1b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8a0:	b089      	sub	sp, #36	; 0x24
   1b8a2:	af00      	add	r7, sp, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1b8a4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	for (i = 0; i < evt->num_handles; i++) {
   1b8a8:	2600      	movs	r6, #0
   1b8aa:	e09e      	b.n	1b9ea <hci_num_completed_packets+0x14e>
			LOG_ERR("No connection for handle %u", handle);
   1b8ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b8b0:	e0b3      	b.n	1ba1a <hci_num_completed_packets+0x17e>
   1b8b2:	f06f 011b 	mvn.w	r1, #27
   1b8b6:	b13a      	cbz	r2, 1b8c8 <hci_num_completed_packets+0x2c>
   1b8b8:	2003      	movs	r0, #3
   1b8ba:	7138      	strb	r0, [r7, #4]
   1b8bc:	2000      	movs	r0, #0
   1b8be:	7178      	strb	r0, [r7, #5]
   1b8c0:	71b8      	strb	r0, [r7, #6]
   1b8c2:	71f8      	strb	r0, [r7, #7]
   1b8c4:	6878      	ldr	r0, [r7, #4]
   1b8c6:	6118      	str	r0, [r3, #16]
   1b8c8:	f36f 0800 	bfc	r8, #0, #1
   1b8cc:	f36f 0841 	bfc	r8, #1, #1
   1b8d0:	f36f 0882 	bfc	r8, #2, #1
   1b8d4:	f36f 08c5 	bfc	r8, #3, #3
   1b8d8:	2301      	movs	r3, #1
   1b8da:	f363 1888 	bfi	r8, r3, #6, #3
   1b8de:	f401 717b 	and.w	r1, r1, #1004	; 0x3ec
   1b8e2:	f361 2852 	bfi	r8, r1, #9, #10
   1b8e6:	f36f 48de 	bfc	r8, #19, #12
   1b8ea:	f36f 78df 	bfc	r8, #31, #1
   1b8ee:	2300      	movs	r3, #0
   1b8f0:	4641      	mov	r1, r8
   1b8f2:	4856      	ldr	r0, [pc, #344]	; (1ba4c <hci_num_completed_packets+0x1b0>)
   1b8f4:	f7fb f82a 	bl	1694c <z_impl_z_log_msg_static_create>
   1b8f8:	46a5      	mov	sp, r4
			continue;
   1b8fa:	e075      	b.n	1b9e8 <hci_num_completed_packets+0x14c>
			LOG_ERR("No connection for handle %u", handle);
   1b8fc:	f06f 011b 	mvn.w	r1, #27
   1b900:	e7d9      	b.n	1b8b6 <hci_num_completed_packets+0x1a>
				conn->pending_no_cb--;
   1b902:	3b01      	subs	r3, #1
   1b904:	61e3      	str	r3, [r4, #28]
   1b906:	f382 8811 	msr	BASEPRI, r2
   1b90a:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   1b90e:	4620      	mov	r0, r4
   1b910:	f004 f926 	bl	1fb60 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1b914:	f016 fa64 	bl	31de0 <z_impl_k_sem_give>
				continue;
   1b918:	e024      	b.n	1b964 <hci_num_completed_packets+0xc8>
   1b91a:	f382 8811 	msr	BASEPRI, r2
   1b91e:	f3bf 8f6f 	isb	sy
			if (!node) {
   1b922:	2b00      	cmp	r3, #0
   1b924:	d03b      	beq.n	1b99e <hci_num_completed_packets+0x102>
	__asm__ volatile(
   1b926:	f04f 0120 	mov.w	r1, #32
   1b92a:	f3ef 8211 	mrs	r2, BASEPRI
   1b92e:	f381 8812 	msr	BASEPRI_MAX, r1
   1b932:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1b936:	68d9      	ldr	r1, [r3, #12]
   1b938:	61e1      	str	r1, [r4, #28]
			tx->pending_no_cb = 0U;
   1b93a:	2100      	movs	r1, #0
   1b93c:	60d9      	str	r1, [r3, #12]
	parent->next = child;
   1b93e:	6019      	str	r1, [r3, #0]
	return list->tail;
   1b940:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1b942:	2900      	cmp	r1, #0
   1b944:	d07a      	beq.n	1ba3c <hci_num_completed_packets+0x1a0>
	parent->next = child;
   1b946:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1b948:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   1b94a:	f382 8811 	msr	BASEPRI, r2
   1b94e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1b952:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b956:	f016 fdf3 	bl	32540 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   1b95a:	4620      	mov	r0, r4
   1b95c:	f004 f900 	bl	1fb60 <bt_conn_get_pkts>
   1b960:	f016 fa3e 	bl	31de0 <z_impl_k_sem_give>
			LOG_ERR("No connection for handle %u", handle);
   1b964:	46ab      	mov	fp, r5
		while (count--) {
   1b966:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
   1b96a:	b2ad      	uxth	r5, r5
   1b96c:	f1bb 0f00 	cmp.w	fp, #0
   1b970:	d037      	beq.n	1b9e2 <hci_num_completed_packets+0x146>
	__asm__ volatile(
   1b972:	f04f 0220 	mov.w	r2, #32
   1b976:	f3ef 8311 	mrs	r3, BASEPRI
   1b97a:	f382 8812 	msr	BASEPRI_MAX, r2
   1b97e:	f3bf 8f6f 	isb	sy
   1b982:	461a      	mov	r2, r3
			if (conn->pending_no_cb) {
   1b984:	69e3      	ldr	r3, [r4, #28]
   1b986:	2b00      	cmp	r3, #0
   1b988:	d1bb      	bne.n	1b902 <hci_num_completed_packets+0x66>
	return list->head;
   1b98a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1b98c:	2b00      	cmp	r3, #0
   1b98e:	d0c4      	beq.n	1b91a <hci_num_completed_packets+0x7e>
	return node->next;
   1b990:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1b992:	6161      	str	r1, [r4, #20]
	return list->tail;
   1b994:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b996:	4298      	cmp	r0, r3
   1b998:	d1bf      	bne.n	1b91a <hci_num_completed_packets+0x7e>
	list->tail = node;
   1b99a:	61a1      	str	r1, [r4, #24]
}
   1b99c:	e7bd      	b.n	1b91a <hci_num_completed_packets+0x7e>
				LOG_ERR("packets count mismatch");
   1b99e:	4b2c      	ldr	r3, [pc, #176]	; (1ba50 <hci_num_completed_packets+0x1b4>)
   1b9a0:	61fb      	str	r3, [r7, #28]
   1b9a2:	2302      	movs	r3, #2
   1b9a4:	713b      	strb	r3, [r7, #4]
   1b9a6:	2300      	movs	r3, #0
   1b9a8:	717b      	strb	r3, [r7, #5]
   1b9aa:	71bb      	strb	r3, [r7, #6]
   1b9ac:	71fb      	strb	r3, [r7, #7]
   1b9ae:	687a      	ldr	r2, [r7, #4]
   1b9b0:	61ba      	str	r2, [r7, #24]
   1b9b2:	f363 0900 	bfi	r9, r3, #0, #1
   1b9b6:	f363 0941 	bfi	r9, r3, #1, #1
   1b9ba:	f363 0982 	bfi	r9, r3, #2, #1
   1b9be:	f363 09c5 	bfi	r9, r3, #3, #3
   1b9c2:	2201      	movs	r2, #1
   1b9c4:	f362 1988 	bfi	r9, r2, #6, #3
   1b9c8:	2208      	movs	r2, #8
   1b9ca:	f362 2952 	bfi	r9, r2, #9, #10
   1b9ce:	f363 49de 	bfi	r9, r3, #19, #12
   1b9d2:	f363 79df 	bfi	r9, r3, #31, #1
   1b9d6:	f107 0218 	add.w	r2, r7, #24
   1b9da:	4649      	mov	r1, r9
   1b9dc:	481b      	ldr	r0, [pc, #108]	; (1ba4c <hci_num_completed_packets+0x1b0>)
   1b9de:	f7fa ffb5 	bl	1694c <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   1b9e2:	4620      	mov	r0, r4
   1b9e4:	f004 fc68 	bl	202b8 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1b9e8:	3601      	adds	r6, #1
   1b9ea:	f89a 3000 	ldrb.w	r3, [sl]
   1b9ee:	429e      	cmp	r6, r3
   1b9f0:	da27      	bge.n	1ba42 <hci_num_completed_packets+0x1a6>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1b9f2:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
   1b9f6:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   1b9fa:	f8b3 b003 	ldrh.w	fp, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1b9fe:	4628      	mov	r0, r5
   1ba00:	f004 fc8c 	bl	2031c <bt_conn_lookup_handle>
		if (!conn) {
   1ba04:	4604      	mov	r4, r0
   1ba06:	2800      	cmp	r0, #0
   1ba08:	d1ad      	bne.n	1b966 <hci_num_completed_packets+0xca>
			LOG_ERR("No connection for handle %u", handle);
   1ba0a:	466c      	mov	r4, sp
   1ba0c:	b088      	sub	sp, #32
   1ba0e:	466b      	mov	r3, sp
   1ba10:	f113 0210 	adds.w	r2, r3, #16
   1ba14:	f43f af4a 	beq.w	1b8ac <hci_num_completed_packets+0x10>
   1ba18:	210c      	movs	r1, #12
   1ba1a:	b152      	cbz	r2, 1ba32 <hci_num_completed_packets+0x196>
   1ba1c:	4608      	mov	r0, r1
   1ba1e:	2904      	cmp	r1, #4
   1ba20:	dd03      	ble.n	1ba2a <hci_num_completed_packets+0x18e>
   1ba22:	f8df c030 	ldr.w	ip, [pc, #48]	; 1ba54 <hci_num_completed_packets+0x1b8>
   1ba26:	f8c3 c014 	str.w	ip, [r3, #20]
   1ba2a:	2808      	cmp	r0, #8
   1ba2c:	f77f af41 	ble.w	1b8b2 <hci_num_completed_packets+0x16>
   1ba30:	619d      	str	r5, [r3, #24]
   1ba32:	290b      	cmp	r1, #11
   1ba34:	f77f af62 	ble.w	1b8fc <hci_num_completed_packets+0x60>
   1ba38:	210c      	movs	r1, #12
   1ba3a:	e73c      	b.n	1b8b6 <hci_num_completed_packets+0x1a>
	list->tail = node;
   1ba3c:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   1ba3e:	6223      	str	r3, [r4, #32]
}
   1ba40:	e783      	b.n	1b94a <hci_num_completed_packets+0xae>
}
   1ba42:	3724      	adds	r7, #36	; 0x24
   1ba44:	46bd      	mov	sp, r7
   1ba46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba4a:	bf00      	nop
   1ba4c:	0003f3d0 	.word	0x0003f3d0
   1ba50:	00042388 	.word	0x00042388
   1ba54:	0004236c 	.word	0x0004236c

0001ba58 <hci_cmd_done>:
{
   1ba58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba5c:	b082      	sub	sp, #8
   1ba5e:	af00      	add	r7, sp, #0
   1ba60:	4605      	mov	r5, r0
   1ba62:	460e      	mov	r6, r1
   1ba64:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1ba66:	7a90      	ldrb	r0, [r2, #10]
   1ba68:	f00d fbc0 	bl	291ec <net_buf_pool_get>
   1ba6c:	4b75      	ldr	r3, [pc, #468]	; (1bc44 <hci_cmd_done+0x1ec>)
   1ba6e:	4283      	cmp	r3, r0
   1ba70:	d050      	beq.n	1bb14 <hci_cmd_done+0xbc>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1ba72:	f894 800a 	ldrb.w	r8, [r4, #10]
   1ba76:	4640      	mov	r0, r8
   1ba78:	f00d fbb8 	bl	291ec <net_buf_pool_get>
   1ba7c:	466e      	mov	r6, sp
   1ba7e:	b08a      	sub	sp, #40	; 0x28
   1ba80:	466b      	mov	r3, sp
   1ba82:	f113 0210 	adds.w	r2, r3, #16
   1ba86:	d03f      	beq.n	1bb08 <hci_cmd_done+0xb0>
   1ba88:	2418      	movs	r4, #24
   1ba8a:	b1a2      	cbz	r2, 1bab6 <hci_cmd_done+0x5e>
   1ba8c:	4621      	mov	r1, r4
   1ba8e:	2c04      	cmp	r4, #4
   1ba90:	dd03      	ble.n	1ba9a <hci_cmd_done+0x42>
   1ba92:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 1bc48 <hci_cmd_done+0x1f0>
   1ba96:	f8c3 c014 	str.w	ip, [r3, #20]
   1ba9a:	2908      	cmp	r1, #8
   1ba9c:	dd00      	ble.n	1baa0 <hci_cmd_done+0x48>
   1ba9e:	619d      	str	r5, [r3, #24]
   1baa0:	290c      	cmp	r1, #12
   1baa2:	dd01      	ble.n	1baa8 <hci_cmd_done+0x50>
   1baa4:	f8c3 801c 	str.w	r8, [r3, #28]
   1baa8:	2910      	cmp	r1, #16
   1baaa:	dd00      	ble.n	1baae <hci_cmd_done+0x56>
   1baac:	6218      	str	r0, [r3, #32]
   1baae:	2914      	cmp	r1, #20
   1bab0:	dd01      	ble.n	1bab6 <hci_cmd_done+0x5e>
   1bab2:	4964      	ldr	r1, [pc, #400]	; (1bc44 <hci_cmd_done+0x1ec>)
   1bab4:	6259      	str	r1, [r3, #36]	; 0x24
   1bab6:	2c17      	cmp	r4, #23
   1bab8:	dd29      	ble.n	1bb0e <hci_cmd_done+0xb6>
   1baba:	2418      	movs	r4, #24
   1babc:	b13a      	cbz	r2, 1bace <hci_cmd_done+0x76>
   1babe:	2106      	movs	r1, #6
   1bac0:	7139      	strb	r1, [r7, #4]
   1bac2:	2100      	movs	r1, #0
   1bac4:	7179      	strb	r1, [r7, #5]
   1bac6:	71b9      	strb	r1, [r7, #6]
   1bac8:	71f9      	strb	r1, [r7, #7]
   1baca:	6878      	ldr	r0, [r7, #4]
   1bacc:	6118      	str	r0, [r3, #16]
   1bace:	2100      	movs	r1, #0
   1bad0:	f36f 0100 	bfc	r1, #0, #1
   1bad4:	f36f 0141 	bfc	r1, #1, #1
   1bad8:	f36f 0182 	bfc	r1, #2, #1
   1badc:	f36f 01c5 	bfc	r1, #3, #3
   1bae0:	2302      	movs	r3, #2
   1bae2:	f363 1188 	bfi	r1, r3, #6, #3
   1bae6:	f404 747f 	and.w	r4, r4, #1020	; 0x3fc
   1baea:	f364 2152 	bfi	r1, r4, #9, #10
   1baee:	f36f 41de 	bfc	r1, #19, #12
   1baf2:	f36f 71df 	bfc	r1, #31, #1
   1baf6:	2300      	movs	r3, #0
   1baf8:	4854      	ldr	r0, [pc, #336]	; (1bc4c <hci_cmd_done+0x1f4>)
   1bafa:	f7fa ff27 	bl	1694c <z_impl_z_log_msg_static_create>
   1bafe:	46b5      	mov	sp, r6
}
   1bb00:	3708      	adds	r7, #8
   1bb02:	46bd      	mov	sp, r7
   1bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1bb08:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1bb0c:	e7bd      	b.n	1ba8a <hci_cmd_done+0x32>
   1bb0e:	f06f 041b 	mvn.w	r4, #27
   1bb12:	e7d3      	b.n	1babc <hci_cmd_done+0x64>
	if (cmd(buf)->opcode != opcode) {
   1bb14:	4620      	mov	r0, r4
   1bb16:	f020 f927 	bl	3bd68 <net_buf_id>
   1bb1a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bb1e:	4b4c      	ldr	r3, [pc, #304]	; (1bc50 <hci_cmd_done+0x1f8>)
   1bb20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1bb24:	885b      	ldrh	r3, [r3, #2]
   1bb26:	429d      	cmp	r5, r3
   1bb28:	d133      	bne.n	1bb92 <hci_cmd_done+0x13a>
	if (bt_dev.sent_cmd) {
   1bb2a:	4b4a      	ldr	r3, [pc, #296]	; (1bc54 <hci_cmd_done+0x1fc>)
   1bb2c:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
   1bb30:	b128      	cbz	r0, 1bb3e <hci_cmd_done+0xe6>
		net_buf_unref(bt_dev.sent_cmd);
   1bb32:	f00d fdb7 	bl	296a4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1bb36:	4b47      	ldr	r3, [pc, #284]	; (1bc54 <hci_cmd_done+0x1fc>)
   1bb38:	2200      	movs	r2, #0
   1bb3a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   1bb3e:	4620      	mov	r0, r4
   1bb40:	f020 f912 	bl	3bd68 <net_buf_id>
   1bb44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bb48:	4b41      	ldr	r3, [pc, #260]	; (1bc50 <hci_cmd_done+0x1f8>)
   1bb4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1bb4e:	685b      	ldr	r3, [r3, #4]
   1bb50:	b10b      	cbz	r3, 1bb56 <hci_cmd_done+0xfe>
   1bb52:	2e00      	cmp	r6, #0
   1bb54:	d067      	beq.n	1bc26 <hci_cmd_done+0x1ce>
	if (cmd(buf)->sync) {
   1bb56:	4620      	mov	r0, r4
   1bb58:	f020 f906 	bl	3bd68 <net_buf_id>
   1bb5c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bb60:	4b3b      	ldr	r3, [pc, #236]	; (1bc50 <hci_cmd_done+0x1f8>)
   1bb62:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1bb66:	689b      	ldr	r3, [r3, #8]
   1bb68:	2b00      	cmp	r3, #0
   1bb6a:	d0c9      	beq.n	1bb00 <hci_cmd_done+0xa8>
		cmd(buf)->status = status;
   1bb6c:	4620      	mov	r0, r4
   1bb6e:	f020 f8fb 	bl	3bd68 <net_buf_id>
   1bb72:	4d37      	ldr	r5, [pc, #220]	; (1bc50 <hci_cmd_done+0x1f8>)
   1bb74:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bb78:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   1bb7c:	4620      	mov	r0, r4
   1bb7e:	f020 f8f3 	bl	3bd68 <net_buf_id>
   1bb82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bb86:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1bb8a:	68a8      	ldr	r0, [r5, #8]
   1bb8c:	f016 f928 	bl	31de0 <z_impl_k_sem_give>
}
   1bb90:	e7b6      	b.n	1bb00 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1bb92:	4620      	mov	r0, r4
   1bb94:	f020 f8e8 	bl	3bd68 <net_buf_id>
   1bb98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bb9c:	4b2c      	ldr	r3, [pc, #176]	; (1bc50 <hci_cmd_done+0x1f8>)
   1bb9e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1bba2:	885c      	ldrh	r4, [r3, #2]
   1bba4:	466e      	mov	r6, sp
   1bba6:	b088      	sub	sp, #32
   1bba8:	466b      	mov	r3, sp
   1bbaa:	f113 0210 	adds.w	r2, r3, #16
   1bbae:	d034      	beq.n	1bc1a <hci_cmd_done+0x1c2>
   1bbb0:	2110      	movs	r1, #16
   1bbb2:	b162      	cbz	r2, 1bbce <hci_cmd_done+0x176>
   1bbb4:	4608      	mov	r0, r1
   1bbb6:	2904      	cmp	r1, #4
   1bbb8:	dd03      	ble.n	1bbc2 <hci_cmd_done+0x16a>
   1bbba:	f8df c09c 	ldr.w	ip, [pc, #156]	; 1bc58 <hci_cmd_done+0x200>
   1bbbe:	f8c3 c014 	str.w	ip, [r3, #20]
   1bbc2:	2808      	cmp	r0, #8
   1bbc4:	dd00      	ble.n	1bbc8 <hci_cmd_done+0x170>
   1bbc6:	619d      	str	r5, [r3, #24]
   1bbc8:	280c      	cmp	r0, #12
   1bbca:	dd00      	ble.n	1bbce <hci_cmd_done+0x176>
   1bbcc:	61dc      	str	r4, [r3, #28]
   1bbce:	290f      	cmp	r1, #15
   1bbd0:	dd26      	ble.n	1bc20 <hci_cmd_done+0x1c8>
   1bbd2:	2410      	movs	r4, #16
   1bbd4:	b13a      	cbz	r2, 1bbe6 <hci_cmd_done+0x18e>
   1bbd6:	2104      	movs	r1, #4
   1bbd8:	7139      	strb	r1, [r7, #4]
   1bbda:	2100      	movs	r1, #0
   1bbdc:	7179      	strb	r1, [r7, #5]
   1bbde:	71b9      	strb	r1, [r7, #6]
   1bbe0:	71f9      	strb	r1, [r7, #7]
   1bbe2:	6878      	ldr	r0, [r7, #4]
   1bbe4:	6118      	str	r0, [r3, #16]
   1bbe6:	2100      	movs	r1, #0
   1bbe8:	f36f 0100 	bfc	r1, #0, #1
   1bbec:	f36f 0141 	bfc	r1, #1, #1
   1bbf0:	f36f 0182 	bfc	r1, #2, #1
   1bbf4:	f36f 01c5 	bfc	r1, #3, #3
   1bbf8:	2302      	movs	r3, #2
   1bbfa:	f363 1188 	bfi	r1, r3, #6, #3
   1bbfe:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   1bc02:	f363 2152 	bfi	r1, r3, #9, #10
   1bc06:	f36f 41de 	bfc	r1, #19, #12
   1bc0a:	f36f 71df 	bfc	r1, #31, #1
   1bc0e:	2300      	movs	r3, #0
   1bc10:	480e      	ldr	r0, [pc, #56]	; (1bc4c <hci_cmd_done+0x1f4>)
   1bc12:	f7fa fe9b 	bl	1694c <z_impl_z_log_msg_static_create>
   1bc16:	46b5      	mov	sp, r6
		return;
   1bc18:	e772      	b.n	1bb00 <hci_cmd_done+0xa8>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1bc1a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bc1e:	e7c8      	b.n	1bbb2 <hci_cmd_done+0x15a>
   1bc20:	f06f 041b 	mvn.w	r4, #27
   1bc24:	e7d6      	b.n	1bbd4 <hci_cmd_done+0x17c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1bc26:	4620      	mov	r0, r4
   1bc28:	f020 f89e 	bl	3bd68 <net_buf_id>
   1bc2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1bc30:	4b07      	ldr	r3, [pc, #28]	; (1bc50 <hci_cmd_done+0x1f8>)
   1bc32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1bc36:	685b      	ldr	r3, [r3, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1bc38:	7a1a      	ldrb	r2, [r3, #8]
   1bc3a:	6859      	ldr	r1, [r3, #4]
   1bc3c:	6818      	ldr	r0, [r3, #0]
   1bc3e:	f01c fd89 	bl	38754 <atomic_set_bit_to>
   1bc42:	e788      	b.n	1bb56 <hci_cmd_done+0xfe>
   1bc44:	20008b38 	.word	0x20008b38
   1bc48:	000423a0 	.word	0x000423a0
   1bc4c:	0003f3d0 	.word	0x0003f3d0
   1bc50:	2000c024 	.word	0x2000c024
   1bc54:	20008000 	.word	0x20008000
   1bc58:	000423d8 	.word	0x000423d8

0001bc5c <hci_cmd_status>:
{
   1bc5c:	b538      	push	{r3, r4, r5, lr}
   1bc5e:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1bc60:	2104      	movs	r1, #4
   1bc62:	300c      	adds	r0, #12
   1bc64:	f00d fdfc 	bl	29860 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1bc68:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1bc6a:	4622      	mov	r2, r4
   1bc6c:	7801      	ldrb	r1, [r0, #0]
   1bc6e:	8840      	ldrh	r0, [r0, #2]
   1bc70:	f7ff fef2 	bl	1ba58 <hci_cmd_done>
	if (ncmd) {
   1bc74:	b905      	cbnz	r5, 1bc78 <hci_cmd_status+0x1c>
}
   1bc76:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   1bc78:	4801      	ldr	r0, [pc, #4]	; (1bc80 <hci_cmd_status+0x24>)
   1bc7a:	f016 f8b1 	bl	31de0 <z_impl_k_sem_give>
   1bc7e:	e7fa      	b.n	1bc76 <hci_cmd_status+0x1a>
   1bc80:	20008120 	.word	0x20008120

0001bc84 <hci_cmd_complete>:
{
   1bc84:	b538      	push	{r3, r4, r5, lr}
   1bc86:	4604      	mov	r4, r0
   1bc88:	2103      	movs	r1, #3
   1bc8a:	300c      	adds	r0, #12
   1bc8c:	f00d fde8 	bl	29860 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   1bc90:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   1bc92:	68e3      	ldr	r3, [r4, #12]
	hci_cmd_done(opcode, status, buf);
   1bc94:	4622      	mov	r2, r4
   1bc96:	7819      	ldrb	r1, [r3, #0]
   1bc98:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1bc9c:	f7ff fedc 	bl	1ba58 <hci_cmd_done>
	if (ncmd) {
   1bca0:	b905      	cbnz	r5, 1bca4 <hci_cmd_complete+0x20>
}
   1bca2:	bd38      	pop	{r3, r4, r5, pc}
   1bca4:	4801      	ldr	r0, [pc, #4]	; (1bcac <hci_cmd_complete+0x28>)
   1bca6:	f016 f89b 	bl	31de0 <z_impl_k_sem_give>
   1bcaa:	e7fa      	b.n	1bca2 <hci_cmd_complete+0x1e>
   1bcac:	20008120 	.word	0x20008120

0001bcb0 <hci_hardware_error>:
{
   1bcb0:	b5b0      	push	{r4, r5, r7, lr}
   1bcb2:	b082      	sub	sp, #8
   1bcb4:	af00      	add	r7, sp, #0
   1bcb6:	2101      	movs	r1, #1
   1bcb8:	300c      	adds	r0, #12
   1bcba:	f00d fdd1 	bl	29860 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1bcbe:	7804      	ldrb	r4, [r0, #0]
   1bcc0:	b088      	sub	sp, #32
   1bcc2:	466b      	mov	r3, sp
   1bcc4:	f113 0210 	adds.w	r2, r3, #16
   1bcc8:	d031      	beq.n	1bd2e <hci_hardware_error+0x7e>
   1bcca:	210c      	movs	r1, #12
   1bccc:	b13a      	cbz	r2, 1bcde <hci_hardware_error+0x2e>
   1bcce:	4608      	mov	r0, r1
   1bcd0:	2904      	cmp	r1, #4
   1bcd2:	dd01      	ble.n	1bcd8 <hci_hardware_error+0x28>
   1bcd4:	4d19      	ldr	r5, [pc, #100]	; (1bd3c <hci_hardware_error+0x8c>)
   1bcd6:	615d      	str	r5, [r3, #20]
   1bcd8:	2808      	cmp	r0, #8
   1bcda:	dd00      	ble.n	1bcde <hci_hardware_error+0x2e>
   1bcdc:	619c      	str	r4, [r3, #24]
   1bcde:	290b      	cmp	r1, #11
   1bce0:	dd28      	ble.n	1bd34 <hci_hardware_error+0x84>
   1bce2:	f04f 0c0c 	mov.w	ip, #12
   1bce6:	b13a      	cbz	r2, 1bcf8 <hci_hardware_error+0x48>
   1bce8:	2103      	movs	r1, #3
   1bcea:	7139      	strb	r1, [r7, #4]
   1bcec:	2100      	movs	r1, #0
   1bcee:	7179      	strb	r1, [r7, #5]
   1bcf0:	71b9      	strb	r1, [r7, #6]
   1bcf2:	71f9      	strb	r1, [r7, #7]
   1bcf4:	6878      	ldr	r0, [r7, #4]
   1bcf6:	6118      	str	r0, [r3, #16]
   1bcf8:	2100      	movs	r1, #0
   1bcfa:	f36f 0100 	bfc	r1, #0, #1
   1bcfe:	f36f 0141 	bfc	r1, #1, #1
   1bd02:	f36f 0182 	bfc	r1, #2, #1
   1bd06:	f36f 01c5 	bfc	r1, #3, #3
   1bd0a:	2301      	movs	r3, #1
   1bd0c:	f363 1188 	bfi	r1, r3, #6, #3
   1bd10:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1bd14:	f36c 2152 	bfi	r1, ip, #9, #10
   1bd18:	f36f 41de 	bfc	r1, #19, #12
   1bd1c:	f36f 71df 	bfc	r1, #31, #1
   1bd20:	2300      	movs	r3, #0
   1bd22:	4807      	ldr	r0, [pc, #28]	; (1bd40 <hci_hardware_error+0x90>)
   1bd24:	f7fa fe12 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1bd28:	3708      	adds	r7, #8
   1bd2a:	46bd      	mov	sp, r7
   1bd2c:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1bd2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bd32:	e7cb      	b.n	1bccc <hci_hardware_error+0x1c>
   1bd34:	f06f 0c1b 	mvn.w	ip, #27
   1bd38:	e7d5      	b.n	1bce6 <hci_hardware_error+0x36>
   1bd3a:	bf00      	nop
   1bd3c:	0004240c 	.word	0x0004240c
   1bd40:	0003f3d0 	.word	0x0003f3d0

0001bd44 <handle_event>:
{
   1bd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd48:	b082      	sub	sp, #8
   1bd4a:	af00      	add	r7, sp, #0
   1bd4c:	4605      	mov	r5, r0
   1bd4e:	460c      	mov	r4, r1
	err = handle_event_common(event, buf, handlers, num_handlers);
   1bd50:	f7ff fc18 	bl	1b584 <handle_event_common>
	if (err == -EOPNOTSUPP) {
   1bd54:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   1bd58:	d003      	beq.n	1bd62 <handle_event+0x1e>
}
   1bd5a:	3708      	adds	r7, #8
   1bd5c:	46bd      	mov	sp, r7
   1bd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1bd62:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   1bd66:	4641      	mov	r1, r8
   1bd68:	68e0      	ldr	r0, [r4, #12]
   1bd6a:	f7fe ff91 	bl	1ac90 <bt_hex>
   1bd6e:	466e      	mov	r6, sp
   1bd70:	2302      	movs	r3, #2
   1bd72:	713b      	strb	r3, [r7, #4]
   1bd74:	2304      	movs	r3, #4
   1bd76:	717b      	strb	r3, [r7, #5]
   1bd78:	b08a      	sub	sp, #40	; 0x28
   1bd7a:	466c      	mov	r4, sp
   1bd7c:	f114 0210 	adds.w	r2, r4, #16
   1bd80:	d01c      	beq.n	1bdbc <handle_event+0x78>
   1bd82:	f04f 0c16 	mov.w	ip, #22
   1bd86:	b162      	cbz	r2, 1bda2 <handle_event+0x5e>
   1bd88:	4663      	mov	r3, ip
   1bd8a:	f1bc 0f04 	cmp.w	ip, #4
   1bd8e:	dd01      	ble.n	1bd94 <handle_event+0x50>
   1bd90:	4926      	ldr	r1, [pc, #152]	; (1be2c <handle_event+0xe8>)
   1bd92:	6161      	str	r1, [r4, #20]
   1bd94:	2b08      	cmp	r3, #8
   1bd96:	dd00      	ble.n	1bd9a <handle_event+0x56>
   1bd98:	61a5      	str	r5, [r4, #24]
   1bd9a:	2b0c      	cmp	r3, #12
   1bd9c:	dd01      	ble.n	1bda2 <handle_event+0x5e>
   1bd9e:	f8c4 801c 	str.w	r8, [r4, #28]
   1bda2:	2302      	movs	r3, #2
   1bda4:	703b      	strb	r3, [r7, #0]
   1bda6:	2304      	movs	r3, #4
   1bda8:	707b      	strb	r3, [r7, #1]
   1bdaa:	b1a2      	cbz	r2, 1bdd6 <handle_event+0x92>
   1bdac:	f1bc 0f10 	cmp.w	ip, #16
   1bdb0:	dd00      	ble.n	1bdb4 <handle_event+0x70>
   1bdb2:	6220      	str	r0, [r4, #32]
   1bdb4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   1bdb8:	2100      	movs	r1, #0
   1bdba:	e00a      	b.n	1bdd2 <handle_event+0x8e>
   1bdbc:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   1bdc0:	e7e1      	b.n	1bd86 <handle_event+0x42>
   1bdc2:	f101 0008 	add.w	r0, r1, #8
   1bdc6:	4438      	add	r0, r7
   1bdc8:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   1bdcc:	f803 0b01 	strb.w	r0, [r3], #1
   1bdd0:	3101      	adds	r1, #1
   1bdd2:	2901      	cmp	r1, #1
   1bdd4:	d9f5      	bls.n	1bdc2 <handle_event+0x7e>
   1bdd6:	f1bc 0f15 	cmp.w	ip, #21
   1bdda:	dd24      	ble.n	1be26 <handle_event+0xe2>
   1bddc:	2316      	movs	r3, #22
   1bdde:	b142      	cbz	r2, 1bdf2 <handle_event+0xae>
   1bde0:	2105      	movs	r1, #5
   1bde2:	7139      	strb	r1, [r7, #4]
   1bde4:	2100      	movs	r1, #0
   1bde6:	7179      	strb	r1, [r7, #5]
   1bde8:	71b9      	strb	r1, [r7, #6]
   1bdea:	2101      	movs	r1, #1
   1bdec:	71f9      	strb	r1, [r7, #7]
   1bdee:	6878      	ldr	r0, [r7, #4]
   1bdf0:	6120      	str	r0, [r4, #16]
   1bdf2:	2100      	movs	r1, #0
   1bdf4:	f36f 0100 	bfc	r1, #0, #1
   1bdf8:	f36f 0141 	bfc	r1, #1, #1
   1bdfc:	f36f 0182 	bfc	r1, #2, #1
   1be00:	f36f 01c5 	bfc	r1, #3, #3
   1be04:	2002      	movs	r0, #2
   1be06:	f360 1188 	bfi	r1, r0, #6, #3
   1be0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1be0e:	f363 2152 	bfi	r1, r3, #9, #10
   1be12:	f36f 41de 	bfc	r1, #19, #12
   1be16:	f36f 71df 	bfc	r1, #31, #1
   1be1a:	2300      	movs	r3, #0
   1be1c:	4804      	ldr	r0, [pc, #16]	; (1be30 <handle_event+0xec>)
   1be1e:	f7fa fd95 	bl	1694c <z_impl_z_log_msg_static_create>
   1be22:	46b5      	mov	sp, r6
}
   1be24:	e799      	b.n	1bd5a <handle_event+0x16>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1be26:	f06f 031b 	mvn.w	r3, #27
   1be2a:	e7d8      	b.n	1bdde <handle_event+0x9a>
   1be2c:	00042430 	.word	0x00042430
   1be30:	0003f3d0 	.word	0x0003f3d0

0001be34 <hci_event>:
{
   1be34:	b538      	push	{r3, r4, r5, lr}
   1be36:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1be38:	8a03      	ldrh	r3, [r0, #16]
   1be3a:	2b01      	cmp	r3, #1
   1be3c:	d915      	bls.n	1be6a <hci_event+0x36>
   1be3e:	2102      	movs	r1, #2
   1be40:	f104 000c 	add.w	r0, r4, #12
   1be44:	f00d fd0c 	bl	29860 <net_buf_simple_pull_mem>
   1be48:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1be4a:	7800      	ldrb	r0, [r0, #0]
   1be4c:	f01c fc26 	bl	3869c <bt_hci_evt_get_flags>
   1be50:	f010 0f02 	tst.w	r0, #2
   1be54:	d017      	beq.n	1be86 <hci_event+0x52>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1be56:	2306      	movs	r3, #6
   1be58:	4a12      	ldr	r2, [pc, #72]	; (1bea4 <hci_event+0x70>)
   1be5a:	4621      	mov	r1, r4
   1be5c:	7828      	ldrb	r0, [r5, #0]
   1be5e:	f7ff ff71 	bl	1bd44 <handle_event>
	net_buf_unref(buf);
   1be62:	4620      	mov	r0, r4
   1be64:	f00d fc1e 	bl	296a4 <net_buf_unref>
}
   1be68:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1be6a:	f640 136d 	movw	r3, #2413	; 0x96d
   1be6e:	4a0e      	ldr	r2, [pc, #56]	; (1bea8 <hci_event+0x74>)
   1be70:	490e      	ldr	r1, [pc, #56]	; (1beac <hci_event+0x78>)
   1be72:	480f      	ldr	r0, [pc, #60]	; (1beb0 <hci_event+0x7c>)
   1be74:	f01a fa0e 	bl	36294 <assert_print>
   1be78:	4040      	eors	r0, r0
   1be7a:	f380 8811 	msr	BASEPRI, r0
   1be7e:	f04f 0003 	mov.w	r0, #3
   1be82:	df02      	svc	2
   1be84:	e7db      	b.n	1be3e <hci_event+0xa>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1be86:	f640 1371 	movw	r3, #2417	; 0x971
   1be8a:	4a07      	ldr	r2, [pc, #28]	; (1bea8 <hci_event+0x74>)
   1be8c:	4909      	ldr	r1, [pc, #36]	; (1beb4 <hci_event+0x80>)
   1be8e:	4808      	ldr	r0, [pc, #32]	; (1beb0 <hci_event+0x7c>)
   1be90:	f01a fa00 	bl	36294 <assert_print>
   1be94:	4040      	eors	r0, r0
   1be96:	f380 8811 	msr	BASEPRI, r0
   1be9a:	f04f 0003 	mov.w	r0, #3
   1be9e:	df02      	svc	2
   1bea0:	e7d9      	b.n	1be56 <hci_event+0x22>
   1bea2:	bf00      	nop
   1bea4:	000428e8 	.word	0x000428e8
   1bea8:	00042454 	.word	0x00042454
   1beac:	00042488 	.word	0x00042488
   1beb0:	0003f72c 	.word	0x0003f72c
   1beb4:	000424a4 	.word	0x000424a4

0001beb8 <hci_le_meta_event>:
{
   1beb8:	b510      	push	{r4, lr}
   1beba:	4604      	mov	r4, r0
   1bebc:	2101      	movs	r1, #1
   1bebe:	300c      	adds	r0, #12
   1bec0:	f00d fcce 	bl	29860 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1bec4:	230a      	movs	r3, #10
   1bec6:	4a03      	ldr	r2, [pc, #12]	; (1bed4 <hci_le_meta_event+0x1c>)
   1bec8:	4621      	mov	r1, r4
   1beca:	7800      	ldrb	r0, [r0, #0]
   1becc:	f7ff ff3a 	bl	1bd44 <handle_event>
}
   1bed0:	bd10      	pop	{r4, pc}
   1bed2:	bf00      	nop
   1bed4:	00042918 	.word	0x00042918

0001bed8 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   1bed8:	b5b0      	push	{r4, r5, r7, lr}
   1beda:	b082      	sub	sp, #8
   1bedc:	af00      	add	r7, sp, #0
   1bede:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   1bee0:	4824      	ldr	r0, [pc, #144]	; (1bf74 <rx_queue_put+0x9c>)
   1bee2:	f00d fae1 	bl	294a8 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1bee6:	4924      	ldr	r1, [pc, #144]	; (1bf78 <rx_queue_put+0xa0>)
   1bee8:	4824      	ldr	r0, [pc, #144]	; (1bf7c <rx_queue_put+0xa4>)
   1beea:	f022 fe22 	bl	3eb32 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   1beee:	2800      	cmp	r0, #0
   1bef0:	db02      	blt.n	1bef8 <rx_queue_put+0x20>
		LOG_ERR("Could not submit rx_work: %d", err);
	}
}
   1bef2:	3708      	adds	r7, #8
   1bef4:	46bd      	mov	sp, r7
   1bef6:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Could not submit rx_work: %d", err);
   1bef8:	466c      	mov	r4, sp
   1befa:	b088      	sub	sp, #32
   1befc:	466b      	mov	r3, sp
   1befe:	f113 0210 	adds.w	r2, r3, #16
   1bf02:	d031      	beq.n	1bf68 <rx_queue_put+0x90>
   1bf04:	210c      	movs	r1, #12
   1bf06:	b142      	cbz	r2, 1bf1a <rx_queue_put+0x42>
   1bf08:	468c      	mov	ip, r1
   1bf0a:	2904      	cmp	r1, #4
   1bf0c:	dd01      	ble.n	1bf12 <rx_queue_put+0x3a>
   1bf0e:	4d1c      	ldr	r5, [pc, #112]	; (1bf80 <rx_queue_put+0xa8>)
   1bf10:	615d      	str	r5, [r3, #20]
   1bf12:	f1bc 0f08 	cmp.w	ip, #8
   1bf16:	dd00      	ble.n	1bf1a <rx_queue_put+0x42>
   1bf18:	6198      	str	r0, [r3, #24]
   1bf1a:	290b      	cmp	r1, #11
   1bf1c:	dd27      	ble.n	1bf6e <rx_queue_put+0x96>
   1bf1e:	f04f 0c0c 	mov.w	ip, #12
   1bf22:	b13a      	cbz	r2, 1bf34 <rx_queue_put+0x5c>
   1bf24:	2103      	movs	r1, #3
   1bf26:	7139      	strb	r1, [r7, #4]
   1bf28:	2100      	movs	r1, #0
   1bf2a:	7179      	strb	r1, [r7, #5]
   1bf2c:	71b9      	strb	r1, [r7, #6]
   1bf2e:	71f9      	strb	r1, [r7, #7]
   1bf30:	6878      	ldr	r0, [r7, #4]
   1bf32:	6118      	str	r0, [r3, #16]
   1bf34:	2100      	movs	r1, #0
   1bf36:	f36f 0100 	bfc	r1, #0, #1
   1bf3a:	f36f 0141 	bfc	r1, #1, #1
   1bf3e:	f36f 0182 	bfc	r1, #2, #1
   1bf42:	f36f 01c5 	bfc	r1, #3, #3
   1bf46:	2301      	movs	r3, #1
   1bf48:	f363 1188 	bfi	r1, r3, #6, #3
   1bf4c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1bf50:	f36c 2152 	bfi	r1, ip, #9, #10
   1bf54:	f36f 41de 	bfc	r1, #19, #12
   1bf58:	f36f 71df 	bfc	r1, #31, #1
   1bf5c:	2300      	movs	r3, #0
   1bf5e:	4809      	ldr	r0, [pc, #36]	; (1bf84 <rx_queue_put+0xac>)
   1bf60:	f7fa fcf4 	bl	1694c <z_impl_z_log_msg_static_create>
   1bf64:	46a5      	mov	sp, r4
}
   1bf66:	e7c4      	b.n	1bef2 <rx_queue_put+0x1a>
		LOG_ERR("Could not submit rx_work: %d", err);
   1bf68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bf6c:	e7cb      	b.n	1bf06 <rx_queue_put+0x2e>
   1bf6e:	f06f 0c1b 	mvn.w	ip, #27
   1bf72:	e7d6      	b.n	1bf22 <rx_queue_put+0x4a>
   1bf74:	2000813c 	.word	0x2000813c
   1bf78:	2000845c 	.word	0x2000845c
   1bf7c:	2000b3a8 	.word	0x2000b3a8
   1bf80:	000424d4 	.word	0x000424d4
   1bf84:	0003f3d0 	.word	0x0003f3d0

0001bf88 <hci_acl>:
{
   1bf88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bf8a:	b083      	sub	sp, #12
   1bf8c:	af00      	add	r7, sp, #0
   1bf8e:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1bf90:	8a03      	ldrh	r3, [r0, #16]
   1bf92:	2b03      	cmp	r3, #3
   1bf94:	d952      	bls.n	1c03c <hci_acl+0xb4>
   1bf96:	2104      	movs	r1, #4
   1bf98:	f104 000c 	add.w	r0, r4, #12
   1bf9c:	f00d fc60 	bl	29860 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   1bfa0:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1bfa2:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   1bfa4:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   1bfa6:	f3c0 000b 	ubfx	r0, r0, #0, #12
   1bfaa:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1bfac:	23ff      	movs	r3, #255	; 0xff
   1bfae:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1bfb0:	f8b4 c010 	ldrh.w	ip, [r4, #16]
   1bfb4:	45b4      	cmp	ip, r6
   1bfb6:	d055      	beq.n	1c064 <hci_acl+0xdc>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1bfb8:	466d      	mov	r5, sp
   1bfba:	b088      	sub	sp, #32
   1bfbc:	466b      	mov	r3, sp
   1bfbe:	f113 0210 	adds.w	r2, r3, #16
   1bfc2:	d049      	beq.n	1c058 <hci_acl+0xd0>
   1bfc4:	2110      	movs	r1, #16
   1bfc6:	b16a      	cbz	r2, 1bfe4 <hci_acl+0x5c>
   1bfc8:	4608      	mov	r0, r1
   1bfca:	2904      	cmp	r1, #4
   1bfcc:	dd03      	ble.n	1bfd6 <hci_acl+0x4e>
   1bfce:	f8df e138 	ldr.w	lr, [pc, #312]	; 1c108 <hci_acl+0x180>
   1bfd2:	f8c3 e014 	str.w	lr, [r3, #20]
   1bfd6:	2808      	cmp	r0, #8
   1bfd8:	dd01      	ble.n	1bfde <hci_acl+0x56>
   1bfda:	f8c3 c018 	str.w	ip, [r3, #24]
   1bfde:	280c      	cmp	r0, #12
   1bfe0:	dd00      	ble.n	1bfe4 <hci_acl+0x5c>
   1bfe2:	61de      	str	r6, [r3, #28]
   1bfe4:	290f      	cmp	r1, #15
   1bfe6:	dd3a      	ble.n	1c05e <hci_acl+0xd6>
   1bfe8:	f04f 0c10 	mov.w	ip, #16
   1bfec:	b13a      	cbz	r2, 1bffe <hci_acl+0x76>
   1bfee:	2104      	movs	r1, #4
   1bff0:	7139      	strb	r1, [r7, #4]
   1bff2:	2100      	movs	r1, #0
   1bff4:	7179      	strb	r1, [r7, #5]
   1bff6:	71b9      	strb	r1, [r7, #6]
   1bff8:	71f9      	strb	r1, [r7, #7]
   1bffa:	6878      	ldr	r0, [r7, #4]
   1bffc:	6118      	str	r0, [r3, #16]
   1bffe:	2100      	movs	r1, #0
   1c000:	f36f 0100 	bfc	r1, #0, #1
   1c004:	f36f 0141 	bfc	r1, #1, #1
   1c008:	f36f 0182 	bfc	r1, #2, #1
   1c00c:	f36f 01c5 	bfc	r1, #3, #3
   1c010:	2301      	movs	r3, #1
   1c012:	f363 1188 	bfi	r1, r3, #6, #3
   1c016:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
   1c01a:	f36c 2152 	bfi	r1, ip, #9, #10
   1c01e:	f36f 41de 	bfc	r1, #19, #12
   1c022:	f36f 71df 	bfc	r1, #31, #1
   1c026:	2300      	movs	r3, #0
   1c028:	4838      	ldr	r0, [pc, #224]	; (1c10c <hci_acl+0x184>)
   1c02a:	f7fa fc8f 	bl	1694c <z_impl_z_log_msg_static_create>
   1c02e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1c030:	4620      	mov	r0, r4
   1c032:	f00d fb37 	bl	296a4 <net_buf_unref>
}
   1c036:	370c      	adds	r7, #12
   1c038:	46bd      	mov	sp, r7
   1c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1c03c:	f240 13ed 	movw	r3, #493	; 0x1ed
   1c040:	4a33      	ldr	r2, [pc, #204]	; (1c110 <hci_acl+0x188>)
   1c042:	4934      	ldr	r1, [pc, #208]	; (1c114 <hci_acl+0x18c>)
   1c044:	4834      	ldr	r0, [pc, #208]	; (1c118 <hci_acl+0x190>)
   1c046:	f01a f925 	bl	36294 <assert_print>
   1c04a:	4040      	eors	r0, r0
   1c04c:	f380 8811 	msr	BASEPRI, r0
   1c050:	f04f 0003 	mov.w	r0, #3
   1c054:	df02      	svc	2
   1c056:	e79e      	b.n	1bf96 <hci_acl+0xe>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1c058:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c05c:	e7b3      	b.n	1bfc6 <hci_acl+0x3e>
   1c05e:	f06f 0c1b 	mvn.w	ip, #27
   1c062:	e7c3      	b.n	1bfec <hci_acl+0x64>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1c064:	f004 f95a 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1c068:	4606      	mov	r6, r0
   1c06a:	b158      	cbz	r0, 1c084 <hci_acl+0xfc>
	acl(buf)->index = bt_conn_index(conn);
   1c06c:	f004 fade 	bl	2062c <bt_conn_index>
   1c070:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1c072:	462a      	mov	r2, r5
   1c074:	4621      	mov	r1, r4
   1c076:	4630      	mov	r0, r6
   1c078:	f01d f8e2 	bl	39240 <bt_conn_recv>
	bt_conn_unref(conn);
   1c07c:	4630      	mov	r0, r6
   1c07e:	f004 f91b 	bl	202b8 <bt_conn_unref>
   1c082:	e7d8      	b.n	1c036 <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1c084:	8b65      	ldrh	r5, [r4, #26]
   1c086:	466e      	mov	r6, sp
   1c088:	b088      	sub	sp, #32
   1c08a:	466b      	mov	r3, sp
   1c08c:	f113 0210 	adds.w	r2, r3, #16
   1c090:	d034      	beq.n	1c0fc <hci_acl+0x174>
   1c092:	210c      	movs	r1, #12
   1c094:	b14a      	cbz	r2, 1c0aa <hci_acl+0x122>
   1c096:	4608      	mov	r0, r1
   1c098:	2904      	cmp	r1, #4
   1c09a:	dd03      	ble.n	1c0a4 <hci_acl+0x11c>
   1c09c:	f8df c07c 	ldr.w	ip, [pc, #124]	; 1c11c <hci_acl+0x194>
   1c0a0:	f8c3 c014 	str.w	ip, [r3, #20]
   1c0a4:	2808      	cmp	r0, #8
   1c0a6:	dd00      	ble.n	1c0aa <hci_acl+0x122>
   1c0a8:	619d      	str	r5, [r3, #24]
   1c0aa:	290b      	cmp	r1, #11
   1c0ac:	dd29      	ble.n	1c102 <hci_acl+0x17a>
   1c0ae:	250c      	movs	r5, #12
   1c0b0:	b13a      	cbz	r2, 1c0c2 <hci_acl+0x13a>
   1c0b2:	2103      	movs	r1, #3
   1c0b4:	7139      	strb	r1, [r7, #4]
   1c0b6:	2100      	movs	r1, #0
   1c0b8:	7179      	strb	r1, [r7, #5]
   1c0ba:	71b9      	strb	r1, [r7, #6]
   1c0bc:	71f9      	strb	r1, [r7, #7]
   1c0be:	6878      	ldr	r0, [r7, #4]
   1c0c0:	6118      	str	r0, [r3, #16]
   1c0c2:	2100      	movs	r1, #0
   1c0c4:	f36f 0100 	bfc	r1, #0, #1
   1c0c8:	f36f 0141 	bfc	r1, #1, #1
   1c0cc:	f36f 0182 	bfc	r1, #2, #1
   1c0d0:	f36f 01c5 	bfc	r1, #3, #3
   1c0d4:	2301      	movs	r3, #1
   1c0d6:	f363 1188 	bfi	r1, r3, #6, #3
   1c0da:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   1c0de:	f365 2152 	bfi	r1, r5, #9, #10
   1c0e2:	f36f 41de 	bfc	r1, #19, #12
   1c0e6:	f36f 71df 	bfc	r1, #31, #1
   1c0ea:	2300      	movs	r3, #0
   1c0ec:	4807      	ldr	r0, [pc, #28]	; (1c10c <hci_acl+0x184>)
   1c0ee:	f7fa fc2d 	bl	1694c <z_impl_z_log_msg_static_create>
   1c0f2:	46b5      	mov	sp, r6
		net_buf_unref(buf);
   1c0f4:	4620      	mov	r0, r4
   1c0f6:	f00d fad5 	bl	296a4 <net_buf_unref>
		return;
   1c0fa:	e79c      	b.n	1c036 <hci_acl+0xae>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1c0fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c100:	e7c8      	b.n	1c094 <hci_acl+0x10c>
   1c102:	f06f 051b 	mvn.w	r5, #27
   1c106:	e7d3      	b.n	1c0b0 <hci_acl+0x128>
   1c108:	000424f4 	.word	0x000424f4
   1c10c:	0003f3d0 	.word	0x0003f3d0
   1c110:	00042454 	.word	0x00042454
   1c114:	00042488 	.word	0x00042488
   1c118:	0003f72c 	.word	0x0003f72c
   1c11c:	00042518 	.word	0x00042518

0001c120 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1c120:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c122:	b083      	sub	sp, #12
   1c124:	af00      	add	r7, sp, #0
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1c126:	484c      	ldr	r0, [pc, #304]	; (1c258 <rx_work_handler+0x138>)
   1c128:	f00d fa32 	bl	29590 <net_buf_slist_get>
	if (!buf) {
   1c12c:	2800      	cmp	r0, #0
   1c12e:	d04e      	beq.n	1c1ce <rx_work_handler+0xae>
   1c130:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1c132:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1c134:	2b01      	cmp	r3, #1
   1c136:	d004      	beq.n	1c142 <rx_work_handler+0x22>
   1c138:	2b03      	cmp	r3, #3
   1c13a:	d105      	bne.n	1c148 <rx_work_handler+0x28>
#if defined(CONFIG_BT_CONN)
	case BT_BUF_ACL_IN:
		hci_acl(buf);
   1c13c:	f7ff ff24 	bl	1bf88 <hci_acl>
		break;
   1c140:	e03b      	b.n	1c1ba <rx_work_handler+0x9a>
	case BT_BUF_ISO_IN:
		hci_iso(buf);
		break;
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
   1c142:	f7ff fe77 	bl	1be34 <hci_event>
		break;
   1c146:	e038      	b.n	1c1ba <rx_work_handler+0x9a>
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1c148:	466d      	mov	r5, sp
   1c14a:	b088      	sub	sp, #32
   1c14c:	4669      	mov	r1, sp
   1c14e:	f111 0210 	adds.w	r2, r1, #16
   1c152:	d03f      	beq.n	1c1d4 <rx_work_handler+0xb4>
   1c154:	200c      	movs	r0, #12
   1c156:	b142      	cbz	r2, 1c16a <rx_work_handler+0x4a>
   1c158:	4684      	mov	ip, r0
   1c15a:	2804      	cmp	r0, #4
   1c15c:	dd01      	ble.n	1c162 <rx_work_handler+0x42>
   1c15e:	4e3f      	ldr	r6, [pc, #252]	; (1c25c <rx_work_handler+0x13c>)
   1c160:	614e      	str	r6, [r1, #20]
   1c162:	f1bc 0f08 	cmp.w	ip, #8
   1c166:	dd00      	ble.n	1c16a <rx_work_handler+0x4a>
   1c168:	618b      	str	r3, [r1, #24]
   1c16a:	280b      	cmp	r0, #11
   1c16c:	dd35      	ble.n	1c1da <rx_work_handler+0xba>
   1c16e:	230c      	movs	r3, #12
   1c170:	b13a      	cbz	r2, 1c182 <rx_work_handler+0x62>
   1c172:	2003      	movs	r0, #3
   1c174:	7138      	strb	r0, [r7, #4]
   1c176:	2000      	movs	r0, #0
   1c178:	7178      	strb	r0, [r7, #5]
   1c17a:	71b8      	strb	r0, [r7, #6]
   1c17c:	71f8      	strb	r0, [r7, #7]
   1c17e:	6878      	ldr	r0, [r7, #4]
   1c180:	6108      	str	r0, [r1, #16]
   1c182:	2100      	movs	r1, #0
   1c184:	f36f 0100 	bfc	r1, #0, #1
   1c188:	f36f 0141 	bfc	r1, #1, #1
   1c18c:	f36f 0182 	bfc	r1, #2, #1
   1c190:	f36f 01c5 	bfc	r1, #3, #3
   1c194:	2001      	movs	r0, #1
   1c196:	f360 1188 	bfi	r1, r0, #6, #3
   1c19a:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1c19e:	f363 2152 	bfi	r1, r3, #9, #10
   1c1a2:	f36f 41de 	bfc	r1, #19, #12
   1c1a6:	f36f 71df 	bfc	r1, #31, #1
   1c1aa:	2300      	movs	r3, #0
   1c1ac:	482c      	ldr	r0, [pc, #176]	; (1c260 <rx_work_handler+0x140>)
   1c1ae:	f7fa fbcd 	bl	1694c <z_impl_z_log_msg_static_create>
   1c1b2:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1c1b4:	4620      	mov	r0, r4
   1c1b6:	f00d fa75 	bl	296a4 <net_buf_unref>
	return list->head;
   1c1ba:	4b2a      	ldr	r3, [pc, #168]	; (1c264 <rx_work_handler+0x144>)
   1c1bc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1c1c0:	b12b      	cbz	r3, 1c1ce <rx_work_handler+0xae>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1c1c2:	4929      	ldr	r1, [pc, #164]	; (1c268 <rx_work_handler+0x148>)
   1c1c4:	4829      	ldr	r0, [pc, #164]	; (1c26c <rx_work_handler+0x14c>)
   1c1c6:	f022 fcb4 	bl	3eb32 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1c1ca:	2800      	cmp	r0, #0
   1c1cc:	db08      	blt.n	1c1e0 <rx_work_handler+0xc0>
			LOG_ERR("Could not submit rx_work: %d", err);
		}
	}
}
   1c1ce:	370c      	adds	r7, #12
   1c1d0:	46bd      	mov	sp, r7
   1c1d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1c1d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c1d8:	e7bd      	b.n	1c156 <rx_work_handler+0x36>
   1c1da:	f06f 031b 	mvn.w	r3, #27
   1c1de:	e7c7      	b.n	1c170 <rx_work_handler+0x50>
			LOG_ERR("Could not submit rx_work: %d", err);
   1c1e0:	466d      	mov	r5, sp
   1c1e2:	b088      	sub	sp, #32
   1c1e4:	466b      	mov	r3, sp
   1c1e6:	f113 0210 	adds.w	r2, r3, #16
   1c1ea:	d02f      	beq.n	1c24c <rx_work_handler+0x12c>
   1c1ec:	210c      	movs	r1, #12
   1c1ee:	b13a      	cbz	r2, 1c200 <rx_work_handler+0xe0>
   1c1f0:	460c      	mov	r4, r1
   1c1f2:	2904      	cmp	r1, #4
   1c1f4:	dd01      	ble.n	1c1fa <rx_work_handler+0xda>
   1c1f6:	4e1e      	ldr	r6, [pc, #120]	; (1c270 <rx_work_handler+0x150>)
   1c1f8:	615e      	str	r6, [r3, #20]
   1c1fa:	2c08      	cmp	r4, #8
   1c1fc:	dd00      	ble.n	1c200 <rx_work_handler+0xe0>
   1c1fe:	6198      	str	r0, [r3, #24]
   1c200:	290b      	cmp	r1, #11
   1c202:	dd26      	ble.n	1c252 <rx_work_handler+0x132>
   1c204:	240c      	movs	r4, #12
   1c206:	b13a      	cbz	r2, 1c218 <rx_work_handler+0xf8>
   1c208:	2103      	movs	r1, #3
   1c20a:	7139      	strb	r1, [r7, #4]
   1c20c:	2100      	movs	r1, #0
   1c20e:	7179      	strb	r1, [r7, #5]
   1c210:	71b9      	strb	r1, [r7, #6]
   1c212:	71f9      	strb	r1, [r7, #7]
   1c214:	6878      	ldr	r0, [r7, #4]
   1c216:	6118      	str	r0, [r3, #16]
   1c218:	2100      	movs	r1, #0
   1c21a:	f36f 0100 	bfc	r1, #0, #1
   1c21e:	f36f 0141 	bfc	r1, #1, #1
   1c222:	f36f 0182 	bfc	r1, #2, #1
   1c226:	f36f 01c5 	bfc	r1, #3, #3
   1c22a:	2301      	movs	r3, #1
   1c22c:	f363 1188 	bfi	r1, r3, #6, #3
   1c230:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1c234:	f363 2152 	bfi	r1, r3, #9, #10
   1c238:	f36f 41de 	bfc	r1, #19, #12
   1c23c:	f36f 71df 	bfc	r1, #31, #1
   1c240:	2300      	movs	r3, #0
   1c242:	4807      	ldr	r0, [pc, #28]	; (1c260 <rx_work_handler+0x140>)
   1c244:	f7fa fb82 	bl	1694c <z_impl_z_log_msg_static_create>
   1c248:	46ad      	mov	sp, r5
   1c24a:	e7c0      	b.n	1c1ce <rx_work_handler+0xae>
   1c24c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c250:	e7cd      	b.n	1c1ee <rx_work_handler+0xce>
   1c252:	f06f 041b 	mvn.w	r4, #27
   1c256:	e7d6      	b.n	1c206 <rx_work_handler+0xe6>
   1c258:	2000813c 	.word	0x2000813c
   1c25c:	0004253c 	.word	0x0004253c
   1c260:	0003f3d0 	.word	0x0003f3d0
   1c264:	20008000 	.word	0x20008000
   1c268:	2000845c 	.word	0x2000845c
   1c26c:	2000b3a8 	.word	0x2000b3a8
   1c270:	000424d4 	.word	0x000424d4

0001c274 <le_data_len_change>:
{
   1c274:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c276:	b083      	sub	sp, #12
   1c278:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1c27a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1c27c:	882e      	ldrh	r6, [r5, #0]
	conn = bt_conn_lookup_handle(handle);
   1c27e:	4630      	mov	r0, r6
   1c280:	f004 f84c 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1c284:	b1a8      	cbz	r0, 1c2b2 <le_data_len_change+0x3e>
   1c286:	4604      	mov	r4, r0
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
   1c288:	8868      	ldrh	r0, [r5, #2]
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
   1c28a:	88ea      	ldrh	r2, [r5, #6]
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
   1c28c:	88a9      	ldrh	r1, [r5, #4]
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
   1c28e:	892b      	ldrh	r3, [r5, #8]
	conn->le.data_len.tx_max_len = max_tx_octets;
   1c290:	f8a4 00c6 	strh.w	r0, [r4, #198]	; 0xc6
	conn->le.data_len.tx_max_time = max_tx_time;
   1c294:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->le.data_len.rx_max_len = max_rx_octets;
   1c298:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->le.data_len.rx_max_time = max_rx_time;
   1c29c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	notify_le_data_len_updated(conn);
   1c2a0:	4620      	mov	r0, r4
   1c2a2:	f004 faaf 	bl	20804 <notify_le_data_len_updated>
	bt_conn_unref(conn);
   1c2a6:	4620      	mov	r0, r4
   1c2a8:	f004 f806 	bl	202b8 <bt_conn_unref>
}
   1c2ac:	370c      	adds	r7, #12
   1c2ae:	46bd      	mov	sp, r7
   1c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1c2b2:	466d      	mov	r5, sp
   1c2b4:	b088      	sub	sp, #32
   1c2b6:	466b      	mov	r3, sp
   1c2b8:	f113 0210 	adds.w	r2, r3, #16
   1c2bc:	d02f      	beq.n	1c31e <le_data_len_change+0xaa>
   1c2be:	210c      	movs	r1, #12
   1c2c0:	b13a      	cbz	r2, 1c2d2 <le_data_len_change+0x5e>
   1c2c2:	4608      	mov	r0, r1
   1c2c4:	2904      	cmp	r1, #4
   1c2c6:	dd01      	ble.n	1c2cc <le_data_len_change+0x58>
   1c2c8:	4c18      	ldr	r4, [pc, #96]	; (1c32c <le_data_len_change+0xb8>)
   1c2ca:	615c      	str	r4, [r3, #20]
   1c2cc:	2808      	cmp	r0, #8
   1c2ce:	dd00      	ble.n	1c2d2 <le_data_len_change+0x5e>
   1c2d0:	619e      	str	r6, [r3, #24]
   1c2d2:	290b      	cmp	r1, #11
   1c2d4:	dd26      	ble.n	1c324 <le_data_len_change+0xb0>
   1c2d6:	240c      	movs	r4, #12
   1c2d8:	b13a      	cbz	r2, 1c2ea <le_data_len_change+0x76>
   1c2da:	2103      	movs	r1, #3
   1c2dc:	7139      	strb	r1, [r7, #4]
   1c2de:	2100      	movs	r1, #0
   1c2e0:	7179      	strb	r1, [r7, #5]
   1c2e2:	71b9      	strb	r1, [r7, #6]
   1c2e4:	71f9      	strb	r1, [r7, #7]
   1c2e6:	6878      	ldr	r0, [r7, #4]
   1c2e8:	6118      	str	r0, [r3, #16]
   1c2ea:	2100      	movs	r1, #0
   1c2ec:	f36f 0100 	bfc	r1, #0, #1
   1c2f0:	f36f 0141 	bfc	r1, #1, #1
   1c2f4:	f36f 0182 	bfc	r1, #2, #1
   1c2f8:	f36f 01c5 	bfc	r1, #3, #3
   1c2fc:	2301      	movs	r3, #1
   1c2fe:	f363 1188 	bfi	r1, r3, #6, #3
   1c302:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1c306:	f363 2152 	bfi	r1, r3, #9, #10
   1c30a:	f36f 41de 	bfc	r1, #19, #12
   1c30e:	f36f 71df 	bfc	r1, #31, #1
   1c312:	2300      	movs	r3, #0
   1c314:	4806      	ldr	r0, [pc, #24]	; (1c330 <le_data_len_change+0xbc>)
   1c316:	f7fa fb19 	bl	1694c <z_impl_z_log_msg_static_create>
   1c31a:	46ad      	mov	sp, r5
		return;
   1c31c:	e7c6      	b.n	1c2ac <le_data_len_change+0x38>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1c31e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c322:	e7cd      	b.n	1c2c0 <le_data_len_change+0x4c>
   1c324:	f06f 041b 	mvn.w	r4, #27
   1c328:	e7d6      	b.n	1c2d8 <le_data_len_change+0x64>
   1c32a:	bf00      	nop
   1c32c:	00042348 	.word	0x00042348
   1c330:	0003f3d0 	.word	0x0003f3d0

0001c334 <le_conn_update_complete>:
{
   1c334:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c336:	b083      	sub	sp, #12
   1c338:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1c33a:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1c33c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1c340:	4630      	mov	r0, r6
   1c342:	f003 ffeb 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1c346:	b320      	cbz	r0, 1c392 <le_conn_update_complete+0x5e>
   1c348:	4604      	mov	r4, r0
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1c34a:	782b      	ldrb	r3, [r5, #0]
   1c34c:	2b1a      	cmp	r3, #26
   1c34e:	d05c      	beq.n	1c40a <le_conn_update_complete+0xd6>
		if (!evt->status) {
   1c350:	782b      	ldrb	r3, [r5, #0]
   1c352:	2b00      	cmp	r3, #0
   1c354:	d173      	bne.n	1c43e <le_conn_update_complete+0x10a>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   1c356:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1c35a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1c35e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   1c362:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1c366:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1c36a:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
			atomic_clear_bit(conn->flags,
   1c36e:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c370:	e8d3 1fef 	ldaex	r1, [r3]
   1c374:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   1c378:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1c37c:	2a00      	cmp	r2, #0
   1c37e:	d1f7      	bne.n	1c370 <le_conn_update_complete+0x3c>
		notify_le_param_updated(conn);
   1c380:	4620      	mov	r0, r4
   1c382:	f004 f9d9 	bl	20738 <notify_le_param_updated>
	bt_conn_unref(conn);
   1c386:	4620      	mov	r0, r4
   1c388:	f003 ff96 	bl	202b8 <bt_conn_unref>
}
   1c38c:	370c      	adds	r7, #12
   1c38e:	46bd      	mov	sp, r7
   1c390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1c392:	466d      	mov	r5, sp
   1c394:	b088      	sub	sp, #32
   1c396:	466b      	mov	r3, sp
   1c398:	f113 0210 	adds.w	r2, r3, #16
   1c39c:	d02f      	beq.n	1c3fe <le_conn_update_complete+0xca>
   1c39e:	210c      	movs	r1, #12
   1c3a0:	b13a      	cbz	r2, 1c3b2 <le_conn_update_complete+0x7e>
   1c3a2:	4608      	mov	r0, r1
   1c3a4:	2904      	cmp	r1, #4
   1c3a6:	dd01      	ble.n	1c3ac <le_conn_update_complete+0x78>
   1c3a8:	4c35      	ldr	r4, [pc, #212]	; (1c480 <le_conn_update_complete+0x14c>)
   1c3aa:	615c      	str	r4, [r3, #20]
   1c3ac:	2808      	cmp	r0, #8
   1c3ae:	dd00      	ble.n	1c3b2 <le_conn_update_complete+0x7e>
   1c3b0:	619e      	str	r6, [r3, #24]
   1c3b2:	290b      	cmp	r1, #11
   1c3b4:	dd26      	ble.n	1c404 <le_conn_update_complete+0xd0>
   1c3b6:	240c      	movs	r4, #12
   1c3b8:	b13a      	cbz	r2, 1c3ca <le_conn_update_complete+0x96>
   1c3ba:	2103      	movs	r1, #3
   1c3bc:	7039      	strb	r1, [r7, #0]
   1c3be:	2100      	movs	r1, #0
   1c3c0:	7079      	strb	r1, [r7, #1]
   1c3c2:	70b9      	strb	r1, [r7, #2]
   1c3c4:	70f9      	strb	r1, [r7, #3]
   1c3c6:	6838      	ldr	r0, [r7, #0]
   1c3c8:	6118      	str	r0, [r3, #16]
   1c3ca:	2100      	movs	r1, #0
   1c3cc:	f36f 0100 	bfc	r1, #0, #1
   1c3d0:	f36f 0141 	bfc	r1, #1, #1
   1c3d4:	f36f 0182 	bfc	r1, #2, #1
   1c3d8:	f36f 01c5 	bfc	r1, #3, #3
   1c3dc:	2301      	movs	r3, #1
   1c3de:	f363 1188 	bfi	r1, r3, #6, #3
   1c3e2:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1c3e6:	f364 2152 	bfi	r1, r4, #9, #10
   1c3ea:	f36f 41de 	bfc	r1, #19, #12
   1c3ee:	f36f 71df 	bfc	r1, #31, #1
   1c3f2:	2300      	movs	r3, #0
   1c3f4:	4823      	ldr	r0, [pc, #140]	; (1c484 <le_conn_update_complete+0x150>)
   1c3f6:	f7fa faa9 	bl	1694c <z_impl_z_log_msg_static_create>
   1c3fa:	46ad      	mov	sp, r5
		return;
   1c3fc:	e7c6      	b.n	1c38c <le_conn_update_complete+0x58>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1c3fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c402:	e7cd      	b.n	1c3a0 <le_conn_update_complete+0x6c>
   1c404:	f06f 041b 	mvn.w	r4, #27
   1c408:	e7d6      	b.n	1c3b8 <le_conn_update_complete+0x84>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1c40a:	78c3      	ldrb	r3, [r0, #3]
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1c40c:	2b01      	cmp	r3, #1
   1c40e:	d19f      	bne.n	1c350 <le_conn_update_complete+0x1c>
	    !atomic_test_and_set_bit(conn->flags,
   1c410:	210a      	movs	r1, #10
   1c412:	3004      	adds	r0, #4
   1c414:	f01c f980 	bl	38718 <atomic_test_and_set_bit>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1c418:	2800      	cmp	r0, #0
   1c41a:	d199      	bne.n	1c350 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   1c41c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   1c420:	803b      	strh	r3, [r7, #0]
		param.interval_max = conn->le.interval_max;
   1c422:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   1c426:	807b      	strh	r3, [r7, #2]
		param.latency = conn->le.pending_latency;
   1c428:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
   1c42c:	80bb      	strh	r3, [r7, #4]
		param.timeout = conn->le.pending_timeout;
   1c42e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
   1c432:	80fb      	strh	r3, [r7, #6]
		bt_l2cap_update_conn_param(conn, &param);
   1c434:	4639      	mov	r1, r7
   1c436:	4620      	mov	r0, r4
   1c438:	f01d f8f3 	bl	39622 <bt_l2cap_update_conn_param>
				     BT_CONN_PERIPHERAL_PARAM_L2CAP)) {
   1c43c:	e7a3      	b.n	1c386 <le_conn_update_complete+0x52>
		} else if (atomic_test_bit(conn->flags,
   1c43e:	1d26      	adds	r6, r4, #4
   1c440:	2108      	movs	r1, #8
   1c442:	4630      	mov	r0, r6
   1c444:	f01c f95d 	bl	38702 <atomic_test_bit>
   1c448:	b110      	cbz	r0, 1c450 <le_conn_update_complete+0x11c>
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1c44a:	782b      	ldrb	r3, [r5, #0]
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1c44c:	2b20      	cmp	r3, #32
   1c44e:	d008      	beq.n	1c462 <le_conn_update_complete+0x12e>
   1c450:	e8d6 3fef 	ldaex	r3, [r6]
   1c454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   1c458:	e8c6 3fe2 	stlex	r2, r3, [r6]
   1c45c:	2a00      	cmp	r2, #0
   1c45e:	d08f      	beq.n	1c380 <le_conn_update_complete+0x4c>
   1c460:	e7f6      	b.n	1c450 <le_conn_update_complete+0x11c>
			   conn->le.conn_param_retry_countdown) {
   1c462:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   1c466:	2b00      	cmp	r3, #0
   1c468:	d0f2      	beq.n	1c450 <le_conn_update_complete+0x11c>
			conn->le.conn_param_retry_countdown--;
   1c46a:	3b01      	subs	r3, #1
   1c46c:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1c470:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1c474:	2300      	movs	r3, #0
   1c476:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1c47a:	f016 fa7b 	bl	32974 <k_work_schedule>
			   conn->le.conn_param_retry_countdown) {
   1c47e:	e77f      	b.n	1c380 <le_conn_update_complete+0x4c>
   1c480:	00042348 	.word	0x00042348
   1c484:	0003f3d0 	.word	0x0003f3d0

0001c488 <bt_hci_cmd_state_set_init>:
{
   1c488:	b510      	push	{r4, lr}
   1c48a:	460c      	mov	r4, r1
	state->target = target;
   1c48c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   1c48e:	604b      	str	r3, [r1, #4]
	state->val = val;
   1c490:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1c494:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   1c496:	f01f fc67 	bl	3bd68 <net_buf_id>
   1c49a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c49e:	4b02      	ldr	r3, [pc, #8]	; (1c4a8 <bt_hci_cmd_state_set_init+0x20>)
   1c4a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1c4a4:	605c      	str	r4, [r3, #4]
}
   1c4a6:	bd10      	pop	{r4, pc}
   1c4a8:	2000c024 	.word	0x2000c024

0001c4ac <bt_hci_cmd_create>:
{
   1c4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c4b0:	4606      	mov	r6, r0
   1c4b2:	460f      	mov	r7, r1
	return net_buf_alloc_fixed(pool, timeout);
   1c4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c4bc:	481f      	ldr	r0, [pc, #124]	; (1c53c <bt_hci_cmd_create+0x90>)
   1c4be:	f01f fc78 	bl	3bdb2 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1c4c2:	b370      	cbz	r0, 1c522 <bt_hci_cmd_create+0x76>
   1c4c4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   1c4c6:	f100 090c 	add.w	r9, r0, #12
   1c4ca:	2101      	movs	r1, #1
   1c4cc:	4648      	mov	r0, r9
   1c4ce:	f00c ffc1 	bl	29454 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1c4d2:	f04f 0800 	mov.w	r8, #0
   1c4d6:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   1c4da:	4620      	mov	r0, r4
   1c4dc:	f01f fc44 	bl	3bd68 <net_buf_id>
   1c4e0:	4d17      	ldr	r5, [pc, #92]	; (1c540 <bt_hci_cmd_create+0x94>)
   1c4e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c4e6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   1c4ea:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   1c4ec:	4620      	mov	r0, r4
   1c4ee:	f01f fc3b 	bl	3bd68 <net_buf_id>
   1c4f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c4f6:	eb05 0380 	add.w	r3, r5, r0, lsl #2
   1c4fa:	f8c3 8008 	str.w	r8, [r3, #8]
	cmd(buf)->state = NULL;
   1c4fe:	4620      	mov	r0, r4
   1c500:	f01f fc32 	bl	3bd68 <net_buf_id>
   1c504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c508:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   1c50c:	f8c5 8004 	str.w	r8, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   1c510:	2103      	movs	r1, #3
   1c512:	4648      	mov	r0, r9
   1c514:	f00d f9e4 	bl	298e0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   1c518:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   1c51a:	7087      	strb	r7, [r0, #2]
}
   1c51c:	4620      	mov	r0, r4
   1c51e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT_NO_MSG(buf);
   1c522:	4c08      	ldr	r4, [pc, #32]	; (1c544 <bt_hci_cmd_create+0x98>)
   1c524:	f240 1301 	movw	r3, #257	; 0x101
   1c528:	4622      	mov	r2, r4
   1c52a:	4907      	ldr	r1, [pc, #28]	; (1c548 <bt_hci_cmd_create+0x9c>)
   1c52c:	4807      	ldr	r0, [pc, #28]	; (1c54c <bt_hci_cmd_create+0xa0>)
   1c52e:	f019 feb1 	bl	36294 <assert_print>
   1c532:	f240 1101 	movw	r1, #257	; 0x101
   1c536:	4620      	mov	r0, r4
   1c538:	f019 fea5 	bl	36286 <assert_post_action>
   1c53c:	20008b38 	.word	0x20008b38
   1c540:	2000c024 	.word	0x2000c024
   1c544:	00042454 	.word	0x00042454
   1c548:	000446d0 	.word	0x000446d0
   1c54c:	0003f72c 	.word	0x0003f72c

0001c550 <bt_hci_cmd_send_sync>:
{
   1c550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c554:	b088      	sub	sp, #32
   1c556:	af00      	add	r7, sp, #0
   1c558:	4606      	mov	r6, r0
   1c55a:	4615      	mov	r5, r2
	if (!buf) {
   1c55c:	460c      	mov	r4, r1
   1c55e:	2900      	cmp	r1, #0
   1c560:	d06f      	beq.n	1c642 <bt_hci_cmd_send_sync+0xf2>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c562:	f107 0808 	add.w	r8, r7, #8
   1c566:	2201      	movs	r2, #1
   1c568:	2100      	movs	r1, #0
   1c56a:	4640      	mov	r0, r8
   1c56c:	f022 fa4d 	bl	3ea0a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   1c570:	4620      	mov	r0, r4
   1c572:	f01f fbf9 	bl	3bd68 <net_buf_id>
   1c576:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c57a:	4b49      	ldr	r3, [pc, #292]	; (1c6a0 <bt_hci_cmd_send_sync+0x150>)
   1c57c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1c580:	f8c3 8008 	str.w	r8, [r3, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   1c584:	4620      	mov	r0, r4
   1c586:	f00d f8c3 	bl	29710 <net_buf_ref>
   1c58a:	4601      	mov	r1, r0
   1c58c:	4845      	ldr	r0, [pc, #276]	; (1c6a4 <bt_hci_cmd_send_sync+0x154>)
   1c58e:	f00d f861 	bl	29654 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   1c592:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1c596:	2300      	movs	r3, #0
   1c598:	4640      	mov	r0, r8
   1c59a:	f015 fc69 	bl	31e70 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1c59e:	4680      	mov	r8, r0
   1c5a0:	2800      	cmp	r0, #0
   1c5a2:	d156      	bne.n	1c652 <bt_hci_cmd_send_sync+0x102>
	status = cmd(buf)->status;
   1c5a4:	4620      	mov	r0, r4
   1c5a6:	f01f fbdf 	bl	3bd68 <net_buf_id>
   1c5aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1c5ae:	4b3c      	ldr	r3, [pc, #240]	; (1c6a0 <bt_hci_cmd_send_sync+0x150>)
   1c5b0:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   1c5b4:	f1b8 0f00 	cmp.w	r8, #0
   1c5b8:	d066      	beq.n	1c688 <bt_hci_cmd_send_sync+0x138>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1c5ba:	466d      	mov	r5, sp
   1c5bc:	b088      	sub	sp, #32
   1c5be:	466b      	mov	r3, sp
   1c5c0:	f113 0210 	adds.w	r2, r3, #16
   1c5c4:	d057      	beq.n	1c676 <bt_hci_cmd_send_sync+0x126>
   1c5c6:	2110      	movs	r1, #16
   1c5c8:	b16a      	cbz	r2, 1c5e6 <bt_hci_cmd_send_sync+0x96>
   1c5ca:	4608      	mov	r0, r1
   1c5cc:	2904      	cmp	r1, #4
   1c5ce:	dd03      	ble.n	1c5d8 <bt_hci_cmd_send_sync+0x88>
   1c5d0:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 1c6a8 <bt_hci_cmd_send_sync+0x158>
   1c5d4:	f8c3 c014 	str.w	ip, [r3, #20]
   1c5d8:	2808      	cmp	r0, #8
   1c5da:	dd00      	ble.n	1c5de <bt_hci_cmd_send_sync+0x8e>
   1c5dc:	619e      	str	r6, [r3, #24]
   1c5de:	280c      	cmp	r0, #12
   1c5e0:	dd01      	ble.n	1c5e6 <bt_hci_cmd_send_sync+0x96>
   1c5e2:	f8c3 801c 	str.w	r8, [r3, #28]
   1c5e6:	290f      	cmp	r1, #15
   1c5e8:	dd48      	ble.n	1c67c <bt_hci_cmd_send_sync+0x12c>
   1c5ea:	2610      	movs	r6, #16
   1c5ec:	b13a      	cbz	r2, 1c5fe <bt_hci_cmd_send_sync+0xae>
   1c5ee:	2104      	movs	r1, #4
   1c5f0:	7139      	strb	r1, [r7, #4]
   1c5f2:	2100      	movs	r1, #0
   1c5f4:	7179      	strb	r1, [r7, #5]
   1c5f6:	71b9      	strb	r1, [r7, #6]
   1c5f8:	71f9      	strb	r1, [r7, #7]
   1c5fa:	6878      	ldr	r0, [r7, #4]
   1c5fc:	6118      	str	r0, [r3, #16]
   1c5fe:	2100      	movs	r1, #0
   1c600:	f36f 0100 	bfc	r1, #0, #1
   1c604:	f36f 0141 	bfc	r1, #1, #1
   1c608:	f36f 0182 	bfc	r1, #2, #1
   1c60c:	f36f 01c5 	bfc	r1, #3, #3
   1c610:	2302      	movs	r3, #2
   1c612:	f363 1188 	bfi	r1, r3, #6, #3
   1c616:	f406 737d 	and.w	r3, r6, #1012	; 0x3f4
   1c61a:	f363 2152 	bfi	r1, r3, #9, #10
   1c61e:	f36f 41de 	bfc	r1, #19, #12
   1c622:	f36f 71df 	bfc	r1, #31, #1
   1c626:	2300      	movs	r3, #0
   1c628:	4820      	ldr	r0, [pc, #128]	; (1c6ac <bt_hci_cmd_send_sync+0x15c>)
   1c62a:	f7fa f98f 	bl	1694c <z_impl_z_log_msg_static_create>
   1c62e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1c630:	4620      	mov	r0, r4
   1c632:	f00d f837 	bl	296a4 <net_buf_unref>
		switch (status) {
   1c636:	f1b8 0f09 	cmp.w	r8, #9
   1c63a:	d022      	beq.n	1c682 <bt_hci_cmd_send_sync+0x132>
			return -EIO;
   1c63c:	f06f 0004 	mvn.w	r0, #4
   1c640:	e025      	b.n	1c68e <bt_hci_cmd_send_sync+0x13e>
		buf = bt_hci_cmd_create(opcode, 0);
   1c642:	f7ff ff33 	bl	1c4ac <bt_hci_cmd_create>
		if (!buf) {
   1c646:	4604      	mov	r4, r0
   1c648:	2800      	cmp	r0, #0
   1c64a:	d18a      	bne.n	1c562 <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   1c64c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c650:	e01d      	b.n	1c68e <bt_hci_cmd_send_sync+0x13e>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   1c652:	f240 1349 	movw	r3, #329	; 0x149
   1c656:	4a16      	ldr	r2, [pc, #88]	; (1c6b0 <bt_hci_cmd_send_sync+0x160>)
   1c658:	4916      	ldr	r1, [pc, #88]	; (1c6b4 <bt_hci_cmd_send_sync+0x164>)
   1c65a:	4817      	ldr	r0, [pc, #92]	; (1c6b8 <bt_hci_cmd_send_sync+0x168>)
   1c65c:	f019 fe1a 	bl	36294 <assert_print>
   1c660:	4641      	mov	r1, r8
   1c662:	4816      	ldr	r0, [pc, #88]	; (1c6bc <bt_hci_cmd_send_sync+0x16c>)
   1c664:	f019 fe16 	bl	36294 <assert_print>
   1c668:	4040      	eors	r0, r0
   1c66a:	f380 8811 	msr	BASEPRI, r0
   1c66e:	f04f 0003 	mov.w	r0, #3
   1c672:	df02      	svc	2
   1c674:	e796      	b.n	1c5a4 <bt_hci_cmd_send_sync+0x54>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   1c676:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c67a:	e7a5      	b.n	1c5c8 <bt_hci_cmd_send_sync+0x78>
   1c67c:	f06f 061b 	mvn.w	r6, #27
   1c680:	e7b4      	b.n	1c5ec <bt_hci_cmd_send_sync+0x9c>
			return -ECONNREFUSED;
   1c682:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   1c686:	e002      	b.n	1c68e <bt_hci_cmd_send_sync+0x13e>
	if (rsp) {
   1c688:	b12d      	cbz	r5, 1c696 <bt_hci_cmd_send_sync+0x146>
		*rsp = buf;
   1c68a:	602c      	str	r4, [r5, #0]
	return 0;
   1c68c:	2000      	movs	r0, #0
}
   1c68e:	3720      	adds	r7, #32
   1c690:	46bd      	mov	sp, r7
   1c692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1c696:	4620      	mov	r0, r4
   1c698:	f00d f804 	bl	296a4 <net_buf_unref>
	return 0;
   1c69c:	2000      	movs	r0, #0
   1c69e:	e7f6      	b.n	1c68e <bt_hci_cmd_send_sync+0x13e>
   1c6a0:	2000c024 	.word	0x2000c024
   1c6a4:	20008144 	.word	0x20008144
   1c6a8:	00042570 	.word	0x00042570
   1c6ac:	0003f3d0 	.word	0x0003f3d0
   1c6b0:	00042454 	.word	0x00042454
   1c6b4:	00040c1c 	.word	0x00040c1c
   1c6b8:	0003f72c 	.word	0x0003f72c
   1c6bc:	00042550 	.word	0x00042550

0001c6c0 <set_flow_control>:
{
   1c6c0:	b530      	push	{r4, r5, lr}
   1c6c2:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1c6c4:	4b32      	ldr	r3, [pc, #200]	; (1c790 <set_flow_control+0xd0>)
   1c6c6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1c6ca:	f013 0f20 	tst.w	r3, #32
   1c6ce:	d031      	beq.n	1c734 <set_flow_control+0x74>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_BUFFER_SIZE,
   1c6d0:	2107      	movs	r1, #7
   1c6d2:	f640 4033 	movw	r0, #3123	; 0xc33
   1c6d6:	f7ff fee9 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1c6da:	4605      	mov	r5, r0
   1c6dc:	2800      	cmp	r0, #0
   1c6de:	d051      	beq.n	1c784 <set_flow_control+0xc4>
   1c6e0:	2107      	movs	r1, #7
   1c6e2:	300c      	adds	r0, #12
   1c6e4:	f00d f8fc 	bl	298e0 <net_buf_simple_add>
   1c6e8:	4604      	mov	r4, r0
	(void)memset(hbs, 0, sizeof(*hbs));
   1c6ea:	2207      	movs	r2, #7
   1c6ec:	2100      	movs	r1, #0
   1c6ee:	f01b feb3 	bl	38458 <memset>
	hbs->acl_mtu = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_SIZE);
   1c6f2:	2200      	movs	r2, #0
   1c6f4:	f06f 0309 	mvn.w	r3, #9
   1c6f8:	7023      	strb	r3, [r4, #0]
   1c6fa:	2301      	movs	r3, #1
   1c6fc:	7063      	strb	r3, [r4, #1]
	hbs->acl_pkts = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_RX_COUNT);
   1c6fe:	2306      	movs	r3, #6
   1c700:	70e3      	strb	r3, [r4, #3]
   1c702:	7122      	strb	r2, [r4, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_HOST_BUFFER_SIZE, buf, NULL);
   1c704:	4629      	mov	r1, r5
   1c706:	f640 4033 	movw	r0, #3123	; 0xc33
   1c70a:	f7ff ff21 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1c70e:	bbb8      	cbnz	r0, 1c780 <set_flow_control+0xc0>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, 1);
   1c710:	2101      	movs	r1, #1
   1c712:	f640 4031 	movw	r0, #3121	; 0xc31
   1c716:	f7ff fec9 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1c71a:	4604      	mov	r4, r0
   1c71c:	b3a8      	cbz	r0, 1c78a <set_flow_control+0xca>
	return net_buf_simple_add_u8(&buf->b, val);
   1c71e:	2101      	movs	r1, #1
   1c720:	300c      	adds	r0, #12
   1c722:	f01f fb7e 	bl	3be22 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_CTL_TO_HOST_FLOW, buf, NULL);
   1c726:	2200      	movs	r2, #0
   1c728:	4621      	mov	r1, r4
   1c72a:	f640 4031 	movw	r0, #3121	; 0xc31
   1c72e:	f7ff ff0f 	bl	1c550 <bt_hci_cmd_send_sync>
   1c732:	e025      	b.n	1c780 <set_flow_control+0xc0>
		LOG_WRN("Controller to host flow control not supported");
   1c734:	4b17      	ldr	r3, [pc, #92]	; (1c794 <set_flow_control+0xd4>)
   1c736:	9307      	str	r3, [sp, #28]
   1c738:	2302      	movs	r3, #2
   1c73a:	f88d 3004 	strb.w	r3, [sp, #4]
   1c73e:	2400      	movs	r4, #0
   1c740:	f88d 4005 	strb.w	r4, [sp, #5]
   1c744:	f88d 4006 	strb.w	r4, [sp, #6]
   1c748:	f88d 4007 	strb.w	r4, [sp, #7]
   1c74c:	9a01      	ldr	r2, [sp, #4]
   1c74e:	9206      	str	r2, [sp, #24]
   1c750:	4621      	mov	r1, r4
   1c752:	f364 0100 	bfi	r1, r4, #0, #1
   1c756:	f364 0141 	bfi	r1, r4, #1, #1
   1c75a:	f364 0182 	bfi	r1, r4, #2, #1
   1c75e:	f364 01c5 	bfi	r1, r4, #3, #3
   1c762:	f363 1188 	bfi	r1, r3, #6, #3
   1c766:	2308      	movs	r3, #8
   1c768:	f363 2152 	bfi	r1, r3, #9, #10
   1c76c:	f364 41de 	bfi	r1, r4, #19, #12
   1c770:	f364 71df 	bfi	r1, r4, #31, #1
   1c774:	4623      	mov	r3, r4
   1c776:	aa06      	add	r2, sp, #24
   1c778:	4807      	ldr	r0, [pc, #28]	; (1c798 <set_flow_control+0xd8>)
   1c77a:	f7fa f8e7 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0;
   1c77e:	4620      	mov	r0, r4
}
   1c780:	b009      	add	sp, #36	; 0x24
   1c782:	bd30      	pop	{r4, r5, pc}
		return -ENOBUFS;
   1c784:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c788:	e7fa      	b.n	1c780 <set_flow_control+0xc0>
		return -ENOBUFS;
   1c78a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c78e:	e7f7      	b.n	1c780 <set_flow_control+0xc0>
   1c790:	20008000 	.word	0x20008000
   1c794:	0004258c 	.word	0x0004258c
   1c798:	0003f3d0 	.word	0x0003f3d0

0001c79c <common_init>:
{
   1c79c:	b500      	push	{lr}
   1c79e:	b083      	sub	sp, #12
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1c7a0:	4b26      	ldr	r3, [pc, #152]	; (1c83c <common_init+0xa0>)
   1c7a2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1c7a6:	689b      	ldr	r3, [r3, #8]
   1c7a8:	f013 0f01 	tst.w	r3, #1
   1c7ac:	d10d      	bne.n	1c7ca <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1c7ae:	aa01      	add	r2, sp, #4
   1c7b0:	2100      	movs	r1, #0
   1c7b2:	f640 4003 	movw	r0, #3075	; 0xc03
   1c7b6:	f7ff fecb 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1c7ba:	4603      	mov	r3, r0
   1c7bc:	b968      	cbnz	r0, 1c7da <common_init+0x3e>
		hci_reset_complete(rsp);
   1c7be:	9801      	ldr	r0, [sp, #4]
   1c7c0:	f7fe fe40 	bl	1b444 <hci_reset_complete>
		net_buf_unref(rsp);
   1c7c4:	9801      	ldr	r0, [sp, #4]
   1c7c6:	f00c ff6d 	bl	296a4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1c7ca:	aa01      	add	r2, sp, #4
   1c7cc:	2100      	movs	r1, #0
   1c7ce:	f241 0003 	movw	r0, #4099	; 0x1003
   1c7d2:	f7ff febd 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1c7d6:	4603      	mov	r3, r0
   1c7d8:	b118      	cbz	r0, 1c7e2 <common_init+0x46>
}
   1c7da:	4618      	mov	r0, r3
   1c7dc:	b003      	add	sp, #12
   1c7de:	f85d fb04 	ldr.w	pc, [sp], #4
	read_local_features_complete(rsp);
   1c7e2:	9801      	ldr	r0, [sp, #4]
   1c7e4:	f7fe fe40 	bl	1b468 <read_local_features_complete>
	net_buf_unref(rsp);
   1c7e8:	9801      	ldr	r0, [sp, #4]
   1c7ea:	f00c ff5b 	bl	296a4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1c7ee:	aa01      	add	r2, sp, #4
   1c7f0:	2100      	movs	r1, #0
   1c7f2:	f241 0001 	movw	r0, #4097	; 0x1001
   1c7f6:	f7ff feab 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1c7fa:	4603      	mov	r3, r0
   1c7fc:	2800      	cmp	r0, #0
   1c7fe:	d1ec      	bne.n	1c7da <common_init+0x3e>
	read_local_ver_complete(rsp);
   1c800:	9801      	ldr	r0, [sp, #4]
   1c802:	f7fe fdf5 	bl	1b3f0 <read_local_ver_complete>
	net_buf_unref(rsp);
   1c806:	9801      	ldr	r0, [sp, #4]
   1c808:	f00c ff4c 	bl	296a4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1c80c:	aa01      	add	r2, sp, #4
   1c80e:	2100      	movs	r1, #0
   1c810:	f241 0002 	movw	r0, #4098	; 0x1002
   1c814:	f7ff fe9c 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1c818:	4603      	mov	r3, r0
   1c81a:	2800      	cmp	r0, #0
   1c81c:	d1dd      	bne.n	1c7da <common_init+0x3e>
	read_supported_commands_complete(rsp);
   1c81e:	9801      	ldr	r0, [sp, #4]
   1c820:	f7fe fe2c 	bl	1b47c <read_supported_commands_complete>
	net_buf_unref(rsp);
   1c824:	9801      	ldr	r0, [sp, #4]
   1c826:	f00c ff3d 	bl	296a4 <net_buf_unref>
		err = prng_init();
   1c82a:	f002 fe7d 	bl	1f528 <prng_init>
		if (err) {
   1c82e:	4603      	mov	r3, r0
   1c830:	2800      	cmp	r0, #0
   1c832:	d1d2      	bne.n	1c7da <common_init+0x3e>
	err = set_flow_control();
   1c834:	f7ff ff44 	bl	1c6c0 <set_flow_control>
   1c838:	4603      	mov	r3, r0
	if (err) {
   1c83a:	e7ce      	b.n	1c7da <common_init+0x3e>
   1c83c:	20008000 	.word	0x20008000

0001c840 <le_set_event_mask>:
{
   1c840:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1c842:	2108      	movs	r1, #8
   1c844:	f242 0001 	movw	r0, #8193	; 0x2001
   1c848:	f7ff fe30 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1c84c:	2800      	cmp	r0, #0
   1c84e:	d041      	beq.n	1c8d4 <le_set_event_mask+0x94>
   1c850:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1c852:	2108      	movs	r1, #8
   1c854:	300c      	adds	r0, #12
   1c856:	f00d f843 	bl	298e0 <net_buf_simple_add>
   1c85a:	4602      	mov	r2, r0
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
   1c85c:	4b1f      	ldr	r3, [pc, #124]	; (1c8dc <le_set_event_mask+0x9c>)
   1c85e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if ((IS_ENABLED(CONFIG_BT_SMP) &&
   1c862:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c866:	d02d      	beq.n	1c8c4 <le_set_event_mask+0x84>
			mask |= BT_EVT_MASK_LE_ENH_CONN_COMPLETE;
   1c868:	f240 2e02 	movw	lr, #514	; 0x202
   1c86c:	f04f 0c00 	mov.w	ip, #0
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   1c870:	f04e 000c 	orr.w	r0, lr, #12
   1c874:	4661      	mov	r1, ip
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1c876:	f013 0f02 	tst.w	r3, #2
   1c87a:	d001      	beq.n	1c880 <le_set_event_mask+0x40>
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   1c87c:	f04e 002c 	orr.w	r0, lr, #44	; 0x2c
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1c880:	f013 0f20 	tst.w	r3, #32
   1c884:	d001      	beq.n	1c88a <le_set_event_mask+0x4a>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1c886:	f040 0040 	orr.w	r0, r0, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   1c88a:	4d14      	ldr	r5, [pc, #80]	; (1c8dc <le_set_event_mask+0x9c>)
   1c88c:	f895 c0d1 	ldrb.w	ip, [r5, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1c890:	f01c 0f09 	tst.w	ip, #9
   1c894:	d001      	beq.n	1c89a <le_set_event_mask+0x5a>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1c896:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   1c89a:	f013 0f01 	tst.w	r3, #1
   1c89e:	d001      	beq.n	1c8a4 <le_set_event_mask+0x64>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
   1c8a0:	f040 0010 	orr.w	r0, r0, #16
	    (BT_CMD_TEST(bt_dev.supported_commands, 34, 1)) &&
   1c8a4:	4b0d      	ldr	r3, [pc, #52]	; (1c8dc <le_set_event_mask+0x9c>)
   1c8a6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
	if (IS_ENABLED(CONFIG_BT_ECC) &&
   1c8aa:	f003 0306 	and.w	r3, r3, #6
   1c8ae:	2b06      	cmp	r3, #6
   1c8b0:	d00d      	beq.n	1c8ce <le_set_event_mask+0x8e>
	sys_put_le64(mask, cp_mask->events);
   1c8b2:	f01b fec9 	bl	38648 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1c8b6:	2200      	movs	r2, #0
   1c8b8:	4621      	mov	r1, r4
   1c8ba:	f242 0001 	movw	r0, #8193	; 0x2001
   1c8be:	f7ff fe47 	bl	1c550 <bt_hci_cmd_send_sync>
}
   1c8c2:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
   1c8c4:	f04f 0e03 	mov.w	lr, #3
   1c8c8:	f04f 0c00 	mov.w	ip, #0
   1c8cc:	e7d0      	b.n	1c870 <le_set_event_mask+0x30>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
   1c8ce:	f440 70c0 	orr.w	r0, r0, #384	; 0x180
   1c8d2:	e7ee      	b.n	1c8b2 <le_set_event_mask+0x72>
		return -ENOBUFS;
   1c8d4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1c8d8:	e7f3      	b.n	1c8c2 <le_set_event_mask+0x82>
   1c8da:	bf00      	nop
   1c8dc:	20008000 	.word	0x20008000

0001c8e0 <le_init>:
{
   1c8e0:	b510      	push	{r4, lr}
   1c8e2:	b088      	sub	sp, #32
	if (!BT_FEAT_LE(bt_dev.features)) {
   1c8e4:	4b4f      	ldr	r3, [pc, #316]	; (1ca24 <le_init+0x144>)
   1c8e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1c8ea:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c8ee:	d00a      	beq.n	1c906 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   1c8f0:	aa01      	add	r2, sp, #4
   1c8f2:	2100      	movs	r1, #0
   1c8f4:	f242 0003 	movw	r0, #8195	; 0x2003
   1c8f8:	f7ff fe2a 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1c8fc:	4603      	mov	r3, r0
   1c8fe:	b350      	cbz	r0, 1c956 <le_init+0x76>
}
   1c900:	4618      	mov	r0, r3
   1c902:	b008      	add	sp, #32
   1c904:	bd10      	pop	{r4, pc}
		LOG_ERR("Non-LE capable controller detected!");
   1c906:	4b48      	ldr	r3, [pc, #288]	; (1ca28 <le_init+0x148>)
   1c908:	9307      	str	r3, [sp, #28]
   1c90a:	2302      	movs	r3, #2
   1c90c:	f88d 3000 	strb.w	r3, [sp]
   1c910:	2300      	movs	r3, #0
   1c912:	f88d 3001 	strb.w	r3, [sp, #1]
   1c916:	f88d 3002 	strb.w	r3, [sp, #2]
   1c91a:	f88d 3003 	strb.w	r3, [sp, #3]
   1c91e:	9a00      	ldr	r2, [sp, #0]
   1c920:	9206      	str	r2, [sp, #24]
   1c922:	4619      	mov	r1, r3
   1c924:	f363 0100 	bfi	r1, r3, #0, #1
   1c928:	f363 0141 	bfi	r1, r3, #1, #1
   1c92c:	f363 0182 	bfi	r1, r3, #2, #1
   1c930:	f363 01c5 	bfi	r1, r3, #3, #3
   1c934:	2201      	movs	r2, #1
   1c936:	f362 1188 	bfi	r1, r2, #6, #3
   1c93a:	2208      	movs	r2, #8
   1c93c:	f362 2152 	bfi	r1, r2, #9, #10
   1c940:	f363 41de 	bfi	r1, r3, #19, #12
   1c944:	f363 71df 	bfi	r1, r3, #31, #1
   1c948:	aa06      	add	r2, sp, #24
   1c94a:	4838      	ldr	r0, [pc, #224]	; (1ca2c <le_init+0x14c>)
   1c94c:	f7f9 fffe 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1c950:	f06f 0312 	mvn.w	r3, #18
   1c954:	e7d4      	b.n	1c900 <le_init+0x20>
	read_le_features_complete(rsp);
   1c956:	9801      	ldr	r0, [sp, #4]
   1c958:	f7fe fd9a 	bl	1b490 <read_le_features_complete>
	net_buf_unref(rsp);
   1c95c:	9801      	ldr	r0, [sp, #4]
   1c95e:	f00c fea1 	bl	296a4 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1c962:	aa01      	add	r2, sp, #4
   1c964:	2100      	movs	r1, #0
   1c966:	f242 0002 	movw	r0, #8194	; 0x2002
   1c96a:	f7ff fdf1 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1c96e:	4603      	mov	r3, r0
   1c970:	2800      	cmp	r0, #0
   1c972:	d1c5      	bne.n	1c900 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   1c974:	9801      	ldr	r0, [sp, #4]
   1c976:	f7fe fd95 	bl	1b4a4 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1c97a:	9801      	ldr	r0, [sp, #4]
   1c97c:	f00c fe92 	bl	296a4 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1c980:	4b28      	ldr	r3, [pc, #160]	; (1ca24 <le_init+0x144>)
   1c982:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1c986:	f013 0f20 	tst.w	r3, #32
   1c98a:	d01e      	beq.n	1c9ca <le_init+0xea>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1c98c:	4b25      	ldr	r3, [pc, #148]	; (1ca24 <le_init+0x144>)
   1c98e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1c992:	f013 0f08 	tst.w	r3, #8
   1c996:	d130      	bne.n	1c9fa <le_init+0x11a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1c998:	4b22      	ldr	r3, [pc, #136]	; (1ca24 <le_init+0x144>)
   1c99a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1c99e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c9a2:	d00e      	beq.n	1c9c2 <le_init+0xe2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
   1c9a4:	aa01      	add	r2, sp, #4
   1c9a6:	2100      	movs	r1, #0
   1c9a8:	f242 002a 	movw	r0, #8234	; 0x202a
   1c9ac:	f7ff fdd0 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1c9b0:	4603      	mov	r3, r0
   1c9b2:	2800      	cmp	r0, #0
   1c9b4:	d1a4      	bne.n	1c900 <le_init+0x20>
		le_read_resolving_list_size_complete(rsp);
   1c9b6:	9801      	ldr	r0, [sp, #4]
   1c9b8:	f7fe fd3c 	bl	1b434 <le_read_resolving_list_size_complete>
		net_buf_unref(rsp);
   1c9bc:	9801      	ldr	r0, [sp, #4]
   1c9be:	f00c fe71 	bl	296a4 <net_buf_unref>
	return  le_set_event_mask();
   1c9c2:	f7ff ff3d 	bl	1c840 <le_set_event_mask>
   1c9c6:	4603      	mov	r3, r0
   1c9c8:	e79a      	b.n	1c900 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1c9ca:	2102      	movs	r1, #2
   1c9cc:	f640 406d 	movw	r0, #3181	; 0xc6d
   1c9d0:	f7ff fd6c 	bl	1c4ac <bt_hci_cmd_create>
		if (!buf) {
   1c9d4:	4604      	mov	r4, r0
   1c9d6:	b308      	cbz	r0, 1ca1c <le_init+0x13c>
   1c9d8:	2102      	movs	r1, #2
   1c9da:	300c      	adds	r0, #12
   1c9dc:	f00c ff80 	bl	298e0 <net_buf_simple_add>
		cp_le->le = 0x01;
   1c9e0:	2301      	movs	r3, #1
   1c9e2:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1c9e4:	2200      	movs	r2, #0
   1c9e6:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1c9e8:	4621      	mov	r1, r4
   1c9ea:	f640 406d 	movw	r0, #3181	; 0xc6d
   1c9ee:	f7ff fdaf 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1c9f2:	4603      	mov	r3, r0
   1c9f4:	2800      	cmp	r0, #0
   1c9f6:	d0c9      	beq.n	1c98c <le_init+0xac>
   1c9f8:	e782      	b.n	1c900 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1c9fa:	aa01      	add	r2, sp, #4
   1c9fc:	2100      	movs	r1, #0
   1c9fe:	f242 001c 	movw	r0, #8220	; 0x201c
   1ca02:	f7ff fda5 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1ca06:	4603      	mov	r3, r0
   1ca08:	2800      	cmp	r0, #0
   1ca0a:	f47f af79 	bne.w	1c900 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   1ca0e:	9801      	ldr	r0, [sp, #4]
   1ca10:	f7fe fd04 	bl	1b41c <le_read_supp_states_complete>
		net_buf_unref(rsp);
   1ca14:	9801      	ldr	r0, [sp, #4]
   1ca16:	f00c fe45 	bl	296a4 <net_buf_unref>
   1ca1a:	e7bd      	b.n	1c998 <le_init+0xb8>
			return -ENOBUFS;
   1ca1c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   1ca20:	e76e      	b.n	1c900 <le_init+0x20>
   1ca22:	bf00      	nop
   1ca24:	20008000 	.word	0x20008000
   1ca28:	000425bc 	.word	0x000425bc
   1ca2c:	0003f3d0 	.word	0x0003f3d0

0001ca30 <bt_br_init>:
{
   1ca30:	b510      	push	{r4, lr}
   1ca32:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   1ca34:	4b0b      	ldr	r3, [pc, #44]	; (1ca64 <bt_br_init+0x34>)
   1ca36:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1ca3a:	b11b      	cbz	r3, 1ca44 <bt_br_init+0x14>
		return 0;
   1ca3c:	2400      	movs	r4, #0
}
   1ca3e:	4620      	mov	r0, r4
   1ca40:	b002      	add	sp, #8
   1ca42:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1ca44:	aa01      	add	r2, sp, #4
   1ca46:	2100      	movs	r1, #0
   1ca48:	f241 0005 	movw	r0, #4101	; 0x1005
   1ca4c:	f7ff fd80 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1ca50:	4604      	mov	r4, r0
   1ca52:	2800      	cmp	r0, #0
   1ca54:	d1f3      	bne.n	1ca3e <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   1ca56:	9801      	ldr	r0, [sp, #4]
   1ca58:	f7fe fd38 	bl	1b4cc <read_buffer_size_complete>
	net_buf_unref(rsp);
   1ca5c:	9801      	ldr	r0, [sp, #4]
   1ca5e:	f00c fe21 	bl	296a4 <net_buf_unref>
	return 0;
   1ca62:	e7ec      	b.n	1ca3e <bt_br_init+0xe>
   1ca64:	20008000 	.word	0x20008000

0001ca68 <hci_vs_init>:
{
   1ca68:	b510      	push	{r4, lr}
   1ca6a:	b094      	sub	sp, #80	; 0x50
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1ca6c:	aa01      	add	r2, sp, #4
   1ca6e:	2100      	movs	r1, #0
   1ca70:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1ca74:	f7ff fd6c 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1ca78:	bb60      	cbnz	r0, 1cad4 <hci_vs_init+0x6c>
	net_buf_unref(rsp);
   1ca7a:	9801      	ldr	r0, [sp, #4]
   1ca7c:	f00c fe12 	bl	296a4 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1ca80:	aa01      	add	r2, sp, #4
   1ca82:	2100      	movs	r1, #0
   1ca84:	f64f 4002 	movw	r0, #64514	; 0xfc02
   1ca88:	f7ff fd62 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1ca8c:	2800      	cmp	r0, #0
   1ca8e:	d147      	bne.n	1cb20 <hci_vs_init+0xb8>
	rp.cmds = (void *)rsp->data;
   1ca90:	9b01      	ldr	r3, [sp, #4]
   1ca92:	68d9      	ldr	r1, [r3, #12]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   1ca94:	4c47      	ldr	r4, [pc, #284]	; (1cbb4 <hci_vs_init+0x14c>)
   1ca96:	2202      	movs	r2, #2
   1ca98:	3101      	adds	r1, #1
   1ca9a:	4620      	mov	r0, r4
   1ca9c:	f01b fcad 	bl	383fa <memcpy>
	net_buf_unref(rsp);
   1caa0:	9801      	ldr	r0, [sp, #4]
   1caa2:	f00c fdff 	bl	296a4 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   1caa6:	7823      	ldrb	r3, [r4, #0]
   1caa8:	f013 0f04 	tst.w	r3, #4
   1caac:	d036      	beq.n	1cb1c <hci_vs_init+0xb4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   1caae:	aa01      	add	r2, sp, #4
   1cab0:	2100      	movs	r1, #0
   1cab2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1cab6:	f7ff fd4b 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1caba:	2800      	cmp	r0, #0
   1cabc:	d155      	bne.n	1cb6a <hci_vs_init+0x102>
		rp.feat = (void *)rsp->data;
   1cabe:	9b01      	ldr	r3, [sp, #4]
   1cac0:	68d9      	ldr	r1, [r3, #12]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1cac2:	2201      	movs	r2, #1
   1cac4:	4411      	add	r1, r2
   1cac6:	483c      	ldr	r0, [pc, #240]	; (1cbb8 <hci_vs_init+0x150>)
   1cac8:	f01b fc97 	bl	383fa <memcpy>
		net_buf_unref(rsp);
   1cacc:	9801      	ldr	r0, [sp, #4]
   1cace:	f00c fde9 	bl	296a4 <net_buf_unref>
   1cad2:	e023      	b.n	1cb1c <hci_vs_init+0xb4>
		LOG_WRN("Vendor HCI extensions not available");
   1cad4:	4b39      	ldr	r3, [pc, #228]	; (1cbbc <hci_vs_init+0x154>)
   1cad6:	9313      	str	r3, [sp, #76]	; 0x4c
   1cad8:	2202      	movs	r2, #2
   1cada:	f88d 2000 	strb.w	r2, [sp]
   1cade:	2300      	movs	r3, #0
   1cae0:	f88d 3001 	strb.w	r3, [sp, #1]
   1cae4:	f88d 3002 	strb.w	r3, [sp, #2]
   1cae8:	f88d 3003 	strb.w	r3, [sp, #3]
   1caec:	9900      	ldr	r1, [sp, #0]
   1caee:	9112      	str	r1, [sp, #72]	; 0x48
   1caf0:	4619      	mov	r1, r3
   1caf2:	f363 0100 	bfi	r1, r3, #0, #1
   1caf6:	f363 0141 	bfi	r1, r3, #1, #1
   1cafa:	f363 0182 	bfi	r1, r3, #2, #1
   1cafe:	f363 01c5 	bfi	r1, r3, #3, #3
   1cb02:	f362 1188 	bfi	r1, r2, #6, #3
   1cb06:	2208      	movs	r2, #8
   1cb08:	f362 2152 	bfi	r1, r2, #9, #10
   1cb0c:	f363 41de 	bfi	r1, r3, #19, #12
   1cb10:	f363 71df 	bfi	r1, r3, #31, #1
   1cb14:	aa12      	add	r2, sp, #72	; 0x48
   1cb16:	482a      	ldr	r0, [pc, #168]	; (1cbc0 <hci_vs_init+0x158>)
   1cb18:	f7f9 ff18 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1cb1c:	b014      	add	sp, #80	; 0x50
   1cb1e:	bd10      	pop	{r4, pc}
		LOG_WRN("Failed to read supported vendor commands");
   1cb20:	4b28      	ldr	r3, [pc, #160]	; (1cbc4 <hci_vs_init+0x15c>)
   1cb22:	930d      	str	r3, [sp, #52]	; 0x34
   1cb24:	2202      	movs	r2, #2
   1cb26:	f88d 2000 	strb.w	r2, [sp]
   1cb2a:	2300      	movs	r3, #0
   1cb2c:	f88d 3001 	strb.w	r3, [sp, #1]
   1cb30:	f88d 3002 	strb.w	r3, [sp, #2]
   1cb34:	f88d 3003 	strb.w	r3, [sp, #3]
   1cb38:	9900      	ldr	r1, [sp, #0]
   1cb3a:	910c      	str	r1, [sp, #48]	; 0x30
   1cb3c:	4619      	mov	r1, r3
   1cb3e:	f363 0100 	bfi	r1, r3, #0, #1
   1cb42:	f363 0141 	bfi	r1, r3, #1, #1
   1cb46:	f363 0182 	bfi	r1, r3, #2, #1
   1cb4a:	f363 01c5 	bfi	r1, r3, #3, #3
   1cb4e:	f362 1188 	bfi	r1, r2, #6, #3
   1cb52:	2208      	movs	r2, #8
   1cb54:	f362 2152 	bfi	r1, r2, #9, #10
   1cb58:	f363 41de 	bfi	r1, r3, #19, #12
   1cb5c:	f363 71df 	bfi	r1, r3, #31, #1
   1cb60:	aa0c      	add	r2, sp, #48	; 0x30
   1cb62:	4817      	ldr	r0, [pc, #92]	; (1cbc0 <hci_vs_init+0x158>)
   1cb64:	f7f9 fef2 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   1cb68:	e7d8      	b.n	1cb1c <hci_vs_init+0xb4>
			LOG_WRN("Failed to read supported vendor features");
   1cb6a:	4b17      	ldr	r3, [pc, #92]	; (1cbc8 <hci_vs_init+0x160>)
   1cb6c:	9307      	str	r3, [sp, #28]
   1cb6e:	2202      	movs	r2, #2
   1cb70:	f88d 2000 	strb.w	r2, [sp]
   1cb74:	2300      	movs	r3, #0
   1cb76:	f88d 3001 	strb.w	r3, [sp, #1]
   1cb7a:	f88d 3002 	strb.w	r3, [sp, #2]
   1cb7e:	f88d 3003 	strb.w	r3, [sp, #3]
   1cb82:	9900      	ldr	r1, [sp, #0]
   1cb84:	9106      	str	r1, [sp, #24]
   1cb86:	4619      	mov	r1, r3
   1cb88:	f363 0100 	bfi	r1, r3, #0, #1
   1cb8c:	f363 0141 	bfi	r1, r3, #1, #1
   1cb90:	f363 0182 	bfi	r1, r3, #2, #1
   1cb94:	f363 01c5 	bfi	r1, r3, #3, #3
   1cb98:	f362 1188 	bfi	r1, r2, #6, #3
   1cb9c:	2208      	movs	r2, #8
   1cb9e:	f362 2152 	bfi	r1, r2, #9, #10
   1cba2:	f363 41de 	bfi	r1, r3, #19, #12
   1cba6:	f363 71df 	bfi	r1, r3, #31, #1
   1cbaa:	aa06      	add	r2, sp, #24
   1cbac:	4804      	ldr	r0, [pc, #16]	; (1cbc0 <hci_vs_init+0x158>)
   1cbae:	f7f9 fecd 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   1cbb2:	e7b3      	b.n	1cb1c <hci_vs_init+0xb4>
   1cbb4:	200080b9 	.word	0x200080b9
   1cbb8:	200080b8 	.word	0x200080b8
   1cbbc:	000425e0 	.word	0x000425e0
   1cbc0:	0003f3d0 	.word	0x0003f3d0
   1cbc4:	00042604 	.word	0x00042604
   1cbc8:	00042630 	.word	0x00042630

0001cbcc <hci_init>:
{
   1cbcc:	b500      	push	{lr}
   1cbce:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   1cbd0:	f7ff fde4 	bl	1c79c <common_init>
	if (err) {
   1cbd4:	4603      	mov	r3, r0
   1cbd6:	b118      	cbz	r0, 1cbe0 <hci_init+0x14>
}
   1cbd8:	4618      	mov	r0, r3
   1cbda:	b009      	add	sp, #36	; 0x24
   1cbdc:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   1cbe0:	f7ff fe7e 	bl	1c8e0 <le_init>
	if (err) {
   1cbe4:	4603      	mov	r3, r0
   1cbe6:	2800      	cmp	r0, #0
   1cbe8:	d1f6      	bne.n	1cbd8 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1cbea:	4b21      	ldr	r3, [pc, #132]	; (1cc70 <hci_init+0xa4>)
   1cbec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1cbf0:	f013 0f20 	tst.w	r3, #32
   1cbf4:	d00e      	beq.n	1cc14 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   1cbf6:	4b1e      	ldr	r3, [pc, #120]	; (1cc70 <hci_init+0xa4>)
   1cbf8:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1cbfc:	b183      	cbz	r3, 1cc20 <hci_init+0x54>
	err = set_event_mask();
   1cbfe:	f7f3 fc13 	bl	10428 <set_event_mask>
	if (err) {
   1cc02:	4603      	mov	r3, r0
   1cc04:	2800      	cmp	r0, #0
   1cc06:	d1e7      	bne.n	1cbd8 <hci_init+0xc>
	hci_vs_init();
   1cc08:	f7ff ff2e 	bl	1ca68 <hci_vs_init>
	err = bt_id_init();
   1cc0c:	f01b ffc2 	bl	38b94 <bt_id_init>
   1cc10:	4603      	mov	r3, r0
	if (err) {
   1cc12:	e7e1      	b.n	1cbd8 <hci_init+0xc>
		err = bt_br_init();
   1cc14:	f7ff ff0c 	bl	1ca30 <bt_br_init>
		if (err) {
   1cc18:	4603      	mov	r3, r0
   1cc1a:	2800      	cmp	r0, #0
   1cc1c:	d0ef      	beq.n	1cbfe <hci_init+0x32>
   1cc1e:	e7db      	b.n	1cbd8 <hci_init+0xc>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1cc20:	4b14      	ldr	r3, [pc, #80]	; (1cc74 <hci_init+0xa8>)
   1cc22:	9307      	str	r3, [sp, #28]
   1cc24:	2302      	movs	r3, #2
   1cc26:	f88d 3004 	strb.w	r3, [sp, #4]
   1cc2a:	2300      	movs	r3, #0
   1cc2c:	f88d 3005 	strb.w	r3, [sp, #5]
   1cc30:	f88d 3006 	strb.w	r3, [sp, #6]
   1cc34:	f88d 3007 	strb.w	r3, [sp, #7]
   1cc38:	9a01      	ldr	r2, [sp, #4]
   1cc3a:	9206      	str	r2, [sp, #24]
   1cc3c:	4619      	mov	r1, r3
   1cc3e:	f363 0100 	bfi	r1, r3, #0, #1
   1cc42:	f363 0141 	bfi	r1, r3, #1, #1
   1cc46:	f363 0182 	bfi	r1, r3, #2, #1
   1cc4a:	f363 01c5 	bfi	r1, r3, #3, #3
   1cc4e:	2201      	movs	r2, #1
   1cc50:	f362 1188 	bfi	r1, r2, #6, #3
   1cc54:	2208      	movs	r2, #8
   1cc56:	f362 2152 	bfi	r1, r2, #9, #10
   1cc5a:	f363 41de 	bfi	r1, r3, #19, #12
   1cc5e:	f363 71df 	bfi	r1, r3, #31, #1
   1cc62:	aa06      	add	r2, sp, #24
   1cc64:	4804      	ldr	r0, [pc, #16]	; (1cc78 <hci_init+0xac>)
   1cc66:	f7f9 fe71 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   1cc6a:	f06f 0304 	mvn.w	r3, #4
   1cc6e:	e7b3      	b.n	1cbd8 <hci_init+0xc>
   1cc70:	20008000 	.word	0x20008000
   1cc74:	0004265c 	.word	0x0004265c
   1cc78:	0003f3d0 	.word	0x0003f3d0

0001cc7c <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   1cc7c:	7b43      	ldrb	r3, [r0, #13]
   1cc7e:	2b07      	cmp	r3, #7
   1cc80:	d000      	beq.n	1cc84 <conn_auto_initiate+0x8>
   1cc82:	4770      	bx	lr
{
   1cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cc86:	b083      	sub	sp, #12
   1cc88:	af00      	add	r7, sp, #0
   1cc8a:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1cc8c:	210d      	movs	r1, #13
   1cc8e:	3004      	adds	r0, #4
   1cc90:	f01b fd37 	bl	38702 <atomic_test_bit>
   1cc94:	2800      	cmp	r0, #0
   1cc96:	d141      	bne.n	1cd1c <conn_auto_initiate+0xa0>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1cc98:	78e3      	ldrb	r3, [r4, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1cc9a:	b12b      	cbz	r3, 1cca8 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1cc9c:	4b24      	ldr	r3, [pc, #144]	; (1cd30 <conn_auto_initiate+0xb4>)
   1cc9e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1cca2:	f013 0f08 	tst.w	r3, #8
   1cca6:	d039      	beq.n	1cd1c <conn_auto_initiate+0xa0>
		err = hci_le_read_remote_features(conn);
   1cca8:	4620      	mov	r0, r4
   1ccaa:	f01b fd87 	bl	387bc <hci_le_read_remote_features>
		if (err) {
   1ccae:	4604      	mov	r4, r0
   1ccb0:	b3a0      	cbz	r0, 1cd1c <conn_auto_initiate+0xa0>
			LOG_ERR("Failed read remote features (%d)", err);
   1ccb2:	466d      	mov	r5, sp
   1ccb4:	b088      	sub	sp, #32
   1ccb6:	466b      	mov	r3, sp
   1ccb8:	f113 0210 	adds.w	r2, r3, #16
   1ccbc:	d031      	beq.n	1cd22 <conn_auto_initiate+0xa6>
   1ccbe:	210c      	movs	r1, #12
   1ccc0:	b13a      	cbz	r2, 1ccd2 <conn_auto_initiate+0x56>
   1ccc2:	4608      	mov	r0, r1
   1ccc4:	2904      	cmp	r1, #4
   1ccc6:	dd01      	ble.n	1cccc <conn_auto_initiate+0x50>
   1ccc8:	4e1a      	ldr	r6, [pc, #104]	; (1cd34 <conn_auto_initiate+0xb8>)
   1ccca:	615e      	str	r6, [r3, #20]
   1cccc:	2808      	cmp	r0, #8
   1ccce:	dd00      	ble.n	1ccd2 <conn_auto_initiate+0x56>
   1ccd0:	619c      	str	r4, [r3, #24]
   1ccd2:	290b      	cmp	r1, #11
   1ccd4:	dd28      	ble.n	1cd28 <conn_auto_initiate+0xac>
   1ccd6:	240c      	movs	r4, #12
   1ccd8:	b13a      	cbz	r2, 1ccea <conn_auto_initiate+0x6e>
   1ccda:	2103      	movs	r1, #3
   1ccdc:	7139      	strb	r1, [r7, #4]
   1ccde:	2100      	movs	r1, #0
   1cce0:	7179      	strb	r1, [r7, #5]
   1cce2:	71b9      	strb	r1, [r7, #6]
   1cce4:	71f9      	strb	r1, [r7, #7]
   1cce6:	6878      	ldr	r0, [r7, #4]
   1cce8:	6118      	str	r0, [r3, #16]
   1ccea:	2100      	movs	r1, #0
   1ccec:	f36f 0100 	bfc	r1, #0, #1
   1ccf0:	f36f 0141 	bfc	r1, #1, #1
   1ccf4:	f36f 0182 	bfc	r1, #2, #1
   1ccf8:	f36f 01c5 	bfc	r1, #3, #3
   1ccfc:	2301      	movs	r3, #1
   1ccfe:	f363 1188 	bfi	r1, r3, #6, #3
   1cd02:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1cd06:	f364 2152 	bfi	r1, r4, #9, #10
   1cd0a:	f36f 41de 	bfc	r1, #19, #12
   1cd0e:	f36f 71df 	bfc	r1, #31, #1
   1cd12:	2300      	movs	r3, #0
   1cd14:	4808      	ldr	r0, [pc, #32]	; (1cd38 <conn_auto_initiate+0xbc>)
   1cd16:	f7f9 fe19 	bl	1694c <z_impl_z_log_msg_static_create>
   1cd1a:	46ad      	mov	sp, r5
}
   1cd1c:	370c      	adds	r7, #12
   1cd1e:	46bd      	mov	sp, r7
   1cd20:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Failed read remote features (%d)", err);
   1cd22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cd26:	e7cb      	b.n	1ccc0 <conn_auto_initiate+0x44>
   1cd28:	f06f 041b 	mvn.w	r4, #27
   1cd2c:	e7d4      	b.n	1ccd8 <conn_auto_initiate+0x5c>
   1cd2e:	bf00      	nop
   1cd30:	20008000 	.word	0x20008000
   1cd34:	00042680 	.word	0x00042680
   1cd38:	0003f3d0 	.word	0x0003f3d0

0001cd3c <bt_hci_le_rand>:
{
   1cd3c:	b570      	push	{r4, r5, r6, lr}
   1cd3e:	b082      	sub	sp, #8
   1cd40:	4606      	mov	r6, r0
   1cd42:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1cd44:	4b12      	ldr	r3, [pc, #72]	; (1cd90 <bt_hci_le_rand+0x54>)
   1cd46:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   1cd4a:	2b00      	cmp	r3, #0
   1cd4c:	da1d      	bge.n	1cd8a <bt_hci_le_rand+0x4e>
	while (len > 0) {
   1cd4e:	b1c4      	cbz	r4, 1cd82 <bt_hci_le_rand+0x46>
		count = MIN(len, sizeof(rp->rand));
   1cd50:	4625      	mov	r5, r4
   1cd52:	2c08      	cmp	r4, #8
   1cd54:	bf28      	it	cs
   1cd56:	2508      	movcs	r5, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1cd58:	aa01      	add	r2, sp, #4
   1cd5a:	2100      	movs	r1, #0
   1cd5c:	f242 0018 	movw	r0, #8216	; 0x2018
   1cd60:	f7ff fbf6 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1cd64:	4603      	mov	r3, r0
   1cd66:	b968      	cbnz	r0, 1cd84 <bt_hci_le_rand+0x48>
		rp = (void *)rsp->data;
   1cd68:	9b01      	ldr	r3, [sp, #4]
   1cd6a:	68d9      	ldr	r1, [r3, #12]
		memcpy(buffer, rp->rand, count);
   1cd6c:	462a      	mov	r2, r5
   1cd6e:	3101      	adds	r1, #1
   1cd70:	4630      	mov	r0, r6
   1cd72:	f01b fb42 	bl	383fa <memcpy>
		net_buf_unref(rsp);
   1cd76:	9801      	ldr	r0, [sp, #4]
   1cd78:	f00c fc94 	bl	296a4 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   1cd7c:	442e      	add	r6, r5
		len -= count;
   1cd7e:	1b64      	subs	r4, r4, r5
   1cd80:	e7e5      	b.n	1cd4e <bt_hci_le_rand+0x12>
	return 0;
   1cd82:	2300      	movs	r3, #0
}
   1cd84:	4618      	mov	r0, r3
   1cd86:	b002      	add	sp, #8
   1cd88:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOTSUP;
   1cd8a:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1cd8e:	e7f9      	b.n	1cd84 <bt_hci_le_rand+0x48>
   1cd90:	20008000 	.word	0x20008000

0001cd94 <le_phy_update_complete>:
{
   1cd94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd96:	b083      	sub	sp, #12
   1cd98:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   1cd9a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1cd9c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1cda0:	4630      	mov	r0, r6
   1cda2:	f003 fabb 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1cda6:	b198      	cbz	r0, 1cdd0 <le_phy_update_complete+0x3c>
   1cda8:	4604      	mov	r4, r0
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
   1cdaa:	78e8      	ldrb	r0, [r5, #3]
   1cdac:	f01b fd1f 	bl	387ee <bt_get_phy>
   1cdb0:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
   1cdb4:	7928      	ldrb	r0, [r5, #4]
   1cdb6:	f01b fd1a 	bl	387ee <bt_get_phy>
   1cdba:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
	notify_le_phy_updated(conn);
   1cdbe:	4620      	mov	r0, r4
   1cdc0:	f003 fd60 	bl	20884 <notify_le_phy_updated>
	bt_conn_unref(conn);
   1cdc4:	4620      	mov	r0, r4
   1cdc6:	f003 fa77 	bl	202b8 <bt_conn_unref>
}
   1cdca:	370c      	adds	r7, #12
   1cdcc:	46bd      	mov	sp, r7
   1cdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1cdd0:	466d      	mov	r5, sp
   1cdd2:	b088      	sub	sp, #32
   1cdd4:	466b      	mov	r3, sp
   1cdd6:	f113 0210 	adds.w	r2, r3, #16
   1cdda:	d02f      	beq.n	1ce3c <le_phy_update_complete+0xa8>
   1cddc:	210c      	movs	r1, #12
   1cdde:	b13a      	cbz	r2, 1cdf0 <le_phy_update_complete+0x5c>
   1cde0:	4608      	mov	r0, r1
   1cde2:	2904      	cmp	r1, #4
   1cde4:	dd01      	ble.n	1cdea <le_phy_update_complete+0x56>
   1cde6:	4c18      	ldr	r4, [pc, #96]	; (1ce48 <le_phy_update_complete+0xb4>)
   1cde8:	615c      	str	r4, [r3, #20]
   1cdea:	2808      	cmp	r0, #8
   1cdec:	dd00      	ble.n	1cdf0 <le_phy_update_complete+0x5c>
   1cdee:	619e      	str	r6, [r3, #24]
   1cdf0:	290b      	cmp	r1, #11
   1cdf2:	dd26      	ble.n	1ce42 <le_phy_update_complete+0xae>
   1cdf4:	240c      	movs	r4, #12
   1cdf6:	b13a      	cbz	r2, 1ce08 <le_phy_update_complete+0x74>
   1cdf8:	2103      	movs	r1, #3
   1cdfa:	7139      	strb	r1, [r7, #4]
   1cdfc:	2100      	movs	r1, #0
   1cdfe:	7179      	strb	r1, [r7, #5]
   1ce00:	71b9      	strb	r1, [r7, #6]
   1ce02:	71f9      	strb	r1, [r7, #7]
   1ce04:	6878      	ldr	r0, [r7, #4]
   1ce06:	6118      	str	r0, [r3, #16]
   1ce08:	2100      	movs	r1, #0
   1ce0a:	f36f 0100 	bfc	r1, #0, #1
   1ce0e:	f36f 0141 	bfc	r1, #1, #1
   1ce12:	f36f 0182 	bfc	r1, #2, #1
   1ce16:	f36f 01c5 	bfc	r1, #3, #3
   1ce1a:	2301      	movs	r3, #1
   1ce1c:	f363 1188 	bfi	r1, r3, #6, #3
   1ce20:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1ce24:	f363 2152 	bfi	r1, r3, #9, #10
   1ce28:	f36f 41de 	bfc	r1, #19, #12
   1ce2c:	f36f 71df 	bfc	r1, #31, #1
   1ce30:	2300      	movs	r3, #0
   1ce32:	4806      	ldr	r0, [pc, #24]	; (1ce4c <le_phy_update_complete+0xb8>)
   1ce34:	f7f9 fd8a 	bl	1694c <z_impl_z_log_msg_static_create>
   1ce38:	46ad      	mov	sp, r5
		return;
   1ce3a:	e7c6      	b.n	1cdca <le_phy_update_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1ce3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ce40:	e7cd      	b.n	1cdde <le_phy_update_complete+0x4a>
   1ce42:	f06f 041b 	mvn.w	r4, #27
   1ce46:	e7d6      	b.n	1cdf6 <le_phy_update_complete+0x62>
   1ce48:	00042348 	.word	0x00042348
   1ce4c:	0003f3d0 	.word	0x0003f3d0

0001ce50 <bt_hci_le_enh_conn_complete>:
{
   1ce50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ce54:	b087      	sub	sp, #28
   1ce56:	af00      	add	r7, sp, #0
   1ce58:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1ce5a:	f8b0 8001 	ldrh.w	r8, [r0, #1]
   1ce5e:	fa1f f988 	uxth.w	r9, r8
	bool is_disconnected = conn_handle_is_disconnected(handle);
   1ce62:	4648      	mov	r0, r9
   1ce64:	f7fe faae 	bl	1b3c4 <conn_handle_is_disconnected>
   1ce68:	4606      	mov	r6, r0
	bt_id_pending_keys_update();
   1ce6a:	f001 faaf 	bl	1e3cc <bt_id_pending_keys_update>
	if (evt->status) {
   1ce6e:	7820      	ldrb	r0, [r4, #0]
   1ce70:	2800      	cmp	r0, #0
   1ce72:	d040      	beq.n	1cef6 <bt_hci_le_enh_conn_complete+0xa6>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1ce74:	283c      	cmp	r0, #60	; 0x3c
   1ce76:	d035      	beq.n	1cee4 <bt_hci_le_enh_conn_complete+0x94>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1ce78:	466d      	mov	r5, sp
   1ce7a:	b088      	sub	sp, #32
   1ce7c:	466b      	mov	r3, sp
   1ce7e:	f113 0210 	adds.w	r2, r3, #16
   1ce82:	d032      	beq.n	1ceea <bt_hci_le_enh_conn_complete+0x9a>
   1ce84:	210c      	movs	r1, #12
   1ce86:	b13a      	cbz	r2, 1ce98 <bt_hci_le_enh_conn_complete+0x48>
   1ce88:	460c      	mov	r4, r1
   1ce8a:	2904      	cmp	r1, #4
   1ce8c:	dd01      	ble.n	1ce92 <bt_hci_le_enh_conn_complete+0x42>
   1ce8e:	4e9b      	ldr	r6, [pc, #620]	; (1d0fc <bt_hci_le_enh_conn_complete+0x2ac>)
   1ce90:	615e      	str	r6, [r3, #20]
   1ce92:	2c08      	cmp	r4, #8
   1ce94:	dd00      	ble.n	1ce98 <bt_hci_le_enh_conn_complete+0x48>
   1ce96:	6198      	str	r0, [r3, #24]
   1ce98:	290b      	cmp	r1, #11
   1ce9a:	dd29      	ble.n	1cef0 <bt_hci_le_enh_conn_complete+0xa0>
   1ce9c:	240c      	movs	r4, #12
   1ce9e:	b13a      	cbz	r2, 1ceb0 <bt_hci_le_enh_conn_complete+0x60>
   1cea0:	2103      	movs	r1, #3
   1cea2:	7139      	strb	r1, [r7, #4]
   1cea4:	2100      	movs	r1, #0
   1cea6:	7179      	strb	r1, [r7, #5]
   1cea8:	71b9      	strb	r1, [r7, #6]
   1ceaa:	71f9      	strb	r1, [r7, #7]
   1ceac:	6878      	ldr	r0, [r7, #4]
   1ceae:	6118      	str	r0, [r3, #16]
   1ceb0:	2100      	movs	r1, #0
   1ceb2:	f36f 0100 	bfc	r1, #0, #1
   1ceb6:	f36f 0141 	bfc	r1, #1, #1
   1ceba:	f36f 0182 	bfc	r1, #2, #1
   1cebe:	f36f 01c5 	bfc	r1, #3, #3
   1cec2:	2302      	movs	r3, #2
   1cec4:	f363 1188 	bfi	r1, r3, #6, #3
   1cec8:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   1cecc:	f364 2152 	bfi	r1, r4, #9, #10
   1ced0:	f36f 41de 	bfc	r1, #19, #12
   1ced4:	f36f 71df 	bfc	r1, #31, #1
   1ced8:	2300      	movs	r3, #0
   1ceda:	4889      	ldr	r0, [pc, #548]	; (1d100 <bt_hci_le_enh_conn_complete+0x2b0>)
   1cedc:	f7f9 fd36 	bl	1694c <z_impl_z_log_msg_static_create>
   1cee0:	46ad      	mov	sp, r5
		return;
   1cee2:	e066      	b.n	1cfb2 <bt_hci_le_enh_conn_complete+0x162>
			le_conn_complete_adv_timeout();
   1cee4:	f7fe fbce 	bl	1b684 <le_conn_complete_adv_timeout>
			return;
   1cee8:	e063      	b.n	1cfb2 <bt_hci_le_enh_conn_complete+0x162>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1ceea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ceee:	e7ca      	b.n	1ce86 <bt_hci_le_enh_conn_complete+0x36>
   1cef0:	f06f 041b 	mvn.w	r4, #27
   1cef4:	e7d3      	b.n	1ce9e <bt_hci_le_enh_conn_complete+0x4e>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1cef6:	7923      	ldrb	r3, [r4, #4]
   1cef8:	3b02      	subs	r3, #2
   1cefa:	b2db      	uxtb	r3, r3
   1cefc:	2b01      	cmp	r3, #1
   1cefe:	d95c      	bls.n	1cfba <bt_hci_le_enh_conn_complete+0x16a>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1cf00:	78e3      	ldrb	r3, [r4, #3]
   1cf02:	2b01      	cmp	r3, #1
   1cf04:	d06c      	beq.n	1cfe0 <bt_hci_le_enh_conn_complete+0x190>
				bt_lookup_id_addr(id, &evt->peer_addr));
   1cf06:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   1cf08:	4629      	mov	r1, r5
   1cf0a:	f01b fdf6 	bl	38afa <bt_lookup_id_addr>
   1cf0e:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   1cf10:	2207      	movs	r2, #7
   1cf12:	f107 0008 	add.w	r0, r7, #8
   1cf16:	f01b fa70 	bl	383fa <memcpy>
   1cf1a:	2207      	movs	r2, #7
   1cf1c:	4629      	mov	r1, r5
   1cf1e:	f107 0010 	add.w	r0, r7, #16
   1cf22:	f01b fa6a 	bl	383fa <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   1cf26:	f107 0108 	add.w	r1, r7, #8
   1cf2a:	78e0      	ldrb	r0, [r4, #3]
   1cf2c:	f7fe fb90 	bl	1b650 <find_pending_connect>
   1cf30:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   1cf32:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1cf34:	2b01      	cmp	r3, #1
   1cf36:	d057      	beq.n	1cfe8 <bt_hci_le_enh_conn_complete+0x198>
	if (!conn) {
   1cf38:	2d00      	cmp	r5, #0
   1cf3a:	d064      	beq.n	1d006 <bt_hci_le_enh_conn_complete+0x1b6>
	conn->handle = handle;
   1cf3c:	4628      	mov	r0, r5
   1cf3e:	f820 8b90 	strh.w	r8, [r0], #144
   1cf42:	2207      	movs	r2, #7
   1cf44:	f107 0108 	add.w	r1, r7, #8
   1cf48:	f01b fa57 	bl	383fa <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1cf4c:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1cf50:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1cf54:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   1cf58:	f8a5 30ac 	strh.w	r3, [r5, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1cf5c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   1cf60:	f8a5 30ae 	strh.w	r3, [r5, #174]	; 0xae
	conn->role = evt->role;
   1cf64:	78e3      	ldrb	r3, [r4, #3]
   1cf66:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   1cf68:	2200      	movs	r2, #0
   1cf6a:	732a      	strb	r2, [r5, #12]
	conn->le.data_len.tx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   1cf6c:	211b      	movs	r1, #27
   1cf6e:	f8a5 10c6 	strh.w	r1, [r5, #198]	; 0xc6
	conn->le.data_len.tx_max_time = BT_GAP_DATA_TIME_DEFAULT;
   1cf72:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1cf76:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
	conn->le.data_len.rx_max_len = BT_GAP_DATA_LEN_DEFAULT;
   1cf7a:	f8a5 10ca 	strh.w	r1, [r5, #202]	; 0xca
	conn->le.data_len.rx_max_time = BT_GAP_DATA_TIME_DEFAULT;
   1cf7e:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
   1cf82:	2201      	movs	r2, #1
   1cf84:	f885 20c4 	strb.w	r2, [r5, #196]	; 0xc4
	conn->le.phy.rx_phy = BT_GAP_LE_PHY_1M;
   1cf88:	f885 20c5 	strb.w	r2, [r5, #197]	; 0xc5
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1cf8c:	4293      	cmp	r3, r2
   1cf8e:	f000 8094 	beq.w	1d0ba <bt_hci_le_enh_conn_complete+0x26a>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1cf92:	2107      	movs	r1, #7
   1cf94:	4628      	mov	r0, r5
   1cf96:	f003 f9cb 	bl	20330 <bt_conn_set_state>
	if (is_disconnected) {
   1cf9a:	2e00      	cmp	r6, #0
   1cf9c:	f040 80a9 	bne.w	1d0f2 <bt_hci_le_enh_conn_complete+0x2a2>
	bt_conn_connected(conn);
   1cfa0:	4628      	mov	r0, r5
   1cfa2:	f01c f995 	bl	392d0 <bt_conn_connected>
	conn_auto_initiate(conn);
   1cfa6:	4628      	mov	r0, r5
   1cfa8:	f7ff fe68 	bl	1cc7c <conn_auto_initiate>
	bt_conn_unref(conn);
   1cfac:	4628      	mov	r0, r5
   1cfae:	f003 f983 	bl	202b8 <bt_conn_unref>
}
   1cfb2:	371c      	adds	r7, #28
   1cfb4:	46bd      	mov	sp, r7
   1cfb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1cfba:	2207      	movs	r2, #7
   1cfbc:	1d21      	adds	r1, r4, #4
   1cfbe:	f107 0008 	add.w	r0, r7, #8
   1cfc2:	f01b fa1a 	bl	383fa <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1cfc6:	7a3b      	ldrb	r3, [r7, #8]
   1cfc8:	3b02      	subs	r3, #2
   1cfca:	723b      	strb	r3, [r7, #8]
	memcpy(dst, src, sizeof(*dst));
   1cfcc:	2206      	movs	r2, #6
   1cfce:	f104 0111 	add.w	r1, r4, #17
   1cfd2:	f107 0011 	add.w	r0, r7, #17
   1cfd6:	f01b fa10 	bl	383fa <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1cfda:	2301      	movs	r3, #1
   1cfdc:	743b      	strb	r3, [r7, #16]
   1cfde:	e7a2      	b.n	1cf26 <bt_hci_le_enh_conn_complete+0xd6>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1cfe0:	4b48      	ldr	r3, [pc, #288]	; (1d104 <bt_hci_le_enh_conn_complete+0x2b4>)
   1cfe2:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   1cfe6:	e78e      	b.n	1cf06 <bt_hci_le_enh_conn_complete+0xb6>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1cfe8:	f001 ffd4 	bl	1ef94 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   1cfec:	f100 0310 	add.w	r3, r0, #16
   1cff0:	e8d3 1fef 	ldaex	r1, [r3]
   1cff4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
   1cff8:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1cffc:	2a00      	cmp	r2, #0
   1cffe:	d1f7      	bne.n	1cff0 <bt_hci_le_enh_conn_complete+0x1a0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   1d000:	f01b ff4f 	bl	38ea2 <bt_le_lim_adv_cancel_timeout>
   1d004:	e798      	b.n	1cf38 <bt_hci_le_enh_conn_complete+0xe8>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1d006:	1d20      	adds	r0, r4, #4
   1d008:	f7fd fe6e 	bl	1ace8 <bt_addr_le_str>
   1d00c:	466d      	mov	r5, sp
   1d00e:	2300      	movs	r3, #0
   1d010:	713b      	strb	r3, [r7, #4]
   1d012:	2302      	movs	r3, #2
   1d014:	717b      	strb	r3, [r7, #5]
   1d016:	b088      	sub	sp, #32
   1d018:	466c      	mov	r4, sp
   1d01a:	f114 0210 	adds.w	r2, r4, #16
   1d01e:	d011      	beq.n	1d044 <bt_hci_le_enh_conn_complete+0x1f4>
   1d020:	260e      	movs	r6, #14
   1d022:	b11a      	cbz	r2, 1d02c <bt_hci_le_enh_conn_complete+0x1dc>
   1d024:	2e04      	cmp	r6, #4
   1d026:	dd01      	ble.n	1d02c <bt_hci_le_enh_conn_complete+0x1dc>
   1d028:	4b37      	ldr	r3, [pc, #220]	; (1d108 <bt_hci_le_enh_conn_complete+0x2b8>)
   1d02a:	6163      	str	r3, [r4, #20]
   1d02c:	2300      	movs	r3, #0
   1d02e:	703b      	strb	r3, [r7, #0]
   1d030:	2302      	movs	r3, #2
   1d032:	707b      	strb	r3, [r7, #1]
   1d034:	b19a      	cbz	r2, 1d05e <bt_hci_le_enh_conn_complete+0x20e>
   1d036:	2e08      	cmp	r6, #8
   1d038:	dd00      	ble.n	1d03c <bt_hci_le_enh_conn_complete+0x1ec>
   1d03a:	61a0      	str	r0, [r4, #24]
   1d03c:	f104 031c 	add.w	r3, r4, #28
   1d040:	2100      	movs	r1, #0
   1d042:	e00a      	b.n	1d05a <bt_hci_le_enh_conn_complete+0x20a>
   1d044:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1d048:	e7eb      	b.n	1d022 <bt_hci_le_enh_conn_complete+0x1d2>
   1d04a:	f101 0018 	add.w	r0, r1, #24
   1d04e:	4438      	add	r0, r7
   1d050:	f810 0c18 	ldrb.w	r0, [r0, #-24]
   1d054:	f803 0b01 	strb.w	r0, [r3], #1
   1d058:	3101      	adds	r1, #1
   1d05a:	2901      	cmp	r1, #1
   1d05c:	d9f5      	bls.n	1d04a <bt_hci_le_enh_conn_complete+0x1fa>
   1d05e:	2e0d      	cmp	r6, #13
   1d060:	dd28      	ble.n	1d0b4 <bt_hci_le_enh_conn_complete+0x264>
   1d062:	230e      	movs	r3, #14
   1d064:	b142      	cbz	r2, 1d078 <bt_hci_le_enh_conn_complete+0x228>
   1d066:	2103      	movs	r1, #3
   1d068:	7139      	strb	r1, [r7, #4]
   1d06a:	2100      	movs	r1, #0
   1d06c:	7179      	strb	r1, [r7, #5]
   1d06e:	71b9      	strb	r1, [r7, #6]
   1d070:	2101      	movs	r1, #1
   1d072:	71f9      	strb	r1, [r7, #7]
   1d074:	6878      	ldr	r0, [r7, #4]
   1d076:	6120      	str	r0, [r4, #16]
   1d078:	2100      	movs	r1, #0
   1d07a:	f36f 0100 	bfc	r1, #0, #1
   1d07e:	f36f 0141 	bfc	r1, #1, #1
   1d082:	f36f 0182 	bfc	r1, #2, #1
   1d086:	f36f 01c5 	bfc	r1, #3, #3
   1d08a:	2001      	movs	r0, #1
   1d08c:	f360 1188 	bfi	r1, r0, #6, #3
   1d090:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1d094:	f363 2152 	bfi	r1, r3, #9, #10
   1d098:	f36f 41de 	bfc	r1, #19, #12
   1d09c:	f36f 71df 	bfc	r1, #31, #1
   1d0a0:	2300      	movs	r3, #0
   1d0a2:	4817      	ldr	r0, [pc, #92]	; (1d100 <bt_hci_le_enh_conn_complete+0x2b0>)
   1d0a4:	f7f9 fc52 	bl	1694c <z_impl_z_log_msg_static_create>
   1d0a8:	46ad      	mov	sp, r5
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   1d0aa:	211f      	movs	r1, #31
   1d0ac:	4648      	mov	r0, r9
   1d0ae:	f01b fba9 	bl	38804 <bt_hci_disconnect>
		return;
   1d0b2:	e77e      	b.n	1cfb2 <bt_hci_le_enh_conn_complete+0x162>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   1d0b4:	f06f 031b 	mvn.w	r3, #27
   1d0b8:	e7d4      	b.n	1d064 <bt_hci_le_enh_conn_complete+0x214>
	memcpy(dst, src, sizeof(*dst));
   1d0ba:	2207      	movs	r2, #7
   1d0bc:	f107 0110 	add.w	r1, r7, #16
   1d0c0:	f105 0097 	add.w	r0, r5, #151	; 0x97
   1d0c4:	f01b f999 	bl	383fa <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1d0c8:	f001 ff64 	bl	1ef94 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1d0cc:	7a29      	ldrb	r1, [r5, #8]
   1d0ce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1d0d2:	4c0c      	ldr	r4, [pc, #48]	; (1d104 <bt_hci_le_enh_conn_complete+0x2b4>)
   1d0d4:	2207      	movs	r2, #7
   1d0d6:	4421      	add	r1, r4
   1d0d8:	f105 009e 	add.w	r0, r5, #158	; 0x9e
   1d0dc:	f01b f98d 	bl	383fa <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   1d0e0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
   1d0e4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d0e8:	f43f af53 	beq.w	1cf92 <bt_hci_le_enh_conn_complete+0x142>
			bt_le_adv_resume();
   1d0ec:	f01b fede 	bl	38eac <bt_le_adv_resume>
   1d0f0:	e74f      	b.n	1cf92 <bt_hci_le_enh_conn_complete+0x142>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1d0f2:	2101      	movs	r1, #1
   1d0f4:	4628      	mov	r0, r5
   1d0f6:	f003 f91b 	bl	20330 <bt_conn_set_state>
   1d0fa:	e751      	b.n	1cfa0 <bt_hci_le_enh_conn_complete+0x150>
   1d0fc:	000426a4 	.word	0x000426a4
   1d100:	0003f3d0 	.word	0x0003f3d0
   1d104:	20008000 	.word	0x20008000
   1d108:	000426c0 	.word	0x000426c0

0001d10c <le_legacy_conn_complete>:
{
   1d10c:	b510      	push	{r4, lr}
   1d10e:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1d110:	68c1      	ldr	r1, [r0, #12]
	enh.status         = evt->status;
   1d112:	780b      	ldrb	r3, [r1, #0]
   1d114:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1d118:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1d11c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1d120:	78cb      	ldrb	r3, [r1, #3]
   1d122:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1d126:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1d12a:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1d12e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1d132:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1d136:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1d13a:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1d13e:	7c4b      	ldrb	r3, [r1, #17]
   1d140:	f88d 301d 	strb.w	r3, [sp, #29]
   1d144:	2207      	movs	r2, #7
   1d146:	3104      	adds	r1, #4
   1d148:	a801      	add	r0, sp, #4
   1d14a:	f01b f956 	bl	383fa <memcpy>
	memcpy(dst, src, sizeof(*dst));
   1d14e:	4c09      	ldr	r4, [pc, #36]	; (1d174 <le_legacy_conn_complete+0x68>)
   1d150:	2206      	movs	r2, #6
   1d152:	4621      	mov	r1, r4
   1d154:	f10d 000b 	add.w	r0, sp, #11
   1d158:	f01b f94f 	bl	383fa <memcpy>
   1d15c:	2206      	movs	r2, #6
   1d15e:	4621      	mov	r1, r4
   1d160:	f10d 0011 	add.w	r0, sp, #17
   1d164:	f01b f949 	bl	383fa <memcpy>
	enh_conn_complete(&enh);
   1d168:	4668      	mov	r0, sp
   1d16a:	f01b fb8a 	bl	38882 <enh_conn_complete>
}
   1d16e:	b008      	add	sp, #32
   1d170:	bd10      	pop	{r4, pc}
   1d172:	bf00      	nop
   1d174:	0004204c 	.word	0x0004204c

0001d178 <hci_encrypt_key_refresh_complete>:
{
   1d178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d17a:	b089      	sub	sp, #36	; 0x24
   1d17c:	af00      	add	r7, sp, #0
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
   1d17e:	68c3      	ldr	r3, [r0, #12]
	uint8_t status = evt->status;
   1d180:	781c      	ldrb	r4, [r3, #0]
	handle = sys_le16_to_cpu(evt->handle);
   1d182:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1d186:	4630      	mov	r0, r6
   1d188:	f003 f8c8 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1d18c:	b1a8      	cbz	r0, 1d1ba <hci_encrypt_key_refresh_complete+0x42>
   1d18e:	4605      	mov	r5, r0
	if (status) {
   1d190:	2c00      	cmp	r4, #0
   1d192:	d151      	bne.n	1d238 <hci_encrypt_key_refresh_complete+0xc0>
	if (conn->type == BT_CONN_TYPE_LE) {
   1d194:	7883      	ldrb	r3, [r0, #2]
   1d196:	2b01      	cmp	r3, #1
   1d198:	d05a      	beq.n	1d250 <hci_encrypt_key_refresh_complete+0xd8>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1d19a:	4620      	mov	r0, r4
   1d19c:	f01b fba2 	bl	388e4 <bt_security_err_get>
   1d1a0:	4602      	mov	r2, r0
   1d1a2:	4621      	mov	r1, r4
   1d1a4:	4628      	mov	r0, r5
   1d1a6:	f003 fc4b 	bl	20a40 <bt_conn_security_changed>
	if (status) {
   1d1aa:	2c00      	cmp	r4, #0
   1d1ac:	d159      	bne.n	1d262 <hci_encrypt_key_refresh_complete+0xea>
	bt_conn_unref(conn);
   1d1ae:	4628      	mov	r0, r5
   1d1b0:	f003 f882 	bl	202b8 <bt_conn_unref>
}
   1d1b4:	3724      	adds	r7, #36	; 0x24
   1d1b6:	46bd      	mov	sp, r7
   1d1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1d1ba:	466d      	mov	r5, sp
   1d1bc:	b088      	sub	sp, #32
   1d1be:	466b      	mov	r3, sp
   1d1c0:	f113 0210 	adds.w	r2, r3, #16
   1d1c4:	d00d      	beq.n	1d1e2 <hci_encrypt_key_refresh_complete+0x6a>
   1d1c6:	210c      	movs	r1, #12
   1d1c8:	b13a      	cbz	r2, 1d1da <hci_encrypt_key_refresh_complete+0x62>
   1d1ca:	4608      	mov	r0, r1
   1d1cc:	2904      	cmp	r1, #4
   1d1ce:	dd01      	ble.n	1d1d4 <hci_encrypt_key_refresh_complete+0x5c>
   1d1d0:	4c37      	ldr	r4, [pc, #220]	; (1d2b0 <hci_encrypt_key_refresh_complete+0x138>)
   1d1d2:	615c      	str	r4, [r3, #20]
   1d1d4:	2808      	cmp	r0, #8
   1d1d6:	dd07      	ble.n	1d1e8 <hci_encrypt_key_refresh_complete+0x70>
   1d1d8:	619e      	str	r6, [r3, #24]
   1d1da:	290b      	cmp	r1, #11
   1d1dc:	dd29      	ble.n	1d232 <hci_encrypt_key_refresh_complete+0xba>
   1d1de:	240c      	movs	r4, #12
   1d1e0:	e004      	b.n	1d1ec <hci_encrypt_key_refresh_complete+0x74>
   1d1e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d1e6:	e7ef      	b.n	1d1c8 <hci_encrypt_key_refresh_complete+0x50>
   1d1e8:	f06f 041b 	mvn.w	r4, #27
   1d1ec:	b13a      	cbz	r2, 1d1fe <hci_encrypt_key_refresh_complete+0x86>
   1d1ee:	2103      	movs	r1, #3
   1d1f0:	7139      	strb	r1, [r7, #4]
   1d1f2:	2100      	movs	r1, #0
   1d1f4:	7179      	strb	r1, [r7, #5]
   1d1f6:	71b9      	strb	r1, [r7, #6]
   1d1f8:	71f9      	strb	r1, [r7, #7]
   1d1fa:	6878      	ldr	r0, [r7, #4]
   1d1fc:	6118      	str	r0, [r3, #16]
   1d1fe:	2100      	movs	r1, #0
   1d200:	f36f 0100 	bfc	r1, #0, #1
   1d204:	f36f 0141 	bfc	r1, #1, #1
   1d208:	f36f 0182 	bfc	r1, #2, #1
   1d20c:	f36f 01c5 	bfc	r1, #3, #3
   1d210:	2301      	movs	r3, #1
   1d212:	f363 1188 	bfi	r1, r3, #6, #3
   1d216:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1d21a:	f363 2152 	bfi	r1, r3, #9, #10
   1d21e:	f36f 41de 	bfc	r1, #19, #12
   1d222:	f36f 71df 	bfc	r1, #31, #1
   1d226:	2300      	movs	r3, #0
   1d228:	4822      	ldr	r0, [pc, #136]	; (1d2b4 <hci_encrypt_key_refresh_complete+0x13c>)
   1d22a:	f7f9 fb8f 	bl	1694c <z_impl_z_log_msg_static_create>
   1d22e:	46ad      	mov	sp, r5
		return;
   1d230:	e7c0      	b.n	1d1b4 <hci_encrypt_key_refresh_complete+0x3c>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1d232:	f06f 041b 	mvn.w	r4, #27
   1d236:	e7d9      	b.n	1d1ec <hci_encrypt_key_refresh_complete+0x74>
		bt_conn_security_changed(conn, status,
   1d238:	4620      	mov	r0, r4
   1d23a:	f01b fb53 	bl	388e4 <bt_security_err_get>
   1d23e:	4602      	mov	r2, r0
   1d240:	4621      	mov	r1, r4
   1d242:	4628      	mov	r0, r5
   1d244:	f003 fbfc 	bl	20a40 <bt_conn_security_changed>
		bt_conn_unref(conn);
   1d248:	4628      	mov	r0, r5
   1d24a:	f003 f835 	bl	202b8 <bt_conn_unref>
		return;
   1d24e:	e7b1      	b.n	1d1b4 <hci_encrypt_key_refresh_complete+0x3c>
		bt_smp_update_keys(conn);
   1d250:	f00b f902 	bl	28458 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
   1d254:	4628      	mov	r0, r5
   1d256:	f01b fa37 	bl	386c8 <update_sec_level>
   1d25a:	2800      	cmp	r0, #0
   1d25c:	d19d      	bne.n	1d19a <hci_encrypt_key_refresh_complete+0x22>
			status = BT_HCI_ERR_AUTH_FAIL;
   1d25e:	2405      	movs	r4, #5
   1d260:	e79b      	b.n	1d19a <hci_encrypt_key_refresh_complete+0x22>
		LOG_ERR("Failed to set required security level");
   1d262:	4b15      	ldr	r3, [pc, #84]	; (1d2b8 <hci_encrypt_key_refresh_complete+0x140>)
   1d264:	61fb      	str	r3, [r7, #28]
   1d266:	2302      	movs	r3, #2
   1d268:	713b      	strb	r3, [r7, #4]
   1d26a:	2300      	movs	r3, #0
   1d26c:	717b      	strb	r3, [r7, #5]
   1d26e:	71bb      	strb	r3, [r7, #6]
   1d270:	71fb      	strb	r3, [r7, #7]
   1d272:	687a      	ldr	r2, [r7, #4]
   1d274:	61ba      	str	r2, [r7, #24]
   1d276:	4619      	mov	r1, r3
   1d278:	f363 0100 	bfi	r1, r3, #0, #1
   1d27c:	f363 0141 	bfi	r1, r3, #1, #1
   1d280:	f363 0182 	bfi	r1, r3, #2, #1
   1d284:	f363 01c5 	bfi	r1, r3, #3, #3
   1d288:	2201      	movs	r2, #1
   1d28a:	f362 1188 	bfi	r1, r2, #6, #3
   1d28e:	2208      	movs	r2, #8
   1d290:	f362 2152 	bfi	r1, r2, #9, #10
   1d294:	f363 41de 	bfi	r1, r3, #19, #12
   1d298:	f363 71df 	bfi	r1, r3, #31, #1
   1d29c:	f107 0218 	add.w	r2, r7, #24
   1d2a0:	4804      	ldr	r0, [pc, #16]	; (1d2b4 <hci_encrypt_key_refresh_complete+0x13c>)
   1d2a2:	f7f9 fb53 	bl	1694c <z_impl_z_log_msg_static_create>
		bt_conn_disconnect(conn, status);
   1d2a6:	4621      	mov	r1, r4
   1d2a8:	4628      	mov	r0, r5
   1d2aa:	f01c f819 	bl	392e0 <bt_conn_disconnect>
   1d2ae:	e77e      	b.n	1d1ae <hci_encrypt_key_refresh_complete+0x36>
   1d2b0:	00042320 	.word	0x00042320
   1d2b4:	0003f3d0 	.word	0x0003f3d0
   1d2b8:	000426dc 	.word	0x000426dc

0001d2bc <hci_encrypt_change>:
{
   1d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2c0:	b088      	sub	sp, #32
   1d2c2:	af00      	add	r7, sp, #0
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
   1d2c4:	68c6      	ldr	r6, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1d2c6:	f8b6 8001 	ldrh.w	r8, [r6, #1]
	uint8_t status = evt->status;
   1d2ca:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
   1d2cc:	4640      	mov	r0, r8
   1d2ce:	f003 f825 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1d2d2:	b1c0      	cbz	r0, 1d306 <hci_encrypt_change+0x4a>
   1d2d4:	4604      	mov	r4, r0
	if (status) {
   1d2d6:	2d00      	cmp	r5, #0
   1d2d8:	d155      	bne.n	1d386 <hci_encrypt_change+0xca>
	conn->encrypt = evt->encrypt;
   1d2da:	78f3      	ldrb	r3, [r6, #3]
   1d2dc:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
   1d2de:	7882      	ldrb	r2, [r0, #2]
   1d2e0:	2a01      	cmp	r2, #1
   1d2e2:	d05c      	beq.n	1d39e <hci_encrypt_change+0xe2>
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
   1d2e4:	4628      	mov	r0, r5
   1d2e6:	f01b fafd 	bl	388e4 <bt_security_err_get>
   1d2ea:	4602      	mov	r2, r0
   1d2ec:	4629      	mov	r1, r5
   1d2ee:	4620      	mov	r0, r4
   1d2f0:	f003 fba6 	bl	20a40 <bt_conn_security_changed>
	if (status) {
   1d2f4:	2d00      	cmp	r5, #0
   1d2f6:	d15d      	bne.n	1d3b4 <hci_encrypt_change+0xf8>
	bt_conn_unref(conn);
   1d2f8:	4620      	mov	r0, r4
   1d2fa:	f002 ffdd 	bl	202b8 <bt_conn_unref>
}
   1d2fe:	3720      	adds	r7, #32
   1d300:	46bd      	mov	sp, r7
   1d302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1d306:	466d      	mov	r5, sp
   1d308:	b088      	sub	sp, #32
   1d30a:	466b      	mov	r3, sp
   1d30c:	f113 0210 	adds.w	r2, r3, #16
   1d310:	d00e      	beq.n	1d330 <hci_encrypt_change+0x74>
   1d312:	210c      	movs	r1, #12
   1d314:	b142      	cbz	r2, 1d328 <hci_encrypt_change+0x6c>
   1d316:	4608      	mov	r0, r1
   1d318:	2904      	cmp	r1, #4
   1d31a:	dd01      	ble.n	1d320 <hci_encrypt_change+0x64>
   1d31c:	4c39      	ldr	r4, [pc, #228]	; (1d404 <hci_encrypt_change+0x148>)
   1d31e:	615c      	str	r4, [r3, #20]
   1d320:	2808      	cmp	r0, #8
   1d322:	dd08      	ble.n	1d336 <hci_encrypt_change+0x7a>
   1d324:	f8c3 8018 	str.w	r8, [r3, #24]
   1d328:	290b      	cmp	r1, #11
   1d32a:	dd29      	ble.n	1d380 <hci_encrypt_change+0xc4>
   1d32c:	240c      	movs	r4, #12
   1d32e:	e004      	b.n	1d33a <hci_encrypt_change+0x7e>
   1d330:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d334:	e7ee      	b.n	1d314 <hci_encrypt_change+0x58>
   1d336:	f06f 041b 	mvn.w	r4, #27
   1d33a:	b13a      	cbz	r2, 1d34c <hci_encrypt_change+0x90>
   1d33c:	2103      	movs	r1, #3
   1d33e:	7139      	strb	r1, [r7, #4]
   1d340:	2100      	movs	r1, #0
   1d342:	7179      	strb	r1, [r7, #5]
   1d344:	71b9      	strb	r1, [r7, #6]
   1d346:	71f9      	strb	r1, [r7, #7]
   1d348:	6878      	ldr	r0, [r7, #4]
   1d34a:	6118      	str	r0, [r3, #16]
   1d34c:	2100      	movs	r1, #0
   1d34e:	f36f 0100 	bfc	r1, #0, #1
   1d352:	f36f 0141 	bfc	r1, #1, #1
   1d356:	f36f 0182 	bfc	r1, #2, #1
   1d35a:	f36f 01c5 	bfc	r1, #3, #3
   1d35e:	2301      	movs	r3, #1
   1d360:	f363 1188 	bfi	r1, r3, #6, #3
   1d364:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1d368:	f363 2152 	bfi	r1, r3, #9, #10
   1d36c:	f36f 41de 	bfc	r1, #19, #12
   1d370:	f36f 71df 	bfc	r1, #31, #1
   1d374:	2300      	movs	r3, #0
   1d376:	4824      	ldr	r0, [pc, #144]	; (1d408 <hci_encrypt_change+0x14c>)
   1d378:	f7f9 fae8 	bl	1694c <z_impl_z_log_msg_static_create>
   1d37c:	46ad      	mov	sp, r5
		return;
   1d37e:	e7be      	b.n	1d2fe <hci_encrypt_change+0x42>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1d380:	f06f 041b 	mvn.w	r4, #27
   1d384:	e7d9      	b.n	1d33a <hci_encrypt_change+0x7e>
		bt_conn_security_changed(conn, status,
   1d386:	4628      	mov	r0, r5
   1d388:	f01b faac 	bl	388e4 <bt_security_err_get>
   1d38c:	4602      	mov	r2, r0
   1d38e:	4629      	mov	r1, r5
   1d390:	4620      	mov	r0, r4
   1d392:	f003 fb55 	bl	20a40 <bt_conn_security_changed>
		bt_conn_unref(conn);
   1d396:	4620      	mov	r0, r4
   1d398:	f002 ff8e 	bl	202b8 <bt_conn_unref>
		return;
   1d39c:	e7af      	b.n	1d2fe <hci_encrypt_change+0x42>
		if (conn->encrypt) {
   1d39e:	b933      	cbnz	r3, 1d3ae <hci_encrypt_change+0xf2>
		if (!update_sec_level(conn)) {
   1d3a0:	4620      	mov	r0, r4
   1d3a2:	f01b f991 	bl	386c8 <update_sec_level>
   1d3a6:	2800      	cmp	r0, #0
   1d3a8:	d19c      	bne.n	1d2e4 <hci_encrypt_change+0x28>
			status = BT_HCI_ERR_AUTH_FAIL;
   1d3aa:	2505      	movs	r5, #5
   1d3ac:	e79a      	b.n	1d2e4 <hci_encrypt_change+0x28>
			bt_smp_update_keys(conn);
   1d3ae:	f00b f853 	bl	28458 <bt_smp_update_keys>
   1d3b2:	e7f5      	b.n	1d3a0 <hci_encrypt_change+0xe4>
		LOG_ERR("Failed to set required security level");
   1d3b4:	4b15      	ldr	r3, [pc, #84]	; (1d40c <hci_encrypt_change+0x150>)
   1d3b6:	61fb      	str	r3, [r7, #28]
   1d3b8:	2302      	movs	r3, #2
   1d3ba:	713b      	strb	r3, [r7, #4]
   1d3bc:	2300      	movs	r3, #0
   1d3be:	717b      	strb	r3, [r7, #5]
   1d3c0:	71bb      	strb	r3, [r7, #6]
   1d3c2:	71fb      	strb	r3, [r7, #7]
   1d3c4:	687a      	ldr	r2, [r7, #4]
   1d3c6:	61ba      	str	r2, [r7, #24]
   1d3c8:	4619      	mov	r1, r3
   1d3ca:	f363 0100 	bfi	r1, r3, #0, #1
   1d3ce:	f363 0141 	bfi	r1, r3, #1, #1
   1d3d2:	f363 0182 	bfi	r1, r3, #2, #1
   1d3d6:	f363 01c5 	bfi	r1, r3, #3, #3
   1d3da:	2201      	movs	r2, #1
   1d3dc:	f362 1188 	bfi	r1, r2, #6, #3
   1d3e0:	2208      	movs	r2, #8
   1d3e2:	f362 2152 	bfi	r1, r2, #9, #10
   1d3e6:	f363 41de 	bfi	r1, r3, #19, #12
   1d3ea:	f363 71df 	bfi	r1, r3, #31, #1
   1d3ee:	f107 0218 	add.w	r2, r7, #24
   1d3f2:	4805      	ldr	r0, [pc, #20]	; (1d408 <hci_encrypt_change+0x14c>)
   1d3f4:	f7f9 faaa 	bl	1694c <z_impl_z_log_msg_static_create>
		bt_conn_disconnect(conn, status);
   1d3f8:	4629      	mov	r1, r5
   1d3fa:	4620      	mov	r0, r4
   1d3fc:	f01b ff70 	bl	392e0 <bt_conn_disconnect>
   1d400:	e77a      	b.n	1d2f8 <hci_encrypt_change+0x3c>
   1d402:	bf00      	nop
   1d404:	00042320 	.word	0x00042320
   1d408:	0003f3d0 	.word	0x0003f3d0
   1d40c:	000426dc 	.word	0x000426dc

0001d410 <bt_send>:
{
   1d410:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   1d412:	4b03      	ldr	r3, [pc, #12]	; (1d420 <bt_send+0x10>)
   1d414:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1d418:	695b      	ldr	r3, [r3, #20]
   1d41a:	4798      	blx	r3
}
   1d41c:	bd08      	pop	{r3, pc}
   1d41e:	bf00      	nop
   1d420:	20008000 	.word	0x20008000

0001d424 <bt_hci_cmd_send>:
{
   1d424:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d426:	b083      	sub	sp, #12
   1d428:	af00      	add	r7, sp, #0
   1d42a:	4604      	mov	r4, r0
	if (!buf) {
   1d42c:	460d      	mov	r5, r1
   1d42e:	b161      	cbz	r1, 1d44a <bt_hci_cmd_send+0x26>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1d430:	f640 4335 	movw	r3, #3125	; 0xc35
   1d434:	429c      	cmp	r4, r3
   1d436:	d010      	beq.n	1d45a <bt_hci_cmd_send+0x36>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1d438:	4629      	mov	r1, r5
   1d43a:	482c      	ldr	r0, [pc, #176]	; (1d4ec <bt_hci_cmd_send+0xc8>)
   1d43c:	f00c f90a 	bl	29654 <net_buf_put>
	return 0;
   1d440:	2400      	movs	r4, #0
}
   1d442:	4620      	mov	r0, r4
   1d444:	370c      	adds	r7, #12
   1d446:	46bd      	mov	sp, r7
   1d448:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1d44a:	f7ff f82f 	bl	1c4ac <bt_hci_cmd_create>
		if (!buf) {
   1d44e:	4605      	mov	r5, r0
   1d450:	2800      	cmp	r0, #0
   1d452:	d1ed      	bne.n	1d430 <bt_hci_cmd_send+0xc>
			return -ENOBUFS;
   1d454:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1d458:	e7f3      	b.n	1d442 <bt_hci_cmd_send+0x1e>
		err = bt_send(buf);
   1d45a:	4628      	mov	r0, r5
   1d45c:	f7ff ffd8 	bl	1d410 <bt_send>
		if (err) {
   1d460:	4604      	mov	r4, r0
   1d462:	2800      	cmp	r0, #0
   1d464:	d0ed      	beq.n	1d442 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1d466:	466e      	mov	r6, sp
   1d468:	b088      	sub	sp, #32
   1d46a:	466b      	mov	r3, sp
   1d46c:	f113 0210 	adds.w	r2, r3, #16
   1d470:	d035      	beq.n	1d4de <bt_hci_cmd_send+0xba>
   1d472:	210c      	movs	r1, #12
   1d474:	b14a      	cbz	r2, 1d48a <bt_hci_cmd_send+0x66>
   1d476:	4608      	mov	r0, r1
   1d478:	2904      	cmp	r1, #4
   1d47a:	dd03      	ble.n	1d484 <bt_hci_cmd_send+0x60>
   1d47c:	f8df c070 	ldr.w	ip, [pc, #112]	; 1d4f0 <bt_hci_cmd_send+0xcc>
   1d480:	f8c3 c014 	str.w	ip, [r3, #20]
   1d484:	2808      	cmp	r0, #8
   1d486:	dd00      	ble.n	1d48a <bt_hci_cmd_send+0x66>
   1d488:	619c      	str	r4, [r3, #24]
   1d48a:	290b      	cmp	r1, #11
   1d48c:	dd2a      	ble.n	1d4e4 <bt_hci_cmd_send+0xc0>
   1d48e:	f04f 0c0c 	mov.w	ip, #12
   1d492:	b13a      	cbz	r2, 1d4a4 <bt_hci_cmd_send+0x80>
   1d494:	2103      	movs	r1, #3
   1d496:	7139      	strb	r1, [r7, #4]
   1d498:	2100      	movs	r1, #0
   1d49a:	7179      	strb	r1, [r7, #5]
   1d49c:	71b9      	strb	r1, [r7, #6]
   1d49e:	71f9      	strb	r1, [r7, #7]
   1d4a0:	6878      	ldr	r0, [r7, #4]
   1d4a2:	6118      	str	r0, [r3, #16]
   1d4a4:	2100      	movs	r1, #0
   1d4a6:	f36f 0100 	bfc	r1, #0, #1
   1d4aa:	f36f 0141 	bfc	r1, #1, #1
   1d4ae:	f36f 0182 	bfc	r1, #2, #1
   1d4b2:	f36f 01c5 	bfc	r1, #3, #3
   1d4b6:	2301      	movs	r3, #1
   1d4b8:	f363 1188 	bfi	r1, r3, #6, #3
   1d4bc:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1d4c0:	f36c 2152 	bfi	r1, ip, #9, #10
   1d4c4:	f36f 41de 	bfc	r1, #19, #12
   1d4c8:	f36f 71df 	bfc	r1, #31, #1
   1d4cc:	2300      	movs	r3, #0
   1d4ce:	4809      	ldr	r0, [pc, #36]	; (1d4f4 <bt_hci_cmd_send+0xd0>)
   1d4d0:	f7f9 fa3c 	bl	1694c <z_impl_z_log_msg_static_create>
   1d4d4:	46b5      	mov	sp, r6
			net_buf_unref(buf);
   1d4d6:	4628      	mov	r0, r5
   1d4d8:	f00c f8e4 	bl	296a4 <net_buf_unref>
		return err;
   1d4dc:	e7b1      	b.n	1d442 <bt_hci_cmd_send+0x1e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1d4de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d4e2:	e7c7      	b.n	1d474 <bt_hci_cmd_send+0x50>
   1d4e4:	f06f 0c1b 	mvn.w	ip, #27
   1d4e8:	e7d3      	b.n	1d492 <bt_hci_cmd_send+0x6e>
   1d4ea:	bf00      	nop
   1d4ec:	20008144 	.word	0x20008144
   1d4f0:	00042704 	.word	0x00042704
   1d4f4:	0003f3d0 	.word	0x0003f3d0

0001d4f8 <bt_hci_host_num_completed_packets>:
{
   1d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4fa:	b08f      	sub	sp, #60	; 0x3c
   1d4fc:	af00      	add	r7, sp, #0
	uint16_t handle = acl(buf)->handle;
   1d4fe:	8b44      	ldrh	r4, [r0, #26]
	uint8_t index = acl(buf)->index;
   1d500:	7e46      	ldrb	r6, [r0, #25]
	net_buf_destroy(buf);
   1d502:	f01b f91e 	bl	38742 <net_buf_destroy>
	if (!BT_CMD_TEST(bt_dev.supported_commands, 10, 5)) {
   1d506:	4b5d      	ldr	r3, [pc, #372]	; (1d67c <bt_hci_host_num_completed_packets+0x184>)
   1d508:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   1d50c:	f013 0f20 	tst.w	r3, #32
   1d510:	d102      	bne.n	1d518 <bt_hci_host_num_completed_packets+0x20>
}
   1d512:	373c      	adds	r7, #60	; 0x3c
   1d514:	46bd      	mov	sp, r7
   1d516:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_index(index);
   1d518:	4630      	mov	r0, r6
   1d51a:	f003 fdb7 	bl	2108c <bt_conn_lookup_index>
	if (!conn) {
   1d51e:	4605      	mov	r5, r0
   1d520:	b328      	cbz	r0, 1d56e <bt_hci_host_num_completed_packets+0x76>
	if (conn->state != BT_CONN_CONNECTED &&
   1d522:	7b43      	ldrb	r3, [r0, #13]
   1d524:	3b07      	subs	r3, #7
   1d526:	b2db      	uxtb	r3, r3
   1d528:	2b01      	cmp	r3, #1
   1d52a:	d85f      	bhi.n	1d5ec <bt_hci_host_num_completed_packets+0xf4>
	bt_conn_unref(conn);
   1d52c:	f002 fec4 	bl	202b8 <bt_conn_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS,
   1d530:	2105      	movs	r1, #5
   1d532:	f640 4035 	movw	r0, #3125	; 0xc35
   1d536:	f7fe ffb9 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1d53a:	4605      	mov	r5, r0
   1d53c:	2800      	cmp	r0, #0
   1d53e:	d07a      	beq.n	1d636 <bt_hci_host_num_completed_packets+0x13e>
   1d540:	f100 060c 	add.w	r6, r0, #12
   1d544:	2101      	movs	r1, #1
   1d546:	4630      	mov	r0, r6
   1d548:	f00c f9ca 	bl	298e0 <net_buf_simple_add>
	cp->num_handles = sys_cpu_to_le16(1);
   1d54c:	2301      	movs	r3, #1
   1d54e:	7003      	strb	r3, [r0, #0]
   1d550:	2104      	movs	r1, #4
   1d552:	4630      	mov	r0, r6
   1d554:	f00c f9c4 	bl	298e0 <net_buf_simple_add>
	hc->handle = sys_cpu_to_le16(handle);
   1d558:	8004      	strh	r4, [r0, #0]
	hc->count  = sys_cpu_to_le16(1);
   1d55a:	2301      	movs	r3, #1
   1d55c:	7083      	strb	r3, [r0, #2]
   1d55e:	2300      	movs	r3, #0
   1d560:	70c3      	strb	r3, [r0, #3]
	bt_hci_cmd_send(BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS, buf);
   1d562:	4629      	mov	r1, r5
   1d564:	f640 4035 	movw	r0, #3125	; 0xc35
   1d568:	f7ff ff5c 	bl	1d424 <bt_hci_cmd_send>
   1d56c:	e7d1      	b.n	1d512 <bt_hci_host_num_completed_packets+0x1a>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1d56e:	466d      	mov	r5, sp
   1d570:	b088      	sub	sp, #32
   1d572:	466b      	mov	r3, sp
   1d574:	f113 0210 	adds.w	r2, r3, #16
   1d578:	d00d      	beq.n	1d596 <bt_hci_host_num_completed_packets+0x9e>
   1d57a:	210c      	movs	r1, #12
   1d57c:	b13a      	cbz	r2, 1d58e <bt_hci_host_num_completed_packets+0x96>
   1d57e:	4608      	mov	r0, r1
   1d580:	2904      	cmp	r1, #4
   1d582:	dd01      	ble.n	1d588 <bt_hci_host_num_completed_packets+0x90>
   1d584:	4c3e      	ldr	r4, [pc, #248]	; (1d680 <bt_hci_host_num_completed_packets+0x188>)
   1d586:	615c      	str	r4, [r3, #20]
   1d588:	2808      	cmp	r0, #8
   1d58a:	dd07      	ble.n	1d59c <bt_hci_host_num_completed_packets+0xa4>
   1d58c:	619e      	str	r6, [r3, #24]
   1d58e:	290b      	cmp	r1, #11
   1d590:	dd29      	ble.n	1d5e6 <bt_hci_host_num_completed_packets+0xee>
   1d592:	240c      	movs	r4, #12
   1d594:	e004      	b.n	1d5a0 <bt_hci_host_num_completed_packets+0xa8>
   1d596:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d59a:	e7ef      	b.n	1d57c <bt_hci_host_num_completed_packets+0x84>
   1d59c:	f06f 041b 	mvn.w	r4, #27
   1d5a0:	b13a      	cbz	r2, 1d5b2 <bt_hci_host_num_completed_packets+0xba>
   1d5a2:	2103      	movs	r1, #3
   1d5a4:	7139      	strb	r1, [r7, #4]
   1d5a6:	2100      	movs	r1, #0
   1d5a8:	7179      	strb	r1, [r7, #5]
   1d5aa:	71b9      	strb	r1, [r7, #6]
   1d5ac:	71f9      	strb	r1, [r7, #7]
   1d5ae:	6878      	ldr	r0, [r7, #4]
   1d5b0:	6118      	str	r0, [r3, #16]
   1d5b2:	2100      	movs	r1, #0
   1d5b4:	f36f 0100 	bfc	r1, #0, #1
   1d5b8:	f36f 0141 	bfc	r1, #1, #1
   1d5bc:	f36f 0182 	bfc	r1, #2, #1
   1d5c0:	f36f 01c5 	bfc	r1, #3, #3
   1d5c4:	2302      	movs	r3, #2
   1d5c6:	f363 1188 	bfi	r1, r3, #6, #3
   1d5ca:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1d5ce:	f363 2152 	bfi	r1, r3, #9, #10
   1d5d2:	f36f 41de 	bfc	r1, #19, #12
   1d5d6:	f36f 71df 	bfc	r1, #31, #1
   1d5da:	2300      	movs	r3, #0
   1d5dc:	4829      	ldr	r0, [pc, #164]	; (1d684 <bt_hci_host_num_completed_packets+0x18c>)
   1d5de:	f7f9 f9b5 	bl	1694c <z_impl_z_log_msg_static_create>
   1d5e2:	46ad      	mov	sp, r5
		return;
   1d5e4:	e795      	b.n	1d512 <bt_hci_host_num_completed_packets+0x1a>
		LOG_WRN("Unable to look up conn with index 0x%02x", index);
   1d5e6:	f06f 041b 	mvn.w	r4, #27
   1d5ea:	e7d9      	b.n	1d5a0 <bt_hci_host_num_completed_packets+0xa8>
		LOG_WRN("Not reporting packet for non-connected conn");
   1d5ec:	4b26      	ldr	r3, [pc, #152]	; (1d688 <bt_hci_host_num_completed_packets+0x190>)
   1d5ee:	637b      	str	r3, [r7, #52]	; 0x34
   1d5f0:	2202      	movs	r2, #2
   1d5f2:	713a      	strb	r2, [r7, #4]
   1d5f4:	2300      	movs	r3, #0
   1d5f6:	717b      	strb	r3, [r7, #5]
   1d5f8:	71bb      	strb	r3, [r7, #6]
   1d5fa:	71fb      	strb	r3, [r7, #7]
   1d5fc:	6879      	ldr	r1, [r7, #4]
   1d5fe:	6339      	str	r1, [r7, #48]	; 0x30
   1d600:	4619      	mov	r1, r3
   1d602:	f363 0100 	bfi	r1, r3, #0, #1
   1d606:	f363 0141 	bfi	r1, r3, #1, #1
   1d60a:	f363 0182 	bfi	r1, r3, #2, #1
   1d60e:	f363 01c5 	bfi	r1, r3, #3, #3
   1d612:	f362 1188 	bfi	r1, r2, #6, #3
   1d616:	2208      	movs	r2, #8
   1d618:	f362 2152 	bfi	r1, r2, #9, #10
   1d61c:	f363 41de 	bfi	r1, r3, #19, #12
   1d620:	f363 71df 	bfi	r1, r3, #31, #1
   1d624:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1d628:	4816      	ldr	r0, [pc, #88]	; (1d684 <bt_hci_host_num_completed_packets+0x18c>)
   1d62a:	f7f9 f98f 	bl	1694c <z_impl_z_log_msg_static_create>
		bt_conn_unref(conn);
   1d62e:	4628      	mov	r0, r5
   1d630:	f002 fe42 	bl	202b8 <bt_conn_unref>
		return;
   1d634:	e76d      	b.n	1d512 <bt_hci_host_num_completed_packets+0x1a>
		LOG_ERR("Unable to allocate new HCI command");
   1d636:	4b15      	ldr	r3, [pc, #84]	; (1d68c <bt_hci_host_num_completed_packets+0x194>)
   1d638:	61fb      	str	r3, [r7, #28]
   1d63a:	2302      	movs	r3, #2
   1d63c:	713b      	strb	r3, [r7, #4]
   1d63e:	2300      	movs	r3, #0
   1d640:	717b      	strb	r3, [r7, #5]
   1d642:	71bb      	strb	r3, [r7, #6]
   1d644:	71fb      	strb	r3, [r7, #7]
   1d646:	687a      	ldr	r2, [r7, #4]
   1d648:	61ba      	str	r2, [r7, #24]
   1d64a:	4619      	mov	r1, r3
   1d64c:	f363 0100 	bfi	r1, r3, #0, #1
   1d650:	f363 0141 	bfi	r1, r3, #1, #1
   1d654:	f363 0182 	bfi	r1, r3, #2, #1
   1d658:	f363 01c5 	bfi	r1, r3, #3, #3
   1d65c:	2201      	movs	r2, #1
   1d65e:	f362 1188 	bfi	r1, r2, #6, #3
   1d662:	2208      	movs	r2, #8
   1d664:	f362 2152 	bfi	r1, r2, #9, #10
   1d668:	f363 41de 	bfi	r1, r3, #19, #12
   1d66c:	f363 71df 	bfi	r1, r3, #31, #1
   1d670:	f107 0218 	add.w	r2, r7, #24
   1d674:	4803      	ldr	r0, [pc, #12]	; (1d684 <bt_hci_host_num_completed_packets+0x18c>)
   1d676:	f7f9 f969 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   1d67a:	e74a      	b.n	1d512 <bt_hci_host_num_completed_packets+0x1a>
   1d67c:	20008000 	.word	0x20008000
   1d680:	00042728 	.word	0x00042728
   1d684:	0003f3d0 	.word	0x0003f3d0
   1d688:	00042754 	.word	0x00042754
   1d68c:	00042780 	.word	0x00042780

0001d690 <le_ltk_reply>:
{
   1d690:	b570      	push	{r4, r5, r6, lr}
   1d692:	b088      	sub	sp, #32
   1d694:	4605      	mov	r5, r0
   1d696:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1d698:	2112      	movs	r1, #18
   1d69a:	f242 001a 	movw	r0, #8218	; 0x201a
   1d69e:	f7fe ff05 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1d6a2:	b188      	cbz	r0, 1d6c8 <le_ltk_reply+0x38>
   1d6a4:	4606      	mov	r6, r0
   1d6a6:	2112      	movs	r1, #18
   1d6a8:	300c      	adds	r0, #12
   1d6aa:	f00c f919 	bl	298e0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1d6ae:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1d6b2:	2210      	movs	r2, #16
   1d6b4:	4621      	mov	r1, r4
   1d6b6:	f01a fea0 	bl	383fa <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1d6ba:	4631      	mov	r1, r6
   1d6bc:	f242 001a 	movw	r0, #8218	; 0x201a
   1d6c0:	f7ff feb0 	bl	1d424 <bt_hci_cmd_send>
}
   1d6c4:	b008      	add	sp, #32
   1d6c6:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Out of command buffers");
   1d6c8:	4b12      	ldr	r3, [pc, #72]	; (1d714 <le_ltk_reply+0x84>)
   1d6ca:	9307      	str	r3, [sp, #28]
   1d6cc:	2302      	movs	r3, #2
   1d6ce:	f88d 3004 	strb.w	r3, [sp, #4]
   1d6d2:	2300      	movs	r3, #0
   1d6d4:	f88d 3005 	strb.w	r3, [sp, #5]
   1d6d8:	f88d 3006 	strb.w	r3, [sp, #6]
   1d6dc:	f88d 3007 	strb.w	r3, [sp, #7]
   1d6e0:	9a01      	ldr	r2, [sp, #4]
   1d6e2:	9206      	str	r2, [sp, #24]
   1d6e4:	4619      	mov	r1, r3
   1d6e6:	f363 0100 	bfi	r1, r3, #0, #1
   1d6ea:	f363 0141 	bfi	r1, r3, #1, #1
   1d6ee:	f363 0182 	bfi	r1, r3, #2, #1
   1d6f2:	f363 01c5 	bfi	r1, r3, #3, #3
   1d6f6:	2201      	movs	r2, #1
   1d6f8:	f362 1188 	bfi	r1, r2, #6, #3
   1d6fc:	2208      	movs	r2, #8
   1d6fe:	f362 2152 	bfi	r1, r2, #9, #10
   1d702:	f363 41de 	bfi	r1, r3, #19, #12
   1d706:	f363 71df 	bfi	r1, r3, #31, #1
   1d70a:	aa06      	add	r2, sp, #24
   1d70c:	4802      	ldr	r0, [pc, #8]	; (1d718 <le_ltk_reply+0x88>)
   1d70e:	f7f9 f91d 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   1d712:	e7d7      	b.n	1d6c4 <le_ltk_reply+0x34>
   1d714:	000427a4 	.word	0x000427a4
   1d718:	0003f3d0 	.word	0x0003f3d0

0001d71c <le_ltk_neg_reply>:
{
   1d71c:	b530      	push	{r4, r5, lr}
   1d71e:	b089      	sub	sp, #36	; 0x24
   1d720:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1d722:	2102      	movs	r1, #2
   1d724:	f242 001b 	movw	r0, #8219	; 0x201b
   1d728:	f7fe fec0 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1d72c:	b160      	cbz	r0, 1d748 <le_ltk_neg_reply+0x2c>
   1d72e:	4605      	mov	r5, r0
   1d730:	2102      	movs	r1, #2
   1d732:	300c      	adds	r0, #12
   1d734:	f00c f8d4 	bl	298e0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1d738:	8004      	strh	r4, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1d73a:	4629      	mov	r1, r5
   1d73c:	f242 001b 	movw	r0, #8219	; 0x201b
   1d740:	f7ff fe70 	bl	1d424 <bt_hci_cmd_send>
}
   1d744:	b009      	add	sp, #36	; 0x24
   1d746:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Out of command buffers");
   1d748:	4b12      	ldr	r3, [pc, #72]	; (1d794 <le_ltk_neg_reply+0x78>)
   1d74a:	9307      	str	r3, [sp, #28]
   1d74c:	2302      	movs	r3, #2
   1d74e:	f88d 3004 	strb.w	r3, [sp, #4]
   1d752:	2300      	movs	r3, #0
   1d754:	f88d 3005 	strb.w	r3, [sp, #5]
   1d758:	f88d 3006 	strb.w	r3, [sp, #6]
   1d75c:	f88d 3007 	strb.w	r3, [sp, #7]
   1d760:	9a01      	ldr	r2, [sp, #4]
   1d762:	9206      	str	r2, [sp, #24]
   1d764:	4619      	mov	r1, r3
   1d766:	f363 0100 	bfi	r1, r3, #0, #1
   1d76a:	f363 0141 	bfi	r1, r3, #1, #1
   1d76e:	f363 0182 	bfi	r1, r3, #2, #1
   1d772:	f363 01c5 	bfi	r1, r3, #3, #3
   1d776:	2201      	movs	r2, #1
   1d778:	f362 1188 	bfi	r1, r2, #6, #3
   1d77c:	2208      	movs	r2, #8
   1d77e:	f362 2152 	bfi	r1, r2, #9, #10
   1d782:	f363 41de 	bfi	r1, r3, #19, #12
   1d786:	f363 71df 	bfi	r1, r3, #31, #1
   1d78a:	aa06      	add	r2, sp, #24
   1d78c:	4802      	ldr	r0, [pc, #8]	; (1d798 <le_ltk_neg_reply+0x7c>)
   1d78e:	f7f9 f8dd 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   1d792:	e7d7      	b.n	1d744 <le_ltk_neg_reply+0x28>
   1d794:	000427a4 	.word	0x000427a4
   1d798:	0003f3d0 	.word	0x0003f3d0

0001d79c <le_ltk_request>:
{
   1d79c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d79e:	b089      	sub	sp, #36	; 0x24
   1d7a0:	af02      	add	r7, sp, #8
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1d7a2:	68c4      	ldr	r4, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1d7a4:	8825      	ldrh	r5, [r4, #0]
	conn = bt_conn_lookup_handle(handle);
   1d7a6:	4628      	mov	r0, r5
   1d7a8:	f002 fdb8 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1d7ac:	b1c0      	cbz	r0, 1d7e0 <le_ltk_request+0x44>
   1d7ae:	4606      	mov	r6, r0
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1d7b0:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1d7b4:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1d7b8:	f107 0108 	add.w	r1, r7, #8
   1d7bc:	9101      	str	r1, [sp, #4]
   1d7be:	8961      	ldrh	r1, [r4, #10]
   1d7c0:	9100      	str	r1, [sp, #0]
   1d7c2:	f01e f812 	bl	3b7ea <bt_smp_request_ltk>
   1d7c6:	2800      	cmp	r0, #0
   1d7c8:	d046      	beq.n	1d858 <le_ltk_request+0xbc>
		le_ltk_reply(handle, ltk);
   1d7ca:	f107 0108 	add.w	r1, r7, #8
   1d7ce:	4628      	mov	r0, r5
   1d7d0:	f7ff ff5e 	bl	1d690 <le_ltk_reply>
	bt_conn_unref(conn);
   1d7d4:	4630      	mov	r0, r6
   1d7d6:	f002 fd6f 	bl	202b8 <bt_conn_unref>
}
   1d7da:	371c      	adds	r7, #28
   1d7dc:	46bd      	mov	sp, r7
   1d7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1d7e0:	466e      	mov	r6, sp
   1d7e2:	b088      	sub	sp, #32
   1d7e4:	ab02      	add	r3, sp, #8
   1d7e6:	f113 0210 	adds.w	r2, r3, #16
   1d7ea:	d02f      	beq.n	1d84c <le_ltk_request+0xb0>
   1d7ec:	210c      	movs	r1, #12
   1d7ee:	b13a      	cbz	r2, 1d800 <le_ltk_request+0x64>
   1d7f0:	4608      	mov	r0, r1
   1d7f2:	2904      	cmp	r1, #4
   1d7f4:	dd01      	ble.n	1d7fa <le_ltk_request+0x5e>
   1d7f6:	4c1a      	ldr	r4, [pc, #104]	; (1d860 <le_ltk_request+0xc4>)
   1d7f8:	615c      	str	r4, [r3, #20]
   1d7fa:	2808      	cmp	r0, #8
   1d7fc:	dd00      	ble.n	1d800 <le_ltk_request+0x64>
   1d7fe:	619d      	str	r5, [r3, #24]
   1d800:	290b      	cmp	r1, #11
   1d802:	dd26      	ble.n	1d852 <le_ltk_request+0xb6>
   1d804:	240c      	movs	r4, #12
   1d806:	b13a      	cbz	r2, 1d818 <le_ltk_request+0x7c>
   1d808:	2103      	movs	r1, #3
   1d80a:	7139      	strb	r1, [r7, #4]
   1d80c:	2100      	movs	r1, #0
   1d80e:	7179      	strb	r1, [r7, #5]
   1d810:	71b9      	strb	r1, [r7, #6]
   1d812:	71f9      	strb	r1, [r7, #7]
   1d814:	6878      	ldr	r0, [r7, #4]
   1d816:	6118      	str	r0, [r3, #16]
   1d818:	2100      	movs	r1, #0
   1d81a:	f36f 0100 	bfc	r1, #0, #1
   1d81e:	f36f 0141 	bfc	r1, #1, #1
   1d822:	f36f 0182 	bfc	r1, #2, #1
   1d826:	f36f 01c5 	bfc	r1, #3, #3
   1d82a:	2301      	movs	r3, #1
   1d82c:	f363 1188 	bfi	r1, r3, #6, #3
   1d830:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1d834:	f363 2152 	bfi	r1, r3, #9, #10
   1d838:	f36f 41de 	bfc	r1, #19, #12
   1d83c:	f36f 71df 	bfc	r1, #31, #1
   1d840:	2300      	movs	r3, #0
   1d842:	4808      	ldr	r0, [pc, #32]	; (1d864 <le_ltk_request+0xc8>)
   1d844:	f7f9 f882 	bl	1694c <z_impl_z_log_msg_static_create>
   1d848:	46b5      	mov	sp, r6
		return;
   1d84a:	e7c6      	b.n	1d7da <le_ltk_request+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1d84c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d850:	e7cd      	b.n	1d7ee <le_ltk_request+0x52>
   1d852:	f06f 041b 	mvn.w	r4, #27
   1d856:	e7d6      	b.n	1d806 <le_ltk_request+0x6a>
		le_ltk_neg_reply(handle);
   1d858:	4628      	mov	r0, r5
   1d85a:	f7ff ff5f 	bl	1d71c <le_ltk_neg_reply>
   1d85e:	e7b9      	b.n	1d7d4 <le_ltk_request+0x38>
   1d860:	00042348 	.word	0x00042348
   1d864:	0003f3d0 	.word	0x0003f3d0

0001d868 <le_conn_param_neg_reply>:
{
   1d868:	b570      	push	{r4, r5, r6, lr}
   1d86a:	b088      	sub	sp, #32
   1d86c:	4605      	mov	r5, r0
   1d86e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1d870:	2103      	movs	r1, #3
   1d872:	f242 0021 	movw	r0, #8225	; 0x2021
   1d876:	f7fe fe19 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1d87a:	b168      	cbz	r0, 1d898 <le_conn_param_neg_reply+0x30>
   1d87c:	4606      	mov	r6, r0
   1d87e:	2103      	movs	r1, #3
   1d880:	300c      	adds	r0, #12
   1d882:	f00c f82d 	bl	298e0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   1d886:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1d888:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1d88a:	4631      	mov	r1, r6
   1d88c:	f242 0021 	movw	r0, #8225	; 0x2021
   1d890:	f7ff fdc8 	bl	1d424 <bt_hci_cmd_send>
}
   1d894:	b008      	add	sp, #32
   1d896:	bd70      	pop	{r4, r5, r6, pc}
		LOG_ERR("Unable to allocate buffer");
   1d898:	4b12      	ldr	r3, [pc, #72]	; (1d8e4 <le_conn_param_neg_reply+0x7c>)
   1d89a:	9307      	str	r3, [sp, #28]
   1d89c:	2302      	movs	r3, #2
   1d89e:	f88d 3004 	strb.w	r3, [sp, #4]
   1d8a2:	2300      	movs	r3, #0
   1d8a4:	f88d 3005 	strb.w	r3, [sp, #5]
   1d8a8:	f88d 3006 	strb.w	r3, [sp, #6]
   1d8ac:	f88d 3007 	strb.w	r3, [sp, #7]
   1d8b0:	9a01      	ldr	r2, [sp, #4]
   1d8b2:	9206      	str	r2, [sp, #24]
   1d8b4:	4619      	mov	r1, r3
   1d8b6:	f363 0100 	bfi	r1, r3, #0, #1
   1d8ba:	f363 0141 	bfi	r1, r3, #1, #1
   1d8be:	f363 0182 	bfi	r1, r3, #2, #1
   1d8c2:	f363 01c5 	bfi	r1, r3, #3, #3
   1d8c6:	2201      	movs	r2, #1
   1d8c8:	f362 1188 	bfi	r1, r2, #6, #3
   1d8cc:	2208      	movs	r2, #8
   1d8ce:	f362 2152 	bfi	r1, r2, #9, #10
   1d8d2:	f363 41de 	bfi	r1, r3, #19, #12
   1d8d6:	f363 71df 	bfi	r1, r3, #31, #1
   1d8da:	aa06      	add	r2, sp, #24
   1d8dc:	4802      	ldr	r0, [pc, #8]	; (1d8e8 <le_conn_param_neg_reply+0x80>)
   1d8de:	f7f9 f835 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   1d8e2:	e7d7      	b.n	1d894 <le_conn_param_neg_reply+0x2c>
   1d8e4:	000427bc 	.word	0x000427bc
   1d8e8:	0003f3d0 	.word	0x0003f3d0

0001d8ec <le_conn_param_req>:
{
   1d8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d8ee:	b085      	sub	sp, #20
   1d8f0:	af00      	add	r7, sp, #0
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1d8f2:	68c3      	ldr	r3, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   1d8f4:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1d8f6:	885a      	ldrh	r2, [r3, #2]
   1d8f8:	813a      	strh	r2, [r7, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1d8fa:	889a      	ldrh	r2, [r3, #4]
   1d8fc:	817a      	strh	r2, [r7, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   1d8fe:	88da      	ldrh	r2, [r3, #6]
   1d900:	81ba      	strh	r2, [r7, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1d902:	891b      	ldrh	r3, [r3, #8]
   1d904:	81fb      	strh	r3, [r7, #14]
	conn = bt_conn_lookup_handle(handle);
   1d906:	4620      	mov	r0, r4
   1d908:	f002 fd08 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   1d90c:	b180      	cbz	r0, 1d930 <le_conn_param_req+0x44>
   1d90e:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   1d910:	f107 0108 	add.w	r1, r7, #8
   1d914:	f002 fff6 	bl	20904 <le_param_req>
   1d918:	2800      	cmp	r0, #0
   1d91a:	d149      	bne.n	1d9b0 <le_conn_param_req+0xc4>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1d91c:	211e      	movs	r1, #30
   1d91e:	4620      	mov	r0, r4
   1d920:	f7ff ffa2 	bl	1d868 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1d924:	4628      	mov	r0, r5
   1d926:	f002 fcc7 	bl	202b8 <bt_conn_unref>
}
   1d92a:	3714      	adds	r7, #20
   1d92c:	46bd      	mov	sp, r7
   1d92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1d930:	466e      	mov	r6, sp
   1d932:	b088      	sub	sp, #32
   1d934:	466b      	mov	r3, sp
   1d936:	f113 0210 	adds.w	r2, r3, #16
   1d93a:	d033      	beq.n	1d9a4 <le_conn_param_req+0xb8>
   1d93c:	210c      	movs	r1, #12
   1d93e:	b13a      	cbz	r2, 1d950 <le_conn_param_req+0x64>
   1d940:	4608      	mov	r0, r1
   1d942:	2904      	cmp	r1, #4
   1d944:	dd01      	ble.n	1d94a <le_conn_param_req+0x5e>
   1d946:	4d1d      	ldr	r5, [pc, #116]	; (1d9bc <le_conn_param_req+0xd0>)
   1d948:	615d      	str	r5, [r3, #20]
   1d94a:	2808      	cmp	r0, #8
   1d94c:	dd00      	ble.n	1d950 <le_conn_param_req+0x64>
   1d94e:	619c      	str	r4, [r3, #24]
   1d950:	290b      	cmp	r1, #11
   1d952:	dd2a      	ble.n	1d9aa <le_conn_param_req+0xbe>
   1d954:	250c      	movs	r5, #12
   1d956:	b13a      	cbz	r2, 1d968 <le_conn_param_req+0x7c>
   1d958:	2103      	movs	r1, #3
   1d95a:	7139      	strb	r1, [r7, #4]
   1d95c:	2100      	movs	r1, #0
   1d95e:	7179      	strb	r1, [r7, #5]
   1d960:	71b9      	strb	r1, [r7, #6]
   1d962:	71f9      	strb	r1, [r7, #7]
   1d964:	6878      	ldr	r0, [r7, #4]
   1d966:	6118      	str	r0, [r3, #16]
   1d968:	2100      	movs	r1, #0
   1d96a:	f36f 0100 	bfc	r1, #0, #1
   1d96e:	f36f 0141 	bfc	r1, #1, #1
   1d972:	f36f 0182 	bfc	r1, #2, #1
   1d976:	f36f 01c5 	bfc	r1, #3, #3
   1d97a:	2301      	movs	r3, #1
   1d97c:	f363 1188 	bfi	r1, r3, #6, #3
   1d980:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1d984:	f363 2152 	bfi	r1, r3, #9, #10
   1d988:	f36f 41de 	bfc	r1, #19, #12
   1d98c:	f36f 71df 	bfc	r1, #31, #1
   1d990:	2300      	movs	r3, #0
   1d992:	480b      	ldr	r0, [pc, #44]	; (1d9c0 <le_conn_param_req+0xd4>)
   1d994:	f7f8 ffda 	bl	1694c <z_impl_z_log_msg_static_create>
   1d998:	46b5      	mov	sp, r6
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1d99a:	2102      	movs	r1, #2
   1d99c:	4620      	mov	r0, r4
   1d99e:	f7ff ff63 	bl	1d868 <le_conn_param_neg_reply>
		return;
   1d9a2:	e7c2      	b.n	1d92a <le_conn_param_req+0x3e>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1d9a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d9a8:	e7c9      	b.n	1d93e <le_conn_param_req+0x52>
   1d9aa:	f06f 051b 	mvn.w	r5, #27
   1d9ae:	e7d2      	b.n	1d956 <le_conn_param_req+0x6a>
		le_conn_param_req_reply(handle, &param);
   1d9b0:	f107 0108 	add.w	r1, r7, #8
   1d9b4:	4620      	mov	r0, r4
   1d9b6:	f01a ffba 	bl	3892e <le_conn_param_req_reply>
   1d9ba:	e7b3      	b.n	1d924 <le_conn_param_req+0x38>
   1d9bc:	00042348 	.word	0x00042348
   1d9c0:	0003f3d0 	.word	0x0003f3d0

0001d9c4 <send_cmd>:
{
   1d9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9c6:	b089      	sub	sp, #36	; 0x24
   1d9c8:	af00      	add	r7, sp, #0
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   1d9ca:	2200      	movs	r2, #0
   1d9cc:	2300      	movs	r3, #0
   1d9ce:	4855      	ldr	r0, [pc, #340]	; (1db24 <send_cmd+0x160>)
   1d9d0:	f01e f9f6 	bl	3bdc0 <net_buf_get>
	BT_ASSERT(buf);
   1d9d4:	4605      	mov	r5, r0
   1d9d6:	2800      	cmp	r0, #0
   1d9d8:	d055      	beq.n	1da86 <send_cmd+0xc2>
   1d9da:	4c53      	ldr	r4, [pc, #332]	; (1db28 <send_cmd+0x164>)
   1d9dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d9e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d9e4:	4620      	mov	r0, r4
   1d9e6:	f014 fa43 	bl	31e70 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   1d9ea:	69a3      	ldr	r3, [r4, #24]
   1d9ec:	b34b      	cbz	r3, 1da42 <send_cmd+0x7e>
		LOG_ERR("Uncleared pending sent_cmd");
   1d9ee:	4b4f      	ldr	r3, [pc, #316]	; (1db2c <send_cmd+0x168>)
   1d9f0:	61fb      	str	r3, [r7, #28]
   1d9f2:	2302      	movs	r3, #2
   1d9f4:	713b      	strb	r3, [r7, #4]
   1d9f6:	2400      	movs	r4, #0
   1d9f8:	717c      	strb	r4, [r7, #5]
   1d9fa:	71bc      	strb	r4, [r7, #6]
   1d9fc:	71fc      	strb	r4, [r7, #7]
   1d9fe:	687b      	ldr	r3, [r7, #4]
   1da00:	61bb      	str	r3, [r7, #24]
   1da02:	4621      	mov	r1, r4
   1da04:	f364 0100 	bfi	r1, r4, #0, #1
   1da08:	f364 0141 	bfi	r1, r4, #1, #1
   1da0c:	f364 0182 	bfi	r1, r4, #2, #1
   1da10:	f364 01c5 	bfi	r1, r4, #3, #3
   1da14:	2301      	movs	r3, #1
   1da16:	f363 1188 	bfi	r1, r3, #6, #3
   1da1a:	2308      	movs	r3, #8
   1da1c:	f363 2152 	bfi	r1, r3, #9, #10
   1da20:	f364 41de 	bfi	r1, r4, #19, #12
   1da24:	f364 71df 	bfi	r1, r4, #31, #1
   1da28:	4623      	mov	r3, r4
   1da2a:	f107 0218 	add.w	r2, r7, #24
   1da2e:	4840      	ldr	r0, [pc, #256]	; (1db30 <send_cmd+0x16c>)
   1da30:	f7f8 ff8c 	bl	1694c <z_impl_z_log_msg_static_create>
		net_buf_unref(bt_dev.sent_cmd);
   1da34:	4e3f      	ldr	r6, [pc, #252]	; (1db34 <send_cmd+0x170>)
   1da36:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   1da3a:	f00b fe33 	bl	296a4 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1da3e:	f8c6 4138 	str.w	r4, [r6, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   1da42:	4628      	mov	r0, r5
   1da44:	f00b fe64 	bl	29710 <net_buf_ref>
   1da48:	4b3a      	ldr	r3, [pc, #232]	; (1db34 <send_cmd+0x170>)
   1da4a:	f8c3 0138 	str.w	r0, [r3, #312]	; 0x138
	err = bt_send(buf);
   1da4e:	4628      	mov	r0, r5
   1da50:	f7ff fcde 	bl	1d410 <bt_send>
	if (err) {
   1da54:	4604      	mov	r4, r0
   1da56:	2800      	cmp	r0, #0
   1da58:	d05d      	beq.n	1db16 <send_cmd+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1da5a:	466e      	mov	r6, sp
   1da5c:	b088      	sub	sp, #32
   1da5e:	466b      	mov	r3, sp
   1da60:	f113 0210 	adds.w	r2, r3, #16
   1da64:	d01d      	beq.n	1daa2 <send_cmd+0xde>
   1da66:	210c      	movs	r1, #12
   1da68:	b14a      	cbz	r2, 1da7e <send_cmd+0xba>
   1da6a:	4608      	mov	r0, r1
   1da6c:	2904      	cmp	r1, #4
   1da6e:	dd03      	ble.n	1da78 <send_cmd+0xb4>
   1da70:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 1db38 <send_cmd+0x174>
   1da74:	f8c3 c014 	str.w	ip, [r3, #20]
   1da78:	2808      	cmp	r0, #8
   1da7a:	dd15      	ble.n	1daa8 <send_cmd+0xe4>
   1da7c:	619c      	str	r4, [r3, #24]
   1da7e:	290b      	cmp	r1, #11
   1da80:	dd4c      	ble.n	1db1c <send_cmd+0x158>
   1da82:	240c      	movs	r4, #12
   1da84:	e012      	b.n	1daac <send_cmd+0xe8>
	BT_ASSERT(buf);
   1da86:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1da8a:	4a2c      	ldr	r2, [pc, #176]	; (1db3c <send_cmd+0x178>)
   1da8c:	492c      	ldr	r1, [pc, #176]	; (1db40 <send_cmd+0x17c>)
   1da8e:	482d      	ldr	r0, [pc, #180]	; (1db44 <send_cmd+0x180>)
   1da90:	f018 fc00 	bl	36294 <assert_print>
   1da94:	4040      	eors	r0, r0
   1da96:	f380 8811 	msr	BASEPRI, r0
   1da9a:	f04f 0003 	mov.w	r0, #3
   1da9e:	df02      	svc	2
   1daa0:	e79b      	b.n	1d9da <send_cmd+0x16>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1daa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1daa6:	e7df      	b.n	1da68 <send_cmd+0xa4>
   1daa8:	f06f 041b 	mvn.w	r4, #27
   1daac:	b13a      	cbz	r2, 1dabe <send_cmd+0xfa>
   1daae:	2103      	movs	r1, #3
   1dab0:	7139      	strb	r1, [r7, #4]
   1dab2:	2100      	movs	r1, #0
   1dab4:	7179      	strb	r1, [r7, #5]
   1dab6:	71b9      	strb	r1, [r7, #6]
   1dab8:	71f9      	strb	r1, [r7, #7]
   1daba:	6878      	ldr	r0, [r7, #4]
   1dabc:	6118      	str	r0, [r3, #16]
   1dabe:	2100      	movs	r1, #0
   1dac0:	f36f 0100 	bfc	r1, #0, #1
   1dac4:	f36f 0141 	bfc	r1, #1, #1
   1dac8:	f36f 0182 	bfc	r1, #2, #1
   1dacc:	f36f 01c5 	bfc	r1, #3, #3
   1dad0:	2301      	movs	r3, #1
   1dad2:	f363 1188 	bfi	r1, r3, #6, #3
   1dad6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1dada:	f363 2152 	bfi	r1, r3, #9, #10
   1dade:	f36f 41de 	bfc	r1, #19, #12
   1dae2:	f36f 71df 	bfc	r1, #31, #1
   1dae6:	2300      	movs	r3, #0
   1dae8:	4811      	ldr	r0, [pc, #68]	; (1db30 <send_cmd+0x16c>)
   1daea:	f7f8 ff2f 	bl	1694c <z_impl_z_log_msg_static_create>
   1daee:	46b5      	mov	sp, r6
	z_impl_k_sem_give(sem);
   1daf0:	480d      	ldr	r0, [pc, #52]	; (1db28 <send_cmd+0x164>)
   1daf2:	f014 f975 	bl	31de0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1daf6:	4628      	mov	r0, r5
   1daf8:	f01e f936 	bl	3bd68 <net_buf_id>
   1dafc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1db00:	4b11      	ldr	r3, [pc, #68]	; (1db48 <send_cmd+0x184>)
   1db02:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1db06:	462a      	mov	r2, r5
   1db08:	211f      	movs	r1, #31
   1db0a:	8858      	ldrh	r0, [r3, #2]
   1db0c:	f7fd ffa4 	bl	1ba58 <hci_cmd_done>
		net_buf_unref(buf);
   1db10:	4628      	mov	r0, r5
   1db12:	f00b fdc7 	bl	296a4 <net_buf_unref>
}
   1db16:	3724      	adds	r7, #36	; 0x24
   1db18:	46bd      	mov	sp, r7
   1db1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unable to send to driver (err %d)", err);
   1db1c:	f06f 041b 	mvn.w	r4, #27
   1db20:	e7c4      	b.n	1daac <send_cmd+0xe8>
   1db22:	bf00      	nop
   1db24:	20008144 	.word	0x20008144
   1db28:	20008120 	.word	0x20008120
   1db2c:	000427d8 	.word	0x000427d8
   1db30:	0003f3d0 	.word	0x0003f3d0
   1db34:	20008000 	.word	0x20008000
   1db38:	00042704 	.word	0x00042704
   1db3c:	00042454 	.word	0x00042454
   1db40:	000446d0 	.word	0x000446d0
   1db44:	0003f72c 	.word	0x0003f72c
   1db48:	2000c024 	.word	0x2000c024

0001db4c <process_events>:
{
   1db4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db50:	b082      	sub	sp, #8
   1db52:	af00      	add	r7, sp, #0
   1db54:	4604      	mov	r4, r0
   1db56:	460d      	mov	r5, r1
	LOG_DBG("count %d", count);
   1db58:	e03c      	b.n	1dbd4 <process_events+0x88>
				send_cmd();
   1db5a:	f7ff ff33 	bl	1d9c4 <send_cmd>
   1db5e:	e037      	b.n	1dbd0 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1db60:	46e8      	mov	r8, sp
   1db62:	b088      	sub	sp, #32
   1db64:	4669      	mov	r1, sp
   1db66:	f111 0210 	adds.w	r2, r1, #16
   1db6a:	d045      	beq.n	1dbf8 <process_events+0xac>
   1db6c:	200c      	movs	r0, #12
   1db6e:	b152      	cbz	r2, 1db86 <process_events+0x3a>
   1db70:	4684      	mov	ip, r0
   1db72:	2804      	cmp	r0, #4
   1db74:	dd03      	ble.n	1db7e <process_events+0x32>
   1db76:	f8df e094 	ldr.w	lr, [pc, #148]	; 1dc0c <process_events+0xc0>
   1db7a:	f8c1 e014 	str.w	lr, [r1, #20]
   1db7e:	f1bc 0f08 	cmp.w	ip, #8
   1db82:	dd00      	ble.n	1db86 <process_events+0x3a>
   1db84:	618b      	str	r3, [r1, #24]
   1db86:	280b      	cmp	r0, #11
   1db88:	dd39      	ble.n	1dbfe <process_events+0xb2>
   1db8a:	230c      	movs	r3, #12
   1db8c:	b13a      	cbz	r2, 1db9e <process_events+0x52>
   1db8e:	2003      	movs	r0, #3
   1db90:	7138      	strb	r0, [r7, #4]
   1db92:	2000      	movs	r0, #0
   1db94:	7178      	strb	r0, [r7, #5]
   1db96:	71b8      	strb	r0, [r7, #6]
   1db98:	71f8      	strb	r0, [r7, #7]
   1db9a:	6878      	ldr	r0, [r7, #4]
   1db9c:	6108      	str	r0, [r1, #16]
   1db9e:	f36f 0600 	bfc	r6, #0, #1
   1dba2:	f36f 0641 	bfc	r6, #1, #1
   1dba6:	f36f 0682 	bfc	r6, #2, #1
   1dbaa:	f36f 06c5 	bfc	r6, #3, #3
   1dbae:	2102      	movs	r1, #2
   1dbb0:	f361 1688 	bfi	r6, r1, #6, #3
   1dbb4:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1dbb8:	f363 2652 	bfi	r6, r3, #9, #10
   1dbbc:	f36f 46de 	bfc	r6, #19, #12
   1dbc0:	f36f 76df 	bfc	r6, #31, #1
   1dbc4:	2300      	movs	r3, #0
   1dbc6:	4631      	mov	r1, r6
   1dbc8:	4811      	ldr	r0, [pc, #68]	; (1dc10 <process_events+0xc4>)
   1dbca:	f7f8 febf 	bl	1694c <z_impl_z_log_msg_static_create>
   1dbce:	46c5      	mov	sp, r8
	for (; count; ev++, count--) {
   1dbd0:	3414      	adds	r4, #20
   1dbd2:	3d01      	subs	r5, #1
   1dbd4:	b1b5      	cbz	r5, 1dc04 <process_events+0xb8>
		switch (ev->state) {
   1dbd6:	68e3      	ldr	r3, [r4, #12]
   1dbd8:	f3c3 3386 	ubfx	r3, r3, #14, #7
   1dbdc:	2b01      	cmp	r3, #1
   1dbde:	d9f7      	bls.n	1dbd0 <process_events+0x84>
   1dbe0:	2b04      	cmp	r3, #4
   1dbe2:	d1bd      	bne.n	1db60 <process_events+0x14>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1dbe4:	7b23      	ldrb	r3, [r4, #12]
   1dbe6:	2b00      	cmp	r3, #0
   1dbe8:	d0b7      	beq.n	1db5a <process_events+0xe>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1dbea:	2b01      	cmp	r3, #1
   1dbec:	d1f0      	bne.n	1dbd0 <process_events+0x84>
					conn = CONTAINER_OF(ev->fifo,
   1dbee:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   1dbf0:	3838      	subs	r0, #56	; 0x38
   1dbf2:	f003 f9cf 	bl	20f94 <bt_conn_process_tx>
   1dbf6:	e7eb      	b.n	1dbd0 <process_events+0x84>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   1dbf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1dbfc:	e7b7      	b.n	1db6e <process_events+0x22>
   1dbfe:	f06f 031b 	mvn.w	r3, #27
   1dc02:	e7c3      	b.n	1db8c <process_events+0x40>
}
   1dc04:	3708      	adds	r7, #8
   1dc06:	46bd      	mov	sp, r7
   1dc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dc0c:	000427f4 	.word	0x000427f4
   1dc10:	0003f3d0 	.word	0x0003f3d0

0001dc14 <hci_tx_thread>:
{
   1dc14:	b538      	push	{r3, r4, r5, lr}
   1dc16:	e012      	b.n	1dc3e <hci_tx_thread+0x2a>
		BT_ASSERT(err == 0);
   1dc18:	f640 13e6 	movw	r3, #2534	; 0x9e6
   1dc1c:	4a12      	ldr	r2, [pc, #72]	; (1dc68 <hci_tx_thread+0x54>)
   1dc1e:	4913      	ldr	r1, [pc, #76]	; (1dc6c <hci_tx_thread+0x58>)
   1dc20:	4813      	ldr	r0, [pc, #76]	; (1dc70 <hci_tx_thread+0x5c>)
   1dc22:	f018 fb37 	bl	36294 <assert_print>
   1dc26:	4040      	eors	r0, r0
   1dc28:	f380 8811 	msr	BASEPRI, r0
   1dc2c:	f04f 0003 	mov.w	r0, #3
   1dc30:	df02      	svc	2
		process_events(events, ev_count);
   1dc32:	4621      	mov	r1, r4
   1dc34:	480f      	ldr	r0, [pc, #60]	; (1dc74 <hci_tx_thread+0x60>)
   1dc36:	f7ff ff89 	bl	1db4c <process_events>
	z_impl_k_yield();
   1dc3a:	f016 f869 	bl	33d10 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   1dc3e:	4d0d      	ldr	r5, [pc, #52]	; (1dc74 <hci_tx_thread+0x60>)
   1dc40:	68eb      	ldr	r3, [r5, #12]
   1dc42:	f36f 3394 	bfc	r3, #14, #7
   1dc46:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1dc48:	f105 0014 	add.w	r0, r5, #20
   1dc4c:	f002 fae6 	bl	2021c <bt_conn_prepare_events>
   1dc50:	1c44      	adds	r4, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1dc52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dc56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dc5a:	4621      	mov	r1, r4
   1dc5c:	4628      	mov	r0, r5
   1dc5e:	f017 faef 	bl	35240 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1dc62:	2800      	cmp	r0, #0
   1dc64:	d1d8      	bne.n	1dc18 <hci_tx_thread+0x4>
   1dc66:	e7e4      	b.n	1dc32 <hci_tx_thread+0x1e>
   1dc68:	00042454 	.word	0x00042454
   1dc6c:	00040c1c 	.word	0x00040c1c
   1dc70:	0003f72c 	.word	0x0003f72c
   1dc74:	20008420 	.word	0x20008420

0001dc78 <hci_event_prio>:
{
   1dc78:	b570      	push	{r4, r5, r6, lr}
   1dc7a:	b082      	sub	sp, #8
   1dc7c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1dc7e:	f100 050c 	add.w	r5, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1dc82:	4628      	mov	r0, r5
   1dc84:	f01e f8ae 	bl	3bde4 <net_buf_simple_headroom>
   1dc88:	f8ad 0004 	strh.w	r0, [sp, #4]
	state->len = buf->len;
   1dc8c:	8a23      	ldrh	r3, [r4, #16]
   1dc8e:	f8ad 3006 	strh.w	r3, [sp, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1dc92:	2b01      	cmp	r3, #1
   1dc94:	d91e      	bls.n	1dcd4 <hci_event_prio+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1dc96:	2102      	movs	r1, #2
   1dc98:	4628      	mov	r0, r5
   1dc9a:	f00b fde1 	bl	29860 <net_buf_simple_pull_mem>
   1dc9e:	4606      	mov	r6, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1dca0:	7800      	ldrb	r0, [r0, #0]
   1dca2:	f01a fcfb 	bl	3869c <bt_hci_evt_get_flags>
   1dca6:	4605      	mov	r5, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1dca8:	f010 0f01 	tst.w	r0, #1
   1dcac:	d020      	beq.n	1dcf0 <hci_event_prio+0x78>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1dcae:	2305      	movs	r3, #5
   1dcb0:	4a18      	ldr	r2, [pc, #96]	; (1dd14 <hci_event_prio+0x9c>)
   1dcb2:	4621      	mov	r1, r4
   1dcb4:	7830      	ldrb	r0, [r6, #0]
   1dcb6:	f7fe f845 	bl	1bd44 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1dcba:	f015 0f02 	tst.w	r5, #2
   1dcbe:	d025      	beq.n	1dd0c <hci_event_prio+0x94>
	buf->data = buf->__buf + state->offset;
   1dcc0:	6963      	ldr	r3, [r4, #20]
   1dcc2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1dcc6:	4413      	add	r3, r2
   1dcc8:	60e3      	str	r3, [r4, #12]
	buf->len = state->len;
   1dcca:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dcce:	8223      	strh	r3, [r4, #16]
}
   1dcd0:	b002      	add	sp, #8
   1dcd2:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1dcd4:	f640 537b 	movw	r3, #3451	; 0xd7b
   1dcd8:	4a0f      	ldr	r2, [pc, #60]	; (1dd18 <hci_event_prio+0xa0>)
   1dcda:	4910      	ldr	r1, [pc, #64]	; (1dd1c <hci_event_prio+0xa4>)
   1dcdc:	4810      	ldr	r0, [pc, #64]	; (1dd20 <hci_event_prio+0xa8>)
   1dcde:	f018 fad9 	bl	36294 <assert_print>
   1dce2:	4040      	eors	r0, r0
   1dce4:	f380 8811 	msr	BASEPRI, r0
   1dce8:	f04f 0003 	mov.w	r0, #3
   1dcec:	df02      	svc	2
   1dcee:	e7d2      	b.n	1dc96 <hci_event_prio+0x1e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1dcf0:	f640 537f 	movw	r3, #3455	; 0xd7f
   1dcf4:	4a08      	ldr	r2, [pc, #32]	; (1dd18 <hci_event_prio+0xa0>)
   1dcf6:	490b      	ldr	r1, [pc, #44]	; (1dd24 <hci_event_prio+0xac>)
   1dcf8:	4809      	ldr	r0, [pc, #36]	; (1dd20 <hci_event_prio+0xa8>)
   1dcfa:	f018 facb 	bl	36294 <assert_print>
   1dcfe:	4040      	eors	r0, r0
   1dd00:	f380 8811 	msr	BASEPRI, r0
   1dd04:	f04f 0003 	mov.w	r0, #3
   1dd08:	df02      	svc	2
   1dd0a:	e7d0      	b.n	1dcae <hci_event_prio+0x36>
		net_buf_unref(buf);
   1dd0c:	4620      	mov	r0, r4
   1dd0e:	f00b fcc9 	bl	296a4 <net_buf_unref>
}
   1dd12:	e7dd      	b.n	1dcd0 <hci_event_prio+0x58>
   1dd14:	000428c0 	.word	0x000428c0
   1dd18:	00042454 	.word	0x00042454
   1dd1c:	00042488 	.word	0x00042488
   1dd20:	0003f72c 	.word	0x0003f72c
   1dd24:	00042818 	.word	0x00042818

0001dd28 <bt_recv>:
{
   1dd28:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd2a:	b083      	sub	sp, #12
   1dd2c:	af00      	add	r7, sp, #0
   1dd2e:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1dd30:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   1dd32:	2b01      	cmp	r3, #1
   1dd34:	d007      	beq.n	1dd46 <bt_recv+0x1e>
   1dd36:	2b03      	cmp	r3, #3
   1dd38:	d11b      	bne.n	1dd72 <bt_recv+0x4a>
		rx_queue_put(buf);
   1dd3a:	f7fe f8cd 	bl	1bed8 <rx_queue_put>
		return 0;
   1dd3e:	2000      	movs	r0, #0
}
   1dd40:	370c      	adds	r7, #12
   1dd42:	46bd      	mov	sp, r7
   1dd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   1dd46:	68c3      	ldr	r3, [r0, #12]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1dd48:	7818      	ldrb	r0, [r3, #0]
   1dd4a:	f01a fca7 	bl	3869c <bt_hci_evt_get_flags>
   1dd4e:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1dd50:	f010 0f01 	tst.w	r0, #1
   1dd54:	d104      	bne.n	1dd60 <bt_recv+0x38>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1dd56:	f015 0f02 	tst.w	r5, #2
   1dd5a:	d105      	bne.n	1dd68 <bt_recv+0x40>
		return 0;
   1dd5c:	2000      	movs	r0, #0
   1dd5e:	e7ef      	b.n	1dd40 <bt_recv+0x18>
			hci_event_prio(buf);
   1dd60:	4620      	mov	r0, r4
   1dd62:	f7ff ff89 	bl	1dc78 <hci_event_prio>
   1dd66:	e7f6      	b.n	1dd56 <bt_recv+0x2e>
			rx_queue_put(buf);
   1dd68:	4620      	mov	r0, r4
   1dd6a:	f7fe f8b5 	bl	1bed8 <rx_queue_put>
		return 0;
   1dd6e:	2000      	movs	r0, #0
   1dd70:	e7e6      	b.n	1dd40 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1dd72:	466d      	mov	r5, sp
   1dd74:	b088      	sub	sp, #32
   1dd76:	4669      	mov	r1, sp
   1dd78:	f111 0210 	adds.w	r2, r1, #16
   1dd7c:	d035      	beq.n	1ddea <bt_recv+0xc2>
   1dd7e:	200c      	movs	r0, #12
   1dd80:	b142      	cbz	r2, 1dd94 <bt_recv+0x6c>
   1dd82:	4684      	mov	ip, r0
   1dd84:	2804      	cmp	r0, #4
   1dd86:	dd01      	ble.n	1dd8c <bt_recv+0x64>
   1dd88:	4e1b      	ldr	r6, [pc, #108]	; (1ddf8 <bt_recv+0xd0>)
   1dd8a:	614e      	str	r6, [r1, #20]
   1dd8c:	f1bc 0f08 	cmp.w	ip, #8
   1dd90:	dd00      	ble.n	1dd94 <bt_recv+0x6c>
   1dd92:	618b      	str	r3, [r1, #24]
   1dd94:	280b      	cmp	r0, #11
   1dd96:	dd2b      	ble.n	1ddf0 <bt_recv+0xc8>
   1dd98:	230c      	movs	r3, #12
   1dd9a:	b13a      	cbz	r2, 1ddac <bt_recv+0x84>
   1dd9c:	2003      	movs	r0, #3
   1dd9e:	7138      	strb	r0, [r7, #4]
   1dda0:	2000      	movs	r0, #0
   1dda2:	7178      	strb	r0, [r7, #5]
   1dda4:	71b8      	strb	r0, [r7, #6]
   1dda6:	71f8      	strb	r0, [r7, #7]
   1dda8:	6878      	ldr	r0, [r7, #4]
   1ddaa:	6108      	str	r0, [r1, #16]
   1ddac:	2100      	movs	r1, #0
   1ddae:	f36f 0100 	bfc	r1, #0, #1
   1ddb2:	f36f 0141 	bfc	r1, #1, #1
   1ddb6:	f36f 0182 	bfc	r1, #2, #1
   1ddba:	f36f 01c5 	bfc	r1, #3, #3
   1ddbe:	2001      	movs	r0, #1
   1ddc0:	f360 1188 	bfi	r1, r0, #6, #3
   1ddc4:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1ddc8:	f363 2152 	bfi	r1, r3, #9, #10
   1ddcc:	f36f 41de 	bfc	r1, #19, #12
   1ddd0:	f36f 71df 	bfc	r1, #31, #1
   1ddd4:	2300      	movs	r3, #0
   1ddd6:	4809      	ldr	r0, [pc, #36]	; (1ddfc <bt_recv+0xd4>)
   1ddd8:	f7f8 fdb8 	bl	1694c <z_impl_z_log_msg_static_create>
   1dddc:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1ddde:	4620      	mov	r0, r4
   1dde0:	f00b fc60 	bl	296a4 <net_buf_unref>
		return -EINVAL;
   1dde4:	f06f 0015 	mvn.w	r0, #21
   1dde8:	e7aa      	b.n	1dd40 <bt_recv+0x18>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1ddea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ddee:	e7c7      	b.n	1dd80 <bt_recv+0x58>
   1ddf0:	f06f 031b 	mvn.w	r3, #27
   1ddf4:	e7d1      	b.n	1dd9a <bt_recv+0x72>
   1ddf6:	bf00      	nop
   1ddf8:	00042834 	.word	0x00042834
   1ddfc:	0003f3d0 	.word	0x0003f3d0

0001de00 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   1de00:	4b0a      	ldr	r3, [pc, #40]	; (1de2c <bt_hci_driver_register+0x2c>)
   1de02:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1de06:	b943      	cbnz	r3, 1de1a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   1de08:	68c3      	ldr	r3, [r0, #12]
   1de0a:	b14b      	cbz	r3, 1de20 <bt_hci_driver_register+0x20>
   1de0c:	6943      	ldr	r3, [r0, #20]
   1de0e:	b153      	cbz	r3, 1de26 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   1de10:	4b06      	ldr	r3, [pc, #24]	; (1de2c <bt_hci_driver_register+0x2c>)
   1de12:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	return 0;
   1de16:	2000      	movs	r0, #0
   1de18:	4770      	bx	lr
		return -EALREADY;
   1de1a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1de1e:	4770      	bx	lr
		return -EINVAL;
   1de20:	f06f 0015 	mvn.w	r0, #21
   1de24:	4770      	bx	lr
   1de26:	f06f 0015 	mvn.w	r0, #21
}
   1de2a:	4770      	bx	lr
   1de2c:	20008000 	.word	0x20008000

0001de30 <bt_finalize_init>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1de30:	4b04      	ldr	r3, [pc, #16]	; (1de44 <bt_finalize_init+0x14>)
   1de32:	e8d3 1fef 	ldaex	r1, [r3]
   1de36:	f041 0104 	orr.w	r1, r1, #4
   1de3a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1de3e:	2a00      	cmp	r2, #0
   1de40:	d1f7      	bne.n	1de32 <bt_finalize_init+0x2>
}
   1de42:	4770      	bx	lr
   1de44:	200080cc 	.word	0x200080cc

0001de48 <bt_init>:
{
   1de48:	b510      	push	{r4, lr}
   1de4a:	b088      	sub	sp, #32
	err = hci_init();
   1de4c:	f7fe febe 	bl	1cbcc <hci_init>
	if (err) {
   1de50:	4604      	mov	r4, r0
   1de52:	b988      	cbnz	r0, 1de78 <bt_init+0x30>
		err = bt_conn_init();
   1de54:	f003 f928 	bl	210a8 <bt_conn_init>
		if (err) {
   1de58:	4604      	mov	r4, r0
   1de5a:	b968      	cbnz	r0, 1de78 <bt_init+0x30>
		if (!bt_dev.id_count) {
   1de5c:	4b1b      	ldr	r3, [pc, #108]	; (1decc <bt_init+0x84>)
   1de5e:	79db      	ldrb	r3, [r3, #7]
   1de60:	b16b      	cbz	r3, 1de7e <bt_init+0x36>
   1de62:	4b1b      	ldr	r3, [pc, #108]	; (1ded0 <bt_init+0x88>)
   1de64:	e8d3 1fef 	ldaex	r1, [r3]
   1de68:	f041 0108 	orr.w	r1, r1, #8
   1de6c:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1de70:	2a00      	cmp	r2, #0
   1de72:	d1f7      	bne.n	1de64 <bt_init+0x1c>
	bt_finalize_init();
   1de74:	f7ff ffdc 	bl	1de30 <bt_finalize_init>
}
   1de78:	4620      	mov	r0, r4
   1de7a:	b008      	add	sp, #32
   1de7c:	bd10      	pop	{r4, pc}
			LOG_INF("No ID address. App must call settings_load()");
   1de7e:	4b15      	ldr	r3, [pc, #84]	; (1ded4 <bt_init+0x8c>)
   1de80:	9307      	str	r3, [sp, #28]
   1de82:	2302      	movs	r3, #2
   1de84:	f88d 3004 	strb.w	r3, [sp, #4]
   1de88:	2300      	movs	r3, #0
   1de8a:	f88d 3005 	strb.w	r3, [sp, #5]
   1de8e:	f88d 3006 	strb.w	r3, [sp, #6]
   1de92:	f88d 3007 	strb.w	r3, [sp, #7]
   1de96:	9a01      	ldr	r2, [sp, #4]
   1de98:	9206      	str	r2, [sp, #24]
   1de9a:	4619      	mov	r1, r3
   1de9c:	f363 0100 	bfi	r1, r3, #0, #1
   1dea0:	f363 0141 	bfi	r1, r3, #1, #1
   1dea4:	f363 0182 	bfi	r1, r3, #2, #1
   1dea8:	f363 01c5 	bfi	r1, r3, #3, #3
   1deac:	2203      	movs	r2, #3
   1deae:	f362 1188 	bfi	r1, r2, #6, #3
   1deb2:	2208      	movs	r2, #8
   1deb4:	f362 2152 	bfi	r1, r2, #9, #10
   1deb8:	f363 41de 	bfi	r1, r3, #19, #12
   1debc:	f363 71df 	bfi	r1, r3, #31, #1
   1dec0:	aa06      	add	r2, sp, #24
   1dec2:	4805      	ldr	r0, [pc, #20]	; (1ded8 <bt_init+0x90>)
   1dec4:	f7f8 fd42 	bl	1694c <z_impl_z_log_msg_static_create>
			return 0;
   1dec8:	e7d6      	b.n	1de78 <bt_init+0x30>
   1deca:	bf00      	nop
   1decc:	20008000 	.word	0x20008000
   1ded0:	200080cc 	.word	0x200080cc
   1ded4:	00042848 	.word	0x00042848
   1ded8:	0003f3d0 	.word	0x0003f3d0

0001dedc <init_work>:
{
   1dedc:	b508      	push	{r3, lr}
	err = bt_init();
   1dede:	f7ff ffb3 	bl	1de48 <bt_init>
	if (ready_cb) {
   1dee2:	4b02      	ldr	r3, [pc, #8]	; (1deec <init_work+0x10>)
   1dee4:	681b      	ldr	r3, [r3, #0]
   1dee6:	b103      	cbz	r3, 1deea <init_work+0xe>
		ready_cb(err);
   1dee8:	4798      	blx	r3
}
   1deea:	bd08      	pop	{r3, pc}
   1deec:	2000c09c 	.word	0x2000c09c

0001def0 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   1def0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1def4:	b090      	sub	sp, #64	; 0x40
   1def6:	af08      	add	r7, sp, #32
	int err;

	if (!bt_dev.drv) {
   1def8:	4b67      	ldr	r3, [pc, #412]	; (1e098 <bt_enable+0x1a8>)
   1defa:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   1defe:	b1f3      	cbz	r3, 1df3e <bt_enable+0x4e>
   1df00:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df02:	4b66      	ldr	r3, [pc, #408]	; (1e09c <bt_enable+0x1ac>)
   1df04:	e8d3 2fef 	ldaex	r2, [r3]
   1df08:	f022 0202 	bic.w	r2, r2, #2
   1df0c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   1df10:	2900      	cmp	r1, #0
   1df12:	d1f7      	bne.n	1df04 <bt_enable+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1df14:	e8d3 2fef 	ldaex	r2, [r3]
   1df18:	f042 0101 	orr.w	r1, r2, #1
   1df1c:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1df20:	2800      	cmp	r0, #0
   1df22:	d1f7      	bne.n	1df14 <bt_enable+0x24>
		return -ENODEV;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_DISABLE);

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1df24:	f012 0f01 	tst.w	r2, #1
   1df28:	f040 80b3 	bne.w	1e092 <bt_enable+0x1a2>
		return -EALREADY;
	}

	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		err = bt_settings_init();
   1df2c:	f7fd f8fc 	bl	1b128 <bt_settings_init>
		if (err) {
   1df30:	4604      	mov	r4, r0
   1df32:	b348      	cbz	r0, 1df88 <bt_enable+0x98>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   1df34:	4620      	mov	r0, r4
   1df36:	3720      	adds	r7, #32
   1df38:	46bd      	mov	sp, r7
   1df3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("No HCI driver registered");
   1df3e:	4b58      	ldr	r3, [pc, #352]	; (1e0a0 <bt_enable+0x1b0>)
   1df40:	61fb      	str	r3, [r7, #28]
   1df42:	2302      	movs	r3, #2
   1df44:	713b      	strb	r3, [r7, #4]
   1df46:	2300      	movs	r3, #0
   1df48:	717b      	strb	r3, [r7, #5]
   1df4a:	71bb      	strb	r3, [r7, #6]
   1df4c:	71fb      	strb	r3, [r7, #7]
   1df4e:	687a      	ldr	r2, [r7, #4]
   1df50:	61ba      	str	r2, [r7, #24]
   1df52:	4619      	mov	r1, r3
   1df54:	f363 0100 	bfi	r1, r3, #0, #1
   1df58:	f363 0141 	bfi	r1, r3, #1, #1
   1df5c:	f363 0182 	bfi	r1, r3, #2, #1
   1df60:	f363 01c5 	bfi	r1, r3, #3, #3
   1df64:	2201      	movs	r2, #1
   1df66:	f362 1188 	bfi	r1, r2, #6, #3
   1df6a:	2208      	movs	r2, #8
   1df6c:	f362 2152 	bfi	r1, r2, #9, #10
   1df70:	f363 41de 	bfi	r1, r3, #19, #12
   1df74:	f363 71df 	bfi	r1, r3, #31, #1
   1df78:	f107 0218 	add.w	r2, r7, #24
   1df7c:	4849      	ldr	r0, [pc, #292]	; (1e0a4 <bt_enable+0x1b4>)
   1df7e:	f7f8 fce5 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENODEV;
   1df82:	f06f 0412 	mvn.w	r4, #18
   1df86:	e7d5      	b.n	1df34 <bt_enable+0x44>
	ready_cb = cb;
   1df88:	4b47      	ldr	r3, [pc, #284]	; (1e0a8 <bt_enable+0x1b8>)
   1df8a:	601d      	str	r5, [r3, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1df8c:	4e47      	ldr	r6, [pc, #284]	; (1e0ac <bt_enable+0x1bc>)
   1df8e:	2201      	movs	r2, #1
   1df90:	4611      	mov	r1, r2
   1df92:	4630      	mov	r0, r6
   1df94:	f020 fd39 	bl	3ea0a <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   1df98:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1df9c:	f020 fd11 	bl	3e9c2 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1dfa0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1e0b0 <bt_enable+0x1c0>
   1dfa4:	2200      	movs	r2, #0
   1dfa6:	2300      	movs	r3, #0
   1dfa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1dfac:	2400      	movs	r4, #0
   1dfae:	9404      	str	r4, [sp, #16]
   1dfb0:	f06f 0308 	mvn.w	r3, #8
   1dfb4:	9303      	str	r3, [sp, #12]
   1dfb6:	9402      	str	r4, [sp, #8]
   1dfb8:	9401      	str	r4, [sp, #4]
   1dfba:	9400      	str	r4, [sp, #0]
   1dfbc:	4b3d      	ldr	r3, [pc, #244]	; (1e0b4 <bt_enable+0x1c4>)
   1dfbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1dfc2:	493d      	ldr	r1, [pc, #244]	; (1e0b8 <bt_enable+0x1c8>)
   1dfc4:	4640      	mov	r0, r8
   1dfc6:	f013 fb5f 	bl	31688 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1dfca:	493c      	ldr	r1, [pc, #240]	; (1e0bc <bt_enable+0x1cc>)
   1dfcc:	4640      	mov	r0, r8
   1dfce:	f013 f9f5 	bl	313bc <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1dfd2:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 1e0c0 <bt_enable+0x1d0>
   1dfd6:	4640      	mov	r0, r8
   1dfd8:	f014 faba 	bl	32550 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1dfdc:	9400      	str	r4, [sp, #0]
   1dfde:	f06f 0307 	mvn.w	r3, #7
   1dfe2:	f640 0298 	movw	r2, #2200	; 0x898
   1dfe6:	4937      	ldr	r1, [pc, #220]	; (1e0c4 <bt_enable+0x1d4>)
   1dfe8:	4640      	mov	r0, r8
   1dfea:	f014 facb 	bl	32584 <k_work_queue_start>
   1dfee:	4936      	ldr	r1, [pc, #216]	; (1e0c8 <bt_enable+0x1d8>)
   1dff0:	4640      	mov	r0, r8
   1dff2:	f013 f9e3 	bl	313bc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1dff6:	6c33      	ldr	r3, [r6, #64]	; 0x40
   1dff8:	68db      	ldr	r3, [r3, #12]
   1dffa:	4798      	blx	r3
	if (err) {
   1dffc:	4604      	mov	r4, r0
   1dffe:	b928      	cbnz	r0, 1e00c <bt_enable+0x11c>
	if (!cb) {
   1e000:	2d00      	cmp	r5, #0
   1e002:	d042      	beq.n	1e08a <bt_enable+0x19a>
	k_work_submit(&bt_dev.init);
   1e004:	4831      	ldr	r0, [pc, #196]	; (1e0cc <bt_enable+0x1dc>)
   1e006:	f014 fa9b 	bl	32540 <k_work_submit>
	return 0;
   1e00a:	e793      	b.n	1df34 <bt_enable+0x44>
		LOG_ERR("HCI driver open failed (%d)", err);
   1e00c:	466e      	mov	r6, sp
   1e00e:	b088      	sub	sp, #32
   1e010:	4633      	mov	r3, r6
   1e012:	f116 0210 	adds.w	r2, r6, #16
   1e016:	d00d      	beq.n	1e034 <bt_enable+0x144>
   1e018:	210c      	movs	r1, #12
   1e01a:	b13a      	cbz	r2, 1e02c <bt_enable+0x13c>
   1e01c:	4608      	mov	r0, r1
   1e01e:	2904      	cmp	r1, #4
   1e020:	dd01      	ble.n	1e026 <bt_enable+0x136>
   1e022:	4d2b      	ldr	r5, [pc, #172]	; (1e0d0 <bt_enable+0x1e0>)
   1e024:	615d      	str	r5, [r3, #20]
   1e026:	2808      	cmp	r0, #8
   1e028:	dd07      	ble.n	1e03a <bt_enable+0x14a>
   1e02a:	619c      	str	r4, [r3, #24]
   1e02c:	290b      	cmp	r1, #11
   1e02e:	dd29      	ble.n	1e084 <bt_enable+0x194>
   1e030:	250c      	movs	r5, #12
   1e032:	e004      	b.n	1e03e <bt_enable+0x14e>
   1e034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e038:	e7ef      	b.n	1e01a <bt_enable+0x12a>
   1e03a:	f06f 051b 	mvn.w	r5, #27
   1e03e:	b13a      	cbz	r2, 1e050 <bt_enable+0x160>
   1e040:	2103      	movs	r1, #3
   1e042:	7139      	strb	r1, [r7, #4]
   1e044:	2100      	movs	r1, #0
   1e046:	7179      	strb	r1, [r7, #5]
   1e048:	71b9      	strb	r1, [r7, #6]
   1e04a:	71f9      	strb	r1, [r7, #7]
   1e04c:	6878      	ldr	r0, [r7, #4]
   1e04e:	6118      	str	r0, [r3, #16]
   1e050:	2100      	movs	r1, #0
   1e052:	f36f 0100 	bfc	r1, #0, #1
   1e056:	f36f 0141 	bfc	r1, #1, #1
   1e05a:	f36f 0182 	bfc	r1, #2, #1
   1e05e:	f36f 01c5 	bfc	r1, #3, #3
   1e062:	2301      	movs	r3, #1
   1e064:	f363 1188 	bfi	r1, r3, #6, #3
   1e068:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   1e06c:	f363 2152 	bfi	r1, r3, #9, #10
   1e070:	f36f 41de 	bfc	r1, #19, #12
   1e074:	f36f 71df 	bfc	r1, #31, #1
   1e078:	2300      	movs	r3, #0
   1e07a:	480a      	ldr	r0, [pc, #40]	; (1e0a4 <bt_enable+0x1b4>)
   1e07c:	f7f8 fc66 	bl	1694c <z_impl_z_log_msg_static_create>
   1e080:	46b5      	mov	sp, r6
		return err;
   1e082:	e757      	b.n	1df34 <bt_enable+0x44>
		LOG_ERR("HCI driver open failed (%d)", err);
   1e084:	f06f 051b 	mvn.w	r5, #27
   1e088:	e7d9      	b.n	1e03e <bt_enable+0x14e>
		return bt_init();
   1e08a:	f7ff fedd 	bl	1de48 <bt_init>
   1e08e:	4604      	mov	r4, r0
   1e090:	e750      	b.n	1df34 <bt_enable+0x44>
		return -EALREADY;
   1e092:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1e096:	e74d      	b.n	1df34 <bt_enable+0x44>
   1e098:	20008000 	.word	0x20008000
   1e09c:	200080cc 	.word	0x200080cc
   1e0a0:	00042878 	.word	0x00042878
   1e0a4:	0003f3d0 	.word	0x0003f3d0
   1e0a8:	2000c09c 	.word	0x2000c09c
   1e0ac:	20008120 	.word	0x20008120
   1e0b0:	2000b2f0 	.word	0x2000b2f0
   1e0b4:	0001dc15 	.word	0x0001dc15
   1e0b8:	2000ebd8 	.word	0x2000ebd8
   1e0bc:	00042894 	.word	0x00042894
   1e0c0:	2000b3a8 	.word	0x2000b3a8
   1e0c4:	2000efd8 	.word	0x2000efd8
   1e0c8:	0004289c 	.word	0x0004289c
   1e0cc:	200080bc 	.word	0x200080bc
   1e0d0:	000428a4 	.word	0x000428a4

0001e0d4 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e0d4:	4b02      	ldr	r3, [pc, #8]	; (1e0e0 <bt_is_ready+0xc>)
   1e0d6:	e8d3 0faf 	lda	r0, [r3]
   1e0da:	f3c0 0080 	ubfx	r0, r0, #2, #1
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1e0de:	4770      	bx	lr
   1e0e0:	200080cc 	.word	0x200080cc

0001e0e4 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   1e0e4:	4800      	ldr	r0, [pc, #0]	; (1e0e8 <bt_get_name+0x4>)
   1e0e6:	4770      	bx	lr
   1e0e8:	000405fc 	.word	0x000405fc

0001e0ec <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   1e0ec:	b570      	push	{r4, r5, r6, lr}
   1e0ee:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   1e0f0:	2400      	movs	r4, #0
   1e0f2:	e001      	b.n	1e0f8 <id_find+0xc>
   1e0f4:	3401      	adds	r4, #1
   1e0f6:	b2e4      	uxtb	r4, r4
   1e0f8:	4b09      	ldr	r3, [pc, #36]	; (1e120 <id_find+0x34>)
   1e0fa:	79db      	ldrb	r3, [r3, #7]
   1e0fc:	42a3      	cmp	r3, r4
   1e0fe:	d90b      	bls.n	1e118 <id_find+0x2c>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   1e100:	4626      	mov	r6, r4
   1e102:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   1e106:	2207      	movs	r2, #7
   1e108:	4b05      	ldr	r3, [pc, #20]	; (1e120 <id_find+0x34>)
   1e10a:	4419      	add	r1, r3
   1e10c:	4628      	mov	r0, r5
   1e10e:	f01a f94f 	bl	383b0 <memcmp>
   1e112:	2800      	cmp	r0, #0
   1e114:	d1ee      	bne.n	1e0f4 <id_find+0x8>
   1e116:	e001      	b.n	1e11c <id_find+0x30>
			return id;
		}
	}

	return -ENOENT;
   1e118:	f06f 0601 	mvn.w	r6, #1
}
   1e11c:	4630      	mov	r0, r6
   1e11e:	bd70      	pop	{r4, r5, r6, pc}
   1e120:	20008000 	.word	0x20008000

0001e124 <set_random_address>:
{
   1e124:	b570      	push	{r4, r5, r6, lr}
   1e126:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   1e128:	2206      	movs	r2, #6
   1e12a:	4914      	ldr	r1, [pc, #80]	; (1e17c <set_random_address+0x58>)
   1e12c:	f01a f940 	bl	383b0 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   1e130:	4605      	mov	r5, r0
   1e132:	b908      	cbnz	r0, 1e138 <set_random_address+0x14>
}
   1e134:	4628      	mov	r0, r5
   1e136:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   1e138:	2106      	movs	r1, #6
   1e13a:	f242 0005 	movw	r0, #8197	; 0x2005
   1e13e:	f7fe f9b5 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1e142:	4605      	mov	r5, r0
   1e144:	b1b8      	cbz	r0, 1e176 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e146:	2206      	movs	r2, #6
   1e148:	4621      	mov	r1, r4
   1e14a:	300c      	adds	r0, #12
   1e14c:	f01d fe5e 	bl	3be0c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1e150:	2200      	movs	r2, #0
   1e152:	4629      	mov	r1, r5
   1e154:	f242 0005 	movw	r0, #8197	; 0x2005
   1e158:	f7fe f9fa 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1e15c:	4605      	mov	r5, r0
   1e15e:	2800      	cmp	r0, #0
   1e160:	d1e8      	bne.n	1e134 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   1e162:	4e06      	ldr	r6, [pc, #24]	; (1e17c <set_random_address+0x58>)
   1e164:	2206      	movs	r2, #6
   1e166:	4621      	mov	r1, r4
   1e168:	4630      	mov	r0, r6
   1e16a:	f01a f946 	bl	383fa <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1e16e:	2301      	movs	r3, #1
   1e170:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   1e174:	e7de      	b.n	1e134 <set_random_address+0x10>
		return -ENOBUFS;
   1e176:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1e17a:	e7db      	b.n	1e134 <set_random_address+0x10>
   1e17c:	20008061 	.word	0x20008061

0001e180 <find_rl_conflict>:
{
   1e180:	b570      	push	{r4, r5, r6, lr}
   1e182:	b086      	sub	sp, #24
	__ASSERT_NO_MSG(conflict != NULL);
   1e184:	b169      	cbz	r1, 1e1a2 <find_rl_conflict+0x22>
   1e186:	4604      	mov	r4, r0
   1e188:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   1e18a:	6808      	ldr	r0, [r1, #0]
   1e18c:	b1b0      	cbz	r0, 1e1bc <find_rl_conflict+0x3c>
	__ASSERT_NO_MSG(resident != NULL);
   1e18e:	b314      	cbz	r4, 1e1d6 <find_rl_conflict+0x56>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   1e190:	7a03      	ldrb	r3, [r0, #8]
   1e192:	f013 0f04 	tst.w	r3, #4
   1e196:	d12b      	bne.n	1e1f0 <find_rl_conflict+0x70>
	if (conflict->found) {
   1e198:	684b      	ldr	r3, [r1, #4]
   1e19a:	2b00      	cmp	r3, #0
   1e19c:	d035      	beq.n	1e20a <find_rl_conflict+0x8a>
}
   1e19e:	b006      	add	sp, #24
   1e1a0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(conflict != NULL);
   1e1a2:	4c30      	ldr	r4, [pc, #192]	; (1e264 <find_rl_conflict+0xe4>)
   1e1a4:	f44f 7357 	mov.w	r3, #860	; 0x35c
   1e1a8:	4622      	mov	r2, r4
   1e1aa:	492f      	ldr	r1, [pc, #188]	; (1e268 <find_rl_conflict+0xe8>)
   1e1ac:	482f      	ldr	r0, [pc, #188]	; (1e26c <find_rl_conflict+0xec>)
   1e1ae:	f018 f871 	bl	36294 <assert_print>
   1e1b2:	f44f 7157 	mov.w	r1, #860	; 0x35c
   1e1b6:	4620      	mov	r0, r4
   1e1b8:	f018 f865 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(conflict->candidate != NULL);
   1e1bc:	4c29      	ldr	r4, [pc, #164]	; (1e264 <find_rl_conflict+0xe4>)
   1e1be:	f240 335d 	movw	r3, #861	; 0x35d
   1e1c2:	4622      	mov	r2, r4
   1e1c4:	492a      	ldr	r1, [pc, #168]	; (1e270 <find_rl_conflict+0xf0>)
   1e1c6:	4829      	ldr	r0, [pc, #164]	; (1e26c <find_rl_conflict+0xec>)
   1e1c8:	f018 f864 	bl	36294 <assert_print>
   1e1cc:	f240 315d 	movw	r1, #861	; 0x35d
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f018 f858 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(resident != NULL);
   1e1d6:	4c23      	ldr	r4, [pc, #140]	; (1e264 <find_rl_conflict+0xe4>)
   1e1d8:	f240 335e 	movw	r3, #862	; 0x35e
   1e1dc:	4622      	mov	r2, r4
   1e1de:	4925      	ldr	r1, [pc, #148]	; (1e274 <find_rl_conflict+0xf4>)
   1e1e0:	4822      	ldr	r0, [pc, #136]	; (1e26c <find_rl_conflict+0xec>)
   1e1e2:	f018 f857 	bl	36294 <assert_print>
   1e1e6:	f240 315e 	movw	r1, #862	; 0x35e
   1e1ea:	4620      	mov	r0, r4
   1e1ec:	f018 f84b 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG((conflict->candidate->state & BT_KEYS_ID_ADDED) == 0);
   1e1f0:	4c1c      	ldr	r4, [pc, #112]	; (1e264 <find_rl_conflict+0xe4>)
   1e1f2:	f44f 7358 	mov.w	r3, #864	; 0x360
   1e1f6:	4622      	mov	r2, r4
   1e1f8:	491f      	ldr	r1, [pc, #124]	; (1e278 <find_rl_conflict+0xf8>)
   1e1fa:	481c      	ldr	r0, [pc, #112]	; (1e26c <find_rl_conflict+0xec>)
   1e1fc:	f018 f84a 	bl	36294 <assert_print>
   1e200:	f44f 7158 	mov.w	r1, #864	; 0x360
   1e204:	4620      	mov	r0, r4
   1e206:	f018 f83e 	bl	36286 <assert_post_action>
	if ((resident->state & BT_KEYS_ID_ADDED) == 0) {
   1e20a:	7a23      	ldrb	r3, [r4, #8]
   1e20c:	f013 0f04 	tst.w	r3, #4
   1e210:	d0c5      	beq.n	1e19e <find_rl_conflict+0x1e>
	return memcmp(a, b, sizeof(*a));
   1e212:	2207      	movs	r2, #7
   1e214:	1c61      	adds	r1, r4, #1
   1e216:	3001      	adds	r0, #1
   1e218:	f01a f8ca 	bl	383b0 <memcmp>
   1e21c:	4606      	mov	r6, r0
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1e21e:	6828      	ldr	r0, [r5, #0]
   1e220:	2300      	movs	r3, #0
   1e222:	9300      	str	r3, [sp, #0]
   1e224:	9301      	str	r3, [sp, #4]
   1e226:	9302      	str	r3, [sp, #8]
   1e228:	9303      	str	r3, [sp, #12]
   1e22a:	9304      	str	r3, [sp, #16]
   1e22c:	f8ad 3014 	strh.w	r3, [sp, #20]
	bt_addr_t               rpa;
};

static inline bool bt_irk_eq(struct bt_irk const *a, struct bt_irk const *b)
{
	return (memcmp(a->val, b->val, sizeof(a->val)) == 0);
   1e230:	2210      	movs	r2, #16
   1e232:	4669      	mov	r1, sp
   1e234:	302a      	adds	r0, #42	; 0x2a
   1e236:	f01a f8bb 	bl	383b0 <memcmp>
   1e23a:	4603      	mov	r3, r0
   1e23c:	b930      	cbnz	r0, 1e24c <find_rl_conflict+0xcc>
   1e23e:	f003 0301 	and.w	r3, r3, #1
	if (addr_conflict || irk_conflict) {
   1e242:	b10e      	cbz	r6, 1e248 <find_rl_conflict+0xc8>
   1e244:	2b00      	cmp	r3, #0
   1e246:	d0aa      	beq.n	1e19e <find_rl_conflict+0x1e>
		conflict->found = resident;
   1e248:	606c      	str	r4, [r5, #4]
   1e24a:	e7a8      	b.n	1e19e <find_rl_conflict+0x1e>
			bt_irk_eq(&conflict->candidate->irk, &resident->irk));
   1e24c:	6828      	ldr	r0, [r5, #0]
   1e24e:	2210      	movs	r2, #16
   1e250:	f104 012a 	add.w	r1, r4, #42	; 0x2a
   1e254:	302a      	adds	r0, #42	; 0x2a
   1e256:	f01a f8ab 	bl	383b0 <memcmp>
	irk_conflict = (!bt_irk_eq(&conflict->candidate->irk, &(struct bt_irk){}) &&
   1e25a:	b908      	cbnz	r0, 1e260 <find_rl_conflict+0xe0>
   1e25c:	2301      	movs	r3, #1
   1e25e:	e7ee      	b.n	1e23e <find_rl_conflict+0xbe>
   1e260:	2300      	movs	r3, #0
   1e262:	e7ec      	b.n	1e23e <find_rl_conflict+0xbe>
   1e264:	00042984 	.word	0x00042984
   1e268:	000429b4 	.word	0x000429b4
   1e26c:	0003f72c 	.word	0x0003f72c
   1e270:	000429cc 	.word	0x000429cc
   1e274:	000429f0 	.word	0x000429f0
   1e278:	00042a08 	.word	0x00042a08

0001e27c <bt_id_pending_keys_update_set>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e27c:	4b06      	ldr	r3, [pc, #24]	; (1e298 <bt_id_pending_keys_update_set+0x1c>)
   1e27e:	e8d3 cfef 	ldaex	ip, [r3]
   1e282:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
   1e286:	e8c3 cfe2 	stlex	r2, ip, [r3]
   1e28a:	2a00      	cmp	r2, #0
   1e28c:	d1f7      	bne.n	1e27e <bt_id_pending_keys_update_set+0x2>
	keys->state |= flag;
   1e28e:	7a03      	ldrb	r3, [r0, #8]
   1e290:	4319      	orrs	r1, r3
   1e292:	7201      	strb	r1, [r0, #8]
}
   1e294:	4770      	bx	lr
   1e296:	bf00      	nop
   1e298:	200080cc 	.word	0x200080cc

0001e29c <le_set_privacy_mode>:
{
   1e29c:	b510      	push	{r4, lr}
   1e29e:	b08a      	sub	sp, #40	; 0x28
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
   1e2a0:	4b26      	ldr	r3, [pc, #152]	; (1e33c <le_set_privacy_mode+0xa0>)
   1e2a2:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
   1e2a6:	f013 0f04 	tst.w	r3, #4
   1e2aa:	d01c      	beq.n	1e2e6 <le_set_privacy_mode+0x4a>
   1e2ac:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
   1e2ae:	2207      	movs	r2, #7
   1e2b0:	4601      	mov	r1, r0
   1e2b2:	a802      	add	r0, sp, #8
   1e2b4:	f01a f8a1 	bl	383fa <memcpy>
	cp.mode = mode;
   1e2b8:	f88d 400f 	strb.w	r4, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
   1e2bc:	2108      	movs	r1, #8
   1e2be:	f242 004e 	movw	r0, #8270	; 0x204e
   1e2c2:	f7fe f8f3 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1e2c6:	4604      	mov	r4, r0
   1e2c8:	b3a0      	cbz	r0, 1e334 <le_set_privacy_mode+0x98>
   1e2ca:	2208      	movs	r2, #8
   1e2cc:	eb0d 0102 	add.w	r1, sp, r2
   1e2d0:	300c      	adds	r0, #12
   1e2d2:	f01d fd9b 	bl	3be0c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
   1e2d6:	2200      	movs	r2, #0
   1e2d8:	4621      	mov	r1, r4
   1e2da:	f242 004e 	movw	r0, #8270	; 0x204e
   1e2de:	f7fe f937 	bl	1c550 <bt_hci_cmd_send_sync>
}
   1e2e2:	b00a      	add	sp, #40	; 0x28
   1e2e4:	bd10      	pop	{r4, pc}
		LOG_WRN("Set privacy mode command is not supported");
   1e2e6:	4b16      	ldr	r3, [pc, #88]	; (1e340 <le_set_privacy_mode+0xa4>)
   1e2e8:	9309      	str	r3, [sp, #36]	; 0x24
   1e2ea:	2302      	movs	r3, #2
   1e2ec:	f88d 3004 	strb.w	r3, [sp, #4]
   1e2f0:	2400      	movs	r4, #0
   1e2f2:	f88d 4005 	strb.w	r4, [sp, #5]
   1e2f6:	f88d 4006 	strb.w	r4, [sp, #6]
   1e2fa:	f88d 4007 	strb.w	r4, [sp, #7]
   1e2fe:	9a01      	ldr	r2, [sp, #4]
   1e300:	9208      	str	r2, [sp, #32]
   1e302:	4621      	mov	r1, r4
   1e304:	f364 0100 	bfi	r1, r4, #0, #1
   1e308:	f364 0141 	bfi	r1, r4, #1, #1
   1e30c:	f364 0182 	bfi	r1, r4, #2, #1
   1e310:	f364 01c5 	bfi	r1, r4, #3, #3
   1e314:	f363 1188 	bfi	r1, r3, #6, #3
   1e318:	2308      	movs	r3, #8
   1e31a:	f363 2152 	bfi	r1, r3, #9, #10
   1e31e:	f364 41de 	bfi	r1, r4, #19, #12
   1e322:	f364 71df 	bfi	r1, r4, #31, #1
   1e326:	4623      	mov	r3, r4
   1e328:	aa08      	add	r2, sp, #32
   1e32a:	4806      	ldr	r0, [pc, #24]	; (1e344 <le_set_privacy_mode+0xa8>)
   1e32c:	f7f8 fb0e 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0;
   1e330:	4620      	mov	r0, r4
   1e332:	e7d6      	b.n	1e2e2 <le_set_privacy_mode+0x46>
		return -ENOBUFS;
   1e334:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e338:	e7d3      	b.n	1e2e2 <le_set_privacy_mode+0x46>
   1e33a:	bf00      	nop
   1e33c:	20008000 	.word	0x20008000
   1e340:	00042a40 	.word	0x00042a40
   1e344:	0003f3e8 	.word	0x0003f3e8

0001e348 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   1e348:	b530      	push	{r4, r5, lr}
   1e34a:	b083      	sub	sp, #12
   1e34c:	4604      	mov	r4, r0
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1e34e:	460d      	mov	r5, r1
   1e350:	b129      	cbz	r1, 1e35e <id_create+0x16>
	return memcmp(a, b, sizeof(*a));
   1e352:	2207      	movs	r2, #7
   1e354:	491a      	ldr	r1, [pc, #104]	; (1e3c0 <id_create+0x78>)
   1e356:	4628      	mov	r0, r5
   1e358:	f01a f82a 	bl	383b0 <memcmp>
   1e35c:	bb18      	cbnz	r0, 1e3a6 <id_create+0x5e>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   1e35e:	4668      	mov	r0, sp
   1e360:	f01a f964 	bl	3862c <bt_addr_le_create_static>
			if (err) {
   1e364:	4603      	mov	r3, r0
   1e366:	b9d8      	cbnz	r0, 1e3a0 <id_create+0x58>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1e368:	4668      	mov	r0, sp
   1e36a:	f7ff febf 	bl	1e0ec <id_find>
   1e36e:	2800      	cmp	r0, #0
   1e370:	daf5      	bge.n	1e35e <id_create+0x16>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1e372:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1e376:	4b13      	ldr	r3, [pc, #76]	; (1e3c4 <id_create+0x7c>)
   1e378:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   1e37a:	2207      	movs	r2, #7
   1e37c:	4669      	mov	r1, sp
   1e37e:	4620      	mov	r0, r4
   1e380:	f01a f83b 	bl	383fa <memcpy>

		if (addr) {
   1e384:	b125      	cbz	r5, 1e390 <id_create+0x48>
   1e386:	2207      	movs	r2, #7
   1e388:	4621      	mov	r1, r4
   1e38a:	4628      	mov	r0, r5
   1e38c:	f01a f835 	bl	383fa <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e390:	4b0d      	ldr	r3, [pc, #52]	; (1e3c8 <id_create+0x80>)
   1e392:	e8d3 2faf 	lda	r2, [r3]
   1e396:	f3c2 0380 	ubfx	r3, r2, #2, #1
#endif
	/* Only store if stack was already initialized. Before initialization
	 * we don't know the flash content, so it's potentially harmful to
	 * try to write anything there.
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   1e39a:	f012 0f04 	tst.w	r2, #4
   1e39e:	d10b      	bne.n	1e3b8 <id_create+0x70>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   1e3a0:	4618      	mov	r0, r3
   1e3a2:	b003      	add	sp, #12
   1e3a4:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1e3a6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1e3aa:	2207      	movs	r2, #7
   1e3ac:	4629      	mov	r1, r5
   1e3ae:	4805      	ldr	r0, [pc, #20]	; (1e3c4 <id_create+0x7c>)
   1e3b0:	4420      	add	r0, r4
   1e3b2:	f01a f822 	bl	383fa <memcpy>
}
   1e3b6:	e7eb      	b.n	1e390 <id_create+0x48>
		bt_settings_save_id();
   1e3b8:	f7fc fe22 	bl	1b000 <bt_settings_save_id>
	return 0;
   1e3bc:	2300      	movs	r3, #0
   1e3be:	e7ef      	b.n	1e3a0 <id_create+0x58>
   1e3c0:	0004203c 	.word	0x0004203c
   1e3c4:	20008000 	.word	0x20008000
   1e3c8:	200080cc 	.word	0x200080cc

0001e3cc <bt_id_pending_keys_update>:
{
   1e3cc:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e3ce:	4b09      	ldr	r3, [pc, #36]	; (1e3f4 <bt_id_pending_keys_update+0x28>)
   1e3d0:	e8d3 2fef 	ldaex	r2, [r3]
   1e3d4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
   1e3d8:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1e3dc:	2800      	cmp	r0, #0
   1e3de:	d1f7      	bne.n	1e3d0 <bt_id_pending_keys_update+0x4>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
   1e3e0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   1e3e4:	d100      	bne.n	1e3e8 <bt_id_pending_keys_update+0x1c>
}
   1e3e6:	bd08      	pop	{r3, pc}
			bt_keys_foreach_type(BT_KEYS_IRK, pending_id_update, NULL);
   1e3e8:	2200      	movs	r2, #0
   1e3ea:	4903      	ldr	r1, [pc, #12]	; (1e3f8 <bt_id_pending_keys_update+0x2c>)
   1e3ec:	2002      	movs	r0, #2
   1e3ee:	f00a f999 	bl	28724 <bt_keys_foreach_type>
}
   1e3f2:	e7f8      	b.n	1e3e6 <bt_id_pending_keys_update+0x1a>
   1e3f4:	200080cc 	.word	0x200080cc
   1e3f8:	00038b6b 	.word	0x00038b6b

0001e3fc <bt_id_find_conflict>:
{
   1e3fc:	b500      	push	{lr}
   1e3fe:	b083      	sub	sp, #12
	struct bt_id_conflict conflict = {
   1e400:	2300      	movs	r3, #0
   1e402:	9300      	str	r3, [sp, #0]
   1e404:	9301      	str	r3, [sp, #4]
   1e406:	9000      	str	r0, [sp, #0]
	bt_keys_foreach_type(BT_KEYS_IRK, find_rl_conflict, &conflict);
   1e408:	466a      	mov	r2, sp
   1e40a:	4904      	ldr	r1, [pc, #16]	; (1e41c <bt_id_find_conflict+0x20>)
   1e40c:	2002      	movs	r0, #2
   1e40e:	f00a f989 	bl	28724 <bt_keys_foreach_type>
}
   1e412:	9801      	ldr	r0, [sp, #4]
   1e414:	b003      	add	sp, #12
   1e416:	f85d fb04 	ldr.w	pc, [sp], #4
   1e41a:	bf00      	nop
   1e41c:	0001e181 	.word	0x0001e181

0001e420 <bt_id_add>:
	CHECKIF(keys == NULL) {
   1e420:	2800      	cmp	r0, #0
   1e422:	f000 812c 	beq.w	1e67e <bt_id_add+0x25e>
{
   1e426:	b530      	push	{r4, r5, lr}
   1e428:	b0a1      	sub	sp, #132	; 0x84
   1e42a:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1e42c:	4b94      	ldr	r3, [pc, #592]	; (1e680 <bt_id_add+0x260>)
   1e42e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   1e432:	b123      	cbz	r3, 1e43e <bt_id_add+0x1e>
   1e434:	4a92      	ldr	r2, [pc, #584]	; (1e680 <bt_id_add+0x260>)
   1e436:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   1e43a:	4293      	cmp	r3, r2
   1e43c:	d20b      	bcs.n	1e456 <bt_id_add+0x36>
		bt_dev.le.rl_entries++;
   1e43e:	4a90      	ldr	r2, [pc, #576]	; (1e680 <bt_id_add+0x260>)
   1e440:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   1e444:	3301      	adds	r3, #1
   1e446:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1e44a:	7a23      	ldrb	r3, [r4, #8]
   1e44c:	f043 0304 	orr.w	r3, r3, #4
   1e450:	7223      	strb	r3, [r4, #8]
}
   1e452:	b021      	add	sp, #132	; 0x84
   1e454:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1e456:	2206      	movs	r2, #6
   1e458:	2100      	movs	r1, #0
   1e45a:	4608      	mov	r0, r1
   1e45c:	f002 fbd6 	bl	20c0c <bt_conn_lookup_state_le>
	if (conn) {
   1e460:	4605      	mov	r5, r0
   1e462:	b138      	cbz	r0, 1e474 <bt_id_add+0x54>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_ADD);
   1e464:	2101      	movs	r1, #1
   1e466:	4620      	mov	r0, r4
   1e468:	f7ff ff08 	bl	1e27c <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   1e46c:	4628      	mov	r0, r5
   1e46e:	f001 ff23 	bl	202b8 <bt_conn_unref>
		return;
   1e472:	e7ee      	b.n	1e452 <bt_id_add+0x32>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1e474:	2100      	movs	r1, #0
   1e476:	4883      	ldr	r0, [pc, #524]	; (1e684 <bt_id_add+0x264>)
   1e478:	f000 fd84 	bl	1ef84 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
   1e47c:	4b80      	ldr	r3, [pc, #512]	; (1e680 <bt_id_add+0x260>)
   1e47e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   1e482:	bb4b      	cbnz	r3, 1e4d8 <bt_id_add+0xb8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
   1e484:	4b7e      	ldr	r3, [pc, #504]	; (1e680 <bt_id_add+0x260>)
   1e486:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   1e48a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   1e48e:	429a      	cmp	r2, r3
   1e490:	d04c      	beq.n	1e52c <bt_id_add+0x10c>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1e492:	1c65      	adds	r5, r4, #1
   1e494:	4622      	mov	r2, r4
   1e496:	f812 0b2a 	ldrb.w	r0, [r2], #42
   1e49a:	4629      	mov	r1, r5
   1e49c:	f01a fac1 	bl	38a22 <hci_id_add>
	if (err) {
   1e4a0:	2800      	cmp	r0, #0
   1e4a2:	f040 80a0 	bne.w	1e5e6 <bt_id_add+0x1c6>
	bt_dev.le.rl_entries++;
   1e4a6:	4a76      	ldr	r2, [pc, #472]	; (1e680 <bt_id_add+0x260>)
   1e4a8:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   1e4ac:	3301      	adds	r3, #1
   1e4ae:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
   1e4b2:	7a23      	ldrb	r3, [r4, #8]
   1e4b4:	f043 0304 	orr.w	r3, r3, #4
   1e4b8:	7223      	strb	r3, [r4, #8]
	err = le_set_privacy_mode(&keys->addr, BT_HCI_LE_PRIVACY_MODE_DEVICE);
   1e4ba:	2101      	movs	r1, #1
   1e4bc:	4628      	mov	r0, r5
   1e4be:	f7ff feed 	bl	1e29c <le_set_privacy_mode>
	if (err) {
   1e4c2:	2800      	cmp	r0, #0
   1e4c4:	f040 80b5 	bne.w	1e632 <bt_id_add+0x212>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1e4c8:	2001      	movs	r0, #1
   1e4ca:	f01a faff 	bl	38acc <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1e4ce:	2100      	movs	r1, #0
   1e4d0:	486d      	ldr	r0, [pc, #436]	; (1e688 <bt_id_add+0x268>)
   1e4d2:	f000 fd57 	bl	1ef84 <bt_le_ext_adv_foreach>
   1e4d6:	e7bc      	b.n	1e452 <bt_id_add+0x32>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1e4d8:	2000      	movs	r0, #0
   1e4da:	f01a faf7 	bl	38acc <addr_res_enable>
		if (err) {
   1e4de:	2800      	cmp	r0, #0
   1e4e0:	d0d0      	beq.n	1e484 <bt_id_add+0x64>
			LOG_WRN("Failed to disable address resolution");
   1e4e2:	4b6a      	ldr	r3, [pc, #424]	; (1e68c <bt_id_add+0x26c>)
   1e4e4:	9307      	str	r3, [sp, #28]
   1e4e6:	2202      	movs	r2, #2
   1e4e8:	f88d 2004 	strb.w	r2, [sp, #4]
   1e4ec:	2300      	movs	r3, #0
   1e4ee:	f88d 3005 	strb.w	r3, [sp, #5]
   1e4f2:	f88d 3006 	strb.w	r3, [sp, #6]
   1e4f6:	f88d 3007 	strb.w	r3, [sp, #7]
   1e4fa:	9901      	ldr	r1, [sp, #4]
   1e4fc:	9106      	str	r1, [sp, #24]
   1e4fe:	4619      	mov	r1, r3
   1e500:	f363 0100 	bfi	r1, r3, #0, #1
   1e504:	f363 0141 	bfi	r1, r3, #1, #1
   1e508:	f363 0182 	bfi	r1, r3, #2, #1
   1e50c:	f363 01c5 	bfi	r1, r3, #3, #3
   1e510:	f362 1188 	bfi	r1, r2, #6, #3
   1e514:	2208      	movs	r2, #8
   1e516:	f362 2152 	bfi	r1, r2, #9, #10
   1e51a:	f363 41de 	bfi	r1, r3, #19, #12
   1e51e:	f363 71df 	bfi	r1, r3, #31, #1
   1e522:	aa06      	add	r2, sp, #24
   1e524:	485a      	ldr	r0, [pc, #360]	; (1e690 <bt_id_add+0x270>)
   1e526:	f7f8 fa11 	bl	1694c <z_impl_z_log_msg_static_create>
			goto done;
   1e52a:	e7cd      	b.n	1e4c8 <bt_id_add+0xa8>
		LOG_WRN("Resolving list size exceeded. Switching to host.");
   1e52c:	4b59      	ldr	r3, [pc, #356]	; (1e694 <bt_id_add+0x274>)
   1e52e:	9319      	str	r3, [sp, #100]	; 0x64
   1e530:	2302      	movs	r3, #2
   1e532:	f88d 3004 	strb.w	r3, [sp, #4]
   1e536:	2500      	movs	r5, #0
   1e538:	f88d 5005 	strb.w	r5, [sp, #5]
   1e53c:	f88d 5006 	strb.w	r5, [sp, #6]
   1e540:	f88d 5007 	strb.w	r5, [sp, #7]
   1e544:	9a01      	ldr	r2, [sp, #4]
   1e546:	9218      	str	r2, [sp, #96]	; 0x60
   1e548:	4629      	mov	r1, r5
   1e54a:	f365 0100 	bfi	r1, r5, #0, #1
   1e54e:	f365 0141 	bfi	r1, r5, #1, #1
   1e552:	f365 0182 	bfi	r1, r5, #2, #1
   1e556:	f365 01c5 	bfi	r1, r5, #3, #3
   1e55a:	f363 1188 	bfi	r1, r3, #6, #3
   1e55e:	2308      	movs	r3, #8
   1e560:	f363 2152 	bfi	r1, r3, #9, #10
   1e564:	f365 41de 	bfi	r1, r5, #19, #12
   1e568:	f365 71df 	bfi	r1, r5, #31, #1
   1e56c:	462b      	mov	r3, r5
   1e56e:	aa18      	add	r2, sp, #96	; 0x60
   1e570:	4847      	ldr	r0, [pc, #284]	; (1e690 <bt_id_add+0x270>)
   1e572:	f7f8 f9eb 	bl	1694c <z_impl_z_log_msg_static_create>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
   1e576:	462a      	mov	r2, r5
   1e578:	4629      	mov	r1, r5
   1e57a:	f242 0029 	movw	r0, #8233	; 0x2029
   1e57e:	f7fd ffe7 	bl	1c550 <bt_hci_cmd_send_sync>
		if (err) {
   1e582:	b950      	cbnz	r0, 1e59a <bt_id_add+0x17a>
		bt_dev.le.rl_entries++;
   1e584:	4a3e      	ldr	r2, [pc, #248]	; (1e680 <bt_id_add+0x260>)
   1e586:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   1e58a:	3301      	adds	r3, #1
   1e58c:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
   1e590:	7a23      	ldrb	r3, [r4, #8]
   1e592:	f043 0304 	orr.w	r3, r3, #4
   1e596:	7223      	strb	r3, [r4, #8]
		goto done;
   1e598:	e796      	b.n	1e4c8 <bt_id_add+0xa8>
			LOG_ERR("Failed to clear resolution list");
   1e59a:	4b3f      	ldr	r3, [pc, #252]	; (1e698 <bt_id_add+0x278>)
   1e59c:	931f      	str	r3, [sp, #124]	; 0x7c
   1e59e:	2302      	movs	r3, #2
   1e5a0:	f88d 3004 	strb.w	r3, [sp, #4]
   1e5a4:	462b      	mov	r3, r5
   1e5a6:	f88d 5005 	strb.w	r5, [sp, #5]
   1e5aa:	f88d 5006 	strb.w	r5, [sp, #6]
   1e5ae:	f88d 5007 	strb.w	r5, [sp, #7]
   1e5b2:	9a01      	ldr	r2, [sp, #4]
   1e5b4:	921e      	str	r2, [sp, #120]	; 0x78
   1e5b6:	4629      	mov	r1, r5
   1e5b8:	f365 0100 	bfi	r1, r5, #0, #1
   1e5bc:	f365 0141 	bfi	r1, r5, #1, #1
   1e5c0:	f365 0182 	bfi	r1, r5, #2, #1
   1e5c4:	f365 01c5 	bfi	r1, r5, #3, #3
   1e5c8:	2201      	movs	r2, #1
   1e5ca:	f362 1188 	bfi	r1, r2, #6, #3
   1e5ce:	2208      	movs	r2, #8
   1e5d0:	f362 2152 	bfi	r1, r2, #9, #10
   1e5d4:	f365 41de 	bfi	r1, r5, #19, #12
   1e5d8:	f365 71df 	bfi	r1, r5, #31, #1
   1e5dc:	aa1e      	add	r2, sp, #120	; 0x78
   1e5de:	482c      	ldr	r0, [pc, #176]	; (1e690 <bt_id_add+0x270>)
   1e5e0:	f7f8 f9b4 	bl	1694c <z_impl_z_log_msg_static_create>
			goto done;
   1e5e4:	e770      	b.n	1e4c8 <bt_id_add+0xa8>
		LOG_ERR("Failed to add IRK to controller");
   1e5e6:	4b2d      	ldr	r3, [pc, #180]	; (1e69c <bt_id_add+0x27c>)
   1e5e8:	9313      	str	r3, [sp, #76]	; 0x4c
   1e5ea:	2302      	movs	r3, #2
   1e5ec:	f88d 3004 	strb.w	r3, [sp, #4]
   1e5f0:	2300      	movs	r3, #0
   1e5f2:	f88d 3005 	strb.w	r3, [sp, #5]
   1e5f6:	f88d 3006 	strb.w	r3, [sp, #6]
   1e5fa:	f88d 3007 	strb.w	r3, [sp, #7]
   1e5fe:	9a01      	ldr	r2, [sp, #4]
   1e600:	9212      	str	r2, [sp, #72]	; 0x48
   1e602:	4619      	mov	r1, r3
   1e604:	f363 0100 	bfi	r1, r3, #0, #1
   1e608:	f363 0141 	bfi	r1, r3, #1, #1
   1e60c:	f363 0182 	bfi	r1, r3, #2, #1
   1e610:	f363 01c5 	bfi	r1, r3, #3, #3
   1e614:	2201      	movs	r2, #1
   1e616:	f362 1188 	bfi	r1, r2, #6, #3
   1e61a:	2208      	movs	r2, #8
   1e61c:	f362 2152 	bfi	r1, r2, #9, #10
   1e620:	f363 41de 	bfi	r1, r3, #19, #12
   1e624:	f363 71df 	bfi	r1, r3, #31, #1
   1e628:	aa12      	add	r2, sp, #72	; 0x48
   1e62a:	4819      	ldr	r0, [pc, #100]	; (1e690 <bt_id_add+0x270>)
   1e62c:	f7f8 f98e 	bl	1694c <z_impl_z_log_msg_static_create>
		goto done;
   1e630:	e74a      	b.n	1e4c8 <bt_id_add+0xa8>
		LOG_ERR("Failed to set privacy mode");
   1e632:	4b1b      	ldr	r3, [pc, #108]	; (1e6a0 <bt_id_add+0x280>)
   1e634:	930d      	str	r3, [sp, #52]	; 0x34
   1e636:	2302      	movs	r3, #2
   1e638:	f88d 3004 	strb.w	r3, [sp, #4]
   1e63c:	2300      	movs	r3, #0
   1e63e:	f88d 3005 	strb.w	r3, [sp, #5]
   1e642:	f88d 3006 	strb.w	r3, [sp, #6]
   1e646:	f88d 3007 	strb.w	r3, [sp, #7]
   1e64a:	9a01      	ldr	r2, [sp, #4]
   1e64c:	920c      	str	r2, [sp, #48]	; 0x30
   1e64e:	4619      	mov	r1, r3
   1e650:	f363 0100 	bfi	r1, r3, #0, #1
   1e654:	f363 0141 	bfi	r1, r3, #1, #1
   1e658:	f363 0182 	bfi	r1, r3, #2, #1
   1e65c:	f363 01c5 	bfi	r1, r3, #3, #3
   1e660:	2201      	movs	r2, #1
   1e662:	f362 1188 	bfi	r1, r2, #6, #3
   1e666:	2208      	movs	r2, #8
   1e668:	f362 2152 	bfi	r1, r2, #9, #10
   1e66c:	f363 41de 	bfi	r1, r3, #19, #12
   1e670:	f363 71df 	bfi	r1, r3, #31, #1
   1e674:	aa0c      	add	r2, sp, #48	; 0x30
   1e676:	4806      	ldr	r0, [pc, #24]	; (1e690 <bt_id_add+0x270>)
   1e678:	f7f8 f968 	bl	1694c <z_impl_z_log_msg_static_create>
		goto done;
   1e67c:	e724      	b.n	1e4c8 <bt_id_add+0xa8>
   1e67e:	4770      	bx	lr
   1e680:	20008000 	.word	0x20008000
   1e684:	000389f7 	.word	0x000389f7
   1e688:	000389dd 	.word	0x000389dd
   1e68c:	00042a6c 	.word	0x00042a6c
   1e690:	0003f3e8 	.word	0x0003f3e8
   1e694:	00042a94 	.word	0x00042a94
   1e698:	00042ac8 	.word	0x00042ac8
   1e69c:	00042ae8 	.word	0x00042ae8
   1e6a0:	00042b08 	.word	0x00042b08

0001e6a4 <bt_id_del>:
	CHECKIF(keys == NULL) {
   1e6a4:	2800      	cmp	r0, #0
   1e6a6:	f000 80d6 	beq.w	1e856 <bt_id_del+0x1b2>
{
   1e6aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6ac:	b089      	sub	sp, #36	; 0x24
   1e6ae:	af00      	add	r7, sp, #0
   1e6b0:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
   1e6b2:	4b69      	ldr	r3, [pc, #420]	; (1e858 <bt_id_del+0x1b4>)
   1e6b4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   1e6b8:	b12b      	cbz	r3, 1e6c6 <bt_id_del+0x22>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
   1e6ba:	4a67      	ldr	r2, [pc, #412]	; (1e858 <bt_id_del+0x1b4>)
   1e6bc:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
   1e6c0:	3301      	adds	r3, #1
	if (!bt_dev.le.rl_size ||
   1e6c2:	429a      	cmp	r2, r3
   1e6c4:	dd1b      	ble.n	1e6fe <bt_id_del+0x5a>
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   1e6c6:	4b64      	ldr	r3, [pc, #400]	; (1e858 <bt_id_del+0x1b4>)
   1e6c8:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   1e6cc:	b153      	cbz	r3, 1e6e4 <bt_id_del+0x40>
			bt_dev.le.rl_entries--;
   1e6ce:	3b01      	subs	r3, #1
   1e6d0:	4a61      	ldr	r2, [pc, #388]	; (1e858 <bt_id_del+0x1b4>)
   1e6d2:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1e6d6:	7a23      	ldrb	r3, [r4, #8]
   1e6d8:	f023 0304 	bic.w	r3, r3, #4
   1e6dc:	7223      	strb	r3, [r4, #8]
}
   1e6de:	3724      	adds	r7, #36	; 0x24
   1e6e0:	46bd      	mov	sp, r7
   1e6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(bt_dev.le.rl_entries > 0);
   1e6e4:	4c5d      	ldr	r4, [pc, #372]	; (1e85c <bt_id_del+0x1b8>)
   1e6e6:	f240 4323 	movw	r3, #1059	; 0x423
   1e6ea:	4622      	mov	r2, r4
   1e6ec:	495c      	ldr	r1, [pc, #368]	; (1e860 <bt_id_del+0x1bc>)
   1e6ee:	485d      	ldr	r0, [pc, #372]	; (1e864 <bt_id_del+0x1c0>)
   1e6f0:	f017 fdd0 	bl	36294 <assert_print>
   1e6f4:	f240 4123 	movw	r1, #1059	; 0x423
   1e6f8:	4620      	mov	r0, r4
   1e6fa:	f017 fdc4 	bl	36286 <assert_post_action>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECTING);
   1e6fe:	2206      	movs	r2, #6
   1e700:	2100      	movs	r1, #0
   1e702:	4608      	mov	r0, r1
   1e704:	f002 fa82 	bl	20c0c <bt_conn_lookup_state_le>
	if (conn) {
   1e708:	4605      	mov	r5, r0
   1e70a:	b138      	cbz	r0, 1e71c <bt_id_del+0x78>
		bt_id_pending_keys_update_set(keys, BT_KEYS_ID_PENDING_DEL);
   1e70c:	2102      	movs	r1, #2
   1e70e:	4620      	mov	r0, r4
   1e710:	f7ff fdb4 	bl	1e27c <bt_id_pending_keys_update_set>
		bt_conn_unref(conn);
   1e714:	4628      	mov	r0, r5
   1e716:	f001 fdcf 	bl	202b8 <bt_conn_unref>
		return;
   1e71a:	e7e0      	b.n	1e6de <bt_id_del+0x3a>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
   1e71c:	2100      	movs	r1, #0
   1e71e:	4852      	ldr	r0, [pc, #328]	; (1e868 <bt_id_del+0x1c4>)
   1e720:	f000 fc30 	bl	1ef84 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
   1e724:	2000      	movs	r0, #0
   1e726:	f01a f9d1 	bl	38acc <addr_res_enable>
	if (err) {
   1e72a:	4601      	mov	r1, r0
   1e72c:	b9f8      	cbnz	r0, 1e76e <bt_id_del+0xca>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
   1e72e:	4b4a      	ldr	r3, [pc, #296]	; (1e858 <bt_id_del+0x1b4>)
   1e730:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
   1e734:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
   1e738:	429a      	cmp	r2, r3
   1e73a:	d857      	bhi.n	1e7ec <bt_id_del+0x148>
	err = hci_id_del(&keys->addr);
   1e73c:	1c60      	adds	r0, r4, #1
   1e73e:	f01a f9aa 	bl	38a96 <hci_id_del>
	if (err) {
   1e742:	2800      	cmp	r0, #0
   1e744:	d160      	bne.n	1e808 <bt_id_del+0x164>
	bt_dev.le.rl_entries--;
   1e746:	4a44      	ldr	r2, [pc, #272]	; (1e858 <bt_id_del+0x1b4>)
   1e748:	f892 3119 	ldrb.w	r3, [r2, #281]	; 0x119
   1e74c:	3b01      	subs	r3, #1
   1e74e:	f882 3119 	strb.w	r3, [r2, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
   1e752:	7a23      	ldrb	r3, [r4, #8]
   1e754:	f023 0304 	bic.w	r3, r3, #4
   1e758:	7223      	strb	r3, [r4, #8]
	if (bt_dev.le.rl_entries) {
   1e75a:	4b3f      	ldr	r3, [pc, #252]	; (1e858 <bt_id_del+0x1b4>)
   1e75c:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
   1e760:	2b00      	cmp	r3, #0
   1e762:	d174      	bne.n	1e84e <bt_id_del+0x1aa>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
   1e764:	2100      	movs	r1, #0
   1e766:	4841      	ldr	r0, [pc, #260]	; (1e86c <bt_id_del+0x1c8>)
   1e768:	f000 fc0c 	bl	1ef84 <bt_le_ext_adv_foreach>
   1e76c:	e7b7      	b.n	1e6de <bt_id_del+0x3a>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1e76e:	466d      	mov	r5, sp
   1e770:	b088      	sub	sp, #32
   1e772:	466b      	mov	r3, sp
   1e774:	f113 0210 	adds.w	r2, r3, #16
   1e778:	d00d      	beq.n	1e796 <bt_id_del+0xf2>
   1e77a:	200c      	movs	r0, #12
   1e77c:	b13a      	cbz	r2, 1e78e <bt_id_del+0xea>
   1e77e:	4604      	mov	r4, r0
   1e780:	2804      	cmp	r0, #4
   1e782:	dd01      	ble.n	1e788 <bt_id_del+0xe4>
   1e784:	4e3a      	ldr	r6, [pc, #232]	; (1e870 <bt_id_del+0x1cc>)
   1e786:	615e      	str	r6, [r3, #20]
   1e788:	2c08      	cmp	r4, #8
   1e78a:	dd07      	ble.n	1e79c <bt_id_del+0xf8>
   1e78c:	6199      	str	r1, [r3, #24]
   1e78e:	280b      	cmp	r0, #11
   1e790:	dd29      	ble.n	1e7e6 <bt_id_del+0x142>
   1e792:	240c      	movs	r4, #12
   1e794:	e004      	b.n	1e7a0 <bt_id_del+0xfc>
   1e796:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1e79a:	e7ef      	b.n	1e77c <bt_id_del+0xd8>
   1e79c:	f06f 041b 	mvn.w	r4, #27
   1e7a0:	b13a      	cbz	r2, 1e7b2 <bt_id_del+0x10e>
   1e7a2:	2103      	movs	r1, #3
   1e7a4:	7139      	strb	r1, [r7, #4]
   1e7a6:	2100      	movs	r1, #0
   1e7a8:	7179      	strb	r1, [r7, #5]
   1e7aa:	71b9      	strb	r1, [r7, #6]
   1e7ac:	71f9      	strb	r1, [r7, #7]
   1e7ae:	6878      	ldr	r0, [r7, #4]
   1e7b0:	6118      	str	r0, [r3, #16]
   1e7b2:	2100      	movs	r1, #0
   1e7b4:	f36f 0100 	bfc	r1, #0, #1
   1e7b8:	f36f 0141 	bfc	r1, #1, #1
   1e7bc:	f36f 0182 	bfc	r1, #2, #1
   1e7c0:	f36f 01c5 	bfc	r1, #3, #3
   1e7c4:	2301      	movs	r3, #1
   1e7c6:	f363 1188 	bfi	r1, r3, #6, #3
   1e7ca:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   1e7ce:	f363 2152 	bfi	r1, r3, #9, #10
   1e7d2:	f36f 41de 	bfc	r1, #19, #12
   1e7d6:	f36f 71df 	bfc	r1, #31, #1
   1e7da:	2300      	movs	r3, #0
   1e7dc:	4825      	ldr	r0, [pc, #148]	; (1e874 <bt_id_del+0x1d0>)
   1e7de:	f7f8 f8b5 	bl	1694c <z_impl_z_log_msg_static_create>
   1e7e2:	46ad      	mov	sp, r5
		goto done;
   1e7e4:	e7b9      	b.n	1e75a <bt_id_del+0xb6>
		LOG_ERR("Disabling address resolution failed (err %d)", err);
   1e7e6:	f06f 041b 	mvn.w	r4, #27
   1e7ea:	e7d9      	b.n	1e7a0 <bt_id_del+0xfc>
		bt_dev.le.rl_entries--;
   1e7ec:	3a01      	subs	r2, #1
   1e7ee:	4b1a      	ldr	r3, [pc, #104]	; (1e858 <bt_id_del+0x1b4>)
   1e7f0:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
   1e7f4:	7a23      	ldrb	r3, [r4, #8]
   1e7f6:	f023 0304 	bic.w	r3, r3, #4
   1e7fa:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach_type(BT_KEYS_IRK, keys_add_id, NULL);
   1e7fc:	2200      	movs	r2, #0
   1e7fe:	491e      	ldr	r1, [pc, #120]	; (1e878 <bt_id_del+0x1d4>)
   1e800:	2002      	movs	r0, #2
   1e802:	f009 ff8f 	bl	28724 <bt_keys_foreach_type>
		goto done;
   1e806:	e7a8      	b.n	1e75a <bt_id_del+0xb6>
		LOG_ERR("Failed to remove IRK from controller");
   1e808:	4b1c      	ldr	r3, [pc, #112]	; (1e87c <bt_id_del+0x1d8>)
   1e80a:	61fb      	str	r3, [r7, #28]
   1e80c:	2302      	movs	r3, #2
   1e80e:	713b      	strb	r3, [r7, #4]
   1e810:	2300      	movs	r3, #0
   1e812:	717b      	strb	r3, [r7, #5]
   1e814:	71bb      	strb	r3, [r7, #6]
   1e816:	71fb      	strb	r3, [r7, #7]
   1e818:	687a      	ldr	r2, [r7, #4]
   1e81a:	61ba      	str	r2, [r7, #24]
   1e81c:	4619      	mov	r1, r3
   1e81e:	f363 0100 	bfi	r1, r3, #0, #1
   1e822:	f363 0141 	bfi	r1, r3, #1, #1
   1e826:	f363 0182 	bfi	r1, r3, #2, #1
   1e82a:	f363 01c5 	bfi	r1, r3, #3, #3
   1e82e:	2201      	movs	r2, #1
   1e830:	f362 1188 	bfi	r1, r2, #6, #3
   1e834:	2208      	movs	r2, #8
   1e836:	f362 2152 	bfi	r1, r2, #9, #10
   1e83a:	f363 41de 	bfi	r1, r3, #19, #12
   1e83e:	f363 71df 	bfi	r1, r3, #31, #1
   1e842:	f107 0218 	add.w	r2, r7, #24
   1e846:	480b      	ldr	r0, [pc, #44]	; (1e874 <bt_id_del+0x1d0>)
   1e848:	f7f8 f880 	bl	1694c <z_impl_z_log_msg_static_create>
		goto done;
   1e84c:	e785      	b.n	1e75a <bt_id_del+0xb6>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
   1e84e:	2001      	movs	r0, #1
   1e850:	f01a f93c 	bl	38acc <addr_res_enable>
   1e854:	e786      	b.n	1e764 <bt_id_del+0xc0>
   1e856:	4770      	bx	lr
   1e858:	20008000 	.word	0x20008000
   1e85c:	00042984 	.word	0x00042984
   1e860:	00042b24 	.word	0x00042b24
   1e864:	0003f72c 	.word	0x0003f72c
   1e868:	000389f7 	.word	0x000389f7
   1e86c:	000389dd 	.word	0x000389dd
   1e870:	00042b40 	.word	0x00042b40
   1e874:	0003f3e8 	.word	0x0003f3e8
   1e878:	00038a7b 	.word	0x00038a7b
   1e87c:	00042b70 	.word	0x00042b70

0001e880 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   1e880:	b570      	push	{r4, r5, r6, lr}
   1e882:	b08a      	sub	sp, #40	; 0x28
   1e884:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   1e886:	4605      	mov	r5, r0
   1e888:	b188      	cbz	r0, 1e8ae <bt_id_create+0x2e>
	return memcmp(a, b, sizeof(*a));
   1e88a:	2207      	movs	r2, #7
   1e88c:	4936      	ldr	r1, [pc, #216]	; (1e968 <bt_id_create+0xe8>)
   1e88e:	f019 fd8f 	bl	383b0 <memcmp>
   1e892:	b160      	cbz	r0, 1e8ae <bt_id_create+0x2e>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1e894:	782b      	ldrb	r3, [r5, #0]
   1e896:	2b01      	cmp	r3, #1
   1e898:	d132      	bne.n	1e900 <bt_id_create+0x80>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   1e89a:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1e89c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e8a0:	2bc0      	cmp	r3, #192	; 0xc0
   1e8a2:	d12d      	bne.n	1e900 <bt_id_create+0x80>
			LOG_ERR("Only static random identity address supported");
			return -EINVAL;
		}

		if (id_find(addr) >= 0) {
   1e8a4:	4628      	mov	r0, r5
   1e8a6:	f7ff fc21 	bl	1e0ec <id_find>
   1e8aa:	2800      	cmp	r0, #0
   1e8ac:	da53      	bge.n	1e956 <bt_id_create+0xd6>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1e8ae:	2c00      	cmp	r4, #0
   1e8b0:	d154      	bne.n	1e95c <bt_id_create+0xdc>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1e8b2:	4b2e      	ldr	r3, [pc, #184]	; (1e96c <bt_id_create+0xec>)
   1e8b4:	79db      	ldrb	r3, [r3, #7]
   1e8b6:	2b01      	cmp	r3, #1
   1e8b8:	d053      	beq.n	1e962 <bt_id_create+0xe2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e8ba:	4b2d      	ldr	r3, [pc, #180]	; (1e970 <bt_id_create+0xf0>)
   1e8bc:	e8d3 3faf 	lda	r3, [r3]
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1e8c0:	f013 0f01 	tst.w	r3, #1
   1e8c4:	d10d      	bne.n	1e8e2 <bt_id_create+0x62>
		uint8_t zero_irk[16] = { 0 };
   1e8c6:	2300      	movs	r3, #0
   1e8c8:	9300      	str	r3, [sp, #0]
   1e8ca:	9301      	str	r3, [sp, #4]
   1e8cc:	9302      	str	r3, [sp, #8]
   1e8ce:	9303      	str	r3, [sp, #12]

		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   1e8d0:	2d00      	cmp	r5, #0
   1e8d2:	d03d      	beq.n	1e950 <bt_id_create+0xd0>
   1e8d4:	2207      	movs	r2, #7
   1e8d6:	4924      	ldr	r1, [pc, #144]	; (1e968 <bt_id_create+0xe8>)
   1e8d8:	4628      	mov	r0, r5
   1e8da:	f019 fd69 	bl	383b0 <memcmp>
   1e8de:	2800      	cmp	r0, #0
   1e8e0:	d036      	beq.n	1e950 <bt_id_create+0xd0>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count;
   1e8e2:	4b22      	ldr	r3, [pc, #136]	; (1e96c <bt_id_create+0xec>)
   1e8e4:	79de      	ldrb	r6, [r3, #7]
	err = id_create(new_id, addr, irk);
   1e8e6:	4622      	mov	r2, r4
   1e8e8:	4629      	mov	r1, r5
   1e8ea:	4630      	mov	r0, r6
   1e8ec:	f7ff fd2c 	bl	1e348 <id_create>
	if (err) {
   1e8f0:	b920      	cbnz	r0, 1e8fc <bt_id_create+0x7c>
		return err;
	} else {
		bt_dev.id_count++;
   1e8f2:	4a1e      	ldr	r2, [pc, #120]	; (1e96c <bt_id_create+0xec>)
   1e8f4:	79d3      	ldrb	r3, [r2, #7]
   1e8f6:	3301      	adds	r3, #1
   1e8f8:	71d3      	strb	r3, [r2, #7]
	}

	return new_id;
   1e8fa:	4630      	mov	r0, r6
}
   1e8fc:	b00a      	add	sp, #40	; 0x28
   1e8fe:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Only static random identity address supported");
   1e900:	4b1c      	ldr	r3, [pc, #112]	; (1e974 <bt_id_create+0xf4>)
   1e902:	9309      	str	r3, [sp, #36]	; 0x24
   1e904:	2302      	movs	r3, #2
   1e906:	f88d 3000 	strb.w	r3, [sp]
   1e90a:	2300      	movs	r3, #0
   1e90c:	f88d 3001 	strb.w	r3, [sp, #1]
   1e910:	f88d 3002 	strb.w	r3, [sp, #2]
   1e914:	f88d 3003 	strb.w	r3, [sp, #3]
   1e918:	9a00      	ldr	r2, [sp, #0]
   1e91a:	9208      	str	r2, [sp, #32]
   1e91c:	4619      	mov	r1, r3
   1e91e:	f363 0100 	bfi	r1, r3, #0, #1
   1e922:	f363 0141 	bfi	r1, r3, #1, #1
   1e926:	f363 0182 	bfi	r1, r3, #2, #1
   1e92a:	f363 01c5 	bfi	r1, r3, #3, #3
   1e92e:	2201      	movs	r2, #1
   1e930:	f362 1188 	bfi	r1, r2, #6, #3
   1e934:	2208      	movs	r2, #8
   1e936:	f362 2152 	bfi	r1, r2, #9, #10
   1e93a:	f363 41de 	bfi	r1, r3, #19, #12
   1e93e:	f363 71df 	bfi	r1, r3, #31, #1
   1e942:	aa08      	add	r2, sp, #32
   1e944:	480c      	ldr	r0, [pc, #48]	; (1e978 <bt_id_create+0xf8>)
   1e946:	f7f8 f801 	bl	1694c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   1e94a:	f06f 0015 	mvn.w	r0, #21
   1e94e:	e7d5      	b.n	1e8fc <bt_id_create+0x7c>
			return -EINVAL;
   1e950:	f06f 0015 	mvn.w	r0, #21
   1e954:	e7d2      	b.n	1e8fc <bt_id_create+0x7c>
			return -EALREADY;
   1e956:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e95a:	e7cf      	b.n	1e8fc <bt_id_create+0x7c>
		return -EINVAL;
   1e95c:	f06f 0015 	mvn.w	r0, #21
   1e960:	e7cc      	b.n	1e8fc <bt_id_create+0x7c>
		return -ENOMEM;
   1e962:	f06f 000b 	mvn.w	r0, #11
   1e966:	e7c9      	b.n	1e8fc <bt_id_create+0x7c>
   1e968:	0004203c 	.word	0x0004203c
   1e96c:	20008000 	.word	0x20008000
   1e970:	200080cc 	.word	0x200080cc
   1e974:	00042b98 	.word	0x00042b98
   1e978:	0003f3e8 	.word	0x0003f3e8

0001e97c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   1e97c:	b530      	push	{r4, r5, lr}
   1e97e:	b08f      	sub	sp, #60	; 0x3c
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   1e980:	b1f0      	cbz	r0, 1e9c0 <bt_id_read_public_addr+0x44>
   1e982:	4605      	mov	r5, r0
		LOG_WRN("Invalid input parameters");
		return 0U;
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1e984:	aa01      	add	r2, sp, #4
   1e986:	2100      	movs	r1, #0
   1e988:	f241 0009 	movw	r0, #4105	; 0x1009
   1e98c:	f7fd fde0 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1e990:	2800      	cmp	r0, #0
   1e992:	d13c      	bne.n	1ea0e <bt_id_read_public_addr+0x92>
		LOG_WRN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   1e994:	9b01      	ldr	r3, [sp, #4]
   1e996:	68dc      	ldr	r4, [r3, #12]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1e998:	3401      	adds	r4, #1
	return memcmp(a, b, sizeof(*a));
   1e99a:	2206      	movs	r2, #6
   1e99c:	4935      	ldr	r1, [pc, #212]	; (1ea74 <bt_id_read_public_addr+0xf8>)
   1e99e:	4620      	mov	r0, r4
   1e9a0:	f019 fd06 	bl	383b0 <memcmp>
   1e9a4:	b130      	cbz	r0, 1e9b4 <bt_id_read_public_addr+0x38>
   1e9a6:	2206      	movs	r2, #6
   1e9a8:	4933      	ldr	r1, [pc, #204]	; (1ea78 <bt_id_read_public_addr+0xfc>)
   1e9aa:	4620      	mov	r0, r4
   1e9ac:	f019 fd00 	bl	383b0 <memcmp>
   1e9b0:	2800      	cmp	r0, #0
   1e9b2:	d153      	bne.n	1ea5c <bt_id_read_public_addr+0xe0>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		LOG_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1e9b4:	9801      	ldr	r0, [sp, #4]
   1e9b6:	f00a fe75 	bl	296a4 <net_buf_unref>
		return 0U;
   1e9ba:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1e9bc:	b00f      	add	sp, #60	; 0x3c
   1e9be:	bd30      	pop	{r4, r5, pc}
		LOG_WRN("Invalid input parameters");
   1e9c0:	4b2e      	ldr	r3, [pc, #184]	; (1ea7c <bt_id_read_public_addr+0x100>)
   1e9c2:	930d      	str	r3, [sp, #52]	; 0x34
   1e9c4:	2302      	movs	r3, #2
   1e9c6:	f88d 3000 	strb.w	r3, [sp]
   1e9ca:	2400      	movs	r4, #0
   1e9cc:	f88d 4001 	strb.w	r4, [sp, #1]
   1e9d0:	f88d 4002 	strb.w	r4, [sp, #2]
   1e9d4:	f88d 4003 	strb.w	r4, [sp, #3]
   1e9d8:	9a00      	ldr	r2, [sp, #0]
   1e9da:	920c      	str	r2, [sp, #48]	; 0x30
   1e9dc:	4621      	mov	r1, r4
   1e9de:	f364 0100 	bfi	r1, r4, #0, #1
   1e9e2:	f364 0141 	bfi	r1, r4, #1, #1
   1e9e6:	f364 0182 	bfi	r1, r4, #2, #1
   1e9ea:	f364 01c5 	bfi	r1, r4, #3, #3
   1e9ee:	f363 1188 	bfi	r1, r3, #6, #3
   1e9f2:	2308      	movs	r3, #8
   1e9f4:	f363 2152 	bfi	r1, r3, #9, #10
   1e9f8:	f364 41de 	bfi	r1, r4, #19, #12
   1e9fc:	f364 71df 	bfi	r1, r4, #31, #1
   1ea00:	4623      	mov	r3, r4
   1ea02:	aa0c      	add	r2, sp, #48	; 0x30
   1ea04:	481e      	ldr	r0, [pc, #120]	; (1ea80 <bt_id_read_public_addr+0x104>)
   1ea06:	f7f7 ffa1 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0U;
   1ea0a:	4620      	mov	r0, r4
   1ea0c:	e7d6      	b.n	1e9bc <bt_id_read_public_addr+0x40>
		LOG_WRN("Failed to read public address");
   1ea0e:	4b1d      	ldr	r3, [pc, #116]	; (1ea84 <bt_id_read_public_addr+0x108>)
   1ea10:	9307      	str	r3, [sp, #28]
   1ea12:	2302      	movs	r3, #2
   1ea14:	f88d 3000 	strb.w	r3, [sp]
   1ea18:	2400      	movs	r4, #0
   1ea1a:	f88d 4001 	strb.w	r4, [sp, #1]
   1ea1e:	f88d 4002 	strb.w	r4, [sp, #2]
   1ea22:	f88d 4003 	strb.w	r4, [sp, #3]
   1ea26:	9a00      	ldr	r2, [sp, #0]
   1ea28:	9206      	str	r2, [sp, #24]
   1ea2a:	4621      	mov	r1, r4
   1ea2c:	f364 0100 	bfi	r1, r4, #0, #1
   1ea30:	f364 0141 	bfi	r1, r4, #1, #1
   1ea34:	f364 0182 	bfi	r1, r4, #2, #1
   1ea38:	f364 01c5 	bfi	r1, r4, #3, #3
   1ea3c:	f363 1188 	bfi	r1, r3, #6, #3
   1ea40:	2308      	movs	r3, #8
   1ea42:	f363 2152 	bfi	r1, r3, #9, #10
   1ea46:	f364 41de 	bfi	r1, r4, #19, #12
   1ea4a:	f364 71df 	bfi	r1, r4, #31, #1
   1ea4e:	4623      	mov	r3, r4
   1ea50:	aa06      	add	r2, sp, #24
   1ea52:	480b      	ldr	r0, [pc, #44]	; (1ea80 <bt_id_read_public_addr+0x104>)
   1ea54:	f7f7 ff7a 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0U;
   1ea58:	4620      	mov	r0, r4
   1ea5a:	e7af      	b.n	1e9bc <bt_id_read_public_addr+0x40>
	memcpy(dst, src, sizeof(*dst));
   1ea5c:	2206      	movs	r2, #6
   1ea5e:	4621      	mov	r1, r4
   1ea60:	1c68      	adds	r0, r5, #1
   1ea62:	f019 fcca 	bl	383fa <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   1ea66:	2300      	movs	r3, #0
   1ea68:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   1ea6a:	9801      	ldr	r0, [sp, #4]
   1ea6c:	f00a fe1a 	bl	296a4 <net_buf_unref>
	return 1U;
   1ea70:	2001      	movs	r0, #1
   1ea72:	e7a3      	b.n	1e9bc <bt_id_read_public_addr+0x40>
   1ea74:	0004204c 	.word	0x0004204c
   1ea78:	00042044 	.word	0x00042044
   1ea7c:	00042bc8 	.word	0x00042bc8
   1ea80:	0003f3e8 	.word	0x0003f3e8
   1ea84:	00042be4 	.word	0x00042be4

0001ea88 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1ea88:	b500      	push	{lr}
   1ea8a:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1ea8c:	4668      	mov	r0, sp
   1ea8e:	f7ff ff75 	bl	1e97c <bt_id_read_public_addr>
   1ea92:	4b06      	ldr	r3, [pc, #24]	; (1eaac <bt_setup_public_id_addr+0x24>)
   1ea94:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1ea96:	b918      	cbnz	r0, 1eaa0 <bt_setup_public_id_addr+0x18>
		return 0;
   1ea98:	2000      	movs	r0, #0
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1ea9a:	b003      	add	sp, #12
   1ea9c:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   1eaa0:	2200      	movs	r2, #0
   1eaa2:	4669      	mov	r1, sp
   1eaa4:	4610      	mov	r0, r2
   1eaa6:	f7ff fc4f 	bl	1e348 <id_create>
   1eaaa:	e7f6      	b.n	1ea9a <bt_setup_public_id_addr+0x12>
   1eaac:	20008000 	.word	0x20008000

0001eab0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1eab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eab4:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1eab6:	4b4d      	ldr	r3, [pc, #308]	; (1ebec <bt_read_static_addr+0x13c>)
   1eab8:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   1eabc:	f015 0501 	ands.w	r5, r5, #1
   1eac0:	d010      	beq.n	1eae4 <bt_read_static_addr+0x34>
   1eac2:	4606      	mov	r6, r0
   1eac4:	4688      	mov	r8, r1
		LOG_WRN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1eac6:	aa01      	add	r2, sp, #4
   1eac8:	2100      	movs	r1, #0
   1eaca:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1eace:	f7fd fd3f 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1ead2:	4604      	mov	r4, r0
   1ead4:	bb58      	cbnz	r0, 1eb2e <bt_read_static_addr+0x7e>
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   1ead6:	9b01      	ldr	r3, [sp, #4]
   1ead8:	68df      	ldr	r7, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   1eada:	787d      	ldrb	r5, [r7, #1]
   1eadc:	4545      	cmp	r5, r8
   1eade:	bf28      	it	cs
   1eae0:	4645      	movcs	r5, r8
		LOG_WRN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1eae2:	e053      	b.n	1eb8c <bt_read_static_addr+0xdc>
		LOG_WRN("Read Static Addresses command not available");
   1eae4:	4b42      	ldr	r3, [pc, #264]	; (1ebf0 <bt_read_static_addr+0x140>)
   1eae6:	9313      	str	r3, [sp, #76]	; 0x4c
   1eae8:	2202      	movs	r2, #2
   1eaea:	f88d 2000 	strb.w	r2, [sp]
   1eaee:	2300      	movs	r3, #0
   1eaf0:	f88d 3001 	strb.w	r3, [sp, #1]
   1eaf4:	f88d 3002 	strb.w	r3, [sp, #2]
   1eaf8:	f88d 3003 	strb.w	r3, [sp, #3]
   1eafc:	9900      	ldr	r1, [sp, #0]
   1eafe:	9112      	str	r1, [sp, #72]	; 0x48
   1eb00:	4619      	mov	r1, r3
   1eb02:	f363 0100 	bfi	r1, r3, #0, #1
   1eb06:	f363 0141 	bfi	r1, r3, #1, #1
   1eb0a:	f363 0182 	bfi	r1, r3, #2, #1
   1eb0e:	f363 01c5 	bfi	r1, r3, #3, #3
   1eb12:	f362 1188 	bfi	r1, r2, #6, #3
   1eb16:	2208      	movs	r2, #8
   1eb18:	f362 2152 	bfi	r1, r2, #9, #10
   1eb1c:	f363 41de 	bfi	r1, r3, #19, #12
   1eb20:	f363 71df 	bfi	r1, r3, #31, #1
   1eb24:	aa12      	add	r2, sp, #72	; 0x48
   1eb26:	4833      	ldr	r0, [pc, #204]	; (1ebf4 <bt_read_static_addr+0x144>)
   1eb28:	f7f7 ff10 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0;
   1eb2c:	e034      	b.n	1eb98 <bt_read_static_addr+0xe8>
		LOG_WRN("Failed to read static addresses");
   1eb2e:	4b32      	ldr	r3, [pc, #200]	; (1ebf8 <bt_read_static_addr+0x148>)
   1eb30:	930d      	str	r3, [sp, #52]	; 0x34
   1eb32:	2302      	movs	r3, #2
   1eb34:	f88d 3000 	strb.w	r3, [sp]
   1eb38:	2500      	movs	r5, #0
   1eb3a:	f88d 5001 	strb.w	r5, [sp, #1]
   1eb3e:	f88d 5002 	strb.w	r5, [sp, #2]
   1eb42:	f88d 5003 	strb.w	r5, [sp, #3]
   1eb46:	9a00      	ldr	r2, [sp, #0]
   1eb48:	920c      	str	r2, [sp, #48]	; 0x30
   1eb4a:	4629      	mov	r1, r5
   1eb4c:	f365 0100 	bfi	r1, r5, #0, #1
   1eb50:	f365 0141 	bfi	r1, r5, #1, #1
   1eb54:	f365 0182 	bfi	r1, r5, #2, #1
   1eb58:	f365 01c5 	bfi	r1, r5, #3, #3
   1eb5c:	f363 1188 	bfi	r1, r3, #6, #3
   1eb60:	2308      	movs	r3, #8
   1eb62:	f363 2152 	bfi	r1, r3, #9, #10
   1eb66:	f365 41de 	bfi	r1, r5, #19, #12
   1eb6a:	f365 71df 	bfi	r1, r5, #31, #1
   1eb6e:	462b      	mov	r3, r5
   1eb70:	aa0c      	add	r2, sp, #48	; 0x30
   1eb72:	4820      	ldr	r0, [pc, #128]	; (1ebf4 <bt_read_static_addr+0x144>)
   1eb74:	f7f7 feea 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0;
   1eb78:	e00e      	b.n	1eb98 <bt_read_static_addr+0xe8>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1eb7a:	2216      	movs	r2, #22
   1eb7c:	fb02 f004 	mul.w	r0, r2, r4
   1eb80:	1839      	adds	r1, r7, r0
   1eb82:	3102      	adds	r1, #2
   1eb84:	4430      	add	r0, r6
   1eb86:	f019 fc38 	bl	383fa <memcpy>
	for (i = 0; i < cnt; i++) {
   1eb8a:	3401      	adds	r4, #1
   1eb8c:	42a5      	cmp	r5, r4
   1eb8e:	dcf4      	bgt.n	1eb7a <bt_read_static_addr+0xca>
	}

	net_buf_unref(rsp);
   1eb90:	9801      	ldr	r0, [sp, #4]
   1eb92:	f00a fd87 	bl	296a4 <net_buf_unref>
	if (!cnt) {
   1eb96:	b11d      	cbz	r5, 1eba0 <bt_read_static_addr+0xf0>
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   1eb98:	4628      	mov	r0, r5
   1eb9a:	b014      	add	sp, #80	; 0x50
   1eb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("No static addresses stored in controller");
   1eba0:	4b16      	ldr	r3, [pc, #88]	; (1ebfc <bt_read_static_addr+0x14c>)
   1eba2:	9307      	str	r3, [sp, #28]
   1eba4:	2202      	movs	r2, #2
   1eba6:	f88d 2000 	strb.w	r2, [sp]
   1ebaa:	2300      	movs	r3, #0
   1ebac:	f88d 3001 	strb.w	r3, [sp, #1]
   1ebb0:	f88d 3002 	strb.w	r3, [sp, #2]
   1ebb4:	f88d 3003 	strb.w	r3, [sp, #3]
   1ebb8:	9900      	ldr	r1, [sp, #0]
   1ebba:	9106      	str	r1, [sp, #24]
   1ebbc:	4619      	mov	r1, r3
   1ebbe:	f363 0100 	bfi	r1, r3, #0, #1
   1ebc2:	f363 0141 	bfi	r1, r3, #1, #1
   1ebc6:	f363 0182 	bfi	r1, r3, #2, #1
   1ebca:	f363 01c5 	bfi	r1, r3, #3, #3
   1ebce:	f362 1188 	bfi	r1, r2, #6, #3
   1ebd2:	2208      	movs	r2, #8
   1ebd4:	f362 2152 	bfi	r1, r2, #9, #10
   1ebd8:	f363 41de 	bfi	r1, r3, #19, #12
   1ebdc:	f363 71df 	bfi	r1, r3, #31, #1
   1ebe0:	aa06      	add	r2, sp, #24
   1ebe2:	4804      	ldr	r0, [pc, #16]	; (1ebf4 <bt_read_static_addr+0x144>)
   1ebe4:	f7f7 feb2 	bl	1694c <z_impl_z_log_msg_static_create>
   1ebe8:	e7d6      	b.n	1eb98 <bt_read_static_addr+0xe8>
   1ebea:	bf00      	nop
   1ebec:	20008000 	.word	0x20008000
   1ebf0:	00042c04 	.word	0x00042c04
   1ebf4:	0003f3e8 	.word	0x0003f3e8
   1ebf8:	00042c30 	.word	0x00042c30
   1ebfc:	00042c50 	.word	0x00042c50

0001ec00 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1ec00:	b510      	push	{r4, lr}
   1ec02:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1ec04:	4b17      	ldr	r3, [pc, #92]	; (1ec64 <bt_setup_random_id_addr+0x64>)
   1ec06:	79dc      	ldrb	r4, [r3, #7]
   1ec08:	b934      	cbnz	r4, 1ec18 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1ec0a:	2101      	movs	r1, #1
   1ec0c:	a802      	add	r0, sp, #8
   1ec0e:	f7ff ff4f 	bl	1eab0 <bt_read_static_addr>
   1ec12:	4b14      	ldr	r3, [pc, #80]	; (1ec64 <bt_setup_random_id_addr+0x64>)
   1ec14:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1ec16:	b948      	cbnz	r0, 1ec2c <bt_setup_random_id_addr+0x2c>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1ec18:	2100      	movs	r1, #0
   1ec1a:	4608      	mov	r0, r1
   1ec1c:	f7ff fe30 	bl	1e880 <bt_id_create>
   1ec20:	4603      	mov	r3, r0
}
   1ec22:	4618      	mov	r0, r3
   1ec24:	b008      	add	sp, #32
   1ec26:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1ec28:	3401      	adds	r4, #1
   1ec2a:	b2e4      	uxtb	r4, r4
   1ec2c:	4b0d      	ldr	r3, [pc, #52]	; (1ec64 <bt_setup_random_id_addr+0x64>)
   1ec2e:	79db      	ldrb	r3, [r3, #7]
   1ec30:	42a3      	cmp	r3, r4
   1ec32:	d914      	bls.n	1ec5e <bt_setup_random_id_addr+0x5e>
   1ec34:	2206      	movs	r2, #6
   1ec36:	2116      	movs	r1, #22
   1ec38:	ab02      	add	r3, sp, #8
   1ec3a:	fb01 3104 	mla	r1, r1, r4, r3
   1ec3e:	f10d 0001 	add.w	r0, sp, #1
   1ec42:	f019 fbda 	bl	383fa <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   1ec46:	2301      	movs	r3, #1
   1ec48:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1ec4c:	2200      	movs	r2, #0
   1ec4e:	4669      	mov	r1, sp
   1ec50:	4620      	mov	r0, r4
   1ec52:	f7ff fb79 	bl	1e348 <id_create>
				if (err) {
   1ec56:	4603      	mov	r3, r0
   1ec58:	2800      	cmp	r0, #0
   1ec5a:	d0e5      	beq.n	1ec28 <bt_setup_random_id_addr+0x28>
   1ec5c:	e7e1      	b.n	1ec22 <bt_setup_random_id_addr+0x22>
			return 0;
   1ec5e:	2300      	movs	r3, #0
   1ec60:	e7df      	b.n	1ec22 <bt_setup_random_id_addr+0x22>
   1ec62:	bf00      	nop
   1ec64:	20008000 	.word	0x20008000

0001ec68 <bt_id_set_adv_own_addr>:
			   bool dir_adv, uint8_t *own_addr_type)
{
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1ec68:	2800      	cmp	r0, #0
   1ec6a:	d051      	beq.n	1ed10 <bt_id_set_adv_own_addr+0xa8>
{
   1ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec6e:	460e      	mov	r6, r1
   1ec70:	4617      	mov	r7, r2
   1ec72:	461d      	mov	r5, r3
   1ec74:	4603      	mov	r3, r0
	CHECKIF(adv == NULL || own_addr_type == NULL) {
   1ec76:	2d00      	cmp	r5, #0
   1ec78:	d04d      	beq.n	1ed16 <bt_id_set_adv_own_addr+0xae>
		return -EINVAL;
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   1ec7a:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1ec7c:	f011 0f01 	tst.w	r1, #1
   1ec80:	d029      	beq.n	1ecd6 <bt_id_set_adv_own_addr+0x6e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1ec82:	b142      	cbz	r2, 1ec96 <bt_id_set_adv_own_addr+0x2e>
   1ec84:	f011 0f20 	tst.w	r1, #32
   1ec88:	d005      	beq.n	1ec96 <bt_id_set_adv_own_addr+0x2e>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   1ec8a:	4a28      	ldr	r2, [pc, #160]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1ec8c:	f892 20d0 	ldrb.w	r2, [r2, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1ec90:	f012 0f40 	tst.w	r2, #64	; 0x40
   1ec94:	d042      	beq.n	1ed1c <bt_id_set_adv_own_addr+0xb4>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1ec96:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1ec9a:	4924      	ldr	r1, [pc, #144]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1ec9c:	5c8a      	ldrb	r2, [r1, r2]
   1ec9e:	2a01      	cmp	r2, #1
   1eca0:	d00e      	beq.n	1ecc0 <bt_id_set_adv_own_addr+0x58>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   1eca2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1eca6:	4b21      	ldr	r3, [pc, #132]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1eca8:	5d1b      	ldrb	r3, [r3, r4]
   1ecaa:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1ecac:	2f00      	cmp	r7, #0
   1ecae:	d038      	beq.n	1ed22 <bt_id_set_adv_own_addr+0xba>
   1ecb0:	f016 0f20 	tst.w	r6, #32
   1ecb4:	d037      	beq.n	1ed26 <bt_id_set_adv_own_addr+0xbe>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1ecb6:	f043 0302 	orr.w	r3, r3, #2
   1ecba:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1ecbc:	2000      	movs	r0, #0
   1ecbe:	e019      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1ecc0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1ecc4:	4a19      	ldr	r2, [pc, #100]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1ecc6:	4411      	add	r1, r2
   1ecc8:	3101      	adds	r1, #1
   1ecca:	4618      	mov	r0, r3
   1eccc:	f019 ff24 	bl	38b18 <bt_id_set_adv_random_addr>
				if (err) {
   1ecd0:	2800      	cmp	r0, #0
   1ecd2:	d0e6      	beq.n	1eca2 <bt_id_set_adv_own_addr+0x3a>
   1ecd4:	e00e      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   1ecd6:	f011 0f04 	tst.w	r1, #4
   1ecda:	d014      	beq.n	1ed06 <bt_id_set_adv_own_addr+0x9e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1ecdc:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   1ece0:	4912      	ldr	r1, [pc, #72]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1ece2:	5c8a      	ldrb	r2, [r1, r2]
   1ece4:	2a01      	cmp	r2, #1
   1ece6:	d006      	beq.n	1ecf6 <bt_id_set_adv_own_addr+0x8e>
	int err = 0;
   1ece8:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   1ecea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1ecee:	4b0f      	ldr	r3, [pc, #60]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1ecf0:	5d1b      	ldrb	r3, [r3, r4]
   1ecf2:	702b      	strb	r3, [r5, #0]
}
   1ecf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   1ecf6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   1ecfa:	4a0c      	ldr	r2, [pc, #48]	; (1ed2c <bt_id_set_adv_own_addr+0xc4>)
   1ecfc:	4411      	add	r1, r2
   1ecfe:	3101      	adds	r1, #1
   1ed00:	f019 ff0a 	bl	38b18 <bt_id_set_adv_random_addr>
   1ed04:	e7f1      	b.n	1ecea <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   1ed06:	f019 ff14 	bl	38b32 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   1ed0a:	2301      	movs	r3, #1
   1ed0c:	702b      	strb	r3, [r5, #0]
		if (err) {
   1ed0e:	e7f1      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
		return -EINVAL;
   1ed10:	f06f 0015 	mvn.w	r0, #21
}
   1ed14:	4770      	bx	lr
		return -EINVAL;
   1ed16:	f06f 0015 	mvn.w	r0, #21
   1ed1a:	e7eb      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
			return -ENOTSUP;
   1ed1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ed20:	e7e8      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
	return 0;
   1ed22:	2000      	movs	r0, #0
   1ed24:	e7e6      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
   1ed26:	2000      	movs	r0, #0
   1ed28:	e7e4      	b.n	1ecf4 <bt_id_set_adv_own_addr+0x8c>
   1ed2a:	bf00      	nop
   1ed2c:	20008000 	.word	0x20008000

0001ed30 <adv_get_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   1ed30:	4800      	ldr	r0, [pc, #0]	; (1ed34 <adv_get_legacy+0x4>)
   1ed32:	4770      	bx	lr
   1ed34:	20008018 	.word	0x20008018

0001ed38 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   1ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed3c:	b08b      	sub	sp, #44	; 0x2c
   1ed3e:	4606      	mov	r6, r0
   1ed40:	4688      	mov	r8, r1
   1ed42:	4615      	mov	r5, r2
   1ed44:	469a      	mov	sl, r3
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   1ed46:	f04f 0b00 	mov.w	fp, #0
	uint8_t set_data_len = 0;
   1ed4a:	465b      	mov	r3, fp
	for (size_t i = 0; i < ad_len; i++) {
   1ed4c:	45d3      	cmp	fp, sl
   1ed4e:	d264      	bcs.n	1ee1a <set_data_add_complete+0xe2>
		const struct bt_data *data = ad[i].data;
   1ed50:	eb05 09cb 	add.w	r9, r5, fp, lsl #3
   1ed54:	f855 703b 	ldr.w	r7, [r5, fp, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   1ed58:	2400      	movs	r4, #0
   1ed5a:	f8cd b000 	str.w	fp, [sp]
   1ed5e:	9501      	str	r5, [sp, #4]
   1ed60:	e03d      	b.n	1edde <set_data_add_complete+0xa6>
				ssize_t shortened_len = set_data_len_max -
							(set_data_len + 2);

				if (!(type == BT_DATA_NAME_COMPLETE &&
				      shortened_len > 0)) {
					LOG_ERR("Too big advertising data");
   1ed62:	4b30      	ldr	r3, [pc, #192]	; (1ee24 <set_data_add_complete+0xec>)
   1ed64:	9309      	str	r3, [sp, #36]	; 0x24
   1ed66:	2302      	movs	r3, #2
   1ed68:	f88d 300c 	strb.w	r3, [sp, #12]
   1ed6c:	2300      	movs	r3, #0
   1ed6e:	f88d 300d 	strb.w	r3, [sp, #13]
   1ed72:	f88d 300e 	strb.w	r3, [sp, #14]
   1ed76:	f88d 300f 	strb.w	r3, [sp, #15]
   1ed7a:	9a03      	ldr	r2, [sp, #12]
   1ed7c:	9208      	str	r2, [sp, #32]
   1ed7e:	4619      	mov	r1, r3
   1ed80:	f363 0100 	bfi	r1, r3, #0, #1
   1ed84:	f363 0141 	bfi	r1, r3, #1, #1
   1ed88:	f363 0182 	bfi	r1, r3, #2, #1
   1ed8c:	f363 01c5 	bfi	r1, r3, #3, #3
   1ed90:	2201      	movs	r2, #1
   1ed92:	f362 1188 	bfi	r1, r2, #6, #3
   1ed96:	2208      	movs	r2, #8
   1ed98:	f362 2152 	bfi	r1, r2, #9, #10
   1ed9c:	f363 41de 	bfi	r1, r3, #19, #12
   1eda0:	f363 71df 	bfi	r1, r3, #31, #1
   1eda4:	aa08      	add	r2, sp, #32
   1eda6:	4820      	ldr	r0, [pc, #128]	; (1ee28 <set_data_add_complete+0xf0>)
   1eda8:	f7f7 fdd0 	bl	1694c <z_impl_z_log_msg_static_create>
					return -EINVAL;
   1edac:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1edb0:	b00b      	add	sp, #44	; 0x2c
   1edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			set_data[set_data_len++] = len + 1;
   1edb6:	fa5f fb82 	uxtb.w	fp, r2
   1edba:	1c59      	adds	r1, r3, #1
   1edbc:	b2c9      	uxtb	r1, r1
   1edbe:	f10b 0e01 	add.w	lr, fp, #1
   1edc2:	f806 e005 	strb.w	lr, [r6, r5]
			set_data[set_data_len++] = type;
   1edc6:	1c9d      	adds	r5, r3, #2
   1edc8:	b2ed      	uxtb	r5, r5
   1edca:	5470      	strb	r0, [r6, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1edcc:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1edd0:	1970      	adds	r0, r6, r5
   1edd2:	f019 fb12 	bl	383fa <memcpy>
			set_data_len += len;
   1edd6:	44ab      	add	fp, r5
   1edd8:	fa5f f38b 	uxtb.w	r3, fp
		for (size_t j = 0; j < ad[i].len; j++) {
   1eddc:	3401      	adds	r4, #1
   1edde:	f8d9 2004 	ldr.w	r2, [r9, #4]
   1ede2:	4294      	cmp	r4, r2
   1ede4:	d213      	bcs.n	1ee0e <set_data_add_complete+0xd6>
			size_t len = data[j].data_len;
   1ede6:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
   1edea:	f89c 2001 	ldrb.w	r2, [ip, #1]
			uint8_t type = data[j].type;
   1edee:	f817 0034 	ldrb.w	r0, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1edf2:	461d      	mov	r5, r3
   1edf4:	1899      	adds	r1, r3, r2
   1edf6:	3102      	adds	r1, #2
   1edf8:	4541      	cmp	r1, r8
   1edfa:	d9dc      	bls.n	1edb6 <set_data_add_complete+0x7e>
							(set_data_len + 2);
   1edfc:	1c9a      	adds	r2, r3, #2
				ssize_t shortened_len = set_data_len_max -
   1edfe:	eba8 0202 	sub.w	r2, r8, r2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1ee02:	2809      	cmp	r0, #9
   1ee04:	d1ad      	bne.n	1ed62 <set_data_add_complete+0x2a>
   1ee06:	2a00      	cmp	r2, #0
   1ee08:	ddab      	ble.n	1ed62 <set_data_add_complete+0x2a>
				type = BT_DATA_NAME_SHORTENED;
   1ee0a:	2008      	movs	r0, #8
   1ee0c:	e7d3      	b.n	1edb6 <set_data_add_complete+0x7e>
	for (size_t i = 0; i < ad_len; i++) {
   1ee0e:	f8dd b000 	ldr.w	fp, [sp]
   1ee12:	9d01      	ldr	r5, [sp, #4]
   1ee14:	f10b 0b01 	add.w	fp, fp, #1
   1ee18:	e798      	b.n	1ed4c <set_data_add_complete+0x14>
	*data_len = set_data_len;
   1ee1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1ee1c:	7013      	strb	r3, [r2, #0]
	return 0;
   1ee1e:	2000      	movs	r0, #0
   1ee20:	e7c6      	b.n	1edb0 <set_data_add_complete+0x78>
   1ee22:	bf00      	nop
   1ee24:	00042c84 	.word	0x00042c84
   1ee28:	0003f398 	.word	0x0003f398

0001ee2c <valid_adv_ext_param>:
{
   1ee2c:	b510      	push	{r4, lr}
   1ee2e:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   1ee30:	7800      	ldrb	r0, [r0, #0]
   1ee32:	4b21      	ldr	r3, [pc, #132]	; (1eeb8 <valid_adv_ext_param+0x8c>)
   1ee34:	79db      	ldrb	r3, [r3, #7]
   1ee36:	4298      	cmp	r0, r3
   1ee38:	d301      	bcc.n	1ee3e <valid_adv_ext_param+0x12>
		return false;
   1ee3a:	2000      	movs	r0, #0
}
   1ee3c:	bd10      	pop	{r4, pc}
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1ee3e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
	return memcmp(a, b, sizeof(*a));
   1ee42:	2207      	movs	r2, #7
   1ee44:	491d      	ldr	r1, [pc, #116]	; (1eebc <valid_adv_ext_param+0x90>)
   1ee46:	4b1c      	ldr	r3, [pc, #112]	; (1eeb8 <valid_adv_ext_param+0x8c>)
   1ee48:	4418      	add	r0, r3
   1ee4a:	f019 fab1 	bl	383b0 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1ee4e:	2800      	cmp	r0, #0
   1ee50:	d0f3      	beq.n	1ee3a <valid_adv_ext_param+0xe>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1ee52:	6863      	ldr	r3, [r4, #4]
   1ee54:	f013 0f01 	tst.w	r3, #1
   1ee58:	d107      	bne.n	1ee6a <valid_adv_ext_param+0x3e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1ee5a:	4a17      	ldr	r2, [pc, #92]	; (1eeb8 <valid_adv_ext_param+0x8c>)
   1ee5c:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   1ee60:	2a08      	cmp	r2, #8
   1ee62:	d802      	bhi.n	1ee6a <valid_adv_ext_param+0x3e>
		    param->interval_min < 0x00a0) {
   1ee64:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1ee66:	2a9f      	cmp	r2, #159	; 0x9f
   1ee68:	d91b      	bls.n	1eea2 <valid_adv_ext_param+0x76>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1ee6a:	f013 0f30 	tst.w	r3, #48	; 0x30
   1ee6e:	d001      	beq.n	1ee74 <valid_adv_ext_param+0x48>
	    !param->peer) {
   1ee70:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1ee72:	b1c2      	cbz	r2, 1eea6 <valid_adv_ext_param+0x7a>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1ee74:	f013 0f10 	tst.w	r3, #16
   1ee78:	d108      	bne.n	1ee8c <valid_adv_ext_param+0x60>
	    !param->peer) {
   1ee7a:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   1ee7c:	b132      	cbz	r2, 1ee8c <valid_adv_ext_param+0x60>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1ee7e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1ee82:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   1ee86:	d014      	beq.n	1eeb2 <valid_adv_ext_param+0x86>
	return true;
   1ee88:	2001      	movs	r0, #1
   1ee8a:	e7d7      	b.n	1ee3c <valid_adv_ext_param+0x10>
		if (param->interval_min > param->interval_max ||
   1ee8c:	68a2      	ldr	r2, [r4, #8]
   1ee8e:	68e1      	ldr	r1, [r4, #12]
   1ee90:	428a      	cmp	r2, r1
   1ee92:	d80a      	bhi.n	1eeaa <valid_adv_ext_param+0x7e>
   1ee94:	2a1f      	cmp	r2, #31
   1ee96:	d90a      	bls.n	1eeae <valid_adv_ext_param+0x82>
		    param->interval_min < 0x0020 ||
   1ee98:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   1ee9c:	d9ef      	bls.n	1ee7e <valid_adv_ext_param+0x52>
			return false;
   1ee9e:	2000      	movs	r0, #0
   1eea0:	e7cc      	b.n	1ee3c <valid_adv_ext_param+0x10>
			return false;
   1eea2:	2000      	movs	r0, #0
   1eea4:	e7ca      	b.n	1ee3c <valid_adv_ext_param+0x10>
		return false;
   1eea6:	2000      	movs	r0, #0
   1eea8:	e7c8      	b.n	1ee3c <valid_adv_ext_param+0x10>
			return false;
   1eeaa:	2000      	movs	r0, #0
   1eeac:	e7c6      	b.n	1ee3c <valid_adv_ext_param+0x10>
   1eeae:	2000      	movs	r0, #0
   1eeb0:	e7c4      	b.n	1ee3c <valid_adv_ext_param+0x10>
		return false;
   1eeb2:	2000      	movs	r0, #0
   1eeb4:	e7c2      	b.n	1ee3c <valid_adv_ext_param+0x10>
   1eeb6:	bf00      	nop
   1eeb8:	20008000 	.word	0x20008000
   1eebc:	0004203c 	.word	0x0004203c

0001eec0 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   1eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eec2:	4604      	mov	r4, r0
   1eec4:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1eec6:	4605      	mov	r5, r0
   1eec8:	f815 2b09 	ldrb.w	r2, [r5], #9
   1eecc:	4b17      	ldr	r3, [pc, #92]	; (1ef2c <le_adv_start_add_conn+0x6c>)
   1eece:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
   1eed2:	2207      	movs	r2, #7
   1eed4:	4916      	ldr	r1, [pc, #88]	; (1ef30 <le_adv_start_add_conn+0x70>)
   1eed6:	4628      	mov	r0, r5
   1eed8:	f019 fa6a 	bl	383b0 <memcmp>

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1eedc:	b960      	cbnz	r0, 1eef8 <le_adv_start_add_conn+0x38>
   1eede:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1eee0:	4914      	ldr	r1, [pc, #80]	; (1ef34 <le_adv_start_add_conn+0x74>)
   1eee2:	7820      	ldrb	r0, [r4, #0]
   1eee4:	f01a fa39 	bl	3935a <bt_conn_add_le>
		if (!conn) {
   1eee8:	4604      	mov	r4, r0
   1eeea:	b1b0      	cbz	r0, 1ef1a <le_adv_start_add_conn+0x5a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1eeec:	2104      	movs	r1, #4
   1eeee:	f001 fa1f 	bl	20330 <bt_conn_set_state>
		*out_conn = conn;
   1eef2:	603c      	str	r4, [r7, #0]
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1eef4:	4630      	mov	r0, r6
   1eef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   1eef8:	4629      	mov	r1, r5
   1eefa:	7820      	ldrb	r0, [r4, #0]
   1eefc:	f001 fe14 	bl	20b28 <bt_conn_exists_le>
   1ef00:	b970      	cbnz	r0, 1ef20 <le_adv_start_add_conn+0x60>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1ef02:	4629      	mov	r1, r5
   1ef04:	7820      	ldrb	r0, [r4, #0]
   1ef06:	f01a fa28 	bl	3935a <bt_conn_add_le>
	if (!conn) {
   1ef0a:	4604      	mov	r4, r0
   1ef0c:	b158      	cbz	r0, 1ef26 <le_adv_start_add_conn+0x66>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   1ef0e:	2105      	movs	r1, #5
   1ef10:	f001 fa0e 	bl	20330 <bt_conn_set_state>
	*out_conn = conn;
   1ef14:	603c      	str	r4, [r7, #0]
	return 0;
   1ef16:	2600      	movs	r6, #0
   1ef18:	e7ec      	b.n	1eef4 <le_adv_start_add_conn+0x34>
			return -ENOMEM;
   1ef1a:	f06f 060b 	mvn.w	r6, #11
   1ef1e:	e7e9      	b.n	1eef4 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   1ef20:	f06f 0615 	mvn.w	r6, #21
   1ef24:	e7e6      	b.n	1eef4 <le_adv_start_add_conn+0x34>
		return -ENOMEM;
   1ef26:	f06f 060b 	mvn.w	r6, #11
   1ef2a:	e7e3      	b.n	1eef4 <le_adv_start_add_conn+0x34>
   1ef2c:	20008000 	.word	0x20008000
   1ef30:	0004203c 	.word	0x0004203c
   1ef34:	00042034 	.word	0x00042034

0001ef38 <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   1ef38:	b570      	push	{r4, r5, r6, lr}
   1ef3a:	4604      	mov	r4, r0
   1ef3c:	460d      	mov	r5, r1
	struct bt_conn *conn;

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   1ef3e:	f100 0609 	add.w	r6, r0, #9
   1ef42:	2207      	movs	r2, #7
   1ef44:	490d      	ldr	r1, [pc, #52]	; (1ef7c <le_adv_stop_free_conn+0x44>)
   1ef46:	4630      	mov	r0, r6
   1ef48:	f019 fa32 	bl	383b0 <memcmp>
   1ef4c:	b978      	cbnz	r0, 1ef6e <le_adv_stop_free_conn+0x36>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1ef4e:	2204      	movs	r2, #4
   1ef50:	490b      	ldr	r1, [pc, #44]	; (1ef80 <le_adv_stop_free_conn+0x48>)
   1ef52:	7820      	ldrb	r0, [r4, #0]
   1ef54:	f001 fe5a 	bl	20c0c <bt_conn_lookup_state_le>
   1ef58:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECTING_DIR_ADV);
	}

	if (conn) {
   1ef5a:	b13c      	cbz	r4, 1ef6c <le_adv_stop_free_conn+0x34>
		conn->err = status;
   1ef5c:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1ef5e:	2100      	movs	r1, #0
   1ef60:	4620      	mov	r0, r4
   1ef62:	f001 f9e5 	bl	20330 <bt_conn_set_state>
		bt_conn_unref(conn);
   1ef66:	4620      	mov	r0, r4
   1ef68:	f001 f9a6 	bl	202b8 <bt_conn_unref>
	}
}
   1ef6c:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1ef6e:	2205      	movs	r2, #5
   1ef70:	4631      	mov	r1, r6
   1ef72:	7820      	ldrb	r0, [r4, #0]
   1ef74:	f001 fe4a 	bl	20c0c <bt_conn_lookup_state_le>
   1ef78:	4604      	mov	r4, r0
   1ef7a:	e7ee      	b.n	1ef5a <le_adv_stop_free_conn+0x22>
   1ef7c:	0004203c 	.word	0x0004203c
   1ef80:	00042034 	.word	0x00042034

0001ef84 <bt_le_ext_adv_foreach>:
{
   1ef84:	b508      	push	{r3, lr}
   1ef86:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
   1ef88:	4801      	ldr	r0, [pc, #4]	; (1ef90 <bt_le_ext_adv_foreach+0xc>)
   1ef8a:	4798      	blx	r3
}
   1ef8c:	bd08      	pop	{r3, pc}
   1ef8e:	bf00      	nop
   1ef90:	20008018 	.word	0x20008018

0001ef94 <bt_le_adv_lookup_legacy>:
}
   1ef94:	4800      	ldr	r0, [pc, #0]	; (1ef98 <bt_le_adv_lookup_legacy+0x4>)
   1ef96:	4770      	bx	lr
   1ef98:	20008018 	.word	0x20008018

0001ef9c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   1ef9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efa0:	b093      	sub	sp, #76	; 0x4c
   1efa2:	9205      	str	r2, [sp, #20]
   1efa4:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   1efa6:	2300      	movs	r3, #0
   1efa8:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   1efaa:	690e      	ldr	r6, [r1, #16]
   1efac:	ebb6 0b03 	subs.w	fp, r6, r3
   1efb0:	bf18      	it	ne
   1efb2:	f04f 0b01 	movne.w	fp, #1
   1efb6:	4bab      	ldr	r3, [pc, #684]	; (1f264 <bt_le_adv_start_legacy+0x2c8>)
   1efb8:	e8d3 3faf 	lda	r3, [r3]
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1efbc:	f013 0f04 	tst.w	r3, #4
   1efc0:	f000 813f 	beq.w	1f242 <bt_le_adv_start_legacy+0x2a6>
   1efc4:	4605      	mov	r5, r0
   1efc6:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1efc8:	4608      	mov	r0, r1
   1efca:	f019 fee4 	bl	38d96 <valid_adv_param>
   1efce:	2800      	cmp	r0, #0
   1efd0:	f000 813a 	beq.w	1f248 <bt_le_adv_start_legacy+0x2ac>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1efd4:	4620      	mov	r0, r4
   1efd6:	f019 fdc5 	bl	38b64 <bt_id_adv_random_addr_check>
   1efda:	4682      	mov	sl, r0
   1efdc:	2800      	cmp	r0, #0
   1efde:	f000 8136 	beq.w	1f24e <bt_le_adv_start_legacy+0x2b2>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1efe2:	f105 0710 	add.w	r7, r5, #16
   1efe6:	2107      	movs	r1, #7
   1efe8:	4638      	mov	r0, r7
   1efea:	f019 fe08 	bl	38bfe <atomic_test_bit>
   1efee:	9004      	str	r0, [sp, #16]
   1eff0:	2800      	cmp	r0, #0
   1eff2:	f040 812f 	bne.w	1f254 <bt_le_adv_start_legacy+0x2b8>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1eff6:	220f      	movs	r2, #15
   1eff8:	2100      	movs	r1, #0
   1effa:	a808      	add	r0, sp, #32
   1effc:	f019 fa2c 	bl	38458 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   1f000:	68a3      	ldr	r3, [r4, #8]
   1f002:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1f006:	68e3      	ldr	r3, [r4, #12]
   1f008:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   1f00c:	f8d4 9004 	ldr.w	r9, [r4, #4]
   1f010:	4648      	mov	r0, r9
   1f012:	f019 fde2 	bl	38bda <get_adv_channel_map>
   1f016:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   1f01a:	4648      	mov	r0, r9
   1f01c:	f019 fddb 	bl	38bd6 <get_filter_policy>
   1f020:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   1f024:	782a      	ldrb	r2, [r5, #0]
   1f026:	7823      	ldrb	r3, [r4, #0]
   1f028:	429a      	cmp	r2, r3
   1f02a:	d008      	beq.n	1f03e <bt_le_adv_start_legacy+0xa2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f02c:	4b8d      	ldr	r3, [pc, #564]	; (1f264 <bt_le_adv_start_legacy+0x2c8>)
   1f02e:	e8d3 1fef 	ldaex	r1, [r3]
   1f032:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   1f036:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1f03a:	2a00      	cmp	r2, #0
   1f03c:	d1f7      	bne.n	1f02e <bt_le_adv_start_legacy+0x92>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1f03e:	7823      	ldrb	r3, [r4, #0]
   1f040:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   1f042:	4a89      	ldr	r2, [pc, #548]	; (1f268 <bt_le_adv_start_legacy+0x2cc>)
   1f044:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   1f048:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1f04c:	465a      	mov	r2, fp
   1f04e:	6861      	ldr	r1, [r4, #4]
   1f050:	4628      	mov	r0, r5
   1f052:	f7ff fe09 	bl	1ec68 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   1f056:	4681      	mov	r9, r0
   1f058:	2800      	cmp	r0, #0
   1f05a:	f040 80b7 	bne.w	1f1cc <bt_le_adv_start_legacy+0x230>
		return err;
	}

	if (dir_adv) {
   1f05e:	b1ee      	cbz	r6, 1f09c <bt_le_adv_start_legacy+0x100>
	memcpy(dst, src, sizeof(*dst));
   1f060:	2207      	movs	r2, #7
   1f062:	6921      	ldr	r1, [r4, #16]
   1f064:	f105 0009 	add.w	r0, r5, #9
   1f068:	f019 f9c7 	bl	383fa <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   1f06c:	4620      	mov	r0, r4
   1f06e:	f019 fed8 	bl	38e22 <get_adv_name_type_param>
   1f072:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1f074:	6863      	ldr	r3, [r4, #4]
   1f076:	f013 0f01 	tst.w	r3, #1
   1f07a:	d01e      	beq.n	1f0ba <bt_le_adv_start_legacy+0x11e>
		if (dir_adv) {
   1f07c:	b1ce      	cbz	r6, 1f0b2 <bt_le_adv_start_legacy+0x116>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   1f07e:	f013 0f10 	tst.w	r3, #16
   1f082:	d012      	beq.n	1f0aa <bt_le_adv_start_legacy+0x10e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   1f084:	2304      	movs	r3, #4
   1f086:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1f08a:	2207      	movs	r2, #7
   1f08c:	6921      	ldr	r1, [r4, #16]
   1f08e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   1f092:	f019 f9b2 	bl	383fa <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1f096:	f8dd a010 	ldr.w	sl, [sp, #16]
}
   1f09a:	e016      	b.n	1f0ca <bt_le_adv_start_legacy+0x12e>
	memcpy(dst, src, sizeof(*dst));
   1f09c:	2207      	movs	r2, #7
   1f09e:	4973      	ldr	r1, [pc, #460]	; (1f26c <bt_le_adv_start_legacy+0x2d0>)
   1f0a0:	f105 0009 	add.w	r0, r5, #9
   1f0a4:	f019 f9a9 	bl	383fa <memcpy>
}
   1f0a8:	e7e0      	b.n	1f06c <bt_le_adv_start_legacy+0xd0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   1f0aa:	2301      	movs	r3, #1
   1f0ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1f0b0:	e7eb      	b.n	1f08a <bt_le_adv_start_legacy+0xee>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   1f0b2:	2300      	movs	r3, #0
   1f0b4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1f0b8:	e007      	b.n	1f0ca <bt_le_adv_start_legacy+0x12e>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1f0ba:	f413 7f00 	tst.w	r3, #512	; 0x200
   1f0be:	d101      	bne.n	1f0c4 <bt_le_adv_start_legacy+0x128>
   1f0c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1f0c2:	b353      	cbz	r3, 1f11a <bt_le_adv_start_legacy+0x17e>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1f0c4:	2302      	movs	r3, #2
   1f0c6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1f0ca:	210f      	movs	r1, #15
   1f0cc:	f242 0006 	movw	r0, #8198	; 0x2006
   1f0d0:	f7fd f9ec 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   1f0d4:	4681      	mov	r9, r0
   1f0d6:	2800      	cmp	r0, #0
   1f0d8:	f000 80bf 	beq.w	1f25a <bt_le_adv_start_legacy+0x2be>
   1f0dc:	220f      	movs	r2, #15
   1f0de:	a908      	add	r1, sp, #32
   1f0e0:	300c      	adds	r0, #12
   1f0e2:	f01c fe93 	bl	3be0c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1f0e6:	2200      	movs	r2, #0
   1f0e8:	4649      	mov	r1, r9
   1f0ea:	f242 0006 	movw	r0, #8198	; 0x2006
   1f0ee:	f7fd fa2f 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1f0f2:	4681      	mov	r9, r0
   1f0f4:	2800      	cmp	r0, #0
   1f0f6:	d169      	bne.n	1f1cc <bt_le_adv_start_legacy+0x230>
		return err;
	}

	if (!dir_adv) {
   1f0f8:	b1be      	cbz	r6, 1f12a <bt_le_adv_start_legacy+0x18e>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1f0fa:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f0fc:	f013 0f01 	tst.w	r3, #1
   1f100:	d02b      	beq.n	1f15a <bt_le_adv_start_legacy+0x1be>
		err = le_adv_start_add_conn(adv, &conn);
   1f102:	a907      	add	r1, sp, #28
   1f104:	4628      	mov	r0, r5
   1f106:	f7ff fedb 	bl	1eec0 <le_adv_start_add_conn>
		if (err) {
   1f10a:	b330      	cbz	r0, 1f15a <bt_le_adv_start_legacy+0x1be>
			if (err == -ENOMEM && !dir_adv &&
   1f10c:	f110 0f0c 	cmn.w	r0, #12
   1f110:	f040 80a6 	bne.w	1f260 <bt_le_adv_start_legacy+0x2c4>
   1f114:	b1de      	cbz	r6, 1f14e <bt_le_adv_start_legacy+0x1b2>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   1f116:	4681      	mov	r9, r0
   1f118:	e058      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   1f11a:	2802      	cmp	r0, #2
   1f11c:	d0d2      	beq.n	1f0c4 <bt_le_adv_start_legacy+0x128>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   1f11e:	2303      	movs	r3, #3
   1f120:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1f124:	f8dd a010 	ldr.w	sl, [sp, #16]
   1f128:	e7cf      	b.n	1f0ca <bt_le_adv_start_legacy+0x12e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1f12a:	f8cd b00c 	str.w	fp, [sp, #12]
   1f12e:	f8cd a008 	str.w	sl, [sp, #8]
   1f132:	2300      	movs	r3, #0
   1f134:	9301      	str	r3, [sp, #4]
   1f136:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1f138:	9300      	str	r3, [sp, #0]
   1f13a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1f13c:	4642      	mov	r2, r8
   1f13e:	9905      	ldr	r1, [sp, #20]
   1f140:	4628      	mov	r0, r5
   1f142:	f019 fda1 	bl	38c88 <le_adv_update>
		if (err) {
   1f146:	2800      	cmp	r0, #0
   1f148:	d0d7      	beq.n	1f0fa <bt_le_adv_start_legacy+0x15e>
			return err;
   1f14a:	4681      	mov	r9, r0
   1f14c:	e03e      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1f14e:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   1f150:	f012 0f02 	tst.w	r2, #2
   1f154:	d00c      	beq.n	1f170 <bt_le_adv_start_legacy+0x1d4>
			return err;
   1f156:	4681      	mov	r9, r0
   1f158:	e038      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   1f15a:	2101      	movs	r1, #1
   1f15c:	4628      	mov	r0, r5
   1f15e:	f019 fe9c 	bl	38e9a <bt_le_adv_set_enable>
	if (err) {
   1f162:	4605      	mov	r5, r0
   1f164:	2800      	cmp	r0, #0
   1f166:	d135      	bne.n	1f1d4 <bt_le_adv_start_legacy+0x238>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1f168:	9807      	ldr	r0, [sp, #28]
   1f16a:	b108      	cbz	r0, 1f170 <bt_le_adv_start_legacy+0x1d4>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   1f16c:	f001 f8a4 	bl	202b8 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1f170:	2e00      	cmp	r6, #0
   1f172:	d05e      	beq.n	1f232 <bt_le_adv_start_legacy+0x296>
   1f174:	464a      	mov	r2, r9
   1f176:	f002 0201 	and.w	r2, r2, #1
   1f17a:	210e      	movs	r1, #14
   1f17c:	4638      	mov	r0, r7
   1f17e:	f019 fe1b 	bl	38db8 <atomic_set_bit_to>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   1f182:	f1bb 0f01 	cmp.w	fp, #1
   1f186:	bf14      	ite	ne
   1f188:	2200      	movne	r2, #0
   1f18a:	2201      	moveq	r2, #1
   1f18c:	2108      	movs	r1, #8
   1f18e:	4638      	mov	r0, r7
   1f190:	f019 fe12 	bl	38db8 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_AD);

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   1f194:	f1bb 0f02 	cmp.w	fp, #2
   1f198:	bf14      	ite	ne
   1f19a:	2200      	movne	r2, #0
   1f19c:	2201      	moveq	r2, #1
   1f19e:	2109      	movs	r1, #9
   1f1a0:	4638      	mov	r0, r7
   1f1a2:	f019 fe09 	bl	38db8 <atomic_set_bit_to>
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   1f1a6:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   1f1a8:	f002 0201 	and.w	r2, r2, #1
   1f1ac:	210a      	movs	r1, #10
   1f1ae:	4638      	mov	r0, r7
   1f1b0:	f019 fe02 	bl	38db8 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   1f1b4:	4652      	mov	r2, sl
   1f1b6:	210b      	movs	r1, #11
   1f1b8:	4638      	mov	r0, r7
   1f1ba:	f019 fdfd 	bl	38db8 <atomic_set_bit_to>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   1f1be:	6862      	ldr	r2, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1f1c0:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1f1c4:	210d      	movs	r1, #13
   1f1c6:	4638      	mov	r0, r7
   1f1c8:	f019 fdf6 	bl	38db8 <atomic_set_bit_to>

	return 0;
}
   1f1cc:	4648      	mov	r0, r9
   1f1ce:	b013      	add	sp, #76	; 0x4c
   1f1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_ERR("Failed to start advertiser");
   1f1d4:	4b26      	ldr	r3, [pc, #152]	; (1f270 <bt_le_adv_start_legacy+0x2d4>)
   1f1d6:	9311      	str	r3, [sp, #68]	; 0x44
   1f1d8:	2302      	movs	r3, #2
   1f1da:	f88d 3018 	strb.w	r3, [sp, #24]
   1f1de:	2300      	movs	r3, #0
   1f1e0:	f88d 3019 	strb.w	r3, [sp, #25]
   1f1e4:	f88d 301a 	strb.w	r3, [sp, #26]
   1f1e8:	f88d 301b 	strb.w	r3, [sp, #27]
   1f1ec:	9a06      	ldr	r2, [sp, #24]
   1f1ee:	9210      	str	r2, [sp, #64]	; 0x40
   1f1f0:	4619      	mov	r1, r3
   1f1f2:	f363 0100 	bfi	r1, r3, #0, #1
   1f1f6:	f363 0141 	bfi	r1, r3, #1, #1
   1f1fa:	f363 0182 	bfi	r1, r3, #2, #1
   1f1fe:	f363 01c5 	bfi	r1, r3, #3, #3
   1f202:	2201      	movs	r2, #1
   1f204:	f362 1188 	bfi	r1, r2, #6, #3
   1f208:	2208      	movs	r2, #8
   1f20a:	f362 2152 	bfi	r1, r2, #9, #10
   1f20e:	f363 41de 	bfi	r1, r3, #19, #12
   1f212:	f363 71df 	bfi	r1, r3, #31, #1
   1f216:	aa10      	add	r2, sp, #64	; 0x40
   1f218:	4816      	ldr	r0, [pc, #88]	; (1f274 <bt_le_adv_start_legacy+0x2d8>)
   1f21a:	f7f7 fb97 	bl	1694c <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1f21e:	9807      	ldr	r0, [sp, #28]
   1f220:	b128      	cbz	r0, 1f22e <bt_le_adv_start_legacy+0x292>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1f222:	2100      	movs	r1, #0
   1f224:	f001 f884 	bl	20330 <bt_conn_set_state>
			bt_conn_unref(conn);
   1f228:	9807      	ldr	r0, [sp, #28]
   1f22a:	f001 f845 	bl	202b8 <bt_conn_unref>
		return err;
   1f22e:	46a9      	mov	r9, r5
   1f230:	e7cc      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   1f232:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1f234:	f013 0f02 	tst.w	r3, #2
   1f238:	d001      	beq.n	1f23e <bt_le_adv_start_legacy+0x2a2>
   1f23a:	464a      	mov	r2, r9
   1f23c:	e79b      	b.n	1f176 <bt_le_adv_start_legacy+0x1da>
   1f23e:	2201      	movs	r2, #1
   1f240:	e799      	b.n	1f176 <bt_le_adv_start_legacy+0x1da>
		return -EAGAIN;
   1f242:	f06f 090a 	mvn.w	r9, #10
   1f246:	e7c1      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
		return -EINVAL;
   1f248:	f06f 0915 	mvn.w	r9, #21
   1f24c:	e7be      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
		return -EINVAL;
   1f24e:	f06f 0915 	mvn.w	r9, #21
   1f252:	e7bb      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
		return -EALREADY;
   1f254:	f06f 0977 	mvn.w	r9, #119	; 0x77
   1f258:	e7b8      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
		return -ENOBUFS;
   1f25a:	f06f 0968 	mvn.w	r9, #104	; 0x68
   1f25e:	e7b5      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
			return err;
   1f260:	4681      	mov	r9, r0
   1f262:	e7b3      	b.n	1f1cc <bt_le_adv_start_legacy+0x230>
   1f264:	200080cc 	.word	0x200080cc
   1f268:	20008000 	.word	0x20008000
   1f26c:	0004203c 	.word	0x0004203c
   1f270:	00042ca0 	.word	0x00042ca0
   1f274:	0003f398 	.word	0x0003f398

0001f278 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f27c:	b082      	sub	sp, #8
   1f27e:	4606      	mov	r6, r0
   1f280:	460c      	mov	r4, r1
   1f282:	4615      	mov	r5, r2
   1f284:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_get_legacy();
   1f286:	f7ff fd53 	bl	1ed30 <adv_get_legacy>
	int err;

	if (!adv) {
   1f28a:	b1f8      	cbz	r0, 1f2cc <bt_le_adv_start+0x54>
   1f28c:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1f28e:	9b08      	ldr	r3, [sp, #32]
   1f290:	9301      	str	r3, [sp, #4]
   1f292:	9700      	str	r7, [sp, #0]
   1f294:	462b      	mov	r3, r5
   1f296:	4622      	mov	r2, r4
   1f298:	4631      	mov	r1, r6
   1f29a:	f7ff fe7f 	bl	1ef9c <bt_le_adv_start_legacy>
   1f29e:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   1f2a0:	4629      	mov	r1, r5
   1f2a2:	4620      	mov	r0, r4
   1f2a4:	f019 fc78 	bl	38b98 <ad_is_limited>
   1f2a8:	b918      	cbnz	r0, 1f2b2 <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1f2aa:	4630      	mov	r0, r6
   1f2ac:	b002      	add	sp, #8
   1f2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   1f2b2:	f108 0818 	add.w	r8, r8, #24
   1f2b6:	4907      	ldr	r1, [pc, #28]	; (1f2d4 <bt_le_adv_start+0x5c>)
   1f2b8:	4640      	mov	r0, r8
   1f2ba:	f013 fa73 	bl	327a4 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1f2be:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f2c2:	2300      	movs	r3, #0
   1f2c4:	4640      	mov	r0, r8
   1f2c6:	f013 fbc9 	bl	32a5c <k_work_reschedule>
   1f2ca:	e7ee      	b.n	1f2aa <bt_le_adv_start+0x32>
		return -ENOMEM;
   1f2cc:	f06f 060b 	mvn.w	r6, #11
   1f2d0:	e7eb      	b.n	1f2aa <bt_le_adv_start+0x32>
   1f2d2:	bf00      	nop
   1f2d4:	0001f385 	.word	0x0001f385

0001f2d8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   1f2d8:	b530      	push	{r4, r5, lr}
   1f2da:	b089      	sub	sp, #36	; 0x24
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1f2dc:	f7ff fe5a 	bl	1ef94 <bt_le_adv_lookup_legacy>
	int err;

	if (!adv) {
   1f2e0:	b1a0      	cbz	r0, 1f30c <bt_le_adv_stop+0x34>
   1f2e2:	4605      	mov	r5, r0
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1f2e4:	f019 fddd 	bl	38ea2 <bt_le_lim_adv_cancel_timeout>

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1f2e8:	f105 0410 	add.w	r4, r5, #16
   1f2ec:	e8d4 3fef 	ldaex	r3, [r4]
   1f2f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   1f2f4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   1f2f8:	2a00      	cmp	r2, #0
   1f2fa:	d1f7      	bne.n	1f2ec <bt_le_adv_stop+0x14>

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1f2fc:	2107      	movs	r1, #7
   1f2fe:	4620      	mov	r0, r4
   1f300:	f019 fc7d 	bl	38bfe <atomic_test_bit>
   1f304:	bb50      	cbnz	r0, 1f35c <bt_le_adv_stop+0x84>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
   1f306:	2000      	movs	r0, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1f308:	b009      	add	sp, #36	; 0x24
   1f30a:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("No valid legacy adv");
   1f30c:	4b1b      	ldr	r3, [pc, #108]	; (1f37c <bt_le_adv_stop+0xa4>)
   1f30e:	9307      	str	r3, [sp, #28]
   1f310:	2302      	movs	r3, #2
   1f312:	f88d 3004 	strb.w	r3, [sp, #4]
   1f316:	2400      	movs	r4, #0
   1f318:	f88d 4005 	strb.w	r4, [sp, #5]
   1f31c:	f88d 4006 	strb.w	r4, [sp, #6]
   1f320:	f88d 4007 	strb.w	r4, [sp, #7]
   1f324:	9b01      	ldr	r3, [sp, #4]
   1f326:	9306      	str	r3, [sp, #24]
   1f328:	4621      	mov	r1, r4
   1f32a:	f364 0100 	bfi	r1, r4, #0, #1
   1f32e:	f364 0141 	bfi	r1, r4, #1, #1
   1f332:	f364 0182 	bfi	r1, r4, #2, #1
   1f336:	f364 01c5 	bfi	r1, r4, #3, #3
   1f33a:	2301      	movs	r3, #1
   1f33c:	f363 1188 	bfi	r1, r3, #6, #3
   1f340:	2308      	movs	r3, #8
   1f342:	f363 2152 	bfi	r1, r3, #9, #10
   1f346:	f364 41de 	bfi	r1, r4, #19, #12
   1f34a:	f364 71df 	bfi	r1, r4, #31, #1
   1f34e:	4623      	mov	r3, r4
   1f350:	aa06      	add	r2, sp, #24
   1f352:	480b      	ldr	r0, [pc, #44]	; (1f380 <bt_le_adv_stop+0xa8>)
   1f354:	f7f7 fafa 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0;
   1f358:	4620      	mov	r0, r4
   1f35a:	e7d5      	b.n	1f308 <bt_le_adv_stop+0x30>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1f35c:	210a      	movs	r1, #10
   1f35e:	4620      	mov	r0, r4
   1f360:	f019 fc4d 	bl	38bfe <atomic_test_bit>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f364:	b920      	cbnz	r0, 1f370 <bt_le_adv_stop+0x98>
		err = bt_le_adv_set_enable_legacy(adv, false);
   1f366:	2100      	movs	r1, #0
   1f368:	4628      	mov	r0, r5
   1f36a:	f019 fd6e 	bl	38e4a <bt_le_adv_set_enable_legacy>
		if (err) {
   1f36e:	e7cb      	b.n	1f308 <bt_le_adv_stop+0x30>
		le_adv_stop_free_conn(adv, 0);
   1f370:	2100      	movs	r1, #0
   1f372:	4628      	mov	r0, r5
   1f374:	f7ff fde0 	bl	1ef38 <le_adv_stop_free_conn>
   1f378:	e7f5      	b.n	1f366 <bt_le_adv_stop+0x8e>
   1f37a:	bf00      	nop
   1f37c:	00042cbc 	.word	0x00042cbc
   1f380:	0003f398 	.word	0x0003f398

0001f384 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1f384:	b590      	push	{r4, r7, lr}
   1f386:	b083      	sub	sp, #12
   1f388:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1f38a:	f7ff ffa5 	bl	1f2d8 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   1f38e:	b088      	sub	sp, #32
   1f390:	466b      	mov	r3, sp
   1f392:	f113 0210 	adds.w	r2, r3, #16
   1f396:	d032      	beq.n	1f3fe <adv_timeout+0x7a>
   1f398:	210c      	movs	r1, #12
   1f39a:	b142      	cbz	r2, 1f3ae <adv_timeout+0x2a>
   1f39c:	468c      	mov	ip, r1
   1f39e:	2904      	cmp	r1, #4
   1f3a0:	dd01      	ble.n	1f3a6 <adv_timeout+0x22>
   1f3a2:	4c1a      	ldr	r4, [pc, #104]	; (1f40c <adv_timeout+0x88>)
   1f3a4:	615c      	str	r4, [r3, #20]
   1f3a6:	f1bc 0f08 	cmp.w	ip, #8
   1f3aa:	dd00      	ble.n	1f3ae <adv_timeout+0x2a>
   1f3ac:	6198      	str	r0, [r3, #24]
   1f3ae:	290b      	cmp	r1, #11
   1f3b0:	dd28      	ble.n	1f404 <adv_timeout+0x80>
   1f3b2:	f04f 0c0c 	mov.w	ip, #12
   1f3b6:	b13a      	cbz	r2, 1f3c8 <adv_timeout+0x44>
   1f3b8:	2103      	movs	r1, #3
   1f3ba:	7139      	strb	r1, [r7, #4]
   1f3bc:	2100      	movs	r1, #0
   1f3be:	7179      	strb	r1, [r7, #5]
   1f3c0:	71b9      	strb	r1, [r7, #6]
   1f3c2:	71f9      	strb	r1, [r7, #7]
   1f3c4:	6878      	ldr	r0, [r7, #4]
   1f3c6:	6118      	str	r0, [r3, #16]
   1f3c8:	2100      	movs	r1, #0
   1f3ca:	f36f 0100 	bfc	r1, #0, #1
   1f3ce:	f36f 0141 	bfc	r1, #1, #1
   1f3d2:	f36f 0182 	bfc	r1, #2, #1
   1f3d6:	f36f 01c5 	bfc	r1, #3, #3
   1f3da:	2302      	movs	r3, #2
   1f3dc:	f363 1188 	bfi	r1, r3, #6, #3
   1f3e0:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1f3e4:	f36c 2152 	bfi	r1, ip, #9, #10
   1f3e8:	f36f 41de 	bfc	r1, #19, #12
   1f3ec:	f36f 71df 	bfc	r1, #31, #1
   1f3f0:	2300      	movs	r3, #0
   1f3f2:	4807      	ldr	r0, [pc, #28]	; (1f410 <adv_timeout+0x8c>)
   1f3f4:	f7f7 faaa 	bl	1694c <z_impl_z_log_msg_static_create>
}
   1f3f8:	370c      	adds	r7, #12
   1f3fa:	46bd      	mov	sp, r7
   1f3fc:	bd90      	pop	{r4, r7, pc}
	LOG_WRN("Failed to stop advertising: %d", err);
   1f3fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f402:	e7ca      	b.n	1f39a <adv_timeout+0x16>
   1f404:	f06f 0c1b 	mvn.w	ip, #27
   1f408:	e7d5      	b.n	1f3b6 <adv_timeout+0x32>
   1f40a:	bf00      	nop
   1f40c:	00042cd0 	.word	0x00042cd0
   1f410:	0003f398 	.word	0x0003f398

0001f414 <sys_memcpy_swap>:
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
{
	uint8_t *pdst = (uint8_t *)dst;
	const uint8_t *psrc = (const uint8_t *)src;

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f414:	4288      	cmp	r0, r1
   1f416:	d902      	bls.n	1f41e <sys_memcpy_swap+0xa>
   1f418:	188b      	adds	r3, r1, r2
   1f41a:	4283      	cmp	r3, r0
   1f41c:	d904      	bls.n	1f428 <sys_memcpy_swap+0x14>
   1f41e:	4288      	cmp	r0, r1
   1f420:	d205      	bcs.n	1f42e <sys_memcpy_swap+0x1a>
   1f422:	1883      	adds	r3, r0, r2
   1f424:	428b      	cmp	r3, r1
   1f426:	d802      	bhi.n	1f42e <sys_memcpy_swap+0x1a>
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   1f428:	1e53      	subs	r3, r2, #1
   1f42a:	4419      	add	r1, r3

	for (; length > 0; length--) {
   1f42c:	e015      	b.n	1f45a <sys_memcpy_swap+0x46>
{
   1f42e:	b510      	push	{r4, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1f430:	4c0b      	ldr	r4, [pc, #44]	; (1f460 <sys_memcpy_swap+0x4c>)
   1f432:	f240 2315 	movw	r3, #533	; 0x215
   1f436:	4622      	mov	r2, r4
   1f438:	490a      	ldr	r1, [pc, #40]	; (1f464 <sys_memcpy_swap+0x50>)
   1f43a:	480b      	ldr	r0, [pc, #44]	; (1f468 <sys_memcpy_swap+0x54>)
   1f43c:	f016 ff2a 	bl	36294 <assert_print>
   1f440:	480a      	ldr	r0, [pc, #40]	; (1f46c <sys_memcpy_swap+0x58>)
   1f442:	f016 ff27 	bl	36294 <assert_print>
   1f446:	f240 2115 	movw	r1, #533	; 0x215
   1f44a:	4620      	mov	r0, r4
   1f44c:	f016 ff1b 	bl	36286 <assert_post_action>
		*pdst++ = *psrc--;
   1f450:	f811 3901 	ldrb.w	r3, [r1], #-1
   1f454:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1f458:	3a01      	subs	r2, #1
   1f45a:	2a00      	cmp	r2, #0
   1f45c:	d1f8      	bne.n	1f450 <sys_memcpy_swap+0x3c>
   1f45e:	4770      	bx	lr
   1f460:	00042cf8 	.word	0x00042cf8
   1f464:	00042d2c 	.word	0x00042d2c
   1f468:	0003f72c 	.word	0x0003f72c
   1f46c:	00042d84 	.word	0x00042d84

0001f470 <prng_reseed>:
LOG_MODULE_REGISTER(bt_host_crypto);

static struct tc_hmac_prng_struct prng;

static int prng_reseed(struct tc_hmac_prng_struct *h)
{
   1f470:	b530      	push	{r4, r5, lr}
   1f472:	b095      	sub	sp, #84	; 0x54
   1f474:	4604      	mov	r4, r0
	uint8_t seed[32];
	int64_t extra;
	int ret;

	ret = bt_hci_le_rand(seed, sizeof(seed));
   1f476:	2120      	movs	r1, #32
   1f478:	a806      	add	r0, sp, #24
   1f47a:	f7fd fc5f 	bl	1cd3c <bt_hci_le_rand>
	if (ret) {
   1f47e:	4605      	mov	r5, r0
   1f480:	b110      	cbz	r0, 1f488 <prng_reseed+0x18>
		LOG_ERR("Failed to re-seed PRNG");
		return -EIO;
	}

	return 0;
}
   1f482:	4628      	mov	r0, r5
   1f484:	b015      	add	sp, #84	; 0x54
   1f486:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_uptime_ticks();
   1f488:	f01f fbe8 	bl	3ec5c <z_impl_k_uptime_ticks>
			return ((t * to_hz + off) / from_hz);
   1f48c:	014a      	lsls	r2, r1, #5
   1f48e:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   1f492:	0143      	lsls	r3, r0, #5
   1f494:	1a1b      	subs	r3, r3, r0
   1f496:	eb62 0201 	sbc.w	r2, r2, r1
   1f49a:	0092      	lsls	r2, r2, #2
   1f49c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
   1f4a0:	009b      	lsls	r3, r3, #2
   1f4a2:	181b      	adds	r3, r3, r0
   1f4a4:	eb42 0201 	adc.w	r2, r2, r1
   1f4a8:	00d2      	lsls	r2, r2, #3
   1f4aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   1f4ae:	f3c3 3310 	ubfx	r3, r3, #12, #17
   1f4b2:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
   1f4b6:	0bd2      	lsrs	r2, r2, #15
	extra = k_uptime_get();
   1f4b8:	9304      	str	r3, [sp, #16]
   1f4ba:	9205      	str	r2, [sp, #20]
	ret = tc_hmac_prng_reseed(h, seed, sizeof(seed), (uint8_t *)&extra,
   1f4bc:	2308      	movs	r3, #8
   1f4be:	9300      	str	r3, [sp, #0]
   1f4c0:	ab04      	add	r3, sp, #16
   1f4c2:	2220      	movs	r2, #32
   1f4c4:	a906      	add	r1, sp, #24
   1f4c6:	4620      	mov	r0, r4
   1f4c8:	f018 fd67 	bl	37f9a <tc_hmac_prng_reseed>
	if (ret == TC_CRYPTO_FAIL) {
   1f4cc:	2800      	cmp	r0, #0
   1f4ce:	d1d8      	bne.n	1f482 <prng_reseed+0x12>
		LOG_ERR("Failed to re-seed PRNG");
   1f4d0:	4b13      	ldr	r3, [pc, #76]	; (1f520 <prng_reseed+0xb0>)
   1f4d2:	9313      	str	r3, [sp, #76]	; 0x4c
   1f4d4:	2302      	movs	r3, #2
   1f4d6:	f88d 300c 	strb.w	r3, [sp, #12]
   1f4da:	2300      	movs	r3, #0
   1f4dc:	f88d 300d 	strb.w	r3, [sp, #13]
   1f4e0:	f88d 300e 	strb.w	r3, [sp, #14]
   1f4e4:	f88d 300f 	strb.w	r3, [sp, #15]
   1f4e8:	9a03      	ldr	r2, [sp, #12]
   1f4ea:	9212      	str	r2, [sp, #72]	; 0x48
   1f4ec:	4619      	mov	r1, r3
   1f4ee:	f363 0100 	bfi	r1, r3, #0, #1
   1f4f2:	f363 0141 	bfi	r1, r3, #1, #1
   1f4f6:	f363 0182 	bfi	r1, r3, #2, #1
   1f4fa:	f363 01c5 	bfi	r1, r3, #3, #3
   1f4fe:	2201      	movs	r2, #1
   1f500:	f362 1188 	bfi	r1, r2, #6, #3
   1f504:	2208      	movs	r2, #8
   1f506:	f362 2152 	bfi	r1, r2, #9, #10
   1f50a:	f363 41de 	bfi	r1, r3, #19, #12
   1f50e:	f363 71df 	bfi	r1, r3, #31, #1
   1f512:	aa12      	add	r2, sp, #72	; 0x48
   1f514:	4803      	ldr	r0, [pc, #12]	; (1f524 <prng_reseed+0xb4>)
   1f516:	f7f7 fa19 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   1f51a:	f06f 0504 	mvn.w	r5, #4
   1f51e:	e7b0      	b.n	1f482 <prng_reseed+0x12>
   1f520:	00042db8 	.word	0x00042db8
   1f524:	0003f3e0 	.word	0x0003f3e0

0001f528 <prng_init>:

int prng_init(void)
{
   1f528:	b500      	push	{lr}
   1f52a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t perso[8];
	int ret;

	ret = bt_hci_le_rand(perso, sizeof(perso));
   1f52c:	2108      	movs	r1, #8
   1f52e:	eb0d 0001 	add.w	r0, sp, r1
   1f532:	f7fd fc03 	bl	1cd3c <bt_hci_le_rand>
	if (ret) {
   1f536:	b110      	cbz	r0, 1f53e <prng_init+0x16>
		return -EIO;
	}

	/* re-seed is needed after init */
	return prng_reseed(&prng);
}
   1f538:	b00b      	add	sp, #44	; 0x2c
   1f53a:	f85d fb04 	ldr.w	pc, [sp], #4
	ret = tc_hmac_prng_init(&prng, perso, sizeof(perso));
   1f53e:	2208      	movs	r2, #8
   1f540:	eb0d 0102 	add.w	r1, sp, r2
   1f544:	4817      	ldr	r0, [pc, #92]	; (1f5a4 <prng_init+0x7c>)
   1f546:	f018 fd05 	bl	37f54 <tc_hmac_prng_init>
	if (ret == TC_CRYPTO_FAIL) {
   1f54a:	b118      	cbz	r0, 1f554 <prng_init+0x2c>
	return prng_reseed(&prng);
   1f54c:	4815      	ldr	r0, [pc, #84]	; (1f5a4 <prng_init+0x7c>)
   1f54e:	f7ff ff8f 	bl	1f470 <prng_reseed>
   1f552:	e7f1      	b.n	1f538 <prng_init+0x10>
		LOG_ERR("Failed to initialize PRNG");
   1f554:	4b14      	ldr	r3, [pc, #80]	; (1f5a8 <prng_init+0x80>)
   1f556:	9309      	str	r3, [sp, #36]	; 0x24
   1f558:	2302      	movs	r3, #2
   1f55a:	f88d 3004 	strb.w	r3, [sp, #4]
   1f55e:	2300      	movs	r3, #0
   1f560:	f88d 3005 	strb.w	r3, [sp, #5]
   1f564:	f88d 3006 	strb.w	r3, [sp, #6]
   1f568:	f88d 3007 	strb.w	r3, [sp, #7]
   1f56c:	9a01      	ldr	r2, [sp, #4]
   1f56e:	9208      	str	r2, [sp, #32]
   1f570:	4619      	mov	r1, r3
   1f572:	f363 0100 	bfi	r1, r3, #0, #1
   1f576:	f363 0141 	bfi	r1, r3, #1, #1
   1f57a:	f363 0182 	bfi	r1, r3, #2, #1
   1f57e:	f363 01c5 	bfi	r1, r3, #3, #3
   1f582:	2201      	movs	r2, #1
   1f584:	f362 1188 	bfi	r1, r2, #6, #3
   1f588:	2208      	movs	r2, #8
   1f58a:	f362 2152 	bfi	r1, r2, #9, #10
   1f58e:	f363 41de 	bfi	r1, r3, #19, #12
   1f592:	f363 71df 	bfi	r1, r3, #31, #1
   1f596:	aa08      	add	r2, sp, #32
   1f598:	4804      	ldr	r0, [pc, #16]	; (1f5ac <prng_init+0x84>)
   1f59a:	f7f7 f9d7 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   1f59e:	f06f 0004 	mvn.w	r0, #4
   1f5a2:	e7c9      	b.n	1f538 <prng_init+0x10>
   1f5a4:	2000b480 	.word	0x2000b480
   1f5a8:	00042dd0 	.word	0x00042dd0
   1f5ac:	0003f3e0 	.word	0x0003f3e0

0001f5b0 <bt_rand>:
#if defined(CONFIG_BT_HOST_CRYPTO_PRNG)
int bt_rand(void *buf, size_t len)
{
	int ret;

	CHECKIF(buf == NULL || len == 0) {
   1f5b0:	b1d8      	cbz	r0, 1f5ea <bt_rand+0x3a>
{
   1f5b2:	b538      	push	{r3, r4, r5, lr}
   1f5b4:	460c      	mov	r4, r1
   1f5b6:	4605      	mov	r5, r0
	CHECKIF(buf == NULL || len == 0) {
   1f5b8:	b1d1      	cbz	r1, 1f5f0 <bt_rand+0x40>
		return -EINVAL;
	}

	ret = tc_hmac_prng_generate(buf, len, &prng);
   1f5ba:	4a0f      	ldr	r2, [pc, #60]	; (1f5f8 <bt_rand+0x48>)
   1f5bc:	f018 fd0f 	bl	37fde <tc_hmac_prng_generate>
	if (ret == TC_HMAC_PRNG_RESEED_REQ) {
   1f5c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1f5c4:	d003      	beq.n	1f5ce <bt_rand+0x1e>
		}

		ret = tc_hmac_prng_generate(buf, len, &prng);
	}

	if (ret == TC_CRYPTO_SUCCESS) {
   1f5c6:	2801      	cmp	r0, #1
   1f5c8:	d10c      	bne.n	1f5e4 <bt_rand+0x34>
		return 0;
   1f5ca:	2000      	movs	r0, #0
	}

	return -EIO;
}
   1f5cc:	bd38      	pop	{r3, r4, r5, pc}
		ret = prng_reseed(&prng);
   1f5ce:	480a      	ldr	r0, [pc, #40]	; (1f5f8 <bt_rand+0x48>)
   1f5d0:	f7ff ff4e 	bl	1f470 <prng_reseed>
		if (ret) {
   1f5d4:	2800      	cmp	r0, #0
   1f5d6:	d1f9      	bne.n	1f5cc <bt_rand+0x1c>
		ret = tc_hmac_prng_generate(buf, len, &prng);
   1f5d8:	4a07      	ldr	r2, [pc, #28]	; (1f5f8 <bt_rand+0x48>)
   1f5da:	4621      	mov	r1, r4
   1f5dc:	4628      	mov	r0, r5
   1f5de:	f018 fcfe 	bl	37fde <tc_hmac_prng_generate>
   1f5e2:	e7f0      	b.n	1f5c6 <bt_rand+0x16>
	return -EIO;
   1f5e4:	f06f 0004 	mvn.w	r0, #4
   1f5e8:	e7f0      	b.n	1f5cc <bt_rand+0x1c>
		return -EINVAL;
   1f5ea:	f06f 0015 	mvn.w	r0, #21
}
   1f5ee:	4770      	bx	lr
		return -EINVAL;
   1f5f0:	f06f 0015 	mvn.w	r0, #21
   1f5f4:	e7ea      	b.n	1f5cc <bt_rand+0x1c>
   1f5f6:	bf00      	nop
   1f5f8:	2000b480 	.word	0x2000b480

0001f5fc <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
   1f5fc:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
   1f5fe:	2240      	movs	r2, #64	; 0x40
   1f600:	4903      	ldr	r1, [pc, #12]	; (1f610 <bt_pub_key_is_debug+0x14>)
   1f602:	f018 fed5 	bl	383b0 <memcmp>
}
   1f606:	fab0 f080 	clz	r0, r0
   1f60a:	0940      	lsrs	r0, r0, #5
   1f60c:	bd08      	pop	{r3, pc}
   1f60e:	bf00      	nop
   1f610:	00042e88 	.word	0x00042e88

0001f614 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
   1f614:	b530      	push	{r4, r5, lr}
   1f616:	b095      	sub	sp, #84	; 0x54
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
   1f618:	4b6a      	ldr	r3, [pc, #424]	; (1f7c4 <bt_pub_key_gen+0x1b0>)
   1f61a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   1f61e:	f003 0306 	and.w	r3, r3, #6
   1f622:	2b06      	cmp	r3, #6
   1f624:	d110      	bne.n	1f648 <bt_pub_key_gen+0x34>
			new_cb->func(debug_public_key);
			return 0;
		}
	}

	if (!new_cb) {
   1f626:	2800      	cmp	r0, #0
   1f628:	f000 80c9 	beq.w	1f7be <bt_pub_key_gen+0x1aa>
   1f62c:	4b66      	ldr	r3, [pc, #408]	; (1f7c8 <bt_pub_key_gen+0x1b4>)
   1f62e:	681a      	ldr	r2, [r3, #0]
		return -EINVAL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f630:	2a00      	cmp	r2, #0
   1f632:	d057      	beq.n	1f6e4 <bt_pub_key_gen+0xd0>
   1f634:	1f13      	subs	r3, r2, #4
   1f636:	2b00      	cmp	r3, #0
   1f638:	d056      	beq.n	1f6e8 <bt_pub_key_gen+0xd4>
		if (cb == new_cb) {
   1f63a:	4298      	cmp	r0, r3
   1f63c:	d02b      	beq.n	1f696 <bt_pub_key_gen+0x82>
	return node->next;
   1f63e:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f640:	2b00      	cmp	r3, #0
   1f642:	d0f8      	beq.n	1f636 <bt_pub_key_gen+0x22>
   1f644:	3b04      	subs	r3, #4
   1f646:	e7f6      	b.n	1f636 <bt_pub_key_gen+0x22>
		LOG_WRN("ECC HCI commands not available");
   1f648:	4b60      	ldr	r3, [pc, #384]	; (1f7cc <bt_pub_key_gen+0x1b8>)
   1f64a:	9313      	str	r3, [sp, #76]	; 0x4c
   1f64c:	2202      	movs	r2, #2
   1f64e:	f88d 2004 	strb.w	r2, [sp, #4]
   1f652:	2300      	movs	r3, #0
   1f654:	f88d 3005 	strb.w	r3, [sp, #5]
   1f658:	f88d 3006 	strb.w	r3, [sp, #6]
   1f65c:	f88d 3007 	strb.w	r3, [sp, #7]
   1f660:	9901      	ldr	r1, [sp, #4]
   1f662:	9112      	str	r1, [sp, #72]	; 0x48
   1f664:	4619      	mov	r1, r3
   1f666:	f363 0100 	bfi	r1, r3, #0, #1
   1f66a:	f363 0141 	bfi	r1, r3, #1, #1
   1f66e:	f363 0182 	bfi	r1, r3, #2, #1
   1f672:	f363 01c5 	bfi	r1, r3, #3, #3
   1f676:	f362 1188 	bfi	r1, r2, #6, #3
   1f67a:	2208      	movs	r2, #8
   1f67c:	f362 2152 	bfi	r1, r2, #9, #10
   1f680:	f363 41de 	bfi	r1, r3, #19, #12
   1f684:	f363 71df 	bfi	r1, r3, #31, #1
   1f688:	aa12      	add	r2, sp, #72	; 0x48
   1f68a:	4851      	ldr	r0, [pc, #324]	; (1f7d0 <bt_pub_key_gen+0x1bc>)
   1f68c:	f7f7 f95e 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   1f690:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1f694:	e04f      	b.n	1f736 <bt_pub_key_gen+0x122>
			LOG_WRN("Callback already registered");
   1f696:	4b4f      	ldr	r3, [pc, #316]	; (1f7d4 <bt_pub_key_gen+0x1c0>)
   1f698:	930d      	str	r3, [sp, #52]	; 0x34
   1f69a:	2202      	movs	r2, #2
   1f69c:	f88d 2004 	strb.w	r2, [sp, #4]
   1f6a0:	2300      	movs	r3, #0
   1f6a2:	f88d 3005 	strb.w	r3, [sp, #5]
   1f6a6:	f88d 3006 	strb.w	r3, [sp, #6]
   1f6aa:	f88d 3007 	strb.w	r3, [sp, #7]
   1f6ae:	9901      	ldr	r1, [sp, #4]
   1f6b0:	910c      	str	r1, [sp, #48]	; 0x30
   1f6b2:	4619      	mov	r1, r3
   1f6b4:	f363 0100 	bfi	r1, r3, #0, #1
   1f6b8:	f363 0141 	bfi	r1, r3, #1, #1
   1f6bc:	f363 0182 	bfi	r1, r3, #2, #1
   1f6c0:	f363 01c5 	bfi	r1, r3, #3, #3
   1f6c4:	f362 1188 	bfi	r1, r2, #6, #3
   1f6c8:	2208      	movs	r2, #8
   1f6ca:	f362 2152 	bfi	r1, r2, #9, #10
   1f6ce:	f363 41de 	bfi	r1, r3, #19, #12
   1f6d2:	f363 71df 	bfi	r1, r3, #31, #1
   1f6d6:	aa0c      	add	r2, sp, #48	; 0x30
   1f6d8:	483d      	ldr	r0, [pc, #244]	; (1f7d0 <bt_pub_key_gen+0x1bc>)
   1f6da:	f7f7 f937 	bl	1694c <z_impl_z_log_msg_static_create>
			return -EALREADY;
   1f6de:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1f6e2:	e028      	b.n	1f736 <bt_pub_key_gen+0x122>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f6e4:	4613      	mov	r3, r2
   1f6e6:	e7a6      	b.n	1f636 <bt_pub_key_gen+0x22>
		}
	}

	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
   1f6e8:	1d01      	adds	r1, r0, #4
	parent->next = child;
   1f6ea:	6042      	str	r2, [r0, #4]
	list->head = node;
   1f6ec:	4b36      	ldr	r3, [pc, #216]	; (1f7c8 <bt_pub_key_gen+0x1b4>)
   1f6ee:	6019      	str	r1, [r3, #0]
	return list->tail;
   1f6f0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f6f2:	b16b      	cbz	r3, 1f710 <bt_pub_key_gen+0xfc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f6f4:	4b38      	ldr	r3, [pc, #224]	; (1f7d8 <bt_pub_key_gen+0x1c4>)
   1f6f6:	e8d3 2fef 	ldaex	r2, [r3]
   1f6fa:	f042 0120 	orr.w	r1, r2, #32
   1f6fe:	e8c3 1fe0 	stlex	r0, r1, [r3]
   1f702:	2800      	cmp	r0, #0
   1f704:	d1f7      	bne.n	1f6f6 <bt_pub_key_gen+0xe2>

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1f706:	f012 0f20 	tst.w	r2, #32
   1f70a:	d004      	beq.n	1f716 <bt_pub_key_gen+0x102>
		return 0;
   1f70c:	2500      	movs	r5, #0
   1f70e:	e012      	b.n	1f736 <bt_pub_key_gen+0x122>
	list->tail = node;
   1f710:	4b2d      	ldr	r3, [pc, #180]	; (1f7c8 <bt_pub_key_gen+0x1b4>)
   1f712:	6059      	str	r1, [r3, #4]
}
   1f714:	e7ee      	b.n	1f6f4 <bt_pub_key_gen+0xe0>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f716:	e8d3 1fef 	ldaex	r1, [r3]
   1f71a:	f021 0110 	bic.w	r1, r1, #16
   1f71e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1f722:	2a00      	cmp	r2, #0
   1f724:	d1f7      	bne.n	1f716 <bt_pub_key_gen+0x102>
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
   1f726:	2200      	movs	r2, #0
   1f728:	4611      	mov	r1, r2
   1f72a:	f242 0025 	movw	r0, #8229	; 0x2025
   1f72e:	f7fc ff0f 	bl	1c550 <bt_hci_cmd_send_sync>
	if (err) {
   1f732:	4605      	mov	r5, r0
   1f734:	b910      	cbnz	r0, 1f73c <bt_pub_key_gen+0x128>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
   1f736:	4628      	mov	r0, r5
   1f738:	b015      	add	sp, #84	; 0x54
   1f73a:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Sending LE P256 Public Key command failed");
   1f73c:	4b27      	ldr	r3, [pc, #156]	; (1f7dc <bt_pub_key_gen+0x1c8>)
   1f73e:	9307      	str	r3, [sp, #28]
   1f740:	2302      	movs	r3, #2
   1f742:	f88d 3004 	strb.w	r3, [sp, #4]
   1f746:	2300      	movs	r3, #0
   1f748:	f88d 3005 	strb.w	r3, [sp, #5]
   1f74c:	f88d 3006 	strb.w	r3, [sp, #6]
   1f750:	f88d 3007 	strb.w	r3, [sp, #7]
   1f754:	9a01      	ldr	r2, [sp, #4]
   1f756:	9206      	str	r2, [sp, #24]
   1f758:	4619      	mov	r1, r3
   1f75a:	f363 0100 	bfi	r1, r3, #0, #1
   1f75e:	f363 0141 	bfi	r1, r3, #1, #1
   1f762:	f363 0182 	bfi	r1, r3, #2, #1
   1f766:	f363 01c5 	bfi	r1, r3, #3, #3
   1f76a:	2201      	movs	r2, #1
   1f76c:	f362 1188 	bfi	r1, r2, #6, #3
   1f770:	2208      	movs	r2, #8
   1f772:	f362 2152 	bfi	r1, r2, #9, #10
   1f776:	f363 41de 	bfi	r1, r3, #19, #12
   1f77a:	f363 71df 	bfi	r1, r3, #31, #1
   1f77e:	aa06      	add	r2, sp, #24
   1f780:	4813      	ldr	r0, [pc, #76]	; (1f7d0 <bt_pub_key_gen+0x1bc>)
   1f782:	f7f7 f8e3 	bl	1694c <z_impl_z_log_msg_static_create>
   1f786:	4b14      	ldr	r3, [pc, #80]	; (1f7d8 <bt_pub_key_gen+0x1c4>)
   1f788:	e8d3 1fef 	ldaex	r1, [r3]
   1f78c:	f021 0120 	bic.w	r1, r1, #32
   1f790:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1f794:	2a00      	cmp	r2, #0
   1f796:	d1f7      	bne.n	1f788 <bt_pub_key_gen+0x174>
	return list->head;
   1f798:	4b0b      	ldr	r3, [pc, #44]	; (1f7c8 <bt_pub_key_gen+0x1b4>)
   1f79a:	681c      	ldr	r4, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f79c:	b104      	cbz	r4, 1f7a0 <bt_pub_key_gen+0x18c>
   1f79e:	3c04      	subs	r4, #4
   1f7a0:	b144      	cbz	r4, 1f7b4 <bt_pub_key_gen+0x1a0>
			if (cb->func) {
   1f7a2:	6823      	ldr	r3, [r4, #0]
   1f7a4:	b10b      	cbz	r3, 1f7aa <bt_pub_key_gen+0x196>
				cb->func(NULL);
   1f7a6:	2000      	movs	r0, #0
   1f7a8:	4798      	blx	r3
	return node->next;
   1f7aa:	6864      	ldr	r4, [r4, #4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f7ac:	2c00      	cmp	r4, #0
   1f7ae:	d0f7      	beq.n	1f7a0 <bt_pub_key_gen+0x18c>
   1f7b0:	3c04      	subs	r4, #4
   1f7b2:	e7f5      	b.n	1f7a0 <bt_pub_key_gen+0x18c>
	list->head = NULL;
   1f7b4:	4b04      	ldr	r3, [pc, #16]	; (1f7c8 <bt_pub_key_gen+0x1b4>)
   1f7b6:	2200      	movs	r2, #0
   1f7b8:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1f7ba:	605a      	str	r2, [r3, #4]
		return err;
   1f7bc:	e7bb      	b.n	1f736 <bt_pub_key_gen+0x122>
		return -EINVAL;
   1f7be:	f06f 0515 	mvn.w	r5, #21
   1f7c2:	e7b8      	b.n	1f736 <bt_pub_key_gen+0x122>
   1f7c4:	20008000 	.word	0x20008000
   1f7c8:	2000c0a4 	.word	0x2000c0a4
   1f7cc:	00042dfc 	.word	0x00042dfc
   1f7d0:	0003f3b8 	.word	0x0003f3b8
   1f7d4:	00042e1c 	.word	0x00042e1c
   1f7d8:	200080cc 	.word	0x200080cc
   1f7dc:	00042e38 	.word	0x00042e38

0001f7e0 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f7e0:	4b04      	ldr	r3, [pc, #16]	; (1f7f4 <bt_pub_key_get+0x14>)
   1f7e2:	e8d3 3faf 	lda	r3, [r3]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		return debug_public_key;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1f7e6:	f013 0f10 	tst.w	r3, #16
   1f7ea:	d001      	beq.n	1f7f0 <bt_pub_key_get+0x10>
		return pub_key;
   1f7ec:	4802      	ldr	r0, [pc, #8]	; (1f7f8 <bt_pub_key_get+0x18>)
	}

	return NULL;
}
   1f7ee:	4770      	bx	lr
	return NULL;
   1f7f0:	2000      	movs	r0, #0
   1f7f2:	4770      	bx	lr
   1f7f4:	200080cc 	.word	0x200080cc
   1f7f8:	2000c0ac 	.word	0x2000c0ac

0001f7fc <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
   1f7fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7fe:	b083      	sub	sp, #12
   1f800:	af00      	add	r7, sp, #0
	int err;

	if (dh_key_cb == cb) {
   1f802:	4b32      	ldr	r3, [pc, #200]	; (1f8cc <bt_dh_key_gen+0xd0>)
   1f804:	681b      	ldr	r3, [r3, #0]
   1f806:	428b      	cmp	r3, r1
   1f808:	d059      	beq.n	1f8be <bt_dh_key_gen+0xc2>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
   1f80a:	b9ab      	cbnz	r3, 1f838 <bt_dh_key_gen+0x3c>
   1f80c:	4b30      	ldr	r3, [pc, #192]	; (1f8d0 <bt_dh_key_gen+0xd4>)
   1f80e:	e8d3 3faf 	lda	r3, [r3]
   1f812:	f013 0f20 	tst.w	r3, #32
   1f816:	d10f      	bne.n	1f838 <bt_dh_key_gen+0x3c>
   1f818:	4b2d      	ldr	r3, [pc, #180]	; (1f8d0 <bt_dh_key_gen+0xd4>)
   1f81a:	e8d3 3faf 	lda	r3, [r3]
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
   1f81e:	f013 0f10 	tst.w	r3, #16
   1f822:	d04f      	beq.n	1f8c4 <bt_dh_key_gen+0xc8>
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
   1f824:	4b29      	ldr	r3, [pc, #164]	; (1f8cc <bt_dh_key_gen+0xd0>)
   1f826:	6019      	str	r1, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_USE_DEBUG_KEYS) &&
	    BT_CMD_TEST(bt_dev.supported_commands, 41, 2)) {
		err = hci_generate_dhkey_v2(remote_pk,
					    BT_HCI_LE_KEY_TYPE_DEBUG);
	} else {
		err = hci_generate_dhkey_v1(remote_pk);
   1f828:	f019 fbc7 	bl	38fba <hci_generate_dhkey_v1>
	}

	if (err) {
   1f82c:	4604      	mov	r4, r0
   1f82e:	b930      	cbnz	r0, 1f83e <bt_dh_key_gen+0x42>
		LOG_WRN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
   1f830:	4620      	mov	r0, r4
   1f832:	370c      	adds	r7, #12
   1f834:	46bd      	mov	sp, r7
   1f836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBUSY;
   1f838:	f06f 040f 	mvn.w	r4, #15
   1f83c:	e7f8      	b.n	1f830 <bt_dh_key_gen+0x34>
		dh_key_cb = NULL;
   1f83e:	4b23      	ldr	r3, [pc, #140]	; (1f8cc <bt_dh_key_gen+0xd0>)
   1f840:	2200      	movs	r2, #0
   1f842:	601a      	str	r2, [r3, #0]
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1f844:	466d      	mov	r5, sp
   1f846:	b088      	sub	sp, #32
   1f848:	466b      	mov	r3, sp
   1f84a:	f113 0210 	adds.w	r2, r3, #16
   1f84e:	d030      	beq.n	1f8b2 <bt_dh_key_gen+0xb6>
   1f850:	210c      	movs	r1, #12
   1f852:	b13a      	cbz	r2, 1f864 <bt_dh_key_gen+0x68>
   1f854:	4608      	mov	r0, r1
   1f856:	2904      	cmp	r1, #4
   1f858:	dd01      	ble.n	1f85e <bt_dh_key_gen+0x62>
   1f85a:	4e1e      	ldr	r6, [pc, #120]	; (1f8d4 <bt_dh_key_gen+0xd8>)
   1f85c:	615e      	str	r6, [r3, #20]
   1f85e:	2808      	cmp	r0, #8
   1f860:	dd00      	ble.n	1f864 <bt_dh_key_gen+0x68>
   1f862:	619c      	str	r4, [r3, #24]
   1f864:	290b      	cmp	r1, #11
   1f866:	dd27      	ble.n	1f8b8 <bt_dh_key_gen+0xbc>
   1f868:	f04f 0c0c 	mov.w	ip, #12
   1f86c:	b13a      	cbz	r2, 1f87e <bt_dh_key_gen+0x82>
   1f86e:	2103      	movs	r1, #3
   1f870:	7139      	strb	r1, [r7, #4]
   1f872:	2100      	movs	r1, #0
   1f874:	7179      	strb	r1, [r7, #5]
   1f876:	71b9      	strb	r1, [r7, #6]
   1f878:	71f9      	strb	r1, [r7, #7]
   1f87a:	6878      	ldr	r0, [r7, #4]
   1f87c:	6118      	str	r0, [r3, #16]
   1f87e:	2100      	movs	r1, #0
   1f880:	f36f 0100 	bfc	r1, #0, #1
   1f884:	f36f 0141 	bfc	r1, #1, #1
   1f888:	f36f 0182 	bfc	r1, #2, #1
   1f88c:	f36f 01c5 	bfc	r1, #3, #3
   1f890:	2302      	movs	r3, #2
   1f892:	f363 1188 	bfi	r1, r3, #6, #3
   1f896:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   1f89a:	f363 2152 	bfi	r1, r3, #9, #10
   1f89e:	f36f 41de 	bfc	r1, #19, #12
   1f8a2:	f36f 71df 	bfc	r1, #31, #1
   1f8a6:	2300      	movs	r3, #0
   1f8a8:	480b      	ldr	r0, [pc, #44]	; (1f8d8 <bt_dh_key_gen+0xdc>)
   1f8aa:	f7f7 f84f 	bl	1694c <z_impl_z_log_msg_static_create>
   1f8ae:	46ad      	mov	sp, r5
		return err;
   1f8b0:	e7be      	b.n	1f830 <bt_dh_key_gen+0x34>
		LOG_WRN("Failed to generate DHKey (err %d)", err);
   1f8b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1f8b6:	e7cc      	b.n	1f852 <bt_dh_key_gen+0x56>
   1f8b8:	f06f 0c1b 	mvn.w	ip, #27
   1f8bc:	e7d6      	b.n	1f86c <bt_dh_key_gen+0x70>
		return -EALREADY;
   1f8be:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1f8c2:	e7b5      	b.n	1f830 <bt_dh_key_gen+0x34>
		return -EADDRNOTAVAIL;
   1f8c4:	f06f 047c 	mvn.w	r4, #124	; 0x7c
   1f8c8:	e7b2      	b.n	1f830 <bt_dh_key_gen+0x34>
   1f8ca:	bf00      	nop
   1f8cc:	2000c0a0 	.word	0x2000c0a0
   1f8d0:	200080cc 	.word	0x200080cc
   1f8d4:	00042e64 	.word	0x00042e64
   1f8d8:	0003f3b8 	.word	0x0003f3b8

0001f8dc <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
   1f8dc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
   1f8de:	68c5      	ldr	r5, [r0, #12]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f8e0:	4b1a      	ldr	r3, [pc, #104]	; (1f94c <bt_hci_evt_le_pkey_complete+0x70>)
   1f8e2:	e8d3 1fef 	ldaex	r1, [r3]
   1f8e6:	f021 0120 	bic.w	r1, r1, #32
   1f8ea:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1f8ee:	2a00      	cmp	r2, #0
   1f8f0:	d1f7      	bne.n	1f8e2 <bt_hci_evt_le_pkey_complete+0x6>

	LOG_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
   1f8f2:	782b      	ldrb	r3, [r5, #0]
   1f8f4:	b123      	cbz	r3, 1f900 <bt_hci_evt_le_pkey_complete+0x24>
	return list->head;
   1f8f6:	4b16      	ldr	r3, [pc, #88]	; (1f950 <bt_hci_evt_le_pkey_complete+0x74>)
   1f8f8:	681c      	ldr	r4, [r3, #0]
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f8fa:	b1cc      	cbz	r4, 1f930 <bt_hci_evt_le_pkey_complete+0x54>
   1f8fc:	3c04      	subs	r4, #4
   1f8fe:	e017      	b.n	1f930 <bt_hci_evt_le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
   1f900:	2240      	movs	r2, #64	; 0x40
   1f902:	1c69      	adds	r1, r5, #1
   1f904:	4813      	ldr	r0, [pc, #76]	; (1f954 <bt_hci_evt_le_pkey_complete+0x78>)
   1f906:	f018 fd78 	bl	383fa <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f90a:	4b10      	ldr	r3, [pc, #64]	; (1f94c <bt_hci_evt_le_pkey_complete+0x70>)
   1f90c:	e8d3 1fef 	ldaex	r1, [r3]
   1f910:	f041 0110 	orr.w	r1, r1, #16
   1f914:	e8c3 1fe2 	stlex	r2, r1, [r3]
   1f918:	2a00      	cmp	r2, #0
   1f91a:	d0ec      	beq.n	1f8f6 <bt_hci_evt_le_pkey_complete+0x1a>
   1f91c:	e7f6      	b.n	1f90c <bt_hci_evt_le_pkey_complete+0x30>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f91e:	1d23      	adds	r3, r4, #4
   1f920:	d103      	bne.n	1f92a <bt_hci_evt_le_pkey_complete+0x4e>
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f922:	461c      	mov	r4, r3
   1f924:	e004      	b.n	1f930 <bt_hci_evt_le_pkey_complete+0x54>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
   1f926:	2000      	movs	r0, #0
   1f928:	4798      	blx	r3
	return node->next;
   1f92a:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
   1f92c:	b104      	cbz	r4, 1f930 <bt_hci_evt_le_pkey_complete+0x54>
   1f92e:	3c04      	subs	r4, #4
   1f930:	b13c      	cbz	r4, 1f942 <bt_hci_evt_le_pkey_complete+0x66>
		if (cb->func) {
   1f932:	6823      	ldr	r3, [r4, #0]
   1f934:	2b00      	cmp	r3, #0
   1f936:	d0f2      	beq.n	1f91e <bt_hci_evt_le_pkey_complete+0x42>
			cb->func(evt->status ? NULL : pub_key);
   1f938:	782a      	ldrb	r2, [r5, #0]
   1f93a:	2a00      	cmp	r2, #0
   1f93c:	d1f3      	bne.n	1f926 <bt_hci_evt_le_pkey_complete+0x4a>
   1f93e:	4805      	ldr	r0, [pc, #20]	; (1f954 <bt_hci_evt_le_pkey_complete+0x78>)
   1f940:	e7f2      	b.n	1f928 <bt_hci_evt_le_pkey_complete+0x4c>
	list->head = NULL;
   1f942:	4b03      	ldr	r3, [pc, #12]	; (1f950 <bt_hci_evt_le_pkey_complete+0x74>)
   1f944:	2200      	movs	r2, #0
   1f946:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1f948:	605a      	str	r2, [r3, #4]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
   1f94a:	bd38      	pop	{r3, r4, r5, pc}
   1f94c:	200080cc 	.word	0x200080cc
   1f950:	2000c0a4 	.word	0x2000c0a4
   1f954:	2000c0ac 	.word	0x2000c0ac

0001f958 <bt_hci_evt_le_dhkey_complete>:

void bt_hci_evt_le_dhkey_complete(struct net_buf *buf)
{
   1f958:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
   1f95a:	68c0      	ldr	r0, [r0, #12]

	LOG_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
   1f95c:	4b06      	ldr	r3, [pc, #24]	; (1f978 <bt_hci_evt_le_dhkey_complete+0x20>)
   1f95e:	681b      	ldr	r3, [r3, #0]
   1f960:	b143      	cbz	r3, 1f974 <bt_hci_evt_le_dhkey_complete+0x1c>
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
   1f962:	4a05      	ldr	r2, [pc, #20]	; (1f978 <bt_hci_evt_le_dhkey_complete+0x20>)
   1f964:	2100      	movs	r1, #0
   1f966:	6011      	str	r1, [r2, #0]
		cb(evt->status ? NULL : evt->dhkey);
   1f968:	7802      	ldrb	r2, [r0, #0]
   1f96a:	b90a      	cbnz	r2, 1f970 <bt_hci_evt_le_dhkey_complete+0x18>
   1f96c:	3001      	adds	r0, #1
   1f96e:	e000      	b.n	1f972 <bt_hci_evt_le_dhkey_complete+0x1a>
   1f970:	2000      	movs	r0, #0
   1f972:	4798      	blx	r3
	}
}
   1f974:	bd08      	pop	{r3, pc}
   1f976:	bf00      	nop
   1f978:	2000c0a0 	.word	0x2000c0a0

0001f97c <state2str>:
#endif /* CONFIG_BT_CONN */
}

static inline const char *state2str(bt_conn_state_t state)
{
	switch (state) {
   1f97c:	2808      	cmp	r0, #8
   1f97e:	d816      	bhi.n	1f9ae <state2str+0x32>
   1f980:	e8df f000 	tbb	[pc, r0]
   1f984:	0d071705 	.word	0x0d071705
   1f988:	110f090b 	.word	0x110f090b
   1f98c:	13          	.byte	0x13
   1f98d:	00          	.byte	0x00
   1f98e:	480a      	ldr	r0, [pc, #40]	; (1f9b8 <state2str+0x3c>)
   1f990:	4770      	bx	lr
	case BT_CONN_DISCONNECTED:
		return "disconnected";
	case BT_CONN_DISCONNECT_COMPLETE:
		return "disconnect-complete";
	case BT_CONN_CONNECTING_SCAN:
		return "connecting-scan";
   1f992:	480a      	ldr	r0, [pc, #40]	; (1f9bc <state2str+0x40>)
   1f994:	4770      	bx	lr
	case BT_CONN_CONNECTING_DIR_ADV:
		return "connecting-dir-adv";
   1f996:	480a      	ldr	r0, [pc, #40]	; (1f9c0 <state2str+0x44>)
   1f998:	4770      	bx	lr
	case BT_CONN_CONNECTING_ADV:
		return "connecting-adv";
   1f99a:	480a      	ldr	r0, [pc, #40]	; (1f9c4 <state2str+0x48>)
   1f99c:	4770      	bx	lr
	case BT_CONN_CONNECTING_AUTO:
		return "connecting-auto";
   1f99e:	480a      	ldr	r0, [pc, #40]	; (1f9c8 <state2str+0x4c>)
   1f9a0:	4770      	bx	lr
	case BT_CONN_CONNECTING:
		return "connecting";
   1f9a2:	480a      	ldr	r0, [pc, #40]	; (1f9cc <state2str+0x50>)
   1f9a4:	4770      	bx	lr
	case BT_CONN_CONNECTED:
		return "connected";
   1f9a6:	480a      	ldr	r0, [pc, #40]	; (1f9d0 <state2str+0x54>)
   1f9a8:	4770      	bx	lr
	case BT_CONN_DISCONNECTING:
		return "disconnecting";
   1f9aa:	480a      	ldr	r0, [pc, #40]	; (1f9d4 <state2str+0x58>)
   1f9ac:	4770      	bx	lr
	default:
		return "(unknown)";
   1f9ae:	480a      	ldr	r0, [pc, #40]	; (1f9d8 <state2str+0x5c>)
   1f9b0:	4770      	bx	lr
		return "disconnect-complete";
   1f9b2:	480a      	ldr	r0, [pc, #40]	; (1f9dc <state2str+0x60>)
	}
}
   1f9b4:	4770      	bx	lr
   1f9b6:	bf00      	nop
   1f9b8:	00042ed0 	.word	0x00042ed0
   1f9bc:	00042ef4 	.word	0x00042ef4
   1f9c0:	00042f04 	.word	0x00042f04
   1f9c4:	00042f18 	.word	0x00042f18
   1f9c8:	00042f28 	.word	0x00042f28
   1f9cc:	00042f38 	.word	0x00042f38
   1f9d0:	000435a4 	.word	0x000435a4
   1f9d4:	00042f44 	.word	0x00042f44
   1f9d8:	00042f54 	.word	0x00042f54
   1f9dc:	00042ee0 	.word	0x00042ee0

0001f9e0 <tx_free>:

static void tx_free(struct bt_conn_tx *tx)
{
   1f9e0:	b508      	push	{r3, lr}
   1f9e2:	4601      	mov	r1, r0
	tx->cb = NULL;
   1f9e4:	2300      	movs	r3, #0
   1f9e6:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1f9e8:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1f9ea:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1f9ec:	4801      	ldr	r0, [pc, #4]	; (1f9f4 <tx_free+0x14>)
   1f9ee:	f01e fff5 	bl	3e9dc <k_queue_append>
}
   1f9f2:	bd08      	pop	{r3, pc}
   1f9f4:	20008a18 	.word	0x20008a18

0001f9f8 <notify_disconnected>:
		}
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   1f9f8:	b538      	push	{r3, r4, r5, lr}
   1f9fa:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1f9fc:	4b16      	ldr	r3, [pc, #88]	; (1fa58 <notify_disconnected+0x60>)
   1f9fe:	681c      	ldr	r4, [r3, #0]
   1fa00:	e000      	b.n	1fa04 <notify_disconnected+0xc>
   1fa02:	6a24      	ldr	r4, [r4, #32]
   1fa04:	b134      	cbz	r4, 1fa14 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1fa06:	6863      	ldr	r3, [r4, #4]
   1fa08:	2b00      	cmp	r3, #0
   1fa0a:	d0fa      	beq.n	1fa02 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   1fa0c:	7b29      	ldrb	r1, [r5, #12]
   1fa0e:	4628      	mov	r0, r5
   1fa10:	4798      	blx	r3
   1fa12:	e7f6      	b.n	1fa02 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1fa14:	4c11      	ldr	r4, [pc, #68]	; (1fa5c <notify_disconnected+0x64>)
   1fa16:	e000      	b.n	1fa1a <notify_disconnected+0x22>
   1fa18:	3424      	adds	r4, #36	; 0x24
   1fa1a:	4b11      	ldr	r3, [pc, #68]	; (1fa60 <notify_disconnected+0x68>)
   1fa1c:	429c      	cmp	r4, r3
   1fa1e:	d809      	bhi.n	1fa34 <notify_disconnected+0x3c>
   1fa20:	4b0f      	ldr	r3, [pc, #60]	; (1fa60 <notify_disconnected+0x68>)
   1fa22:	429c      	cmp	r4, r3
   1fa24:	d216      	bcs.n	1fa54 <notify_disconnected+0x5c>
		if (cb->disconnected) {
   1fa26:	6863      	ldr	r3, [r4, #4]
   1fa28:	2b00      	cmp	r3, #0
   1fa2a:	d0f5      	beq.n	1fa18 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1fa2c:	7b29      	ldrb	r1, [r5, #12]
   1fa2e:	4628      	mov	r0, r5
   1fa30:	4798      	blx	r3
   1fa32:	e7f1      	b.n	1fa18 <notify_disconnected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1fa34:	4c0b      	ldr	r4, [pc, #44]	; (1fa64 <notify_disconnected+0x6c>)
   1fa36:	f240 536c 	movw	r3, #1388	; 0x56c
   1fa3a:	4622      	mov	r2, r4
   1fa3c:	490a      	ldr	r1, [pc, #40]	; (1fa68 <notify_disconnected+0x70>)
   1fa3e:	480b      	ldr	r0, [pc, #44]	; (1fa6c <notify_disconnected+0x74>)
   1fa40:	f016 fc28 	bl	36294 <assert_print>
   1fa44:	480a      	ldr	r0, [pc, #40]	; (1fa70 <notify_disconnected+0x78>)
   1fa46:	f016 fc25 	bl	36294 <assert_print>
   1fa4a:	f240 516c 	movw	r1, #1388	; 0x56c
   1fa4e:	4620      	mov	r0, r4
   1fa50:	f016 fc19 	bl	36286 <assert_post_action>
		}
	}
}
   1fa54:	bd38      	pop	{r3, r4, r5, pc}
   1fa56:	bf00      	nop
   1fa58:	2000c11c 	.word	0x2000c11c
   1fa5c:	0003f334 	.word	0x0003f334
   1fa60:	0003f358 	.word	0x0003f358
   1fa64:	00042f60 	.word	0x00042f60
   1fa68:	00042f90 	.word	0x00042f90
   1fa6c:	0003f72c 	.word	0x0003f72c
   1fa70:	00040eb4 	.word	0x00040eb4

0001fa74 <conn_tx_destroy>:
{
   1fa74:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(tx);
   1fa76:	b159      	cbz	r1, 1fa90 <conn_tx_destroy+0x1c>
   1fa78:	4604      	mov	r4, r0
   1fa7a:	4608      	mov	r0, r1
	bt_conn_tx_cb_t cb = tx->cb;
   1fa7c:	684d      	ldr	r5, [r1, #4]
	void *user_data = tx->user_data;
   1fa7e:	688e      	ldr	r6, [r1, #8]
	tx_free(tx);
   1fa80:	f7ff ffae 	bl	1f9e0 <tx_free>
	cb(conn, user_data, -ESHUTDOWN);
   1fa84:	f06f 026d 	mvn.w	r2, #109	; 0x6d
   1fa88:	4631      	mov	r1, r6
   1fa8a:	4620      	mov	r0, r4
   1fa8c:	47a8      	blx	r5
}
   1fa8e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(tx);
   1fa90:	4c05      	ldr	r4, [pc, #20]	; (1faa8 <conn_tx_destroy+0x34>)
   1fa92:	2339      	movs	r3, #57	; 0x39
   1fa94:	4622      	mov	r2, r4
   1fa96:	4905      	ldr	r1, [pc, #20]	; (1faac <conn_tx_destroy+0x38>)
   1fa98:	4805      	ldr	r0, [pc, #20]	; (1fab0 <conn_tx_destroy+0x3c>)
   1fa9a:	f016 fbfb 	bl	36294 <assert_print>
   1fa9e:	2139      	movs	r1, #57	; 0x39
   1faa0:	4620      	mov	r0, r4
   1faa2:	f016 fbf0 	bl	36286 <assert_post_action>
   1faa6:	bf00      	nop
   1faa8:	00042f60 	.word	0x00042f60
   1faac:	00042fac 	.word	0x00042fac
   1fab0:	0003f72c 	.word	0x0003f72c

0001fab4 <notify_connected>:
{
   1fab4:	b538      	push	{r3, r4, r5, lr}
   1fab6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1fab8:	4b16      	ldr	r3, [pc, #88]	; (1fb14 <notify_connected+0x60>)
   1faba:	681c      	ldr	r4, [r3, #0]
   1fabc:	e000      	b.n	1fac0 <notify_connected+0xc>
   1fabe:	6a24      	ldr	r4, [r4, #32]
   1fac0:	b134      	cbz	r4, 1fad0 <notify_connected+0x1c>
		if (cb->connected) {
   1fac2:	6823      	ldr	r3, [r4, #0]
   1fac4:	2b00      	cmp	r3, #0
   1fac6:	d0fa      	beq.n	1fabe <notify_connected+0xa>
			cb->connected(conn, conn->err);
   1fac8:	7b29      	ldrb	r1, [r5, #12]
   1faca:	4628      	mov	r0, r5
   1facc:	4798      	blx	r3
   1face:	e7f6      	b.n	1fabe <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1fad0:	4c11      	ldr	r4, [pc, #68]	; (1fb18 <notify_connected+0x64>)
   1fad2:	e000      	b.n	1fad6 <notify_connected+0x22>
   1fad4:	3424      	adds	r4, #36	; 0x24
   1fad6:	4b11      	ldr	r3, [pc, #68]	; (1fb1c <notify_connected+0x68>)
   1fad8:	429c      	cmp	r4, r3
   1fada:	d809      	bhi.n	1faf0 <notify_connected+0x3c>
   1fadc:	4b0f      	ldr	r3, [pc, #60]	; (1fb1c <notify_connected+0x68>)
   1fade:	429c      	cmp	r4, r3
   1fae0:	d216      	bcs.n	1fb10 <notify_connected+0x5c>
		if (cb->connected) {
   1fae2:	6823      	ldr	r3, [r4, #0]
   1fae4:	2b00      	cmp	r3, #0
   1fae6:	d0f5      	beq.n	1fad4 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1fae8:	7b29      	ldrb	r1, [r5, #12]
   1faea:	4628      	mov	r0, r5
   1faec:	4798      	blx	r3
   1faee:	e7f1      	b.n	1fad4 <notify_connected+0x20>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1faf0:	4c0b      	ldr	r4, [pc, #44]	; (1fb20 <notify_connected+0x6c>)
   1faf2:	f240 535b 	movw	r3, #1371	; 0x55b
   1faf6:	4622      	mov	r2, r4
   1faf8:	490a      	ldr	r1, [pc, #40]	; (1fb24 <notify_connected+0x70>)
   1fafa:	480b      	ldr	r0, [pc, #44]	; (1fb28 <notify_connected+0x74>)
   1fafc:	f016 fbca 	bl	36294 <assert_print>
   1fb00:	480a      	ldr	r0, [pc, #40]	; (1fb2c <notify_connected+0x78>)
   1fb02:	f016 fbc7 	bl	36294 <assert_print>
   1fb06:	f240 515b 	movw	r1, #1371	; 0x55b
   1fb0a:	4620      	mov	r0, r4
   1fb0c:	f016 fbbb 	bl	36286 <assert_post_action>
}
   1fb10:	bd38      	pop	{r3, r4, r5, pc}
   1fb12:	bf00      	nop
   1fb14:	2000c11c 	.word	0x2000c11c
   1fb18:	0003f334 	.word	0x0003f334
   1fb1c:	0003f358 	.word	0x0003f358
   1fb20:	00042f60 	.word	0x00042f60
   1fb24:	00042f90 	.word	0x00042f90
   1fb28:	0003f72c 	.word	0x0003f72c
   1fb2c:	00040eb4 	.word	0x00040eb4

0001fb30 <conn_tx_alloc>:
{
   1fb30:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1fb32:	f014 fac9 	bl	340c8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1fb36:	4b08      	ldr	r3, [pc, #32]	; (1fb58 <conn_tx_alloc+0x28>)
   1fb38:	4283      	cmp	r3, r0
   1fb3a:	d007      	beq.n	1fb4c <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1fb3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fb40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb44:	4805      	ldr	r0, [pc, #20]	; (1fb5c <conn_tx_alloc+0x2c>)
   1fb46:	f012 f8bd 	bl	31cc4 <z_impl_k_queue_get>
}
   1fb4a:	bd08      	pop	{r3, pc}
   1fb4c:	2200      	movs	r2, #0
   1fb4e:	2300      	movs	r3, #0
   1fb50:	4802      	ldr	r0, [pc, #8]	; (1fb5c <conn_tx_alloc+0x2c>)
   1fb52:	f012 f8b7 	bl	31cc4 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1fb56:	e7f8      	b.n	1fb4a <conn_tx_alloc+0x1a>
   1fb58:	2000baf0 	.word	0x2000baf0
   1fb5c:	20008a18 	.word	0x20008a18

0001fb60 <bt_conn_get_pkts>:
}
   1fb60:	4800      	ldr	r0, [pc, #0]	; (1fb64 <bt_conn_get_pkts+0x4>)
   1fb62:	4770      	bx	lr
   1fb64:	20008100 	.word	0x20008100

0001fb68 <send_frag>:
{
   1fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb6c:	b083      	sub	sp, #12
   1fb6e:	af00      	add	r7, sp, #0
   1fb70:	4604      	mov	r4, r0
   1fb72:	460e      	mov	r6, r1
   1fb74:	4692      	mov	sl, r2
   1fb76:	461d      	mov	r5, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1fb78:	f8d1 8018 	ldr.w	r8, [r1, #24]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   1fb7c:	f7ff fff0 	bl	1fb60 <bt_conn_get_pkts>
   1fb80:	4681      	mov	r9, r0
	return z_impl_k_sem_take(sem, timeout);
   1fb82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1fb86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fb8a:	f012 f971 	bl	31e70 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1fb8e:	7b63      	ldrb	r3, [r4, #13]
   1fb90:	2b07      	cmp	r3, #7
   1fb92:	d16f      	bne.n	1fc74 <send_frag+0x10c>
   1fb94:	f04f 0220 	mov.w	r2, #32
   1fb98:	f3ef 8311 	mrs	r3, BASEPRI
   1fb9c:	f382 8812 	msr	BASEPRI_MAX, r2
   1fba0:	f3bf 8f6f 	isb	sy
	if (tx) {
   1fba4:	f1b8 0f00 	cmp.w	r8, #0
   1fba8:	d07b      	beq.n	1fca2 <send_frag+0x13a>
	parent->next = child;
   1fbaa:	2200      	movs	r2, #0
   1fbac:	f8c8 2000 	str.w	r2, [r8]
	return list->tail;
   1fbb0:	69a2      	ldr	r2, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1fbb2:	2a00      	cmp	r2, #0
   1fbb4:	d070      	beq.n	1fc98 <send_frag+0x130>
	parent->next = child;
   1fbb6:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
   1fbba:	f8c4 8018 	str.w	r8, [r4, #24]
	__asm__ volatile(
   1fbbe:	f383 8811 	msr	BASEPRI, r3
   1fbc2:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1fbc6:	4652      	mov	r2, sl
   1fbc8:	4631      	mov	r1, r6
   1fbca:	4620      	mov	r0, r4
   1fbcc:	f019 fa9e 	bl	3910c <send_acl>
	if (err) {
   1fbd0:	4684      	mov	ip, r0
   1fbd2:	2800      	cmp	r0, #0
   1fbd4:	f000 8090 	beq.w	1fcf8 <send_frag+0x190>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1fbd8:	46ea      	mov	sl, sp
   1fbda:	b088      	sub	sp, #32
   1fbdc:	466b      	mov	r3, sp
   1fbde:	f113 0210 	adds.w	r2, r3, #16
   1fbe2:	d06b      	beq.n	1fcbc <send_frag+0x154>
   1fbe4:	210c      	movs	r1, #12
   1fbe6:	b152      	cbz	r2, 1fbfe <send_frag+0x96>
   1fbe8:	4608      	mov	r0, r1
   1fbea:	2904      	cmp	r1, #4
   1fbec:	dd03      	ble.n	1fbf6 <send_frag+0x8e>
   1fbee:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1fcfc <send_frag+0x194>
   1fbf2:	f8c3 e014 	str.w	lr, [r3, #20]
   1fbf6:	2808      	cmp	r0, #8
   1fbf8:	dd01      	ble.n	1fbfe <send_frag+0x96>
   1fbfa:	f8c3 c018 	str.w	ip, [r3, #24]
   1fbfe:	290b      	cmp	r1, #11
   1fc00:	dd5f      	ble.n	1fcc2 <send_frag+0x15a>
   1fc02:	f04f 0c0c 	mov.w	ip, #12
   1fc06:	b13a      	cbz	r2, 1fc18 <send_frag+0xb0>
   1fc08:	2103      	movs	r1, #3
   1fc0a:	7139      	strb	r1, [r7, #4]
   1fc0c:	2100      	movs	r1, #0
   1fc0e:	7179      	strb	r1, [r7, #5]
   1fc10:	71b9      	strb	r1, [r7, #6]
   1fc12:	71f9      	strb	r1, [r7, #7]
   1fc14:	6878      	ldr	r0, [r7, #4]
   1fc16:	6118      	str	r0, [r3, #16]
   1fc18:	2100      	movs	r1, #0
   1fc1a:	f36f 0100 	bfc	r1, #0, #1
   1fc1e:	f36f 0141 	bfc	r1, #1, #1
   1fc22:	f36f 0182 	bfc	r1, #2, #1
   1fc26:	f36f 01c5 	bfc	r1, #3, #3
   1fc2a:	2301      	movs	r3, #1
   1fc2c:	f363 1188 	bfi	r1, r3, #6, #3
   1fc30:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   1fc34:	f36c 2152 	bfi	r1, ip, #9, #10
   1fc38:	f36f 41de 	bfc	r1, #19, #12
   1fc3c:	f36f 71df 	bfc	r1, #31, #1
   1fc40:	2300      	movs	r3, #0
   1fc42:	482f      	ldr	r0, [pc, #188]	; (1fd00 <send_frag+0x198>)
   1fc44:	f7f6 fe82 	bl	1694c <z_impl_z_log_msg_static_create>
   1fc48:	46d5      	mov	sp, sl
	__asm__ volatile(
   1fc4a:	f04f 0320 	mov.w	r3, #32
   1fc4e:	f3ef 8a11 	mrs	sl, BASEPRI
   1fc52:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc56:	f3bf 8f6f 	isb	sy
		if (tx) {
   1fc5a:	f1b8 0f00 	cmp.w	r8, #0
   1fc5e:	d133      	bne.n	1fcc8 <send_frag+0x160>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1fc60:	f8db 3000 	ldr.w	r3, [fp]
   1fc64:	b3b3      	cbz	r3, 1fcd4 <send_frag+0x16c>
			(*pending_no_cb)--;
   1fc66:	3b01      	subs	r3, #1
   1fc68:	f8cb 3000 	str.w	r3, [fp]
	__asm__ volatile(
   1fc6c:	f38a 8811 	msr	BASEPRI, sl
   1fc70:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1fc74:	4648      	mov	r0, r9
   1fc76:	f012 f8b3 	bl	31de0 <z_impl_k_sem_give>
	if (tx) {
   1fc7a:	f1b8 0f00 	cmp.w	r8, #0
   1fc7e:	d005      	beq.n	1fc8c <send_frag+0x124>
		tx_data(buf)->tx = NULL;
   1fc80:	2300      	movs	r3, #0
   1fc82:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   1fc84:	4641      	mov	r1, r8
   1fc86:	4620      	mov	r0, r4
   1fc88:	f7ff fef4 	bl	1fa74 <conn_tx_destroy>
	if (always_consume) {
   1fc8c:	bb7d      	cbnz	r5, 1fcee <send_frag+0x186>
}
   1fc8e:	4628      	mov	r0, r5
   1fc90:	370c      	adds	r7, #12
   1fc92:	46bd      	mov	sp, r7
   1fc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc98:	f8c4 8018 	str.w	r8, [r4, #24]
	list->head = node;
   1fc9c:	f8c4 8014 	str.w	r8, [r4, #20]
}
   1fca0:	e78d      	b.n	1fbbe <send_frag+0x56>
	return list->tail;
   1fca2:	69a2      	ldr	r2, [r4, #24]
		if (tail_tx) {
   1fca4:	b13a      	cbz	r2, 1fcb6 <send_frag+0x14e>
			pending_no_cb = &tail_tx->pending_no_cb;
   1fca6:	f102 0b0c 	add.w	fp, r2, #12
		(*pending_no_cb)++;
   1fcaa:	f8db 2000 	ldr.w	r2, [fp]
   1fcae:	3201      	adds	r2, #1
   1fcb0:	f8cb 2000 	str.w	r2, [fp]
   1fcb4:	e783      	b.n	1fbbe <send_frag+0x56>
			pending_no_cb = &conn->pending_no_cb;
   1fcb6:	f104 0b1c 	add.w	fp, r4, #28
   1fcba:	e7f6      	b.n	1fcaa <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1fcbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1fcc0:	e791      	b.n	1fbe6 <send_frag+0x7e>
   1fcc2:	f06f 0c1b 	mvn.w	ip, #27
   1fcc6:	e79e      	b.n	1fc06 <send_frag+0x9e>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1fcc8:	4641      	mov	r1, r8
   1fcca:	f104 0014 	add.w	r0, r4, #20
   1fcce:	f019 f9a2 	bl	39016 <sys_slist_find_and_remove>
   1fcd2:	e7cb      	b.n	1fc6c <send_frag+0x104>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1fcd4:	4c0b      	ldr	r4, [pc, #44]	; (1fd04 <send_frag+0x19c>)
   1fcd6:	f240 2327 	movw	r3, #551	; 0x227
   1fcda:	4622      	mov	r2, r4
   1fcdc:	490a      	ldr	r1, [pc, #40]	; (1fd08 <send_frag+0x1a0>)
   1fcde:	480b      	ldr	r0, [pc, #44]	; (1fd0c <send_frag+0x1a4>)
   1fce0:	f016 fad8 	bl	36294 <assert_print>
   1fce4:	f240 2127 	movw	r1, #551	; 0x227
   1fce8:	4620      	mov	r0, r4
   1fcea:	f016 facc 	bl	36286 <assert_post_action>
		net_buf_unref(buf);
   1fcee:	4630      	mov	r0, r6
   1fcf0:	f009 fcd8 	bl	296a4 <net_buf_unref>
	return false;
   1fcf4:	2500      	movs	r5, #0
   1fcf6:	e7ca      	b.n	1fc8e <send_frag+0x126>
	return true;
   1fcf8:	2501      	movs	r5, #1
   1fcfa:	e7c8      	b.n	1fc8e <send_frag+0x126>
   1fcfc:	00042704 	.word	0x00042704
   1fd00:	0003f3a8 	.word	0x0003f3a8
   1fd04:	00042f60 	.word	0x00042f60
   1fd08:	00042fb0 	.word	0x00042fb0
   1fd0c:	0003f72c 	.word	0x0003f72c

0001fd10 <bt_conn_new>:
{
   1fd10:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1fd12:	2300      	movs	r3, #0
   1fd14:	428b      	cmp	r3, r1
   1fd16:	d224      	bcs.n	1fd62 <bt_conn_new+0x52>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1fd18:	24d8      	movs	r4, #216	; 0xd8
   1fd1a:	fb04 0403 	mla	r4, r4, r3, r0
   1fd1e:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1fd22:	f04f 0c01 	mov.w	ip, #1
   1fd26:	e8d2 efef 	ldaex	lr, [r2]
   1fd2a:	f1be 0f00 	cmp.w	lr, #0
   1fd2e:	d103      	bne.n	1fd38 <bt_conn_new+0x28>
   1fd30:	e8c2 cfe5 	stlex	r5, ip, [r2]
   1fd34:	2d00      	cmp	r5, #0
   1fd36:	d1f6      	bne.n	1fd26 <bt_conn_new+0x16>
   1fd38:	d111      	bne.n	1fd5e <bt_conn_new+0x4e>
	if (!conn) {
   1fd3a:	b174      	cbz	r4, 1fd5a <bt_conn_new+0x4a>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   1fd3c:	22d0      	movs	r2, #208	; 0xd0
   1fd3e:	2100      	movs	r1, #0
   1fd40:	4620      	mov	r0, r4
   1fd42:	f018 fb89 	bl	38458 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1fd46:	4908      	ldr	r1, [pc, #32]	; (1fd68 <bt_conn_new+0x58>)
   1fd48:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1fd4c:	f012 fd2a 	bl	327a4 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1fd50:	4906      	ldr	r1, [pc, #24]	; (1fd6c <bt_conn_new+0x5c>)
   1fd52:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1fd56:	f012 fb67 	bl	32428 <k_work_init>
}
   1fd5a:	4620      	mov	r0, r4
   1fd5c:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1fd5e:	4463      	add	r3, ip
   1fd60:	e7d8      	b.n	1fd14 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1fd62:	2400      	movs	r4, #0
   1fd64:	e7e9      	b.n	1fd3a <bt_conn_new+0x2a>
   1fd66:	bf00      	nop
   1fd68:	00020cdd 	.word	0x00020cdd
   1fd6c:	00039083 	.word	0x00039083

0001fd70 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   1fd70:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1fd72:	2101      	movs	r1, #1
   1fd74:	4801      	ldr	r0, [pc, #4]	; (1fd7c <acl_conn_new+0xc>)
   1fd76:	f7ff ffcb 	bl	1fd10 <bt_conn_new>
}
   1fd7a:	bd08      	pop	{r3, pc}
   1fd7c:	2000b5b8 	.word	0x2000b5b8

0001fd80 <bt_acl_recv>:
{
   1fd80:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd82:	b095      	sub	sp, #84	; 0x54
   1fd84:	af00      	add	r7, sp, #0
   1fd86:	4604      	mov	r4, r0
   1fd88:	460d      	mov	r5, r1
	switch (flags) {
   1fd8a:	2a01      	cmp	r2, #1
   1fd8c:	d05a      	beq.n	1fe44 <bt_acl_recv+0xc4>
   1fd8e:	4613      	mov	r3, r2
   1fd90:	2a02      	cmp	r2, #2
   1fd92:	f040 80c4 	bne.w	1ff1e <bt_acl_recv+0x19e>
		if (conn->rx) {
   1fd96:	6903      	ldr	r3, [r0, #16]
   1fd98:	b323      	cbz	r3, 1fde4 <bt_acl_recv+0x64>
			LOG_ERR("Unexpected first L2CAP frame");
   1fd9a:	4ba0      	ldr	r3, [pc, #640]	; (2001c <bt_acl_recv+0x29c>)
   1fd9c:	61fb      	str	r3, [r7, #28]
   1fd9e:	2302      	movs	r3, #2
   1fda0:	713b      	strb	r3, [r7, #4]
   1fda2:	2300      	movs	r3, #0
   1fda4:	717b      	strb	r3, [r7, #5]
   1fda6:	71bb      	strb	r3, [r7, #6]
   1fda8:	71fb      	strb	r3, [r7, #7]
   1fdaa:	687a      	ldr	r2, [r7, #4]
   1fdac:	61ba      	str	r2, [r7, #24]
   1fdae:	4619      	mov	r1, r3
   1fdb0:	f363 0100 	bfi	r1, r3, #0, #1
   1fdb4:	f363 0141 	bfi	r1, r3, #1, #1
   1fdb8:	f363 0182 	bfi	r1, r3, #2, #1
   1fdbc:	f363 01c5 	bfi	r1, r3, #3, #3
   1fdc0:	2201      	movs	r2, #1
   1fdc2:	f362 1188 	bfi	r1, r2, #6, #3
   1fdc6:	2208      	movs	r2, #8
   1fdc8:	f362 2152 	bfi	r1, r2, #9, #10
   1fdcc:	f363 41de 	bfi	r1, r3, #19, #12
   1fdd0:	f363 71df 	bfi	r1, r3, #31, #1
   1fdd4:	f107 0218 	add.w	r2, r7, #24
   1fdd8:	4891      	ldr	r0, [pc, #580]	; (20020 <bt_acl_recv+0x2a0>)
   1fdda:	f7f6 fdb7 	bl	1694c <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1fdde:	4620      	mov	r0, r4
   1fde0:	f019 f9fb 	bl	391da <bt_conn_reset_rx_state>
		conn->rx = buf;
   1fde4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1fde6:	6921      	ldr	r1, [r4, #16]
   1fde8:	8a08      	ldrh	r0, [r1, #16]
   1fdea:	2801      	cmp	r0, #1
   1fdec:	f240 80db 	bls.w	1ffa6 <bt_acl_recv+0x226>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1fdf0:	68cb      	ldr	r3, [r1, #12]
	return ((uint16_t)src[1] << 8) | src[0];
   1fdf2:	785a      	ldrb	r2, [r3, #1]
   1fdf4:	781b      	ldrb	r3, [r3, #0]
   1fdf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1fdfa:	3304      	adds	r3, #4
   1fdfc:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1fdfe:	4283      	cmp	r3, r0
   1fe00:	f200 80d1 	bhi.w	1ffa6 <bt_acl_recv+0x226>
	if (conn->rx->len > acl_total_len) {
   1fe04:	f080 8103 	bcs.w	2000e <bt_acl_recv+0x28e>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1fe08:	466d      	mov	r5, sp
   1fe0a:	b088      	sub	sp, #32
   1fe0c:	4669      	mov	r1, sp
   1fe0e:	f111 0210 	adds.w	r2, r1, #16
   1fe12:	f000 80ce 	beq.w	1ffb2 <bt_acl_recv+0x232>
   1fe16:	2610      	movs	r6, #16
   1fe18:	b17a      	cbz	r2, 1fe3a <bt_acl_recv+0xba>
   1fe1a:	46b4      	mov	ip, r6
   1fe1c:	2e04      	cmp	r6, #4
   1fe1e:	dd03      	ble.n	1fe28 <bt_acl_recv+0xa8>
   1fe20:	f8df e200 	ldr.w	lr, [pc, #512]	; 20024 <bt_acl_recv+0x2a4>
   1fe24:	f8c1 e014 	str.w	lr, [r1, #20]
   1fe28:	f1bc 0f08 	cmp.w	ip, #8
   1fe2c:	dd00      	ble.n	1fe30 <bt_acl_recv+0xb0>
   1fe2e:	6188      	str	r0, [r1, #24]
   1fe30:	f1bc 0f0c 	cmp.w	ip, #12
   1fe34:	f340 80c0 	ble.w	1ffb8 <bt_acl_recv+0x238>
   1fe38:	61cb      	str	r3, [r1, #28]
   1fe3a:	2e0f      	cmp	r6, #15
   1fe3c:	f340 80e4 	ble.w	20008 <bt_acl_recv+0x288>
   1fe40:	2310      	movs	r3, #16
   1fe42:	e0bb      	b.n	1ffbc <bt_acl_recv+0x23c>
		if (!conn->rx) {
   1fe44:	6900      	ldr	r0, [r0, #16]
   1fe46:	b180      	cbz	r0, 1fe6a <bt_acl_recv+0xea>
		if (!buf->len) {
   1fe48:	8a0e      	ldrh	r6, [r1, #16]
   1fe4a:	b3be      	cbz	r6, 1febc <bt_acl_recv+0x13c>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1fe4c:	300c      	adds	r0, #12
   1fe4e:	f01b ffd4 	bl	3bdfa <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1fe52:	42b0      	cmp	r0, r6
   1fe54:	d336      	bcc.n	1fec4 <bt_acl_recv+0x144>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1fe56:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1fe58:	8a2a      	ldrh	r2, [r5, #16]
   1fe5a:	68e9      	ldr	r1, [r5, #12]
   1fe5c:	300c      	adds	r0, #12
   1fe5e:	f01b ffd5 	bl	3be0c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1fe62:	4628      	mov	r0, r5
   1fe64:	f009 fc1e 	bl	296a4 <net_buf_unref>
		break;
   1fe68:	e7bd      	b.n	1fde6 <bt_acl_recv+0x66>
			LOG_ERR("Unexpected L2CAP continuation");
   1fe6a:	4b6f      	ldr	r3, [pc, #444]	; (20028 <bt_acl_recv+0x2a8>)
   1fe6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   1fe6e:	2302      	movs	r3, #2
   1fe70:	713b      	strb	r3, [r7, #4]
   1fe72:	2300      	movs	r3, #0
   1fe74:	717b      	strb	r3, [r7, #5]
   1fe76:	71bb      	strb	r3, [r7, #6]
   1fe78:	71fb      	strb	r3, [r7, #7]
   1fe7a:	687a      	ldr	r2, [r7, #4]
   1fe7c:	64ba      	str	r2, [r7, #72]	; 0x48
   1fe7e:	4619      	mov	r1, r3
   1fe80:	f363 0100 	bfi	r1, r3, #0, #1
   1fe84:	f363 0141 	bfi	r1, r3, #1, #1
   1fe88:	f363 0182 	bfi	r1, r3, #2, #1
   1fe8c:	f363 01c5 	bfi	r1, r3, #3, #3
   1fe90:	2201      	movs	r2, #1
   1fe92:	f362 1188 	bfi	r1, r2, #6, #3
   1fe96:	2208      	movs	r2, #8
   1fe98:	f362 2152 	bfi	r1, r2, #9, #10
   1fe9c:	f363 41de 	bfi	r1, r3, #19, #12
   1fea0:	f363 71df 	bfi	r1, r3, #31, #1
   1fea4:	f107 0248 	add.w	r2, r7, #72	; 0x48
   1fea8:	485d      	ldr	r0, [pc, #372]	; (20020 <bt_acl_recv+0x2a0>)
   1feaa:	f7f6 fd4f 	bl	1694c <z_impl_z_log_msg_static_create>
			bt_conn_reset_rx_state(conn);
   1feae:	4620      	mov	r0, r4
   1feb0:	f019 f993 	bl	391da <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1feb4:	4628      	mov	r0, r5
   1feb6:	f009 fbf5 	bl	296a4 <net_buf_unref>
			return;
   1feba:	e074      	b.n	1ffa6 <bt_acl_recv+0x226>
			net_buf_unref(buf);
   1febc:	4608      	mov	r0, r1
   1febe:	f009 fbf1 	bl	296a4 <net_buf_unref>
			return;
   1fec2:	e070      	b.n	1ffa6 <bt_acl_recv+0x226>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1fec4:	4b59      	ldr	r3, [pc, #356]	; (2002c <bt_acl_recv+0x2ac>)
   1fec6:	637b      	str	r3, [r7, #52]	; 0x34
   1fec8:	2302      	movs	r3, #2
   1feca:	713b      	strb	r3, [r7, #4]
   1fecc:	2600      	movs	r6, #0
   1fece:	717e      	strb	r6, [r7, #5]
   1fed0:	71be      	strb	r6, [r7, #6]
   1fed2:	71fe      	strb	r6, [r7, #7]
   1fed4:	687b      	ldr	r3, [r7, #4]
   1fed6:	633b      	str	r3, [r7, #48]	; 0x30
   1fed8:	4631      	mov	r1, r6
   1feda:	f366 0100 	bfi	r1, r6, #0, #1
   1fede:	f366 0141 	bfi	r1, r6, #1, #1
   1fee2:	f366 0182 	bfi	r1, r6, #2, #1
   1fee6:	f366 01c5 	bfi	r1, r6, #3, #3
   1feea:	2301      	movs	r3, #1
   1feec:	f363 1188 	bfi	r1, r3, #6, #3
   1fef0:	2308      	movs	r3, #8
   1fef2:	f363 2152 	bfi	r1, r3, #9, #10
   1fef6:	f366 41de 	bfi	r1, r6, #19, #12
   1fefa:	f366 71df 	bfi	r1, r6, #31, #1
   1fefe:	4633      	mov	r3, r6
   1ff00:	f107 0230 	add.w	r2, r7, #48	; 0x30
   1ff04:	4846      	ldr	r0, [pc, #280]	; (20020 <bt_acl_recv+0x2a0>)
   1ff06:	f7f6 fd21 	bl	1694c <z_impl_z_log_msg_static_create>
			bt_l2cap_recv(conn, conn->rx, false);
   1ff0a:	4632      	mov	r2, r6
   1ff0c:	6921      	ldr	r1, [r4, #16]
   1ff0e:	4620      	mov	r0, r4
   1ff10:	f001 fb74 	bl	215fc <bt_l2cap_recv>
			conn->rx = NULL;
   1ff14:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   1ff16:	4628      	mov	r0, r5
   1ff18:	f009 fbc4 	bl	296a4 <net_buf_unref>
			return;
   1ff1c:	e043      	b.n	1ffa6 <bt_acl_recv+0x226>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1ff1e:	466e      	mov	r6, sp
   1ff20:	b088      	sub	sp, #32
   1ff22:	4669      	mov	r1, sp
   1ff24:	f111 0210 	adds.w	r2, r1, #16
   1ff28:	d010      	beq.n	1ff4c <bt_acl_recv+0x1cc>
   1ff2a:	200c      	movs	r0, #12
   1ff2c:	b152      	cbz	r2, 1ff44 <bt_acl_recv+0x1c4>
   1ff2e:	4684      	mov	ip, r0
   1ff30:	2804      	cmp	r0, #4
   1ff32:	dd03      	ble.n	1ff3c <bt_acl_recv+0x1bc>
   1ff34:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 20030 <bt_acl_recv+0x2b0>
   1ff38:	f8c1 e014 	str.w	lr, [r1, #20]
   1ff3c:	f1bc 0f08 	cmp.w	ip, #8
   1ff40:	dd07      	ble.n	1ff52 <bt_acl_recv+0x1d2>
   1ff42:	618b      	str	r3, [r1, #24]
   1ff44:	280b      	cmp	r0, #11
   1ff46:	dd31      	ble.n	1ffac <bt_acl_recv+0x22c>
   1ff48:	230c      	movs	r3, #12
   1ff4a:	e004      	b.n	1ff56 <bt_acl_recv+0x1d6>
   1ff4c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1ff50:	e7ec      	b.n	1ff2c <bt_acl_recv+0x1ac>
   1ff52:	f06f 031b 	mvn.w	r3, #27
   1ff56:	b13a      	cbz	r2, 1ff68 <bt_acl_recv+0x1e8>
   1ff58:	2003      	movs	r0, #3
   1ff5a:	7138      	strb	r0, [r7, #4]
   1ff5c:	2000      	movs	r0, #0
   1ff5e:	7178      	strb	r0, [r7, #5]
   1ff60:	71b8      	strb	r0, [r7, #6]
   1ff62:	71f8      	strb	r0, [r7, #7]
   1ff64:	6878      	ldr	r0, [r7, #4]
   1ff66:	6108      	str	r0, [r1, #16]
   1ff68:	2100      	movs	r1, #0
   1ff6a:	f36f 0100 	bfc	r1, #0, #1
   1ff6e:	f36f 0141 	bfc	r1, #1, #1
   1ff72:	f36f 0182 	bfc	r1, #2, #1
   1ff76:	f36f 01c5 	bfc	r1, #3, #3
   1ff7a:	2001      	movs	r0, #1
   1ff7c:	f360 1188 	bfi	r1, r0, #6, #3
   1ff80:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   1ff84:	f363 2152 	bfi	r1, r3, #9, #10
   1ff88:	f36f 41de 	bfc	r1, #19, #12
   1ff8c:	f36f 71df 	bfc	r1, #31, #1
   1ff90:	2300      	movs	r3, #0
   1ff92:	4823      	ldr	r0, [pc, #140]	; (20020 <bt_acl_recv+0x2a0>)
   1ff94:	f7f6 fcda 	bl	1694c <z_impl_z_log_msg_static_create>
   1ff98:	46b5      	mov	sp, r6
		bt_conn_reset_rx_state(conn);
   1ff9a:	4620      	mov	r0, r4
   1ff9c:	f019 f91d 	bl	391da <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1ffa0:	4628      	mov	r0, r5
   1ffa2:	f009 fb7f 	bl	296a4 <net_buf_unref>
}
   1ffa6:	3754      	adds	r7, #84	; 0x54
   1ffa8:	46bd      	mov	sp, r7
   1ffaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1ffac:	f06f 031b 	mvn.w	r3, #27
   1ffb0:	e7d1      	b.n	1ff56 <bt_acl_recv+0x1d6>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   1ffb2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   1ffb6:	e72f      	b.n	1fe18 <bt_acl_recv+0x98>
   1ffb8:	f06f 031b 	mvn.w	r3, #27
   1ffbc:	b13a      	cbz	r2, 1ffce <bt_acl_recv+0x24e>
   1ffbe:	2004      	movs	r0, #4
   1ffc0:	7138      	strb	r0, [r7, #4]
   1ffc2:	2000      	movs	r0, #0
   1ffc4:	7178      	strb	r0, [r7, #5]
   1ffc6:	71b8      	strb	r0, [r7, #6]
   1ffc8:	71f8      	strb	r0, [r7, #7]
   1ffca:	6878      	ldr	r0, [r7, #4]
   1ffcc:	6108      	str	r0, [r1, #16]
   1ffce:	2100      	movs	r1, #0
   1ffd0:	f36f 0100 	bfc	r1, #0, #1
   1ffd4:	f36f 0141 	bfc	r1, #1, #1
   1ffd8:	f36f 0182 	bfc	r1, #2, #1
   1ffdc:	f36f 01c5 	bfc	r1, #3, #3
   1ffe0:	2001      	movs	r0, #1
   1ffe2:	f360 1188 	bfi	r1, r0, #6, #3
   1ffe6:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1ffea:	f363 2152 	bfi	r1, r3, #9, #10
   1ffee:	f36f 41de 	bfc	r1, #19, #12
   1fff2:	f36f 71df 	bfc	r1, #31, #1
   1fff6:	2300      	movs	r3, #0
   1fff8:	4809      	ldr	r0, [pc, #36]	; (20020 <bt_acl_recv+0x2a0>)
   1fffa:	f7f6 fca7 	bl	1694c <z_impl_z_log_msg_static_create>
   1fffe:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   20000:	4620      	mov	r0, r4
   20002:	f019 f8ea 	bl	391da <bt_conn_reset_rx_state>
		return;
   20006:	e7ce      	b.n	1ffa6 <bt_acl_recv+0x226>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   20008:	f06f 031b 	mvn.w	r3, #27
   2000c:	e7d6      	b.n	1ffbc <bt_acl_recv+0x23c>
	conn->rx = NULL;
   2000e:	2300      	movs	r3, #0
   20010:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   20012:	2201      	movs	r2, #1
   20014:	4620      	mov	r0, r4
   20016:	f001 faf1 	bl	215fc <bt_l2cap_recv>
   2001a:	e7c4      	b.n	1ffa6 <bt_acl_recv+0x226>
   2001c:	00042fc4 	.word	0x00042fc4
   20020:	0003f3a8 	.word	0x0003f3a8
   20024:	0004304c 	.word	0x0004304c
   20028:	00042fe4 	.word	0x00042fe4
   2002c:	00043004 	.word	0x00043004
   20030:	0004302c 	.word	0x0004302c

00020034 <conn_cleanup>:
{
   20034:	b538      	push	{r3, r4, r5, lr}
   20036:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   20038:	2200      	movs	r2, #0
   2003a:	2300      	movs	r3, #0
   2003c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   20040:	f01b febe 	bl	3bdc0 <net_buf_get>
   20044:	4603      	mov	r3, r0
   20046:	b160      	cbz	r0, 20062 <conn_cleanup+0x2e>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   20048:	699c      	ldr	r4, [r3, #24]
		tx_data(buf)->tx = NULL;
   2004a:	2200      	movs	r2, #0
   2004c:	619a      	str	r2, [r3, #24]
		net_buf_unref(buf);
   2004e:	4618      	mov	r0, r3
   20050:	f009 fb28 	bl	296a4 <net_buf_unref>
		if (tx) {
   20054:	2c00      	cmp	r4, #0
   20056:	d0ef      	beq.n	20038 <conn_cleanup+0x4>
			conn_tx_destroy(conn, tx);
   20058:	4621      	mov	r1, r4
   2005a:	4628      	mov	r0, r5
   2005c:	f7ff fd0a 	bl	1fa74 <conn_tx_destroy>
   20060:	e7ea      	b.n	20038 <conn_cleanup+0x4>
	return list->head;
   20062:	696b      	ldr	r3, [r5, #20]
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   20064:	b95b      	cbnz	r3, 2007e <conn_cleanup+0x4a>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   20066:	69eb      	ldr	r3, [r5, #28]
   20068:	b9cb      	cbnz	r3, 2009e <conn_cleanup+0x6a>
	bt_conn_reset_rx_state(conn);
   2006a:	4628      	mov	r0, r5
   2006c:	f019 f8b5 	bl	391da <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   20070:	2200      	movs	r2, #0
   20072:	2300      	movs	r3, #0
   20074:	f105 0060 	add.w	r0, r5, #96	; 0x60
   20078:	f012 fcf0 	bl	32a5c <k_work_reschedule>
}
   2007c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   2007e:	4c0e      	ldr	r4, [pc, #56]	; (200b8 <conn_cleanup+0x84>)
   20080:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   20084:	4622      	mov	r2, r4
   20086:	490d      	ldr	r1, [pc, #52]	; (200bc <conn_cleanup+0x88>)
   20088:	480d      	ldr	r0, [pc, #52]	; (200c0 <conn_cleanup+0x8c>)
   2008a:	f016 f903 	bl	36294 <assert_print>
   2008e:	480d      	ldr	r0, [pc, #52]	; (200c4 <conn_cleanup+0x90>)
   20090:	f016 f900 	bl	36294 <assert_print>
   20094:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   20098:	4620      	mov	r0, r4
   2009a:	f016 f8f4 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   2009e:	4c06      	ldr	r4, [pc, #24]	; (200b8 <conn_cleanup+0x84>)
   200a0:	f240 23b5 	movw	r3, #693	; 0x2b5
   200a4:	4622      	mov	r2, r4
   200a6:	4908      	ldr	r1, [pc, #32]	; (200c8 <conn_cleanup+0x94>)
   200a8:	4805      	ldr	r0, [pc, #20]	; (200c0 <conn_cleanup+0x8c>)
   200aa:	f016 f8f3 	bl	36294 <assert_print>
   200ae:	f240 21b5 	movw	r1, #693	; 0x2b5
   200b2:	4620      	mov	r0, r4
   200b4:	f016 f8e7 	bl	36286 <assert_post_action>
   200b8:	00042f60 	.word	0x00042f60
   200bc:	00043068 	.word	0x00043068
   200c0:	0003f72c 	.word	0x0003f72c
   200c4:	00043090 	.word	0x00043090
   200c8:	000430a8 	.word	0x000430a8

000200cc <bt_conn_send_cb>:
{
   200cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200d0:	b094      	sub	sp, #80	; 0x50
   200d2:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   200d4:	7b43      	ldrb	r3, [r0, #13]
   200d6:	2b07      	cmp	r3, #7
   200d8:	d11b      	bne.n	20112 <bt_conn_send_cb+0x46>
   200da:	4604      	mov	r4, r0
   200dc:	460d      	mov	r5, r1
   200de:	4616      	mov	r6, r2
	if (cb) {
   200e0:	2a00      	cmp	r2, #0
   200e2:	f000 8090 	beq.w	20206 <bt_conn_send_cb+0x13a>
		tx = conn_tx_alloc();
   200e6:	f7ff fd23 	bl	1fb30 <conn_tx_alloc>
		if (!tx) {
   200ea:	4680      	mov	r8, r0
   200ec:	2800      	cmp	r0, #0
   200ee:	d038      	beq.n	20162 <bt_conn_send_cb+0x96>
		if (conn->state != BT_CONN_CONNECTED) {
   200f0:	7b63      	ldrb	r3, [r4, #13]
   200f2:	2b07      	cmp	r3, #7
   200f4:	d15d      	bne.n	201b2 <bt_conn_send_cb+0xe6>
		tx->cb = cb;
   200f6:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   200f8:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   200fa:	2300      	movs	r3, #0
   200fc:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   200fe:	61a8      	str	r0, [r5, #24]
	net_buf_put(&conn->tx_queue, buf);
   20100:	4629      	mov	r1, r5
   20102:	f104 0038 	add.w	r0, r4, #56	; 0x38
   20106:	f009 faa5 	bl	29654 <net_buf_put>
	return 0;
   2010a:	2000      	movs	r0, #0
}
   2010c:	b014      	add	sp, #80	; 0x50
   2010e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("not connected!");
   20112:	4b3e      	ldr	r3, [pc, #248]	; (2020c <bt_conn_send_cb+0x140>)
   20114:	9313      	str	r3, [sp, #76]	; 0x4c
   20116:	2302      	movs	r3, #2
   20118:	f88d 3004 	strb.w	r3, [sp, #4]
   2011c:	2300      	movs	r3, #0
   2011e:	f88d 3005 	strb.w	r3, [sp, #5]
   20122:	f88d 3006 	strb.w	r3, [sp, #6]
   20126:	f88d 3007 	strb.w	r3, [sp, #7]
   2012a:	9a01      	ldr	r2, [sp, #4]
   2012c:	9212      	str	r2, [sp, #72]	; 0x48
   2012e:	4619      	mov	r1, r3
   20130:	f363 0100 	bfi	r1, r3, #0, #1
   20134:	f363 0141 	bfi	r1, r3, #1, #1
   20138:	f363 0182 	bfi	r1, r3, #2, #1
   2013c:	f363 01c5 	bfi	r1, r3, #3, #3
   20140:	2201      	movs	r2, #1
   20142:	f362 1188 	bfi	r1, r2, #6, #3
   20146:	2208      	movs	r2, #8
   20148:	f362 2152 	bfi	r1, r2, #9, #10
   2014c:	f363 41de 	bfi	r1, r3, #19, #12
   20150:	f363 71df 	bfi	r1, r3, #31, #1
   20154:	aa12      	add	r2, sp, #72	; 0x48
   20156:	482e      	ldr	r0, [pc, #184]	; (20210 <bt_conn_send_cb+0x144>)
   20158:	f7f6 fbf8 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENOTCONN;
   2015c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20160:	e7d4      	b.n	2010c <bt_conn_send_cb+0x40>
			LOG_ERR("Unable to allocate TX context");
   20162:	4b2c      	ldr	r3, [pc, #176]	; (20214 <bt_conn_send_cb+0x148>)
   20164:	930d      	str	r3, [sp, #52]	; 0x34
   20166:	2302      	movs	r3, #2
   20168:	f88d 3004 	strb.w	r3, [sp, #4]
   2016c:	2300      	movs	r3, #0
   2016e:	f88d 3005 	strb.w	r3, [sp, #5]
   20172:	f88d 3006 	strb.w	r3, [sp, #6]
   20176:	f88d 3007 	strb.w	r3, [sp, #7]
   2017a:	9a01      	ldr	r2, [sp, #4]
   2017c:	920c      	str	r2, [sp, #48]	; 0x30
   2017e:	4619      	mov	r1, r3
   20180:	f363 0100 	bfi	r1, r3, #0, #1
   20184:	f363 0141 	bfi	r1, r3, #1, #1
   20188:	f363 0182 	bfi	r1, r3, #2, #1
   2018c:	f363 01c5 	bfi	r1, r3, #3, #3
   20190:	2201      	movs	r2, #1
   20192:	f362 1188 	bfi	r1, r2, #6, #3
   20196:	2208      	movs	r2, #8
   20198:	f362 2152 	bfi	r1, r2, #9, #10
   2019c:	f363 41de 	bfi	r1, r3, #19, #12
   201a0:	f363 71df 	bfi	r1, r3, #31, #1
   201a4:	aa0c      	add	r2, sp, #48	; 0x30
   201a6:	481a      	ldr	r0, [pc, #104]	; (20210 <bt_conn_send_cb+0x144>)
   201a8:	f7f6 fbd0 	bl	1694c <z_impl_z_log_msg_static_create>
			return -ENOBUFS;
   201ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   201b0:	e7ac      	b.n	2010c <bt_conn_send_cb+0x40>
			LOG_WRN("Disconnected while allocating context");
   201b2:	4b19      	ldr	r3, [pc, #100]	; (20218 <bt_conn_send_cb+0x14c>)
   201b4:	9307      	str	r3, [sp, #28]
   201b6:	2202      	movs	r2, #2
   201b8:	f88d 2004 	strb.w	r2, [sp, #4]
   201bc:	2300      	movs	r3, #0
   201be:	f88d 3005 	strb.w	r3, [sp, #5]
   201c2:	f88d 3006 	strb.w	r3, [sp, #6]
   201c6:	f88d 3007 	strb.w	r3, [sp, #7]
   201ca:	9901      	ldr	r1, [sp, #4]
   201cc:	9106      	str	r1, [sp, #24]
   201ce:	4619      	mov	r1, r3
   201d0:	f363 0100 	bfi	r1, r3, #0, #1
   201d4:	f363 0141 	bfi	r1, r3, #1, #1
   201d8:	f363 0182 	bfi	r1, r3, #2, #1
   201dc:	f363 01c5 	bfi	r1, r3, #3, #3
   201e0:	f362 1188 	bfi	r1, r2, #6, #3
   201e4:	2208      	movs	r2, #8
   201e6:	f362 2152 	bfi	r1, r2, #9, #10
   201ea:	f363 41de 	bfi	r1, r3, #19, #12
   201ee:	f363 71df 	bfi	r1, r3, #31, #1
   201f2:	aa06      	add	r2, sp, #24
   201f4:	4806      	ldr	r0, [pc, #24]	; (20210 <bt_conn_send_cb+0x144>)
   201f6:	f7f6 fba9 	bl	1694c <z_impl_z_log_msg_static_create>
			tx_free(tx);
   201fa:	4640      	mov	r0, r8
   201fc:	f7ff fbf0 	bl	1f9e0 <tx_free>
			return -ENOTCONN;
   20200:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   20204:	e782      	b.n	2010c <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   20206:	2300      	movs	r3, #0
   20208:	618b      	str	r3, [r1, #24]
   2020a:	e779      	b.n	20100 <bt_conn_send_cb+0x34>
   2020c:	000430c4 	.word	0x000430c4
   20210:	0003f3a8 	.word	0x0003f3a8
   20214:	000430d4 	.word	0x000430d4
   20218:	000430f4 	.word	0x000430f4

0002021c <bt_conn_prepare_events>:
{
   2021c:	b570      	push	{r4, r5, r6, lr}
   2021e:	4606      	mov	r6, r0
	z_impl_k_poll_signal_init(sig);
   20220:	4c0e      	ldr	r4, [pc, #56]	; (2025c <bt_conn_prepare_events+0x40>)
   20222:	4620      	mov	r0, r4
   20224:	f01e fe0c 	bl	3ee40 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   20228:	4623      	mov	r3, r4
   2022a:	2200      	movs	r2, #0
   2022c:	2101      	movs	r1, #1
   2022e:	4630      	mov	r0, r6
   20230:	f014 ffae 	bl	35190 <k_poll_event_init>
   20234:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   20236:	2400      	movs	r4, #0
   20238:	b10c      	cbz	r4, 2023e <bt_conn_prepare_events+0x22>
}
   2023a:	4628      	mov	r0, r5
   2023c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn_prepare_events(conn, &events[ev_count])) {
   2023e:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   20242:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   20246:	20d8      	movs	r0, #216	; 0xd8
   20248:	4b05      	ldr	r3, [pc, #20]	; (20260 <bt_conn_prepare_events+0x44>)
   2024a:	fb00 3004 	mla	r0, r0, r4, r3
   2024e:	f018 ffcd 	bl	391ec <conn_prepare_events>
   20252:	b900      	cbnz	r0, 20256 <bt_conn_prepare_events+0x3a>
			ev_count++;
   20254:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   20256:	3401      	adds	r4, #1
   20258:	e7ee      	b.n	20238 <bt_conn_prepare_events+0x1c>
   2025a:	bf00      	nop
   2025c:	2000846c 	.word	0x2000846c
   20260:	2000b5b8 	.word	0x2000b5b8

00020264 <bt_conn_ref>:
{
   20264:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   20266:	4601      	mov	r1, r0
   20268:	b180      	cbz	r0, 2028c <bt_conn_ref+0x28>
		old = atomic_get(&conn->ref);
   2026a:	f101 03d0 	add.w	r3, r1, #208	; 0xd0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2026e:	e8d3 2faf 	lda	r2, [r3]
		if (!old) {
   20272:	b1c2      	cbz	r2, 202a6 <bt_conn_ref+0x42>
	} while (!atomic_cas(&conn->ref, old, old + 1));
   20274:	1c50      	adds	r0, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20276:	e8d3 cfef 	ldaex	ip, [r3]
   2027a:	4594      	cmp	ip, r2
   2027c:	d103      	bne.n	20286 <bt_conn_ref+0x22>
   2027e:	e8c3 0fe4 	stlex	r4, r0, [r3]
   20282:	2c00      	cmp	r4, #0
   20284:	d1f7      	bne.n	20276 <bt_conn_ref+0x12>
   20286:	d1f0      	bne.n	2026a <bt_conn_ref+0x6>
}
   20288:	4608      	mov	r0, r1
   2028a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   2028c:	4c07      	ldr	r4, [pc, #28]	; (202ac <bt_conn_ref+0x48>)
   2028e:	f240 437c 	movw	r3, #1148	; 0x47c
   20292:	4622      	mov	r2, r4
   20294:	4906      	ldr	r1, [pc, #24]	; (202b0 <bt_conn_ref+0x4c>)
   20296:	4807      	ldr	r0, [pc, #28]	; (202b4 <bt_conn_ref+0x50>)
   20298:	f015 fffc 	bl	36294 <assert_print>
   2029c:	f240 417c 	movw	r1, #1148	; 0x47c
   202a0:	4620      	mov	r0, r4
   202a2:	f015 fff0 	bl	36286 <assert_post_action>
			return NULL;
   202a6:	2100      	movs	r1, #0
   202a8:	e7ee      	b.n	20288 <bt_conn_ref+0x24>
   202aa:	bf00      	nop
   202ac:	00042f60 	.word	0x00042f60
   202b0:	0004311c 	.word	0x0004311c
   202b4:	0003f72c 	.word	0x0003f72c

000202b8 <bt_conn_unref>:
{
   202b8:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   202ba:	f100 03d0 	add.w	r3, r0, #208	; 0xd0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   202be:	e8d3 2fef 	ldaex	r2, [r3]
   202c2:	1e51      	subs	r1, r2, #1
   202c4:	e8c3 1fec 	stlex	ip, r1, [r3]
   202c8:	f1bc 0f00 	cmp.w	ip, #0
   202cc:	d1f7      	bne.n	202be <bt_conn_unref+0x6>
	__ASSERT(old > 0, "Conn reference counter is 0");
   202ce:	2a00      	cmp	r2, #0
   202d0:	dd05      	ble.n	202de <bt_conn_unref+0x26>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   202d2:	8841      	ldrh	r1, [r0, #2]
   202d4:	f240 1201 	movw	r2, #257	; 0x101
   202d8:	4291      	cmp	r1, r2
   202da:	d010      	beq.n	202fe <bt_conn_unref+0x46>
}
   202dc:	bd10      	pop	{r4, pc}
	__ASSERT(old > 0, "Conn reference counter is 0");
   202de:	4c0b      	ldr	r4, [pc, #44]	; (2030c <bt_conn_unref+0x54>)
   202e0:	f44f 6393 	mov.w	r3, #1176	; 0x498
   202e4:	4622      	mov	r2, r4
   202e6:	490a      	ldr	r1, [pc, #40]	; (20310 <bt_conn_unref+0x58>)
   202e8:	480a      	ldr	r0, [pc, #40]	; (20314 <bt_conn_unref+0x5c>)
   202ea:	f015 ffd3 	bl	36294 <assert_print>
   202ee:	480a      	ldr	r0, [pc, #40]	; (20318 <bt_conn_unref+0x60>)
   202f0:	f015 ffd0 	bl	36294 <assert_print>
   202f4:	f44f 6193 	mov.w	r1, #1176	; 0x498
   202f8:	4620      	mov	r0, r4
   202fa:	f015 ffc4 	bl	36286 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   202fe:	e8d3 3faf 	lda	r3, [r3]
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   20302:	2b00      	cmp	r3, #0
   20304:	d1ea      	bne.n	202dc <bt_conn_unref+0x24>
		bt_le_adv_resume();
   20306:	f018 fdd1 	bl	38eac <bt_le_adv_resume>
}
   2030a:	e7e7      	b.n	202dc <bt_conn_unref+0x24>
   2030c:	00042f60 	.word	0x00042f60
   20310:	00043124 	.word	0x00043124
   20314:	0003f72c 	.word	0x0003f72c
   20318:	0004312c 	.word	0x0004312c

0002031c <bt_conn_lookup_handle>:
{
   2031c:	b508      	push	{r3, lr}
   2031e:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   20320:	2101      	movs	r1, #1
   20322:	4802      	ldr	r0, [pc, #8]	; (2032c <bt_conn_lookup_handle+0x10>)
   20324:	f018 ff98 	bl	39258 <conn_lookup_handle>
}
   20328:	bd08      	pop	{r3, pc}
   2032a:	bf00      	nop
   2032c:	2000b5b8 	.word	0x2000b5b8

00020330 <bt_conn_set_state>:
{
   20330:	b5f0      	push	{r4, r5, r6, r7, lr}
   20332:	b083      	sub	sp, #12
   20334:	af00      	add	r7, sp, #0
   20336:	460d      	mov	r5, r1
	if (conn->state == state) {
   20338:	7b46      	ldrb	r6, [r0, #13]
   2033a:	428e      	cmp	r6, r1
   2033c:	d014      	beq.n	20368 <bt_conn_set_state+0x38>
   2033e:	4604      	mov	r4, r0
	conn->state = state;
   20340:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
   20342:	b916      	cbnz	r6, 2034a <bt_conn_set_state+0x1a>
		if (conn->type != BT_CONN_TYPE_ISO) {
   20344:	7883      	ldrb	r3, [r0, #2]
   20346:	2b08      	cmp	r3, #8
   20348:	d166      	bne.n	20418 <bt_conn_set_state+0xe8>
	switch (conn->state) {
   2034a:	7b63      	ldrb	r3, [r4, #13]
   2034c:	2b08      	cmp	r3, #8
   2034e:	f200 8127 	bhi.w	205a0 <bt_conn_set_state+0x270>
   20352:	e8df f013 	tbh	[pc, r3, lsl #1]
   20356:	0080      	.short	0x0080
   20358:	005b0121 	.word	0x005b0121
   2035c:	005b005b 	.word	0x005b005b
   20360:	005b005b 	.word	0x005b005b
   20364:	005b0064 	.word	0x005b0064
		LOG_WRN("no transition %s", state2str(state));
   20368:	4608      	mov	r0, r1
   2036a:	f7ff fb07 	bl	1f97c <state2str>
   2036e:	466d      	mov	r5, sp
   20370:	2300      	movs	r3, #0
   20372:	713b      	strb	r3, [r7, #4]
   20374:	2302      	movs	r3, #2
   20376:	717b      	strb	r3, [r7, #5]
   20378:	b088      	sub	sp, #32
   2037a:	466c      	mov	r4, sp
   2037c:	f114 0210 	adds.w	r2, r4, #16
   20380:	d011      	beq.n	203a6 <bt_conn_set_state+0x76>
   20382:	260e      	movs	r6, #14
   20384:	b11a      	cbz	r2, 2038e <bt_conn_set_state+0x5e>
   20386:	2e04      	cmp	r6, #4
   20388:	dd01      	ble.n	2038e <bt_conn_set_state+0x5e>
   2038a:	4ba3      	ldr	r3, [pc, #652]	; (20618 <bt_conn_set_state+0x2e8>)
   2038c:	6163      	str	r3, [r4, #20]
   2038e:	2300      	movs	r3, #0
   20390:	703b      	strb	r3, [r7, #0]
   20392:	2302      	movs	r3, #2
   20394:	707b      	strb	r3, [r7, #1]
   20396:	b19a      	cbz	r2, 203c0 <bt_conn_set_state+0x90>
   20398:	2e08      	cmp	r6, #8
   2039a:	dd00      	ble.n	2039e <bt_conn_set_state+0x6e>
   2039c:	61a0      	str	r0, [r4, #24]
   2039e:	f104 031c 	add.w	r3, r4, #28
   203a2:	2100      	movs	r1, #0
   203a4:	e00a      	b.n	203bc <bt_conn_set_state+0x8c>
   203a6:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   203aa:	e7eb      	b.n	20384 <bt_conn_set_state+0x54>
   203ac:	f101 0008 	add.w	r0, r1, #8
   203b0:	4438      	add	r0, r7
   203b2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   203b6:	f803 0b01 	strb.w	r0, [r3], #1
   203ba:	3101      	adds	r1, #1
   203bc:	2901      	cmp	r1, #1
   203be:	d9f5      	bls.n	203ac <bt_conn_set_state+0x7c>
   203c0:	2e0d      	cmp	r6, #13
   203c2:	dd26      	ble.n	20412 <bt_conn_set_state+0xe2>
   203c4:	230e      	movs	r3, #14
   203c6:	b142      	cbz	r2, 203da <bt_conn_set_state+0xaa>
   203c8:	2103      	movs	r1, #3
   203ca:	7139      	strb	r1, [r7, #4]
   203cc:	2100      	movs	r1, #0
   203ce:	7179      	strb	r1, [r7, #5]
   203d0:	71b9      	strb	r1, [r7, #6]
   203d2:	2101      	movs	r1, #1
   203d4:	71f9      	strb	r1, [r7, #7]
   203d6:	6878      	ldr	r0, [r7, #4]
   203d8:	6120      	str	r0, [r4, #16]
   203da:	2100      	movs	r1, #0
   203dc:	f36f 0100 	bfc	r1, #0, #1
   203e0:	f36f 0141 	bfc	r1, #1, #1
   203e4:	f36f 0182 	bfc	r1, #2, #1
   203e8:	f36f 01c5 	bfc	r1, #3, #3
   203ec:	2002      	movs	r0, #2
   203ee:	f360 1188 	bfi	r1, r0, #6, #3
   203f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   203f6:	f363 2152 	bfi	r1, r3, #9, #10
   203fa:	f36f 41de 	bfc	r1, #19, #12
   203fe:	f36f 71df 	bfc	r1, #31, #1
   20402:	2300      	movs	r3, #0
   20404:	4885      	ldr	r0, [pc, #532]	; (2061c <bt_conn_set_state+0x2ec>)
   20406:	f7f6 faa1 	bl	1694c <z_impl_z_log_msg_static_create>
   2040a:	46ad      	mov	sp, r5
}
   2040c:	370c      	adds	r7, #12
   2040e:	46bd      	mov	sp, r7
   20410:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("no transition %s", state2str(state));
   20412:	f06f 031b 	mvn.w	r3, #27
   20416:	e7d6      	b.n	203c6 <bt_conn_set_state+0x96>
			bt_conn_ref(conn);
   20418:	f7ff ff24 	bl	20264 <bt_conn_ref>
   2041c:	e795      	b.n	2034a <bt_conn_set_state+0x1a>
		if (conn->type == BT_CONN_TYPE_SCO) {
   2041e:	78a3      	ldrb	r3, [r4, #2]
   20420:	2b04      	cmp	r3, #4
   20422:	d0f3      	beq.n	2040c <bt_conn_set_state+0xdc>
		k_fifo_init(&conn->tx_queue);
   20424:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   20428:	f01e facb 	bl	3e9c2 <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   2042c:	2100      	movs	r1, #0
   2042e:	487c      	ldr	r0, [pc, #496]	; (20620 <bt_conn_set_state+0x2f0>)
   20430:	f015 f820 	bl	35474 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   20434:	2300      	movs	r3, #0
   20436:	6563      	str	r3, [r4, #84]	; 0x54
	list->tail = NULL;
   20438:	65a3      	str	r3, [r4, #88]	; 0x58
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   2043a:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   2043c:	2b01      	cmp	r3, #1
   2043e:	d1e5      	bne.n	2040c <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   20440:	2303      	movs	r3, #3
   20442:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   20446:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   2044a:	2300      	movs	r3, #0
   2044c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   20450:	f012 fa90 	bl	32974 <k_work_schedule>
   20454:	e7da      	b.n	2040c <bt_conn_set_state+0xdc>
		if (conn->type == BT_CONN_TYPE_SCO) {
   20456:	78a3      	ldrb	r3, [r4, #2]
   20458:	2b04      	cmp	r3, #4
   2045a:	d017      	beq.n	2048c <bt_conn_set_state+0x15c>
		switch (old_state) {
   2045c:	2e08      	cmp	r6, #8
   2045e:	d8d5      	bhi.n	2040c <bt_conn_set_state+0xdc>
   20460:	a301      	add	r3, pc, #4	; (adr r3, 20468 <bt_conn_set_state+0x138>)
   20462:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   20466:	bf00      	nop
   20468:	00020521 	.word	0x00020521
   2046c:	00020495 	.word	0x00020495
   20470:	000204e9 	.word	0x000204e9
   20474:	00020511 	.word	0x00020511
   20478:	00020519 	.word	0x00020519
   2047c:	000204fd 	.word	0x000204fd
   20480:	000204d5 	.word	0x000204d5
   20484:	0002040d 	.word	0x0002040d
   20488:	00020521 	.word	0x00020521
			bt_conn_unref(conn);
   2048c:	4620      	mov	r0, r4
   2048e:	f7ff ff13 	bl	202b8 <bt_conn_unref>
			break;
   20492:	e7bb      	b.n	2040c <bt_conn_set_state+0xdc>
			tx_notify(conn);
   20494:	4620      	mov	r0, r4
   20496:	f018 fdd1 	bl	3903c <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   2049a:	78a3      	ldrb	r3, [r4, #2]
   2049c:	2b01      	cmp	r3, #1
   2049e:	d00d      	beq.n	204bc <bt_conn_set_state+0x18c>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   204a0:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   204a2:	e8d4 3fef 	ldaex	r3, [r4]
   204a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   204aa:	e8c4 3fe2 	stlex	r2, r3, [r4]
   204ae:	2a00      	cmp	r2, #0
   204b0:	d1f7      	bne.n	204a2 <bt_conn_set_state+0x172>
   204b2:	2100      	movs	r1, #0
   204b4:	485a      	ldr	r0, [pc, #360]	; (20620 <bt_conn_set_state+0x2f0>)
   204b6:	f014 ffdd 	bl	35474 <z_impl_k_poll_signal_raise>
   204ba:	e7a7      	b.n	2040c <bt_conn_set_state+0xdc>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   204bc:	f104 0560 	add.w	r5, r4, #96	; 0x60
   204c0:	4628      	mov	r0, r5
   204c2:	f012 f99f 	bl	32804 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   204c6:	f010 0f0c 	tst.w	r0, #12
   204ca:	d0e9      	beq.n	204a0 <bt_conn_set_state+0x170>
				k_work_cancel_delayable(&conn->deferred_work);
   204cc:	4628      	mov	r0, r5
   204ce:	f012 facd 	bl	32a6c <k_work_cancel_delayable>
   204d2:	e7e5      	b.n	204a0 <bt_conn_set_state+0x170>
			if (conn->err) {
   204d4:	7b23      	ldrb	r3, [r4, #12]
   204d6:	b91b      	cbnz	r3, 204e0 <bt_conn_set_state+0x1b0>
			bt_conn_unref(conn);
   204d8:	4620      	mov	r0, r4
   204da:	f7ff feed 	bl	202b8 <bt_conn_unref>
			break;
   204de:	e795      	b.n	2040c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   204e0:	4620      	mov	r0, r4
   204e2:	f7ff fae7 	bl	1fab4 <notify_connected>
   204e6:	e7f7      	b.n	204d8 <bt_conn_set_state+0x1a8>
			if (conn->err) {
   204e8:	7b23      	ldrb	r3, [r4, #12]
   204ea:	b91b      	cbnz	r3, 204f4 <bt_conn_set_state+0x1c4>
			bt_conn_unref(conn);
   204ec:	4620      	mov	r0, r4
   204ee:	f7ff fee3 	bl	202b8 <bt_conn_unref>
			break;
   204f2:	e78b      	b.n	2040c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   204f4:	4620      	mov	r0, r4
   204f6:	f7ff fadd 	bl	1fab4 <notify_connected>
   204fa:	e7f7      	b.n	204ec <bt_conn_set_state+0x1bc>
			if (conn->err) {
   204fc:	7b23      	ldrb	r3, [r4, #12]
   204fe:	b91b      	cbnz	r3, 20508 <bt_conn_set_state+0x1d8>
			bt_conn_unref(conn);
   20500:	4620      	mov	r0, r4
   20502:	f7ff fed9 	bl	202b8 <bt_conn_unref>
			break;
   20506:	e781      	b.n	2040c <bt_conn_set_state+0xdc>
				notify_connected(conn);
   20508:	4620      	mov	r0, r4
   2050a:	f7ff fad3 	bl	1fab4 <notify_connected>
   2050e:	e7f7      	b.n	20500 <bt_conn_set_state+0x1d0>
			bt_conn_unref(conn);
   20510:	4620      	mov	r0, r4
   20512:	f7ff fed1 	bl	202b8 <bt_conn_unref>
			break;
   20516:	e779      	b.n	2040c <bt_conn_set_state+0xdc>
			bt_conn_unref(conn);
   20518:	4620      	mov	r0, r4
   2051a:	f7ff fecd 	bl	202b8 <bt_conn_unref>
			break;
   2051e:	e775      	b.n	2040c <bt_conn_set_state+0xdc>
			LOG_WRN("Invalid (%u) old state", state);
   20520:	466e      	mov	r6, sp
   20522:	b088      	sub	sp, #32
   20524:	466b      	mov	r3, sp
   20526:	f113 0210 	adds.w	r2, r3, #16
   2052a:	d02f      	beq.n	2058c <bt_conn_set_state+0x25c>
   2052c:	210c      	movs	r1, #12
   2052e:	b13a      	cbz	r2, 20540 <bt_conn_set_state+0x210>
   20530:	4608      	mov	r0, r1
   20532:	2904      	cmp	r1, #4
   20534:	dd01      	ble.n	2053a <bt_conn_set_state+0x20a>
   20536:	4c3b      	ldr	r4, [pc, #236]	; (20624 <bt_conn_set_state+0x2f4>)
   20538:	615c      	str	r4, [r3, #20]
   2053a:	2808      	cmp	r0, #8
   2053c:	dd00      	ble.n	20540 <bt_conn_set_state+0x210>
   2053e:	619d      	str	r5, [r3, #24]
   20540:	290b      	cmp	r1, #11
   20542:	dd26      	ble.n	20592 <bt_conn_set_state+0x262>
   20544:	240c      	movs	r4, #12
   20546:	b13a      	cbz	r2, 20558 <bt_conn_set_state+0x228>
   20548:	2103      	movs	r1, #3
   2054a:	7139      	strb	r1, [r7, #4]
   2054c:	2100      	movs	r1, #0
   2054e:	7179      	strb	r1, [r7, #5]
   20550:	71b9      	strb	r1, [r7, #6]
   20552:	71f9      	strb	r1, [r7, #7]
   20554:	6878      	ldr	r0, [r7, #4]
   20556:	6118      	str	r0, [r3, #16]
   20558:	2100      	movs	r1, #0
   2055a:	f36f 0100 	bfc	r1, #0, #1
   2055e:	f36f 0141 	bfc	r1, #1, #1
   20562:	f36f 0182 	bfc	r1, #2, #1
   20566:	f36f 01c5 	bfc	r1, #3, #3
   2056a:	2302      	movs	r3, #2
   2056c:	f363 1188 	bfi	r1, r3, #6, #3
   20570:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   20574:	f363 2152 	bfi	r1, r3, #9, #10
   20578:	f36f 41de 	bfc	r1, #19, #12
   2057c:	f36f 71df 	bfc	r1, #31, #1
   20580:	2300      	movs	r3, #0
   20582:	4826      	ldr	r0, [pc, #152]	; (2061c <bt_conn_set_state+0x2ec>)
   20584:	f7f6 f9e2 	bl	1694c <z_impl_z_log_msg_static_create>
   20588:	46b5      	mov	sp, r6
   2058a:	e73f      	b.n	2040c <bt_conn_set_state+0xdc>
   2058c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20590:	e7cd      	b.n	2052e <bt_conn_set_state+0x1fe>
   20592:	f06f 041b 	mvn.w	r4, #27
   20596:	e7d6      	b.n	20546 <bt_conn_set_state+0x216>
		process_unack_tx(conn);
   20598:	4620      	mov	r0, r4
   2059a:	f018 fddc 	bl	39156 <process_unack_tx>
		break;
   2059e:	e735      	b.n	2040c <bt_conn_set_state+0xdc>
		LOG_WRN("no valid (%u) state was set", state);
   205a0:	466e      	mov	r6, sp
   205a2:	b088      	sub	sp, #32
   205a4:	466b      	mov	r3, sp
   205a6:	f113 0210 	adds.w	r2, r3, #16
   205aa:	d130      	bne.n	2060e <bt_conn_set_state+0x2de>
   205ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   205b0:	b13a      	cbz	r2, 205c2 <bt_conn_set_state+0x292>
   205b2:	4608      	mov	r0, r1
   205b4:	2904      	cmp	r1, #4
   205b6:	dd01      	ble.n	205bc <bt_conn_set_state+0x28c>
   205b8:	4c1b      	ldr	r4, [pc, #108]	; (20628 <bt_conn_set_state+0x2f8>)
   205ba:	615c      	str	r4, [r3, #20]
   205bc:	2808      	cmp	r0, #8
   205be:	dd00      	ble.n	205c2 <bt_conn_set_state+0x292>
   205c0:	619d      	str	r5, [r3, #24]
   205c2:	290b      	cmp	r1, #11
   205c4:	dd25      	ble.n	20612 <bt_conn_set_state+0x2e2>
   205c6:	240c      	movs	r4, #12
   205c8:	b13a      	cbz	r2, 205da <bt_conn_set_state+0x2aa>
   205ca:	2103      	movs	r1, #3
   205cc:	7139      	strb	r1, [r7, #4]
   205ce:	2100      	movs	r1, #0
   205d0:	7179      	strb	r1, [r7, #5]
   205d2:	71b9      	strb	r1, [r7, #6]
   205d4:	71f9      	strb	r1, [r7, #7]
   205d6:	6878      	ldr	r0, [r7, #4]
   205d8:	6118      	str	r0, [r3, #16]
   205da:	2100      	movs	r1, #0
   205dc:	f36f 0100 	bfc	r1, #0, #1
   205e0:	f36f 0141 	bfc	r1, #1, #1
   205e4:	f36f 0182 	bfc	r1, #2, #1
   205e8:	f36f 01c5 	bfc	r1, #3, #3
   205ec:	2302      	movs	r3, #2
   205ee:	f363 1188 	bfi	r1, r3, #6, #3
   205f2:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   205f6:	f364 2152 	bfi	r1, r4, #9, #10
   205fa:	f36f 41de 	bfc	r1, #19, #12
   205fe:	f36f 71df 	bfc	r1, #31, #1
   20602:	2300      	movs	r3, #0
   20604:	4805      	ldr	r0, [pc, #20]	; (2061c <bt_conn_set_state+0x2ec>)
   20606:	f7f6 f9a1 	bl	1694c <z_impl_z_log_msg_static_create>
   2060a:	46b5      	mov	sp, r6
   2060c:	e6fe      	b.n	2040c <bt_conn_set_state+0xdc>
   2060e:	210c      	movs	r1, #12
   20610:	e7ce      	b.n	205b0 <bt_conn_set_state+0x280>
   20612:	f06f 041b 	mvn.w	r4, #27
   20616:	e7d7      	b.n	205c8 <bt_conn_set_state+0x298>
   20618:	0004314c 	.word	0x0004314c
   2061c:	0003f3a8 	.word	0x0003f3a8
   20620:	2000846c 	.word	0x2000846c
   20624:	00043160 	.word	0x00043160
   20628:	00043178 	.word	0x00043178

0002062c <bt_conn_index>:
		index = conn - acl_conns;
   2062c:	4911      	ldr	r1, [pc, #68]	; (20674 <bt_conn_index+0x48>)
   2062e:	1a42      	subs	r2, r0, r1
   20630:	f022 0307 	bic.w	r3, r2, #7
   20634:	eb03 03e2 	add.w	r3, r3, r2, asr #3
   20638:	005b      	lsls	r3, r3, #1
   2063a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
   2063e:	ebc3 2343 	rsb	r3, r3, r3, lsl #9
   20642:	eb03 4383 	add.w	r3, r3, r3, lsl #18
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   20646:	4288      	cmp	r0, r1
   20648:	d102      	bne.n	20650 <bt_conn_index+0x24>
   2064a:	425b      	negs	r3, r3
}
   2064c:	b2d8      	uxtb	r0, r3
   2064e:	4770      	bx	lr
{
   20650:	b510      	push	{r4, lr}
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   20652:	4c09      	ldr	r4, [pc, #36]	; (20678 <bt_conn_index+0x4c>)
   20654:	f240 43b6 	movw	r3, #1206	; 0x4b6
   20658:	4622      	mov	r2, r4
   2065a:	4908      	ldr	r1, [pc, #32]	; (2067c <bt_conn_index+0x50>)
   2065c:	4808      	ldr	r0, [pc, #32]	; (20680 <bt_conn_index+0x54>)
   2065e:	f015 fe19 	bl	36294 <assert_print>
   20662:	4808      	ldr	r0, [pc, #32]	; (20684 <bt_conn_index+0x58>)
   20664:	f015 fe16 	bl	36294 <assert_print>
   20668:	f240 41b6 	movw	r1, #1206	; 0x4b6
   2066c:	4620      	mov	r0, r4
   2066e:	f015 fe0a 	bl	36286 <assert_post_action>
   20672:	bf00      	nop
   20674:	2000b5b8 	.word	0x2000b5b8
   20678:	00042f60 	.word	0x00042f60
   2067c:	00043194 	.word	0x00043194
   20680:	0003f72c 	.word	0x0003f72c
   20684:	00043260 	.word	0x00043260

00020688 <bt_conn_create_pdu_timeout>:
{
   20688:	b5f0      	push	{r4, r5, r6, r7, lr}
   2068a:	b089      	sub	sp, #36	; 0x24
   2068c:	4604      	mov	r4, r0
   2068e:	460f      	mov	r7, r1
   20690:	4616      	mov	r6, r2
   20692:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   20694:	f01e f90f 	bl	3e8b6 <k_is_in_isr>
   20698:	b970      	cbnz	r0, 206b8 <bt_conn_create_pdu_timeout+0x30>
	if (!pool) {
   2069a:	b1d4      	cbz	r4, 206d2 <bt_conn_create_pdu_timeout+0x4a>
	return net_buf_alloc_fixed(pool, timeout);
   2069c:	4632      	mov	r2, r6
   2069e:	462b      	mov	r3, r5
   206a0:	4620      	mov	r0, r4
   206a2:	f01b fb86 	bl	3bdb2 <net_buf_alloc_fixed>
	if (!buf) {
   206a6:	4604      	mov	r4, r0
   206a8:	b1a8      	cbz	r0, 206d6 <bt_conn_create_pdu_timeout+0x4e>
	net_buf_simple_reserve(&buf->b, reserve);
   206aa:	1d79      	adds	r1, r7, #5
   206ac:	300c      	adds	r0, #12
   206ae:	f008 fed1 	bl	29454 <net_buf_simple_reserve>
}
   206b2:	4620      	mov	r0, r4
   206b4:	b009      	add	sp, #36	; 0x24
   206b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(!k_is_in_isr());
   206b8:	4c19      	ldr	r4, [pc, #100]	; (20720 <bt_conn_create_pdu_timeout+0x98>)
   206ba:	f240 43d2 	movw	r3, #1234	; 0x4d2
   206be:	4622      	mov	r2, r4
   206c0:	4918      	ldr	r1, [pc, #96]	; (20724 <bt_conn_create_pdu_timeout+0x9c>)
   206c2:	4819      	ldr	r0, [pc, #100]	; (20728 <bt_conn_create_pdu_timeout+0xa0>)
   206c4:	f015 fde6 	bl	36294 <assert_print>
   206c8:	f240 41d2 	movw	r1, #1234	; 0x4d2
   206cc:	4620      	mov	r0, r4
   206ce:	f015 fdda 	bl	36286 <assert_post_action>
		pool = &acl_tx_pool;
   206d2:	4c16      	ldr	r4, [pc, #88]	; (2072c <bt_conn_create_pdu_timeout+0xa4>)
   206d4:	e7e2      	b.n	2069c <bt_conn_create_pdu_timeout+0x14>
		LOG_WRN("Unable to allocate buffer within timeout");
   206d6:	4b16      	ldr	r3, [pc, #88]	; (20730 <bt_conn_create_pdu_timeout+0xa8>)
   206d8:	9307      	str	r3, [sp, #28]
   206da:	2202      	movs	r2, #2
   206dc:	f88d 2004 	strb.w	r2, [sp, #4]
   206e0:	2300      	movs	r3, #0
   206e2:	f88d 3005 	strb.w	r3, [sp, #5]
   206e6:	f88d 3006 	strb.w	r3, [sp, #6]
   206ea:	f88d 3007 	strb.w	r3, [sp, #7]
   206ee:	9901      	ldr	r1, [sp, #4]
   206f0:	9106      	str	r1, [sp, #24]
   206f2:	4619      	mov	r1, r3
   206f4:	f363 0100 	bfi	r1, r3, #0, #1
   206f8:	f363 0141 	bfi	r1, r3, #1, #1
   206fc:	f363 0182 	bfi	r1, r3, #2, #1
   20700:	f363 01c5 	bfi	r1, r3, #3, #3
   20704:	f362 1188 	bfi	r1, r2, #6, #3
   20708:	2208      	movs	r2, #8
   2070a:	f362 2152 	bfi	r1, r2, #9, #10
   2070e:	f363 41de 	bfi	r1, r3, #19, #12
   20712:	f363 71df 	bfi	r1, r3, #31, #1
   20716:	aa06      	add	r2, sp, #24
   20718:	4806      	ldr	r0, [pc, #24]	; (20734 <bt_conn_create_pdu_timeout+0xac>)
   2071a:	f7f6 f917 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2071e:	e7c8      	b.n	206b2 <bt_conn_create_pdu_timeout+0x2a>
   20720:	00042f60 	.word	0x00042f60
   20724:	0004327c 	.word	0x0004327c
   20728:	0003f72c 	.word	0x0003f72c
   2072c:	20008a68 	.word	0x20008a68
   20730:	0004328c 	.word	0x0004328c
   20734:	0003f3a8 	.word	0x0003f3a8

00020738 <notify_le_param_updated>:
{
   20738:	b570      	push	{r4, r5, r6, lr}
   2073a:	4605      	mov	r5, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   2073c:	1d04      	adds	r4, r0, #4
   2073e:	2109      	movs	r1, #9
   20740:	4620      	mov	r0, r4
   20742:	f018 fcbb 	bl	390bc <atomic_test_bit>
   20746:	b178      	cbz	r0, 20768 <notify_le_param_updated+0x30>
	    conn->le.interval >= conn->le.interval_min &&
   20748:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   2074c:	f8b5 20a8 	ldrh.w	r2, [r5, #168]	; 0xa8
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   20750:	4293      	cmp	r3, r2
   20752:	d309      	bcc.n	20768 <notify_le_param_updated+0x30>
	    conn->le.interval <= conn->le.interval_max &&
   20754:	f8b5 20aa 	ldrh.w	r2, [r5, #170]	; 0xaa
	    conn->le.interval >= conn->le.interval_min &&
   20758:	4293      	cmp	r3, r2
   2075a:	d805      	bhi.n	20768 <notify_le_param_updated+0x30>
	    conn->le.latency == conn->le.pending_latency &&
   2075c:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
   20760:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   20764:	429a      	cmp	r2, r3
   20766:	d002      	beq.n	2076e <notify_le_param_updated+0x36>
	for (cb = callback_list; cb; cb = cb->_next) {
   20768:	4b1f      	ldr	r3, [pc, #124]	; (207e8 <notify_le_param_updated+0xb0>)
   2076a:	681c      	ldr	r4, [r3, #0]
   2076c:	e009      	b.n	20782 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2076e:	e8d4 3fef 	ldaex	r3, [r4]
   20772:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   20776:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2077a:	2a00      	cmp	r2, #0
   2077c:	d0f4      	beq.n	20768 <notify_le_param_updated+0x30>
   2077e:	e7f6      	b.n	2076e <notify_le_param_updated+0x36>
   20780:	6a24      	ldr	r4, [r4, #32]
   20782:	b15c      	cbz	r4, 2079c <notify_le_param_updated+0x64>
		if (cb->le_param_updated) {
   20784:	68e6      	ldr	r6, [r4, #12]
   20786:	2e00      	cmp	r6, #0
   20788:	d0fa      	beq.n	20780 <notify_le_param_updated+0x48>
			cb->le_param_updated(conn, conn->le.interval,
   2078a:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   2078e:	f8b5 20ac 	ldrh.w	r2, [r5, #172]	; 0xac
   20792:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
   20796:	4628      	mov	r0, r5
   20798:	47b0      	blx	r6
   2079a:	e7f1      	b.n	20780 <notify_le_param_updated+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2079c:	4c13      	ldr	r4, [pc, #76]	; (207ec <notify_le_param_updated+0xb4>)
   2079e:	e000      	b.n	207a2 <notify_le_param_updated+0x6a>
   207a0:	3424      	adds	r4, #36	; 0x24
   207a2:	4b13      	ldr	r3, [pc, #76]	; (207f0 <notify_le_param_updated+0xb8>)
   207a4:	429c      	cmp	r4, r3
   207a6:	d80e      	bhi.n	207c6 <notify_le_param_updated+0x8e>
   207a8:	4b11      	ldr	r3, [pc, #68]	; (207f0 <notify_le_param_updated+0xb8>)
   207aa:	429c      	cmp	r4, r3
   207ac:	d21b      	bcs.n	207e6 <notify_le_param_updated+0xae>
		if (cb->le_param_updated) {
   207ae:	68e6      	ldr	r6, [r4, #12]
   207b0:	2e00      	cmp	r6, #0
   207b2:	d0f5      	beq.n	207a0 <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
   207b4:	f8b5 30ae 	ldrh.w	r3, [r5, #174]	; 0xae
   207b8:	f8b5 20ac 	ldrh.w	r2, [r5, #172]	; 0xac
   207bc:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
   207c0:	4628      	mov	r0, r5
   207c2:	47b0      	blx	r6
   207c4:	e7ec      	b.n	207a0 <notify_le_param_updated+0x68>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   207c6:	4c0b      	ldr	r4, [pc, #44]	; (207f4 <notify_le_param_updated+0xbc>)
   207c8:	f240 53a5 	movw	r3, #1445	; 0x5a5
   207cc:	4622      	mov	r2, r4
   207ce:	490a      	ldr	r1, [pc, #40]	; (207f8 <notify_le_param_updated+0xc0>)
   207d0:	480a      	ldr	r0, [pc, #40]	; (207fc <notify_le_param_updated+0xc4>)
   207d2:	f015 fd5f 	bl	36294 <assert_print>
   207d6:	480a      	ldr	r0, [pc, #40]	; (20800 <notify_le_param_updated+0xc8>)
   207d8:	f015 fd5c 	bl	36294 <assert_print>
   207dc:	f240 51a5 	movw	r1, #1445	; 0x5a5
   207e0:	4620      	mov	r0, r4
   207e2:	f015 fd50 	bl	36286 <assert_post_action>
}
   207e6:	bd70      	pop	{r4, r5, r6, pc}
   207e8:	2000c11c 	.word	0x2000c11c
   207ec:	0003f334 	.word	0x0003f334
   207f0:	0003f358 	.word	0x0003f358
   207f4:	00042f60 	.word	0x00042f60
   207f8:	00042f90 	.word	0x00042f90
   207fc:	0003f72c 	.word	0x0003f72c
   20800:	00040eb4 	.word	0x00040eb4

00020804 <notify_le_data_len_updated>:
{
   20804:	b538      	push	{r3, r4, r5, lr}
   20806:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   20808:	4b17      	ldr	r3, [pc, #92]	; (20868 <notify_le_data_len_updated+0x64>)
   2080a:	681c      	ldr	r4, [r3, #0]
   2080c:	e000      	b.n	20810 <notify_le_data_len_updated+0xc>
   2080e:	6a24      	ldr	r4, [r4, #32]
   20810:	b13c      	cbz	r4, 20822 <notify_le_data_len_updated+0x1e>
		if (cb->le_data_len_updated) {
   20812:	69e3      	ldr	r3, [r4, #28]
   20814:	2b00      	cmp	r3, #0
   20816:	d0fa      	beq.n	2080e <notify_le_data_len_updated+0xa>
			cb->le_data_len_updated(conn, &conn->le.data_len);
   20818:	f105 01c6 	add.w	r1, r5, #198	; 0xc6
   2081c:	4628      	mov	r0, r5
   2081e:	4798      	blx	r3
   20820:	e7f5      	b.n	2080e <notify_le_data_len_updated+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20822:	4c12      	ldr	r4, [pc, #72]	; (2086c <notify_le_data_len_updated+0x68>)
   20824:	e000      	b.n	20828 <notify_le_data_len_updated+0x24>
   20826:	3424      	adds	r4, #36	; 0x24
   20828:	4b11      	ldr	r3, [pc, #68]	; (20870 <notify_le_data_len_updated+0x6c>)
   2082a:	429c      	cmp	r4, r3
   2082c:	d80a      	bhi.n	20844 <notify_le_data_len_updated+0x40>
   2082e:	4b10      	ldr	r3, [pc, #64]	; (20870 <notify_le_data_len_updated+0x6c>)
   20830:	429c      	cmp	r4, r3
   20832:	d217      	bcs.n	20864 <notify_le_data_len_updated+0x60>
		if (cb->le_data_len_updated) {
   20834:	69e3      	ldr	r3, [r4, #28]
   20836:	2b00      	cmp	r3, #0
   20838:	d0f5      	beq.n	20826 <notify_le_data_len_updated+0x22>
			cb->le_data_len_updated(conn, &conn->le.data_len);
   2083a:	f105 01c6 	add.w	r1, r5, #198	; 0xc6
   2083e:	4628      	mov	r0, r5
   20840:	4798      	blx	r3
   20842:	e7f0      	b.n	20826 <notify_le_data_len_updated+0x22>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20844:	4c0b      	ldr	r4, [pc, #44]	; (20874 <notify_le_data_len_updated+0x70>)
   20846:	f240 53b9 	movw	r3, #1465	; 0x5b9
   2084a:	4622      	mov	r2, r4
   2084c:	490a      	ldr	r1, [pc, #40]	; (20878 <notify_le_data_len_updated+0x74>)
   2084e:	480b      	ldr	r0, [pc, #44]	; (2087c <notify_le_data_len_updated+0x78>)
   20850:	f015 fd20 	bl	36294 <assert_print>
   20854:	480a      	ldr	r0, [pc, #40]	; (20880 <notify_le_data_len_updated+0x7c>)
   20856:	f015 fd1d 	bl	36294 <assert_print>
   2085a:	f240 51b9 	movw	r1, #1465	; 0x5b9
   2085e:	4620      	mov	r0, r4
   20860:	f015 fd11 	bl	36286 <assert_post_action>
}
   20864:	bd38      	pop	{r3, r4, r5, pc}
   20866:	bf00      	nop
   20868:	2000c11c 	.word	0x2000c11c
   2086c:	0003f334 	.word	0x0003f334
   20870:	0003f358 	.word	0x0003f358
   20874:	00042f60 	.word	0x00042f60
   20878:	00042f90 	.word	0x00042f90
   2087c:	0003f72c 	.word	0x0003f72c
   20880:	00040eb4 	.word	0x00040eb4

00020884 <notify_le_phy_updated>:
{
   20884:	b538      	push	{r3, r4, r5, lr}
   20886:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   20888:	4b17      	ldr	r3, [pc, #92]	; (208e8 <notify_le_phy_updated+0x64>)
   2088a:	681c      	ldr	r4, [r3, #0]
   2088c:	e000      	b.n	20890 <notify_le_phy_updated+0xc>
   2088e:	6a24      	ldr	r4, [r4, #32]
   20890:	b13c      	cbz	r4, 208a2 <notify_le_phy_updated+0x1e>
		if (cb->le_phy_updated) {
   20892:	69a3      	ldr	r3, [r4, #24]
   20894:	2b00      	cmp	r3, #0
   20896:	d0fa      	beq.n	2088e <notify_le_phy_updated+0xa>
			cb->le_phy_updated(conn, &conn->le.phy);
   20898:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   2089c:	4628      	mov	r0, r5
   2089e:	4798      	blx	r3
   208a0:	e7f5      	b.n	2088e <notify_le_phy_updated+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   208a2:	4c12      	ldr	r4, [pc, #72]	; (208ec <notify_le_phy_updated+0x68>)
   208a4:	e000      	b.n	208a8 <notify_le_phy_updated+0x24>
   208a6:	3424      	adds	r4, #36	; 0x24
   208a8:	4b11      	ldr	r3, [pc, #68]	; (208f0 <notify_le_phy_updated+0x6c>)
   208aa:	429c      	cmp	r4, r3
   208ac:	d80a      	bhi.n	208c4 <notify_le_phy_updated+0x40>
   208ae:	4b10      	ldr	r3, [pc, #64]	; (208f0 <notify_le_phy_updated+0x6c>)
   208b0:	429c      	cmp	r4, r3
   208b2:	d217      	bcs.n	208e4 <notify_le_phy_updated+0x60>
		if (cb->le_phy_updated) {
   208b4:	69a3      	ldr	r3, [r4, #24]
   208b6:	2b00      	cmp	r3, #0
   208b8:	d0f5      	beq.n	208a6 <notify_le_phy_updated+0x22>
			cb->le_phy_updated(conn, &conn->le.phy);
   208ba:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   208be:	4628      	mov	r0, r5
   208c0:	4798      	blx	r3
   208c2:	e7f0      	b.n	208a6 <notify_le_phy_updated+0x22>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   208c4:	4c0b      	ldr	r4, [pc, #44]	; (208f4 <notify_le_phy_updated+0x70>)
   208c6:	f240 53cc 	movw	r3, #1484	; 0x5cc
   208ca:	4622      	mov	r2, r4
   208cc:	490a      	ldr	r1, [pc, #40]	; (208f8 <notify_le_phy_updated+0x74>)
   208ce:	480b      	ldr	r0, [pc, #44]	; (208fc <notify_le_phy_updated+0x78>)
   208d0:	f015 fce0 	bl	36294 <assert_print>
   208d4:	480a      	ldr	r0, [pc, #40]	; (20900 <notify_le_phy_updated+0x7c>)
   208d6:	f015 fcdd 	bl	36294 <assert_print>
   208da:	f240 51cc 	movw	r1, #1484	; 0x5cc
   208de:	4620      	mov	r0, r4
   208e0:	f015 fcd1 	bl	36286 <assert_post_action>
}
   208e4:	bd38      	pop	{r3, r4, r5, pc}
   208e6:	bf00      	nop
   208e8:	2000c11c 	.word	0x2000c11c
   208ec:	0003f334 	.word	0x0003f334
   208f0:	0003f358 	.word	0x0003f358
   208f4:	00042f60 	.word	0x00042f60
   208f8:	00042f90 	.word	0x00042f90
   208fc:	0003f72c 	.word	0x0003f72c
   20900:	00040eb4 	.word	0x00040eb4

00020904 <le_param_req>:
{
   20904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20906:	4606      	mov	r6, r0
   20908:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   2090a:	4608      	mov	r0, r1
   2090c:	f017 ffc2 	bl	38894 <bt_le_conn_params_valid>
   20910:	4607      	mov	r7, r0
   20912:	2800      	cmp	r0, #0
   20914:	d03a      	beq.n	2098c <le_param_req+0x88>
	for (cb = callback_list; cb; cb = cb->_next) {
   20916:	4b1f      	ldr	r3, [pc, #124]	; (20994 <le_param_req+0x90>)
   20918:	681c      	ldr	r4, [r3, #0]
   2091a:	e000      	b.n	2091e <le_param_req+0x1a>
   2091c:	6a24      	ldr	r4, [r4, #32]
   2091e:	b16c      	cbz	r4, 2093c <le_param_req+0x38>
		if (!cb->le_param_req) {
   20920:	68a3      	ldr	r3, [r4, #8]
   20922:	2b00      	cmp	r3, #0
   20924:	d0fa      	beq.n	2091c <le_param_req+0x18>
		if (!cb->le_param_req(conn, param)) {
   20926:	4629      	mov	r1, r5
   20928:	4630      	mov	r0, r6
   2092a:	4798      	blx	r3
   2092c:	b368      	cbz	r0, 2098a <le_param_req+0x86>
		if (!bt_le_conn_params_valid(param)) {
   2092e:	4628      	mov	r0, r5
   20930:	f017 ffb0 	bl	38894 <bt_le_conn_params_valid>
   20934:	2800      	cmp	r0, #0
   20936:	d1f1      	bne.n	2091c <le_param_req+0x18>
			return false;
   20938:	4607      	mov	r7, r0
   2093a:	e027      	b.n	2098c <le_param_req+0x88>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2093c:	4c16      	ldr	r4, [pc, #88]	; (20998 <le_param_req+0x94>)
   2093e:	e000      	b.n	20942 <le_param_req+0x3e>
   20940:	3424      	adds	r4, #36	; 0x24
   20942:	4b16      	ldr	r3, [pc, #88]	; (2099c <le_param_req+0x98>)
   20944:	429c      	cmp	r4, r3
   20946:	d810      	bhi.n	2096a <le_param_req+0x66>
   20948:	4b14      	ldr	r3, [pc, #80]	; (2099c <le_param_req+0x98>)
   2094a:	429c      	cmp	r4, r3
   2094c:	d21e      	bcs.n	2098c <le_param_req+0x88>
		if (!cb->le_param_req) {
   2094e:	68a3      	ldr	r3, [r4, #8]
   20950:	2b00      	cmp	r3, #0
   20952:	d0f5      	beq.n	20940 <le_param_req+0x3c>
		if (!cb->le_param_req(conn, param)) {
   20954:	4629      	mov	r1, r5
   20956:	4630      	mov	r0, r6
   20958:	4798      	blx	r3
   2095a:	b1c8      	cbz	r0, 20990 <le_param_req+0x8c>
		if (!bt_le_conn_params_valid(param)) {
   2095c:	4628      	mov	r0, r5
   2095e:	f017 ff99 	bl	38894 <bt_le_conn_params_valid>
   20962:	2800      	cmp	r0, #0
   20964:	d1ec      	bne.n	20940 <le_param_req+0x3c>
			return false;
   20966:	4607      	mov	r7, r0
   20968:	e010      	b.n	2098c <le_param_req+0x88>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   2096a:	4c0d      	ldr	r4, [pc, #52]	; (209a0 <le_param_req+0x9c>)
   2096c:	f240 53ed 	movw	r3, #1517	; 0x5ed
   20970:	4622      	mov	r2, r4
   20972:	490c      	ldr	r1, [pc, #48]	; (209a4 <le_param_req+0xa0>)
   20974:	480c      	ldr	r0, [pc, #48]	; (209a8 <le_param_req+0xa4>)
   20976:	f015 fc8d 	bl	36294 <assert_print>
   2097a:	480c      	ldr	r0, [pc, #48]	; (209ac <le_param_req+0xa8>)
   2097c:	f015 fc8a 	bl	36294 <assert_print>
   20980:	f240 51ed 	movw	r1, #1517	; 0x5ed
   20984:	4620      	mov	r0, r4
   20986:	f015 fc7e 	bl	36286 <assert_post_action>
			return false;
   2098a:	4607      	mov	r7, r0
}
   2098c:	4638      	mov	r0, r7
   2098e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   20990:	4607      	mov	r7, r0
   20992:	e7fb      	b.n	2098c <le_param_req+0x88>
   20994:	2000c11c 	.word	0x2000c11c
   20998:	0003f334 	.word	0x0003f334
   2099c:	0003f358 	.word	0x0003f358
   209a0:	00042f60 	.word	0x00042f60
   209a4:	00042f90 	.word	0x00042f90
   209a8:	0003f72c 	.word	0x0003f72c
   209ac:	00040eb4 	.word	0x00040eb4

000209b0 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
   209b0:	b570      	push	{r4, r5, r6, lr}
   209b2:	4605      	mov	r5, r0
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   209b4:	78c3      	ldrb	r3, [r0, #3]
   209b6:	b923      	cbnz	r3, 209c2 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
   209b8:	f100 069e 	add.w	r6, r0, #158	; 0x9e
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   209bc:	4b19      	ldr	r3, [pc, #100]	; (20a24 <bt_conn_identity_resolved+0x74>)
   209be:	681c      	ldr	r4, [r3, #0]
   209c0:	e003      	b.n	209ca <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
   209c2:	f100 0697 	add.w	r6, r0, #151	; 0x97
   209c6:	e7f9      	b.n	209bc <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
   209c8:	6a24      	ldr	r4, [r4, #32]
   209ca:	b144      	cbz	r4, 209de <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
   209cc:	6923      	ldr	r3, [r4, #16]
   209ce:	2b00      	cmp	r3, #0
   209d0:	d0fa      	beq.n	209c8 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   209d2:	f105 0290 	add.w	r2, r5, #144	; 0x90
   209d6:	4631      	mov	r1, r6
   209d8:	4628      	mov	r0, r5
   209da:	4798      	blx	r3
   209dc:	e7f4      	b.n	209c8 <bt_conn_identity_resolved+0x18>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   209de:	4c12      	ldr	r4, [pc, #72]	; (20a28 <bt_conn_identity_resolved+0x78>)
   209e0:	e000      	b.n	209e4 <bt_conn_identity_resolved+0x34>
   209e2:	3424      	adds	r4, #36	; 0x24
   209e4:	4b11      	ldr	r3, [pc, #68]	; (20a2c <bt_conn_identity_resolved+0x7c>)
   209e6:	429c      	cmp	r4, r3
   209e8:	d80b      	bhi.n	20a02 <bt_conn_identity_resolved+0x52>
   209ea:	4b10      	ldr	r3, [pc, #64]	; (20a2c <bt_conn_identity_resolved+0x7c>)
   209ec:	429c      	cmp	r4, r3
   209ee:	d218      	bcs.n	20a22 <bt_conn_identity_resolved+0x72>
		if (cb->identity_resolved) {
   209f0:	6923      	ldr	r3, [r4, #16]
   209f2:	2b00      	cmp	r3, #0
   209f4:	d0f5      	beq.n	209e2 <bt_conn_identity_resolved+0x32>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
   209f6:	f105 0290 	add.w	r2, r5, #144	; 0x90
   209fa:	4631      	mov	r1, r6
   209fc:	4628      	mov	r0, r5
   209fe:	4798      	blx	r3
   20a00:	e7ef      	b.n	209e2 <bt_conn_identity_resolved+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20a02:	4c0b      	ldr	r4, [pc, #44]	; (20a30 <bt_conn_identity_resolved+0x80>)
   20a04:	f240 73bc 	movw	r3, #1980	; 0x7bc
   20a08:	4622      	mov	r2, r4
   20a0a:	490a      	ldr	r1, [pc, #40]	; (20a34 <bt_conn_identity_resolved+0x84>)
   20a0c:	480a      	ldr	r0, [pc, #40]	; (20a38 <bt_conn_identity_resolved+0x88>)
   20a0e:	f015 fc41 	bl	36294 <assert_print>
   20a12:	480a      	ldr	r0, [pc, #40]	; (20a3c <bt_conn_identity_resolved+0x8c>)
   20a14:	f015 fc3e 	bl	36294 <assert_print>
   20a18:	f240 71bc 	movw	r1, #1980	; 0x7bc
   20a1c:	4620      	mov	r0, r4
   20a1e:	f015 fc32 	bl	36286 <assert_post_action>
		}
	}
}
   20a22:	bd70      	pop	{r4, r5, r6, pc}
   20a24:	2000c11c 	.word	0x2000c11c
   20a28:	0003f334 	.word	0x0003f334
   20a2c:	0003f358 	.word	0x0003f358
   20a30:	00042f60 	.word	0x00042f60
   20a34:	00042f90 	.word	0x00042f90
   20a38:	0003f72c 	.word	0x0003f72c
   20a3c:	00040eb4 	.word	0x00040eb4

00020a40 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
   20a40:	b570      	push	{r4, r5, r6, lr}
   20a42:	4605      	mov	r5, r0
   20a44:	460c      	mov	r4, r1
   20a46:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
   20a48:	f018 faf5 	bl	39036 <reset_pairing>
	bt_l2cap_security_changed(conn, hci_err);
   20a4c:	4621      	mov	r1, r4
   20a4e:	4628      	mov	r0, r5
   20a50:	f018 fd58 	bl	39504 <bt_l2cap_security_changed>
	if (IS_ENABLED(CONFIG_BT_ISO_CENTRAL)) {
		bt_iso_security_changed(conn, hci_err);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   20a54:	4b17      	ldr	r3, [pc, #92]	; (20ab4 <bt_conn_security_changed+0x74>)
   20a56:	681c      	ldr	r4, [r3, #0]
   20a58:	e000      	b.n	20a5c <bt_conn_security_changed+0x1c>
   20a5a:	6a24      	ldr	r4, [r4, #32]
   20a5c:	b13c      	cbz	r4, 20a6e <bt_conn_security_changed+0x2e>
		if (cb->security_changed) {
   20a5e:	6963      	ldr	r3, [r4, #20]
   20a60:	2b00      	cmp	r3, #0
   20a62:	d0fa      	beq.n	20a5a <bt_conn_security_changed+0x1a>
			cb->security_changed(conn, conn->sec_level, err);
   20a64:	4632      	mov	r2, r6
   20a66:	7a69      	ldrb	r1, [r5, #9]
   20a68:	4628      	mov	r0, r5
   20a6a:	4798      	blx	r3
   20a6c:	e7f5      	b.n	20a5a <bt_conn_security_changed+0x1a>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20a6e:	4c12      	ldr	r4, [pc, #72]	; (20ab8 <bt_conn_security_changed+0x78>)
   20a70:	e000      	b.n	20a74 <bt_conn_security_changed+0x34>
   20a72:	3424      	adds	r4, #36	; 0x24
   20a74:	4b11      	ldr	r3, [pc, #68]	; (20abc <bt_conn_security_changed+0x7c>)
   20a76:	429c      	cmp	r4, r3
   20a78:	d80a      	bhi.n	20a90 <bt_conn_security_changed+0x50>
   20a7a:	4b10      	ldr	r3, [pc, #64]	; (20abc <bt_conn_security_changed+0x7c>)
   20a7c:	429c      	cmp	r4, r3
   20a7e:	d217      	bcs.n	20ab0 <bt_conn_security_changed+0x70>
		if (cb->security_changed) {
   20a80:	6963      	ldr	r3, [r4, #20]
   20a82:	2b00      	cmp	r3, #0
   20a84:	d0f5      	beq.n	20a72 <bt_conn_security_changed+0x32>
			cb->security_changed(conn, conn->sec_level, err);
   20a86:	4632      	mov	r2, r6
   20a88:	7a69      	ldrb	r1, [r5, #9]
   20a8a:	4628      	mov	r0, r5
   20a8c:	4798      	blx	r3
   20a8e:	e7f0      	b.n	20a72 <bt_conn_security_changed+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   20a90:	4c0b      	ldr	r4, [pc, #44]	; (20ac0 <bt_conn_security_changed+0x80>)
   20a92:	f640 0328 	movw	r3, #2088	; 0x828
   20a96:	4622      	mov	r2, r4
   20a98:	490a      	ldr	r1, [pc, #40]	; (20ac4 <bt_conn_security_changed+0x84>)
   20a9a:	480b      	ldr	r0, [pc, #44]	; (20ac8 <bt_conn_security_changed+0x88>)
   20a9c:	f015 fbfa 	bl	36294 <assert_print>
   20aa0:	480a      	ldr	r0, [pc, #40]	; (20acc <bt_conn_security_changed+0x8c>)
   20aa2:	f015 fbf7 	bl	36294 <assert_print>
   20aa6:	f640 0128 	movw	r1, #2088	; 0x828
   20aaa:	4620      	mov	r0, r4
   20aac:	f015 fbeb 	bl	36286 <assert_post_action>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
   20ab0:	bd70      	pop	{r4, r5, r6, pc}
   20ab2:	bf00      	nop
   20ab4:	2000c11c 	.word	0x2000c11c
   20ab8:	0003f334 	.word	0x0003f334
   20abc:	0003f358 	.word	0x0003f358
   20ac0:	00042f60 	.word	0x00042f60
   20ac4:	00042f90 	.word	0x00042f90
   20ac8:	0003f72c 	.word	0x0003f72c
   20acc:	00040eb4 	.word	0x00040eb4

00020ad0 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   20ad0:	4b02      	ldr	r3, [pc, #8]	; (20adc <bt_conn_cb_register+0xc>)
   20ad2:	681a      	ldr	r2, [r3, #0]
   20ad4:	6202      	str	r2, [r0, #32]
	callback_list = cb;
   20ad6:	6018      	str	r0, [r3, #0]
}
   20ad8:	4770      	bx	lr
   20ada:	bf00      	nop
   20adc:	2000c11c 	.word	0x2000c11c

00020ae0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   20ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ae2:	4607      	mov	r7, r0
   20ae4:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   20ae6:	2400      	movs	r4, #0
   20ae8:	b114      	cbz	r4, 20af0 <bt_conn_lookup_addr_le+0x10>
		}

		return conn;
	}

	return NULL;
   20aea:	2500      	movs	r5, #0
}
   20aec:	4628      	mov	r0, r5
   20aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   20af0:	20d8      	movs	r0, #216	; 0xd8
   20af2:	4b0c      	ldr	r3, [pc, #48]	; (20b24 <bt_conn_lookup_addr_le+0x44>)
   20af4:	fb00 3004 	mla	r0, r0, r4, r3
   20af8:	f7ff fbb4 	bl	20264 <bt_conn_ref>
		if (!conn) {
   20afc:	4605      	mov	r5, r0
   20afe:	b170      	cbz	r0, 20b1e <bt_conn_lookup_addr_le+0x3e>
		if (conn->type != BT_CONN_TYPE_LE) {
   20b00:	7883      	ldrb	r3, [r0, #2]
   20b02:	2b01      	cmp	r3, #1
   20b04:	d109      	bne.n	20b1a <bt_conn_lookup_addr_le+0x3a>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   20b06:	4632      	mov	r2, r6
   20b08:	4639      	mov	r1, r7
   20b0a:	f018 fc3f 	bl	3938c <bt_conn_is_peer_addr_le>
   20b0e:	2800      	cmp	r0, #0
   20b10:	d1ec      	bne.n	20aec <bt_conn_lookup_addr_le+0xc>
			bt_conn_unref(conn);
   20b12:	4628      	mov	r0, r5
   20b14:	f7ff fbd0 	bl	202b8 <bt_conn_unref>
			continue;
   20b18:	e001      	b.n	20b1e <bt_conn_lookup_addr_le+0x3e>
			bt_conn_unref(conn);
   20b1a:	f7ff fbcd 	bl	202b8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   20b1e:	3401      	adds	r4, #1
   20b20:	e7e2      	b.n	20ae8 <bt_conn_lookup_addr_le+0x8>
   20b22:	bf00      	nop
   20b24:	2000b5b8 	.word	0x2000b5b8

00020b28 <bt_conn_exists_le>:
{
   20b28:	b5b0      	push	{r4, r5, r7, lr}
   20b2a:	b082      	sub	sp, #8
   20b2c:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   20b2e:	f7ff ffd7 	bl	20ae0 <bt_conn_lookup_addr_le>
	if (conn) {
   20b32:	2800      	cmp	r0, #0
   20b34:	d063      	beq.n	20bfe <bt_conn_exists_le+0xd6>
   20b36:	4604      	mov	r4, r0
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   20b38:	7b40      	ldrb	r0, [r0, #13]
   20b3a:	f7fe ff1f 	bl	1f97c <state2str>
   20b3e:	466d      	mov	r5, sp
   20b40:	2300      	movs	r3, #0
   20b42:	713b      	strb	r3, [r7, #4]
   20b44:	2302      	movs	r3, #2
   20b46:	717b      	strb	r3, [r7, #5]
   20b48:	b088      	sub	sp, #32
   20b4a:	46ec      	mov	ip, sp
   20b4c:	f11c 0210 	adds.w	r2, ip, #16
   20b50:	d016      	beq.n	20b80 <bt_conn_exists_le+0x58>
   20b52:	f04f 0e0e 	mov.w	lr, #14
   20b56:	b12a      	cbz	r2, 20b64 <bt_conn_exists_le+0x3c>
   20b58:	f1be 0f04 	cmp.w	lr, #4
   20b5c:	dd02      	ble.n	20b64 <bt_conn_exists_le+0x3c>
   20b5e:	4b29      	ldr	r3, [pc, #164]	; (20c04 <bt_conn_exists_le+0xdc>)
   20b60:	f8cc 3014 	str.w	r3, [ip, #20]
   20b64:	2300      	movs	r3, #0
   20b66:	703b      	strb	r3, [r7, #0]
   20b68:	2302      	movs	r3, #2
   20b6a:	707b      	strb	r3, [r7, #1]
   20b6c:	b1aa      	cbz	r2, 20b9a <bt_conn_exists_le+0x72>
   20b6e:	f1be 0f08 	cmp.w	lr, #8
   20b72:	dd01      	ble.n	20b78 <bt_conn_exists_le+0x50>
   20b74:	f8cc 0018 	str.w	r0, [ip, #24]
   20b78:	f10c 031c 	add.w	r3, ip, #28
   20b7c:	2100      	movs	r1, #0
   20b7e:	e00a      	b.n	20b96 <bt_conn_exists_le+0x6e>
   20b80:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   20b84:	e7e7      	b.n	20b56 <bt_conn_exists_le+0x2e>
   20b86:	f101 0008 	add.w	r0, r1, #8
   20b8a:	4438      	add	r0, r7
   20b8c:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   20b90:	f803 0b01 	strb.w	r0, [r3], #1
   20b94:	3101      	adds	r1, #1
   20b96:	2901      	cmp	r1, #1
   20b98:	d9f5      	bls.n	20b86 <bt_conn_exists_le+0x5e>
   20b9a:	f1be 0f0d 	cmp.w	lr, #13
   20b9e:	dd2b      	ble.n	20bf8 <bt_conn_exists_le+0xd0>
   20ba0:	230e      	movs	r3, #14
   20ba2:	b14a      	cbz	r2, 20bb8 <bt_conn_exists_le+0x90>
   20ba4:	2103      	movs	r1, #3
   20ba6:	7139      	strb	r1, [r7, #4]
   20ba8:	2100      	movs	r1, #0
   20baa:	7179      	strb	r1, [r7, #5]
   20bac:	71b9      	strb	r1, [r7, #6]
   20bae:	2101      	movs	r1, #1
   20bb0:	71f9      	strb	r1, [r7, #7]
   20bb2:	6878      	ldr	r0, [r7, #4]
   20bb4:	f8cc 0010 	str.w	r0, [ip, #16]
   20bb8:	2100      	movs	r1, #0
   20bba:	f36f 0100 	bfc	r1, #0, #1
   20bbe:	f36f 0141 	bfc	r1, #1, #1
   20bc2:	f36f 0182 	bfc	r1, #2, #1
   20bc6:	f36f 01c5 	bfc	r1, #3, #3
   20bca:	2002      	movs	r0, #2
   20bcc:	f360 1188 	bfi	r1, r0, #6, #3
   20bd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   20bd4:	f363 2152 	bfi	r1, r3, #9, #10
   20bd8:	f36f 41de 	bfc	r1, #19, #12
   20bdc:	f36f 71df 	bfc	r1, #31, #1
   20be0:	2300      	movs	r3, #0
   20be2:	4809      	ldr	r0, [pc, #36]	; (20c08 <bt_conn_exists_le+0xe0>)
   20be4:	f7f5 feb2 	bl	1694c <z_impl_z_log_msg_static_create>
   20be8:	46ad      	mov	sp, r5
		bt_conn_unref(conn);
   20bea:	4620      	mov	r0, r4
   20bec:	f7ff fb64 	bl	202b8 <bt_conn_unref>
		return true;
   20bf0:	2001      	movs	r0, #1
}
   20bf2:	3708      	adds	r7, #8
   20bf4:	46bd      	mov	sp, r7
   20bf6:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   20bf8:	f06f 031b 	mvn.w	r3, #27
   20bfc:	e7d1      	b.n	20ba2 <bt_conn_exists_le+0x7a>
	return false;
   20bfe:	2000      	movs	r0, #0
   20c00:	e7f7      	b.n	20bf2 <bt_conn_exists_le+0xca>
   20c02:	bf00      	nop
   20c04:	000432b8 	.word	0x000432b8
   20c08:	0003f3a8 	.word	0x0003f3a8

00020c0c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   20c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c10:	4680      	mov	r8, r0
   20c12:	460f      	mov	r7, r1
   20c14:	4616      	mov	r6, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   20c16:	2400      	movs	r4, #0
   20c18:	b11c      	cbz	r4, 20c22 <bt_conn_lookup_state_le+0x16>
		}

		return conn;
	}

	return NULL;
   20c1a:	2500      	movs	r5, #0
}
   20c1c:	4628      	mov	r0, r5
   20c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   20c22:	20d8      	movs	r0, #216	; 0xd8
   20c24:	4b10      	ldr	r3, [pc, #64]	; (20c68 <bt_conn_lookup_state_le+0x5c>)
   20c26:	fb00 3004 	mla	r0, r0, r4, r3
   20c2a:	f7ff fb1b 	bl	20264 <bt_conn_ref>
		if (!conn) {
   20c2e:	4605      	mov	r5, r0
   20c30:	b188      	cbz	r0, 20c56 <bt_conn_lookup_state_le+0x4a>
		if (conn->type != BT_CONN_TYPE_LE) {
   20c32:	7883      	ldrb	r3, [r0, #2]
   20c34:	2b01      	cmp	r3, #1
   20c36:	d110      	bne.n	20c5a <bt_conn_lookup_state_le+0x4e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   20c38:	b127      	cbz	r7, 20c44 <bt_conn_lookup_state_le+0x38>
   20c3a:	463a      	mov	r2, r7
   20c3c:	4641      	mov	r1, r8
   20c3e:	f018 fba5 	bl	3938c <bt_conn_is_peer_addr_le>
   20c42:	b168      	cbz	r0, 20c60 <bt_conn_lookup_state_le+0x54>
		if (!(conn->state == state && conn->id == id)) {
   20c44:	7b6b      	ldrb	r3, [r5, #13]
   20c46:	42b3      	cmp	r3, r6
   20c48:	d102      	bne.n	20c50 <bt_conn_lookup_state_le+0x44>
   20c4a:	7a2b      	ldrb	r3, [r5, #8]
   20c4c:	4543      	cmp	r3, r8
   20c4e:	d0e5      	beq.n	20c1c <bt_conn_lookup_state_le+0x10>
			bt_conn_unref(conn);
   20c50:	4628      	mov	r0, r5
   20c52:	f7ff fb31 	bl	202b8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   20c56:	3401      	adds	r4, #1
   20c58:	e7de      	b.n	20c18 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   20c5a:	f7ff fb2d 	bl	202b8 <bt_conn_unref>
			continue;
   20c5e:	e7fa      	b.n	20c56 <bt_conn_lookup_state_le+0x4a>
			bt_conn_unref(conn);
   20c60:	4628      	mov	r0, r5
   20c62:	f7ff fb29 	bl	202b8 <bt_conn_unref>
			continue;
   20c66:	e7f6      	b.n	20c56 <bt_conn_lookup_state_le+0x4a>
   20c68:	2000b5b8 	.word	0x2000b5b8

00020c6c <send_conn_le_param_update>:
{
   20c6c:	b538      	push	{r3, r4, r5, lr}
   20c6e:	4604      	mov	r4, r0
   20c70:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   20c72:	4608      	mov	r0, r1
   20c74:	f017 fe0e 	bl	38894 <bt_le_conn_params_valid>
   20c78:	b350      	cbz	r0, 20cd0 <send_conn_le_param_update+0x64>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   20c7a:	4b17      	ldr	r3, [pc, #92]	; (20cd8 <send_conn_le_param_update+0x6c>)
   20c7c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   20c80:	f013 0f02 	tst.w	r3, #2
   20c84:	d004      	beq.n	20c90 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   20c86:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   20c8a:	f013 0f02 	tst.w	r3, #2
   20c8e:	d113      	bne.n	20cb8 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   20c90:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   20c92:	b9c3      	cbnz	r3, 20cc6 <send_conn_le_param_update+0x5a>
		rc = bt_conn_le_conn_update(conn, param);
   20c94:	4629      	mov	r1, r5
   20c96:	4620      	mov	r0, r4
   20c98:	f018 fbc4 	bl	39424 <bt_conn_le_conn_update>
		if (rc == 0) {
   20c9c:	b9b8      	cbnz	r0, 20cce <send_conn_le_param_update+0x62>
			conn->le.interval_min = param->interval_min;
   20c9e:	882b      	ldrh	r3, [r5, #0]
   20ca0:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   20ca4:	886b      	ldrh	r3, [r5, #2]
   20ca6:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   20caa:	88ab      	ldrh	r3, [r5, #4]
   20cac:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   20cb0:	88eb      	ldrh	r3, [r5, #6]
   20cb2:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
		return rc;
   20cb6:	e00a      	b.n	20cce <send_conn_le_param_update+0x62>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   20cb8:	210a      	movs	r1, #10
   20cba:	1d20      	adds	r0, r4, #4
   20cbc:	f018 f9fe 	bl	390bc <atomic_test_bit>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   20cc0:	2800      	cmp	r0, #0
   20cc2:	d1e5      	bne.n	20c90 <send_conn_le_param_update+0x24>
   20cc4:	e7e6      	b.n	20c94 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   20cc6:	4629      	mov	r1, r5
   20cc8:	4620      	mov	r0, r4
   20cca:	f018 fcaa 	bl	39622 <bt_l2cap_update_conn_param>
}
   20cce:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   20cd0:	f06f 0015 	mvn.w	r0, #21
   20cd4:	e7fb      	b.n	20cce <send_conn_le_param_update+0x62>
   20cd6:	bf00      	nop
   20cd8:	20008000 	.word	0x20008000

00020cdc <deferred_work>:
{
   20cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20cde:	b087      	sub	sp, #28
   20ce0:	af00      	add	r7, sp, #0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   20ce2:	f1a0 0560 	sub.w	r5, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   20ce6:	f810 3c53 	ldrb.w	r3, [r0, #-83]
   20cea:	2b00      	cmp	r3, #0
   20cec:	d058      	beq.n	20da0 <deferred_work+0xc4>
   20cee:	4604      	mov	r4, r0
	if (conn->type != BT_CONN_TYPE_LE) {
   20cf0:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   20cf4:	2b01      	cmp	r3, #1
   20cf6:	d16d      	bne.n	20dd4 <deferred_work+0xf8>
	if (atomic_test_and_clear_bit(conn->flags,
   20cf8:	f1a0 065c 	sub.w	r6, r0, #92	; 0x5c
   20cfc:	2109      	movs	r1, #9
   20cfe:	4630      	mov	r0, r6
   20d00:	f018 f9c4 	bl	3908c <atomic_test_and_clear_bit>
   20d04:	2800      	cmp	r0, #0
   20d06:	d06e      	beq.n	20de6 <deferred_work+0x10a>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   20d08:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   20d0c:	813b      	strh	r3, [r7, #8]
   20d0e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   20d12:	817b      	strh	r3, [r7, #10]
   20d14:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   20d18:	81bb      	strh	r3, [r7, #12]
   20d1a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   20d1e:	81fb      	strh	r3, [r7, #14]
		err = send_conn_le_param_update(conn, param);
   20d20:	f107 0108 	add.w	r1, r7, #8
   20d24:	4628      	mov	r0, r5
   20d26:	f7ff ffa1 	bl	20c6c <send_conn_le_param_update>
		if (!err) {
   20d2a:	4604      	mov	r4, r0
   20d2c:	2800      	cmp	r0, #0
   20d2e:	d041      	beq.n	20db4 <deferred_work+0xd8>
			LOG_WRN("Send LE param update failed (err %d)", err);
   20d30:	466d      	mov	r5, sp
   20d32:	b088      	sub	sp, #32
   20d34:	466b      	mov	r3, sp
   20d36:	f113 0210 	adds.w	r2, r3, #16
   20d3a:	d04e      	beq.n	20dda <deferred_work+0xfe>
   20d3c:	210c      	movs	r1, #12
   20d3e:	b14a      	cbz	r2, 20d54 <deferred_work+0x78>
   20d40:	4608      	mov	r0, r1
   20d42:	2904      	cmp	r1, #4
   20d44:	dd03      	ble.n	20d4e <deferred_work+0x72>
   20d46:	f8df c148 	ldr.w	ip, [pc, #328]	; 20e90 <deferred_work+0x1b4>
   20d4a:	f8c3 c014 	str.w	ip, [r3, #20]
   20d4e:	2808      	cmp	r0, #8
   20d50:	dd00      	ble.n	20d54 <deferred_work+0x78>
   20d52:	619c      	str	r4, [r3, #24]
   20d54:	290b      	cmp	r1, #11
   20d56:	dd43      	ble.n	20de0 <deferred_work+0x104>
   20d58:	240c      	movs	r4, #12
   20d5a:	b13a      	cbz	r2, 20d6c <deferred_work+0x90>
   20d5c:	2103      	movs	r1, #3
   20d5e:	7139      	strb	r1, [r7, #4]
   20d60:	2100      	movs	r1, #0
   20d62:	7179      	strb	r1, [r7, #5]
   20d64:	71b9      	strb	r1, [r7, #6]
   20d66:	71f9      	strb	r1, [r7, #7]
   20d68:	6878      	ldr	r0, [r7, #4]
   20d6a:	6118      	str	r0, [r3, #16]
   20d6c:	2100      	movs	r1, #0
   20d6e:	f36f 0100 	bfc	r1, #0, #1
   20d72:	f36f 0141 	bfc	r1, #1, #1
   20d76:	f36f 0182 	bfc	r1, #2, #1
   20d7a:	f36f 01c5 	bfc	r1, #3, #3
   20d7e:	2302      	movs	r3, #2
   20d80:	f363 1188 	bfi	r1, r3, #6, #3
   20d84:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   20d88:	f364 2152 	bfi	r1, r4, #9, #10
   20d8c:	f36f 41de 	bfc	r1, #19, #12
   20d90:	f36f 71df 	bfc	r1, #31, #1
   20d94:	2300      	movs	r3, #0
   20d96:	483f      	ldr	r0, [pc, #252]	; (20e94 <deferred_work+0x1b8>)
   20d98:	f7f5 fdd8 	bl	1694c <z_impl_z_log_msg_static_create>
   20d9c:	46ad      	mov	sp, r5
   20d9e:	e011      	b.n	20dc4 <deferred_work+0xe8>
		bt_l2cap_disconnected(conn);
   20da0:	4628      	mov	r0, r5
   20da2:	f018 fb94 	bl	394ce <bt_l2cap_disconnected>
		notify_disconnected(conn);
   20da6:	4628      	mov	r0, r5
   20da8:	f7fe fe26 	bl	1f9f8 <notify_disconnected>
		bt_conn_unref(conn);
   20dac:	4628      	mov	r0, r5
   20dae:	f7ff fa83 	bl	202b8 <bt_conn_unref>
		return;
   20db2:	e00f      	b.n	20dd4 <deferred_work+0xf8>
   20db4:	e8d6 3fef 	ldaex	r3, [r6]
   20db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   20dbc:	e8c6 3fe2 	stlex	r2, r3, [r6]
   20dc0:	2a00      	cmp	r2, #0
   20dc2:	d1f7      	bne.n	20db4 <deferred_work+0xd8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20dc4:	e8d6 3fef 	ldaex	r3, [r6]
   20dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20dcc:	e8c6 3fe2 	stlex	r2, r3, [r6]
   20dd0:	2a00      	cmp	r2, #0
   20dd2:	d1f7      	bne.n	20dc4 <deferred_work+0xe8>
}
   20dd4:	371c      	adds	r7, #28
   20dd6:	46bd      	mov	sp, r7
   20dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   20dda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20dde:	e7ae      	b.n	20d3e <deferred_work+0x62>
   20de0:	f06f 041b 	mvn.w	r4, #27
   20de4:	e7b9      	b.n	20d5a <deferred_work+0x7e>
		param = BT_LE_CONN_PARAM(
   20de6:	4a2c      	ldr	r2, [pc, #176]	; (20e98 <deferred_work+0x1bc>)
   20de8:	f107 0310 	add.w	r3, r7, #16
   20dec:	e892 0003 	ldmia.w	r2, {r0, r1}
   20df0:	e883 0003 	stmia.w	r3, {r0, r1}
		err = send_conn_le_param_update(conn, param);
   20df4:	4619      	mov	r1, r3
   20df6:	4628      	mov	r0, r5
   20df8:	f7ff ff38 	bl	20c6c <send_conn_le_param_update>
		if (!err) {
   20dfc:	4604      	mov	r4, r0
   20dfe:	b3b8      	cbz	r0, 20e70 <deferred_work+0x194>
			LOG_WRN("Send auto LE param update failed (err %d)",
   20e00:	466d      	mov	r5, sp
   20e02:	b088      	sub	sp, #32
   20e04:	466b      	mov	r3, sp
   20e06:	f113 0210 	adds.w	r2, r3, #16
   20e0a:	d03a      	beq.n	20e82 <deferred_work+0x1a6>
   20e0c:	210c      	movs	r1, #12
   20e0e:	b14a      	cbz	r2, 20e24 <deferred_work+0x148>
   20e10:	4608      	mov	r0, r1
   20e12:	2904      	cmp	r1, #4
   20e14:	dd03      	ble.n	20e1e <deferred_work+0x142>
   20e16:	f8df c084 	ldr.w	ip, [pc, #132]	; 20e9c <deferred_work+0x1c0>
   20e1a:	f8c3 c014 	str.w	ip, [r3, #20]
   20e1e:	2808      	cmp	r0, #8
   20e20:	dd00      	ble.n	20e24 <deferred_work+0x148>
   20e22:	619c      	str	r4, [r3, #24]
   20e24:	290b      	cmp	r1, #11
   20e26:	dd2f      	ble.n	20e88 <deferred_work+0x1ac>
   20e28:	240c      	movs	r4, #12
   20e2a:	b13a      	cbz	r2, 20e3c <deferred_work+0x160>
   20e2c:	2103      	movs	r1, #3
   20e2e:	7139      	strb	r1, [r7, #4]
   20e30:	2100      	movs	r1, #0
   20e32:	7179      	strb	r1, [r7, #5]
   20e34:	71b9      	strb	r1, [r7, #6]
   20e36:	71f9      	strb	r1, [r7, #7]
   20e38:	6878      	ldr	r0, [r7, #4]
   20e3a:	6118      	str	r0, [r3, #16]
   20e3c:	2100      	movs	r1, #0
   20e3e:	f36f 0100 	bfc	r1, #0, #1
   20e42:	f36f 0141 	bfc	r1, #1, #1
   20e46:	f36f 0182 	bfc	r1, #2, #1
   20e4a:	f36f 01c5 	bfc	r1, #3, #3
   20e4e:	2302      	movs	r3, #2
   20e50:	f363 1188 	bfi	r1, r3, #6, #3
   20e54:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   20e58:	f364 2152 	bfi	r1, r4, #9, #10
   20e5c:	f36f 41de 	bfc	r1, #19, #12
   20e60:	f36f 71df 	bfc	r1, #31, #1
   20e64:	2300      	movs	r3, #0
   20e66:	480b      	ldr	r0, [pc, #44]	; (20e94 <deferred_work+0x1b8>)
   20e68:	f7f5 fd70 	bl	1694c <z_impl_z_log_msg_static_create>
   20e6c:	46ad      	mov	sp, r5
   20e6e:	e7a9      	b.n	20dc4 <deferred_work+0xe8>
   20e70:	e8d6 3fef 	ldaex	r3, [r6]
   20e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   20e78:	e8c6 3fe2 	stlex	r2, r3, [r6]
   20e7c:	2a00      	cmp	r2, #0
   20e7e:	d0a1      	beq.n	20dc4 <deferred_work+0xe8>
   20e80:	e7f6      	b.n	20e70 <deferred_work+0x194>
   20e82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   20e86:	e7c2      	b.n	20e0e <deferred_work+0x132>
   20e88:	f06f 041b 	mvn.w	r4, #27
   20e8c:	e7cd      	b.n	20e2a <deferred_work+0x14e>
   20e8e:	bf00      	nop
   20e90:	000432dc 	.word	0x000432dc
   20e94:	0003f3a8 	.word	0x0003f3a8
   20e98:	0003f658 	.word	0x0003f658
   20e9c:	00043304 	.word	0x00043304

00020ea0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   20ea0:	b508      	push	{r3, lr}
   20ea2:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   20ea4:	4801      	ldr	r0, [pc, #4]	; (20eac <bt_conn_create_frag_timeout+0xc>)
   20ea6:	f7ff fbef 	bl	20688 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   20eaa:	bd08      	pop	{r3, pc}
   20eac:	20008b04 	.word	0x20008b04

00020eb0 <create_frag>:
{
   20eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20eb2:	4606      	mov	r6, r0
   20eb4:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   20eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20ebe:	2000      	movs	r0, #0
   20ec0:	f7ff ffee 	bl	20ea0 <bt_conn_create_frag_timeout>
   20ec4:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   20ec6:	7b73      	ldrb	r3, [r6, #13]
   20ec8:	2b07      	cmp	r3, #7
   20eca:	d11a      	bne.n	20f02 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   20ecc:	2300      	movs	r3, #0
   20ece:	6183      	str	r3, [r0, #24]
	return bt_dev.le.acl_mtu;
   20ed0:	4b10      	ldr	r3, [pc, #64]	; (20f14 <create_frag+0x64>)
   20ed2:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   20ed6:	f100 070c 	add.w	r7, r0, #12
   20eda:	4638      	mov	r0, r7
   20edc:	f01a ff8d 	bl	3bdfa <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   20ee0:	4286      	cmp	r6, r0
   20ee2:	d212      	bcs.n	20f0a <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   20ee4:	4b0b      	ldr	r3, [pc, #44]	; (20f14 <create_frag+0x64>)
   20ee6:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20eea:	4632      	mov	r2, r6
   20eec:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   20ef0:	4638      	mov	r0, r7
   20ef2:	f01a ff8b 	bl	3be0c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   20ef6:	4631      	mov	r1, r6
   20ef8:	4628      	mov	r0, r5
   20efa:	f008 fc93 	bl	29824 <net_buf_simple_pull>
}
   20efe:	4620      	mov	r0, r4
   20f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   20f02:	f008 fbcf 	bl	296a4 <net_buf_unref>
		return NULL;
   20f06:	2400      	movs	r4, #0
   20f08:	e7f9      	b.n	20efe <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   20f0a:	4638      	mov	r0, r7
   20f0c:	f01a ff75 	bl	3bdfa <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   20f10:	b286      	uxth	r6, r0
   20f12:	e7ea      	b.n	20eea <create_frag+0x3a>
   20f14:	20008000 	.word	0x20008000

00020f18 <send_buf>:
{
   20f18:	b538      	push	{r3, r4, r5, lr}
   20f1a:	4605      	mov	r5, r0
   20f1c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   20f1e:	8a0b      	ldrh	r3, [r1, #16]
	return bt_dev.le.acl_mtu;
   20f20:	4a1b      	ldr	r2, [pc, #108]	; (20f90 <send_buf+0x78>)
   20f22:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   20f26:	429a      	cmp	r2, r3
   20f28:	d21f      	bcs.n	20f6a <send_buf+0x52>
	frag = create_frag(conn, buf);
   20f2a:	f7ff ffc1 	bl	20eb0 <create_frag>
	if (!frag) {
   20f2e:	4601      	mov	r1, r0
   20f30:	b350      	cbz	r0, 20f88 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   20f32:	2301      	movs	r3, #1
   20f34:	2200      	movs	r2, #0
   20f36:	4628      	mov	r0, r5
   20f38:	f7fe fe16 	bl	1fb68 <send_frag>
   20f3c:	4603      	mov	r3, r0
   20f3e:	b1c8      	cbz	r0, 20f74 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   20f40:	8a23      	ldrh	r3, [r4, #16]
	return bt_dev.le.acl_mtu;
   20f42:	4a13      	ldr	r2, [pc, #76]	; (20f90 <send_buf+0x78>)
   20f44:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   20f48:	429a      	cmp	r2, r3
   20f4a:	d215      	bcs.n	20f78 <send_buf+0x60>
		frag = create_frag(conn, buf);
   20f4c:	4621      	mov	r1, r4
   20f4e:	4628      	mov	r0, r5
   20f50:	f7ff ffae 	bl	20eb0 <create_frag>
		if (!frag) {
   20f54:	4601      	mov	r1, r0
   20f56:	b1c8      	cbz	r0, 20f8c <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   20f58:	2301      	movs	r3, #1
   20f5a:	461a      	mov	r2, r3
   20f5c:	4628      	mov	r0, r5
   20f5e:	f7fe fe03 	bl	1fb68 <send_frag>
   20f62:	4603      	mov	r3, r0
   20f64:	2800      	cmp	r0, #0
   20f66:	d1eb      	bne.n	20f40 <send_buf+0x28>
   20f68:	e004      	b.n	20f74 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   20f6a:	2300      	movs	r3, #0
   20f6c:	2202      	movs	r2, #2
   20f6e:	f7fe fdfb 	bl	1fb68 <send_frag>
   20f72:	4603      	mov	r3, r0
}
   20f74:	4618      	mov	r0, r3
   20f76:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   20f78:	2300      	movs	r3, #0
   20f7a:	2203      	movs	r2, #3
   20f7c:	4621      	mov	r1, r4
   20f7e:	4628      	mov	r0, r5
   20f80:	f7fe fdf2 	bl	1fb68 <send_frag>
   20f84:	4603      	mov	r3, r0
   20f86:	e7f5      	b.n	20f74 <send_buf+0x5c>
		return false;
   20f88:	2300      	movs	r3, #0
   20f8a:	e7f3      	b.n	20f74 <send_buf+0x5c>
			return false;
   20f8c:	2300      	movs	r3, #0
   20f8e:	e7f1      	b.n	20f74 <send_buf+0x5c>
   20f90:	20008000 	.word	0x20008000

00020f94 <bt_conn_process_tx>:
{
   20f94:	b570      	push	{r4, r5, r6, lr}
   20f96:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   20f98:	7b43      	ldrb	r3, [r0, #13]
   20f9a:	b923      	cbnz	r3, 20fa6 <bt_conn_process_tx+0x12>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   20f9c:	2106      	movs	r1, #6
   20f9e:	3004      	adds	r0, #4
   20fa0:	f018 f874 	bl	3908c <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   20fa4:	b968      	cbnz	r0, 20fc2 <bt_conn_process_tx+0x2e>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   20fa6:	2200      	movs	r2, #0
   20fa8:	2300      	movs	r3, #0
   20faa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   20fae:	f01a ff07 	bl	3bdc0 <net_buf_get>
	BT_ASSERT(buf);
   20fb2:	4605      	mov	r5, r0
   20fb4:	b148      	cbz	r0, 20fca <bt_conn_process_tx+0x36>
	if (!send_buf(conn, buf)) {
   20fb6:	4629      	mov	r1, r5
   20fb8:	4620      	mov	r0, r4
   20fba:	f7ff ffad 	bl	20f18 <send_buf>
   20fbe:	b190      	cbz	r0, 20fe6 <bt_conn_process_tx+0x52>
}
   20fc0:	bd70      	pop	{r4, r5, r6, pc}
		conn_cleanup(conn);
   20fc2:	4620      	mov	r0, r4
   20fc4:	f7ff f836 	bl	20034 <conn_cleanup>
		return;
   20fc8:	e7fa      	b.n	20fc0 <bt_conn_process_tx+0x2c>
	BT_ASSERT(buf);
   20fca:	f240 331a 	movw	r3, #794	; 0x31a
   20fce:	4a0c      	ldr	r2, [pc, #48]	; (21000 <bt_conn_process_tx+0x6c>)
   20fd0:	490c      	ldr	r1, [pc, #48]	; (21004 <bt_conn_process_tx+0x70>)
   20fd2:	480d      	ldr	r0, [pc, #52]	; (21008 <bt_conn_process_tx+0x74>)
   20fd4:	f015 f95e 	bl	36294 <assert_print>
   20fd8:	4040      	eors	r0, r0
   20fda:	f380 8811 	msr	BASEPRI, r0
   20fde:	f04f 0003 	mov.w	r0, #3
   20fe2:	df02      	svc	2
   20fe4:	e7e7      	b.n	20fb6 <bt_conn_process_tx+0x22>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   20fe6:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   20fe8:	2300      	movs	r3, #0
   20fea:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   20fec:	4628      	mov	r0, r5
   20fee:	f008 fb59 	bl	296a4 <net_buf_unref>
		if (tx) {
   20ff2:	2e00      	cmp	r6, #0
   20ff4:	d0e4      	beq.n	20fc0 <bt_conn_process_tx+0x2c>
			conn_tx_destroy(conn, tx);
   20ff6:	4631      	mov	r1, r6
   20ff8:	4620      	mov	r0, r4
   20ffa:	f7fe fd3b 	bl	1fa74 <conn_tx_destroy>
   20ffe:	e7df      	b.n	20fc0 <bt_conn_process_tx+0x2c>
   21000:	00042f60 	.word	0x00042f60
   21004:	000446d0 	.word	0x000446d0
   21008:	0003f72c 	.word	0x0003f72c

0002100c <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
   2100c:	4603      	mov	r3, r0
   2100e:	b140      	cbz	r0, 21022 <bt_conn_auth_cb_register+0x16>
		bt_auth = NULL;
		return 0;
	}

	if (bt_auth) {
   21010:	4a11      	ldr	r2, [pc, #68]	; (21058 <bt_conn_auth_cb_register+0x4c>)
   21012:	6812      	ldr	r2, [r2, #0]
   21014:	b9a2      	cbnz	r2, 21040 <bt_conn_auth_cb_register+0x34>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
   21016:	6902      	ldr	r2, [r0, #16]
   21018:	b132      	cbz	r2, 21028 <bt_conn_auth_cb_register+0x1c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
   2101a:	4a0f      	ldr	r2, [pc, #60]	; (21058 <bt_conn_auth_cb_register+0x4c>)
   2101c:	6013      	str	r3, [r2, #0]
	return 0;
   2101e:	2000      	movs	r0, #0
   21020:	4770      	bx	lr
		bt_auth = NULL;
   21022:	4b0d      	ldr	r3, [pc, #52]	; (21058 <bt_conn_auth_cb_register+0x4c>)
   21024:	6018      	str	r0, [r3, #0]
		return 0;
   21026:	4770      	bx	lr
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   21028:	6802      	ldr	r2, [r0, #0]
	if (!cb->cancel &&
   2102a:	b962      	cbnz	r2, 21046 <bt_conn_auth_cb_register+0x3a>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   2102c:	6842      	ldr	r2, [r0, #4]
   2102e:	b96a      	cbnz	r2, 2104c <bt_conn_auth_cb_register+0x40>
   21030:	6882      	ldr	r2, [r0, #8]
   21032:	b972      	cbnz	r2, 21052 <bt_conn_auth_cb_register+0x46>
	     cb->pairing_confirm)) {
   21034:	6942      	ldr	r2, [r0, #20]
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
   21036:	2a00      	cmp	r2, #0
   21038:	d0ef      	beq.n	2101a <bt_conn_auth_cb_register+0xe>
		return -EINVAL;
   2103a:	f06f 0015 	mvn.w	r0, #21
}
   2103e:	4770      	bx	lr
		return -EALREADY;
   21040:	f06f 0077 	mvn.w	r0, #119	; 0x77
   21044:	4770      	bx	lr
		return -EINVAL;
   21046:	f06f 0015 	mvn.w	r0, #21
   2104a:	4770      	bx	lr
   2104c:	f06f 0015 	mvn.w	r0, #21
   21050:	4770      	bx	lr
   21052:	f06f 0015 	mvn.w	r0, #21
   21056:	4770      	bx	lr
   21058:	2000c128 	.word	0x2000c128

0002105c <bt_conn_auth_info_cb_register>:
}
#endif

int bt_conn_auth_info_cb_register(struct bt_conn_auth_info_cb *cb)
{
	CHECKIF(cb == NULL) {
   2105c:	b180      	cbz	r0, 21080 <bt_conn_auth_info_cb_register+0x24>
		return -EINVAL;
	}

	sys_slist_append(&bt_auth_info_cbs, &cb->node);
   2105e:	f100 020c 	add.w	r2, r0, #12
	parent->next = child;
   21062:	2100      	movs	r1, #0
   21064:	60c1      	str	r1, [r0, #12]
	return list->tail;
   21066:	4b08      	ldr	r3, [pc, #32]	; (21088 <bt_conn_auth_info_cb_register+0x2c>)
   21068:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2106a:	b123      	cbz	r3, 21076 <bt_conn_auth_info_cb_register+0x1a>
	parent->next = child;
   2106c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2106e:	4b06      	ldr	r3, [pc, #24]	; (21088 <bt_conn_auth_info_cb_register+0x2c>)
   21070:	605a      	str	r2, [r3, #4]

	return 0;
   21072:	2000      	movs	r0, #0
}
   21074:	4770      	bx	lr
	list->tail = node;
   21076:	4b04      	ldr	r3, [pc, #16]	; (21088 <bt_conn_auth_info_cb_register+0x2c>)
   21078:	605a      	str	r2, [r3, #4]
	list->head = node;
   2107a:	601a      	str	r2, [r3, #0]
   2107c:	4608      	mov	r0, r1
}
   2107e:	4770      	bx	lr
		return -EINVAL;
   21080:	f06f 0015 	mvn.w	r0, #21
}
   21084:	4770      	bx	lr
   21086:	bf00      	nop
   21088:	2000c120 	.word	0x2000c120

0002108c <bt_conn_lookup_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

struct bt_conn *bt_conn_lookup_index(uint8_t index)
{
	if (index >= ARRAY_SIZE(acl_conns)) {
   2108c:	b940      	cbnz	r0, 210a0 <bt_conn_lookup_index+0x14>
{
   2108e:	b508      	push	{r3, lr}
   21090:	4603      	mov	r3, r0
		return NULL;
	}

	return bt_conn_ref(&acl_conns[index]);
   21092:	20d8      	movs	r0, #216	; 0xd8
   21094:	4a03      	ldr	r2, [pc, #12]	; (210a4 <bt_conn_lookup_index+0x18>)
   21096:	fb00 2003 	mla	r0, r0, r3, r2
   2109a:	f7ff f8e3 	bl	20264 <bt_conn_ref>
}
   2109e:	bd08      	pop	{r3, pc}
		return NULL;
   210a0:	2000      	movs	r0, #0
}
   210a2:	4770      	bx	lr
   210a4:	2000b5b8 	.word	0x2000b5b8

000210a8 <bt_conn_init>:

int bt_conn_init(void)
{
   210a8:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   210aa:	480c      	ldr	r0, [pc, #48]	; (210dc <bt_conn_init+0x34>)
   210ac:	f01d fc89 	bl	3e9c2 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   210b0:	2400      	movs	r4, #0
   210b2:	e006      	b.n	210c2 <bt_conn_init+0x1a>
		k_fifo_put(&free_tx, &conn_tx[i]);
   210b4:	490a      	ldr	r1, [pc, #40]	; (210e0 <bt_conn_init+0x38>)
   210b6:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   210ba:	4808      	ldr	r0, [pc, #32]	; (210dc <bt_conn_init+0x34>)
   210bc:	f01d fc8e 	bl	3e9dc <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   210c0:	3401      	adds	r4, #1
   210c2:	2c02      	cmp	r4, #2
   210c4:	d9f6      	bls.n	210b4 <bt_conn_init+0xc>
	}

	bt_att_init();
   210c6:	f001 fd83 	bl	22bd0 <bt_att_init>

	err = bt_smp_init();
   210ca:	f007 fab5 	bl	28638 <bt_smp_init>
	if (err) {
   210ce:	4604      	mov	r4, r0
   210d0:	b108      	cbz	r0, 210d6 <bt_conn_init+0x2e>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   210d2:	4620      	mov	r0, r4
   210d4:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   210d6:	f018 fad1 	bl	3967c <bt_l2cap_init>
	return 0;
   210da:	e7fa      	b.n	210d2 <bt_conn_init+0x2a>
   210dc:	20008a18 	.word	0x20008a18
   210e0:	2000c0ec 	.word	0x2000c0ec

000210e4 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   210e4:	4905      	ldr	r1, [pc, #20]	; (210fc <get_ident+0x18>)
   210e6:	780a      	ldrb	r2, [r1, #0]
   210e8:	1c53      	adds	r3, r2, #1
   210ea:	b2db      	uxtb	r3, r3
   210ec:	700b      	strb	r3, [r1, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   210ee:	b90b      	cbnz	r3, 210f4 <get_ident+0x10>
		ident++;
   210f0:	3202      	adds	r2, #2
   210f2:	700a      	strb	r2, [r1, #0]
	}

	return ident;
}
   210f4:	4b01      	ldr	r3, [pc, #4]	; (210fc <get_ident+0x18>)
   210f6:	7818      	ldrb	r0, [r3, #0]
   210f8:	4770      	bx	lr
   210fa:	bf00      	nop
   210fc:	2000cab4 	.word	0x2000cab4

00021100 <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   21100:	b5f0      	push	{r4, r5, r6, r7, lr}
   21102:	b083      	sub	sp, #12
   21104:	af00      	add	r7, sp, #0
   21106:	4605      	mov	r5, r0
		.recv = l2cap_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   21108:	2000      	movs	r0, #0
   2110a:	2800      	cmp	r0, #0
   2110c:	d03a      	beq.n	21184 <l2cap_accept+0x84>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   2110e:	466c      	mov	r4, sp
   21110:	b088      	sub	sp, #32
   21112:	466b      	mov	r3, sp
   21114:	f113 0210 	adds.w	r2, r3, #16
   21118:	d044      	beq.n	211a4 <l2cap_accept+0xa4>
   2111a:	210c      	movs	r1, #12
   2111c:	b13a      	cbz	r2, 2112e <l2cap_accept+0x2e>
   2111e:	4608      	mov	r0, r1
   21120:	2904      	cmp	r1, #4
   21122:	dd01      	ble.n	21128 <l2cap_accept+0x28>
   21124:	4e22      	ldr	r6, [pc, #136]	; (211b0 <l2cap_accept+0xb0>)
   21126:	615e      	str	r6, [r3, #20]
   21128:	2808      	cmp	r0, #8
   2112a:	dd00      	ble.n	2112e <l2cap_accept+0x2e>
   2112c:	619d      	str	r5, [r3, #24]
   2112e:	290b      	cmp	r1, #11
   21130:	dd3b      	ble.n	211aa <l2cap_accept+0xaa>
   21132:	f04f 0c0c 	mov.w	ip, #12
   21136:	b13a      	cbz	r2, 21148 <l2cap_accept+0x48>
   21138:	2103      	movs	r1, #3
   2113a:	7139      	strb	r1, [r7, #4]
   2113c:	2100      	movs	r1, #0
   2113e:	7179      	strb	r1, [r7, #5]
   21140:	71b9      	strb	r1, [r7, #6]
   21142:	71f9      	strb	r1, [r7, #7]
   21144:	6878      	ldr	r0, [r7, #4]
   21146:	6118      	str	r0, [r3, #16]
   21148:	2100      	movs	r1, #0
   2114a:	f36f 0100 	bfc	r1, #0, #1
   2114e:	f36f 0141 	bfc	r1, #1, #1
   21152:	f36f 0182 	bfc	r1, #2, #1
   21156:	f36f 01c5 	bfc	r1, #3, #3
   2115a:	2301      	movs	r3, #1
   2115c:	f363 1188 	bfi	r1, r3, #6, #3
   21160:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   21164:	f36c 2152 	bfi	r1, ip, #9, #10
   21168:	f36f 41de 	bfc	r1, #19, #12
   2116c:	f36f 71df 	bfc	r1, #31, #1
   21170:	2300      	movs	r3, #0
   21172:	4810      	ldr	r0, [pc, #64]	; (211b4 <l2cap_accept+0xb4>)
   21174:	f7f5 fbea 	bl	1694c <z_impl_z_log_msg_static_create>
   21178:	46a5      	mov	sp, r4

	return -ENOMEM;
   2117a:	f06f 000b 	mvn.w	r0, #11
}
   2117e:	370c      	adds	r7, #12
   21180:	46bd      	mov	sp, r7
   21182:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (l2cap->chan.chan.conn) {
   21184:	2394      	movs	r3, #148	; 0x94
   21186:	fb00 f303 	mul.w	r3, r0, r3
   2118a:	4a0b      	ldr	r2, [pc, #44]	; (211b8 <l2cap_accept+0xb8>)
   2118c:	58d3      	ldr	r3, [r2, r3]
   2118e:	b10b      	cbz	r3, 21194 <l2cap_accept+0x94>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   21190:	3001      	adds	r0, #1
   21192:	e7ba      	b.n	2110a <l2cap_accept+0xa>
		l2cap->chan.chan.ops = &ops;
   21194:	4b08      	ldr	r3, [pc, #32]	; (211b8 <l2cap_accept+0xb8>)
   21196:	2294      	movs	r2, #148	; 0x94
   21198:	fb02 3300 	mla	r3, r2, r0, r3
   2119c:	4a07      	ldr	r2, [pc, #28]	; (211bc <l2cap_accept+0xbc>)
   2119e:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   211a0:	600b      	str	r3, [r1, #0]
		return 0;
   211a2:	e7ec      	b.n	2117e <l2cap_accept+0x7e>
	LOG_ERR("No available L2CAP context for conn %p", conn);
   211a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   211a8:	e7b8      	b.n	2111c <l2cap_accept+0x1c>
   211aa:	f06f 0c1b 	mvn.w	ip, #27
   211ae:	e7c2      	b.n	21136 <l2cap_accept+0x36>
   211b0:	00043358 	.word	0x00043358
   211b4:	0003f3f8 	.word	0x0003f3f8
   211b8:	2000c12c 	.word	0x2000c12c
   211bc:	00043520 	.word	0x00043520

000211c0 <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   211c0:	8a0b      	ldrh	r3, [r1, #16]
   211c2:	2b01      	cmp	r3, #1
   211c4:	d900      	bls.n	211c8 <le_conn_param_rsp+0x8>
   211c6:	4770      	bx	lr
{
   211c8:	b500      	push	{lr}
   211ca:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("Too small LE conn param rsp");
   211cc:	4b13      	ldr	r3, [pc, #76]	; (2121c <le_conn_param_rsp+0x5c>)
   211ce:	9307      	str	r3, [sp, #28]
   211d0:	2302      	movs	r3, #2
   211d2:	f88d 3004 	strb.w	r3, [sp, #4]
   211d6:	2300      	movs	r3, #0
   211d8:	f88d 3005 	strb.w	r3, [sp, #5]
   211dc:	f88d 3006 	strb.w	r3, [sp, #6]
   211e0:	f88d 3007 	strb.w	r3, [sp, #7]
   211e4:	9a01      	ldr	r2, [sp, #4]
   211e6:	9206      	str	r2, [sp, #24]
   211e8:	4619      	mov	r1, r3
   211ea:	f363 0100 	bfi	r1, r3, #0, #1
   211ee:	f363 0141 	bfi	r1, r3, #1, #1
   211f2:	f363 0182 	bfi	r1, r3, #2, #1
   211f6:	f363 01c5 	bfi	r1, r3, #3, #3
   211fa:	2201      	movs	r2, #1
   211fc:	f362 1188 	bfi	r1, r2, #6, #3
   21200:	2208      	movs	r2, #8
   21202:	f362 2152 	bfi	r1, r2, #9, #10
   21206:	f363 41de 	bfi	r1, r3, #19, #12
   2120a:	f363 71df 	bfi	r1, r3, #31, #1
   2120e:	aa06      	add	r2, sp, #24
   21210:	4803      	ldr	r0, [pc, #12]	; (21220 <le_conn_param_rsp+0x60>)
   21212:	f7f5 fb9b 	bl	1694c <z_impl_z_log_msg_static_create>
}
   21216:	b009      	add	sp, #36	; 0x24
   21218:	f85d fb04 	ldr.w	pc, [sp], #4
   2121c:	00043380 	.word	0x00043380
   21220:	0003f3f8 	.word	0x0003f3f8

00021224 <l2cap_chan_add>:
{
   21224:	b510      	push	{r4, lr}
   21226:	b088      	sub	sp, #32
	if (!le_chan) {
   21228:	b179      	cbz	r1, 2124a <l2cap_chan_add+0x26>
   2122a:	460b      	mov	r3, r1
	atomic_clear(chan->status);
   2122c:	3110      	adds	r1, #16
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2122e:	2400      	movs	r4, #0
   21230:	e8d1 cfef 	ldaex	ip, [r1]
   21234:	e8c1 4fee 	stlex	lr, r4, [r1]
   21238:	f1be 0f00 	cmp.w	lr, #0
   2123c:	d1f8      	bne.n	21230 <l2cap_chan_add+0xc>
	bt_l2cap_chan_add(conn, chan, destroy);
   2123e:	4619      	mov	r1, r3
   21240:	f018 f935 	bl	394ae <bt_l2cap_chan_add>
	return true;
   21244:	2001      	movs	r0, #1
}
   21246:	b008      	add	sp, #32
   21248:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to allocate L2CAP channel ID");
   2124a:	4b14      	ldr	r3, [pc, #80]	; (2129c <l2cap_chan_add+0x78>)
   2124c:	9307      	str	r3, [sp, #28]
   2124e:	2302      	movs	r3, #2
   21250:	f88d 3004 	strb.w	r3, [sp, #4]
   21254:	2400      	movs	r4, #0
   21256:	f88d 4005 	strb.w	r4, [sp, #5]
   2125a:	f88d 4006 	strb.w	r4, [sp, #6]
   2125e:	f88d 4007 	strb.w	r4, [sp, #7]
   21262:	9b01      	ldr	r3, [sp, #4]
   21264:	9306      	str	r3, [sp, #24]
   21266:	4621      	mov	r1, r4
   21268:	f364 0100 	bfi	r1, r4, #0, #1
   2126c:	f364 0141 	bfi	r1, r4, #1, #1
   21270:	f364 0182 	bfi	r1, r4, #2, #1
   21274:	f364 01c5 	bfi	r1, r4, #3, #3
   21278:	2301      	movs	r3, #1
   2127a:	f363 1188 	bfi	r1, r3, #6, #3
   2127e:	2308      	movs	r3, #8
   21280:	f363 2152 	bfi	r1, r3, #9, #10
   21284:	f364 41de 	bfi	r1, r4, #19, #12
   21288:	f364 71df 	bfi	r1, r4, #31, #1
   2128c:	4623      	mov	r3, r4
   2128e:	aa06      	add	r2, sp, #24
   21290:	4803      	ldr	r0, [pc, #12]	; (212a0 <l2cap_chan_add+0x7c>)
   21292:	f7f5 fb5b 	bl	1694c <z_impl_z_log_msg_static_create>
		return false;
   21296:	4620      	mov	r0, r4
   21298:	e7d5      	b.n	21246 <l2cap_chan_add+0x22>
   2129a:	bf00      	nop
   2129c:	0004339c 	.word	0x0004339c
   212a0:	0003f3f8 	.word	0x0003f3f8

000212a4 <bt_l2cap_connected>:
{
   212a4:	b530      	push	{r4, r5, lr}
   212a6:	b083      	sub	sp, #12
   212a8:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   212aa:	4c21      	ldr	r4, [pc, #132]	; (21330 <bt_l2cap_connected+0x8c>)
   212ac:	e011      	b.n	212d2 <bt_l2cap_connected+0x2e>
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   212ae:	9b01      	ldr	r3, [sp, #4]
   212b0:	3310      	adds	r3, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   212b2:	e8d3 1fef 	ldaex	r1, [r3]
   212b6:	f041 0101 	orr.w	r1, r1, #1
   212ba:	e8c3 1fe2 	stlex	r2, r1, [r3]
   212be:	2a00      	cmp	r2, #0
   212c0:	d1f7      	bne.n	212b2 <bt_l2cap_connected+0xe>
		if (chan->ops->status) {
   212c2:	9801      	ldr	r0, [sp, #4]
   212c4:	6843      	ldr	r3, [r0, #4]
   212c6:	69db      	ldr	r3, [r3, #28]
   212c8:	b113      	cbz	r3, 212d0 <bt_l2cap_connected+0x2c>
			chan->ops->status(chan, chan->status);
   212ca:	f100 0110 	add.w	r1, r0, #16
   212ce:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   212d0:	340c      	adds	r4, #12
   212d2:	4b18      	ldr	r3, [pc, #96]	; (21334 <bt_l2cap_connected+0x90>)
   212d4:	429c      	cmp	r4, r3
   212d6:	d818      	bhi.n	2130a <bt_l2cap_connected+0x66>
   212d8:	4b16      	ldr	r3, [pc, #88]	; (21334 <bt_l2cap_connected+0x90>)
   212da:	429c      	cmp	r4, r3
   212dc:	d225      	bcs.n	2132a <bt_l2cap_connected+0x86>
		if (fchan->accept(conn, &chan) < 0) {
   212de:	6863      	ldr	r3, [r4, #4]
   212e0:	a901      	add	r1, sp, #4
   212e2:	4628      	mov	r0, r5
   212e4:	4798      	blx	r3
   212e6:	2800      	cmp	r0, #0
   212e8:	dbf2      	blt.n	212d0 <bt_l2cap_connected+0x2c>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   212ea:	9901      	ldr	r1, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   212ec:	8823      	ldrh	r3, [r4, #0]
   212ee:	828b      	strh	r3, [r1, #20]
		le_chan->tx.cid = fchan->cid;
   212f0:	848b      	strh	r3, [r1, #36]	; 0x24
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   212f2:	68a2      	ldr	r2, [r4, #8]
   212f4:	4628      	mov	r0, r5
   212f6:	f7ff ff95 	bl	21224 <l2cap_chan_add>
   212fa:	b1b0      	cbz	r0, 2132a <bt_l2cap_connected+0x86>
		if (chan->ops->connected) {
   212fc:	9801      	ldr	r0, [sp, #4]
   212fe:	6843      	ldr	r3, [r0, #4]
   21300:	681b      	ldr	r3, [r3, #0]
   21302:	2b00      	cmp	r3, #0
   21304:	d0d3      	beq.n	212ae <bt_l2cap_connected+0xa>
			chan->ops->connected(chan);
   21306:	4798      	blx	r3
   21308:	e7d1      	b.n	212ae <bt_l2cap_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   2130a:	4c0b      	ldr	r4, [pc, #44]	; (21338 <bt_l2cap_connected+0x94>)
   2130c:	f240 1381 	movw	r3, #385	; 0x181
   21310:	4622      	mov	r2, r4
   21312:	490a      	ldr	r1, [pc, #40]	; (2133c <bt_l2cap_connected+0x98>)
   21314:	480a      	ldr	r0, [pc, #40]	; (21340 <bt_l2cap_connected+0x9c>)
   21316:	f014 ffbd 	bl	36294 <assert_print>
   2131a:	480a      	ldr	r0, [pc, #40]	; (21344 <bt_l2cap_connected+0xa0>)
   2131c:	f014 ffba 	bl	36294 <assert_print>
   21320:	f240 1181 	movw	r1, #385	; 0x181
   21324:	4620      	mov	r0, r4
   21326:	f014 ffae 	bl	36286 <assert_post_action>
}
   2132a:	b003      	add	sp, #12
   2132c:	bd30      	pop	{r4, r5, pc}
   2132e:	bf00      	nop
   21330:	0003f310 	.word	0x0003f310
   21334:	0003f334 	.word	0x0003f334
   21338:	000433c0 	.word	0x000433c0
   2133c:	000433f4 	.word	0x000433f4
   21340:	0003f72c 	.word	0x0003f72c
   21344:	00040eb4 	.word	0x00040eb4

00021348 <l2cap_create_le_sig_pdu>:
{
   21348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2134c:	b082      	sub	sp, #8
   2134e:	af00      	add	r7, sp, #0
   21350:	460c      	mov	r4, r1
   21352:	4616      	mov	r6, r2
   21354:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   21356:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2135a:	2300      	movs	r3, #0
   2135c:	2100      	movs	r1, #0
   2135e:	4608      	mov	r0, r1
   21360:	f018 f8ef 	bl	39542 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   21364:	4680      	mov	r8, r0
   21366:	b158      	cbz	r0, 21380 <l2cap_create_le_sig_pdu+0x38>
	return net_buf_simple_add(&buf->b, len);
   21368:	2104      	movs	r1, #4
   2136a:	300c      	adds	r0, #12
   2136c:	f008 fab8 	bl	298e0 <net_buf_simple_add>
	hdr->code = code;
   21370:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   21372:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   21374:	8045      	strh	r5, [r0, #2]
}
   21376:	4640      	mov	r0, r8
   21378:	3708      	adds	r7, #8
   2137a:	46bd      	mov	sp, r7
   2137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   21380:	466d      	mov	r5, sp
   21382:	b088      	sub	sp, #32
   21384:	466b      	mov	r3, sp
   21386:	f113 0210 	adds.w	r2, r3, #16
   2138a:	d02f      	beq.n	213ec <l2cap_create_le_sig_pdu+0xa4>
   2138c:	210c      	movs	r1, #12
   2138e:	b13a      	cbz	r2, 213a0 <l2cap_create_le_sig_pdu+0x58>
   21390:	4608      	mov	r0, r1
   21392:	2904      	cmp	r1, #4
   21394:	dd01      	ble.n	2139a <l2cap_create_le_sig_pdu+0x52>
   21396:	4e18      	ldr	r6, [pc, #96]	; (213f8 <l2cap_create_le_sig_pdu+0xb0>)
   21398:	615e      	str	r6, [r3, #20]
   2139a:	2808      	cmp	r0, #8
   2139c:	dd00      	ble.n	213a0 <l2cap_create_le_sig_pdu+0x58>
   2139e:	619c      	str	r4, [r3, #24]
   213a0:	290b      	cmp	r1, #11
   213a2:	dd26      	ble.n	213f2 <l2cap_create_le_sig_pdu+0xaa>
   213a4:	240c      	movs	r4, #12
   213a6:	b13a      	cbz	r2, 213b8 <l2cap_create_le_sig_pdu+0x70>
   213a8:	2103      	movs	r1, #3
   213aa:	7139      	strb	r1, [r7, #4]
   213ac:	2100      	movs	r1, #0
   213ae:	7179      	strb	r1, [r7, #5]
   213b0:	71b9      	strb	r1, [r7, #6]
   213b2:	71f9      	strb	r1, [r7, #7]
   213b4:	6878      	ldr	r0, [r7, #4]
   213b6:	6118      	str	r0, [r3, #16]
   213b8:	2100      	movs	r1, #0
   213ba:	f36f 0100 	bfc	r1, #0, #1
   213be:	f36f 0141 	bfc	r1, #1, #1
   213c2:	f36f 0182 	bfc	r1, #2, #1
   213c6:	f36f 01c5 	bfc	r1, #3, #3
   213ca:	2301      	movs	r3, #1
   213cc:	f363 1188 	bfi	r1, r3, #6, #3
   213d0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   213d4:	f364 2152 	bfi	r1, r4, #9, #10
   213d8:	f36f 41de 	bfc	r1, #19, #12
   213dc:	f36f 71df 	bfc	r1, #31, #1
   213e0:	2300      	movs	r3, #0
   213e2:	4806      	ldr	r0, [pc, #24]	; (213fc <l2cap_create_le_sig_pdu+0xb4>)
   213e4:	f7f5 fab2 	bl	1694c <z_impl_z_log_msg_static_create>
   213e8:	46ad      	mov	sp, r5
		return NULL;
   213ea:	e7c4      	b.n	21376 <l2cap_create_le_sig_pdu+0x2e>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   213ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   213f0:	e7cd      	b.n	2138e <l2cap_create_le_sig_pdu+0x46>
   213f2:	f06f 041b 	mvn.w	r4, #27
   213f6:	e7d6      	b.n	213a6 <l2cap_create_le_sig_pdu+0x5e>
   213f8:	0004341c 	.word	0x0004341c
   213fc:	0003f3f8 	.word	0x0003f3f8

00021400 <l2cap_recv>:
{
   21400:	b5f0      	push	{r4, r5, r6, r7, lr}
   21402:	b091      	sub	sp, #68	; 0x44
   21404:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   21406:	8a0b      	ldrh	r3, [r1, #16]
   21408:	2b03      	cmp	r3, #3
   2140a:	d924      	bls.n	21456 <l2cap_recv+0x56>
   2140c:	4606      	mov	r6, r0
   2140e:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   21410:	2104      	movs	r1, #4
   21412:	f104 000c 	add.w	r0, r4, #12
   21416:	f008 fa23 	bl	29860 <net_buf_simple_pull_mem>
   2141a:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   2141c:	8841      	ldrh	r1, [r0, #2]
	if (buf->len != len) {
   2141e:	8a20      	ldrh	r0, [r4, #16]
   21420:	4288      	cmp	r0, r1
   21422:	d069      	beq.n	214f8 <l2cap_recv+0xf8>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   21424:	466c      	mov	r4, sp
   21426:	b088      	sub	sp, #32
   21428:	ab02      	add	r3, sp, #8
   2142a:	f113 0210 	adds.w	r2, r3, #16
   2142e:	d038      	beq.n	214a2 <l2cap_recv+0xa2>
   21430:	2510      	movs	r5, #16
   21432:	b162      	cbz	r2, 2144e <l2cap_recv+0x4e>
   21434:	462e      	mov	r6, r5
   21436:	2d04      	cmp	r5, #4
   21438:	dd03      	ble.n	21442 <l2cap_recv+0x42>
   2143a:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 215e8 <l2cap_recv+0x1e8>
   2143e:	f8c3 c014 	str.w	ip, [r3, #20]
   21442:	2e08      	cmp	r6, #8
   21444:	dd00      	ble.n	21448 <l2cap_recv+0x48>
   21446:	6198      	str	r0, [r3, #24]
   21448:	2e0c      	cmp	r6, #12
   2144a:	dd2d      	ble.n	214a8 <l2cap_recv+0xa8>
   2144c:	61d9      	str	r1, [r3, #28]
   2144e:	2d0f      	cmp	r5, #15
   21450:	dd4f      	ble.n	214f2 <l2cap_recv+0xf2>
   21452:	2510      	movs	r5, #16
   21454:	e02a      	b.n	214ac <l2cap_recv+0xac>
		LOG_ERR("Too small L2CAP signaling PDU");
   21456:	4b65      	ldr	r3, [pc, #404]	; (215ec <l2cap_recv+0x1ec>)
   21458:	637b      	str	r3, [r7, #52]	; 0x34
   2145a:	2302      	movs	r3, #2
   2145c:	713b      	strb	r3, [r7, #4]
   2145e:	2300      	movs	r3, #0
   21460:	717b      	strb	r3, [r7, #5]
   21462:	71bb      	strb	r3, [r7, #6]
   21464:	71fb      	strb	r3, [r7, #7]
   21466:	687a      	ldr	r2, [r7, #4]
   21468:	633a      	str	r2, [r7, #48]	; 0x30
   2146a:	4619      	mov	r1, r3
   2146c:	f363 0100 	bfi	r1, r3, #0, #1
   21470:	f363 0141 	bfi	r1, r3, #1, #1
   21474:	f363 0182 	bfi	r1, r3, #2, #1
   21478:	f363 01c5 	bfi	r1, r3, #3, #3
   2147c:	2201      	movs	r2, #1
   2147e:	f362 1188 	bfi	r1, r2, #6, #3
   21482:	2208      	movs	r2, #8
   21484:	f362 2152 	bfi	r1, r2, #9, #10
   21488:	f363 41de 	bfi	r1, r3, #19, #12
   2148c:	f363 71df 	bfi	r1, r3, #31, #1
   21490:	f107 0230 	add.w	r2, r7, #48	; 0x30
   21494:	4856      	ldr	r0, [pc, #344]	; (215f0 <l2cap_recv+0x1f0>)
   21496:	f7f5 fa59 	bl	1694c <z_impl_z_log_msg_static_create>
}
   2149a:	2000      	movs	r0, #0
   2149c:	373c      	adds	r7, #60	; 0x3c
   2149e:	46bd      	mov	sp, r7
   214a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   214a2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   214a6:	e7c4      	b.n	21432 <l2cap_recv+0x32>
   214a8:	f06f 051b 	mvn.w	r5, #27
   214ac:	b13a      	cbz	r2, 214be <l2cap_recv+0xbe>
   214ae:	2104      	movs	r1, #4
   214b0:	7139      	strb	r1, [r7, #4]
   214b2:	2100      	movs	r1, #0
   214b4:	7179      	strb	r1, [r7, #5]
   214b6:	71b9      	strb	r1, [r7, #6]
   214b8:	71f9      	strb	r1, [r7, #7]
   214ba:	6878      	ldr	r0, [r7, #4]
   214bc:	6118      	str	r0, [r3, #16]
   214be:	2100      	movs	r1, #0
   214c0:	f36f 0100 	bfc	r1, #0, #1
   214c4:	f36f 0141 	bfc	r1, #1, #1
   214c8:	f36f 0182 	bfc	r1, #2, #1
   214cc:	f36f 01c5 	bfc	r1, #3, #3
   214d0:	2301      	movs	r3, #1
   214d2:	f363 1188 	bfi	r1, r3, #6, #3
   214d6:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   214da:	f363 2152 	bfi	r1, r3, #9, #10
   214de:	f36f 41de 	bfc	r1, #19, #12
   214e2:	f36f 71df 	bfc	r1, #31, #1
   214e6:	2300      	movs	r3, #0
   214e8:	4841      	ldr	r0, [pc, #260]	; (215f0 <l2cap_recv+0x1f0>)
   214ea:	f7f5 fa2f 	bl	1694c <z_impl_z_log_msg_static_create>
   214ee:	46a5      	mov	sp, r4
		return 0;
   214f0:	e7d3      	b.n	2149a <l2cap_recv+0x9a>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   214f2:	f06f 051b 	mvn.w	r5, #27
   214f6:	e7d9      	b.n	214ac <l2cap_recv+0xac>
	if (!hdr->ident) {
   214f8:	786b      	ldrb	r3, [r5, #1]
   214fa:	b14b      	cbz	r3, 21510 <l2cap_recv+0x110>
	switch (hdr->code) {
   214fc:	782b      	ldrb	r3, [r5, #0]
   214fe:	2b01      	cmp	r3, #1
   21500:	d0cb      	beq.n	2149a <l2cap_recv+0x9a>
   21502:	2b13      	cmp	r3, #19
   21504:	d127      	bne.n	21556 <l2cap_recv+0x156>
		le_conn_param_rsp(l2cap, buf);
   21506:	4621      	mov	r1, r4
   21508:	4630      	mov	r0, r6
   2150a:	f7ff fe59 	bl	211c0 <le_conn_param_rsp>
		break;
   2150e:	e7c4      	b.n	2149a <l2cap_recv+0x9a>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   21510:	4b38      	ldr	r3, [pc, #224]	; (215f4 <l2cap_recv+0x1f4>)
   21512:	61fb      	str	r3, [r7, #28]
   21514:	2302      	movs	r3, #2
   21516:	713b      	strb	r3, [r7, #4]
   21518:	2300      	movs	r3, #0
   2151a:	717b      	strb	r3, [r7, #5]
   2151c:	71bb      	strb	r3, [r7, #6]
   2151e:	71fb      	strb	r3, [r7, #7]
   21520:	687a      	ldr	r2, [r7, #4]
   21522:	61ba      	str	r2, [r7, #24]
   21524:	4619      	mov	r1, r3
   21526:	f363 0100 	bfi	r1, r3, #0, #1
   2152a:	f363 0141 	bfi	r1, r3, #1, #1
   2152e:	f363 0182 	bfi	r1, r3, #2, #1
   21532:	f363 01c5 	bfi	r1, r3, #3, #3
   21536:	2201      	movs	r2, #1
   21538:	f362 1188 	bfi	r1, r2, #6, #3
   2153c:	2208      	movs	r2, #8
   2153e:	f362 2152 	bfi	r1, r2, #9, #10
   21542:	f363 41de 	bfi	r1, r3, #19, #12
   21546:	f363 71df 	bfi	r1, r3, #31, #1
   2154a:	f107 0218 	add.w	r2, r7, #24
   2154e:	4828      	ldr	r0, [pc, #160]	; (215f0 <l2cap_recv+0x1f0>)
   21550:	f7f5 f9fc 	bl	1694c <z_impl_z_log_msg_static_create>
		return 0;
   21554:	e7a1      	b.n	2149a <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   21556:	466c      	mov	r4, sp
   21558:	b088      	sub	sp, #32
   2155a:	a902      	add	r1, sp, #8
   2155c:	f111 0210 	adds.w	r2, r1, #16
   21560:	d010      	beq.n	21584 <l2cap_recv+0x184>
   21562:	200c      	movs	r0, #12
   21564:	b152      	cbz	r2, 2157c <l2cap_recv+0x17c>
   21566:	4684      	mov	ip, r0
   21568:	2804      	cmp	r0, #4
   2156a:	dd03      	ble.n	21574 <l2cap_recv+0x174>
   2156c:	f8df e088 	ldr.w	lr, [pc, #136]	; 215f8 <l2cap_recv+0x1f8>
   21570:	f8c1 e014 	str.w	lr, [r1, #20]
   21574:	f1bc 0f08 	cmp.w	ip, #8
   21578:	dd07      	ble.n	2158a <l2cap_recv+0x18a>
   2157a:	618b      	str	r3, [r1, #24]
   2157c:	280b      	cmp	r0, #11
   2157e:	dd30      	ble.n	215e2 <l2cap_recv+0x1e2>
   21580:	230c      	movs	r3, #12
   21582:	e004      	b.n	2158e <l2cap_recv+0x18e>
   21584:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21588:	e7ec      	b.n	21564 <l2cap_recv+0x164>
   2158a:	f06f 031b 	mvn.w	r3, #27
   2158e:	b13a      	cbz	r2, 215a0 <l2cap_recv+0x1a0>
   21590:	2003      	movs	r0, #3
   21592:	7138      	strb	r0, [r7, #4]
   21594:	2000      	movs	r0, #0
   21596:	7178      	strb	r0, [r7, #5]
   21598:	71b8      	strb	r0, [r7, #6]
   2159a:	71f8      	strb	r0, [r7, #7]
   2159c:	6878      	ldr	r0, [r7, #4]
   2159e:	6108      	str	r0, [r1, #16]
   215a0:	2100      	movs	r1, #0
   215a2:	f36f 0100 	bfc	r1, #0, #1
   215a6:	f36f 0141 	bfc	r1, #1, #1
   215aa:	f36f 0182 	bfc	r1, #2, #1
   215ae:	f36f 01c5 	bfc	r1, #3, #3
   215b2:	2002      	movs	r0, #2
   215b4:	f360 1188 	bfi	r1, r0, #6, #3
   215b8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   215bc:	f363 2152 	bfi	r1, r3, #9, #10
   215c0:	f36f 41de 	bfc	r1, #19, #12
   215c4:	f36f 71df 	bfc	r1, #31, #1
   215c8:	2300      	movs	r3, #0
   215ca:	4809      	ldr	r0, [pc, #36]	; (215f0 <l2cap_recv+0x1f0>)
   215cc:	f7f5 f9be 	bl	1694c <z_impl_z_log_msg_static_create>
   215d0:	46a5      	mov	sp, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   215d2:	7869      	ldrb	r1, [r5, #1]
   215d4:	6830      	ldr	r0, [r6, #0]
   215d6:	2200      	movs	r2, #0
   215d8:	9200      	str	r2, [sp, #0]
   215da:	4613      	mov	r3, r2
   215dc:	f017 ffd9 	bl	39592 <l2cap_send_reject>
		break;
   215e0:	e75b      	b.n	2149a <l2cap_recv+0x9a>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   215e2:	f06f 031b 	mvn.w	r3, #27
   215e6:	e7d2      	b.n	2158e <l2cap_recv+0x18e>
   215e8:	00043464 	.word	0x00043464
   215ec:	00043444 	.word	0x00043444
   215f0:	0003f3f8 	.word	0x0003f3f8
   215f4:	00043488 	.word	0x00043488
   215f8:	000434ac 	.word	0x000434ac

000215fc <bt_l2cap_recv>:
{
   215fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21600:	b088      	sub	sp, #32
   21602:	af00      	add	r7, sp, #0
   21604:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   21606:	8a0b      	ldrh	r3, [r1, #16]
   21608:	2b03      	cmp	r3, #3
   2160a:	d915      	bls.n	21638 <bt_l2cap_recv+0x3c>
   2160c:	4606      	mov	r6, r0
   2160e:	4615      	mov	r5, r2
   21610:	2104      	movs	r1, #4
   21612:	f104 000c 	add.w	r0, r4, #12
   21616:	f008 f923 	bl	29860 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   2161a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   2161e:	4641      	mov	r1, r8
   21620:	4630      	mov	r0, r6
   21622:	f017 ffec 	bl	395fe <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   21626:	b368      	cbz	r0, 21684 <bt_l2cap_recv+0x88>
	l2cap_chan_recv(chan, buf, complete);
   21628:	462a      	mov	r2, r5
   2162a:	4621      	mov	r1, r4
   2162c:	f017 ff23 	bl	39476 <l2cap_chan_recv>
}
   21630:	3720      	adds	r7, #32
   21632:	46bd      	mov	sp, r7
   21634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Too small L2CAP PDU received");
   21638:	4b34      	ldr	r3, [pc, #208]	; (2170c <bt_l2cap_recv+0x110>)
   2163a:	61fb      	str	r3, [r7, #28]
   2163c:	2302      	movs	r3, #2
   2163e:	713b      	strb	r3, [r7, #4]
   21640:	2300      	movs	r3, #0
   21642:	717b      	strb	r3, [r7, #5]
   21644:	71bb      	strb	r3, [r7, #6]
   21646:	71fb      	strb	r3, [r7, #7]
   21648:	687a      	ldr	r2, [r7, #4]
   2164a:	61ba      	str	r2, [r7, #24]
   2164c:	4619      	mov	r1, r3
   2164e:	f363 0100 	bfi	r1, r3, #0, #1
   21652:	f363 0141 	bfi	r1, r3, #1, #1
   21656:	f363 0182 	bfi	r1, r3, #2, #1
   2165a:	f363 01c5 	bfi	r1, r3, #3, #3
   2165e:	2201      	movs	r2, #1
   21660:	f362 1188 	bfi	r1, r2, #6, #3
   21664:	2208      	movs	r2, #8
   21666:	f362 2152 	bfi	r1, r2, #9, #10
   2166a:	f363 41de 	bfi	r1, r3, #19, #12
   2166e:	f363 71df 	bfi	r1, r3, #31, #1
   21672:	f107 0218 	add.w	r2, r7, #24
   21676:	4826      	ldr	r0, [pc, #152]	; (21710 <bt_l2cap_recv+0x114>)
   21678:	f7f5 f968 	bl	1694c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   2167c:	4620      	mov	r0, r4
   2167e:	f008 f811 	bl	296a4 <net_buf_unref>
		return;
   21682:	e7d5      	b.n	21630 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   21684:	466d      	mov	r5, sp
   21686:	b088      	sub	sp, #32
   21688:	466b      	mov	r3, sp
   2168a:	f113 0210 	adds.w	r2, r3, #16
   2168e:	d00e      	beq.n	216ae <bt_l2cap_recv+0xb2>
   21690:	210c      	movs	r1, #12
   21692:	b142      	cbz	r2, 216a6 <bt_l2cap_recv+0xaa>
   21694:	4608      	mov	r0, r1
   21696:	2904      	cmp	r1, #4
   21698:	dd01      	ble.n	2169e <bt_l2cap_recv+0xa2>
   2169a:	4e1e      	ldr	r6, [pc, #120]	; (21714 <bt_l2cap_recv+0x118>)
   2169c:	615e      	str	r6, [r3, #20]
   2169e:	2808      	cmp	r0, #8
   216a0:	dd08      	ble.n	216b4 <bt_l2cap_recv+0xb8>
   216a2:	f8c3 8018 	str.w	r8, [r3, #24]
   216a6:	290b      	cmp	r1, #11
   216a8:	dd2c      	ble.n	21704 <bt_l2cap_recv+0x108>
   216aa:	260c      	movs	r6, #12
   216ac:	e004      	b.n	216b8 <bt_l2cap_recv+0xbc>
   216ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   216b2:	e7ee      	b.n	21692 <bt_l2cap_recv+0x96>
   216b4:	f06f 061b 	mvn.w	r6, #27
   216b8:	b13a      	cbz	r2, 216ca <bt_l2cap_recv+0xce>
   216ba:	2103      	movs	r1, #3
   216bc:	7139      	strb	r1, [r7, #4]
   216be:	2100      	movs	r1, #0
   216c0:	7179      	strb	r1, [r7, #5]
   216c2:	71b9      	strb	r1, [r7, #6]
   216c4:	71f9      	strb	r1, [r7, #7]
   216c6:	6878      	ldr	r0, [r7, #4]
   216c8:	6118      	str	r0, [r3, #16]
   216ca:	2100      	movs	r1, #0
   216cc:	f36f 0100 	bfc	r1, #0, #1
   216d0:	f36f 0141 	bfc	r1, #1, #1
   216d4:	f36f 0182 	bfc	r1, #2, #1
   216d8:	f36f 01c5 	bfc	r1, #3, #3
   216dc:	2302      	movs	r3, #2
   216de:	f363 1188 	bfi	r1, r3, #6, #3
   216e2:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   216e6:	f363 2152 	bfi	r1, r3, #9, #10
   216ea:	f36f 41de 	bfc	r1, #19, #12
   216ee:	f36f 71df 	bfc	r1, #31, #1
   216f2:	2300      	movs	r3, #0
   216f4:	4806      	ldr	r0, [pc, #24]	; (21710 <bt_l2cap_recv+0x114>)
   216f6:	f7f5 f929 	bl	1694c <z_impl_z_log_msg_static_create>
   216fa:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   216fc:	4620      	mov	r0, r4
   216fe:	f007 ffd1 	bl	296a4 <net_buf_unref>
		return;
   21702:	e795      	b.n	21630 <bt_l2cap_recv+0x34>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   21704:	f06f 061b 	mvn.w	r6, #27
   21708:	e7d6      	b.n	216b8 <bt_l2cap_recv+0xbc>
   2170a:	bf00      	nop
   2170c:	000434d4 	.word	0x000434d4
   21710:	0003f3f8 	.word	0x0003f3f8
   21714:	000434f4 	.word	0x000434f4

00021718 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   21718:	2852      	cmp	r0, #82	; 0x52
   2171a:	d833      	bhi.n	21784 <att_op_get_type+0x6c>
   2171c:	281b      	cmp	r0, #27
   2171e:	d321      	bcc.n	21764 <att_op_get_type+0x4c>
   21720:	f1a0 031b 	sub.w	r3, r0, #27
   21724:	2b37      	cmp	r3, #55	; 0x37
   21726:	d82f      	bhi.n	21788 <att_op_get_type+0x70>
   21728:	e8df f003 	tbb	[pc, r3]
   2172c:	3b392e37 	.word	0x3b392e37
   21730:	2e352a2e 	.word	0x2e352a2e
   21734:	2e2e2e37 	.word	0x2e2e2e37
   21738:	2e2e2e2e 	.word	0x2e2e2e2e
   2173c:	2e2e2e2e 	.word	0x2e2e2e2e
   21740:	2e2e2e2e 	.word	0x2e2e2e2e
   21744:	2e2e2e2e 	.word	0x2e2e2e2e
   21748:	2e2e2e2e 	.word	0x2e2e2e2e
   2174c:	2e2e2e2e 	.word	0x2e2e2e2e
   21750:	2e2e2e2e 	.word	0x2e2e2e2e
   21754:	2e2e2e2e 	.word	0x2e2e2e2e
   21758:	2e2e2e2e 	.word	0x2e2e2e2e
   2175c:	2e2e2e2e 	.word	0x2e2e2e2e
   21760:	332e2e2e 	.word	0x332e2e2e
   21764:	2819      	cmp	r0, #25
   21766:	d80f      	bhi.n	21788 <att_op_get_type+0x70>
   21768:	b243      	sxtb	r3, r0
   2176a:	b16b      	cbz	r3, 21788 <att_op_get_type+0x70>
   2176c:	2301      	movs	r3, #1
   2176e:	4083      	lsls	r3, r0
   21770:	4a10      	ldr	r2, [pc, #64]	; (217b4 <att_op_get_type+0x9c>)
   21772:	401a      	ands	r2, r3
   21774:	b9ba      	cbnz	r2, 217a6 <att_op_get_type+0x8e>
   21776:	4a10      	ldr	r2, [pc, #64]	; (217b8 <att_op_get_type+0xa0>)
   21778:	401a      	ands	r2, r3
   2177a:	b12a      	cbz	r2, 21788 <att_op_get_type+0x70>
   2177c:	2001      	movs	r0, #1
   2177e:	4770      	bx	lr
   21780:	2001      	movs	r0, #1
   21782:	4770      	bx	lr
   21784:	28d2      	cmp	r0, #210	; 0xd2
   21786:	d010      	beq.n	217aa <att_op_get_type+0x92>
		return ATT_NOTIFICATION;
	case BT_ATT_OP_INDICATE:
		return ATT_INDICATION;
	}

	if (op & ATT_CMD_MASK) {
   21788:	f010 0f40 	tst.w	r0, #64	; 0x40
   2178c:	d10f      	bne.n	217ae <att_op_get_type+0x96>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   2178e:	2006      	movs	r0, #6
   21790:	4770      	bx	lr
		return ATT_COMMAND;
   21792:	2000      	movs	r0, #0
   21794:	4770      	bx	lr
		return ATT_RESPONSE;
   21796:	2002      	movs	r0, #2
   21798:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2179a:	2003      	movs	r0, #3
   2179c:	4770      	bx	lr
		return ATT_INDICATION;
   2179e:	2005      	movs	r0, #5
   217a0:	4770      	bx	lr
		return ATT_CONFIRMATION;
   217a2:	2004      	movs	r0, #4
   217a4:	4770      	bx	lr
		return ATT_RESPONSE;
   217a6:	2002      	movs	r0, #2
   217a8:	4770      	bx	lr
		return ATT_COMMAND;
   217aa:	2000      	movs	r0, #0
   217ac:	4770      	bx	lr
		return ATT_COMMAND;
   217ae:	2000      	movs	r0, #0
}
   217b0:	4770      	bx	lr
   217b2:	bf00      	nop
   217b4:	028aaaaa 	.word	0x028aaaaa
   217b8:	01455554 	.word	0x01455554

000217bc <att_cb>:
{
   217bc:	b538      	push	{r3, r4, r5, lr}
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   217be:	68c3      	ldr	r3, [r0, #12]
   217c0:	7818      	ldrb	r0, [r3, #0]
   217c2:	f7ff ffa9 	bl	21718 <att_op_get_type>
	switch (op_type) {
   217c6:	2805      	cmp	r0, #5
   217c8:	d808      	bhi.n	217dc <att_cb+0x20>
   217ca:	e8df f000 	tbb	[pc, r0]
   217ce:	0305      	.short	0x0305
   217d0:	031b0519 	.word	0x031b0519
		return att_req_sent;
   217d4:	480c      	ldr	r0, [pc, #48]	; (21808 <att_cb+0x4c>)
}
   217d6:	bd38      	pop	{r3, r4, r5, pc}
		return att_tx_complete;
   217d8:	480c      	ldr	r0, [pc, #48]	; (2180c <att_cb+0x50>)
   217da:	e7fc      	b.n	217d6 <att_cb+0x1a>
   217dc:	4604      	mov	r4, r0
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   217de:	4d0c      	ldr	r5, [pc, #48]	; (21810 <att_cb+0x54>)
   217e0:	f240 2357 	movw	r3, #599	; 0x257
   217e4:	462a      	mov	r2, r5
   217e6:	490b      	ldr	r1, [pc, #44]	; (21814 <att_cb+0x58>)
   217e8:	480b      	ldr	r0, [pc, #44]	; (21818 <att_cb+0x5c>)
   217ea:	f014 fd53 	bl	36294 <assert_print>
   217ee:	4621      	mov	r1, r4
   217f0:	480a      	ldr	r0, [pc, #40]	; (2181c <att_cb+0x60>)
   217f2:	f014 fd4f 	bl	36294 <assert_print>
   217f6:	f240 2157 	movw	r1, #599	; 0x257
   217fa:	4628      	mov	r0, r5
   217fc:	f014 fd43 	bl	36286 <assert_post_action>
	switch (op_type) {
   21800:	4807      	ldr	r0, [pc, #28]	; (21820 <att_cb+0x64>)
   21802:	e7e8      	b.n	217d6 <att_cb+0x1a>
		return att_cfm_sent;
   21804:	4807      	ldr	r0, [pc, #28]	; (21824 <att_cb+0x68>)
   21806:	e7e6      	b.n	217d6 <att_cb+0x1a>
   21808:	00039ef3 	.word	0x00039ef3
   2180c:	00039ed7 	.word	0x00039ed7
   21810:	00043554 	.word	0x00043554
   21814:	0003f964 	.word	0x0003f964
   21818:	0003f72c 	.word	0x0003f72c
   2181c:	00043584 	.word	0x00043584
   21820:	00039f2b 	.word	0x00039f2b
   21824:	00039f0f 	.word	0x00039f0f

00021828 <tx_meta_data_alloc>:
{
   21828:	b508      	push	{r3, lr}
   2182a:	4602      	mov	r2, r0
   2182c:	460b      	mov	r3, r1
	return z_impl_k_queue_get(queue, timeout);
   2182e:	4802      	ldr	r0, [pc, #8]	; (21838 <tx_meta_data_alloc+0x10>)
   21830:	f010 fa48 	bl	31cc4 <z_impl_k_queue_get>
}
   21834:	bd08      	pop	{r3, pc}
   21836:	bf00      	nop
   21838:	200089fc 	.word	0x200089fc

0002183c <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   2183c:	b510      	push	{r4, lr}
   2183e:	b08e      	sub	sp, #56	; 0x38
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   21840:	7b43      	ldrb	r3, [r0, #13]
   21842:	2b07      	cmp	r3, #7
   21844:	d10f      	bne.n	21866 <att_get+0x2a>
		LOG_WRN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   21846:	2104      	movs	r1, #4
   21848:	f017 fed9 	bl	395fe <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   2184c:	4604      	mov	r4, r0
   2184e:	b380      	cbz	r0, 218b2 <att_get+0x76>
		LOG_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   21850:	2102      	movs	r1, #2
   21852:	3094      	adds	r0, #148	; 0x94
   21854:	f017 ff83 	bl	3975e <atomic_test_bit>
   21858:	2800      	cmp	r0, #0
   2185a:	d050      	beq.n	218fe <att_get+0xc2>
		 "ATT channel not connected");

	return att_chan->att;
   2185c:	f854 4c04 	ldr.w	r4, [r4, #-4]
}
   21860:	4620      	mov	r0, r4
   21862:	b00e      	add	sp, #56	; 0x38
   21864:	bd10      	pop	{r4, pc}
		LOG_WRN("Not connected");
   21866:	4b2e      	ldr	r3, [pc, #184]	; (21920 <att_get+0xe4>)
   21868:	930d      	str	r3, [sp, #52]	; 0x34
   2186a:	2302      	movs	r3, #2
   2186c:	f88d 3004 	strb.w	r3, [sp, #4]
   21870:	2400      	movs	r4, #0
   21872:	f88d 4005 	strb.w	r4, [sp, #5]
   21876:	f88d 4006 	strb.w	r4, [sp, #6]
   2187a:	f88d 4007 	strb.w	r4, [sp, #7]
   2187e:	9a01      	ldr	r2, [sp, #4]
   21880:	920c      	str	r2, [sp, #48]	; 0x30
   21882:	4621      	mov	r1, r4
   21884:	f364 0100 	bfi	r1, r4, #0, #1
   21888:	f364 0141 	bfi	r1, r4, #1, #1
   2188c:	f364 0182 	bfi	r1, r4, #2, #1
   21890:	f364 01c5 	bfi	r1, r4, #3, #3
   21894:	f363 1188 	bfi	r1, r3, #6, #3
   21898:	2308      	movs	r3, #8
   2189a:	f363 2152 	bfi	r1, r3, #9, #10
   2189e:	f364 41de 	bfi	r1, r4, #19, #12
   218a2:	f364 71df 	bfi	r1, r4, #31, #1
   218a6:	4623      	mov	r3, r4
   218a8:	aa0c      	add	r2, sp, #48	; 0x30
   218aa:	481e      	ldr	r0, [pc, #120]	; (21924 <att_get+0xe8>)
   218ac:	f7f5 f84e 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   218b0:	e7d6      	b.n	21860 <att_get+0x24>
		LOG_ERR("Unable to find ATT channel");
   218b2:	4b1d      	ldr	r3, [pc, #116]	; (21928 <att_get+0xec>)
   218b4:	9307      	str	r3, [sp, #28]
   218b6:	2302      	movs	r3, #2
   218b8:	f88d 3004 	strb.w	r3, [sp, #4]
   218bc:	2300      	movs	r3, #0
   218be:	f88d 3005 	strb.w	r3, [sp, #5]
   218c2:	f88d 3006 	strb.w	r3, [sp, #6]
   218c6:	f88d 3007 	strb.w	r3, [sp, #7]
   218ca:	9a01      	ldr	r2, [sp, #4]
   218cc:	9206      	str	r2, [sp, #24]
   218ce:	4619      	mov	r1, r3
   218d0:	f363 0100 	bfi	r1, r3, #0, #1
   218d4:	f363 0141 	bfi	r1, r3, #1, #1
   218d8:	f363 0182 	bfi	r1, r3, #2, #1
   218dc:	f363 01c5 	bfi	r1, r3, #3, #3
   218e0:	2201      	movs	r2, #1
   218e2:	f362 1188 	bfi	r1, r2, #6, #3
   218e6:	2208      	movs	r2, #8
   218e8:	f362 2152 	bfi	r1, r2, #9, #10
   218ec:	f363 41de 	bfi	r1, r3, #19, #12
   218f0:	f363 71df 	bfi	r1, r3, #31, #1
   218f4:	aa06      	add	r2, sp, #24
   218f6:	480b      	ldr	r0, [pc, #44]	; (21924 <att_get+0xe8>)
   218f8:	f7f5 f828 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   218fc:	e7b0      	b.n	21860 <att_get+0x24>
	__ASSERT(atomic_test_bit(att_chan->flags, ATT_CONNECTED),
   218fe:	4c0b      	ldr	r4, [pc, #44]	; (2192c <att_get+0xf0>)
   21900:	f640 332a 	movw	r3, #2858	; 0xb2a
   21904:	4622      	mov	r2, r4
   21906:	490a      	ldr	r1, [pc, #40]	; (21930 <att_get+0xf4>)
   21908:	480a      	ldr	r0, [pc, #40]	; (21934 <att_get+0xf8>)
   2190a:	f014 fcc3 	bl	36294 <assert_print>
   2190e:	480a      	ldr	r0, [pc, #40]	; (21938 <att_get+0xfc>)
   21910:	f014 fcc0 	bl	36294 <assert_print>
   21914:	f640 312a 	movw	r1, #2858	; 0xb2a
   21918:	4620      	mov	r0, r4
   2191a:	f014 fcb4 	bl	36286 <assert_post_action>
   2191e:	bf00      	nop
   21920:	000435a0 	.word	0x000435a0
   21924:	0003f3a0 	.word	0x0003f3a0
   21928:	000435b0 	.word	0x000435b0
   2192c:	00043554 	.word	0x00043554
   21930:	000435cc 	.word	0x000435cc
   21934:	0003f72c 	.word	0x0003f72c
   21938:	000435fc 	.word	0x000435fc

0002193c <att_chan_new>:
	att_chan_mtu_updated(att_chan);
}
#endif /* CONFIG_BT_EATT */

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   2193c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2193e:	b083      	sub	sp, #12
   21940:	af00      	add	r7, sp, #0
   21942:	4605      	mov	r5, r0
   21944:	460e      	mov	r6, r1
	return list->head;
   21946:	6a83      	ldr	r3, [r0, #40]	; 0x28
		.reconfigured = bt_att_reconfigured,
	#endif /* CONFIG_BT_EATT */
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21948:	b103      	cbz	r3, 2194c <att_chan_new+0x10>
   2194a:	3bf0      	subs	r3, #240	; 0xf0
   2194c:	607b      	str	r3, [r7, #4]
	int quota = 0;
   2194e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21950:	e002      	b.n	21958 <att_chan_new+0x1c>
		if (chan->att == att) {
			quota++;
   21952:	3201      	adds	r2, #1
   21954:	e005      	b.n	21962 <att_chan_new+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21956:	607b      	str	r3, [r7, #4]
   21958:	687c      	ldr	r4, [r7, #4]
   2195a:	b16c      	cbz	r4, 21978 <att_chan_new+0x3c>
		if (chan->att == att) {
   2195c:	6823      	ldr	r3, [r4, #0]
   2195e:	42ab      	cmp	r3, r5
   21960:	d0f7      	beq.n	21952 <att_chan_new+0x16>
		}

		if (quota == ATT_CHAN_MAX) {
   21962:	2a01      	cmp	r2, #1
   21964:	d06c      	beq.n	21a40 <att_chan_new+0x104>
Z_GENLIST_PEEK_NEXT(slist, snode)
   21966:	f114 03f0 	adds.w	r3, r4, #240	; 0xf0
   2196a:	d0f4      	beq.n	21956 <att_chan_new+0x1a>
	return node->next;
   2196c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   21970:	2b00      	cmp	r3, #0
   21972:	d0f0      	beq.n	21956 <att_chan_new+0x1a>
   21974:	3bf0      	subs	r3, #240	; 0xf0
   21976:	e7ee      	b.n	21956 <att_chan_new+0x1a>
			LOG_DBG("Maximum number of channels reached: %d", quota);
			return NULL;
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   21978:	2200      	movs	r2, #0
   2197a:	2300      	movs	r3, #0
   2197c:	1d39      	adds	r1, r7, #4
   2197e:	4831      	ldr	r0, [pc, #196]	; (21a44 <att_chan_new+0x108>)
   21980:	f00f fc44 	bl	3120c <k_mem_slab_alloc>
   21984:	b9e8      	cbnz	r0, 219c2 <att_chan_new+0x86>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   21986:	22f8      	movs	r2, #248	; 0xf8
   21988:	2100      	movs	r1, #0
   2198a:	6878      	ldr	r0, [r7, #4]
   2198c:	f016 fd64 	bl	38458 <memset>
	chan->chan.chan.ops = &ops;
   21990:	6878      	ldr	r0, [r7, #4]
   21992:	4b2d      	ldr	r3, [pc, #180]	; (21a48 <att_chan_new+0x10c>)
   21994:	6083      	str	r3, [r0, #8]
	k_fifo_init(&chan->tx_queue);
   21996:	30a0      	adds	r0, #160	; 0xa0
	z_impl_k_queue_init(queue);
   21998:	f01d f813 	bl	3e9c2 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   2199c:	687b      	ldr	r3, [r7, #4]
   2199e:	3398      	adds	r3, #152	; 0x98
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   219a0:	e8d3 2fef 	ldaex	r2, [r3]
   219a4:	e8c3 6fe1 	stlex	r1, r6, [r3]
   219a8:	2900      	cmp	r1, #0
   219aa:	d1f9      	bne.n	219a0 <att_chan_new+0x64>
	chan->att = att;
   219ac:	687b      	ldr	r3, [r7, #4]
   219ae:	601d      	str	r5, [r3, #0]
	att_chan_attach(att, chan);
   219b0:	6879      	ldr	r1, [r7, #4]
   219b2:	4628      	mov	r0, r5
   219b4:	f017 fede 	bl	39774 <att_chan_attach>

	return chan;
   219b8:	687c      	ldr	r4, [r7, #4]
}
   219ba:	4620      	mov	r0, r4
   219bc:	370c      	adds	r7, #12
   219be:	46bd      	mov	sp, r7
   219c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   219c2:	682d      	ldr	r5, [r5, #0]
   219c4:	466e      	mov	r6, sp
   219c6:	b088      	sub	sp, #32
   219c8:	466b      	mov	r3, sp
   219ca:	f113 0210 	adds.w	r2, r3, #16
   219ce:	d031      	beq.n	21a34 <att_chan_new+0xf8>
   219d0:	210c      	movs	r1, #12
   219d2:	b14a      	cbz	r2, 219e8 <att_chan_new+0xac>
   219d4:	4608      	mov	r0, r1
   219d6:	2904      	cmp	r1, #4
   219d8:	dd03      	ble.n	219e2 <att_chan_new+0xa6>
   219da:	f8df c070 	ldr.w	ip, [pc, #112]	; 21a4c <att_chan_new+0x110>
   219de:	f8c3 c014 	str.w	ip, [r3, #20]
   219e2:	2808      	cmp	r0, #8
   219e4:	dd00      	ble.n	219e8 <att_chan_new+0xac>
   219e6:	619d      	str	r5, [r3, #24]
   219e8:	290b      	cmp	r1, #11
   219ea:	dd26      	ble.n	21a3a <att_chan_new+0xfe>
   219ec:	250c      	movs	r5, #12
   219ee:	b13a      	cbz	r2, 21a00 <att_chan_new+0xc4>
   219f0:	2103      	movs	r1, #3
   219f2:	7039      	strb	r1, [r7, #0]
   219f4:	2100      	movs	r1, #0
   219f6:	7079      	strb	r1, [r7, #1]
   219f8:	70b9      	strb	r1, [r7, #2]
   219fa:	70f9      	strb	r1, [r7, #3]
   219fc:	6838      	ldr	r0, [r7, #0]
   219fe:	6118      	str	r0, [r3, #16]
   21a00:	2100      	movs	r1, #0
   21a02:	f36f 0100 	bfc	r1, #0, #1
   21a06:	f36f 0141 	bfc	r1, #1, #1
   21a0a:	f36f 0182 	bfc	r1, #2, #1
   21a0e:	f36f 01c5 	bfc	r1, #3, #3
   21a12:	2302      	movs	r3, #2
   21a14:	f363 1188 	bfi	r1, r3, #6, #3
   21a18:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   21a1c:	f365 2152 	bfi	r1, r5, #9, #10
   21a20:	f36f 41de 	bfc	r1, #19, #12
   21a24:	f36f 71df 	bfc	r1, #31, #1
   21a28:	2300      	movs	r3, #0
   21a2a:	4809      	ldr	r0, [pc, #36]	; (21a50 <att_chan_new+0x114>)
   21a2c:	f7f4 ff8e 	bl	1694c <z_impl_z_log_msg_static_create>
   21a30:	46b5      	mov	sp, r6
		return NULL;
   21a32:	e7c2      	b.n	219ba <att_chan_new+0x7e>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   21a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21a38:	e7cb      	b.n	219d2 <att_chan_new+0x96>
   21a3a:	f06f 051b 	mvn.w	r5, #27
   21a3e:	e7d6      	b.n	219ee <att_chan_new+0xb2>
			return NULL;
   21a40:	2400      	movs	r4, #0
   21a42:	e7ba      	b.n	219ba <att_chan_new+0x7e>
   21a44:	200088bc 	.word	0x200088bc
   21a48:	2000847c 	.word	0x2000847c
   21a4c:	00043618 	.word	0x00043618
   21a50:	0003f3a0 	.word	0x0003f3a0

00021a54 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   21a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   21a56:	b083      	sub	sp, #12
   21a58:	af00      	add	r7, sp, #0
   21a5a:	4606      	mov	r6, r0
   21a5c:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   21a5e:	2200      	movs	r2, #0
   21a60:	2300      	movs	r3, #0
   21a62:	1d39      	adds	r1, r7, #4
   21a64:	4830      	ldr	r0, [pc, #192]	; (21b28 <bt_att_accept+0xd4>)
   21a66:	f00f fbd1 	bl	3120c <k_mem_slab_alloc>
   21a6a:	b9e0      	cbnz	r0, 21aa6 <bt_att_accept+0x52>
   21a6c:	4605      	mov	r5, r0
	return z_impl_z_current_get();
   21a6e:	f012 fb2b 	bl	340c8 <z_impl_z_current_get>
		LOG_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	att_handle_rsp_thread = k_current_get();
   21a72:	4b2e      	ldr	r3, [pc, #184]	; (21b2c <bt_att_accept+0xd8>)
   21a74:	6018      	str	r0, [r3, #0]

	(void)memset(att, 0, sizeof(*att));
   21a76:	2230      	movs	r2, #48	; 0x30
   21a78:	2100      	movs	r1, #0
   21a7a:	6878      	ldr	r0, [r7, #4]
   21a7c:	f016 fcec 	bl	38458 <memset>
	att->conn = conn;
   21a80:	687b      	ldr	r3, [r7, #4]
   21a82:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   21a84:	6878      	ldr	r0, [r7, #4]
	list->head = NULL;
   21a86:	2100      	movs	r1, #0
   21a88:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   21a8a:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   21a8c:	6281      	str	r1, [r0, #40]	; 0x28
	list->tail = NULL;
   21a8e:	62c1      	str	r1, [r0, #44]	; 0x2c
#if defined(CONFIG_BT_EATT)
	k_work_init_delayable(&att->eatt.connection_work,
			      att_enhanced_connection_work_handler);
#endif /* CONFIG_BT_EATT */

	chan = att_chan_new(att, 0);
   21a90:	f7ff ff54 	bl	2193c <att_chan_new>
	if (!chan) {
   21a94:	4603      	mov	r3, r0
   21a96:	2800      	cmp	r0, #0
   21a98:	d043      	beq.n	21b22 <bt_att_accept+0xce>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   21a9a:	3304      	adds	r3, #4
   21a9c:	6023      	str	r3, [r4, #0]

	return 0;
}
   21a9e:	4628      	mov	r0, r5
   21aa0:	370c      	adds	r7, #12
   21aa2:	46bd      	mov	sp, r7
   21aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("No available ATT context for conn %p", conn);
   21aa6:	466d      	mov	r5, sp
   21aa8:	b088      	sub	sp, #32
   21aaa:	466b      	mov	r3, sp
   21aac:	f113 0210 	adds.w	r2, r3, #16
   21ab0:	d031      	beq.n	21b16 <bt_att_accept+0xc2>
   21ab2:	210c      	movs	r1, #12
   21ab4:	b13a      	cbz	r2, 21ac6 <bt_att_accept+0x72>
   21ab6:	4608      	mov	r0, r1
   21ab8:	2904      	cmp	r1, #4
   21aba:	dd01      	ble.n	21ac0 <bt_att_accept+0x6c>
   21abc:	4c1c      	ldr	r4, [pc, #112]	; (21b30 <bt_att_accept+0xdc>)
   21abe:	615c      	str	r4, [r3, #20]
   21ac0:	2808      	cmp	r0, #8
   21ac2:	dd00      	ble.n	21ac6 <bt_att_accept+0x72>
   21ac4:	619e      	str	r6, [r3, #24]
   21ac6:	290b      	cmp	r1, #11
   21ac8:	dd28      	ble.n	21b1c <bt_att_accept+0xc8>
   21aca:	240c      	movs	r4, #12
   21acc:	b13a      	cbz	r2, 21ade <bt_att_accept+0x8a>
   21ace:	2103      	movs	r1, #3
   21ad0:	7039      	strb	r1, [r7, #0]
   21ad2:	2100      	movs	r1, #0
   21ad4:	7079      	strb	r1, [r7, #1]
   21ad6:	70b9      	strb	r1, [r7, #2]
   21ad8:	70f9      	strb	r1, [r7, #3]
   21ada:	6838      	ldr	r0, [r7, #0]
   21adc:	6118      	str	r0, [r3, #16]
   21ade:	2100      	movs	r1, #0
   21ae0:	f36f 0100 	bfc	r1, #0, #1
   21ae4:	f36f 0141 	bfc	r1, #1, #1
   21ae8:	f36f 0182 	bfc	r1, #2, #1
   21aec:	f36f 01c5 	bfc	r1, #3, #3
   21af0:	2301      	movs	r3, #1
   21af2:	f363 1188 	bfi	r1, r3, #6, #3
   21af6:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   21afa:	f364 2152 	bfi	r1, r4, #9, #10
   21afe:	f36f 41de 	bfc	r1, #19, #12
   21b02:	f36f 71df 	bfc	r1, #31, #1
   21b06:	2300      	movs	r3, #0
   21b08:	480a      	ldr	r0, [pc, #40]	; (21b34 <bt_att_accept+0xe0>)
   21b0a:	f7f4 ff1f 	bl	1694c <z_impl_z_log_msg_static_create>
   21b0e:	46ad      	mov	sp, r5
		return -ENOMEM;
   21b10:	f06f 050b 	mvn.w	r5, #11
   21b14:	e7c3      	b.n	21a9e <bt_att_accept+0x4a>
		LOG_ERR("No available ATT context for conn %p", conn);
   21b16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21b1a:	e7cb      	b.n	21ab4 <bt_att_accept+0x60>
   21b1c:	f06f 041b 	mvn.w	r4, #27
   21b20:	e7d4      	b.n	21acc <bt_att_accept+0x78>
		return -ENOMEM;
   21b22:	f06f 050b 	mvn.w	r5, #11
   21b26:	e7ba      	b.n	21a9e <bt_att_accept+0x4a>
   21b28:	2000889c 	.word	0x2000889c
   21b2c:	2000c1fc 	.word	0x2000c1fc
   21b30:	00043640 	.word	0x00043640
   21b34:	0003f3a0 	.word	0x0003f3a0

00021b38 <bt_att_released>:
{
   21b38:	b500      	push	{lr}
   21b3a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   21b3c:	3804      	subs	r0, #4
   21b3e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   21b40:	a901      	add	r1, sp, #4
   21b42:	4803      	ldr	r0, [pc, #12]	; (21b50 <bt_att_released+0x18>)
   21b44:	f00f fbd4 	bl	312f0 <k_mem_slab_free>
}
   21b48:	b003      	add	sp, #12
   21b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   21b4e:	bf00      	nop
   21b50:	200088bc 	.word	0x200088bc

00021b54 <tx_meta_data_free>:
{
   21b54:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   21b56:	b148      	cbz	r0, 21b6c <tx_meta_data_free+0x18>
   21b58:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   21b5a:	2214      	movs	r2, #20
   21b5c:	2100      	movs	r1, #0
   21b5e:	f016 fc7b 	bl	38458 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   21b62:	4621      	mov	r1, r4
   21b64:	4807      	ldr	r0, [pc, #28]	; (21b84 <tx_meta_data_free+0x30>)
   21b66:	f01c ff39 	bl	3e9dc <k_queue_append>
}
   21b6a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(data);
   21b6c:	4c06      	ldr	r4, [pc, #24]	; (21b88 <tx_meta_data_free+0x34>)
   21b6e:	23a6      	movs	r3, #166	; 0xa6
   21b70:	4622      	mov	r2, r4
   21b72:	4906      	ldr	r1, [pc, #24]	; (21b8c <tx_meta_data_free+0x38>)
   21b74:	4806      	ldr	r0, [pc, #24]	; (21b90 <tx_meta_data_free+0x3c>)
   21b76:	f014 fb8d 	bl	36294 <assert_print>
   21b7a:	21a6      	movs	r1, #166	; 0xa6
   21b7c:	4620      	mov	r0, r4
   21b7e:	f014 fb82 	bl	36286 <assert_post_action>
   21b82:	bf00      	nop
   21b84:	200089fc 	.word	0x200089fc
   21b88:	00043554 	.word	0x00043554
   21b8c:	00042c98 	.word	0x00042c98
   21b90:	0003f72c 	.word	0x0003f72c

00021b94 <chan_send>:
{
   21b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21b98:	b08b      	sub	sp, #44	; 0x2c
   21b9a:	4605      	mov	r5, r0
   21b9c:	460c      	mov	r4, r1
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   21b9e:	698f      	ldr	r7, [r1, #24]
	hdr = (void *)buf->data;
   21ba0:	68ce      	ldr	r6, [r1, #12]
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   21ba2:	2102      	movs	r1, #2
   21ba4:	3098      	adds	r0, #152	; 0x98
   21ba6:	f017 fdda 	bl	3975e <atomic_test_bit>
   21baa:	2800      	cmp	r0, #0
   21bac:	d05a      	beq.n	21c64 <chan_send+0xd0>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   21bae:	7833      	ldrb	r3, [r6, #0]
   21bb0:	2bd2      	cmp	r3, #210	; 0xd2
   21bb2:	d023      	beq.n	21bfc <chan_send+0x68>
	state->offset = net_buf_simple_headroom(buf);
   21bb4:	f104 000c 	add.w	r0, r4, #12
   21bb8:	f01a f914 	bl	3bde4 <net_buf_simple_headroom>
   21bbc:	4606      	mov	r6, r0
   21bbe:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   21bc2:	f8b4 8010 	ldrh.w	r8, [r4, #16]
   21bc6:	f8ad 800e 	strh.w	r8, [sp, #14]
	data->att_chan = chan;
   21bca:	603d      	str	r5, [r7, #0]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   21bcc:	682b      	ldr	r3, [r5, #0]
   21bce:	681d      	ldr	r5, [r3, #0]
   21bd0:	4620      	mov	r0, r4
   21bd2:	f7ff fdf3 	bl	217bc <att_cb>
   21bd6:	4603      	mov	r3, r0
   21bd8:	9700      	str	r7, [sp, #0]
   21bda:	4622      	mov	r2, r4
   21bdc:	2104      	movs	r1, #4
   21bde:	4628      	mov	r0, r5
   21be0:	f017 fcb4 	bl	3954c <bt_l2cap_send_cb>
	if (err) {
   21be4:	4681      	mov	r9, r0
   21be6:	b128      	cbz	r0, 21bf4 <chan_send+0x60>
	buf->data = buf->__buf + state->offset;
   21be8:	6963      	ldr	r3, [r4, #20]
   21bea:	fa13 f686 	uxtah	r6, r3, r6
   21bee:	60e6      	str	r6, [r4, #12]
	buf->len = state->len;
   21bf0:	f8a4 8010 	strh.w	r8, [r4, #16]
}
   21bf4:	4648      	mov	r0, r9
   21bf6:	b00b      	add	sp, #44	; 0x2c
   21bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   21bfc:	682b      	ldr	r3, [r5, #0]
   21bfe:	4621      	mov	r1, r4
   21c00:	6818      	ldr	r0, [r3, #0]
   21c02:	f019 feb9 	bl	3b978 <bt_smp_sign>
		if (err) {
   21c06:	4681      	mov	r9, r0
   21c08:	2800      	cmp	r0, #0
   21c0a:	d0d3      	beq.n	21bb4 <chan_send+0x20>
			LOG_ERR("Error signing data");
   21c0c:	4b17      	ldr	r3, [pc, #92]	; (21c6c <chan_send+0xd8>)
   21c0e:	9309      	str	r3, [sp, #36]	; 0x24
   21c10:	2302      	movs	r3, #2
   21c12:	f88d 3008 	strb.w	r3, [sp, #8]
   21c16:	2300      	movs	r3, #0
   21c18:	f88d 3009 	strb.w	r3, [sp, #9]
   21c1c:	f88d 300a 	strb.w	r3, [sp, #10]
   21c20:	f88d 300b 	strb.w	r3, [sp, #11]
   21c24:	9a02      	ldr	r2, [sp, #8]
   21c26:	9208      	str	r2, [sp, #32]
   21c28:	4619      	mov	r1, r3
   21c2a:	f363 0100 	bfi	r1, r3, #0, #1
   21c2e:	f363 0141 	bfi	r1, r3, #1, #1
   21c32:	f363 0182 	bfi	r1, r3, #2, #1
   21c36:	f363 01c5 	bfi	r1, r3, #3, #3
   21c3a:	2201      	movs	r2, #1
   21c3c:	f362 1188 	bfi	r1, r2, #6, #3
   21c40:	2208      	movs	r2, #8
   21c42:	f362 2152 	bfi	r1, r2, #9, #10
   21c46:	f363 41de 	bfi	r1, r3, #19, #12
   21c4a:	f363 71df 	bfi	r1, r3, #31, #1
   21c4e:	aa08      	add	r2, sp, #32
   21c50:	4807      	ldr	r0, [pc, #28]	; (21c70 <chan_send+0xdc>)
   21c52:	f7f4 fe7b 	bl	1694c <z_impl_z_log_msg_static_create>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   21c56:	69a0      	ldr	r0, [r4, #24]
   21c58:	f7ff ff7c 	bl	21b54 <tx_meta_data_free>
			net_buf_unref(buf);
   21c5c:	4620      	mov	r0, r4
   21c5e:	f007 fd21 	bl	296a4 <net_buf_unref>
			return err;
   21c62:	e7c7      	b.n	21bf4 <chan_send+0x60>
		return -EINVAL;
   21c64:	f06f 0915 	mvn.w	r9, #21
   21c68:	e7c4      	b.n	21bf4 <chan_send+0x60>
   21c6a:	bf00      	nop
   21c6c:	00043668 	.word	0x00043668
   21c70:	0003f3a0 	.word	0x0003f3a0

00021c74 <bt_att_chan_req_send>:
{
   21c74:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan);
   21c76:	b140      	cbz	r0, 21c8a <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req);
   21c78:	b1a1      	cbz	r1, 21ca4 <bt_att_chan_req_send+0x30>
	__ASSERT_NO_MSG(req->func);
   21c7a:	684a      	ldr	r2, [r1, #4]
   21c7c:	b1fa      	cbz	r2, 21cbe <bt_att_chan_req_send+0x4a>
	__ASSERT_NO_MSG(!chan->req);
   21c7e:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
   21c82:	bb4a      	cbnz	r2, 21cd8 <bt_att_chan_req_send+0x64>
	return chan_req_send(chan, req);
   21c84:	f017 fda6 	bl	397d4 <chan_req_send>
}
   21c88:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(chan);
   21c8a:	4c1a      	ldr	r4, [pc, #104]	; (21cf4 <bt_att_chan_req_send+0x80>)
   21c8c:	f44f 7346 	mov.w	r3, #792	; 0x318
   21c90:	4622      	mov	r2, r4
   21c92:	4919      	ldr	r1, [pc, #100]	; (21cf8 <bt_att_chan_req_send+0x84>)
   21c94:	4819      	ldr	r0, [pc, #100]	; (21cfc <bt_att_chan_req_send+0x88>)
   21c96:	f014 fafd 	bl	36294 <assert_print>
   21c9a:	f44f 7146 	mov.w	r1, #792	; 0x318
   21c9e:	4620      	mov	r0, r4
   21ca0:	f014 faf1 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(req);
   21ca4:	4c13      	ldr	r4, [pc, #76]	; (21cf4 <bt_att_chan_req_send+0x80>)
   21ca6:	f240 3319 	movw	r3, #793	; 0x319
   21caa:	4622      	mov	r2, r4
   21cac:	4914      	ldr	r1, [pc, #80]	; (21d00 <bt_att_chan_req_send+0x8c>)
   21cae:	4813      	ldr	r0, [pc, #76]	; (21cfc <bt_att_chan_req_send+0x88>)
   21cb0:	f014 faf0 	bl	36294 <assert_print>
   21cb4:	f240 3119 	movw	r1, #793	; 0x319
   21cb8:	4620      	mov	r0, r4
   21cba:	f014 fae4 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   21cbe:	4c0d      	ldr	r4, [pc, #52]	; (21cf4 <bt_att_chan_req_send+0x80>)
   21cc0:	f240 331a 	movw	r3, #794	; 0x31a
   21cc4:	4622      	mov	r2, r4
   21cc6:	490f      	ldr	r1, [pc, #60]	; (21d04 <bt_att_chan_req_send+0x90>)
   21cc8:	480c      	ldr	r0, [pc, #48]	; (21cfc <bt_att_chan_req_send+0x88>)
   21cca:	f014 fae3 	bl	36294 <assert_print>
   21cce:	f240 311a 	movw	r1, #794	; 0x31a
   21cd2:	4620      	mov	r0, r4
   21cd4:	f014 fad7 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   21cd8:	4c06      	ldr	r4, [pc, #24]	; (21cf4 <bt_att_chan_req_send+0x80>)
   21cda:	f240 331b 	movw	r3, #795	; 0x31b
   21cde:	4622      	mov	r2, r4
   21ce0:	4909      	ldr	r1, [pc, #36]	; (21d08 <bt_att_chan_req_send+0x94>)
   21ce2:	4806      	ldr	r0, [pc, #24]	; (21cfc <bt_att_chan_req_send+0x88>)
   21ce4:	f014 fad6 	bl	36294 <assert_print>
   21ce8:	f240 311b 	movw	r1, #795	; 0x31b
   21cec:	4620      	mov	r0, r4
   21cee:	f014 faca 	bl	36286 <assert_post_action>
   21cf2:	bf00      	nop
   21cf4:	00043554 	.word	0x00043554
   21cf8:	0004367c 	.word	0x0004367c
   21cfc:	0003f72c 	.word	0x0003f72c
   21d00:	00043684 	.word	0x00043684
   21d04:	00043688 	.word	0x00043688
   21d08:	00043694 	.word	0x00043694

00021d0c <read_group_cb>:
{
   21d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21d0e:	b085      	sub	sp, #20
   21d10:	4605      	mov	r5, r0
   21d12:	460e      	mov	r6, r1
   21d14:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   21d16:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   21d18:	2300      	movs	r3, #0
   21d1a:	f88d 3008 	strb.w	r3, [sp, #8]
   21d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   21d22:	f8ad 300a 	strh.w	r3, [sp, #10]
   21d26:	a902      	add	r1, sp, #8
   21d28:	6800      	ldr	r0, [r0, #0]
   21d2a:	f016 fc36 	bl	3859a <bt_uuid_cmp>
   21d2e:	b158      	cbz	r0, 21d48 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21d30:	2300      	movs	r3, #0
   21d32:	f88d 300c 	strb.w	r3, [sp, #12]
   21d36:	f642 0301 	movw	r3, #10241	; 0x2801
   21d3a:	f8ad 300e 	strh.w	r3, [sp, #14]
   21d3e:	a903      	add	r1, sp, #12
   21d40:	6828      	ldr	r0, [r5, #0]
   21d42:	f016 fc2a 	bl	3859a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   21d46:	bb28      	cbnz	r0, 21d94 <read_group_cb+0x88>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   21d48:	6861      	ldr	r1, [r4, #4]
   21d4a:	6828      	ldr	r0, [r5, #0]
   21d4c:	f016 fc25 	bl	3859a <bt_uuid_cmp>
   21d50:	bb40      	cbnz	r0, 21da4 <read_group_cb+0x98>
	if (data->rsp->len &&
   21d52:	68e3      	ldr	r3, [r4, #12]
   21d54:	781a      	ldrb	r2, [r3, #0]
   21d56:	b12a      	cbz	r2, 21d64 <read_group_cb+0x58>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   21d58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   21d5a:	68a1      	ldr	r1, [r4, #8]
   21d5c:	8a09      	ldrh	r1, [r1, #16]
   21d5e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   21d60:	4293      	cmp	r3, r2
   21d62:	db24      	blt.n	21dae <read_group_cb+0xa2>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   21d64:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   21d66:	2104      	movs	r1, #4
   21d68:	300c      	adds	r0, #12
   21d6a:	f007 fdb9 	bl	298e0 <net_buf_simple_add>
   21d6e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   21d70:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   21d72:	6923      	ldr	r3, [r4, #16]
   21d74:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   21d76:	9401      	str	r4, [sp, #4]
   21d78:	4b10      	ldr	r3, [pc, #64]	; (21dbc <read_group_cb+0xb0>)
   21d7a:	9300      	str	r3, [sp, #0]
   21d7c:	2300      	movs	r3, #0
   21d7e:	68a2      	ldr	r2, [r4, #8]
   21d80:	4629      	mov	r1, r5
   21d82:	4638      	mov	r0, r7
   21d84:	f017 ff2d 	bl	39be2 <att_chan_read>
	if (read < 0) {
   21d88:	2800      	cmp	r0, #0
   21d8a:	db12      	blt.n	21db2 <read_group_cb+0xa6>
	if (!data->group) {
   21d8c:	6923      	ldr	r3, [r4, #16]
   21d8e:	b193      	cbz	r3, 21db6 <read_group_cb+0xaa>
	return BT_GATT_ITER_CONTINUE;
   21d90:	2001      	movs	r0, #1
   21d92:	e00a      	b.n	21daa <read_group_cb+0x9e>
		if (data->group &&
   21d94:	6923      	ldr	r3, [r4, #16]
   21d96:	b11b      	cbz	r3, 21da0 <read_group_cb+0x94>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   21d98:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   21d9a:	42b2      	cmp	r2, r6
   21d9c:	d200      	bcs.n	21da0 <read_group_cb+0x94>
			data->group->end_handle = sys_cpu_to_le16(handle);
   21d9e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   21da0:	2001      	movs	r0, #1
   21da2:	e002      	b.n	21daa <read_group_cb+0x9e>
		data->group = NULL;
   21da4:	2300      	movs	r3, #0
   21da6:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   21da8:	2001      	movs	r0, #1
}
   21daa:	b005      	add	sp, #20
   21dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   21dae:	2000      	movs	r0, #0
   21db0:	e7fb      	b.n	21daa <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   21db2:	2000      	movs	r0, #0
   21db4:	e7f9      	b.n	21daa <read_group_cb+0x9e>
		return BT_GATT_ITER_STOP;
   21db6:	2000      	movs	r0, #0
   21db8:	e7f7      	b.n	21daa <read_group_cb+0x9e>
   21dba:	bf00      	nop
   21dbc:	00039731 	.word	0x00039731

00021dc0 <read_type_cb>:
{
   21dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21dc4:	b083      	sub	sp, #12
   21dc6:	4606      	mov	r6, r0
   21dc8:	4688      	mov	r8, r1
   21dca:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   21dcc:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   21dce:	687d      	ldr	r5, [r7, #4]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   21dd0:	6851      	ldr	r1, [r2, #4]
   21dd2:	6800      	ldr	r0, [r0, #0]
   21dd4:	f016 fbe1 	bl	3859a <bt_uuid_cmp>
   21dd8:	b120      	cbz	r0, 21de4 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   21dda:	2501      	movs	r5, #1
}
   21ddc:	4628      	mov	r0, r5
   21dde:	b003      	add	sp, #12
   21de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   21de4:	2295      	movs	r2, #149	; 0x95
   21de6:	4631      	mov	r1, r6
   21de8:	4628      	mov	r0, r5
   21dea:	f018 ffec 	bl	3adc6 <bt_gatt_check_perm>
   21dee:	4605      	mov	r5, r0
   21df0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   21df2:	b130      	cbz	r0, 21e02 <read_type_cb+0x42>
		if (data->rsp->len) {
   21df4:	68e3      	ldr	r3, [r4, #12]
   21df6:	781b      	ldrb	r3, [r3, #0]
   21df8:	b10b      	cbz	r3, 21dfe <read_type_cb+0x3e>
			data->err = 0x00;
   21dfa:	2300      	movs	r3, #0
   21dfc:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   21dfe:	2500      	movs	r5, #0
   21e00:	e7ec      	b.n	21ddc <read_type_cb+0x1c>
	data->err = 0x00;
   21e02:	f04f 0900 	mov.w	r9, #0
   21e06:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   21e0a:	68a0      	ldr	r0, [r4, #8]
   21e0c:	f007 fc9a 	bl	29744 <net_buf_frag_last>
   21e10:	2102      	movs	r1, #2
   21e12:	300c      	adds	r0, #12
   21e14:	f007 fd64 	bl	298e0 <net_buf_simple_add>
   21e18:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   21e1a:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   21e1e:	9401      	str	r4, [sp, #4]
   21e20:	4b10      	ldr	r3, [pc, #64]	; (21e64 <read_type_cb+0xa4>)
   21e22:	9300      	str	r3, [sp, #0]
   21e24:	464b      	mov	r3, r9
   21e26:	68a2      	ldr	r2, [r4, #8]
   21e28:	4631      	mov	r1, r6
   21e2a:	4638      	mov	r0, r7
   21e2c:	f017 fed9 	bl	39be2 <att_chan_read>
	if (read < 0) {
   21e30:	2800      	cmp	r0, #0
   21e32:	db06      	blt.n	21e42 <read_type_cb+0x82>
	if (!data->item) {
   21e34:	6923      	ldr	r3, [r4, #16]
   21e36:	2b00      	cmp	r3, #0
   21e38:	d0d0      	beq.n	21ddc <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   21e3a:	8d7d      	ldrh	r5, [r7, #42]	; 0x2a
   21e3c:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   21e3e:	2200      	movs	r2, #0

	while (buf) {
   21e40:	e006      	b.n	21e50 <read_type_cb+0x90>
		data->err = err_to_att(read);
   21e42:	f017 fc59 	bl	396f8 <err_to_att>
   21e46:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   21e48:	e7c8      	b.n	21ddc <read_type_cb+0x1c>
		bytes += buf->len;
   21e4a:	8a19      	ldrh	r1, [r3, #16]
   21e4c:	440a      	add	r2, r1
		buf = buf->frags;
   21e4e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   21e50:	2b00      	cmp	r3, #0
   21e52:	d1fa      	bne.n	21e4a <read_type_cb+0x8a>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   21e54:	1aad      	subs	r5, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   21e56:	68e3      	ldr	r3, [r4, #12]
   21e58:	781b      	ldrb	r3, [r3, #0]
   21e5a:	429d      	cmp	r5, r3
   21e5c:	bf94      	ite	ls
   21e5e:	2500      	movls	r5, #0
   21e60:	2501      	movhi	r5, #1
   21e62:	e7bb      	b.n	21ddc <read_type_cb+0x1c>
   21e64:	00039709 	.word	0x00039709

00021e68 <find_type_cb>:
{
   21e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e6c:	b097      	sub	sp, #92	; 0x5c
   21e6e:	af02      	add	r7, sp, #8
   21e70:	4605      	mov	r5, r0
   21e72:	460e      	mov	r6, r1
   21e74:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   21e76:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   21e7a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   21e7e:	2300      	movs	r3, #0
   21e80:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
   21e84:	f642 0301 	movw	r3, #10241	; 0x2801
   21e88:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
   21e8c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   21e90:	6800      	ldr	r0, [r0, #0]
   21e92:	f016 fb82 	bl	3859a <bt_uuid_cmp>
   21e96:	b930      	cbnz	r0, 21ea6 <find_type_cb+0x3e>
	data->group = NULL;
   21e98:	2300      	movs	r3, #0
   21e9a:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   21e9c:	2001      	movs	r0, #1
}
   21e9e:	3754      	adds	r7, #84	; 0x54
   21ea0:	46bd      	mov	sp, r7
   21ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   21ea6:	2300      	movs	r3, #0
   21ea8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
   21eac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   21eb0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
   21eb4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
   21eb8:	6828      	ldr	r0, [r5, #0]
   21eba:	f016 fb6e 	bl	3859a <bt_uuid_cmp>
   21ebe:	b928      	cbnz	r0, 21ecc <find_type_cb+0x64>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   21ec0:	f8b8 c02a 	ldrh.w	ip, [r8, #42]	; 0x2a
   21ec4:	6860      	ldr	r0, [r4, #4]
   21ec6:	4603      	mov	r3, r0
	size_t bytes = 0;
   21ec8:	2200      	movs	r2, #0
	while (buf) {
   21eca:	e00a      	b.n	21ee2 <find_type_cb+0x7a>
		if (data->group &&
   21ecc:	68a3      	ldr	r3, [r4, #8]
   21ece:	b11b      	cbz	r3, 21ed8 <find_type_cb+0x70>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   21ed0:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   21ed2:	42b2      	cmp	r2, r6
   21ed4:	d200      	bcs.n	21ed8 <find_type_cb+0x70>
			data->group->end_handle = sys_cpu_to_le16(handle);
   21ed6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   21ed8:	2001      	movs	r0, #1
   21eda:	e7e0      	b.n	21e9e <find_type_cb+0x36>
		bytes += buf->len;
   21edc:	8a19      	ldrh	r1, [r3, #16]
   21ede:	440a      	add	r2, r1
		buf = buf->frags;
   21ee0:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   21ee2:	2b00      	cmp	r3, #0
   21ee4:	d1fa      	bne.n	21edc <find_type_cb+0x74>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   21ee6:	ebac 0302 	sub.w	r3, ip, r2
   21eea:	2b03      	cmp	r3, #3
   21eec:	d801      	bhi.n	21ef2 <find_type_cb+0x8a>
		return BT_GATT_ITER_STOP;
   21eee:	2000      	movs	r0, #0
   21ef0:	e7d5      	b.n	21e9e <find_type_cb+0x36>
	frag = net_buf_frag_last(data->buf);
   21ef2:	f007 fc27 	bl	29744 <net_buf_frag_last>
   21ef6:	6078      	str	r0, [r7, #4]
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   21ef8:	f8b8 a02a 	ldrh.w	sl, [r8, #42]	; 0x2a
   21efc:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   21efe:	2200      	movs	r2, #0
	while (buf) {
   21f00:	e002      	b.n	21f08 <find_type_cb+0xa0>
		bytes += buf->len;
   21f02:	8a19      	ldrh	r1, [r3, #16]
   21f04:	440a      	add	r2, r1
		buf = buf->frags;
   21f06:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   21f08:	2b00      	cmp	r3, #0
   21f0a:	d1fa      	bne.n	21f02 <find_type_cb+0x9a>
   21f0c:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   21f10:	687b      	ldr	r3, [r7, #4]
   21f12:	f103 0b0c 	add.w	fp, r3, #12
   21f16:	4658      	mov	r0, fp
   21f18:	f019 ff6f 	bl	3bdfa <net_buf_simple_tailroom>
   21f1c:	4582      	cmp	sl, r0
   21f1e:	d25c      	bcs.n	21fda <find_type_cb+0x172>
   21f20:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   21f24:	6863      	ldr	r3, [r4, #4]
	size_t bytes = 0;
   21f26:	2200      	movs	r2, #0
	while (buf) {
   21f28:	e002      	b.n	21f30 <find_type_cb+0xc8>
		bytes += buf->len;
   21f2a:	8a19      	ldrh	r1, [r3, #16]
   21f2c:	440a      	add	r2, r1
		buf = buf->frags;
   21f2e:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   21f30:	2b00      	cmp	r3, #0
   21f32:	d1fa      	bne.n	21f2a <find_type_cb+0xc2>
   21f34:	1a80      	subs	r0, r0, r2
	if (!len) {
   21f36:	2800      	cmp	r0, #0
   21f38:	d053      	beq.n	21fe2 <find_type_cb+0x17a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   21f3a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   21f3e:	2300      	movs	r3, #0
   21f40:	9300      	str	r3, [sp, #0]
   21f42:	2310      	movs	r3, #16
   21f44:	f107 0238 	add.w	r2, r7, #56	; 0x38
   21f48:	4629      	mov	r1, r5
   21f4a:	4648      	mov	r0, r9
   21f4c:	47c0      	blx	r8
	if (read < 0) {
   21f4e:	1e05      	subs	r5, r0, #0
   21f50:	dba2      	blt.n	21e98 <find_type_cb+0x30>
	if (read != data->value_len) {
   21f52:	7c22      	ldrb	r2, [r4, #16]
   21f54:	42aa      	cmp	r2, r5
   21f56:	f000 80aa 	beq.w	220ae <find_type_cb+0x246>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   21f5a:	68e1      	ldr	r1, [r4, #12]
   21f5c:	f107 0024 	add.w	r0, r7, #36	; 0x24
   21f60:	f016 fb39 	bl	385d6 <bt_uuid_create>
   21f64:	2800      	cmp	r0, #0
   21f66:	d153      	bne.n	22010 <find_type_cb+0x1a8>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   21f68:	7c20      	ldrb	r0, [r4, #16]
   21f6a:	466e      	mov	r6, sp
   21f6c:	b088      	sub	sp, #32
   21f6e:	ab02      	add	r3, sp, #8
   21f70:	f113 0210 	adds.w	r2, r3, #16
   21f74:	d046      	beq.n	22004 <find_type_cb+0x19c>
   21f76:	210c      	movs	r1, #12
   21f78:	b14a      	cbz	r2, 21f8e <find_type_cb+0x126>
   21f7a:	460d      	mov	r5, r1
   21f7c:	2904      	cmp	r1, #4
   21f7e:	dd03      	ble.n	21f88 <find_type_cb+0x120>
   21f80:	f8df c158 	ldr.w	ip, [pc, #344]	; 220dc <find_type_cb+0x274>
   21f84:	f8c3 c014 	str.w	ip, [r3, #20]
   21f88:	2d08      	cmp	r5, #8
   21f8a:	dd00      	ble.n	21f8e <find_type_cb+0x126>
   21f8c:	6198      	str	r0, [r3, #24]
   21f8e:	290b      	cmp	r1, #11
   21f90:	dd3b      	ble.n	2200a <find_type_cb+0x1a2>
   21f92:	250c      	movs	r5, #12
   21f94:	b13a      	cbz	r2, 21fa6 <find_type_cb+0x13e>
   21f96:	2103      	movs	r1, #3
   21f98:	7439      	strb	r1, [r7, #16]
   21f9a:	2100      	movs	r1, #0
   21f9c:	7479      	strb	r1, [r7, #17]
   21f9e:	74b9      	strb	r1, [r7, #18]
   21fa0:	74f9      	strb	r1, [r7, #19]
   21fa2:	6938      	ldr	r0, [r7, #16]
   21fa4:	6118      	str	r0, [r3, #16]
   21fa6:	2100      	movs	r1, #0
   21fa8:	f36f 0100 	bfc	r1, #0, #1
   21fac:	f36f 0141 	bfc	r1, #1, #1
   21fb0:	f36f 0182 	bfc	r1, #2, #1
   21fb4:	f36f 01c5 	bfc	r1, #3, #3
   21fb8:	2302      	movs	r3, #2
   21fba:	f363 1188 	bfi	r1, r3, #6, #3
   21fbe:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   21fc2:	f365 2152 	bfi	r1, r5, #9, #10
   21fc6:	f36f 41de 	bfc	r1, #19, #12
   21fca:	f36f 71df 	bfc	r1, #31, #1
   21fce:	2300      	movs	r3, #0
   21fd0:	4843      	ldr	r0, [pc, #268]	; (220e0 <find_type_cb+0x278>)
   21fd2:	f7f4 fcbb 	bl	1694c <z_impl_z_log_msg_static_create>
   21fd6:	46b5      	mov	sp, r6
			goto skip;
   21fd8:	e75e      	b.n	21e98 <find_type_cb+0x30>
	return net_buf_simple_tailroom(&buf->b);
   21fda:	4658      	mov	r0, fp
   21fdc:	f019 ff0d 	bl	3bdfa <net_buf_simple_tailroom>
   21fe0:	e7a9      	b.n	21f36 <find_type_cb+0xce>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   21fe2:	6863      	ldr	r3, [r4, #4]
   21fe4:	7a98      	ldrb	r0, [r3, #10]
   21fe6:	f007 f901 	bl	291ec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   21fea:	2200      	movs	r2, #0
   21fec:	2300      	movs	r3, #0
   21fee:	f019 fee0 	bl	3bdb2 <net_buf_alloc_fixed>
		if (!frag) {
   21ff2:	6078      	str	r0, [r7, #4]
   21ff4:	2800      	cmp	r0, #0
   21ff6:	f43f af52 	beq.w	21e9e <find_type_cb+0x36>
		net_buf_frag_add(data->buf, frag);
   21ffa:	6879      	ldr	r1, [r7, #4]
   21ffc:	6860      	ldr	r0, [r4, #4]
   21ffe:	f007 fbed 	bl	297dc <net_buf_frag_add>
   22002:	e79a      	b.n	21f3a <find_type_cb+0xd2>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   22004:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22008:	e7b6      	b.n	21f78 <find_type_cb+0x110>
   2200a:	f06f 051b 	mvn.w	r5, #27
   2200e:	e7c1      	b.n	21f94 <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   22010:	b2ea      	uxtb	r2, r5
   22012:	f107 0138 	add.w	r1, r7, #56	; 0x38
   22016:	f107 0010 	add.w	r0, r7, #16
   2201a:	f016 fadc 	bl	385d6 <bt_uuid_create>
   2201e:	2800      	cmp	r0, #0
   22020:	d13d      	bne.n	2209e <find_type_cb+0x236>
			LOG_WRN("Unable to create UUID: size %d", read);
   22022:	466e      	mov	r6, sp
   22024:	b088      	sub	sp, #32
   22026:	ab02      	add	r3, sp, #8
   22028:	f113 0210 	adds.w	r2, r3, #16
   2202c:	d031      	beq.n	22092 <find_type_cb+0x22a>
   2202e:	210c      	movs	r1, #12
   22030:	b14a      	cbz	r2, 22046 <find_type_cb+0x1de>
   22032:	4608      	mov	r0, r1
   22034:	2904      	cmp	r1, #4
   22036:	dd03      	ble.n	22040 <find_type_cb+0x1d8>
   22038:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 220e4 <find_type_cb+0x27c>
   2203c:	f8c3 c014 	str.w	ip, [r3, #20]
   22040:	2808      	cmp	r0, #8
   22042:	dd00      	ble.n	22046 <find_type_cb+0x1de>
   22044:	619d      	str	r5, [r3, #24]
   22046:	290b      	cmp	r1, #11
   22048:	dd26      	ble.n	22098 <find_type_cb+0x230>
   2204a:	250c      	movs	r5, #12
   2204c:	b13a      	cbz	r2, 2205e <find_type_cb+0x1f6>
   2204e:	2103      	movs	r1, #3
   22050:	7339      	strb	r1, [r7, #12]
   22052:	2100      	movs	r1, #0
   22054:	7379      	strb	r1, [r7, #13]
   22056:	73b9      	strb	r1, [r7, #14]
   22058:	73f9      	strb	r1, [r7, #15]
   2205a:	68f8      	ldr	r0, [r7, #12]
   2205c:	6118      	str	r0, [r3, #16]
   2205e:	2100      	movs	r1, #0
   22060:	f36f 0100 	bfc	r1, #0, #1
   22064:	f36f 0141 	bfc	r1, #1, #1
   22068:	f36f 0182 	bfc	r1, #2, #1
   2206c:	f36f 01c5 	bfc	r1, #3, #3
   22070:	2302      	movs	r3, #2
   22072:	f363 1188 	bfi	r1, r3, #6, #3
   22076:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   2207a:	f363 2152 	bfi	r1, r3, #9, #10
   2207e:	f36f 41de 	bfc	r1, #19, #12
   22082:	f36f 71df 	bfc	r1, #31, #1
   22086:	2300      	movs	r3, #0
   22088:	4815      	ldr	r0, [pc, #84]	; (220e0 <find_type_cb+0x278>)
   2208a:	f7f4 fc5f 	bl	1694c <z_impl_z_log_msg_static_create>
   2208e:	46b5      	mov	sp, r6
			goto skip;
   22090:	e702      	b.n	21e98 <find_type_cb+0x30>
			LOG_WRN("Unable to create UUID: size %d", read);
   22092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22096:	e7cb      	b.n	22030 <find_type_cb+0x1c8>
   22098:	f06f 051b 	mvn.w	r5, #27
   2209c:	e7d6      	b.n	2204c <find_type_cb+0x1e4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   2209e:	f107 0110 	add.w	r1, r7, #16
   220a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
   220a6:	f016 fa78 	bl	3859a <bt_uuid_cmp>
   220aa:	b148      	cbz	r0, 220c0 <find_type_cb+0x258>
   220ac:	e6f4      	b.n	21e98 <find_type_cb+0x30>
	} else if (memcmp(data->value, uuid, read)) {
   220ae:	462a      	mov	r2, r5
   220b0:	f107 0138 	add.w	r1, r7, #56	; 0x38
   220b4:	68e0      	ldr	r0, [r4, #12]
   220b6:	f016 f97b 	bl	383b0 <memcmp>
   220ba:	2800      	cmp	r0, #0
   220bc:	f47f aeec 	bne.w	21e98 <find_type_cb+0x30>
	data->err = 0x00;
   220c0:	2300      	movs	r3, #0
   220c2:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   220c4:	2104      	movs	r1, #4
   220c6:	6878      	ldr	r0, [r7, #4]
   220c8:	300c      	adds	r0, #12
   220ca:	f007 fc09 	bl	298e0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   220ce:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   220d0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   220d2:	68a3      	ldr	r3, [r4, #8]
   220d4:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   220d6:	2001      	movs	r0, #1
   220d8:	e6e1      	b.n	21e9e <find_type_cb+0x36>
   220da:	bf00      	nop
   220dc:	000436a0 	.word	0x000436a0
   220e0:	0003f3a0 	.word	0x0003f3a0
   220e4:	000436c0 	.word	0x000436c0

000220e8 <bt_att_connected>:
{
   220e8:	b510      	push	{r4, lr}
   220ea:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   220ec:	3804      	subs	r0, #4
	atomic_set_bit(att_chan->flags, ATT_CONNECTED);
   220ee:	f104 0394 	add.w	r3, r4, #148	; 0x94
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   220f2:	e8d3 1fef 	ldaex	r1, [r3]
   220f6:	f041 0104 	orr.w	r1, r1, #4
   220fa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   220fe:	2a00      	cmp	r2, #0
   22100:	d1f7      	bne.n	220f2 <bt_att_connected+0xa>
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   22102:	2317      	movs	r3, #23
   22104:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   22106:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   22108:	f017 fce1 	bl	39ace <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   2210c:	4904      	ldr	r1, [pc, #16]	; (22120 <bt_att_connected+0x38>)
   2210e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   22112:	f010 fb47 	bl	327a4 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   22116:	6820      	ldr	r0, [r4, #0]
   22118:	f003 fca8 	bl	25a6c <bt_gatt_connected>
}
   2211c:	bd10      	pop	{r4, pc}
   2211e:	bf00      	nop
   22120:	00022ded 	.word	0x00022ded

00022124 <bt_att_chan_create_pdu>:
{
   22124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22128:	b089      	sub	sp, #36	; 0x24
   2212a:	af00      	add	r7, sp, #0
   2212c:	460c      	mov	r4, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   2212e:	1c53      	adds	r3, r2, #1
   22130:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   22132:	428b      	cmp	r3, r1
   22134:	d80b      	bhi.n	2214e <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   22136:	4620      	mov	r0, r4
   22138:	f7ff faee 	bl	21718 <att_op_get_type>
   2213c:	2802      	cmp	r0, #2
   2213e:	d04b      	beq.n	221d8 <bt_att_chan_create_pdu+0xb4>
   22140:	2804      	cmp	r0, #4
   22142:	d049      	beq.n	221d8 <bt_att_chan_create_pdu+0xb4>
		timeout = K_FOREVER;
   22144:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   22148:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   2214c:	e048      	b.n	221e0 <bt_att_chan_create_pdu+0xbc>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   2214e:	466d      	mov	r5, sp
   22150:	b088      	sub	sp, #32
   22152:	466c      	mov	r4, sp
   22154:	f114 0210 	adds.w	r2, r4, #16
   22158:	d012      	beq.n	22180 <bt_att_chan_create_pdu+0x5c>
   2215a:	2010      	movs	r0, #16
   2215c:	b162      	cbz	r2, 22178 <bt_att_chan_create_pdu+0x54>
   2215e:	4606      	mov	r6, r0
   22160:	2804      	cmp	r0, #4
   22162:	dd03      	ble.n	2216c <bt_att_chan_create_pdu+0x48>
   22164:	f8df c17c 	ldr.w	ip, [pc, #380]	; 222e4 <bt_att_chan_create_pdu+0x1c0>
   22168:	f8c4 c014 	str.w	ip, [r4, #20]
   2216c:	2e08      	cmp	r6, #8
   2216e:	dd00      	ble.n	22172 <bt_att_chan_create_pdu+0x4e>
   22170:	61a1      	str	r1, [r4, #24]
   22172:	2e0c      	cmp	r6, #12
   22174:	dd07      	ble.n	22186 <bt_att_chan_create_pdu+0x62>
   22176:	61e3      	str	r3, [r4, #28]
   22178:	280f      	cmp	r0, #15
   2217a:	dd2a      	ble.n	221d2 <bt_att_chan_create_pdu+0xae>
   2217c:	2310      	movs	r3, #16
   2217e:	e004      	b.n	2218a <bt_att_chan_create_pdu+0x66>
   22180:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22184:	e7ea      	b.n	2215c <bt_att_chan_create_pdu+0x38>
   22186:	f06f 031b 	mvn.w	r3, #27
   2218a:	b13a      	cbz	r2, 2219c <bt_att_chan_create_pdu+0x78>
   2218c:	2104      	movs	r1, #4
   2218e:	7139      	strb	r1, [r7, #4]
   22190:	2100      	movs	r1, #0
   22192:	7179      	strb	r1, [r7, #5]
   22194:	71b9      	strb	r1, [r7, #6]
   22196:	71f9      	strb	r1, [r7, #7]
   22198:	6878      	ldr	r0, [r7, #4]
   2219a:	6120      	str	r0, [r4, #16]
   2219c:	2100      	movs	r1, #0
   2219e:	f36f 0100 	bfc	r1, #0, #1
   221a2:	f36f 0141 	bfc	r1, #1, #1
   221a6:	f36f 0182 	bfc	r1, #2, #1
   221aa:	f36f 01c5 	bfc	r1, #3, #3
   221ae:	2002      	movs	r0, #2
   221b0:	f360 1188 	bfi	r1, r0, #6, #3
   221b4:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   221b8:	f363 2152 	bfi	r1, r3, #9, #10
   221bc:	f36f 41de 	bfc	r1, #19, #12
   221c0:	f36f 71df 	bfc	r1, #31, #1
   221c4:	2300      	movs	r3, #0
   221c6:	4848      	ldr	r0, [pc, #288]	; (222e8 <bt_att_chan_create_pdu+0x1c4>)
   221c8:	f7f4 fbc0 	bl	1694c <z_impl_z_log_msg_static_create>
   221cc:	46ad      	mov	sp, r5
		return NULL;
   221ce:	2500      	movs	r5, #0
   221d0:	e01c      	b.n	2220c <bt_att_chan_create_pdu+0xe8>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   221d2:	f06f 031b 	mvn.w	r3, #27
   221d6:	e7d8      	b.n	2218a <bt_att_chan_create_pdu+0x66>
		timeout = BT_ATT_TIMEOUT;
   221d8:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   221dc:	f04f 0900 	mov.w	r9, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   221e0:	4642      	mov	r2, r8
   221e2:	464b      	mov	r3, r9
   221e4:	2100      	movs	r1, #0
   221e6:	4608      	mov	r0, r1
   221e8:	f017 f9ab 	bl	39542 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   221ec:	4605      	mov	r5, r0
   221ee:	b190      	cbz	r0, 22216 <bt_att_chan_create_pdu+0xf2>
	data = tx_meta_data_alloc(timeout);
   221f0:	4640      	mov	r0, r8
   221f2:	4649      	mov	r1, r9
   221f4:	f7ff fb18 	bl	21828 <tx_meta_data_alloc>
	if (!data) {
   221f8:	4606      	mov	r6, r0
   221fa:	2800      	cmp	r0, #0
   221fc:	d04c      	beq.n	22298 <bt_att_chan_create_pdu+0x174>
	bt_att_tx_meta_data(buf) = data;
   221fe:	61a8      	str	r0, [r5, #24]
   22200:	2101      	movs	r1, #1
   22202:	f105 000c 	add.w	r0, r5, #12
   22206:	f007 fb6b 	bl	298e0 <net_buf_simple_add>
	hdr->code = op;
   2220a:	7004      	strb	r4, [r0, #0]
}
   2220c:	4628      	mov	r0, r5
   2220e:	3724      	adds	r7, #36	; 0x24
   22210:	46bd      	mov	sp, r7
   22212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   22216:	466e      	mov	r6, sp
   22218:	b088      	sub	sp, #32
   2221a:	466b      	mov	r3, sp
   2221c:	f113 0210 	adds.w	r2, r3, #16
   22220:	d00f      	beq.n	22242 <bt_att_chan_create_pdu+0x11e>
   22222:	210c      	movs	r1, #12
   22224:	b14a      	cbz	r2, 2223a <bt_att_chan_create_pdu+0x116>
   22226:	4608      	mov	r0, r1
   22228:	2904      	cmp	r1, #4
   2222a:	dd03      	ble.n	22234 <bt_att_chan_create_pdu+0x110>
   2222c:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 222ec <bt_att_chan_create_pdu+0x1c8>
   22230:	f8c3 c014 	str.w	ip, [r3, #20]
   22234:	2808      	cmp	r0, #8
   22236:	dd07      	ble.n	22248 <bt_att_chan_create_pdu+0x124>
   22238:	619c      	str	r4, [r3, #24]
   2223a:	290b      	cmp	r1, #11
   2223c:	dd29      	ble.n	22292 <bt_att_chan_create_pdu+0x16e>
   2223e:	240c      	movs	r4, #12
   22240:	e004      	b.n	2224c <bt_att_chan_create_pdu+0x128>
   22242:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22246:	e7ed      	b.n	22224 <bt_att_chan_create_pdu+0x100>
   22248:	f06f 041b 	mvn.w	r4, #27
   2224c:	b13a      	cbz	r2, 2225e <bt_att_chan_create_pdu+0x13a>
   2224e:	2103      	movs	r1, #3
   22250:	7139      	strb	r1, [r7, #4]
   22252:	2100      	movs	r1, #0
   22254:	7179      	strb	r1, [r7, #5]
   22256:	71b9      	strb	r1, [r7, #6]
   22258:	71f9      	strb	r1, [r7, #7]
   2225a:	6878      	ldr	r0, [r7, #4]
   2225c:	6118      	str	r0, [r3, #16]
   2225e:	2100      	movs	r1, #0
   22260:	f36f 0100 	bfc	r1, #0, #1
   22264:	f36f 0141 	bfc	r1, #1, #1
   22268:	f36f 0182 	bfc	r1, #2, #1
   2226c:	f36f 01c5 	bfc	r1, #3, #3
   22270:	2301      	movs	r3, #1
   22272:	f363 1188 	bfi	r1, r3, #6, #3
   22276:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   2227a:	f363 2152 	bfi	r1, r3, #9, #10
   2227e:	f36f 41de 	bfc	r1, #19, #12
   22282:	f36f 71df 	bfc	r1, #31, #1
   22286:	2300      	movs	r3, #0
   22288:	4817      	ldr	r0, [pc, #92]	; (222e8 <bt_att_chan_create_pdu+0x1c4>)
   2228a:	f7f4 fb5f 	bl	1694c <z_impl_z_log_msg_static_create>
   2228e:	46b5      	mov	sp, r6
		return NULL;
   22290:	e7bc      	b.n	2220c <bt_att_chan_create_pdu+0xe8>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   22292:	f06f 041b 	mvn.w	r4, #27
   22296:	e7d9      	b.n	2224c <bt_att_chan_create_pdu+0x128>
		LOG_WRN("Unable to allocate ATT TX meta");
   22298:	4b15      	ldr	r3, [pc, #84]	; (222f0 <bt_att_chan_create_pdu+0x1cc>)
   2229a:	61fb      	str	r3, [r7, #28]
   2229c:	2202      	movs	r2, #2
   2229e:	713a      	strb	r2, [r7, #4]
   222a0:	2300      	movs	r3, #0
   222a2:	717b      	strb	r3, [r7, #5]
   222a4:	71bb      	strb	r3, [r7, #6]
   222a6:	71fb      	strb	r3, [r7, #7]
   222a8:	6879      	ldr	r1, [r7, #4]
   222aa:	61b9      	str	r1, [r7, #24]
   222ac:	4619      	mov	r1, r3
   222ae:	f363 0100 	bfi	r1, r3, #0, #1
   222b2:	f363 0141 	bfi	r1, r3, #1, #1
   222b6:	f363 0182 	bfi	r1, r3, #2, #1
   222ba:	f363 01c5 	bfi	r1, r3, #3, #3
   222be:	f362 1188 	bfi	r1, r2, #6, #3
   222c2:	2208      	movs	r2, #8
   222c4:	f362 2152 	bfi	r1, r2, #9, #10
   222c8:	f363 41de 	bfi	r1, r3, #19, #12
   222cc:	f363 71df 	bfi	r1, r3, #31, #1
   222d0:	f107 0218 	add.w	r2, r7, #24
   222d4:	4804      	ldr	r0, [pc, #16]	; (222e8 <bt_att_chan_create_pdu+0x1c4>)
   222d6:	f7f4 fb39 	bl	1694c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   222da:	4628      	mov	r0, r5
   222dc:	f007 f9e2 	bl	296a4 <net_buf_unref>
		return NULL;
   222e0:	4635      	mov	r5, r6
   222e2:	e793      	b.n	2220c <bt_att_chan_create_pdu+0xe8>
   222e4:	000436e0 	.word	0x000436e0
   222e8:	0003f3a0 	.word	0x0003f3a0
   222ec:	0004341c 	.word	0x0004341c
   222f0:	00043708 	.word	0x00043708

000222f4 <bt_att_recv>:
{
   222f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   222f8:	b094      	sub	sp, #80	; 0x50
   222fa:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   222fc:	8a0b      	ldrh	r3, [r1, #16]
   222fe:	b173      	cbz	r3, 2231e <bt_att_recv+0x2a>
   22300:	4606      	mov	r6, r0
   22302:	460d      	mov	r5, r1
   22304:	f1a0 0804 	sub.w	r8, r0, #4
	return net_buf_simple_pull_mem(&buf->b, len);
   22308:	2101      	movs	r1, #1
   2230a:	f105 000c 	add.w	r0, r5, #12
   2230e:	f007 faa7 	bl	29860 <net_buf_simple_pull_mem>
   22312:	4604      	mov	r4, r0
	if (!att_chan->att) {
   22314:	f856 3c04 	ldr.w	r3, [r6, #-4]
   22318:	b31b      	cbz	r3, 22362 <bt_att_recv+0x6e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2231a:	2300      	movs	r3, #0
   2231c:	e027      	b.n	2236e <bt_att_recv+0x7a>
		LOG_ERR("Too small ATT PDU received");
   2231e:	4ba4      	ldr	r3, [pc, #656]	; (225b0 <bt_att_recv+0x2bc>)
   22320:	64fb      	str	r3, [r7, #76]	; 0x4c
   22322:	2302      	movs	r3, #2
   22324:	713b      	strb	r3, [r7, #4]
   22326:	2300      	movs	r3, #0
   22328:	717b      	strb	r3, [r7, #5]
   2232a:	71bb      	strb	r3, [r7, #6]
   2232c:	71fb      	strb	r3, [r7, #7]
   2232e:	687a      	ldr	r2, [r7, #4]
   22330:	64ba      	str	r2, [r7, #72]	; 0x48
   22332:	4619      	mov	r1, r3
   22334:	f363 0100 	bfi	r1, r3, #0, #1
   22338:	f363 0141 	bfi	r1, r3, #1, #1
   2233c:	f363 0182 	bfi	r1, r3, #2, #1
   22340:	f363 01c5 	bfi	r1, r3, #3, #3
   22344:	2201      	movs	r2, #1
   22346:	f362 1188 	bfi	r1, r2, #6, #3
   2234a:	2208      	movs	r2, #8
   2234c:	f362 2152 	bfi	r1, r2, #9, #10
   22350:	f363 41de 	bfi	r1, r3, #19, #12
   22354:	f363 71df 	bfi	r1, r3, #31, #1
   22358:	f107 0248 	add.w	r2, r7, #72	; 0x48
   2235c:	4895      	ldr	r0, [pc, #596]	; (225b4 <bt_att_recv+0x2c0>)
   2235e:	f7f4 faf5 	bl	1694c <z_impl_z_log_msg_static_create>
}
   22362:	2000      	movs	r0, #0
   22364:	3750      	adds	r7, #80	; 0x50
   22366:	46bd      	mov	sp, r7
   22368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   2236c:	3301      	adds	r3, #1
   2236e:	2b1d      	cmp	r3, #29
   22370:	d837      	bhi.n	223e2 <bt_att_recv+0xee>
		if (hdr->code == handlers[i].op) {
   22372:	f894 c000 	ldrb.w	ip, [r4]
   22376:	4a90      	ldr	r2, [pc, #576]	; (225b8 <bt_att_recv+0x2c4>)
   22378:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   2237c:	4594      	cmp	ip, r2
   2237e:	d1f5      	bne.n	2236c <bt_att_recv+0x78>
			handler = &handlers[i];
   22380:	4a8d      	ldr	r2, [pc, #564]	; (225b8 <bt_att_recv+0x2c4>)
   22382:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
		if (handler->type == ATT_REQUEST &&
   22386:	f899 a002 	ldrb.w	sl, [r9, #2]
   2238a:	f1ba 0f01 	cmp.w	sl, #1
   2238e:	d07a      	beq.n	22486 <bt_att_recv+0x192>
		} else if (handler->type == ATT_INDICATION &&
   22390:	f1ba 0f05 	cmp.w	sl, #5
   22394:	f000 80a1 	beq.w	224da <bt_att_recv+0x1e6>
	if (buf->len < handler->expect_len) {
   22398:	8a29      	ldrh	r1, [r5, #16]
   2239a:	f899 3001 	ldrb.w	r3, [r9, #1]
   2239e:	4299      	cmp	r1, r3
   223a0:	f080 80ff 	bcs.w	225a2 <bt_att_recv+0x2ae>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   223a4:	f894 c000 	ldrb.w	ip, [r4]
   223a8:	466d      	mov	r5, sp
   223aa:	b088      	sub	sp, #32
   223ac:	466b      	mov	r3, sp
   223ae:	f113 0210 	adds.w	r2, r3, #16
   223b2:	f000 80bc 	beq.w	2252e <bt_att_recv+0x23a>
   223b6:	2010      	movs	r0, #16
   223b8:	b172      	cbz	r2, 223d8 <bt_att_recv+0xe4>
   223ba:	4606      	mov	r6, r0
   223bc:	2804      	cmp	r0, #4
   223be:	dd03      	ble.n	223c8 <bt_att_recv+0xd4>
   223c0:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 225bc <bt_att_recv+0x2c8>
   223c4:	f8c3 e014 	str.w	lr, [r3, #20]
   223c8:	2e08      	cmp	r6, #8
   223ca:	dd00      	ble.n	223ce <bt_att_recv+0xda>
   223cc:	6199      	str	r1, [r3, #24]
   223ce:	2e0c      	cmp	r6, #12
   223d0:	f340 80b0 	ble.w	22534 <bt_att_recv+0x240>
   223d4:	f8c3 c01c 	str.w	ip, [r3, #28]
   223d8:	280f      	cmp	r0, #15
   223da:	f340 80df 	ble.w	2259c <bt_att_recv+0x2a8>
   223de:	2610      	movs	r6, #16
   223e0:	e0aa      	b.n	22538 <bt_att_recv+0x244>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   223e2:	7826      	ldrb	r6, [r4, #0]
   223e4:	466d      	mov	r5, sp
   223e6:	b088      	sub	sp, #32
   223e8:	466b      	mov	r3, sp
   223ea:	f113 0210 	adds.w	r2, r3, #16
   223ee:	d00f      	beq.n	22410 <bt_att_recv+0x11c>
   223f0:	210c      	movs	r1, #12
   223f2:	b14a      	cbz	r2, 22408 <bt_att_recv+0x114>
   223f4:	4608      	mov	r0, r1
   223f6:	2904      	cmp	r1, #4
   223f8:	dd03      	ble.n	22402 <bt_att_recv+0x10e>
   223fa:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 225c0 <bt_att_recv+0x2cc>
   223fe:	f8c3 c014 	str.w	ip, [r3, #20]
   22402:	2808      	cmp	r0, #8
   22404:	dd07      	ble.n	22416 <bt_att_recv+0x122>
   22406:	619e      	str	r6, [r3, #24]
   22408:	290b      	cmp	r1, #11
   2240a:	dd39      	ble.n	22480 <bt_att_recv+0x18c>
   2240c:	260c      	movs	r6, #12
   2240e:	e004      	b.n	2241a <bt_att_recv+0x126>
   22410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22414:	e7ed      	b.n	223f2 <bt_att_recv+0xfe>
   22416:	f06f 061b 	mvn.w	r6, #27
   2241a:	b13a      	cbz	r2, 2242c <bt_att_recv+0x138>
   2241c:	2103      	movs	r1, #3
   2241e:	7139      	strb	r1, [r7, #4]
   22420:	2100      	movs	r1, #0
   22422:	7179      	strb	r1, [r7, #5]
   22424:	71b9      	strb	r1, [r7, #6]
   22426:	71f9      	strb	r1, [r7, #7]
   22428:	6878      	ldr	r0, [r7, #4]
   2242a:	6118      	str	r0, [r3, #16]
   2242c:	2100      	movs	r1, #0
   2242e:	f36f 0100 	bfc	r1, #0, #1
   22432:	f36f 0141 	bfc	r1, #1, #1
   22436:	f36f 0182 	bfc	r1, #2, #1
   2243a:	f36f 01c5 	bfc	r1, #3, #3
   2243e:	2302      	movs	r3, #2
   22440:	f363 1188 	bfi	r1, r3, #6, #3
   22444:	f406 737b 	and.w	r3, r6, #1004	; 0x3ec
   22448:	f363 2152 	bfi	r1, r3, #9, #10
   2244c:	f36f 41de 	bfc	r1, #19, #12
   22450:	f36f 71df 	bfc	r1, #31, #1
   22454:	2300      	movs	r3, #0
   22456:	4857      	ldr	r0, [pc, #348]	; (225b4 <bt_att_recv+0x2c0>)
   22458:	f7f4 fa78 	bl	1694c <z_impl_z_log_msg_static_create>
   2245c:	46ad      	mov	sp, r5
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   2245e:	7824      	ldrb	r4, [r4, #0]
   22460:	4620      	mov	r0, r4
   22462:	f7ff f959 	bl	21718 <att_op_get_type>
   22466:	2800      	cmp	r0, #0
   22468:	f43f af7b 	beq.w	22362 <bt_att_recv+0x6e>
   2246c:	2805      	cmp	r0, #5
   2246e:	f43f af78 	beq.w	22362 <bt_att_recv+0x6e>
			send_err_rsp(att_chan, hdr->code, 0,
   22472:	2306      	movs	r3, #6
   22474:	2200      	movs	r2, #0
   22476:	4621      	mov	r1, r4
   22478:	4640      	mov	r0, r8
   2247a:	f017 fd7e 	bl	39f7a <send_err_rsp>
		return 0;
   2247e:	e770      	b.n	22362 <bt_att_recv+0x6e>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   22480:	f06f 061b 	mvn.w	r6, #27
   22484:	e7c9      	b.n	2241a <bt_att_recv+0x126>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   22486:	2100      	movs	r1, #0
   22488:	f106 0094 	add.w	r0, r6, #148	; 0x94
   2248c:	f017 fd06 	bl	39e9c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   22490:	2800      	cmp	r0, #0
   22492:	f43f af7d 	beq.w	22390 <bt_att_recv+0x9c>
			LOG_WRN("Ignoring unexpected request");
   22496:	4b4b      	ldr	r3, [pc, #300]	; (225c4 <bt_att_recv+0x2d0>)
   22498:	61fb      	str	r3, [r7, #28]
   2249a:	2202      	movs	r2, #2
   2249c:	713a      	strb	r2, [r7, #4]
   2249e:	2300      	movs	r3, #0
   224a0:	717b      	strb	r3, [r7, #5]
   224a2:	71bb      	strb	r3, [r7, #6]
   224a4:	71fb      	strb	r3, [r7, #7]
   224a6:	6879      	ldr	r1, [r7, #4]
   224a8:	61b9      	str	r1, [r7, #24]
   224aa:	4619      	mov	r1, r3
   224ac:	f363 0100 	bfi	r1, r3, #0, #1
   224b0:	f363 0141 	bfi	r1, r3, #1, #1
   224b4:	f363 0182 	bfi	r1, r3, #2, #1
   224b8:	f363 01c5 	bfi	r1, r3, #3, #3
   224bc:	f362 1188 	bfi	r1, r2, #6, #3
   224c0:	2208      	movs	r2, #8
   224c2:	f362 2152 	bfi	r1, r2, #9, #10
   224c6:	f363 41de 	bfi	r1, r3, #19, #12
   224ca:	f363 71df 	bfi	r1, r3, #31, #1
   224ce:	f107 0218 	add.w	r2, r7, #24
   224d2:	4838      	ldr	r0, [pc, #224]	; (225b4 <bt_att_recv+0x2c0>)
   224d4:	f7f4 fa3a 	bl	1694c <z_impl_z_log_msg_static_create>
			return 0;
   224d8:	e743      	b.n	22362 <bt_att_recv+0x6e>
			   atomic_test_and_set_bit(att_chan->flags,
   224da:	2101      	movs	r1, #1
   224dc:	f106 0094 	add.w	r0, r6, #148	; 0x94
   224e0:	f017 fcdc 	bl	39e9c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   224e4:	2800      	cmp	r0, #0
   224e6:	f43f af57 	beq.w	22398 <bt_att_recv+0xa4>
			LOG_WRN("Ignoring unexpected indication");
   224ea:	4b37      	ldr	r3, [pc, #220]	; (225c8 <bt_att_recv+0x2d4>)
   224ec:	637b      	str	r3, [r7, #52]	; 0x34
   224ee:	2202      	movs	r2, #2
   224f0:	713a      	strb	r2, [r7, #4]
   224f2:	2300      	movs	r3, #0
   224f4:	717b      	strb	r3, [r7, #5]
   224f6:	71bb      	strb	r3, [r7, #6]
   224f8:	71fb      	strb	r3, [r7, #7]
   224fa:	6879      	ldr	r1, [r7, #4]
   224fc:	6339      	str	r1, [r7, #48]	; 0x30
   224fe:	4619      	mov	r1, r3
   22500:	f363 0100 	bfi	r1, r3, #0, #1
   22504:	f363 0141 	bfi	r1, r3, #1, #1
   22508:	f363 0182 	bfi	r1, r3, #2, #1
   2250c:	f363 01c5 	bfi	r1, r3, #3, #3
   22510:	f362 1188 	bfi	r1, r2, #6, #3
   22514:	2208      	movs	r2, #8
   22516:	f362 2152 	bfi	r1, r2, #9, #10
   2251a:	f363 41de 	bfi	r1, r3, #19, #12
   2251e:	f363 71df 	bfi	r1, r3, #31, #1
   22522:	f107 0230 	add.w	r2, r7, #48	; 0x30
   22526:	4823      	ldr	r0, [pc, #140]	; (225b4 <bt_att_recv+0x2c0>)
   22528:	f7f4 fa10 	bl	1694c <z_impl_z_log_msg_static_create>
			return 0;
   2252c:	e719      	b.n	22362 <bt_att_recv+0x6e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   2252e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22532:	e741      	b.n	223b8 <bt_att_recv+0xc4>
   22534:	f06f 061b 	mvn.w	r6, #27
   22538:	b13a      	cbz	r2, 2254a <bt_att_recv+0x256>
   2253a:	2104      	movs	r1, #4
   2253c:	7139      	strb	r1, [r7, #4]
   2253e:	2100      	movs	r1, #0
   22540:	7179      	strb	r1, [r7, #5]
   22542:	71b9      	strb	r1, [r7, #6]
   22544:	71f9      	strb	r1, [r7, #7]
   22546:	6878      	ldr	r0, [r7, #4]
   22548:	6118      	str	r0, [r3, #16]
   2254a:	2100      	movs	r1, #0
   2254c:	f36f 0100 	bfc	r1, #0, #1
   22550:	f36f 0141 	bfc	r1, #1, #1
   22554:	f36f 0182 	bfc	r1, #2, #1
   22558:	f36f 01c5 	bfc	r1, #3, #3
   2255c:	2301      	movs	r3, #1
   2255e:	f363 1188 	bfi	r1, r3, #6, #3
   22562:	f406 767d 	and.w	r6, r6, #1012	; 0x3f4
   22566:	f366 2152 	bfi	r1, r6, #9, #10
   2256a:	f36f 41de 	bfc	r1, #19, #12
   2256e:	f36f 71df 	bfc	r1, #31, #1
   22572:	2300      	movs	r3, #0
   22574:	480f      	ldr	r0, [pc, #60]	; (225b4 <bt_att_recv+0x2c0>)
   22576:	f7f4 f9e9 	bl	1694c <z_impl_z_log_msg_static_create>
   2257a:	46ad      	mov	sp, r5
		err = BT_ATT_ERR_INVALID_PDU;
   2257c:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   2257e:	f899 3002 	ldrb.w	r3, [r9, #2]
   22582:	2b01      	cmp	r3, #1
   22584:	f47f aeed 	bne.w	22362 <bt_att_recv+0x6e>
   22588:	2800      	cmp	r0, #0
   2258a:	f43f aeea 	beq.w	22362 <bt_att_recv+0x6e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   2258e:	4603      	mov	r3, r0
   22590:	2200      	movs	r2, #0
   22592:	7821      	ldrb	r1, [r4, #0]
   22594:	4640      	mov	r0, r8
   22596:	f017 fcf0 	bl	39f7a <send_err_rsp>
   2259a:	e6e2      	b.n	22362 <bt_att_recv+0x6e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   2259c:	f06f 061b 	mvn.w	r6, #27
   225a0:	e7ca      	b.n	22538 <bt_att_recv+0x244>
		err = handler->func(att_chan, buf);
   225a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   225a6:	4629      	mov	r1, r5
   225a8:	4640      	mov	r0, r8
   225aa:	4798      	blx	r3
   225ac:	e7e7      	b.n	2257e <bt_att_recv+0x28a>
   225ae:	bf00      	nop
   225b0:	00043728 	.word	0x00043728
   225b4:	0003f3a0 	.word	0x0003f3a0
   225b8:	000437fc 	.word	0x000437fc
   225bc:	0004379c 	.word	0x0004379c
   225c0:	00043744 	.word	0x00043744
   225c4:	00043760 	.word	0x00043760
   225c8:	0004377c 	.word	0x0004377c

000225cc <att_write_rsp>:
{
   225cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   225d0:	b08a      	sub	sp, #40	; 0x28
   225d2:	4604      	mov	r4, r0
   225d4:	4617      	mov	r7, r2
   225d6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   225d8:	6803      	ldr	r3, [r0, #0]
   225da:	4688      	mov	r8, r1
   225dc:	3900      	subs	r1, #0
   225de:	bf18      	it	ne
   225e0:	2101      	movne	r1, #1
   225e2:	6818      	ldr	r0, [r3, #0]
   225e4:	f018 fc84 	bl	3aef0 <bt_gatt_change_aware>
   225e8:	b128      	cbz	r0, 225f6 <att_write_rsp+0x2a>
	if (!handle) {
   225ea:	b975      	cbnz	r5, 2260a <att_write_rsp+0x3e>
		return BT_ATT_ERR_INVALID_HANDLE;
   225ec:	2601      	movs	r6, #1
}
   225ee:	4630      	mov	r0, r6
   225f0:	b00a      	add	sp, #40	; 0x28
   225f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   225f6:	2105      	movs	r1, #5
   225f8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   225fc:	f017 fc4e 	bl	39e9c <atomic_test_and_set_bit>
   22600:	b108      	cbz	r0, 22606 <att_write_rsp+0x3a>
			return 0;
   22602:	2600      	movs	r6, #0
   22604:	e7f3      	b.n	225ee <att_write_rsp+0x22>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   22606:	2612      	movs	r6, #18
   22608:	e7f1      	b.n	225ee <att_write_rsp+0x22>
	(void)memset(&data, 0, sizeof(data));
   2260a:	2218      	movs	r2, #24
   2260c:	2100      	movs	r1, #0
   2260e:	a804      	add	r0, sp, #16
   22610:	f015 ff22 	bl	38458 <memset>
	if (rsp) {
   22614:	b13f      	cbz	r7, 22626 <att_write_rsp+0x5a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   22616:	2200      	movs	r2, #0
   22618:	4639      	mov	r1, r7
   2261a:	4620      	mov	r0, r4
   2261c:	f7ff fd82 	bl	22124 <bt_att_chan_create_pdu>
   22620:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   22622:	2800      	cmp	r0, #0
   22624:	d03e      	beq.n	226a4 <att_write_rsp+0xd8>
	data.conn = chan->att->conn;
   22626:	6823      	ldr	r3, [r4, #0]
   22628:	681b      	ldr	r3, [r3, #0]
   2262a:	9304      	str	r3, [sp, #16]
	data.req = req;
   2262c:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   22630:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   22634:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   22638:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2263a:	9307      	str	r3, [sp, #28]
	data.len = len;
   2263c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   22640:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   22644:	2301      	movs	r3, #1
   22646:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2264a:	ab04      	add	r3, sp, #16
   2264c:	9302      	str	r3, [sp, #8]
   2264e:	4b16      	ldr	r3, [pc, #88]	; (226a8 <att_write_rsp+0xdc>)
   22650:	9301      	str	r3, [sp, #4]
   22652:	2200      	movs	r2, #0
   22654:	9200      	str	r2, [sp, #0]
   22656:	4613      	mov	r3, r2
   22658:	4629      	mov	r1, r5
   2265a:	4628      	mov	r0, r5
   2265c:	f001 ffb2 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   22660:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   22664:	b936      	cbnz	r6, 22674 <att_write_rsp+0xa8>
	if (data.buf) {
   22666:	9905      	ldr	r1, [sp, #20]
   22668:	2900      	cmp	r1, #0
   2266a:	d0c0      	beq.n	225ee <att_write_rsp+0x22>
		bt_att_chan_send_rsp(chan, data.buf);
   2266c:	4620      	mov	r0, r4
   2266e:	f017 fa21 	bl	39ab4 <bt_att_chan_send_rsp>
   22672:	e7bc      	b.n	225ee <att_write_rsp+0x22>
		if (rsp) {
   22674:	b927      	cbnz	r7, 22680 <att_write_rsp+0xb4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   22676:	f1b8 0f18 	cmp.w	r8, #24
   2267a:	d010      	beq.n	2269e <att_write_rsp+0xd2>
   2267c:	2600      	movs	r6, #0
   2267e:	e7b6      	b.n	225ee <att_write_rsp+0x22>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22680:	9b05      	ldr	r3, [sp, #20]
   22682:	6998      	ldr	r0, [r3, #24]
   22684:	f7ff fa66 	bl	21b54 <tx_meta_data_free>
			net_buf_unref(data.buf);
   22688:	9805      	ldr	r0, [sp, #20]
   2268a:	f007 f80b 	bl	296a4 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   2268e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   22692:	462a      	mov	r2, r5
   22694:	4641      	mov	r1, r8
   22696:	4620      	mov	r0, r4
   22698:	f017 fc6f 	bl	39f7a <send_err_rsp>
   2269c:	e7eb      	b.n	22676 <att_write_rsp+0xaa>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   2269e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   226a2:	e7a4      	b.n	225ee <att_write_rsp+0x22>
			return BT_ATT_ERR_UNLIKELY;
   226a4:	260e      	movs	r6, #14
   226a6:	e7a2      	b.n	225ee <att_write_rsp+0x22>
   226a8:	00039b83 	.word	0x00039b83

000226ac <bt_att_create_pdu>:
{
   226ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   226ae:	b083      	sub	sp, #12
   226b0:	af00      	add	r7, sp, #0
   226b2:	460e      	mov	r6, r1
   226b4:	4615      	mov	r5, r2
	att = att_get(conn);
   226b6:	f7ff f8c1 	bl	2183c <att_get>
	if (!att) {
   226ba:	4604      	mov	r4, r0
   226bc:	b300      	cbz	r0, 22700 <bt_att_create_pdu+0x54>
	return list->head;
   226be:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   226c0:	b314      	cbz	r4, 22708 <bt_att_create_pdu+0x5c>
   226c2:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   226c4:	f114 00f0 	adds.w	r0, r4, #240	; 0xf0
   226c8:	d007      	beq.n	226da <bt_att_create_pdu+0x2e>
	return node->next;
   226ca:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   226ce:	b120      	cbz	r0, 226da <bt_att_create_pdu+0x2e>
   226d0:	38f0      	subs	r0, #240	; 0xf0
   226d2:	e002      	b.n	226da <bt_att_create_pdu+0x2e>
   226d4:	4603      	mov	r3, r0
   226d6:	4604      	mov	r4, r0
   226d8:	4618      	mov	r0, r3
   226da:	b1bc      	cbz	r4, 2270c <bt_att_create_pdu+0x60>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   226dc:	1c6b      	adds	r3, r5, #1
   226de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   226e0:	4293      	cmp	r3, r2
   226e2:	d907      	bls.n	226f4 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   226e4:	2800      	cmp	r0, #0
   226e6:	d0f5      	beq.n	226d4 <bt_att_create_pdu+0x28>
   226e8:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   226ec:	2b00      	cmp	r3, #0
   226ee:	d0f2      	beq.n	226d6 <bt_att_create_pdu+0x2a>
   226f0:	3bf0      	subs	r3, #240	; 0xf0
   226f2:	e7f0      	b.n	226d6 <bt_att_create_pdu+0x2a>
		return bt_att_chan_create_pdu(chan, op, len);
   226f4:	462a      	mov	r2, r5
   226f6:	4631      	mov	r1, r6
   226f8:	4620      	mov	r0, r4
   226fa:	f7ff fd13 	bl	22124 <bt_att_chan_create_pdu>
   226fe:	4604      	mov	r4, r0
}
   22700:	4620      	mov	r0, r4
   22702:	370c      	adds	r7, #12
   22704:	46bd      	mov	sp, r7
   22706:	bdf0      	pop	{r4, r5, r6, r7, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   22708:	4620      	mov	r0, r4
   2270a:	e7e6      	b.n	226da <bt_att_create_pdu+0x2e>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   2270c:	3501      	adds	r5, #1
   2270e:	466e      	mov	r6, sp
   22710:	b088      	sub	sp, #32
   22712:	466b      	mov	r3, sp
   22714:	f113 0210 	adds.w	r2, r3, #16
   22718:	d031      	beq.n	2277e <bt_att_create_pdu+0xd2>
   2271a:	210c      	movs	r1, #12
   2271c:	b14a      	cbz	r2, 22732 <bt_att_create_pdu+0x86>
   2271e:	4608      	mov	r0, r1
   22720:	2904      	cmp	r1, #4
   22722:	dd03      	ble.n	2272c <bt_att_create_pdu+0x80>
   22724:	f8df c064 	ldr.w	ip, [pc, #100]	; 2278c <bt_att_create_pdu+0xe0>
   22728:	f8c3 c014 	str.w	ip, [r3, #20]
   2272c:	2808      	cmp	r0, #8
   2272e:	dd00      	ble.n	22732 <bt_att_create_pdu+0x86>
   22730:	619d      	str	r5, [r3, #24]
   22732:	290b      	cmp	r1, #11
   22734:	dd26      	ble.n	22784 <bt_att_create_pdu+0xd8>
   22736:	250c      	movs	r5, #12
   22738:	b13a      	cbz	r2, 2274a <bt_att_create_pdu+0x9e>
   2273a:	2103      	movs	r1, #3
   2273c:	7139      	strb	r1, [r7, #4]
   2273e:	2100      	movs	r1, #0
   22740:	7179      	strb	r1, [r7, #5]
   22742:	71b9      	strb	r1, [r7, #6]
   22744:	71f9      	strb	r1, [r7, #7]
   22746:	6878      	ldr	r0, [r7, #4]
   22748:	6118      	str	r0, [r3, #16]
   2274a:	2100      	movs	r1, #0
   2274c:	f36f 0100 	bfc	r1, #0, #1
   22750:	f36f 0141 	bfc	r1, #1, #1
   22754:	f36f 0182 	bfc	r1, #2, #1
   22758:	f36f 01c5 	bfc	r1, #3, #3
   2275c:	2302      	movs	r3, #2
   2275e:	f363 1188 	bfi	r1, r3, #6, #3
   22762:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   22766:	f363 2152 	bfi	r1, r3, #9, #10
   2276a:	f36f 41de 	bfc	r1, #19, #12
   2276e:	f36f 71df 	bfc	r1, #31, #1
   22772:	2300      	movs	r3, #0
   22774:	4806      	ldr	r0, [pc, #24]	; (22790 <bt_att_create_pdu+0xe4>)
   22776:	f7f4 f8e9 	bl	1694c <z_impl_z_log_msg_static_create>
   2277a:	46b5      	mov	sp, r6
	return NULL;
   2277c:	e7c0      	b.n	22700 <bt_att_create_pdu+0x54>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   2277e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   22782:	e7cb      	b.n	2271c <bt_att_create_pdu+0x70>
   22784:	f06f 051b 	mvn.w	r5, #27
   22788:	e7d6      	b.n	22738 <bt_att_create_pdu+0x8c>
   2278a:	bf00      	nop
   2278c:	000437bc 	.word	0x000437bc
   22790:	0003f3a0 	.word	0x0003f3a0

00022794 <att_read_group_rsp>:
{
   22794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22798:	b08a      	sub	sp, #40	; 0x28
   2279a:	4604      	mov	r4, r0
   2279c:	460f      	mov	r7, r1
   2279e:	4615      	mov	r5, r2
   227a0:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   227a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   227a6:	2214      	movs	r2, #20
   227a8:	2100      	movs	r1, #0
   227aa:	eb0d 0002 	add.w	r0, sp, r2
   227ae:	f015 fe53 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   227b2:	2201      	movs	r2, #1
   227b4:	2111      	movs	r1, #17
   227b6:	4640      	mov	r0, r8
   227b8:	f7ff ff78 	bl	226ac <bt_att_create_pdu>
   227bc:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   227be:	b368      	cbz	r0, 2281c <att_read_group_rsp+0x88>
	data.chan = chan;
   227c0:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   227c2:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   227c4:	2101      	movs	r1, #1
   227c6:	300c      	adds	r0, #12
   227c8:	f007 f88a 	bl	298e0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   227cc:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   227ce:	2200      	movs	r2, #0
   227d0:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   227d2:	9209      	str	r2, [sp, #36]	; 0x24
   227d4:	ab05      	add	r3, sp, #20
   227d6:	9302      	str	r3, [sp, #8]
   227d8:	4b11      	ldr	r3, [pc, #68]	; (22820 <att_read_group_rsp+0x8c>)
   227da:	9301      	str	r3, [sp, #4]
   227dc:	9200      	str	r2, [sp, #0]
   227de:	4613      	mov	r3, r2
   227e0:	4631      	mov	r1, r6
   227e2:	4628      	mov	r0, r5
   227e4:	f001 feee 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   227e8:	9b08      	ldr	r3, [sp, #32]
   227ea:	781e      	ldrb	r6, [r3, #0]
   227ec:	b146      	cbz	r6, 22800 <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   227ee:	9907      	ldr	r1, [sp, #28]
   227f0:	4620      	mov	r0, r4
   227f2:	f017 f95f 	bl	39ab4 <bt_att_chan_send_rsp>
	return 0;
   227f6:	2600      	movs	r6, #0
}
   227f8:	4630      	mov	r0, r6
   227fa:	b00a      	add	sp, #40	; 0x28
   227fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22800:	9b07      	ldr	r3, [sp, #28]
   22802:	6998      	ldr	r0, [r3, #24]
   22804:	f7ff f9a6 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(data.buf);
   22808:	9807      	ldr	r0, [sp, #28]
   2280a:	f006 ff4b 	bl	296a4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   2280e:	230a      	movs	r3, #10
   22810:	462a      	mov	r2, r5
   22812:	2110      	movs	r1, #16
   22814:	4620      	mov	r0, r4
   22816:	f017 fbb0 	bl	39f7a <send_err_rsp>
		return 0;
   2281a:	e7ed      	b.n	227f8 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   2281c:	260e      	movs	r6, #14
   2281e:	e7eb      	b.n	227f8 <att_read_group_rsp+0x64>
   22820:	00021d0d 	.word	0x00021d0d

00022824 <att_read_mult_vl_req>:
{
   22824:	b570      	push	{r4, r5, r6, lr}
   22826:	b088      	sub	sp, #32
   22828:	4606      	mov	r6, r0
   2282a:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   2282c:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   2282e:	2101      	movs	r1, #1
   22830:	4620      	mov	r0, r4
   22832:	f018 fb5d 	bl	3aef0 <bt_gatt_change_aware>
   22836:	b950      	cbnz	r0, 2284e <att_read_mult_vl_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   22838:	2105      	movs	r1, #5
   2283a:	f106 0098 	add.w	r0, r6, #152	; 0x98
   2283e:	f017 fb2d 	bl	39e9c <atomic_test_and_set_bit>
   22842:	b110      	cbz	r0, 2284a <att_read_mult_vl_req+0x26>
			return 0;
   22844:	2000      	movs	r0, #0
}
   22846:	b008      	add	sp, #32
   22848:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   2284a:	2012      	movs	r0, #18
   2284c:	e7fb      	b.n	22846 <att_read_mult_vl_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   2284e:	2210      	movs	r2, #16
   22850:	2100      	movs	r1, #0
   22852:	eb0d 0002 	add.w	r0, sp, r2
   22856:	f015 fdff 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   2285a:	2200      	movs	r2, #0
   2285c:	2121      	movs	r1, #33	; 0x21
   2285e:	4620      	mov	r0, r4
   22860:	f7ff ff24 	bl	226ac <bt_att_create_pdu>
   22864:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   22866:	b378      	cbz	r0, 228c8 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   22868:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   2286a:	8a2b      	ldrh	r3, [r5, #16]
   2286c:	2b01      	cmp	r3, #1
   2286e:	d925      	bls.n	228bc <att_read_mult_vl_req+0x98>
	return net_buf_simple_pull_le16(&buf->b);
   22870:	f105 000c 	add.w	r0, r5, #12
   22874:	f019 faae 	bl	3bdd4 <net_buf_simple_pull_le16>
   22878:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   2287a:	2301      	movs	r3, #1
   2287c:	f88d 301c 	strb.w	r3, [sp, #28]
   22880:	ab04      	add	r3, sp, #16
   22882:	9302      	str	r3, [sp, #8]
   22884:	4b11      	ldr	r3, [pc, #68]	; (228cc <att_read_mult_vl_req+0xa8>)
   22886:	9301      	str	r3, [sp, #4]
   22888:	2200      	movs	r2, #0
   2288a:	9200      	str	r2, [sp, #0]
   2288c:	4613      	mov	r3, r2
   2288e:	4601      	mov	r1, r0
   22890:	f001 fe98 	bl	245c4 <bt_gatt_foreach_attr_type>
		if (data.err) {
   22894:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22898:	2b00      	cmp	r3, #0
   2289a:	d0e6      	beq.n	2286a <att_read_mult_vl_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   2289c:	9b06      	ldr	r3, [sp, #24]
   2289e:	6998      	ldr	r0, [r3, #24]
   228a0:	f7ff f958 	bl	21b54 <tx_meta_data_free>
			net_buf_unref(data.buf);
   228a4:	9806      	ldr	r0, [sp, #24]
   228a6:	f006 fefd 	bl	296a4 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_VL_REQ, handle,
   228aa:	f89d 301c 	ldrb.w	r3, [sp, #28]
   228ae:	4622      	mov	r2, r4
   228b0:	2120      	movs	r1, #32
   228b2:	4630      	mov	r0, r6
   228b4:	f017 fb61 	bl	39f7a <send_err_rsp>
			return 0;
   228b8:	2000      	movs	r0, #0
   228ba:	e7c4      	b.n	22846 <att_read_mult_vl_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   228bc:	9906      	ldr	r1, [sp, #24]
   228be:	4630      	mov	r0, r6
   228c0:	f017 f8f8 	bl	39ab4 <bt_att_chan_send_rsp>
	return 0;
   228c4:	2000      	movs	r0, #0
   228c6:	e7be      	b.n	22846 <att_read_mult_vl_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   228c8:	200e      	movs	r0, #14
   228ca:	e7bc      	b.n	22846 <att_read_mult_vl_req+0x22>
   228cc:	00039d37 	.word	0x00039d37

000228d0 <att_read_mult_req>:
{
   228d0:	b570      	push	{r4, r5, r6, lr}
   228d2:	b088      	sub	sp, #32
   228d4:	4606      	mov	r6, r0
   228d6:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   228d8:	6844      	ldr	r4, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   228da:	2101      	movs	r1, #1
   228dc:	4620      	mov	r0, r4
   228de:	f018 fb07 	bl	3aef0 <bt_gatt_change_aware>
   228e2:	b950      	cbnz	r0, 228fa <att_read_mult_req+0x2a>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   228e4:	2105      	movs	r1, #5
   228e6:	f106 0098 	add.w	r0, r6, #152	; 0x98
   228ea:	f017 fad7 	bl	39e9c <atomic_test_and_set_bit>
   228ee:	b110      	cbz	r0, 228f6 <att_read_mult_req+0x26>
			return 0;
   228f0:	2000      	movs	r0, #0
}
   228f2:	b008      	add	sp, #32
   228f4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   228f6:	2012      	movs	r0, #18
   228f8:	e7fb      	b.n	228f2 <att_read_mult_req+0x22>
	(void)memset(&data, 0, sizeof(data));
   228fa:	2210      	movs	r2, #16
   228fc:	2100      	movs	r1, #0
   228fe:	eb0d 0002 	add.w	r0, sp, r2
   22902:	f015 fda9 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   22906:	2200      	movs	r2, #0
   22908:	210f      	movs	r1, #15
   2290a:	4620      	mov	r0, r4
   2290c:	f7ff fece 	bl	226ac <bt_att_create_pdu>
   22910:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   22912:	b378      	cbz	r0, 22974 <att_read_mult_req+0xa4>
	data.chan = chan;
   22914:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   22916:	8a2b      	ldrh	r3, [r5, #16]
   22918:	2b01      	cmp	r3, #1
   2291a:	d925      	bls.n	22968 <att_read_mult_req+0x98>
   2291c:	f105 000c 	add.w	r0, r5, #12
   22920:	f019 fa58 	bl	3bdd4 <net_buf_simple_pull_le16>
   22924:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   22926:	2301      	movs	r3, #1
   22928:	f88d 301c 	strb.w	r3, [sp, #28]
   2292c:	ab04      	add	r3, sp, #16
   2292e:	9302      	str	r3, [sp, #8]
   22930:	4b11      	ldr	r3, [pc, #68]	; (22978 <att_read_mult_req+0xa8>)
   22932:	9301      	str	r3, [sp, #4]
   22934:	2200      	movs	r2, #0
   22936:	9200      	str	r2, [sp, #0]
   22938:	4613      	mov	r3, r2
   2293a:	4601      	mov	r1, r0
   2293c:	f001 fe42 	bl	245c4 <bt_gatt_foreach_attr_type>
		if (data.err) {
   22940:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22944:	2b00      	cmp	r3, #0
   22946:	d0e6      	beq.n	22916 <att_read_mult_req+0x46>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22948:	9b06      	ldr	r3, [sp, #24]
   2294a:	6998      	ldr	r0, [r3, #24]
   2294c:	f7ff f902 	bl	21b54 <tx_meta_data_free>
			net_buf_unref(data.buf);
   22950:	9806      	ldr	r0, [sp, #24]
   22952:	f006 fea7 	bl	296a4 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   22956:	f89d 301c 	ldrb.w	r3, [sp, #28]
   2295a:	4622      	mov	r2, r4
   2295c:	210e      	movs	r1, #14
   2295e:	4630      	mov	r0, r6
   22960:	f017 fb0b 	bl	39f7a <send_err_rsp>
			return 0;
   22964:	2000      	movs	r0, #0
   22966:	e7c4      	b.n	228f2 <att_read_mult_req+0x22>
	bt_att_chan_send_rsp(chan, data.buf);
   22968:	9906      	ldr	r1, [sp, #24]
   2296a:	4630      	mov	r0, r6
   2296c:	f017 f8a2 	bl	39ab4 <bt_att_chan_send_rsp>
	return 0;
   22970:	2000      	movs	r0, #0
   22972:	e7be      	b.n	228f2 <att_read_mult_req+0x22>
		return BT_ATT_ERR_UNLIKELY;
   22974:	200e      	movs	r0, #14
   22976:	e7bc      	b.n	228f2 <att_read_mult_req+0x22>
   22978:	00039d9d 	.word	0x00039d9d

0002297c <att_read_rsp>:
{
   2297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22980:	b088      	sub	sp, #32
   22982:	4604      	mov	r4, r0
   22984:	4688      	mov	r8, r1
   22986:	4616      	mov	r6, r2
   22988:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   2298a:	6847      	ldr	r7, [r0, #4]
	if (!bt_gatt_change_aware(conn, true)) {
   2298c:	2101      	movs	r1, #1
   2298e:	4638      	mov	r0, r7
   22990:	f018 faae 	bl	3aef0 <bt_gatt_change_aware>
   22994:	b128      	cbz	r0, 229a2 <att_read_rsp+0x26>
	if (!handle) {
   22996:	b975      	cbnz	r5, 229b6 <att_read_rsp+0x3a>
		return BT_ATT_ERR_INVALID_HANDLE;
   22998:	2601      	movs	r6, #1
}
   2299a:	4630      	mov	r0, r6
   2299c:	b008      	add	sp, #32
   2299e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   229a2:	2105      	movs	r1, #5
   229a4:	f104 0098 	add.w	r0, r4, #152	; 0x98
   229a8:	f017 fa78 	bl	39e9c <atomic_test_and_set_bit>
   229ac:	b108      	cbz	r0, 229b2 <att_read_rsp+0x36>
			return 0;
   229ae:	2600      	movs	r6, #0
   229b0:	e7f3      	b.n	2299a <att_read_rsp+0x1e>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   229b2:	2612      	movs	r6, #18
   229b4:	e7f1      	b.n	2299a <att_read_rsp+0x1e>
	(void)memset(&data, 0, sizeof(data));
   229b6:	2210      	movs	r2, #16
   229b8:	2100      	movs	r1, #0
   229ba:	eb0d 0002 	add.w	r0, sp, r2
   229be:	f015 fd4b 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   229c2:	2200      	movs	r2, #0
   229c4:	4631      	mov	r1, r6
   229c6:	4638      	mov	r0, r7
   229c8:	f7ff fe70 	bl	226ac <bt_att_create_pdu>
   229cc:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   229ce:	b350      	cbz	r0, 22a26 <att_read_rsp+0xaa>
	data.chan = chan;
   229d0:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   229d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   229d6:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   229da:	2301      	movs	r3, #1
   229dc:	f88d 301c 	strb.w	r3, [sp, #28]
   229e0:	ab04      	add	r3, sp, #16
   229e2:	9302      	str	r3, [sp, #8]
   229e4:	4b11      	ldr	r3, [pc, #68]	; (22a2c <att_read_rsp+0xb0>)
   229e6:	9301      	str	r3, [sp, #4]
   229e8:	2200      	movs	r2, #0
   229ea:	9200      	str	r2, [sp, #0]
   229ec:	4613      	mov	r3, r2
   229ee:	4629      	mov	r1, r5
   229f0:	4628      	mov	r0, r5
   229f2:	f001 fde7 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   229f6:	f89d 601c 	ldrb.w	r6, [sp, #28]
   229fa:	b926      	cbnz	r6, 22a06 <att_read_rsp+0x8a>
	bt_att_chan_send_rsp(chan, data.buf);
   229fc:	9906      	ldr	r1, [sp, #24]
   229fe:	4620      	mov	r0, r4
   22a00:	f017 f858 	bl	39ab4 <bt_att_chan_send_rsp>
	return 0;
   22a04:	e7c9      	b.n	2299a <att_read_rsp+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22a06:	9b06      	ldr	r3, [sp, #24]
   22a08:	6998      	ldr	r0, [r3, #24]
   22a0a:	f7ff f8a3 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(data.buf);
   22a0e:	9806      	ldr	r0, [sp, #24]
   22a10:	f006 fe48 	bl	296a4 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   22a14:	f89d 301c 	ldrb.w	r3, [sp, #28]
   22a18:	462a      	mov	r2, r5
   22a1a:	4641      	mov	r1, r8
   22a1c:	4620      	mov	r0, r4
   22a1e:	f017 faac 	bl	39f7a <send_err_rsp>
		return 0;
   22a22:	2600      	movs	r6, #0
   22a24:	e7b9      	b.n	2299a <att_read_rsp+0x1e>
		return BT_ATT_ERR_UNLIKELY;
   22a26:	260e      	movs	r6, #14
   22a28:	e7b7      	b.n	2299a <att_read_rsp+0x1e>
   22a2a:	bf00      	nop
   22a2c:	00039d9d 	.word	0x00039d9d

00022a30 <att_read_type_rsp>:
{
   22a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a34:	b08a      	sub	sp, #40	; 0x28
   22a36:	4604      	mov	r4, r0
   22a38:	460f      	mov	r7, r1
   22a3a:	4615      	mov	r5, r2
   22a3c:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   22a3e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   22a42:	2218      	movs	r2, #24
   22a44:	2100      	movs	r1, #0
   22a46:	a804      	add	r0, sp, #16
   22a48:	f015 fd06 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   22a4c:	2201      	movs	r2, #1
   22a4e:	2109      	movs	r1, #9
   22a50:	4640      	mov	r0, r8
   22a52:	f7ff fe2b 	bl	226ac <bt_att_create_pdu>
   22a56:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   22a58:	b380      	cbz	r0, 22abc <att_read_type_rsp+0x8c>
	data.chan = chan;
   22a5a:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   22a5c:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   22a5e:	2101      	movs	r1, #1
   22a60:	300c      	adds	r0, #12
   22a62:	f006 ff3d 	bl	298e0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   22a66:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   22a68:	2200      	movs	r2, #0
   22a6a:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   22a6c:	230a      	movs	r3, #10
   22a6e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   22a72:	ab04      	add	r3, sp, #16
   22a74:	9302      	str	r3, [sp, #8]
   22a76:	4b12      	ldr	r3, [pc, #72]	; (22ac0 <att_read_type_rsp+0x90>)
   22a78:	9301      	str	r3, [sp, #4]
   22a7a:	9200      	str	r2, [sp, #0]
   22a7c:	4613      	mov	r3, r2
   22a7e:	4631      	mov	r1, r6
   22a80:	4628      	mov	r0, r5
   22a82:	f001 fd9f 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   22a86:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   22a8a:	b93e      	cbnz	r6, 22a9c <att_read_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   22a8c:	9906      	ldr	r1, [sp, #24]
   22a8e:	4620      	mov	r0, r4
   22a90:	f017 f810 	bl	39ab4 <bt_att_chan_send_rsp>
}
   22a94:	4630      	mov	r0, r6
   22a96:	b00a      	add	sp, #40	; 0x28
   22a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22a9c:	9b06      	ldr	r3, [sp, #24]
   22a9e:	6998      	ldr	r0, [r3, #24]
   22aa0:	f7ff f858 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(data.buf);
   22aa4:	9806      	ldr	r0, [sp, #24]
   22aa6:	f006 fdfd 	bl	296a4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   22aaa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   22aae:	462a      	mov	r2, r5
   22ab0:	2108      	movs	r1, #8
   22ab2:	4620      	mov	r0, r4
   22ab4:	f017 fa61 	bl	39f7a <send_err_rsp>
		return 0;
   22ab8:	2600      	movs	r6, #0
   22aba:	e7eb      	b.n	22a94 <att_read_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   22abc:	260e      	movs	r6, #14
   22abe:	e7e9      	b.n	22a94 <att_read_type_rsp+0x64>
   22ac0:	00021dc1 	.word	0x00021dc1

00022ac4 <att_find_type_rsp>:
{
   22ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ac8:	b08a      	sub	sp, #40	; 0x28
   22aca:	4604      	mov	r4, r0
   22acc:	460d      	mov	r5, r1
   22ace:	4616      	mov	r6, r2
   22ad0:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   22ad2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   22ad6:	2214      	movs	r2, #20
   22ad8:	2100      	movs	r1, #0
   22ada:	eb0d 0002 	add.w	r0, sp, r2
   22ade:	f015 fcbb 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   22ae2:	2200      	movs	r2, #0
   22ae4:	2107      	movs	r1, #7
   22ae6:	4640      	mov	r0, r8
   22ae8:	f7ff fde0 	bl	226ac <bt_att_create_pdu>
   22aec:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   22aee:	b378      	cbz	r0, 22b50 <att_find_type_rsp+0x8c>
	data.chan = chan;
   22af0:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   22af2:	2200      	movs	r2, #0
   22af4:	9207      	str	r2, [sp, #28]
	data.value = value;
   22af6:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   22af8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   22afc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   22b00:	230a      	movs	r3, #10
   22b02:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   22b06:	ab05      	add	r3, sp, #20
   22b08:	9302      	str	r3, [sp, #8]
   22b0a:	4b12      	ldr	r3, [pc, #72]	; (22b54 <att_find_type_rsp+0x90>)
   22b0c:	9301      	str	r3, [sp, #4]
   22b0e:	9200      	str	r2, [sp, #0]
   22b10:	4613      	mov	r3, r2
   22b12:	4631      	mov	r1, r6
   22b14:	4628      	mov	r0, r5
   22b16:	f001 fd55 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (data.err) {
   22b1a:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   22b1e:	b93e      	cbnz	r6, 22b30 <att_find_type_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf);
   22b20:	9906      	ldr	r1, [sp, #24]
   22b22:	4620      	mov	r0, r4
   22b24:	f016 ffc6 	bl	39ab4 <bt_att_chan_send_rsp>
}
   22b28:	4630      	mov	r0, r6
   22b2a:	b00a      	add	sp, #40	; 0x28
   22b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22b30:	9b06      	ldr	r3, [sp, #24]
   22b32:	6998      	ldr	r0, [r3, #24]
   22b34:	f7ff f80e 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(data.buf);
   22b38:	9806      	ldr	r0, [sp, #24]
   22b3a:	f006 fdb3 	bl	296a4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   22b3e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   22b42:	462a      	mov	r2, r5
   22b44:	2106      	movs	r1, #6
   22b46:	4620      	mov	r0, r4
   22b48:	f017 fa17 	bl	39f7a <send_err_rsp>
		return 0;
   22b4c:	2600      	movs	r6, #0
   22b4e:	e7eb      	b.n	22b28 <att_find_type_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   22b50:	260e      	movs	r6, #14
   22b52:	e7e9      	b.n	22b28 <att_find_type_rsp+0x64>
   22b54:	00021e69 	.word	0x00021e69

00022b58 <att_find_info_rsp>:
{
   22b58:	b5f0      	push	{r4, r5, r6, r7, lr}
   22b5a:	b089      	sub	sp, #36	; 0x24
   22b5c:	4604      	mov	r4, r0
   22b5e:	460f      	mov	r7, r1
   22b60:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   22b62:	6845      	ldr	r5, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   22b64:	2210      	movs	r2, #16
   22b66:	2100      	movs	r1, #0
   22b68:	eb0d 0002 	add.w	r0, sp, r2
   22b6c:	f015 fc74 	bl	38458 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   22b70:	2200      	movs	r2, #0
   22b72:	2105      	movs	r1, #5
   22b74:	4628      	mov	r0, r5
   22b76:	f7ff fd99 	bl	226ac <bt_att_create_pdu>
   22b7a:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   22b7c:	b318      	cbz	r0, 22bc6 <att_find_info_rsp+0x6e>
	data.chan = chan;
   22b7e:	9404      	str	r4, [sp, #16]
   22b80:	ab04      	add	r3, sp, #16
   22b82:	9302      	str	r3, [sp, #8]
   22b84:	4b11      	ldr	r3, [pc, #68]	; (22bcc <att_find_info_rsp+0x74>)
   22b86:	9301      	str	r3, [sp, #4]
   22b88:	2200      	movs	r2, #0
   22b8a:	9200      	str	r2, [sp, #0]
   22b8c:	4613      	mov	r3, r2
   22b8e:	4631      	mov	r1, r6
   22b90:	4638      	mov	r0, r7
   22b92:	f001 fd17 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   22b96:	9b06      	ldr	r3, [sp, #24]
   22b98:	b133      	cbz	r3, 22ba8 <att_find_info_rsp+0x50>
	bt_att_chan_send_rsp(chan, data.buf);
   22b9a:	9905      	ldr	r1, [sp, #20]
   22b9c:	4620      	mov	r0, r4
   22b9e:	f016 ff89 	bl	39ab4 <bt_att_chan_send_rsp>
	return 0;
   22ba2:	2000      	movs	r0, #0
}
   22ba4:	b009      	add	sp, #36	; 0x24
   22ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   22ba8:	9b05      	ldr	r3, [sp, #20]
   22baa:	6998      	ldr	r0, [r3, #24]
   22bac:	f7fe ffd2 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(data.buf);
   22bb0:	9805      	ldr	r0, [sp, #20]
   22bb2:	f006 fd77 	bl	296a4 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   22bb6:	230a      	movs	r3, #10
   22bb8:	463a      	mov	r2, r7
   22bba:	2104      	movs	r1, #4
   22bbc:	4620      	mov	r0, r4
   22bbe:	f017 f9dc 	bl	39f7a <send_err_rsp>
		return 0;
   22bc2:	2000      	movs	r0, #0
   22bc4:	e7ee      	b.n	22ba4 <att_find_info_rsp+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   22bc6:	200e      	movs	r0, #14
   22bc8:	e7ec      	b.n	22ba4 <att_find_info_rsp+0x4c>
   22bca:	bf00      	nop
   22bcc:	00039de5 	.word	0x00039de5

00022bd0 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   22bd0:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   22bd2:	4809      	ldr	r0, [pc, #36]	; (22bf8 <bt_att_init+0x28>)
   22bd4:	f01b fef5 	bl	3e9c2 <z_impl_k_queue_init>
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   22bd8:	2400      	movs	r4, #0
   22bda:	e008      	b.n	22bee <bt_att_init+0x1e>
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   22bdc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   22be0:	0093      	lsls	r3, r2, #2
   22be2:	4906      	ldr	r1, [pc, #24]	; (22bfc <bt_att_init+0x2c>)
   22be4:	4419      	add	r1, r3
   22be6:	4804      	ldr	r0, [pc, #16]	; (22bf8 <bt_att_init+0x28>)
   22be8:	f01b fef8 	bl	3e9dc <k_queue_append>
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
   22bec:	3401      	adds	r4, #1
   22bee:	2c02      	cmp	r4, #2
   22bf0:	d9f4      	bls.n	22bdc <bt_att_init+0xc>
	}

	bt_gatt_init();
   22bf2:	f001 fc53 	bl	2449c <bt_gatt_init>

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   22bf6:	bd10      	pop	{r4, pc}
   22bf8:	200089fc 	.word	0x200089fc
   22bfc:	2000c1c0 	.word	0x2000c1c0

00022c00 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   22c00:	b530      	push	{r4, r5, lr}
   22c02:	b083      	sub	sp, #12
   22c04:	4605      	mov	r5, r0
   22c06:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   22c08:	2300      	movs	r3, #0
   22c0a:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   22c0c:	f011 fa5c 	bl	340c8 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   22c10:	4b0b      	ldr	r3, [pc, #44]	; (22c40 <bt_att_req_alloc+0x40>)
   22c12:	681b      	ldr	r3, [r3, #0]
   22c14:	4283      	cmp	r3, r0
   22c16:	d00e      	beq.n	22c36 <bt_att_req_alloc+0x36>
		 */
		timeout = K_NO_WAIT;
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   22c18:	462a      	mov	r2, r5
   22c1a:	4623      	mov	r3, r4
   22c1c:	a901      	add	r1, sp, #4
   22c1e:	4809      	ldr	r0, [pc, #36]	; (22c44 <bt_att_req_alloc+0x44>)
   22c20:	f00e faf4 	bl	3120c <k_mem_slab_alloc>
   22c24:	b950      	cbnz	r0, 22c3c <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   22c26:	221c      	movs	r2, #28
   22c28:	2100      	movs	r1, #0
   22c2a:	9801      	ldr	r0, [sp, #4]
   22c2c:	f015 fc14 	bl	38458 <memset>

	return req;
   22c30:	9801      	ldr	r0, [sp, #4]
}
   22c32:	b003      	add	sp, #12
   22c34:	bd30      	pop	{r4, r5, pc}
		timeout = K_NO_WAIT;
   22c36:	2500      	movs	r5, #0
   22c38:	462c      	mov	r4, r5
   22c3a:	e7ed      	b.n	22c18 <bt_att_req_alloc+0x18>
		return NULL;
   22c3c:	2000      	movs	r0, #0
   22c3e:	e7f8      	b.n	22c32 <bt_att_req_alloc+0x32>
   22c40:	2000c1fc 	.word	0x2000c1fc
   22c44:	200088dc 	.word	0x200088dc

00022c48 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   22c48:	b500      	push	{lr}
   22c4a:	b083      	sub	sp, #12
   22c4c:	9001      	str	r0, [sp, #4]
	LOG_DBG("req %p", req);

	if (req->buf) {
   22c4e:	6883      	ldr	r3, [r0, #8]
   22c50:	b14b      	cbz	r3, 22c66 <bt_att_req_free+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   22c52:	6998      	ldr	r0, [r3, #24]
   22c54:	f7fe ff7e 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(req->buf);
   22c58:	9b01      	ldr	r3, [sp, #4]
   22c5a:	6898      	ldr	r0, [r3, #8]
   22c5c:	f006 fd22 	bl	296a4 <net_buf_unref>
		req->buf = NULL;
   22c60:	9b01      	ldr	r3, [sp, #4]
   22c62:	2200      	movs	r2, #0
   22c64:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   22c66:	a901      	add	r1, sp, #4
   22c68:	4802      	ldr	r0, [pc, #8]	; (22c74 <bt_att_req_free+0x2c>)
   22c6a:	f00e fb41 	bl	312f0 <k_mem_slab_free>
}
   22c6e:	b003      	add	sp, #12
   22c70:	f85d fb04 	ldr.w	pc, [sp], #4
   22c74:	200088dc 	.word	0x200088dc

00022c78 <att_handle_rsp>:
{
   22c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22c7c:	b08a      	sub	sp, #40	; 0x28
   22c7e:	4604      	mov	r4, r0
   22c80:	460f      	mov	r7, r1
   22c82:	4691      	mov	r9, r2
   22c84:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   22c86:	30c0      	adds	r0, #192	; 0xc0
   22c88:	f00f fef0 	bl	32a6c <k_work_cancel_delayable>
	if (!chan->req) {
   22c8c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   22c90:	b1f8      	cbz	r0, 22cd2 <att_handle_rsp+0x5a>
	if (chan->req == &cancel) {
   22c92:	4b25      	ldr	r3, [pc, #148]	; (22d28 <att_handle_rsp+0xb0>)
   22c94:	4298      	cmp	r0, r3
   22c96:	d042      	beq.n	22d1e <att_handle_rsp+0xa6>
	func = chan->req->func;
   22c98:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   22c9a:	f04f 0a00 	mov.w	sl, #0
   22c9e:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   22ca2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
   22ca6:	f8d0 8018 	ldr.w	r8, [r0, #24]
	bt_att_req_free(chan->req);
   22caa:	f7ff ffcd 	bl	22c48 <bt_att_req_free>
	chan->req = NULL;
   22cae:	f8c4 a09c 	str.w	sl, [r4, #156]	; 0x9c
	att_req_send_process(chan->att);
   22cb2:	6820      	ldr	r0, [r4, #0]
   22cb4:	f016 fdd7 	bl	39866 <att_req_send_process>
	if (func) {
   22cb8:	b13d      	cbz	r5, 22cca <att_handle_rsp+0x52>
		func(chan->att->conn, err, pdu, len, params);
   22cba:	6823      	ldr	r3, [r4, #0]
   22cbc:	6818      	ldr	r0, [r3, #0]
   22cbe:	f8cd 8000 	str.w	r8, [sp]
   22cc2:	464b      	mov	r3, r9
   22cc4:	463a      	mov	r2, r7
   22cc6:	4631      	mov	r1, r6
   22cc8:	47a8      	blx	r5
}
   22cca:	2000      	movs	r0, #0
   22ccc:	b00a      	add	sp, #40	; 0x28
   22cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("No pending ATT request");
   22cd2:	4b16      	ldr	r3, [pc, #88]	; (22d2c <att_handle_rsp+0xb4>)
   22cd4:	9309      	str	r3, [sp, #36]	; 0x24
   22cd6:	2302      	movs	r3, #2
   22cd8:	f88d 300c 	strb.w	r3, [sp, #12]
   22cdc:	2500      	movs	r5, #0
   22cde:	f88d 500d 	strb.w	r5, [sp, #13]
   22ce2:	f88d 500e 	strb.w	r5, [sp, #14]
   22ce6:	f88d 500f 	strb.w	r5, [sp, #15]
   22cea:	9a03      	ldr	r2, [sp, #12]
   22cec:	9208      	str	r2, [sp, #32]
   22cee:	4629      	mov	r1, r5
   22cf0:	f365 0100 	bfi	r1, r5, #0, #1
   22cf4:	f365 0141 	bfi	r1, r5, #1, #1
   22cf8:	f365 0182 	bfi	r1, r5, #2, #1
   22cfc:	f365 01c5 	bfi	r1, r5, #3, #3
   22d00:	f363 1188 	bfi	r1, r3, #6, #3
   22d04:	2308      	movs	r3, #8
   22d06:	f363 2152 	bfi	r1, r3, #9, #10
   22d0a:	f365 41de 	bfi	r1, r5, #19, #12
   22d0e:	f365 71df 	bfi	r1, r5, #31, #1
   22d12:	462b      	mov	r3, r5
   22d14:	aa08      	add	r2, sp, #32
   22d16:	4806      	ldr	r0, [pc, #24]	; (22d30 <att_handle_rsp+0xb8>)
   22d18:	f7f3 fe18 	bl	1694c <z_impl_z_log_msg_static_create>
		goto process;
   22d1c:	e7c9      	b.n	22cb2 <att_handle_rsp+0x3a>
		chan->req = NULL;
   22d1e:	2500      	movs	r5, #0
   22d20:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
		goto process;
   22d24:	e7c5      	b.n	22cb2 <att_handle_rsp+0x3a>
   22d26:	bf00      	nop
   22d28:	2000c200 	.word	0x2000c200
   22d2c:	000437d8 	.word	0x000437d8
   22d30:	0003f3a0 	.word	0x0003f3a0

00022d34 <att_error_rsp>:
{
   22d34:	b538      	push	{r3, r4, r5, lr}
   22d36:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   22d38:	68ca      	ldr	r2, [r1, #12]
	if (!chan->req || chan->req == &cancel || !rsp->error) {
   22d3a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   22d3e:	b1cb      	cbz	r3, 22d74 <att_error_rsp+0x40>
   22d40:	490e      	ldr	r1, [pc, #56]	; (22d7c <att_error_rsp+0x48>)
   22d42:	428b      	cmp	r3, r1
   22d44:	d018      	beq.n	22d78 <att_error_rsp+0x44>
   22d46:	78d5      	ldrb	r5, [r2, #3]
   22d48:	b93d      	cbnz	r5, 22d5a <att_error_rsp+0x26>
		err = BT_ATT_ERR_UNLIKELY;
   22d4a:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
   22d4c:	462b      	mov	r3, r5
   22d4e:	2200      	movs	r2, #0
   22d50:	4611      	mov	r1, r2
   22d52:	4620      	mov	r0, r4
   22d54:	f7ff ff90 	bl	22c78 <att_handle_rsp>
}
   22d58:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(chan->chan.chan.conn, err)) {
   22d5a:	4629      	mov	r1, r5
   22d5c:	6840      	ldr	r0, [r0, #4]
   22d5e:	f016 feee 	bl	39b3e <att_change_security>
   22d62:	2800      	cmp	r0, #0
   22d64:	d1f2      	bne.n	22d4c <att_error_rsp+0x18>
		chan->req->retrying = true;
   22d66:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   22d6a:	7c13      	ldrb	r3, [r2, #16]
   22d6c:	f043 0301 	orr.w	r3, r3, #1
   22d70:	7413      	strb	r3, [r2, #16]
		return 0;
   22d72:	e7f1      	b.n	22d58 <att_error_rsp+0x24>
		err = BT_ATT_ERR_UNLIKELY;
   22d74:	250e      	movs	r5, #14
   22d76:	e7e9      	b.n	22d4c <att_error_rsp+0x18>
   22d78:	250e      	movs	r5, #14
   22d7a:	e7e7      	b.n	22d4c <att_error_rsp+0x18>
   22d7c:	2000c200 	.word	0x2000c200

00022d80 <att_reset>:
{
   22d80:	b530      	push	{r4, r5, lr}
   22d82:	b085      	sub	sp, #20
   22d84:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   22d86:	e005      	b.n	22d94 <att_reset+0x14>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   22d88:	69a0      	ldr	r0, [r4, #24]
   22d8a:	f7fe fee3 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(buf);
   22d8e:	4620      	mov	r0, r4
   22d90:	f006 fc88 	bl	296a4 <net_buf_unref>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   22d94:	2200      	movs	r2, #0
   22d96:	2300      	movs	r3, #0
   22d98:	9803      	ldr	r0, [sp, #12]
   22d9a:	300c      	adds	r0, #12
   22d9c:	f019 f810 	bl	3bdc0 <net_buf_get>
   22da0:	4604      	mov	r4, r0
   22da2:	2800      	cmp	r0, #0
   22da4:	d1f0      	bne.n	22d88 <att_reset+0x8>
   22da6:	e00b      	b.n	22dc0 <att_reset+0x40>
	list->tail = node;
   22da8:	609a      	str	r2, [r3, #8]
}
   22daa:	e011      	b.n	22dd0 <att_reset+0x50>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   22dac:	6818      	ldr	r0, [r3, #0]
   22dae:	69a3      	ldr	r3, [r4, #24]
   22db0:	9300      	str	r3, [sp, #0]
   22db2:	2300      	movs	r3, #0
   22db4:	461a      	mov	r2, r3
   22db6:	210e      	movs	r1, #14
   22db8:	47a8      	blx	r5
		bt_att_req_free(req);
   22dba:	4620      	mov	r0, r4
   22dbc:	f7ff ff44 	bl	22c48 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   22dc0:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   22dc2:	685c      	ldr	r4, [r3, #4]
   22dc4:	b144      	cbz	r4, 22dd8 <att_reset+0x58>
	return node->next;
   22dc6:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   22dc8:	605a      	str	r2, [r3, #4]
	return list->tail;
   22dca:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22dcc:	42a1      	cmp	r1, r4
   22dce:	d0eb      	beq.n	22da8 <att_reset+0x28>
		if (req->func) {
   22dd0:	6865      	ldr	r5, [r4, #4]
   22dd2:	2d00      	cmp	r5, #0
   22dd4:	d1ea      	bne.n	22dac <att_reset+0x2c>
   22dd6:	e7f0      	b.n	22dba <att_reset+0x3a>
	att->conn = NULL;
   22dd8:	2200      	movs	r2, #0
   22dda:	601a      	str	r2, [r3, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   22ddc:	a903      	add	r1, sp, #12
   22dde:	4802      	ldr	r0, [pc, #8]	; (22de8 <att_reset+0x68>)
   22de0:	f00e fa86 	bl	312f0 <k_mem_slab_free>
}
   22de4:	b005      	add	sp, #20
   22de6:	bd30      	pop	{r4, r5, pc}
   22de8:	2000889c 	.word	0x2000889c

00022dec <att_timeout>:
{
   22dec:	b510      	push	{r4, lr}
   22dee:	b088      	sub	sp, #32
   22df0:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   22df2:	4b15      	ldr	r3, [pc, #84]	; (22e48 <att_timeout+0x5c>)
   22df4:	9307      	str	r3, [sp, #28]
   22df6:	2302      	movs	r3, #2
   22df8:	f88d 3004 	strb.w	r3, [sp, #4]
   22dfc:	2300      	movs	r3, #0
   22dfe:	f88d 3005 	strb.w	r3, [sp, #5]
   22e02:	f88d 3006 	strb.w	r3, [sp, #6]
   22e06:	f88d 3007 	strb.w	r3, [sp, #7]
   22e0a:	9a01      	ldr	r2, [sp, #4]
   22e0c:	9206      	str	r2, [sp, #24]
   22e0e:	4619      	mov	r1, r3
   22e10:	f363 0100 	bfi	r1, r3, #0, #1
   22e14:	f363 0141 	bfi	r1, r3, #1, #1
   22e18:	f363 0182 	bfi	r1, r3, #2, #1
   22e1c:	f363 01c5 	bfi	r1, r3, #3, #3
   22e20:	2201      	movs	r2, #1
   22e22:	f362 1188 	bfi	r1, r2, #6, #3
   22e26:	2208      	movs	r2, #8
   22e28:	f362 2152 	bfi	r1, r2, #9, #10
   22e2c:	f363 41de 	bfi	r1, r3, #19, #12
   22e30:	f363 71df 	bfi	r1, r3, #31, #1
   22e34:	aa06      	add	r2, sp, #24
   22e36:	4805      	ldr	r0, [pc, #20]	; (22e4c <att_timeout+0x60>)
   22e38:	f7f3 fd88 	bl	1694c <z_impl_z_log_msg_static_create>
	bt_att_disconnected(&chan->chan.chan);
   22e3c:	f1a4 00bc 	sub.w	r0, r4, #188	; 0xbc
   22e40:	f017 fb12 	bl	3a468 <bt_att_disconnected>
}
   22e44:	b008      	add	sp, #32
   22e46:	bd10      	pop	{r4, pc}
   22e48:	000437f0 	.word	0x000437f0
   22e4c:	0003f3a0 	.word	0x0003f3a0

00022e50 <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   22e50:	b508      	push	{r3, lr}
	if (chan->req != req) {
   22e52:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   22e56:	428b      	cmp	r3, r1
   22e58:	d001      	beq.n	22e5e <bt_att_chan_req_cancel+0xe>
		return false;
   22e5a:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   22e5c:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   22e5e:	4b04      	ldr	r3, [pc, #16]	; (22e70 <bt_att_chan_req_cancel+0x20>)
   22e60:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
	bt_att_req_free(req);
   22e64:	4608      	mov	r0, r1
   22e66:	f7ff feef 	bl	22c48 <bt_att_req_free>
	return true;
   22e6a:	2001      	movs	r0, #1
   22e6c:	e7f6      	b.n	22e5c <bt_att_chan_req_cancel+0xc>
   22e6e:	bf00      	nop
   22e70:	2000c200 	.word	0x2000c200

00022e74 <bt_att_send>:
{
   22e74:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(conn);
   22e76:	b170      	cbz	r0, 22e96 <bt_att_send+0x22>
   22e78:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(buf);
   22e7a:	b1c9      	cbz	r1, 22eb0 <bt_att_send+0x3c>
	att = att_get(conn);
   22e7c:	f7fe fcde 	bl	2183c <att_get>
	if (!att) {
   22e80:	4605      	mov	r5, r0
   22e82:	b310      	cbz	r0, 22eca <bt_att_send+0x56>
	net_buf_put(&att->tx_queue, buf);
   22e84:	4621      	mov	r1, r4
   22e86:	300c      	adds	r0, #12
   22e88:	f006 fbe4 	bl	29654 <net_buf_put>
	att_send_process(att);
   22e8c:	4628      	mov	r0, r5
   22e8e:	f016 fdbe 	bl	39a0e <att_send_process>
	return 0;
   22e92:	2000      	movs	r0, #0
}
   22e94:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(conn);
   22e96:	4c11      	ldr	r4, [pc, #68]	; (22edc <bt_att_send+0x68>)
   22e98:	f640 63a4 	movw	r3, #3748	; 0xea4
   22e9c:	4622      	mov	r2, r4
   22e9e:	4910      	ldr	r1, [pc, #64]	; (22ee0 <bt_att_send+0x6c>)
   22ea0:	4810      	ldr	r0, [pc, #64]	; (22ee4 <bt_att_send+0x70>)
   22ea2:	f013 f9f7 	bl	36294 <assert_print>
   22ea6:	f640 61a4 	movw	r1, #3748	; 0xea4
   22eaa:	4620      	mov	r0, r4
   22eac:	f013 f9eb 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   22eb0:	4c0a      	ldr	r4, [pc, #40]	; (22edc <bt_att_send+0x68>)
   22eb2:	f640 63a5 	movw	r3, #3749	; 0xea5
   22eb6:	4622      	mov	r2, r4
   22eb8:	490b      	ldr	r1, [pc, #44]	; (22ee8 <bt_att_send+0x74>)
   22eba:	480a      	ldr	r0, [pc, #40]	; (22ee4 <bt_att_send+0x70>)
   22ebc:	f013 f9ea 	bl	36294 <assert_print>
   22ec0:	f640 61a5 	movw	r1, #3749	; 0xea5
   22ec4:	4620      	mov	r0, r4
   22ec6:	f013 f9de 	bl	36286 <assert_post_action>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   22eca:	69a0      	ldr	r0, [r4, #24]
   22ecc:	f7fe fe42 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(buf);
   22ed0:	4620      	mov	r0, r4
   22ed2:	f006 fbe7 	bl	296a4 <net_buf_unref>
		return -ENOTCONN;
   22ed6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22eda:	e7db      	b.n	22e94 <bt_att_send+0x20>
   22edc:	00043554 	.word	0x00043554
   22ee0:	0004311c 	.word	0x0004311c
   22ee4:	0003f72c 	.word	0x0003f72c
   22ee8:	000446d0 	.word	0x000446d0

00022eec <bt_att_req_send>:
{
   22eec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   22eee:	b180      	cbz	r0, 22f12 <bt_att_req_send+0x26>
   22ef0:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(req);
   22ef2:	b1d9      	cbz	r1, 22f2c <bt_att_req_send+0x40>
	att = att_get(conn);
   22ef4:	f7fe fca2 	bl	2183c <att_get>
	if (!att) {
   22ef8:	4603      	mov	r3, r0
   22efa:	b338      	cbz	r0, 22f4c <bt_att_req_send+0x60>
	parent->next = child;
   22efc:	2200      	movs	r2, #0
   22efe:	6022      	str	r2, [r4, #0]
	return list->tail;
   22f00:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   22f02:	b302      	cbz	r2, 22f46 <bt_att_req_send+0x5a>
	parent->next = child;
   22f04:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22f06:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   22f08:	4618      	mov	r0, r3
   22f0a:	f016 fcac 	bl	39866 <att_req_send_process>
	return 0;
   22f0e:	2000      	movs	r0, #0
}
   22f10:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(conn);
   22f12:	4c10      	ldr	r4, [pc, #64]	; (22f54 <bt_att_req_send+0x68>)
   22f14:	f640 63ba 	movw	r3, #3770	; 0xeba
   22f18:	4622      	mov	r2, r4
   22f1a:	490f      	ldr	r1, [pc, #60]	; (22f58 <bt_att_req_send+0x6c>)
   22f1c:	480f      	ldr	r0, [pc, #60]	; (22f5c <bt_att_req_send+0x70>)
   22f1e:	f013 f9b9 	bl	36294 <assert_print>
   22f22:	f640 61ba 	movw	r1, #3770	; 0xeba
   22f26:	4620      	mov	r0, r4
   22f28:	f013 f9ad 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(req);
   22f2c:	4c09      	ldr	r4, [pc, #36]	; (22f54 <bt_att_req_send+0x68>)
   22f2e:	f640 63bb 	movw	r3, #3771	; 0xebb
   22f32:	4622      	mov	r2, r4
   22f34:	490a      	ldr	r1, [pc, #40]	; (22f60 <bt_att_req_send+0x74>)
   22f36:	4809      	ldr	r0, [pc, #36]	; (22f5c <bt_att_req_send+0x70>)
   22f38:	f013 f9ac 	bl	36294 <assert_print>
   22f3c:	f640 61bb 	movw	r1, #3771	; 0xebb
   22f40:	4620      	mov	r0, r4
   22f42:	f013 f9a0 	bl	36286 <assert_post_action>
   22f46:	6084      	str	r4, [r0, #8]
	list->head = node;
   22f48:	6044      	str	r4, [r0, #4]
}
   22f4a:	e7dd      	b.n	22f08 <bt_att_req_send+0x1c>
		return -ENOTCONN;
   22f4c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   22f50:	e7de      	b.n	22f10 <bt_att_req_send+0x24>
   22f52:	bf00      	nop
   22f54:	00043554 	.word	0x00043554
   22f58:	0004311c 	.word	0x0004311c
   22f5c:	0003f72c 	.word	0x0003f72c
   22f60:	00043684 	.word	0x00043684

00022f64 <gatt_ccc_conn_queue_is_empty>:
	}
}

static bool gatt_ccc_conn_queue_is_empty(void)
{
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   22f64:	2300      	movs	r3, #0
   22f66:	b10b      	cbz	r3, 22f6c <gatt_ccc_conn_queue_is_empty+0x8>
		if (gatt_ccc_store.conn_list[i]) {
			return false;
		}
	}

	return true;
   22f68:	2001      	movs	r0, #1
   22f6a:	4770      	bx	lr
		if (gatt_ccc_store.conn_list[i]) {
   22f6c:	4a03      	ldr	r2, [pc, #12]	; (22f7c <gatt_ccc_conn_queue_is_empty+0x18>)
   22f6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   22f72:	b90a      	cbnz	r2, 22f78 <gatt_ccc_conn_queue_is_empty+0x14>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   22f74:	3301      	adds	r3, #1
   22f76:	e7f6      	b.n	22f66 <gatt_ccc_conn_queue_is_empty+0x2>
			return false;
   22f78:	2000      	movs	r0, #0
}
   22f7a:	4770      	bx	lr
   22f7c:	2000b690 	.word	0x2000b690

00022f80 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22f80:	4b15      	ldr	r3, [pc, #84]	; (22fd8 <bt_gatt_service_init+0x58>)
   22f82:	2201      	movs	r2, #1
   22f84:	e8d3 1fef 	ldaex	r1, [r3]
   22f88:	2900      	cmp	r1, #0
   22f8a:	d103      	bne.n	22f94 <bt_gatt_service_init+0x14>
   22f8c:	e8c3 2fe0 	stlex	r0, r2, [r3]
   22f90:	2800      	cmp	r0, #0
   22f92:	d1f7      	bne.n	22f84 <bt_gatt_service_init+0x4>
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   22f94:	d101      	bne.n	22f9a <bt_gatt_service_init+0x1a>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   22f96:	4b11      	ldr	r3, [pc, #68]	; (22fdc <bt_gatt_service_init+0x5c>)
   22f98:	e006      	b.n	22fa8 <bt_gatt_service_init+0x28>
   22f9a:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   22f9c:	685a      	ldr	r2, [r3, #4]
   22f9e:	4910      	ldr	r1, [pc, #64]	; (22fe0 <bt_gatt_service_init+0x60>)
   22fa0:	8808      	ldrh	r0, [r1, #0]
   22fa2:	4402      	add	r2, r0
   22fa4:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   22fa6:	3308      	adds	r3, #8
   22fa8:	4a0e      	ldr	r2, [pc, #56]	; (22fe4 <bt_gatt_service_init+0x64>)
   22faa:	4293      	cmp	r3, r2
   22fac:	d803      	bhi.n	22fb6 <bt_gatt_service_init+0x36>
   22fae:	4a0d      	ldr	r2, [pc, #52]	; (22fe4 <bt_gatt_service_init+0x64>)
   22fb0:	4293      	cmp	r3, r2
   22fb2:	d3f3      	bcc.n	22f9c <bt_gatt_service_init+0x1c>
   22fb4:	4770      	bx	lr
{
   22fb6:	b510      	push	{r4, lr}
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   22fb8:	4c0b      	ldr	r4, [pc, #44]	; (22fe8 <bt_gatt_service_init+0x68>)
   22fba:	f44f 63a1 	mov.w	r3, #1288	; 0x508
   22fbe:	4622      	mov	r2, r4
   22fc0:	490a      	ldr	r1, [pc, #40]	; (22fec <bt_gatt_service_init+0x6c>)
   22fc2:	480b      	ldr	r0, [pc, #44]	; (22ff0 <bt_gatt_service_init+0x70>)
   22fc4:	f013 f966 	bl	36294 <assert_print>
   22fc8:	480a      	ldr	r0, [pc, #40]	; (22ff4 <bt_gatt_service_init+0x74>)
   22fca:	f013 f963 	bl	36294 <assert_print>
   22fce:	f44f 61a1 	mov.w	r1, #1288	; 0x508
   22fd2:	4620      	mov	r0, r4
   22fd4:	f013 f957 	bl	36286 <assert_post_action>
   22fd8:	2000c26c 	.word	0x2000c26c
   22fdc:	0003f358 	.word	0x0003f358
   22fe0:	2000caa4 	.word	0x2000caa4
   22fe4:	0003f370 	.word	0x0003f370
   22fe8:	000438f4 	.word	0x000438f4
   22fec:	00043924 	.word	0x00043924
   22ff0:	0003f72c 	.word	0x0003f72c
   22ff4:	00040eb4 	.word	0x00040eb4

00022ff8 <db_hash_set>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_cf, "bt/cf", NULL, cf_set, NULL, NULL);

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
   22ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ffa:	b083      	sub	sp, #12
   22ffc:	af00      	add	r7, sp, #0
   22ffe:	4614      	mov	r4, r2
	ssize_t len;

	len = read_cb(cb_arg, db_hash.stored_hash, sizeof(db_hash.stored_hash));
   23000:	2210      	movs	r2, #16
   23002:	4923      	ldr	r1, [pc, #140]	; (23090 <db_hash_set+0x98>)
   23004:	4618      	mov	r0, r3
   23006:	47a0      	blx	r4
	if (len < 0) {
   23008:	1e04      	subs	r4, r0, #0
   2300a:	db04      	blt.n	23016 <db_hash_set+0x1e>
		return len;
	}

	LOG_HEXDUMP_DBG(db_hash.stored_hash, sizeof(db_hash.stored_hash), "Stored Hash: ");

	return 0;
   2300c:	2400      	movs	r4, #0
}
   2300e:	4620      	mov	r0, r4
   23010:	370c      	adds	r7, #12
   23012:	46bd      	mov	sp, r7
   23014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to decode value (err %zd)", len);
   23016:	466d      	mov	r5, sp
   23018:	b088      	sub	sp, #32
   2301a:	466b      	mov	r3, sp
   2301c:	f113 0210 	adds.w	r2, r3, #16
   23020:	d030      	beq.n	23084 <db_hash_set+0x8c>
   23022:	210c      	movs	r1, #12
   23024:	b13a      	cbz	r2, 23036 <db_hash_set+0x3e>
   23026:	4608      	mov	r0, r1
   23028:	2904      	cmp	r1, #4
   2302a:	dd01      	ble.n	23030 <db_hash_set+0x38>
   2302c:	4e19      	ldr	r6, [pc, #100]	; (23094 <db_hash_set+0x9c>)
   2302e:	615e      	str	r6, [r3, #20]
   23030:	2808      	cmp	r0, #8
   23032:	dd00      	ble.n	23036 <db_hash_set+0x3e>
   23034:	619c      	str	r4, [r3, #24]
   23036:	290b      	cmp	r1, #11
   23038:	dd27      	ble.n	2308a <db_hash_set+0x92>
   2303a:	f04f 0c0c 	mov.w	ip, #12
   2303e:	b13a      	cbz	r2, 23050 <db_hash_set+0x58>
   23040:	2103      	movs	r1, #3
   23042:	7139      	strb	r1, [r7, #4]
   23044:	2100      	movs	r1, #0
   23046:	7179      	strb	r1, [r7, #5]
   23048:	71b9      	strb	r1, [r7, #6]
   2304a:	71f9      	strb	r1, [r7, #7]
   2304c:	6878      	ldr	r0, [r7, #4]
   2304e:	6118      	str	r0, [r3, #16]
   23050:	2100      	movs	r1, #0
   23052:	f36f 0100 	bfc	r1, #0, #1
   23056:	f36f 0141 	bfc	r1, #1, #1
   2305a:	f36f 0182 	bfc	r1, #2, #1
   2305e:	f36f 01c5 	bfc	r1, #3, #3
   23062:	2301      	movs	r3, #1
   23064:	f363 1188 	bfi	r1, r3, #6, #3
   23068:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   2306c:	f363 2152 	bfi	r1, r3, #9, #10
   23070:	f36f 41de 	bfc	r1, #19, #12
   23074:	f36f 71df 	bfc	r1, #31, #1
   23078:	2300      	movs	r3, #0
   2307a:	4807      	ldr	r0, [pc, #28]	; (23098 <db_hash_set+0xa0>)
   2307c:	f7f3 fc66 	bl	1694c <z_impl_z_log_msg_static_create>
   23080:	46ad      	mov	sp, r5
		return len;
   23082:	e7c4      	b.n	2300e <db_hash_set+0x16>
		LOG_ERR("Failed to decode value (err %zd)", len);
   23084:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   23088:	e7cc      	b.n	23024 <db_hash_set+0x2c>
   2308a:	f06f 0c1b 	mvn.w	ip, #27
   2308e:	e7d6      	b.n	2303e <db_hash_set+0x46>
   23090:	2000b6d8 	.word	0x2000b6d8
   23094:	0004394c 	.word	0x0004394c
   23098:	0003f3c0 	.word	0x0003f3c0

0002309c <db_hash_store>:
{
   2309c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2309e:	b083      	sub	sp, #12
   230a0:	af00      	add	r7, sp, #0
	err = settings_save_one("bt/hash", &db_hash.hash, sizeof(db_hash.hash));
   230a2:	2210      	movs	r2, #16
   230a4:	4922      	ldr	r1, [pc, #136]	; (23130 <db_hash_store+0x94>)
   230a6:	4823      	ldr	r0, [pc, #140]	; (23134 <db_hash_store+0x98>)
   230a8:	f7f5 f968 	bl	1837c <settings_save_one>
	if (err) {
   230ac:	b3b0      	cbz	r0, 2311c <db_hash_store+0x80>
   230ae:	4605      	mov	r5, r0
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   230b0:	466c      	mov	r4, sp
   230b2:	b088      	sub	sp, #32
   230b4:	466b      	mov	r3, sp
   230b6:	f113 0210 	adds.w	r2, r3, #16
   230ba:	d032      	beq.n	23122 <db_hash_store+0x86>
   230bc:	210c      	movs	r1, #12
   230be:	b13a      	cbz	r2, 230d0 <db_hash_store+0x34>
   230c0:	4608      	mov	r0, r1
   230c2:	2904      	cmp	r1, #4
   230c4:	dd01      	ble.n	230ca <db_hash_store+0x2e>
   230c6:	4e1c      	ldr	r6, [pc, #112]	; (23138 <db_hash_store+0x9c>)
   230c8:	615e      	str	r6, [r3, #20]
   230ca:	2808      	cmp	r0, #8
   230cc:	dd00      	ble.n	230d0 <db_hash_store+0x34>
   230ce:	619d      	str	r5, [r3, #24]
   230d0:	290b      	cmp	r1, #11
   230d2:	dd29      	ble.n	23128 <db_hash_store+0x8c>
   230d4:	f04f 0c0c 	mov.w	ip, #12
   230d8:	b13a      	cbz	r2, 230ea <db_hash_store+0x4e>
   230da:	2103      	movs	r1, #3
   230dc:	7139      	strb	r1, [r7, #4]
   230de:	2100      	movs	r1, #0
   230e0:	7179      	strb	r1, [r7, #5]
   230e2:	71b9      	strb	r1, [r7, #6]
   230e4:	71f9      	strb	r1, [r7, #7]
   230e6:	6878      	ldr	r0, [r7, #4]
   230e8:	6118      	str	r0, [r3, #16]
   230ea:	2100      	movs	r1, #0
   230ec:	f36f 0100 	bfc	r1, #0, #1
   230f0:	f36f 0141 	bfc	r1, #1, #1
   230f4:	f36f 0182 	bfc	r1, #2, #1
   230f8:	f36f 01c5 	bfc	r1, #3, #3
   230fc:	2301      	movs	r3, #1
   230fe:	f363 1188 	bfi	r1, r3, #6, #3
   23102:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   23106:	f36c 2152 	bfi	r1, ip, #9, #10
   2310a:	f36f 41de 	bfc	r1, #19, #12
   2310e:	f36f 71df 	bfc	r1, #31, #1
   23112:	2300      	movs	r3, #0
   23114:	4809      	ldr	r0, [pc, #36]	; (2313c <db_hash_store+0xa0>)
   23116:	f7f3 fc19 	bl	1694c <z_impl_z_log_msg_static_create>
   2311a:	46a5      	mov	sp, r4
}
   2311c:	370c      	adds	r7, #12
   2311e:	46bd      	mov	sp, r7
   23120:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to save Database Hash (err %d)", err);
   23122:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   23126:	e7ca      	b.n	230be <db_hash_store+0x22>
   23128:	f06f 0c1b 	mvn.w	ip, #27
   2312c:	e7d4      	b.n	230d8 <db_hash_store+0x3c>
   2312e:	bf00      	nop
   23130:	2000b6c8 	.word	0x2000b6c8
   23134:	00043970 	.word	0x00043970
   23138:	00043978 	.word	0x00043978
   2313c:	0003f3c0 	.word	0x0003f3c0

00023140 <find_cf_cfg>:
{
   23140:	b570      	push	{r4, r5, r6, lr}
   23142:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   23144:	2400      	movs	r4, #0
   23146:	e007      	b.n	23158 <find_cf_cfg+0x18>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   23148:	4628      	mov	r0, r5
	return memcmp(a, b, sizeof(*a));
   2314a:	2207      	movs	r2, #7
   2314c:	490d      	ldr	r1, [pc, #52]	; (23184 <find_cf_cfg+0x44>)
   2314e:	3001      	adds	r0, #1
   23150:	f015 f92e 	bl	383b0 <memcmp>
   23154:	b1a0      	cbz	r0, 23180 <find_cf_cfg+0x40>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   23156:	3401      	adds	r4, #1
   23158:	2c01      	cmp	r4, #1
   2315a:	d810      	bhi.n	2317e <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   2315c:	4d0a      	ldr	r5, [pc, #40]	; (23188 <find_cf_cfg+0x48>)
   2315e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   23162:	2e00      	cmp	r6, #0
   23164:	d0f0      	beq.n	23148 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   23166:	0123      	lsls	r3, r4, #4
   23168:	4907      	ldr	r1, [pc, #28]	; (23188 <find_cf_cfg+0x48>)
   2316a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   2316e:	3201      	adds	r2, #1
   23170:	5cc9      	ldrb	r1, [r1, r3]
   23172:	4630      	mov	r0, r6
   23174:	f016 f90a 	bl	3938c <bt_conn_is_peer_addr_le>
   23178:	2800      	cmp	r0, #0
   2317a:	d0ec      	beq.n	23156 <find_cf_cfg+0x16>
   2317c:	e000      	b.n	23180 <find_cf_cfg+0x40>
	return NULL;
   2317e:	2500      	movs	r5, #0
}
   23180:	4628      	mov	r0, r5
   23182:	bd70      	pop	{r4, r5, r6, pc}
   23184:	0004203c 	.word	0x0004203c
   23188:	2000c234 	.word	0x2000c234

0002318c <find_sc_cfg>:
{
   2318c:	b570      	push	{r4, r5, r6, lr}
   2318e:	4605      	mov	r5, r0
   23190:	460e      	mov	r6, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   23192:	2400      	movs	r4, #0
   23194:	e000      	b.n	23198 <find_sc_cfg+0xc>
   23196:	3401      	adds	r4, #1
   23198:	2c01      	cmp	r4, #1
   2319a:	d817      	bhi.n	231cc <find_sc_cfg+0x40>
		if (id == sc_cfg[i].id &&
   2319c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   231a0:	4a0b      	ldr	r2, [pc, #44]	; (231d0 <find_sc_cfg+0x44>)
   231a2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   231a6:	429d      	cmp	r5, r3
   231a8:	d1f5      	bne.n	23196 <find_sc_cfg+0xa>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   231aa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   231ae:	eb02 0083 	add.w	r0, r2, r3, lsl #2
   231b2:	2207      	movs	r2, #7
   231b4:	4631      	mov	r1, r6
   231b6:	3001      	adds	r0, #1
   231b8:	f015 f8fa 	bl	383b0 <memcmp>
		if (id == sc_cfg[i].id &&
   231bc:	2800      	cmp	r0, #0
   231be:	d1ea      	bne.n	23196 <find_sc_cfg+0xa>
			return &sc_cfg[i];
   231c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   231c4:	4802      	ldr	r0, [pc, #8]	; (231d0 <find_sc_cfg+0x44>)
   231c6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   231ca:	e000      	b.n	231ce <find_sc_cfg+0x42>
	return NULL;
   231cc:	2000      	movs	r0, #0
}
   231ce:	bd70      	pop	{r4, r5, r6, pc}
   231d0:	2000c254 	.word	0x2000c254

000231d4 <find_ccc_cfg>:
{
   231d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231d6:	4607      	mov	r7, r0
   231d8:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   231da:	2400      	movs	r4, #0
   231dc:	b114      	cbz	r4, 231e4 <find_ccc_cfg+0x10>
	return NULL;
   231de:	2600      	movs	r6, #0
}
   231e0:	4630      	mov	r0, r6
   231e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   231e4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   231e8:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   231ec:	b167      	cbz	r7, 23208 <find_ccc_cfg+0x34>
						    &cfg->peer)) {
   231ee:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   231f2:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   231f4:	3201      	adds	r2, #1
   231f6:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   231fa:	4638      	mov	r0, r7
   231fc:	f016 f8c6 	bl	3938c <bt_conn_is_peer_addr_le>
   23200:	2800      	cmp	r0, #0
   23202:	d1ed      	bne.n	231e0 <find_ccc_cfg+0xc>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23204:	3401      	adds	r4, #1
   23206:	e7e9      	b.n	231dc <find_ccc_cfg+0x8>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   23208:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   2320c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   23210:	2207      	movs	r2, #7
   23212:	4903      	ldr	r1, [pc, #12]	; (23220 <find_ccc_cfg+0x4c>)
   23214:	3001      	adds	r0, #1
   23216:	f015 f8cb 	bl	383b0 <memcmp>
   2321a:	2800      	cmp	r0, #0
   2321c:	d1f2      	bne.n	23204 <find_ccc_cfg+0x30>
   2321e:	e7df      	b.n	231e0 <find_ccc_cfg+0xc>
   23220:	0004203c 	.word	0x0004203c

00023224 <gatt_sub_find>:
{
   23224:	b570      	push	{r4, r5, r6, lr}
   23226:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   23228:	2400      	movs	r4, #0
   2322a:	e007      	b.n	2323c <gatt_sub_find+0x18>
			if (bt_addr_le_eq(&sub->peer, BT_ADDR_LE_ANY)) {
   2322c:	4628      	mov	r0, r5
   2322e:	2207      	movs	r2, #7
   23230:	490d      	ldr	r1, [pc, #52]	; (23268 <gatt_sub_find+0x44>)
   23232:	3001      	adds	r0, #1
   23234:	f015 f8bc 	bl	383b0 <memcmp>
   23238:	b1a0      	cbz	r0, 23264 <gatt_sub_find+0x40>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   2323a:	3401      	adds	r4, #1
   2323c:	2c01      	cmp	r4, #1
   2323e:	d810      	bhi.n	23262 <gatt_sub_find+0x3e>
		struct gatt_sub *sub = &subscriptions[i];
   23240:	4d0a      	ldr	r5, [pc, #40]	; (2326c <gatt_sub_find+0x48>)
   23242:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   23246:	2e00      	cmp	r6, #0
   23248:	d0f0      	beq.n	2322c <gatt_sub_find+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   2324a:	0123      	lsls	r3, r4, #4
   2324c:	4907      	ldr	r1, [pc, #28]	; (2326c <gatt_sub_find+0x48>)
   2324e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   23252:	3201      	adds	r2, #1
   23254:	5cc9      	ldrb	r1, [r1, r3]
   23256:	4630      	mov	r0, r6
   23258:	f016 f898 	bl	3938c <bt_conn_is_peer_addr_le>
   2325c:	2800      	cmp	r0, #0
   2325e:	d0ec      	beq.n	2323a <gatt_sub_find+0x16>
   23260:	e000      	b.n	23264 <gatt_sub_find+0x40>
	return NULL;
   23262:	2500      	movs	r5, #0
}
   23264:	4628      	mov	r0, r5
   23266:	bd70      	pop	{r4, r5, r6, pc}
   23268:	0004203c 	.word	0x0004203c
   2326c:	2000c27c 	.word	0x2000c27c

00023270 <ccc_save>:
{
   23270:	b538      	push	{r3, r4, r5, lr}
   23272:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   23274:	6882      	ldr	r2, [r0, #8]
   23276:	4b0d      	ldr	r3, [pc, #52]	; (232ac <ccc_save+0x3c>)
   23278:	429a      	cmp	r2, r3
   2327a:	d001      	beq.n	23280 <ccc_save+0x10>
}
   2327c:	2001      	movs	r0, #1
   2327e:	bd38      	pop	{r3, r4, r5, pc}
   23280:	460d      	mov	r5, r1
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
   23282:	7922      	ldrb	r2, [r4, #4]
   23284:	6821      	ldr	r1, [r4, #0]
   23286:	68c0      	ldr	r0, [r0, #12]
   23288:	f017 fac4 	bl	3a814 <ccc_find_cfg>
	if (!cfg) {
   2328c:	2800      	cmp	r0, #0
   2328e:	d0f5      	beq.n	2327c <ccc_save+0xc>
	save->store[save->count].handle = handle;
   23290:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
   23294:	1c9a      	adds	r2, r3, #2
   23296:	f824 5022 	strh.w	r5, [r4, r2, lsl #2]
	save->store[save->count].value = cfg->value;
   2329a:	8901      	ldrh	r1, [r0, #8]
   2329c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   232a0:	8051      	strh	r1, [r2, #2]
	save->count++;
   232a2:	3301      	adds	r3, #1
   232a4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	return BT_GATT_ITER_CONTINUE;
   232a8:	e7e8      	b.n	2327c <ccc_save+0xc>
   232aa:	bf00      	nop
   232ac:	00023ba1 	.word	0x00023ba1

000232b0 <find_cf_cfg_by_addr>:
{
   232b0:	b570      	push	{r4, r5, r6, lr}
   232b2:	4605      	mov	r5, r0
   232b4:	460e      	mov	r6, r1
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   232b6:	2400      	movs	r4, #0
   232b8:	e000      	b.n	232bc <find_cf_cfg_by_addr+0xc>
   232ba:	3401      	adds	r4, #1
   232bc:	2c01      	cmp	r4, #1
   232be:	d811      	bhi.n	232e4 <find_cf_cfg_by_addr+0x34>
			if (id == cf_cfg[i].id &&
   232c0:	0123      	lsls	r3, r4, #4
   232c2:	4a09      	ldr	r2, [pc, #36]	; (232e8 <find_cf_cfg_by_addr+0x38>)
   232c4:	5cd3      	ldrb	r3, [r2, r3]
   232c6:	42ab      	cmp	r3, r5
   232c8:	d1f7      	bne.n	232ba <find_cf_cfg_by_addr+0xa>
			    bt_addr_le_eq(addr, &cf_cfg[i].peer)) {
   232ca:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   232ce:	2207      	movs	r2, #7
   232d0:	3101      	adds	r1, #1
   232d2:	4630      	mov	r0, r6
   232d4:	f015 f86c 	bl	383b0 <memcmp>
			if (id == cf_cfg[i].id &&
   232d8:	2800      	cmp	r0, #0
   232da:	d1ee      	bne.n	232ba <find_cf_cfg_by_addr+0xa>
				return &cf_cfg[i];
   232dc:	4802      	ldr	r0, [pc, #8]	; (232e8 <find_cf_cfg_by_addr+0x38>)
   232de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
   232e2:	e000      	b.n	232e6 <find_cf_cfg_by_addr+0x36>
	return NULL;
   232e4:	2000      	movs	r0, #0
}
   232e6:	bd70      	pop	{r4, r5, r6, pc}
   232e8:	2000c234 	.word	0x2000c234

000232ec <cf_write>:
{
   232ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232f0:	b088      	sub	sp, #32
   232f2:	461d      	mov	r5, r3
   232f4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   232f8:	2b01      	cmp	r3, #1
   232fa:	d852      	bhi.n	233a2 <cf_write+0xb6>
   232fc:	4606      	mov	r6, r0
   232fe:	4617      	mov	r7, r2
	if (offset + len > sizeof(cfg->data)) {
   23300:	46a8      	mov	r8, r5
   23302:	442b      	add	r3, r5
   23304:	2b01      	cmp	r3, #1
   23306:	d84f      	bhi.n	233a8 <cf_write+0xbc>
	cfg = find_cf_cfg(conn);
   23308:	f7ff ff1a 	bl	23140 <find_cf_cfg>
	if (!cfg) {
   2330c:	4604      	mov	r4, r0
   2330e:	b1e0      	cbz	r0, 2334a <cf_write+0x5e>
	if (!cf_set_value(cfg, value, len)) {
   23310:	462a      	mov	r2, r5
   23312:	4639      	mov	r1, r7
   23314:	4620      	mov	r0, r4
   23316:	f017 f999 	bl	3a64c <cf_set_value>
   2331a:	2800      	cmp	r0, #0
   2331c:	d047      	beq.n	233ae <cf_write+0xc2>
	memcpy(dst, src, sizeof(*dst));
   2331e:	2207      	movs	r2, #7
   23320:	f106 0190 	add.w	r1, r6, #144	; 0x90
   23324:	1c60      	adds	r0, r4, #1
   23326:	f015 f868 	bl	383fa <memcpy>
	cfg->id = conn->id;
   2332a:	7a33      	ldrb	r3, [r6, #8]
   2332c:	4620      	mov	r0, r4
   2332e:	f800 3b0c 	strb.w	r3, [r0], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23332:	e8d0 3fef 	ldaex	r3, [r0]
   23336:	f043 0301 	orr.w	r3, r3, #1
   2333a:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2333e:	2a00      	cmp	r2, #0
   23340:	d1f7      	bne.n	23332 <cf_write+0x46>
}
   23342:	4640      	mov	r0, r8
   23344:	b008      	add	sp, #32
   23346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   2334a:	f7ff fef9 	bl	23140 <find_cf_cfg>
	if (!cfg) {
   2334e:	4604      	mov	r4, r0
   23350:	2800      	cmp	r0, #0
   23352:	d1dd      	bne.n	23310 <cf_write+0x24>
		LOG_WRN("No space to store Client Supported Features");
   23354:	4b17      	ldr	r3, [pc, #92]	; (233b4 <cf_write+0xc8>)
   23356:	9307      	str	r3, [sp, #28]
   23358:	2202      	movs	r2, #2
   2335a:	f88d 2004 	strb.w	r2, [sp, #4]
   2335e:	2300      	movs	r3, #0
   23360:	f88d 3005 	strb.w	r3, [sp, #5]
   23364:	f88d 3006 	strb.w	r3, [sp, #6]
   23368:	f88d 3007 	strb.w	r3, [sp, #7]
   2336c:	9901      	ldr	r1, [sp, #4]
   2336e:	9106      	str	r1, [sp, #24]
   23370:	4619      	mov	r1, r3
   23372:	f363 0100 	bfi	r1, r3, #0, #1
   23376:	f363 0141 	bfi	r1, r3, #1, #1
   2337a:	f363 0182 	bfi	r1, r3, #2, #1
   2337e:	f363 01c5 	bfi	r1, r3, #3, #3
   23382:	f362 1188 	bfi	r1, r2, #6, #3
   23386:	2208      	movs	r2, #8
   23388:	f362 2152 	bfi	r1, r2, #9, #10
   2338c:	f363 41de 	bfi	r1, r3, #19, #12
   23390:	f363 71df 	bfi	r1, r3, #31, #1
   23394:	aa06      	add	r2, sp, #24
   23396:	4808      	ldr	r0, [pc, #32]	; (233b8 <cf_write+0xcc>)
   23398:	f7f3 fad8 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   2339c:	f06f 0810 	mvn.w	r8, #16
   233a0:	e7cf      	b.n	23342 <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   233a2:	f06f 0806 	mvn.w	r8, #6
   233a6:	e7cc      	b.n	23342 <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   233a8:	f06f 080c 	mvn.w	r8, #12
   233ac:	e7c9      	b.n	23342 <cf_write+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   233ae:	f06f 0812 	mvn.w	r8, #18
   233b2:	e7c6      	b.n	23342 <cf_write+0x56>
   233b4:	000439a0 	.word	0x000439a0
   233b8:	0003f3c0 	.word	0x0003f3c0

000233bc <convert_to_id_on_match>:
{
   233bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   233be:	6881      	ldr	r1, [r0, #8]
   233c0:	4b0e      	ldr	r3, [pc, #56]	; (233fc <convert_to_id_on_match+0x40>)
   233c2:	4299      	cmp	r1, r3
   233c4:	d001      	beq.n	233ca <convert_to_id_on_match+0xe>
}
   233c6:	2001      	movs	r0, #1
   233c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   233ca:	4616      	mov	r6, r2
	ccc = attr->user_data;
   233cc:	68c7      	ldr	r7, [r0, #12]
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   233ce:	2400      	movs	r4, #0
   233d0:	2c00      	cmp	r4, #0
   233d2:	d1f8      	bne.n	233c6 <convert_to_id_on_match+0xa>
		if (bt_addr_le_eq(&ccc->cfg[i].peer, match->private_addr)) {
   233d4:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   233d8:	eb07 0545 	add.w	r5, r7, r5, lsl #1
   233dc:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   233de:	2207      	movs	r2, #7
   233e0:	6831      	ldr	r1, [r6, #0]
   233e2:	4628      	mov	r0, r5
   233e4:	f014 ffe4 	bl	383b0 <memcmp>
   233e8:	b108      	cbz	r0, 233ee <convert_to_id_on_match+0x32>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   233ea:	3401      	adds	r4, #1
   233ec:	e7f0      	b.n	233d0 <convert_to_id_on_match+0x14>
	memcpy(dst, src, sizeof(*dst));
   233ee:	2207      	movs	r2, #7
   233f0:	6871      	ldr	r1, [r6, #4]
   233f2:	4628      	mov	r0, r5
   233f4:	f015 f801 	bl	383fa <memcpy>
}
   233f8:	e7f7      	b.n	233ea <convert_to_id_on_match+0x2e>
   233fa:	bf00      	nop
   233fc:	00023ba1 	.word	0x00023ba1

00023400 <clear_ccc_cfg>:
{
   23400:	b510      	push	{r4, lr}
   23402:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   23404:	2207      	movs	r2, #7
   23406:	4904      	ldr	r1, [pc, #16]	; (23418 <clear_ccc_cfg+0x18>)
   23408:	3001      	adds	r0, #1
   2340a:	f014 fff6 	bl	383fa <memcpy>
	cfg->id = 0U;
   2340e:	2300      	movs	r3, #0
   23410:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   23412:	8123      	strh	r3, [r4, #8]
}
   23414:	bd10      	pop	{r4, pc}
   23416:	bf00      	nop
   23418:	0004203c 	.word	0x0004203c

0002341c <gatt_sub_free>:
{
   2341c:	b510      	push	{r4, lr}
   2341e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   23420:	f017 f97b 	bl	3a71a <gatt_sub_is_empty>
   23424:	b128      	cbz	r0, 23432 <gatt_sub_free+0x16>
   23426:	2207      	movs	r2, #7
   23428:	4908      	ldr	r1, [pc, #32]	; (2344c <gatt_sub_free+0x30>)
   2342a:	1c60      	adds	r0, r4, #1
   2342c:	f014 ffe5 	bl	383fa <memcpy>
}
   23430:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   23432:	4c07      	ldr	r4, [pc, #28]	; (23450 <gatt_sub_free+0x34>)
   23434:	f44f 6349 	mov.w	r3, #3216	; 0xc90
   23438:	4622      	mov	r2, r4
   2343a:	4906      	ldr	r1, [pc, #24]	; (23454 <gatt_sub_free+0x38>)
   2343c:	4806      	ldr	r0, [pc, #24]	; (23458 <gatt_sub_free+0x3c>)
   2343e:	f012 ff29 	bl	36294 <assert_print>
   23442:	f44f 6149 	mov.w	r1, #3216	; 0xc90
   23446:	4620      	mov	r0, r4
   23448:	f012 ff1d 	bl	36286 <assert_post_action>
   2344c:	0004203c 	.word	0x0004203c
   23450:	000438f4 	.word	0x000438f4
   23454:	000439cc 	.word	0x000439cc
   23458:	0003f72c 	.word	0x0003f72c

0002345c <ccc_load>:
{
   2345c:	b570      	push	{r4, r5, r6, lr}
   2345e:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   23460:	6882      	ldr	r2, [r0, #8]
   23462:	4b1f      	ldr	r3, [pc, #124]	; (234e0 <ccc_load+0x84>)
   23464:	429a      	cmp	r2, r3
   23466:	d001      	beq.n	2346c <ccc_load+0x10>
		return BT_GATT_ITER_CONTINUE;
   23468:	2001      	movs	r0, #1
}
   2346a:	bd70      	pop	{r4, r5, r6, pc}
	ccc = attr->user_data;
   2346c:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
   2346e:	68a3      	ldr	r3, [r4, #8]
   23470:	b143      	cbz	r3, 23484 <ccc_load+0x28>
	} else if (!load->count) {
   23472:	68e2      	ldr	r2, [r4, #12]
   23474:	2a00      	cmp	r2, #0
   23476:	d030      	beq.n	234da <ccc_load+0x7e>
	if (load->entry->handle != handle) {
   23478:	881b      	ldrh	r3, [r3, #0]
   2347a:	428b      	cmp	r3, r1
   2347c:	d009      	beq.n	23492 <ccc_load+0x36>
		if (load->entry->handle < handle) {
   2347e:	d312      	bcc.n	234a6 <ccc_load+0x4a>
		return BT_GATT_ITER_CONTINUE;
   23480:	2001      	movs	r0, #1
   23482:	e7f2      	b.n	2346a <ccc_load+0xe>
		ccc_clear(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   23484:	7922      	ldrb	r2, [r4, #4]
   23486:	6821      	ldr	r1, [r4, #0]
   23488:	4628      	mov	r0, r5
   2348a:	f017 f9ee 	bl	3a86a <ccc_clear>
		return BT_GATT_ITER_CONTINUE;
   2348e:	2001      	movs	r0, #1
   23490:	e7eb      	b.n	2346a <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
   23492:	7922      	ldrb	r2, [r4, #4]
   23494:	6821      	ldr	r1, [r4, #0]
   23496:	4628      	mov	r0, r5
   23498:	f017 f9bc 	bl	3a814 <ccc_find_cfg>
	if (!cfg) {
   2349c:	4606      	mov	r6, r0
   2349e:	b160      	cbz	r0, 234ba <ccc_load+0x5e>
	cfg->value = load->entry->value;
   234a0:	68a3      	ldr	r3, [r4, #8]
   234a2:	885b      	ldrh	r3, [r3, #2]
   234a4:	8133      	strh	r3, [r6, #8]
	load->entry++;
   234a6:	68a3      	ldr	r3, [r4, #8]
   234a8:	3304      	adds	r3, #4
   234aa:	60a3      	str	r3, [r4, #8]
	load->count--;
   234ac:	68e0      	ldr	r0, [r4, #12]
   234ae:	3801      	subs	r0, #1
   234b0:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   234b2:	3800      	subs	r0, #0
   234b4:	bf18      	it	ne
   234b6:	2001      	movne	r0, #1
   234b8:	e7d7      	b.n	2346a <ccc_load+0xe>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
   234ba:	2200      	movs	r2, #0
   234bc:	4909      	ldr	r1, [pc, #36]	; (234e4 <ccc_load+0x88>)
   234be:	4628      	mov	r0, r5
   234c0:	f017 f9a8 	bl	3a814 <ccc_find_cfg>
		if (!cfg) {
   234c4:	4606      	mov	r6, r0
   234c6:	2800      	cmp	r0, #0
   234c8:	d0ed      	beq.n	234a6 <ccc_load+0x4a>
   234ca:	2207      	movs	r2, #7
   234cc:	6821      	ldr	r1, [r4, #0]
   234ce:	3001      	adds	r0, #1
   234d0:	f014 ff93 	bl	383fa <memcpy>
		cfg->id = load->addr_with_id.id;
   234d4:	7923      	ldrb	r3, [r4, #4]
   234d6:	7033      	strb	r3, [r6, #0]
   234d8:	e7e2      	b.n	234a0 <ccc_load+0x44>
		return BT_GATT_ITER_STOP;
   234da:	2000      	movs	r0, #0
   234dc:	e7c5      	b.n	2346a <ccc_load+0xe>
   234de:	bf00      	nop
   234e0:	00023ba1 	.word	0x00023ba1
   234e4:	0004203c 	.word	0x0004203c

000234e8 <sc_store>:
{
   234e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   234ea:	b08d      	sub	sp, #52	; 0x34
   234ec:	af02      	add	r7, sp, #8
   234ee:	4604      	mov	r4, r0
	if (cfg->id) {
   234f0:	7802      	ldrb	r2, [r0, #0]
   234f2:	b1aa      	cbz	r2, 23520 <sc_store+0x38>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
   234f4:	2104      	movs	r1, #4
   234f6:	4638      	mov	r0, r7
   234f8:	f7f0 ff8e 	bl	14418 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
   234fc:	9700      	str	r7, [sp, #0]
   234fe:	1c63      	adds	r3, r4, #1
   23500:	4a2a      	ldr	r2, [pc, #168]	; (235ac <sc_store+0xc4>)
   23502:	2124      	movs	r1, #36	; 0x24
   23504:	1d38      	adds	r0, r7, #4
   23506:	f7f7 fd3f 	bl	1af88 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
   2350a:	2204      	movs	r2, #4
   2350c:	f104 0108 	add.w	r1, r4, #8
   23510:	18b8      	adds	r0, r7, r2
   23512:	f7f4 ff33 	bl	1837c <settings_save_one>
	if (err) {
   23516:	4604      	mov	r4, r0
   23518:	b958      	cbnz	r0, 23532 <sc_store+0x4a>
}
   2351a:	372c      	adds	r7, #44	; 0x2c
   2351c:	46bd      	mov	sp, r7
   2351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
   23520:	2300      	movs	r3, #0
   23522:	9300      	str	r3, [sp, #0]
   23524:	1c43      	adds	r3, r0, #1
   23526:	4a21      	ldr	r2, [pc, #132]	; (235ac <sc_store+0xc4>)
   23528:	2124      	movs	r1, #36	; 0x24
   2352a:	1d38      	adds	r0, r7, #4
   2352c:	f7f7 fd2c 	bl	1af88 <bt_settings_encode_key>
   23530:	e7eb      	b.n	2350a <sc_store+0x22>
		LOG_ERR("failed to store SC (err %d)", err);
   23532:	466d      	mov	r5, sp
   23534:	b088      	sub	sp, #32
   23536:	ab02      	add	r3, sp, #8
   23538:	f113 0210 	adds.w	r2, r3, #16
   2353c:	d02f      	beq.n	2359e <sc_store+0xb6>
   2353e:	210c      	movs	r1, #12
   23540:	b13a      	cbz	r2, 23552 <sc_store+0x6a>
   23542:	4608      	mov	r0, r1
   23544:	2904      	cmp	r1, #4
   23546:	dd01      	ble.n	2354c <sc_store+0x64>
   23548:	4e19      	ldr	r6, [pc, #100]	; (235b0 <sc_store+0xc8>)
   2354a:	615e      	str	r6, [r3, #20]
   2354c:	2808      	cmp	r0, #8
   2354e:	dd00      	ble.n	23552 <sc_store+0x6a>
   23550:	619c      	str	r4, [r3, #24]
   23552:	290b      	cmp	r1, #11
   23554:	dd26      	ble.n	235a4 <sc_store+0xbc>
   23556:	240c      	movs	r4, #12
   23558:	b13a      	cbz	r2, 2356a <sc_store+0x82>
   2355a:	2103      	movs	r1, #3
   2355c:	7039      	strb	r1, [r7, #0]
   2355e:	2100      	movs	r1, #0
   23560:	7079      	strb	r1, [r7, #1]
   23562:	70b9      	strb	r1, [r7, #2]
   23564:	70f9      	strb	r1, [r7, #3]
   23566:	6838      	ldr	r0, [r7, #0]
   23568:	6118      	str	r0, [r3, #16]
   2356a:	2100      	movs	r1, #0
   2356c:	f36f 0100 	bfc	r1, #0, #1
   23570:	f36f 0141 	bfc	r1, #1, #1
   23574:	f36f 0182 	bfc	r1, #2, #1
   23578:	f36f 01c5 	bfc	r1, #3, #3
   2357c:	2301      	movs	r3, #1
   2357e:	f363 1188 	bfi	r1, r3, #6, #3
   23582:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   23586:	f364 2152 	bfi	r1, r4, #9, #10
   2358a:	f36f 41de 	bfc	r1, #19, #12
   2358e:	f36f 71df 	bfc	r1, #31, #1
   23592:	2300      	movs	r3, #0
   23594:	4807      	ldr	r0, [pc, #28]	; (235b4 <sc_store+0xcc>)
   23596:	f7f3 f9d9 	bl	1694c <z_impl_z_log_msg_static_create>
   2359a:	46ad      	mov	sp, r5
		return;
   2359c:	e7bd      	b.n	2351a <sc_store+0x32>
		LOG_ERR("failed to store SC (err %d)", err);
   2359e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   235a2:	e7cd      	b.n	23540 <sc_store+0x58>
   235a4:	f06f 041b 	mvn.w	r4, #27
   235a8:	e7d6      	b.n	23558 <sc_store+0x70>
   235aa:	bf00      	nop
   235ac:	000439e4 	.word	0x000439e4
   235b0:	000439e8 	.word	0x000439e8
   235b4:	0003f3c0 	.word	0x0003f3c0

000235b8 <sc_save>:
{
   235b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235bc:	b088      	sub	sp, #32
   235be:	4607      	mov	r7, r0
   235c0:	4688      	mov	r8, r1
   235c2:	4616      	mov	r6, r2
   235c4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   235c6:	f7ff fde1 	bl	2318c <find_sc_cfg>
	if (!cfg) {
   235ca:	4604      	mov	r4, r0
   235cc:	b1b8      	cbz	r0, 235fe <sc_save+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   235ce:	8923      	ldrh	r3, [r4, #8]
   235d0:	b913      	cbnz	r3, 235d8 <sc_save+0x20>
   235d2:	8963      	ldrh	r3, [r4, #10]
   235d4:	2b00      	cmp	r3, #0
   235d6:	d044      	beq.n	23662 <sc_save+0xaa>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   235d8:	462b      	mov	r3, r5
   235da:	4632      	mov	r2, r6
   235dc:	f104 010a 	add.w	r1, r4, #10
   235e0:	f104 0008 	add.w	r0, r4, #8
   235e4:	f017 f810 	bl	3a608 <update_range>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   235e8:	b130      	cbz	r0, 235f8 <sc_save+0x40>
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   235ea:	4621      	mov	r1, r4
   235ec:	f811 0b01 	ldrb.w	r0, [r1], #1
   235f0:	f015 f9c5 	bl	3897e <bt_addr_le_is_bonded>
   235f4:	2800      	cmp	r0, #0
   235f6:	d137      	bne.n	23668 <sc_save+0xb0>
}
   235f8:	b008      	add	sp, #32
   235fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   235fe:	491c      	ldr	r1, [pc, #112]	; (23670 <sc_save+0xb8>)
   23600:	f7ff fdc4 	bl	2318c <find_sc_cfg>
		if (!cfg) {
   23604:	4604      	mov	r4, r0
   23606:	b130      	cbz	r0, 23616 <sc_save+0x5e>
		cfg->id = id;
   23608:	f800 7b01 	strb.w	r7, [r0], #1
   2360c:	2207      	movs	r2, #7
   2360e:	4641      	mov	r1, r8
   23610:	f014 fef3 	bl	383fa <memcpy>
}
   23614:	e7db      	b.n	235ce <sc_save+0x16>
			LOG_ERR("unable to save SC: no cfg left");
   23616:	4b17      	ldr	r3, [pc, #92]	; (23674 <sc_save+0xbc>)
   23618:	9307      	str	r3, [sp, #28]
   2361a:	2302      	movs	r3, #2
   2361c:	f88d 3004 	strb.w	r3, [sp, #4]
   23620:	2300      	movs	r3, #0
   23622:	f88d 3005 	strb.w	r3, [sp, #5]
   23626:	f88d 3006 	strb.w	r3, [sp, #6]
   2362a:	f88d 3007 	strb.w	r3, [sp, #7]
   2362e:	9a01      	ldr	r2, [sp, #4]
   23630:	9206      	str	r2, [sp, #24]
   23632:	4619      	mov	r1, r3
   23634:	f363 0100 	bfi	r1, r3, #0, #1
   23638:	f363 0141 	bfi	r1, r3, #1, #1
   2363c:	f363 0182 	bfi	r1, r3, #2, #1
   23640:	f363 01c5 	bfi	r1, r3, #3, #3
   23644:	2201      	movs	r2, #1
   23646:	f362 1188 	bfi	r1, r2, #6, #3
   2364a:	2208      	movs	r2, #8
   2364c:	f362 2152 	bfi	r1, r2, #9, #10
   23650:	f363 41de 	bfi	r1, r3, #19, #12
   23654:	f363 71df 	bfi	r1, r3, #31, #1
   23658:	aa06      	add	r2, sp, #24
   2365a:	4807      	ldr	r0, [pc, #28]	; (23678 <sc_save+0xc0>)
   2365c:	f7f3 f976 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   23660:	e7ca      	b.n	235f8 <sc_save+0x40>
		cfg->data.start = start;
   23662:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   23664:	8165      	strh	r5, [r4, #10]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   23666:	e7c0      	b.n	235ea <sc_save+0x32>
		sc_store(cfg);
   23668:	4620      	mov	r0, r4
   2366a:	f7ff ff3d 	bl	234e8 <sc_store>
   2366e:	e7c3      	b.n	235f8 <sc_save+0x40>
   23670:	0004203c 	.word	0x0004203c
   23674:	00043a04 	.word	0x00043a04
   23678:	0003f3c0 	.word	0x0003f3c0

0002367c <bt_gatt_store_cf>:
{
   2367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23680:	b08c      	sub	sp, #48	; 0x30
   23682:	af02      	add	r7, sp, #8
   23684:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   23686:	f7ff fd5b 	bl	23140 <find_cf_cfg>
	if (!cfg) {
   2368a:	4605      	mov	r5, r0
   2368c:	b360      	cbz	r0, 236e8 <bt_gatt_store_cf+0x6c>
		str = (char *)cfg->data;
   2368e:	f100 0608 	add.w	r6, r0, #8
		if (conn->id) {
   23692:	7a22      	ldrb	r2, [r4, #8]
   23694:	b9ca      	cbnz	r2, 236ca <bt_gatt_store_cf+0x4e>
		len = sizeof(cfg->data);
   23696:	f04f 0801 	mov.w	r8, #1
	if (!cfg || !conn->id) {
   2369a:	b10d      	cbz	r5, 236a0 <bt_gatt_store_cf+0x24>
   2369c:	7a23      	ldrb	r3, [r4, #8]
   2369e:	b943      	cbnz	r3, 236b2 <bt_gatt_store_cf+0x36>
		bt_settings_encode_key(key, sizeof(key), "cf",
   236a0:	2300      	movs	r3, #0
   236a2:	9300      	str	r3, [sp, #0]
   236a4:	f104 0390 	add.w	r3, r4, #144	; 0x90
   236a8:	4a2f      	ldr	r2, [pc, #188]	; (23768 <bt_gatt_store_cf+0xec>)
   236aa:	2124      	movs	r1, #36	; 0x24
   236ac:	1d38      	adds	r0, r7, #4
   236ae:	f7f7 fc6b 	bl	1af88 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
   236b2:	4642      	mov	r2, r8
   236b4:	4631      	mov	r1, r6
   236b6:	1d38      	adds	r0, r7, #4
   236b8:	f7f4 fe60 	bl	1837c <settings_save_one>
	if (err) {
   236bc:	4604      	mov	r4, r0
   236be:	b9b8      	cbnz	r0, 236f0 <bt_gatt_store_cf+0x74>
}
   236c0:	4620      	mov	r0, r4
   236c2:	3728      	adds	r7, #40	; 0x28
   236c4:	46bd      	mov	sp, r7
   236c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   236ca:	2104      	movs	r1, #4
   236cc:	4638      	mov	r0, r7
   236ce:	f7f0 fea3 	bl	14418 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
   236d2:	9700      	str	r7, [sp, #0]
   236d4:	f104 0390 	add.w	r3, r4, #144	; 0x90
   236d8:	4a23      	ldr	r2, [pc, #140]	; (23768 <bt_gatt_store_cf+0xec>)
   236da:	2124      	movs	r1, #36	; 0x24
   236dc:	1d38      	adds	r0, r7, #4
   236de:	f7f7 fc53 	bl	1af88 <bt_settings_encode_key>
		len = sizeof(cfg->data);
   236e2:	f04f 0801 	mov.w	r8, #1
   236e6:	e7d8      	b.n	2369a <bt_gatt_store_cf+0x1e>
		str = NULL;
   236e8:	4606      	mov	r6, r0
		len = 0;
   236ea:	f04f 0800 	mov.w	r8, #0
   236ee:	e7d4      	b.n	2369a <bt_gatt_store_cf+0x1e>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   236f0:	466e      	mov	r6, sp
   236f2:	b088      	sub	sp, #32
   236f4:	ab02      	add	r3, sp, #8
   236f6:	f113 0210 	adds.w	r2, r3, #16
   236fa:	d02f      	beq.n	2375c <bt_gatt_store_cf+0xe0>
   236fc:	210c      	movs	r1, #12
   236fe:	b13a      	cbz	r2, 23710 <bt_gatt_store_cf+0x94>
   23700:	4608      	mov	r0, r1
   23702:	2904      	cmp	r1, #4
   23704:	dd01      	ble.n	2370a <bt_gatt_store_cf+0x8e>
   23706:	4d19      	ldr	r5, [pc, #100]	; (2376c <bt_gatt_store_cf+0xf0>)
   23708:	615d      	str	r5, [r3, #20]
   2370a:	2808      	cmp	r0, #8
   2370c:	dd00      	ble.n	23710 <bt_gatt_store_cf+0x94>
   2370e:	619c      	str	r4, [r3, #24]
   23710:	290b      	cmp	r1, #11
   23712:	dd26      	ble.n	23762 <bt_gatt_store_cf+0xe6>
   23714:	250c      	movs	r5, #12
   23716:	b13a      	cbz	r2, 23728 <bt_gatt_store_cf+0xac>
   23718:	2103      	movs	r1, #3
   2371a:	7039      	strb	r1, [r7, #0]
   2371c:	2100      	movs	r1, #0
   2371e:	7079      	strb	r1, [r7, #1]
   23720:	70b9      	strb	r1, [r7, #2]
   23722:	70f9      	strb	r1, [r7, #3]
   23724:	6838      	ldr	r0, [r7, #0]
   23726:	6118      	str	r0, [r3, #16]
   23728:	2100      	movs	r1, #0
   2372a:	f36f 0100 	bfc	r1, #0, #1
   2372e:	f36f 0141 	bfc	r1, #1, #1
   23732:	f36f 0182 	bfc	r1, #2, #1
   23736:	f36f 01c5 	bfc	r1, #3, #3
   2373a:	2301      	movs	r3, #1
   2373c:	f363 1188 	bfi	r1, r3, #6, #3
   23740:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   23744:	f365 2152 	bfi	r1, r5, #9, #10
   23748:	f36f 41de 	bfc	r1, #19, #12
   2374c:	f36f 71df 	bfc	r1, #31, #1
   23750:	2300      	movs	r3, #0
   23752:	4807      	ldr	r0, [pc, #28]	; (23770 <bt_gatt_store_cf+0xf4>)
   23754:	f7f3 f8fa 	bl	1694c <z_impl_z_log_msg_static_create>
   23758:	46b5      	mov	sp, r6
		return err;
   2375a:	e7b1      	b.n	236c0 <bt_gatt_store_cf+0x44>
		LOG_ERR("Failed to store Client Features (err %d)", err);
   2375c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   23760:	e7cd      	b.n	236fe <bt_gatt_store_cf+0x82>
   23762:	f06f 051b 	mvn.w	r5, #27
   23766:	e7d6      	b.n	23716 <bt_gatt_store_cf+0x9a>
   23768:	00043a24 	.word	0x00043a24
   2376c:	00043a28 	.word	0x00043a28
   23770:	0003f3c0 	.word	0x0003f3c0

00023774 <bt_gatt_clear_sc>:
{
   23774:	b5f0      	push	{r4, r5, r6, r7, lr}
   23776:	b08d      	sub	sp, #52	; 0x34
   23778:	af02      	add	r7, sp, #8
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2377a:	f7ff fd07 	bl	2318c <find_sc_cfg>
	if (!cfg) {
   2377e:	2800      	cmp	r0, #0
   23780:	d04e      	beq.n	23820 <bt_gatt_clear_sc+0xac>
   23782:	4604      	mov	r4, r0
		if (cfg->id) {
   23784:	7802      	ldrb	r2, [r0, #0]
   23786:	2a00      	cmp	r2, #0
   23788:	d04e      	beq.n	23828 <bt_gatt_clear_sc+0xb4>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
   2378a:	2104      	movs	r1, #4
   2378c:	4638      	mov	r0, r7
   2378e:	f7f0 fe43 	bl	14418 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
   23792:	9700      	str	r7, [sp, #0]
   23794:	1c63      	adds	r3, r4, #1
   23796:	4a2c      	ldr	r2, [pc, #176]	; (23848 <bt_gatt_clear_sc+0xd4>)
   23798:	2124      	movs	r1, #36	; 0x24
   2379a:	1d38      	adds	r0, r7, #4
   2379c:	f7f7 fbf4 	bl	1af88 <bt_settings_encode_key>
		err = settings_delete(key);
   237a0:	1d38      	adds	r0, r7, #4
   237a2:	f013 febb 	bl	3751c <settings_delete>
		if (err) {
   237a6:	4606      	mov	r6, r0
   237a8:	b3b8      	cbz	r0, 2381a <bt_gatt_clear_sc+0xa6>
			LOG_ERR("failed to delete SC (err %d)", err);
   237aa:	466d      	mov	r5, sp
   237ac:	b088      	sub	sp, #32
   237ae:	ab02      	add	r3, sp, #8
   237b0:	f113 0210 	adds.w	r2, r3, #16
   237b4:	d041      	beq.n	2383a <bt_gatt_clear_sc+0xc6>
   237b6:	210c      	movs	r1, #12
   237b8:	b14a      	cbz	r2, 237ce <bt_gatt_clear_sc+0x5a>
   237ba:	4608      	mov	r0, r1
   237bc:	2904      	cmp	r1, #4
   237be:	dd03      	ble.n	237c8 <bt_gatt_clear_sc+0x54>
   237c0:	f8df c088 	ldr.w	ip, [pc, #136]	; 2384c <bt_gatt_clear_sc+0xd8>
   237c4:	f8c3 c014 	str.w	ip, [r3, #20]
   237c8:	2808      	cmp	r0, #8
   237ca:	dd00      	ble.n	237ce <bt_gatt_clear_sc+0x5a>
   237cc:	619e      	str	r6, [r3, #24]
   237ce:	290b      	cmp	r1, #11
   237d0:	dd36      	ble.n	23840 <bt_gatt_clear_sc+0xcc>
   237d2:	f04f 0c0c 	mov.w	ip, #12
   237d6:	b13a      	cbz	r2, 237e8 <bt_gatt_clear_sc+0x74>
   237d8:	2103      	movs	r1, #3
   237da:	7039      	strb	r1, [r7, #0]
   237dc:	2100      	movs	r1, #0
   237de:	7079      	strb	r1, [r7, #1]
   237e0:	70b9      	strb	r1, [r7, #2]
   237e2:	70f9      	strb	r1, [r7, #3]
   237e4:	6838      	ldr	r0, [r7, #0]
   237e6:	6118      	str	r0, [r3, #16]
   237e8:	2100      	movs	r1, #0
   237ea:	f36f 0100 	bfc	r1, #0, #1
   237ee:	f36f 0141 	bfc	r1, #1, #1
   237f2:	f36f 0182 	bfc	r1, #2, #1
   237f6:	f36f 01c5 	bfc	r1, #3, #3
   237fa:	2301      	movs	r3, #1
   237fc:	f363 1188 	bfi	r1, r3, #6, #3
   23800:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   23804:	f363 2152 	bfi	r1, r3, #9, #10
   23808:	f36f 41de 	bfc	r1, #19, #12
   2380c:	f36f 71df 	bfc	r1, #31, #1
   23810:	2300      	movs	r3, #0
   23812:	480f      	ldr	r0, [pc, #60]	; (23850 <bt_gatt_clear_sc+0xdc>)
   23814:	f7f3 f89a 	bl	1694c <z_impl_z_log_msg_static_create>
   23818:	46ad      	mov	sp, r5
	clear_sc_cfg(cfg);
   2381a:	4620      	mov	r0, r4
   2381c:	f017 f890 	bl	3a940 <clear_sc_cfg>
}
   23820:	2000      	movs	r0, #0
   23822:	372c      	adds	r7, #44	; 0x2c
   23824:	46bd      	mov	sp, r7
   23826:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
   23828:	2300      	movs	r3, #0
   2382a:	9300      	str	r3, [sp, #0]
   2382c:	1c43      	adds	r3, r0, #1
   2382e:	4a06      	ldr	r2, [pc, #24]	; (23848 <bt_gatt_clear_sc+0xd4>)
   23830:	2124      	movs	r1, #36	; 0x24
   23832:	1d38      	adds	r0, r7, #4
   23834:	f7f7 fba8 	bl	1af88 <bt_settings_encode_key>
   23838:	e7b2      	b.n	237a0 <bt_gatt_clear_sc+0x2c>
			LOG_ERR("failed to delete SC (err %d)", err);
   2383a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2383e:	e7bb      	b.n	237b8 <bt_gatt_clear_sc+0x44>
   23840:	f06f 0c1b 	mvn.w	ip, #27
   23844:	e7c7      	b.n	237d6 <bt_gatt_clear_sc+0x62>
   23846:	bf00      	nop
   23848:	000439e4 	.word	0x000439e4
   2384c:	00043a54 	.word	0x00043a54
   23850:	0003f3c0 	.word	0x0003f3c0

00023854 <sc_clear>:
{
   23854:	b5f0      	push	{r4, r5, r6, r7, lr}
   23856:	b083      	sub	sp, #12
   23858:	af00      	add	r7, sp, #0
   2385a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2385c:	f100 0590 	add.w	r5, r0, #144	; 0x90
   23860:	4629      	mov	r1, r5
   23862:	7a00      	ldrb	r0, [r0, #8]
   23864:	f015 f88b 	bl	3897e <bt_addr_le_is_bonded>
   23868:	2800      	cmp	r0, #0
   2386a:	d042      	beq.n	238f2 <sc_clear+0x9e>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   2386c:	4629      	mov	r1, r5
   2386e:	7a20      	ldrb	r0, [r4, #8]
   23870:	f7ff ff80 	bl	23774 <bt_gatt_clear_sc>
		if (err) {
   23874:	4604      	mov	r4, r0
   23876:	2800      	cmp	r0, #0
   23878:	d042      	beq.n	23900 <sc_clear+0xac>
			LOG_ERR("Failed to clear SC %d", err);
   2387a:	466d      	mov	r5, sp
   2387c:	b088      	sub	sp, #32
   2387e:	466b      	mov	r3, sp
   23880:	f113 0210 	adds.w	r2, r3, #16
   23884:	d02f      	beq.n	238e6 <sc_clear+0x92>
   23886:	210c      	movs	r1, #12
   23888:	b13a      	cbz	r2, 2389a <sc_clear+0x46>
   2388a:	4608      	mov	r0, r1
   2388c:	2904      	cmp	r1, #4
   2388e:	dd01      	ble.n	23894 <sc_clear+0x40>
   23890:	4e1d      	ldr	r6, [pc, #116]	; (23908 <sc_clear+0xb4>)
   23892:	615e      	str	r6, [r3, #20]
   23894:	2808      	cmp	r0, #8
   23896:	dd00      	ble.n	2389a <sc_clear+0x46>
   23898:	619c      	str	r4, [r3, #24]
   2389a:	290b      	cmp	r1, #11
   2389c:	dd26      	ble.n	238ec <sc_clear+0x98>
   2389e:	240c      	movs	r4, #12
   238a0:	b13a      	cbz	r2, 238b2 <sc_clear+0x5e>
   238a2:	2103      	movs	r1, #3
   238a4:	7139      	strb	r1, [r7, #4]
   238a6:	2100      	movs	r1, #0
   238a8:	7179      	strb	r1, [r7, #5]
   238aa:	71b9      	strb	r1, [r7, #6]
   238ac:	71f9      	strb	r1, [r7, #7]
   238ae:	6878      	ldr	r0, [r7, #4]
   238b0:	6118      	str	r0, [r3, #16]
   238b2:	2100      	movs	r1, #0
   238b4:	f36f 0100 	bfc	r1, #0, #1
   238b8:	f36f 0141 	bfc	r1, #1, #1
   238bc:	f36f 0182 	bfc	r1, #2, #1
   238c0:	f36f 01c5 	bfc	r1, #3, #3
   238c4:	2301      	movs	r3, #1
   238c6:	f363 1188 	bfi	r1, r3, #6, #3
   238ca:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
   238ce:	f364 2152 	bfi	r1, r4, #9, #10
   238d2:	f36f 41de 	bfc	r1, #19, #12
   238d6:	f36f 71df 	bfc	r1, #31, #1
   238da:	2300      	movs	r3, #0
   238dc:	480b      	ldr	r0, [pc, #44]	; (2390c <sc_clear+0xb8>)
   238de:	f7f3 f835 	bl	1694c <z_impl_z_log_msg_static_create>
   238e2:	46ad      	mov	sp, r5
   238e4:	e00c      	b.n	23900 <sc_clear+0xac>
   238e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   238ea:	e7cd      	b.n	23888 <sc_clear+0x34>
   238ec:	f06f 041b 	mvn.w	r4, #27
   238f0:	e7d6      	b.n	238a0 <sc_clear+0x4c>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   238f2:	4629      	mov	r1, r5
   238f4:	7a20      	ldrb	r0, [r4, #8]
   238f6:	f7ff fc49 	bl	2318c <find_sc_cfg>
		if (cfg) {
   238fa:	b108      	cbz	r0, 23900 <sc_clear+0xac>
			clear_sc_cfg(cfg);
   238fc:	f017 f820 	bl	3a940 <clear_sc_cfg>
}
   23900:	370c      	adds	r7, #12
   23902:	46bd      	mov	sp, r7
   23904:	bdf0      	pop	{r4, r5, r6, r7, pc}
   23906:	bf00      	nop
   23908:	00043a74 	.word	0x00043a74
   2390c:	0003f3c0 	.word	0x0003f3c0

00023910 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
   23910:	b508      	push	{r3, lr}
   23912:	4613      	mov	r3, r2
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   23914:	6881      	ldr	r1, [r0, #8]
   23916:	4a08      	ldr	r2, [pc, #32]	; (23938 <remove_peer_from_attr+0x28>)
   23918:	4291      	cmp	r1, r2
   2391a:	d001      	beq.n	23920 <remove_peer_from_attr+0x10>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   2391c:	2001      	movs	r0, #1
   2391e:	bd08      	pop	{r3, pc}
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   23920:	791a      	ldrb	r2, [r3, #4]
   23922:	6819      	ldr	r1, [r3, #0]
   23924:	68c0      	ldr	r0, [r0, #12]
   23926:	f016 ff75 	bl	3a814 <ccc_find_cfg>
	if (cfg) {
   2392a:	2800      	cmp	r0, #0
   2392c:	d0f6      	beq.n	2391c <remove_peer_from_attr+0xc>
		memset(cfg, 0, sizeof(*cfg));
   2392e:	220a      	movs	r2, #10
   23930:	2100      	movs	r1, #0
   23932:	f014 fd91 	bl	38458 <memset>
   23936:	e7f1      	b.n	2391c <remove_peer_from_attr+0xc>
   23938:	00023ba1 	.word	0x00023ba1

0002393c <sc_indicate>:
{
   2393c:	b510      	push	{r4, lr}
   2393e:	4602      	mov	r2, r0
   23940:	460b      	mov	r3, r1
   23942:	4c13      	ldr	r4, [pc, #76]	; (23990 <sc_indicate+0x54>)
   23944:	e8d4 1fef 	ldaex	r1, [r4]
   23948:	f041 0001 	orr.w	r0, r1, #1
   2394c:	e8c4 0fec 	stlex	ip, r0, [r4]
   23950:	f1bc 0f00 	cmp.w	ip, #0
   23954:	d1f6      	bne.n	23944 <sc_indicate+0x8>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   23956:	f011 0f01 	tst.w	r1, #1
   2395a:	d10a      	bne.n	23972 <sc_indicate+0x36>
		gatt_sc.start = start;
   2395c:	f1a4 0150 	sub.w	r1, r4, #80	; 0x50
   23960:	830a      	strh	r2, [r1, #24]
		gatt_sc.end = end;
   23962:	834b      	strh	r3, [r1, #26]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23964:	4b0a      	ldr	r3, [pc, #40]	; (23990 <sc_indicate+0x54>)
   23966:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
   2396a:	f013 0f02 	tst.w	r3, #2
   2396e:	d007      	beq.n	23980 <sc_indicate+0x44>
}
   23970:	bd10      	pop	{r4, pc}
	if (!update_range(&gatt_sc.start, &gatt_sc.end, start, end)) {
   23972:	4908      	ldr	r1, [pc, #32]	; (23994 <sc_indicate+0x58>)
   23974:	1e88      	subs	r0, r1, #2
   23976:	f016 fe47 	bl	3a608 <update_range>
   2397a:	2800      	cmp	r0, #0
   2397c:	d1f2      	bne.n	23964 <sc_indicate+0x28>
   2397e:	e7f7      	b.n	23970 <sc_indicate+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   23980:	f44f 72a4 	mov.w	r2, #328	; 0x148
   23984:	2300      	movs	r3, #0
   23986:	4804      	ldr	r0, [pc, #16]	; (23998 <sc_indicate+0x5c>)
   23988:	f00f f868 	bl	32a5c <k_work_reschedule>
   2398c:	e7f0      	b.n	23970 <sc_indicate+0x34>
   2398e:	bf00      	nop
   23990:	2000b790 	.word	0x2000b790
   23994:	2000b75a 	.word	0x2000b75a
   23998:	2000b760 	.word	0x2000b760

0002399c <sc_indicate_rsp>:
{
   2399c:	b510      	push	{r4, lr}
   2399e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   239a0:	4b16      	ldr	r3, [pc, #88]	; (239fc <sc_indicate_rsp+0x60>)
   239a2:	e8d3 2fef 	ldaex	r2, [r3]
   239a6:	f022 0202 	bic.w	r2, r2, #2
   239aa:	e8c3 2fe1 	stlex	r1, r2, [r3]
   239ae:	2900      	cmp	r1, #0
   239b0:	d1f7      	bne.n	239a2 <sc_indicate_rsp+0x6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   239b2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   239b6:	f013 0f01 	tst.w	r3, #1
   239ba:	d104      	bne.n	239c6 <sc_indicate_rsp+0x2a>
	if (bt_att_fixed_chan_only(conn)) {
   239bc:	4620      	mov	r0, r4
   239be:	f016 fdbc 	bl	3a53a <bt_att_fixed_chan_only>
   239c2:	b930      	cbnz	r0, 239d2 <sc_indicate_rsp+0x36>
}
   239c4:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   239c6:	2200      	movs	r2, #0
   239c8:	2300      	movs	r3, #0
   239ca:	480d      	ldr	r0, [pc, #52]	; (23a00 <sc_indicate_rsp+0x64>)
   239cc:	f00f f846 	bl	32a5c <k_work_reschedule>
   239d0:	e7f4      	b.n	239bc <sc_indicate_rsp+0x20>
		cfg = find_cf_cfg(conn);
   239d2:	4620      	mov	r0, r4
   239d4:	f7ff fbb4 	bl	23140 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   239d8:	4603      	mov	r3, r0
   239da:	2800      	cmp	r0, #0
   239dc:	d0f2      	beq.n	239c4 <sc_indicate_rsp+0x28>
   239de:	7a02      	ldrb	r2, [r0, #8]
   239e0:	f012 0f01 	tst.w	r2, #1
   239e4:	d0ee      	beq.n	239c4 <sc_indicate_rsp+0x28>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   239e6:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   239e8:	e8d3 1fef 	ldaex	r1, [r3]
   239ec:	f041 0101 	orr.w	r1, r1, #1
   239f0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   239f4:	2a00      	cmp	r2, #0
   239f6:	d0e5      	beq.n	239c4 <sc_indicate_rsp+0x28>
   239f8:	e7f6      	b.n	239e8 <sc_indicate_rsp+0x4c>
   239fa:	bf00      	nop
   239fc:	2000b790 	.word	0x2000b790
   23a00:	2000b760 	.word	0x2000b760

00023a04 <gatt_write_ccc_rsp>:
{
   23a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a06:	b089      	sub	sp, #36	; 0x24
   23a08:	4606      	mov	r6, r0
   23a0a:	460d      	mov	r5, r1
   23a0c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   23a0e:	f104 0314 	add.w	r3, r4, #20
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23a12:	e8d3 1fef 	ldaex	r1, [r3]
   23a16:	f021 0104 	bic.w	r1, r1, #4
   23a1a:	e8c3 1fe2 	stlex	r2, r1, [r3]
   23a1e:	2a00      	cmp	r2, #0
   23a20:	d1f7      	bne.n	23a12 <gatt_write_ccc_rsp+0xe>
	if (err) {
   23a22:	b975      	cbnz	r5, 23a42 <gatt_write_ccc_rsp+0x3e>
	} else if (!params->value) {
   23a24:	8a23      	ldrh	r3, [r4, #16]
   23a26:	b923      	cbnz	r3, 23a32 <gatt_write_ccc_rsp+0x2e>
		params->notify(conn, params, NULL, 0);
   23a28:	6827      	ldr	r7, [r4, #0]
   23a2a:	461a      	mov	r2, r3
   23a2c:	4621      	mov	r1, r4
   23a2e:	4630      	mov	r0, r6
   23a30:	47b8      	blx	r7
	if (params->subscribe) {
   23a32:	6863      	ldr	r3, [r4, #4]
   23a34:	b31b      	cbz	r3, 23a7e <gatt_write_ccc_rsp+0x7a>
		params->subscribe(conn, err, params);
   23a36:	4622      	mov	r2, r4
   23a38:	4629      	mov	r1, r5
   23a3a:	4630      	mov	r0, r6
   23a3c:	4798      	blx	r3
}
   23a3e:	b009      	add	sp, #36	; 0x24
   23a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
   23a42:	4630      	mov	r0, r6
   23a44:	f7ff fbee 	bl	23224 <gatt_sub_find>
		if (!sub) {
   23a48:	4601      	mov	r1, r0
   23a4a:	2800      	cmp	r0, #0
   23a4c:	d0f7      	beq.n	23a3e <gatt_write_ccc_rsp+0x3a>
	return list->head;
   23a4e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   23a50:	b10b      	cbz	r3, 23a56 <gatt_write_ccc_rsp+0x52>
	return node->next;
   23a52:	681a      	ldr	r2, [r3, #0]
   23a54:	e009      	b.n	23a6a <gatt_write_ccc_rsp+0x66>
Z_GENLIST_PEEK_NEXT(slist, snode)
   23a56:	461a      	mov	r2, r3
   23a58:	e007      	b.n	23a6a <gatt_write_ccc_rsp+0x66>
				gatt_sub_remove(conn, sub, tmp, params);
   23a5a:	4623      	mov	r3, r4
   23a5c:	4630      	mov	r0, r6
   23a5e:	f016 ff0b 	bl	3a878 <gatt_sub_remove>
				break;
   23a62:	e7e6      	b.n	23a32 <gatt_write_ccc_rsp+0x2e>
   23a64:	4610      	mov	r0, r2
   23a66:	4613      	mov	r3, r2
   23a68:	4602      	mov	r2, r0
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   23a6a:	2b00      	cmp	r3, #0
   23a6c:	d0e1      	beq.n	23a32 <gatt_write_ccc_rsp+0x2e>
			if (node == &params->node) {
   23a6e:	f104 0c18 	add.w	ip, r4, #24
   23a72:	459c      	cmp	ip, r3
   23a74:	d0f1      	beq.n	23a5a <gatt_write_ccc_rsp+0x56>
   23a76:	2a00      	cmp	r2, #0
   23a78:	d0f4      	beq.n	23a64 <gatt_write_ccc_rsp+0x60>
	return node->next;
   23a7a:	6810      	ldr	r0, [r2, #0]
   23a7c:	e7f3      	b.n	23a66 <gatt_write_ccc_rsp+0x62>
	} else if (params->write) {
   23a7e:	68a3      	ldr	r3, [r4, #8]
   23a80:	2b00      	cmp	r3, #0
   23a82:	d0dc      	beq.n	23a3e <gatt_write_ccc_rsp+0x3a>
		LOG_WRN("write callback is deprecated, use subscribe cb instead");
   23a84:	4b15      	ldr	r3, [pc, #84]	; (23adc <gatt_write_ccc_rsp+0xd8>)
   23a86:	9307      	str	r3, [sp, #28]
   23a88:	2302      	movs	r3, #2
   23a8a:	f88d 3004 	strb.w	r3, [sp, #4]
   23a8e:	2700      	movs	r7, #0
   23a90:	f88d 7005 	strb.w	r7, [sp, #5]
   23a94:	f88d 7006 	strb.w	r7, [sp, #6]
   23a98:	f88d 7007 	strb.w	r7, [sp, #7]
   23a9c:	9a01      	ldr	r2, [sp, #4]
   23a9e:	9206      	str	r2, [sp, #24]
   23aa0:	4639      	mov	r1, r7
   23aa2:	f367 0100 	bfi	r1, r7, #0, #1
   23aa6:	f367 0141 	bfi	r1, r7, #1, #1
   23aaa:	f367 0182 	bfi	r1, r7, #2, #1
   23aae:	f367 01c5 	bfi	r1, r7, #3, #3
   23ab2:	f363 1188 	bfi	r1, r3, #6, #3
   23ab6:	2308      	movs	r3, #8
   23ab8:	f363 2152 	bfi	r1, r3, #9, #10
   23abc:	f367 41de 	bfi	r1, r7, #19, #12
   23ac0:	f367 71df 	bfi	r1, r7, #31, #1
   23ac4:	463b      	mov	r3, r7
   23ac6:	aa06      	add	r2, sp, #24
   23ac8:	4805      	ldr	r0, [pc, #20]	; (23ae0 <gatt_write_ccc_rsp+0xdc>)
   23aca:	f7f2 ff3f 	bl	1694c <z_impl_z_log_msg_static_create>
		params->write(conn, err, NULL);
   23ace:	68a3      	ldr	r3, [r4, #8]
   23ad0:	463a      	mov	r2, r7
   23ad2:	4629      	mov	r1, r5
   23ad4:	4630      	mov	r0, r6
   23ad6:	4798      	blx	r3
   23ad8:	e7b1      	b.n	23a3e <gatt_write_ccc_rsp+0x3a>
   23ada:	bf00      	nop
   23adc:	00043a8c 	.word	0x00043a8c
   23ae0:	0003f3c0 	.word	0x0003f3c0

00023ae4 <sc_commit>:
{
   23ae4:	b508      	push	{r3, lr}
   23ae6:	4b0b      	ldr	r3, [pc, #44]	; (23b14 <sc_commit+0x30>)
   23ae8:	e8d3 2fef 	ldaex	r2, [r3]
   23aec:	f022 0202 	bic.w	r2, r2, #2
   23af0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   23af4:	2900      	cmp	r1, #0
   23af6:	d1f7      	bne.n	23ae8 <sc_commit+0x4>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23af8:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   23afc:	f013 0f01 	tst.w	r3, #1
   23b00:	d101      	bne.n	23b06 <sc_commit+0x22>
}
   23b02:	2000      	movs	r0, #0
   23b04:	bd08      	pop	{r3, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   23b06:	f44f 72a4 	mov.w	r2, #328	; 0x148
   23b0a:	2300      	movs	r3, #0
   23b0c:	4802      	ldr	r0, [pc, #8]	; (23b18 <sc_commit+0x34>)
   23b0e:	f00e ffa5 	bl	32a5c <k_work_reschedule>
   23b12:	e7f6      	b.n	23b02 <sc_commit+0x1e>
   23b14:	2000b790 	.word	0x2000b790
   23b18:	2000b760 	.word	0x2000b760

00023b1c <gatt_ccc_conn_is_queued>:
{
   23b1c:	b510      	push	{r4, lr}
   23b1e:	4604      	mov	r4, r0
	return (conn == gatt_ccc_store.conn_list[bt_conn_index(conn)]);
   23b20:	f7fc fd84 	bl	2062c <bt_conn_index>
   23b24:	4b03      	ldr	r3, [pc, #12]	; (23b34 <gatt_ccc_conn_is_queued+0x18>)
   23b26:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   23b2a:	42a0      	cmp	r0, r4
   23b2c:	bf14      	ite	ne
   23b2e:	2000      	movne	r0, #0
   23b30:	2001      	moveq	r0, #1
   23b32:	bd10      	pop	{r4, pc}
   23b34:	2000b690 	.word	0x2000b690

00023b38 <gatt_ccc_conn_unqueue>:
{
   23b38:	b510      	push	{r4, lr}
	uint8_t index = bt_conn_index(conn);
   23b3a:	f7fc fd77 	bl	2062c <bt_conn_index>
   23b3e:	4604      	mov	r4, r0
	if (gatt_ccc_store.conn_list[index] != NULL) {
   23b40:	4b05      	ldr	r3, [pc, #20]	; (23b58 <gatt_ccc_conn_unqueue+0x20>)
   23b42:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   23b46:	b128      	cbz	r0, 23b54 <gatt_ccc_conn_unqueue+0x1c>
		bt_conn_unref(gatt_ccc_store.conn_list[index]);
   23b48:	f7fc fbb6 	bl	202b8 <bt_conn_unref>
		gatt_ccc_store.conn_list[index] = NULL;
   23b4c:	4b02      	ldr	r3, [pc, #8]	; (23b58 <gatt_ccc_conn_unqueue+0x20>)
   23b4e:	2200      	movs	r2, #0
   23b50:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   23b54:	bd10      	pop	{r4, pc}
   23b56:	bf00      	nop
   23b58:	2000b690 	.word	0x2000b690

00023b5c <gatt_ccc_conn_enqueue>:
{
   23b5c:	b538      	push	{r3, r4, r5, lr}
   23b5e:	4604      	mov	r4, r0
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   23b60:	f7ff ffdc 	bl	23b1c <gatt_ccc_conn_is_queued>
   23b64:	b100      	cbz	r0, 23b68 <gatt_ccc_conn_enqueue+0xc>
}
   23b66:	bd38      	pop	{r3, r4, r5, pc}
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23b68:	f104 0190 	add.w	r1, r4, #144	; 0x90
   23b6c:	7a20      	ldrb	r0, [r4, #8]
   23b6e:	f014 ff06 	bl	3897e <bt_addr_le_is_bonded>
	if ((!gatt_ccc_conn_is_queued(conn)) &&
   23b72:	2800      	cmp	r0, #0
   23b74:	d0f7      	beq.n	23b66 <gatt_ccc_conn_enqueue+0xa>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   23b76:	4620      	mov	r0, r4
   23b78:	f7fc fd58 	bl	2062c <bt_conn_index>
   23b7c:	4605      	mov	r5, r0
			bt_conn_ref(conn);
   23b7e:	4620      	mov	r0, r4
   23b80:	f7fc fb70 	bl	20264 <bt_conn_ref>
		gatt_ccc_store.conn_list[bt_conn_index(conn)] =
   23b84:	4905      	ldr	r1, [pc, #20]	; (23b9c <gatt_ccc_conn_enqueue+0x40>)
   23b86:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
		k_work_reschedule(&gatt_ccc_store.work, CCC_STORE_DELAY);
   23b8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   23b8e:	2300      	movs	r3, #0
   23b90:	f101 0008 	add.w	r0, r1, #8
   23b94:	f00e ff62 	bl	32a5c <k_work_reschedule>
}
   23b98:	e7e5      	b.n	23b66 <gatt_ccc_conn_enqueue+0xa>
   23b9a:	bf00      	nop
   23b9c:	2000b690 	.word	0x2000b690

00023ba0 <bt_gatt_attr_write_ccc>:
{
   23ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23ba4:	b088      	sub	sp, #32
   23ba6:	461c      	mov	r4, r3
   23ba8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   23bac:	f8d1 800c 	ldr.w	r8, [r1, #12]
	if (offset) {
   23bb0:	2b00      	cmp	r3, #0
   23bb2:	d176      	bne.n	23ca2 <bt_gatt_attr_write_ccc+0x102>
   23bb4:	4606      	mov	r6, r0
   23bb6:	460f      	mov	r7, r1
	if (!len || len > sizeof(uint16_t)) {
   23bb8:	1e63      	subs	r3, r4, #1
   23bba:	b29b      	uxth	r3, r3
   23bbc:	2b01      	cmp	r3, #1
   23bbe:	d873      	bhi.n	23ca8 <bt_gatt_attr_write_ccc+0x108>
	if (len < sizeof(uint16_t)) {
   23bc0:	2c01      	cmp	r4, #1
   23bc2:	d925      	bls.n	23c10 <bt_gatt_attr_write_ccc+0x70>
   23bc4:	7853      	ldrb	r3, [r2, #1]
   23bc6:	7815      	ldrb	r5, [r2, #0]
   23bc8:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   23bcc:	4641      	mov	r1, r8
   23bce:	4630      	mov	r0, r6
   23bd0:	f7ff fb00 	bl	231d4 <find_ccc_cfg>
	if (!cfg) {
   23bd4:	4681      	mov	r9, r0
   23bd6:	b1e8      	cbz	r0, 23c14 <bt_gatt_attr_write_ccc+0x74>
	if (ccc->cfg_write) {
   23bd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
   23bdc:	b143      	cbz	r3, 23bf0 <bt_gatt_attr_write_ccc+0x50>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   23bde:	462a      	mov	r2, r5
   23be0:	4639      	mov	r1, r7
   23be2:	4630      	mov	r0, r6
   23be4:	4798      	blx	r3
		if (write < 0) {
   23be6:	2800      	cmp	r0, #0
   23be8:	db0f      	blt.n	23c0a <bt_gatt_attr_write_ccc+0x6a>
		if (write != sizeof(value) && write != 1) {
   23bea:	3801      	subs	r0, #1
   23bec:	2801      	cmp	r0, #1
   23bee:	d85e      	bhi.n	23cae <bt_gatt_attr_write_ccc+0x10e>
	value_changed = cfg->value != value;
   23bf0:	f8b9 a008 	ldrh.w	sl, [r9, #8]
	cfg->value = value;
   23bf4:	f8a9 5008 	strh.w	r5, [r9, #8]
	if (cfg->value != ccc->value) {
   23bf8:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   23bfc:	429d      	cmp	r5, r3
   23bfe:	d143      	bne.n	23c88 <bt_gatt_attr_write_ccc+0xe8>
	if (value_changed) {
   23c00:	45aa      	cmp	sl, r5
   23c02:	d146      	bne.n	23c92 <bt_gatt_attr_write_ccc+0xf2>
	if (!value) {
   23c04:	2d00      	cmp	r5, #0
   23c06:	d048      	beq.n	23c9a <bt_gatt_attr_write_ccc+0xfa>
	return len;
   23c08:	4620      	mov	r0, r4
}
   23c0a:	b008      	add	sp, #32
   23c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = *(uint8_t *)buf;
   23c10:	7815      	ldrb	r5, [r2, #0]
   23c12:	e7db      	b.n	23bcc <bt_gatt_attr_write_ccc+0x2c>
		if (!value) {
   23c14:	b90d      	cbnz	r5, 23c1a <bt_gatt_attr_write_ccc+0x7a>
			return len;
   23c16:	4620      	mov	r0, r4
   23c18:	e7f7      	b.n	23c0a <bt_gatt_attr_write_ccc+0x6a>
		cfg = find_ccc_cfg(NULL, ccc);
   23c1a:	4641      	mov	r1, r8
   23c1c:	2000      	movs	r0, #0
   23c1e:	f7ff fad9 	bl	231d4 <find_ccc_cfg>
		if (!cfg) {
   23c22:	4681      	mov	r9, r0
   23c24:	b148      	cbz	r0, 23c3a <bt_gatt_attr_write_ccc+0x9a>
	memcpy(dst, src, sizeof(*dst));
   23c26:	2207      	movs	r2, #7
   23c28:	f106 0190 	add.w	r1, r6, #144	; 0x90
   23c2c:	3001      	adds	r0, #1
   23c2e:	f014 fbe4 	bl	383fa <memcpy>
		cfg->id = conn->id;
   23c32:	7a33      	ldrb	r3, [r6, #8]
   23c34:	f889 3000 	strb.w	r3, [r9]
   23c38:	e7ce      	b.n	23bd8 <bt_gatt_attr_write_ccc+0x38>
			LOG_WRN("No space to store CCC cfg");
   23c3a:	4b1e      	ldr	r3, [pc, #120]	; (23cb4 <bt_gatt_attr_write_ccc+0x114>)
   23c3c:	9307      	str	r3, [sp, #28]
   23c3e:	2202      	movs	r2, #2
   23c40:	f88d 2004 	strb.w	r2, [sp, #4]
   23c44:	2300      	movs	r3, #0
   23c46:	f88d 3005 	strb.w	r3, [sp, #5]
   23c4a:	f88d 3006 	strb.w	r3, [sp, #6]
   23c4e:	f88d 3007 	strb.w	r3, [sp, #7]
   23c52:	9901      	ldr	r1, [sp, #4]
   23c54:	9106      	str	r1, [sp, #24]
   23c56:	4619      	mov	r1, r3
   23c58:	f363 0100 	bfi	r1, r3, #0, #1
   23c5c:	f363 0141 	bfi	r1, r3, #1, #1
   23c60:	f363 0182 	bfi	r1, r3, #2, #1
   23c64:	f363 01c5 	bfi	r1, r3, #3, #3
   23c68:	f362 1188 	bfi	r1, r2, #6, #3
   23c6c:	2208      	movs	r2, #8
   23c6e:	f362 2152 	bfi	r1, r2, #9, #10
   23c72:	f363 41de 	bfi	r1, r3, #19, #12
   23c76:	f363 71df 	bfi	r1, r3, #31, #1
   23c7a:	aa06      	add	r2, sp, #24
   23c7c:	480e      	ldr	r0, [pc, #56]	; (23cb8 <bt_gatt_attr_write_ccc+0x118>)
   23c7e:	f7f2 fe65 	bl	1694c <z_impl_z_log_msg_static_create>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   23c82:	f06f 0010 	mvn.w	r0, #16
   23c86:	e7c0      	b.n	23c0a <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
   23c88:	4641      	mov	r1, r8
   23c8a:	4638      	mov	r0, r7
   23c8c:	f016 fd18 	bl	3a6c0 <gatt_ccc_changed>
   23c90:	e7b6      	b.n	23c00 <bt_gatt_attr_write_ccc+0x60>
		gatt_ccc_conn_enqueue(conn);
   23c92:	4630      	mov	r0, r6
   23c94:	f7ff ff62 	bl	23b5c <gatt_ccc_conn_enqueue>
   23c98:	e7b4      	b.n	23c04 <bt_gatt_attr_write_ccc+0x64>
		clear_ccc_cfg(cfg);
   23c9a:	4648      	mov	r0, r9
   23c9c:	f7ff fbb0 	bl	23400 <clear_ccc_cfg>
   23ca0:	e7b2      	b.n	23c08 <bt_gatt_attr_write_ccc+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   23ca2:	f06f 0006 	mvn.w	r0, #6
   23ca6:	e7b0      	b.n	23c0a <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   23ca8:	f06f 000c 	mvn.w	r0, #12
   23cac:	e7ad      	b.n	23c0a <bt_gatt_attr_write_ccc+0x6a>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   23cae:	f06f 000d 	mvn.w	r0, #13
   23cb2:	e7aa      	b.n	23c0a <bt_gatt_attr_write_ccc+0x6a>
   23cb4:	00043ac4 	.word	0x00043ac4
   23cb8:	0003f3c0 	.word	0x0003f3c0

00023cbc <disconnected_cb>:
{
   23cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   23cc0:	6881      	ldr	r1, [r0, #8]
   23cc2:	4b2c      	ldr	r3, [pc, #176]	; (23d74 <disconnected_cb+0xb8>)
   23cc4:	4299      	cmp	r1, r3
   23cc6:	d002      	beq.n	23cce <disconnected_cb+0x12>
}
   23cc8:	2001      	movs	r0, #1
   23cca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23cce:	4604      	mov	r4, r0
   23cd0:	4616      	mov	r6, r2
	ccc = attr->user_data;
   23cd2:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   23cd4:	897b      	ldrh	r3, [r7, #10]
   23cd6:	2b00      	cmp	r3, #0
   23cd8:	d0f6      	beq.n	23cc8 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23cda:	2500      	movs	r5, #0
	value_used = false;
   23cdc:	46aa      	mov	sl, r5
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23cde:	b15d      	cbz	r5, 23cf8 <disconnected_cb+0x3c>
	if (!value_used) {
   23ce0:	f1ba 0f00 	cmp.w	sl, #0
   23ce4:	d1f0      	bne.n	23cc8 <disconnected_cb+0xc>
		ccc->value = 0U;
   23ce6:	2300      	movs	r3, #0
   23ce8:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   23cea:	68fb      	ldr	r3, [r7, #12]
   23cec:	2b00      	cmp	r3, #0
   23cee:	d0eb      	beq.n	23cc8 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   23cf0:	2100      	movs	r1, #0
   23cf2:	4620      	mov	r0, r4
   23cf4:	4798      	blx	r3
   23cf6:	e7e7      	b.n	23cc8 <disconnected_cb+0xc>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   23cf8:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   23cfc:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   23d00:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   23d04:	b1cb      	cbz	r3, 23d3a <disconnected_cb+0x7e>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   23d06:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   23d0a:	f108 0901 	add.w	r9, r8, #1
   23d0e:	464a      	mov	r2, r9
   23d10:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   23d14:	4630      	mov	r0, r6
   23d16:	f015 fb39 	bl	3938c <bt_conn_is_peer_addr_le>
   23d1a:	b998      	cbnz	r0, 23d44 <disconnected_cb+0x88>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   23d1c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   23d20:	4649      	mov	r1, r9
   23d22:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   23d26:	f7fc fedb 	bl	20ae0 <bt_conn_lookup_addr_le>
			if (tmp) {
   23d2a:	4603      	mov	r3, r0
   23d2c:	b128      	cbz	r0, 23d3a <disconnected_cb+0x7e>
				if (tmp->state == BT_CONN_CONNECTED) {
   23d2e:	7b42      	ldrb	r2, [r0, #13]
   23d30:	2a07      	cmp	r2, #7
   23d32:	d004      	beq.n	23d3e <disconnected_cb+0x82>
				bt_conn_unref(tmp);
   23d34:	4618      	mov	r0, r3
   23d36:	f7fc fabf 	bl	202b8 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   23d3a:	3501      	adds	r5, #1
   23d3c:	e7cf      	b.n	23cde <disconnected_cb+0x22>
					value_used = true;
   23d3e:	f04f 0a01 	mov.w	sl, #1
   23d42:	e7f7      	b.n	23d34 <disconnected_cb+0x78>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23d44:	f106 0b90 	add.w	fp, r6, #144	; 0x90
   23d48:	4659      	mov	r1, fp
   23d4a:	7a30      	ldrb	r0, [r6, #8]
   23d4c:	f014 fe17 	bl	3897e <bt_addr_le_is_bonded>
   23d50:	b950      	cbnz	r0, 23d68 <disconnected_cb+0xac>
				if (ccc == &sc_ccc) {
   23d52:	4b09      	ldr	r3, [pc, #36]	; (23d78 <disconnected_cb+0xbc>)
   23d54:	429f      	cmp	r7, r3
   23d56:	d003      	beq.n	23d60 <disconnected_cb+0xa4>
				clear_ccc_cfg(cfg);
   23d58:	4640      	mov	r0, r8
   23d5a:	f7ff fb51 	bl	23400 <clear_ccc_cfg>
   23d5e:	e7ec      	b.n	23d3a <disconnected_cb+0x7e>
					sc_clear(conn);
   23d60:	4630      	mov	r0, r6
   23d62:	f7ff fd77 	bl	23854 <sc_clear>
   23d66:	e7f7      	b.n	23d58 <disconnected_cb+0x9c>
   23d68:	2207      	movs	r2, #7
   23d6a:	4659      	mov	r1, fp
   23d6c:	4648      	mov	r0, r9
   23d6e:	f014 fb44 	bl	383fa <memcpy>
}
   23d72:	e7e2      	b.n	23d3a <disconnected_cb+0x7e>
   23d74:	00023ba1 	.word	0x00023ba1
   23d78:	20008510 	.word	0x20008510

00023d7c <gatt_write_ccc>:
{
   23d7c:	b500      	push	{lr}
   23d7e:	b085      	sub	sp, #20
   23d80:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   23d82:	2301      	movs	r3, #1
   23d84:	9302      	str	r3, [sp, #8]
   23d86:	2304      	movs	r3, #4
   23d88:	9301      	str	r3, [sp, #4]
   23d8a:	2312      	movs	r3, #18
   23d8c:	9300      	str	r3, [sp, #0]
   23d8e:	4b03      	ldr	r3, [pc, #12]	; (23d9c <gatt_write_ccc+0x20>)
   23d90:	4903      	ldr	r1, [pc, #12]	; (23da0 <gatt_write_ccc+0x24>)
   23d92:	f016 fe72 	bl	3aa7a <gatt_req_send>
}
   23d96:	b005      	add	sp, #20
   23d98:	f85d fb04 	ldr.w	pc, [sp], #4
   23d9c:	0003ab41 	.word	0x0003ab41
   23da0:	00023a05 	.word	0x00023a05

00023da4 <sc_set>:
{
   23da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23da8:	b092      	sub	sp, #72	; 0x48
   23daa:	af00      	add	r7, sp, #0
	if (!name) {
   23dac:	2800      	cmp	r0, #0
   23dae:	d047      	beq.n	23e40 <sc_set+0x9c>
   23db0:	460c      	mov	r4, r1
   23db2:	4616      	mov	r6, r2
   23db4:	4698      	mov	r8, r3
   23db6:	4605      	mov	r5, r0
	err = bt_settings_decode_key(name, &addr);
   23db8:	f107 0110 	add.w	r1, r7, #16
   23dbc:	f014 fbb0 	bl	38520 <bt_settings_decode_key>
	if (err) {
   23dc0:	4681      	mov	r9, r0
   23dc2:	2800      	cmp	r0, #0
   23dc4:	d161      	bne.n	23e8a <sc_set+0xe6>
	settings_name_next(name, &next);
   23dc6:	f107 010c 	add.w	r1, r7, #12
   23dca:	4628      	mov	r0, r5
   23dcc:	f013 fbd6 	bl	3757c <settings_name_next>
	if (!next) {
   23dd0:	68f8      	ldr	r0, [r7, #12]
   23dd2:	2800      	cmp	r0, #0
   23dd4:	f000 80ef 	beq.w	23fb6 <sc_set+0x212>
		unsigned long next_id = strtoul(next, NULL, 10);
   23dd8:	220a      	movs	r2, #10
   23dda:	2100      	movs	r1, #0
   23ddc:	f014 fa0a 	bl	381f4 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   23de0:	4605      	mov	r5, r0
   23de2:	2800      	cmp	r0, #0
   23de4:	f040 80a6 	bne.w	23f34 <sc_set+0x190>
		id = (uint8_t)next_id;
   23de8:	b2c5      	uxtb	r5, r0
	cfg = find_sc_cfg(id, &addr);
   23dea:	f107 0110 	add.w	r1, r7, #16
   23dee:	4628      	mov	r0, r5
   23df0:	f7ff f9cc 	bl	2318c <find_sc_cfg>
	if (!cfg && len_rd) {
   23df4:	4682      	mov	sl, r0
   23df6:	2800      	cmp	r0, #0
   23df8:	f000 80df 	beq.w	23fba <sc_set+0x216>
	if (len_rd) {
   23dfc:	2c00      	cmp	r4, #0
   23dfe:	f000 80dd 	beq.w	23fbc <sc_set+0x218>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   23e02:	2204      	movs	r2, #4
   23e04:	f10a 0108 	add.w	r1, sl, #8
   23e08:	4640      	mov	r0, r8
   23e0a:	47b0      	blx	r6
		if (len < 0) {
   23e0c:	1e04      	subs	r4, r0, #0
   23e0e:	f280 80dd 	bge.w	23fcc <sc_set+0x228>
			LOG_ERR("Failed to decode value (err %zd)", len);
   23e12:	466e      	mov	r6, sp
   23e14:	b088      	sub	sp, #32
   23e16:	466b      	mov	r3, sp
   23e18:	f113 0210 	adds.w	r2, r3, #16
   23e1c:	f000 810d 	beq.w	2403a <sc_set+0x296>
   23e20:	210c      	movs	r1, #12
   23e22:	b142      	cbz	r2, 23e36 <sc_set+0x92>
   23e24:	4608      	mov	r0, r1
   23e26:	2904      	cmp	r1, #4
   23e28:	dd01      	ble.n	23e2e <sc_set+0x8a>
   23e2a:	4d9a      	ldr	r5, [pc, #616]	; (24094 <sc_set+0x2f0>)
   23e2c:	615d      	str	r5, [r3, #20]
   23e2e:	2808      	cmp	r0, #8
   23e30:	f340 8106 	ble.w	24040 <sc_set+0x29c>
   23e34:	619c      	str	r4, [r3, #24]
   23e36:	290b      	cmp	r1, #11
   23e38:	f340 8128 	ble.w	2408c <sc_set+0x2e8>
   23e3c:	250c      	movs	r5, #12
   23e3e:	e101      	b.n	24044 <sc_set+0x2a0>
		LOG_ERR("Insufficient number of arguments");
   23e40:	4b95      	ldr	r3, [pc, #596]	; (24098 <sc_set+0x2f4>)
   23e42:	647b      	str	r3, [r7, #68]	; 0x44
   23e44:	2302      	movs	r3, #2
   23e46:	723b      	strb	r3, [r7, #8]
   23e48:	2300      	movs	r3, #0
   23e4a:	727b      	strb	r3, [r7, #9]
   23e4c:	72bb      	strb	r3, [r7, #10]
   23e4e:	72fb      	strb	r3, [r7, #11]
   23e50:	68ba      	ldr	r2, [r7, #8]
   23e52:	643a      	str	r2, [r7, #64]	; 0x40
   23e54:	4619      	mov	r1, r3
   23e56:	f363 0100 	bfi	r1, r3, #0, #1
   23e5a:	f363 0141 	bfi	r1, r3, #1, #1
   23e5e:	f363 0182 	bfi	r1, r3, #2, #1
   23e62:	f363 01c5 	bfi	r1, r3, #3, #3
   23e66:	2201      	movs	r2, #1
   23e68:	f362 1188 	bfi	r1, r2, #6, #3
   23e6c:	2208      	movs	r2, #8
   23e6e:	f362 2152 	bfi	r1, r2, #9, #10
   23e72:	f363 41de 	bfi	r1, r3, #19, #12
   23e76:	f363 71df 	bfi	r1, r3, #31, #1
   23e7a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   23e7e:	4887      	ldr	r0, [pc, #540]	; (2409c <sc_set+0x2f8>)
   23e80:	f7f2 fd64 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   23e84:	f06f 0915 	mvn.w	r9, #21
   23e88:	e0a0      	b.n	23fcc <sc_set+0x228>
		LOG_ERR("Unable to decode address %s", name);
   23e8a:	466e      	mov	r6, sp
   23e8c:	2300      	movs	r3, #0
   23e8e:	723b      	strb	r3, [r7, #8]
   23e90:	2302      	movs	r3, #2
   23e92:	727b      	strb	r3, [r7, #9]
   23e94:	b088      	sub	sp, #32
   23e96:	466c      	mov	r4, sp
   23e98:	f114 0210 	adds.w	r2, r4, #16
   23e9c:	d011      	beq.n	23ec2 <sc_set+0x11e>
   23e9e:	200e      	movs	r0, #14
   23ea0:	b11a      	cbz	r2, 23eaa <sc_set+0x106>
   23ea2:	2804      	cmp	r0, #4
   23ea4:	dd01      	ble.n	23eaa <sc_set+0x106>
   23ea6:	4b7e      	ldr	r3, [pc, #504]	; (240a0 <sc_set+0x2fc>)
   23ea8:	6163      	str	r3, [r4, #20]
   23eaa:	2300      	movs	r3, #0
   23eac:	713b      	strb	r3, [r7, #4]
   23eae:	2302      	movs	r3, #2
   23eb0:	717b      	strb	r3, [r7, #5]
   23eb2:	b19a      	cbz	r2, 23edc <sc_set+0x138>
   23eb4:	2808      	cmp	r0, #8
   23eb6:	dd00      	ble.n	23eba <sc_set+0x116>
   23eb8:	61a5      	str	r5, [r4, #24]
   23eba:	f104 031c 	add.w	r3, r4, #28
   23ebe:	2100      	movs	r1, #0
   23ec0:	e00a      	b.n	23ed8 <sc_set+0x134>
   23ec2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   23ec6:	e7eb      	b.n	23ea0 <sc_set+0xfc>
   23ec8:	f101 0548 	add.w	r5, r1, #72	; 0x48
   23ecc:	443d      	add	r5, r7
   23ece:	f815 5c44 	ldrb.w	r5, [r5, #-68]
   23ed2:	f803 5b01 	strb.w	r5, [r3], #1
   23ed6:	3101      	adds	r1, #1
   23ed8:	2901      	cmp	r1, #1
   23eda:	d9f5      	bls.n	23ec8 <sc_set+0x124>
   23edc:	280d      	cmp	r0, #13
   23ede:	dd26      	ble.n	23f2e <sc_set+0x18a>
   23ee0:	230e      	movs	r3, #14
   23ee2:	b142      	cbz	r2, 23ef6 <sc_set+0x152>
   23ee4:	2103      	movs	r1, #3
   23ee6:	7239      	strb	r1, [r7, #8]
   23ee8:	2100      	movs	r1, #0
   23eea:	7279      	strb	r1, [r7, #9]
   23eec:	72b9      	strb	r1, [r7, #10]
   23eee:	2101      	movs	r1, #1
   23ef0:	72f9      	strb	r1, [r7, #11]
   23ef2:	68b8      	ldr	r0, [r7, #8]
   23ef4:	6120      	str	r0, [r4, #16]
   23ef6:	2100      	movs	r1, #0
   23ef8:	f36f 0100 	bfc	r1, #0, #1
   23efc:	f36f 0141 	bfc	r1, #1, #1
   23f00:	f36f 0182 	bfc	r1, #2, #1
   23f04:	f36f 01c5 	bfc	r1, #3, #3
   23f08:	2001      	movs	r0, #1
   23f0a:	f360 1188 	bfi	r1, r0, #6, #3
   23f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   23f12:	f363 2152 	bfi	r1, r3, #9, #10
   23f16:	f36f 41de 	bfc	r1, #19, #12
   23f1a:	f36f 71df 	bfc	r1, #31, #1
   23f1e:	2300      	movs	r3, #0
   23f20:	485e      	ldr	r0, [pc, #376]	; (2409c <sc_set+0x2f8>)
   23f22:	f7f2 fd13 	bl	1694c <z_impl_z_log_msg_static_create>
   23f26:	46b5      	mov	sp, r6
		return -EINVAL;
   23f28:	f06f 0915 	mvn.w	r9, #21
   23f2c:	e04e      	b.n	23fcc <sc_set+0x228>
		LOG_ERR("Unable to decode address %s", name);
   23f2e:	f06f 031b 	mvn.w	r3, #27
   23f32:	e7d6      	b.n	23ee2 <sc_set+0x13e>
			LOG_ERR("Invalid local identity %lu", next_id);
   23f34:	466e      	mov	r6, sp
   23f36:	b088      	sub	sp, #32
   23f38:	466b      	mov	r3, sp
   23f3a:	f113 0210 	adds.w	r2, r3, #16
   23f3e:	d00d      	beq.n	23f5c <sc_set+0x1b8>
   23f40:	210c      	movs	r1, #12
   23f42:	b13a      	cbz	r2, 23f54 <sc_set+0x1b0>
   23f44:	4608      	mov	r0, r1
   23f46:	2904      	cmp	r1, #4
   23f48:	dd01      	ble.n	23f4e <sc_set+0x1aa>
   23f4a:	4c56      	ldr	r4, [pc, #344]	; (240a4 <sc_set+0x300>)
   23f4c:	615c      	str	r4, [r3, #20]
   23f4e:	2808      	cmp	r0, #8
   23f50:	dd07      	ble.n	23f62 <sc_set+0x1be>
   23f52:	619d      	str	r5, [r3, #24]
   23f54:	290b      	cmp	r1, #11
   23f56:	dd2b      	ble.n	23fb0 <sc_set+0x20c>
   23f58:	240c      	movs	r4, #12
   23f5a:	e004      	b.n	23f66 <sc_set+0x1c2>
   23f5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   23f60:	e7ef      	b.n	23f42 <sc_set+0x19e>
   23f62:	f06f 041b 	mvn.w	r4, #27
   23f66:	b13a      	cbz	r2, 23f78 <sc_set+0x1d4>
   23f68:	2103      	movs	r1, #3
   23f6a:	7239      	strb	r1, [r7, #8]
   23f6c:	2100      	movs	r1, #0
   23f6e:	7279      	strb	r1, [r7, #9]
   23f70:	72b9      	strb	r1, [r7, #10]
   23f72:	72f9      	strb	r1, [r7, #11]
   23f74:	68b8      	ldr	r0, [r7, #8]
   23f76:	6118      	str	r0, [r3, #16]
   23f78:	2100      	movs	r1, #0
   23f7a:	f36f 0100 	bfc	r1, #0, #1
   23f7e:	f36f 0141 	bfc	r1, #1, #1
   23f82:	f36f 0182 	bfc	r1, #2, #1
   23f86:	f36f 01c5 	bfc	r1, #3, #3
   23f8a:	2301      	movs	r3, #1
   23f8c:	f363 1188 	bfi	r1, r3, #6, #3
   23f90:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   23f94:	f363 2152 	bfi	r1, r3, #9, #10
   23f98:	f36f 41de 	bfc	r1, #19, #12
   23f9c:	f36f 71df 	bfc	r1, #31, #1
   23fa0:	2300      	movs	r3, #0
   23fa2:	483e      	ldr	r0, [pc, #248]	; (2409c <sc_set+0x2f8>)
   23fa4:	f7f2 fcd2 	bl	1694c <z_impl_z_log_msg_static_create>
   23fa8:	46b5      	mov	sp, r6
			return -EINVAL;
   23faa:	f06f 0915 	mvn.w	r9, #21
   23fae:	e00d      	b.n	23fcc <sc_set+0x228>
			LOG_ERR("Invalid local identity %lu", next_id);
   23fb0:	f06f 041b 	mvn.w	r4, #27
   23fb4:	e7d7      	b.n	23f66 <sc_set+0x1c2>
		id = BT_ID_DEFAULT;
   23fb6:	2500      	movs	r5, #0
   23fb8:	e717      	b.n	23dea <sc_set+0x46>
	if (!cfg && len_rd) {
   23fba:	b964      	cbnz	r4, 23fd6 <sc_set+0x232>
	} else if (cfg) {
   23fbc:	f1ba 0f00 	cmp.w	sl, #0
   23fc0:	d004      	beq.n	23fcc <sc_set+0x228>
		memset(cfg, 0, sizeof(*cfg));
   23fc2:	220c      	movs	r2, #12
   23fc4:	2100      	movs	r1, #0
   23fc6:	4650      	mov	r0, sl
   23fc8:	f014 fa46 	bl	38458 <memset>
}
   23fcc:	4648      	mov	r0, r9
   23fce:	3748      	adds	r7, #72	; 0x48
   23fd0:	46bd      	mov	sp, r7
   23fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   23fd6:	4934      	ldr	r1, [pc, #208]	; (240a8 <sc_set+0x304>)
   23fd8:	f7ff f8d8 	bl	2318c <find_sc_cfg>
		if (!cfg) {
   23fdc:	4682      	mov	sl, r0
   23fde:	b138      	cbz	r0, 23ff0 <sc_set+0x24c>
		cfg->id = id;
   23fe0:	f800 5b01 	strb.w	r5, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   23fe4:	2207      	movs	r2, #7
   23fe6:	f107 0110 	add.w	r1, r7, #16
   23fea:	f014 fa06 	bl	383fa <memcpy>
}
   23fee:	e705      	b.n	23dfc <sc_set+0x58>
			LOG_ERR("Unable to restore SC: no cfg left");
   23ff0:	4b2e      	ldr	r3, [pc, #184]	; (240ac <sc_set+0x308>)
   23ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   23ff4:	2302      	movs	r3, #2
   23ff6:	723b      	strb	r3, [r7, #8]
   23ff8:	2300      	movs	r3, #0
   23ffa:	727b      	strb	r3, [r7, #9]
   23ffc:	72bb      	strb	r3, [r7, #10]
   23ffe:	72fb      	strb	r3, [r7, #11]
   24000:	68ba      	ldr	r2, [r7, #8]
   24002:	62ba      	str	r2, [r7, #40]	; 0x28
   24004:	4619      	mov	r1, r3
   24006:	f363 0100 	bfi	r1, r3, #0, #1
   2400a:	f363 0141 	bfi	r1, r3, #1, #1
   2400e:	f363 0182 	bfi	r1, r3, #2, #1
   24012:	f363 01c5 	bfi	r1, r3, #3, #3
   24016:	2201      	movs	r2, #1
   24018:	f362 1188 	bfi	r1, r2, #6, #3
   2401c:	2208      	movs	r2, #8
   2401e:	f362 2152 	bfi	r1, r2, #9, #10
   24022:	f363 41de 	bfi	r1, r3, #19, #12
   24026:	f363 71df 	bfi	r1, r3, #31, #1
   2402a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   2402e:	481b      	ldr	r0, [pc, #108]	; (2409c <sc_set+0x2f8>)
   24030:	f7f2 fc8c 	bl	1694c <z_impl_z_log_msg_static_create>
			return -ENOMEM;
   24034:	f06f 090b 	mvn.w	r9, #11
   24038:	e7c8      	b.n	23fcc <sc_set+0x228>
			LOG_ERR("Failed to decode value (err %zd)", len);
   2403a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2403e:	e6f0      	b.n	23e22 <sc_set+0x7e>
   24040:	f06f 051b 	mvn.w	r5, #27
   24044:	b13a      	cbz	r2, 24056 <sc_set+0x2b2>
   24046:	2103      	movs	r1, #3
   24048:	7239      	strb	r1, [r7, #8]
   2404a:	2100      	movs	r1, #0
   2404c:	7279      	strb	r1, [r7, #9]
   2404e:	72b9      	strb	r1, [r7, #10]
   24050:	72f9      	strb	r1, [r7, #11]
   24052:	68b8      	ldr	r0, [r7, #8]
   24054:	6118      	str	r0, [r3, #16]
   24056:	2100      	movs	r1, #0
   24058:	f36f 0100 	bfc	r1, #0, #1
   2405c:	f36f 0141 	bfc	r1, #1, #1
   24060:	f36f 0182 	bfc	r1, #2, #1
   24064:	f36f 01c5 	bfc	r1, #3, #3
   24068:	2301      	movs	r3, #1
   2406a:	f363 1188 	bfi	r1, r3, #6, #3
   2406e:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   24072:	f365 2152 	bfi	r1, r5, #9, #10
   24076:	f36f 41de 	bfc	r1, #19, #12
   2407a:	f36f 71df 	bfc	r1, #31, #1
   2407e:	2300      	movs	r3, #0
   24080:	4806      	ldr	r0, [pc, #24]	; (2409c <sc_set+0x2f8>)
   24082:	f7f2 fc63 	bl	1694c <z_impl_z_log_msg_static_create>
   24086:	46b5      	mov	sp, r6
			return len;
   24088:	46a1      	mov	r9, r4
   2408a:	e79f      	b.n	23fcc <sc_set+0x228>
			LOG_ERR("Failed to decode value (err %zd)", len);
   2408c:	f06f 051b 	mvn.w	r5, #27
   24090:	e7d8      	b.n	24044 <sc_set+0x2a0>
   24092:	bf00      	nop
   24094:	0004394c 	.word	0x0004394c
   24098:	000420a0 	.word	0x000420a0
   2409c:	0003f3c0 	.word	0x0003f3c0
   240a0:	00043ae0 	.word	0x00043ae0
   240a4:	00043afc 	.word	0x00043afc
   240a8:	0004203c 	.word	0x0004203c
   240ac:	00043b18 	.word	0x00043b18

000240b0 <clear_cf_cfg>:
{
   240b0:	b510      	push	{r4, lr}
   240b2:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   240b4:	2207      	movs	r2, #7
   240b6:	4909      	ldr	r1, [pc, #36]	; (240dc <clear_cf_cfg+0x2c>)
   240b8:	3001      	adds	r0, #1
   240ba:	f014 f99e 	bl	383fa <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   240be:	2201      	movs	r2, #1
   240c0:	2100      	movs	r1, #0
   240c2:	f104 0008 	add.w	r0, r4, #8
   240c6:	f014 f9c7 	bl	38458 <memset>
	atomic_set(cfg->flags, 0);
   240ca:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   240cc:	2300      	movs	r3, #0
   240ce:	e8d4 2fef 	ldaex	r2, [r4]
   240d2:	e8c4 3fe1 	stlex	r1, r3, [r4]
   240d6:	2900      	cmp	r1, #0
   240d8:	d1f9      	bne.n	240ce <clear_cf_cfg+0x1e>
}
   240da:	bd10      	pop	{r4, pc}
   240dc:	0004203c 	.word	0x0004203c

000240e0 <cf_set>:
{
   240e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240e4:	b092      	sub	sp, #72	; 0x48
   240e6:	af00      	add	r7, sp, #0
	if (!name) {
   240e8:	b3b0      	cbz	r0, 24158 <cf_set+0x78>
   240ea:	460c      	mov	r4, r1
   240ec:	4615      	mov	r5, r2
   240ee:	461e      	mov	r6, r3
   240f0:	4680      	mov	r8, r0
	err = bt_settings_decode_key(name, &addr);
   240f2:	f107 0110 	add.w	r1, r7, #16
   240f6:	f014 fa13 	bl	38520 <bt_settings_decode_key>
	if (err) {
   240fa:	4681      	mov	r9, r0
   240fc:	2800      	cmp	r0, #0
   240fe:	d150      	bne.n	241a2 <cf_set+0xc2>
	settings_name_next(name, &next);
   24100:	f107 010c 	add.w	r1, r7, #12
   24104:	4640      	mov	r0, r8
   24106:	f013 fa39 	bl	3757c <settings_name_next>
	if (!next) {
   2410a:	68f8      	ldr	r0, [r7, #12]
   2410c:	2800      	cmp	r0, #0
   2410e:	f000 80e0 	beq.w	242d2 <cf_set+0x1f2>
		unsigned long next_id = strtoul(next, NULL, 10);
   24112:	220a      	movs	r2, #10
   24114:	2100      	movs	r1, #0
   24116:	f014 f86d 	bl	381f4 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   2411a:	4680      	mov	r8, r0
   2411c:	2800      	cmp	r0, #0
   2411e:	f040 8096 	bne.w	2424e <cf_set+0x16e>
		id = (uint8_t)next_id;
   24122:	fa5f f880 	uxtb.w	r8, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
   24126:	f107 0110 	add.w	r1, r7, #16
   2412a:	4640      	mov	r0, r8
   2412c:	f7ff f8c0 	bl	232b0 <find_cf_cfg_by_addr>
	if (!cfg) {
   24130:	4682      	mov	sl, r0
   24132:	2800      	cmp	r0, #0
   24134:	f000 80d0 	beq.w	242d8 <cf_set+0x1f8>
	if (len_rd) {
   24138:	2c00      	cmp	r4, #0
   2413a:	f000 813e 	beq.w	243ba <cf_set+0x2da>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
   2413e:	2201      	movs	r2, #1
   24140:	f10a 0108 	add.w	r1, sl, #8
   24144:	4630      	mov	r0, r6
   24146:	47a8      	blx	r5
		if (len < 0) {
   24148:	1e04      	subs	r4, r0, #0
   2414a:	f2c0 80f6 	blt.w	2433a <cf_set+0x25a>
}
   2414e:	4648      	mov	r0, r9
   24150:	3748      	adds	r7, #72	; 0x48
   24152:	46bd      	mov	sp, r7
   24154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("Insufficient number of arguments");
   24158:	4b9a      	ldr	r3, [pc, #616]	; (243c4 <cf_set+0x2e4>)
   2415a:	647b      	str	r3, [r7, #68]	; 0x44
   2415c:	2302      	movs	r3, #2
   2415e:	723b      	strb	r3, [r7, #8]
   24160:	2300      	movs	r3, #0
   24162:	727b      	strb	r3, [r7, #9]
   24164:	72bb      	strb	r3, [r7, #10]
   24166:	72fb      	strb	r3, [r7, #11]
   24168:	68ba      	ldr	r2, [r7, #8]
   2416a:	643a      	str	r2, [r7, #64]	; 0x40
   2416c:	4619      	mov	r1, r3
   2416e:	f363 0100 	bfi	r1, r3, #0, #1
   24172:	f363 0141 	bfi	r1, r3, #1, #1
   24176:	f363 0182 	bfi	r1, r3, #2, #1
   2417a:	f363 01c5 	bfi	r1, r3, #3, #3
   2417e:	2201      	movs	r2, #1
   24180:	f362 1188 	bfi	r1, r2, #6, #3
   24184:	2208      	movs	r2, #8
   24186:	f362 2152 	bfi	r1, r2, #9, #10
   2418a:	f363 41de 	bfi	r1, r3, #19, #12
   2418e:	f363 71df 	bfi	r1, r3, #31, #1
   24192:	f107 0240 	add.w	r2, r7, #64	; 0x40
   24196:	488c      	ldr	r0, [pc, #560]	; (243c8 <cf_set+0x2e8>)
   24198:	f7f2 fbd8 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2419c:	f06f 0915 	mvn.w	r9, #21
   241a0:	e7d5      	b.n	2414e <cf_set+0x6e>
		LOG_ERR("Unable to decode address %s", name);
   241a2:	466d      	mov	r5, sp
   241a4:	2300      	movs	r3, #0
   241a6:	723b      	strb	r3, [r7, #8]
   241a8:	2302      	movs	r3, #2
   241aa:	727b      	strb	r3, [r7, #9]
   241ac:	b088      	sub	sp, #32
   241ae:	466c      	mov	r4, sp
   241b0:	f114 0210 	adds.w	r2, r4, #16
   241b4:	d012      	beq.n	241dc <cf_set+0xfc>
   241b6:	200e      	movs	r0, #14
   241b8:	b11a      	cbz	r2, 241c2 <cf_set+0xe2>
   241ba:	2804      	cmp	r0, #4
   241bc:	dd01      	ble.n	241c2 <cf_set+0xe2>
   241be:	4b83      	ldr	r3, [pc, #524]	; (243cc <cf_set+0x2ec>)
   241c0:	6163      	str	r3, [r4, #20]
   241c2:	2300      	movs	r3, #0
   241c4:	713b      	strb	r3, [r7, #4]
   241c6:	2302      	movs	r3, #2
   241c8:	717b      	strb	r3, [r7, #5]
   241ca:	b1a2      	cbz	r2, 241f6 <cf_set+0x116>
   241cc:	2808      	cmp	r0, #8
   241ce:	dd01      	ble.n	241d4 <cf_set+0xf4>
   241d0:	f8c4 8018 	str.w	r8, [r4, #24]
   241d4:	f104 031c 	add.w	r3, r4, #28
   241d8:	2100      	movs	r1, #0
   241da:	e00a      	b.n	241f2 <cf_set+0x112>
   241dc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   241e0:	e7ea      	b.n	241b8 <cf_set+0xd8>
   241e2:	f101 0648 	add.w	r6, r1, #72	; 0x48
   241e6:	443e      	add	r6, r7
   241e8:	f816 6c44 	ldrb.w	r6, [r6, #-68]
   241ec:	f803 6b01 	strb.w	r6, [r3], #1
   241f0:	3101      	adds	r1, #1
   241f2:	2901      	cmp	r1, #1
   241f4:	d9f5      	bls.n	241e2 <cf_set+0x102>
   241f6:	280d      	cmp	r0, #13
   241f8:	dd26      	ble.n	24248 <cf_set+0x168>
   241fa:	230e      	movs	r3, #14
   241fc:	b142      	cbz	r2, 24210 <cf_set+0x130>
   241fe:	2103      	movs	r1, #3
   24200:	7239      	strb	r1, [r7, #8]
   24202:	2100      	movs	r1, #0
   24204:	7279      	strb	r1, [r7, #9]
   24206:	72b9      	strb	r1, [r7, #10]
   24208:	2101      	movs	r1, #1
   2420a:	72f9      	strb	r1, [r7, #11]
   2420c:	68b8      	ldr	r0, [r7, #8]
   2420e:	6120      	str	r0, [r4, #16]
   24210:	2100      	movs	r1, #0
   24212:	f36f 0100 	bfc	r1, #0, #1
   24216:	f36f 0141 	bfc	r1, #1, #1
   2421a:	f36f 0182 	bfc	r1, #2, #1
   2421e:	f36f 01c5 	bfc	r1, #3, #3
   24222:	2001      	movs	r0, #1
   24224:	f360 1188 	bfi	r1, r0, #6, #3
   24228:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2422c:	f363 2152 	bfi	r1, r3, #9, #10
   24230:	f36f 41de 	bfc	r1, #19, #12
   24234:	f36f 71df 	bfc	r1, #31, #1
   24238:	2300      	movs	r3, #0
   2423a:	4863      	ldr	r0, [pc, #396]	; (243c8 <cf_set+0x2e8>)
   2423c:	f7f2 fb86 	bl	1694c <z_impl_z_log_msg_static_create>
   24240:	46ad      	mov	sp, r5
		return -EINVAL;
   24242:	f06f 0915 	mvn.w	r9, #21
   24246:	e782      	b.n	2414e <cf_set+0x6e>
		LOG_ERR("Unable to decode address %s", name);
   24248:	f06f 031b 	mvn.w	r3, #27
   2424c:	e7d6      	b.n	241fc <cf_set+0x11c>
			LOG_ERR("Invalid local identity %lu", next_id);
   2424e:	466d      	mov	r5, sp
   24250:	b088      	sub	sp, #32
   24252:	466b      	mov	r3, sp
   24254:	f113 0210 	adds.w	r2, r3, #16
   24258:	d00e      	beq.n	24278 <cf_set+0x198>
   2425a:	210c      	movs	r1, #12
   2425c:	b142      	cbz	r2, 24270 <cf_set+0x190>
   2425e:	4608      	mov	r0, r1
   24260:	2904      	cmp	r1, #4
   24262:	dd01      	ble.n	24268 <cf_set+0x188>
   24264:	4c5a      	ldr	r4, [pc, #360]	; (243d0 <cf_set+0x2f0>)
   24266:	615c      	str	r4, [r3, #20]
   24268:	2808      	cmp	r0, #8
   2426a:	dd08      	ble.n	2427e <cf_set+0x19e>
   2426c:	f8c3 8018 	str.w	r8, [r3, #24]
   24270:	290b      	cmp	r1, #11
   24272:	dd2b      	ble.n	242cc <cf_set+0x1ec>
   24274:	240c      	movs	r4, #12
   24276:	e004      	b.n	24282 <cf_set+0x1a2>
   24278:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2427c:	e7ee      	b.n	2425c <cf_set+0x17c>
   2427e:	f06f 041b 	mvn.w	r4, #27
   24282:	b13a      	cbz	r2, 24294 <cf_set+0x1b4>
   24284:	2103      	movs	r1, #3
   24286:	7239      	strb	r1, [r7, #8]
   24288:	2100      	movs	r1, #0
   2428a:	7279      	strb	r1, [r7, #9]
   2428c:	72b9      	strb	r1, [r7, #10]
   2428e:	72f9      	strb	r1, [r7, #11]
   24290:	68b8      	ldr	r0, [r7, #8]
   24292:	6118      	str	r0, [r3, #16]
   24294:	2100      	movs	r1, #0
   24296:	f36f 0100 	bfc	r1, #0, #1
   2429a:	f36f 0141 	bfc	r1, #1, #1
   2429e:	f36f 0182 	bfc	r1, #2, #1
   242a2:	f36f 01c5 	bfc	r1, #3, #3
   242a6:	2301      	movs	r3, #1
   242a8:	f363 1188 	bfi	r1, r3, #6, #3
   242ac:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   242b0:	f363 2152 	bfi	r1, r3, #9, #10
   242b4:	f36f 41de 	bfc	r1, #19, #12
   242b8:	f36f 71df 	bfc	r1, #31, #1
   242bc:	2300      	movs	r3, #0
   242be:	4842      	ldr	r0, [pc, #264]	; (243c8 <cf_set+0x2e8>)
   242c0:	f7f2 fb44 	bl	1694c <z_impl_z_log_msg_static_create>
   242c4:	46ad      	mov	sp, r5
			return -EINVAL;
   242c6:	f06f 0915 	mvn.w	r9, #21
   242ca:	e740      	b.n	2414e <cf_set+0x6e>
			LOG_ERR("Invalid local identity %lu", next_id);
   242cc:	f06f 041b 	mvn.w	r4, #27
   242d0:	e7d7      	b.n	24282 <cf_set+0x1a2>
		id = BT_ID_DEFAULT;
   242d2:	f04f 0800 	mov.w	r8, #0
   242d6:	e726      	b.n	24126 <cf_set+0x46>
		cfg = find_cf_cfg(NULL);
   242d8:	f7fe ff32 	bl	23140 <find_cf_cfg>
		if (!cfg) {
   242dc:	4682      	mov	sl, r0
   242de:	b138      	cbz	r0, 242f0 <cf_set+0x210>
		cfg->id = id;
   242e0:	f800 8b01 	strb.w	r8, [r0], #1
   242e4:	2207      	movs	r2, #7
   242e6:	f107 0110 	add.w	r1, r7, #16
   242ea:	f014 f886 	bl	383fa <memcpy>
}
   242ee:	e723      	b.n	24138 <cf_set+0x58>
			LOG_ERR("Unable to restore CF: no cfg left");
   242f0:	4b38      	ldr	r3, [pc, #224]	; (243d4 <cf_set+0x2f4>)
   242f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   242f4:	2302      	movs	r3, #2
   242f6:	723b      	strb	r3, [r7, #8]
   242f8:	2300      	movs	r3, #0
   242fa:	727b      	strb	r3, [r7, #9]
   242fc:	72bb      	strb	r3, [r7, #10]
   242fe:	72fb      	strb	r3, [r7, #11]
   24300:	68ba      	ldr	r2, [r7, #8]
   24302:	62ba      	str	r2, [r7, #40]	; 0x28
   24304:	4619      	mov	r1, r3
   24306:	f363 0100 	bfi	r1, r3, #0, #1
   2430a:	f363 0141 	bfi	r1, r3, #1, #1
   2430e:	f363 0182 	bfi	r1, r3, #2, #1
   24312:	f363 01c5 	bfi	r1, r3, #3, #3
   24316:	2201      	movs	r2, #1
   24318:	f362 1188 	bfi	r1, r2, #6, #3
   2431c:	2208      	movs	r2, #8
   2431e:	f362 2152 	bfi	r1, r2, #9, #10
   24322:	f363 41de 	bfi	r1, r3, #19, #12
   24326:	f363 71df 	bfi	r1, r3, #31, #1
   2432a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   2432e:	4826      	ldr	r0, [pc, #152]	; (243c8 <cf_set+0x2e8>)
   24330:	f7f2 fb0c 	bl	1694c <z_impl_z_log_msg_static_create>
			return -ENOMEM;
   24334:	f06f 090b 	mvn.w	r9, #11
   24338:	e709      	b.n	2414e <cf_set+0x6e>
			LOG_ERR("Failed to decode value (err %zd)", len);
   2433a:	466e      	mov	r6, sp
   2433c:	b088      	sub	sp, #32
   2433e:	466b      	mov	r3, sp
   24340:	f113 0210 	adds.w	r2, r3, #16
   24344:	d00d      	beq.n	24362 <cf_set+0x282>
   24346:	210c      	movs	r1, #12
   24348:	b13a      	cbz	r2, 2435a <cf_set+0x27a>
   2434a:	4608      	mov	r0, r1
   2434c:	2904      	cmp	r1, #4
   2434e:	dd01      	ble.n	24354 <cf_set+0x274>
   24350:	4d21      	ldr	r5, [pc, #132]	; (243d8 <cf_set+0x2f8>)
   24352:	615d      	str	r5, [r3, #20]
   24354:	2808      	cmp	r0, #8
   24356:	dd07      	ble.n	24368 <cf_set+0x288>
   24358:	619c      	str	r4, [r3, #24]
   2435a:	290b      	cmp	r1, #11
   2435c:	dd2a      	ble.n	243b4 <cf_set+0x2d4>
   2435e:	250c      	movs	r5, #12
   24360:	e004      	b.n	2436c <cf_set+0x28c>
   24362:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   24366:	e7ef      	b.n	24348 <cf_set+0x268>
   24368:	f06f 051b 	mvn.w	r5, #27
   2436c:	b13a      	cbz	r2, 2437e <cf_set+0x29e>
   2436e:	2103      	movs	r1, #3
   24370:	7239      	strb	r1, [r7, #8]
   24372:	2100      	movs	r1, #0
   24374:	7279      	strb	r1, [r7, #9]
   24376:	72b9      	strb	r1, [r7, #10]
   24378:	72f9      	strb	r1, [r7, #11]
   2437a:	68b8      	ldr	r0, [r7, #8]
   2437c:	6118      	str	r0, [r3, #16]
   2437e:	2100      	movs	r1, #0
   24380:	f36f 0100 	bfc	r1, #0, #1
   24384:	f36f 0141 	bfc	r1, #1, #1
   24388:	f36f 0182 	bfc	r1, #2, #1
   2438c:	f36f 01c5 	bfc	r1, #3, #3
   24390:	2301      	movs	r3, #1
   24392:	f363 1188 	bfi	r1, r3, #6, #3
   24396:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   2439a:	f363 2152 	bfi	r1, r3, #9, #10
   2439e:	f36f 41de 	bfc	r1, #19, #12
   243a2:	f36f 71df 	bfc	r1, #31, #1
   243a6:	2300      	movs	r3, #0
   243a8:	4807      	ldr	r0, [pc, #28]	; (243c8 <cf_set+0x2e8>)
   243aa:	f7f2 facf 	bl	1694c <z_impl_z_log_msg_static_create>
   243ae:	46b5      	mov	sp, r6
			return len;
   243b0:	46a1      	mov	r9, r4
   243b2:	e6cc      	b.n	2414e <cf_set+0x6e>
			LOG_ERR("Failed to decode value (err %zd)", len);
   243b4:	f06f 051b 	mvn.w	r5, #27
   243b8:	e7d8      	b.n	2436c <cf_set+0x28c>
		clear_cf_cfg(cfg);
   243ba:	4650      	mov	r0, sl
   243bc:	f7ff fe78 	bl	240b0 <clear_cf_cfg>
   243c0:	e6c5      	b.n	2414e <cf_set+0x6e>
   243c2:	bf00      	nop
   243c4:	000420a0 	.word	0x000420a0
   243c8:	0003f3c0 	.word	0x0003f3c0
   243cc:	00043ae0 	.word	0x00043ae0
   243d0:	00043afc 	.word	0x00043afc
   243d4:	00043b3c 	.word	0x00043b3c
   243d8:	0004394c 	.word	0x0004394c

000243dc <db_hash_commit>:
{
   243dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   243de:	b083      	sub	sp, #12
   243e0:	af00      	add	r7, sp, #0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   243e2:	4b2a      	ldr	r3, [pc, #168]	; (2448c <db_hash_commit+0xb0>)
   243e4:	e8d3 1fef 	ldaex	r1, [r3]
   243e8:	f041 0108 	orr.w	r1, r1, #8
   243ec:	e8c3 1fe2 	stlex	r2, r1, [r3]
   243f0:	2a00      	cmp	r2, #0
   243f2:	d1f7      	bne.n	243e4 <db_hash_commit+0x8>
		err = bt_long_wq_reschedule(&db_hash.work, K_NO_WAIT);
   243f4:	2200      	movs	r2, #0
   243f6:	2300      	movs	r3, #0
   243f8:	4825      	ldr	r0, [pc, #148]	; (24490 <db_hash_commit+0xb4>)
   243fa:	f7f6 ff07 	bl	1b20c <bt_long_wq_reschedule>
	if (err > 0) {
   243fe:	1e04      	subs	r4, r0, #0
   24400:	dd04      	ble.n	2440c <db_hash_commit+0x30>
		err = 0;
   24402:	2400      	movs	r4, #0
}
   24404:	4620      	mov	r0, r4
   24406:	370c      	adds	r7, #12
   24408:	46bd      	mov	sp, r7
   2440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (err) {
   2440c:	2c00      	cmp	r4, #0
   2440e:	d0f9      	beq.n	24404 <db_hash_commit+0x28>
		LOG_ERR("Unable to reschedule database hash process (err %d)", err);
   24410:	466d      	mov	r5, sp
   24412:	b088      	sub	sp, #32
   24414:	466b      	mov	r3, sp
   24416:	f113 0210 	adds.w	r2, r3, #16
   2441a:	d030      	beq.n	2447e <db_hash_commit+0xa2>
   2441c:	210c      	movs	r1, #12
   2441e:	b13a      	cbz	r2, 24430 <db_hash_commit+0x54>
   24420:	4608      	mov	r0, r1
   24422:	2904      	cmp	r1, #4
   24424:	dd01      	ble.n	2442a <db_hash_commit+0x4e>
   24426:	4e1b      	ldr	r6, [pc, #108]	; (24494 <db_hash_commit+0xb8>)
   24428:	615e      	str	r6, [r3, #20]
   2442a:	2808      	cmp	r0, #8
   2442c:	dd00      	ble.n	24430 <db_hash_commit+0x54>
   2442e:	619c      	str	r4, [r3, #24]
   24430:	290b      	cmp	r1, #11
   24432:	dd27      	ble.n	24484 <db_hash_commit+0xa8>
   24434:	f04f 0c0c 	mov.w	ip, #12
   24438:	b13a      	cbz	r2, 2444a <db_hash_commit+0x6e>
   2443a:	2103      	movs	r1, #3
   2443c:	7139      	strb	r1, [r7, #4]
   2443e:	2100      	movs	r1, #0
   24440:	7179      	strb	r1, [r7, #5]
   24442:	71b9      	strb	r1, [r7, #6]
   24444:	71f9      	strb	r1, [r7, #7]
   24446:	6878      	ldr	r0, [r7, #4]
   24448:	6118      	str	r0, [r3, #16]
   2444a:	2100      	movs	r1, #0
   2444c:	f36f 0100 	bfc	r1, #0, #1
   24450:	f36f 0141 	bfc	r1, #1, #1
   24454:	f36f 0182 	bfc	r1, #2, #1
   24458:	f36f 01c5 	bfc	r1, #3, #3
   2445c:	2301      	movs	r3, #1
   2445e:	f363 1188 	bfi	r1, r3, #6, #3
   24462:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   24466:	f363 2152 	bfi	r1, r3, #9, #10
   2446a:	f36f 41de 	bfc	r1, #19, #12
   2446e:	f36f 71df 	bfc	r1, #31, #1
   24472:	2300      	movs	r3, #0
   24474:	4808      	ldr	r0, [pc, #32]	; (24498 <db_hash_commit+0xbc>)
   24476:	f7f2 fa69 	bl	1694c <z_impl_z_log_msg_static_create>
   2447a:	46ad      	mov	sp, r5
   2447c:	e7c2      	b.n	24404 <db_hash_commit+0x28>
   2447e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   24482:	e7cc      	b.n	2441e <db_hash_commit+0x42>
   24484:	f06f 0c1b 	mvn.w	ip, #27
   24488:	e7d6      	b.n	24438 <db_hash_commit+0x5c>
   2448a:	bf00      	nop
   2448c:	2000b790 	.word	0x2000b790
   24490:	2000b6e8 	.word	0x2000b6e8
   24494:	00043b60 	.word	0x00043b60
   24498:	0003f3c0 	.word	0x0003f3c0

0002449c <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2449c:	4b19      	ldr	r3, [pc, #100]	; (24504 <bt_gatt_init+0x68>)
   2449e:	2201      	movs	r2, #1
   244a0:	e8d3 1fef 	ldaex	r1, [r3]
   244a4:	2900      	cmp	r1, #0
   244a6:	d103      	bne.n	244b0 <bt_gatt_init+0x14>
   244a8:	e8c3 2fe0 	stlex	r0, r2, [r3]
   244ac:	2800      	cmp	r0, #0
   244ae:	d1f7      	bne.n	244a0 <bt_gatt_init+0x4>
	if (!atomic_cas(&init, 0, 1)) {
   244b0:	d127      	bne.n	24502 <bt_gatt_init+0x66>
{
   244b2:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   244b4:	f7fe fd64 	bl	22f80 <bt_gatt_service_init>
	list->head = NULL;
   244b8:	4b13      	ldr	r3, [pc, #76]	; (24508 <bt_gatt_init+0x6c>)
   244ba:	2200      	movs	r2, #0
   244bc:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   244be:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   244c0:	4c12      	ldr	r4, [pc, #72]	; (2450c <bt_gatt_init+0x70>)
   244c2:	4913      	ldr	r1, [pc, #76]	; (24510 <bt_gatt_init+0x74>)
   244c4:	4620      	mov	r0, r4
   244c6:	f00e f96d 	bl	327a4 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   244ca:	f44f 72a4 	mov.w	r2, #328	; 0x148
   244ce:	2300      	movs	r3, #0
   244d0:	4620      	mov	r0, r4
   244d2:	f7f6 fe93 	bl	1b1fc <bt_long_wq_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   244d6:	4c0f      	ldr	r4, [pc, #60]	; (24514 <bt_gatt_init+0x78>)
   244d8:	490f      	ldr	r1, [pc, #60]	; (24518 <bt_gatt_init+0x7c>)
   244da:	4620      	mov	r0, r4
   244dc:	f00e f962 	bl	327a4 <k_work_init_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   244e0:	3430      	adds	r4, #48	; 0x30
   244e2:	e8d4 3fef 	ldaex	r3, [r4]
   244e6:	f043 0302 	orr.w	r3, r3, #2
   244ea:	e8c4 3fe2 	stlex	r2, r3, [r4]
   244ee:	2a00      	cmp	r2, #0
   244f0:	d1f7      	bne.n	244e2 <bt_gatt_init+0x46>
	k_work_init_delayable(&gatt_ccc_store.work, ccc_delayed_store);
   244f2:	490a      	ldr	r1, [pc, #40]	; (2451c <bt_gatt_init+0x80>)
   244f4:	480a      	ldr	r0, [pc, #40]	; (24520 <bt_gatt_init+0x84>)
   244f6:	f00e f955 	bl	327a4 <k_work_init_delayable>
	bt_conn_cb_register(&gatt_conn_cb);
   244fa:	480a      	ldr	r0, [pc, #40]	; (24524 <bt_gatt_init+0x88>)
   244fc:	f7fc fae8 	bl	20ad0 <bt_conn_cb_register>
}
   24500:	bd10      	pop	{r4, pc}
   24502:	4770      	bx	lr
   24504:	2000c270 	.word	0x2000c270
   24508:	2000c274 	.word	0x2000c274
   2450c:	2000b6e8 	.word	0x2000b6e8
   24510:	0002483d 	.word	0x0002483d
   24514:	2000b760 	.word	0x2000b760
   24518:	00025129 	.word	0x00025129
   2451c:	0003af8d 	.word	0x0003af8d
   24520:	2000b698 	.word	0x2000b698
   24524:	200084a4 	.word	0x200084a4

00024528 <bt_gatt_attr_get_handle>:
	if (!attr) {
   24528:	2800      	cmp	r0, #0
   2452a:	d03b      	beq.n	245a4 <bt_gatt_attr_get_handle+0x7c>
{
   2452c:	b570      	push	{r4, r5, r6, lr}
   2452e:	4684      	mov	ip, r0
	if (attr->handle) {
   24530:	8a06      	ldrh	r6, [r0, #16]
   24532:	2e00      	cmp	r6, #0
   24534:	d138      	bne.n	245a8 <bt_gatt_attr_get_handle+0x80>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   24536:	4c1d      	ldr	r4, [pc, #116]	; (245ac <bt_gatt_attr_get_handle+0x84>)
	uint16_t handle = 1;
   24538:	2001      	movs	r0, #1
   2453a:	e003      	b.n	24544 <bt_gatt_attr_get_handle+0x1c>
			handle += static_svc->attr_count;
   2453c:	6863      	ldr	r3, [r4, #4]
   2453e:	4403      	add	r3, r0
   24540:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   24542:	3408      	adds	r4, #8
   24544:	4b1a      	ldr	r3, [pc, #104]	; (245b0 <bt_gatt_attr_get_handle+0x88>)
   24546:	429c      	cmp	r4, r3
   24548:	d81a      	bhi.n	24580 <bt_gatt_attr_get_handle+0x58>
   2454a:	4b19      	ldr	r3, [pc, #100]	; (245b0 <bt_gatt_attr_get_handle+0x88>)
   2454c:	429c      	cmp	r4, r3
   2454e:	d227      	bcs.n	245a0 <bt_gatt_attr_get_handle+0x78>
		if ((attr < &static_svc->attrs[0]) ||
   24550:	6821      	ldr	r1, [r4, #0]
   24552:	4561      	cmp	r1, ip
   24554:	d8f2      	bhi.n	2453c <bt_gatt_attr_get_handle+0x14>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   24556:	6865      	ldr	r5, [r4, #4]
   24558:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   2455c:	009b      	lsls	r3, r3, #2
   2455e:	3b14      	subs	r3, #20
   24560:	440b      	add	r3, r1
		if ((attr < &static_svc->attrs[0]) ||
   24562:	4563      	cmp	r3, ip
   24564:	d3ea      	bcc.n	2453c <bt_gatt_attr_get_handle+0x14>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   24566:	2300      	movs	r3, #0
   24568:	429d      	cmp	r5, r3
   2456a:	d9ea      	bls.n	24542 <bt_gatt_attr_get_handle+0x1a>
			if (attr == &static_svc->attrs[i]) {
   2456c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24570:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   24574:	4562      	cmp	r2, ip
   24576:	d018      	beq.n	245aa <bt_gatt_attr_get_handle+0x82>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   24578:	3301      	adds	r3, #1
   2457a:	3001      	adds	r0, #1
   2457c:	b280      	uxth	r0, r0
   2457e:	e7f3      	b.n	24568 <bt_gatt_attr_get_handle+0x40>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   24580:	4c0c      	ldr	r4, [pc, #48]	; (245b4 <bt_gatt_attr_get_handle+0x8c>)
   24582:	f240 635d 	movw	r3, #1629	; 0x65d
   24586:	4622      	mov	r2, r4
   24588:	490b      	ldr	r1, [pc, #44]	; (245b8 <bt_gatt_attr_get_handle+0x90>)
   2458a:	480c      	ldr	r0, [pc, #48]	; (245bc <bt_gatt_attr_get_handle+0x94>)
   2458c:	f011 fe82 	bl	36294 <assert_print>
   24590:	480b      	ldr	r0, [pc, #44]	; (245c0 <bt_gatt_attr_get_handle+0x98>)
   24592:	f011 fe7f 	bl	36294 <assert_print>
   24596:	f240 615d 	movw	r1, #1629	; 0x65d
   2459a:	4620      	mov	r0, r4
   2459c:	f011 fe73 	bl	36286 <assert_post_action>
	return 0;
   245a0:	4630      	mov	r0, r6
   245a2:	e002      	b.n	245aa <bt_gatt_attr_get_handle+0x82>
		return 0;
   245a4:	2000      	movs	r0, #0
}
   245a6:	4770      	bx	lr
		return attr->handle;
   245a8:	4630      	mov	r0, r6
}
   245aa:	bd70      	pop	{r4, r5, r6, pc}
   245ac:	0003f358 	.word	0x0003f358
   245b0:	0003f370 	.word	0x0003f370
   245b4:	000438f4 	.word	0x000438f4
   245b8:	00043b94 	.word	0x00043b94
   245bc:	0003f72c 	.word	0x0003f72c
   245c0:	00040eb4 	.word	0x00040eb4

000245c4 <bt_gatt_foreach_attr_type>:
{
   245c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245c8:	b089      	sub	sp, #36	; 0x24
   245ca:	4682      	mov	sl, r0
   245cc:	9107      	str	r1, [sp, #28]
   245ce:	4690      	mov	r8, r2
   245d0:	4699      	mov	r9, r3
   245d2:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   245d4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   245d8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   245dc:	b91b      	cbnz	r3, 245e6 <bt_gatt_foreach_attr_type+0x22>
		num_matches = UINT16_MAX;
   245de:	f64f 73ff 	movw	r3, #65535	; 0xffff
   245e2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   245e6:	4b25      	ldr	r3, [pc, #148]	; (2467c <bt_gatt_foreach_attr_type+0xb8>)
   245e8:	881b      	ldrh	r3, [r3, #0]
   245ea:	4553      	cmp	r3, sl
   245ec:	d22e      	bcs.n	2464c <bt_gatt_foreach_attr_type+0x88>
}
   245ee:	b009      	add	sp, #36	; 0x24
   245f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   245f4:	2500      	movs	r5, #0
   245f6:	6873      	ldr	r3, [r6, #4]
   245f8:	42ab      	cmp	r3, r5
   245fa:	d91a      	bls.n	24632 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   245fc:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   24600:	f8cd b010 	str.w	fp, [sp, #16]
   24604:	f8cd a00c 	str.w	sl, [sp, #12]
   24608:	ab12      	add	r3, sp, #72	; 0x48
   2460a:	9302      	str	r3, [sp, #8]
   2460c:	f8cd 9004 	str.w	r9, [sp, #4]
   24610:	f8cd 8000 	str.w	r8, [sp]
   24614:	9b07      	ldr	r3, [sp, #28]
   24616:	463a      	mov	r2, r7
   24618:	4621      	mov	r1, r4
   2461a:	f8d6 c000 	ldr.w	ip, [r6]
   2461e:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
   24622:	f016 f9eb 	bl	3a9fc <gatt_foreach_iter>
   24626:	2800      	cmp	r0, #0
   24628:	d0e1      	beq.n	245ee <bt_gatt_foreach_attr_type+0x2a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   2462a:	3501      	adds	r5, #1
   2462c:	3401      	adds	r4, #1
   2462e:	b2a4      	uxth	r4, r4
   24630:	e7e1      	b.n	245f6 <bt_gatt_foreach_attr_type+0x32>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   24632:	3608      	adds	r6, #8
   24634:	4b12      	ldr	r3, [pc, #72]	; (24680 <bt_gatt_foreach_attr_type+0xbc>)
   24636:	429e      	cmp	r6, r3
   24638:	d80f      	bhi.n	2465a <bt_gatt_foreach_attr_type+0x96>
   2463a:	4b11      	ldr	r3, [pc, #68]	; (24680 <bt_gatt_foreach_attr_type+0xbc>)
   2463c:	429e      	cmp	r6, r3
   2463e:	d2d6      	bcs.n	245ee <bt_gatt_foreach_attr_type+0x2a>
			if (handle + static_svc->attr_count < start_handle) {
   24640:	6873      	ldr	r3, [r6, #4]
   24642:	18e1      	adds	r1, r4, r3
   24644:	42b9      	cmp	r1, r7
   24646:	d2d5      	bcs.n	245f4 <bt_gatt_foreach_attr_type+0x30>
				handle += static_svc->attr_count;
   24648:	b28c      	uxth	r4, r1
				continue;
   2464a:	e7f2      	b.n	24632 <bt_gatt_foreach_attr_type+0x6e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2464c:	4e0d      	ldr	r6, [pc, #52]	; (24684 <bt_gatt_foreach_attr_type+0xc0>)
		uint16_t handle = 1;
   2464e:	2401      	movs	r4, #1
   24650:	9713      	str	r7, [sp, #76]	; 0x4c
   24652:	4657      	mov	r7, sl
   24654:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   24658:	e7ec      	b.n	24634 <bt_gatt_foreach_attr_type+0x70>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   2465a:	4c0b      	ldr	r4, [pc, #44]	; (24688 <bt_gatt_foreach_attr_type+0xc4>)
   2465c:	f240 7321 	movw	r3, #1825	; 0x721
   24660:	4622      	mov	r2, r4
   24662:	490a      	ldr	r1, [pc, #40]	; (2468c <bt_gatt_foreach_attr_type+0xc8>)
   24664:	480a      	ldr	r0, [pc, #40]	; (24690 <bt_gatt_foreach_attr_type+0xcc>)
   24666:	f011 fe15 	bl	36294 <assert_print>
   2466a:	480a      	ldr	r0, [pc, #40]	; (24694 <bt_gatt_foreach_attr_type+0xd0>)
   2466c:	f011 fe12 	bl	36294 <assert_print>
   24670:	f240 7121 	movw	r1, #1825	; 0x721
   24674:	4620      	mov	r0, r4
   24676:	f011 fe06 	bl	36286 <assert_post_action>
   2467a:	bf00      	nop
   2467c:	2000caa4 	.word	0x2000caa4
   24680:	0003f370 	.word	0x0003f370
   24684:	0003f358 	.word	0x0003f358
   24688:	000438f4 	.word	0x000438f4
   2468c:	00043b94 	.word	0x00043b94
   24690:	0003f72c 	.word	0x0003f72c
   24694:	00040eb4 	.word	0x00040eb4

00024698 <db_hash_gen>:
{
   24698:	b530      	push	{r4, r5, lr}
   2469a:	b0db      	sub	sp, #364	; 0x16c
   2469c:	4604      	mov	r4, r0
	uint8_t key[16] = {};
   2469e:	2300      	movs	r3, #0
   246a0:	934a      	str	r3, [sp, #296]	; 0x128
   246a2:	934b      	str	r3, [sp, #300]	; 0x12c
   246a4:	934c      	str	r3, [sp, #304]	; 0x130
   246a6:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   246a8:	aa1e      	add	r2, sp, #120	; 0x78
   246aa:	a94a      	add	r1, sp, #296	; 0x128
   246ac:	a806      	add	r0, sp, #24
   246ae:	f013 f9aa 	bl	37a06 <tc_cmac_setup>
   246b2:	b310      	cbz	r0, 246fa <db_hash_gen+0x62>
   246b4:	ad06      	add	r5, sp, #24
   246b6:	9502      	str	r5, [sp, #8]
   246b8:	4b37      	ldr	r3, [pc, #220]	; (24798 <db_hash_gen+0x100>)
   246ba:	9301      	str	r3, [sp, #4]
   246bc:	2200      	movs	r2, #0
   246be:	9200      	str	r2, [sp, #0]
   246c0:	4613      	mov	r3, r2
   246c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   246c6:	2001      	movs	r0, #1
   246c8:	f7ff ff7c 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   246cc:	4629      	mov	r1, r5
   246ce:	4833      	ldr	r0, [pc, #204]	; (2479c <db_hash_gen+0x104>)
   246d0:	f013 fa36 	bl	37b40 <tc_cmac_final>
   246d4:	2800      	cmp	r0, #0
   246d6:	d036      	beq.n	24746 <db_hash_gen+0xae>
	sys_mem_swap(db_hash.hash, sizeof(db_hash.hash));
   246d8:	2110      	movs	r1, #16
   246da:	4830      	ldr	r0, [pc, #192]	; (2479c <db_hash_gen+0x104>)
   246dc:	f015 ff7e 	bl	3a5dc <sys_mem_swap>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
   246e0:	2c00      	cmp	r4, #0
   246e2:	d156      	bne.n	24792 <db_hash_gen+0xfa>
   246e4:	4b2e      	ldr	r3, [pc, #184]	; (247a0 <db_hash_gen+0x108>)
   246e6:	e8d3 1fef 	ldaex	r1, [r3]
   246ea:	f041 0104 	orr.w	r1, r1, #4
   246ee:	e8c3 1fe2 	stlex	r2, r1, [r3]
   246f2:	2a00      	cmp	r2, #0
   246f4:	d1f7      	bne.n	246e6 <db_hash_gen+0x4e>
}
   246f6:	b05b      	add	sp, #364	; 0x16c
   246f8:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Unable to setup AES CMAC");
   246fa:	4b2a      	ldr	r3, [pc, #168]	; (247a4 <db_hash_gen+0x10c>)
   246fc:	9359      	str	r3, [sp, #356]	; 0x164
   246fe:	2302      	movs	r3, #2
   24700:	f88d 3014 	strb.w	r3, [sp, #20]
   24704:	2300      	movs	r3, #0
   24706:	f88d 3015 	strb.w	r3, [sp, #21]
   2470a:	f88d 3016 	strb.w	r3, [sp, #22]
   2470e:	f88d 3017 	strb.w	r3, [sp, #23]
   24712:	9a05      	ldr	r2, [sp, #20]
   24714:	9258      	str	r2, [sp, #352]	; 0x160
   24716:	4619      	mov	r1, r3
   24718:	f363 0100 	bfi	r1, r3, #0, #1
   2471c:	f363 0141 	bfi	r1, r3, #1, #1
   24720:	f363 0182 	bfi	r1, r3, #2, #1
   24724:	f363 01c5 	bfi	r1, r3, #3, #3
   24728:	2201      	movs	r2, #1
   2472a:	f362 1188 	bfi	r1, r2, #6, #3
   2472e:	2208      	movs	r2, #8
   24730:	f362 2152 	bfi	r1, r2, #9, #10
   24734:	f363 41de 	bfi	r1, r3, #19, #12
   24738:	f363 71df 	bfi	r1, r3, #31, #1
   2473c:	aa58      	add	r2, sp, #352	; 0x160
   2473e:	481a      	ldr	r0, [pc, #104]	; (247a8 <db_hash_gen+0x110>)
   24740:	f7f2 f904 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   24744:	e7d7      	b.n	246f6 <db_hash_gen+0x5e>
		LOG_ERR("Unable to calculate hash");
   24746:	4b19      	ldr	r3, [pc, #100]	; (247ac <db_hash_gen+0x114>)
   24748:	9353      	str	r3, [sp, #332]	; 0x14c
   2474a:	2302      	movs	r3, #2
   2474c:	f88d 3014 	strb.w	r3, [sp, #20]
   24750:	2300      	movs	r3, #0
   24752:	f88d 3015 	strb.w	r3, [sp, #21]
   24756:	f88d 3016 	strb.w	r3, [sp, #22]
   2475a:	f88d 3017 	strb.w	r3, [sp, #23]
   2475e:	9a05      	ldr	r2, [sp, #20]
   24760:	9252      	str	r2, [sp, #328]	; 0x148
   24762:	4619      	mov	r1, r3
   24764:	f363 0100 	bfi	r1, r3, #0, #1
   24768:	f363 0141 	bfi	r1, r3, #1, #1
   2476c:	f363 0182 	bfi	r1, r3, #2, #1
   24770:	f363 01c5 	bfi	r1, r3, #3, #3
   24774:	2201      	movs	r2, #1
   24776:	f362 1188 	bfi	r1, r2, #6, #3
   2477a:	2208      	movs	r2, #8
   2477c:	f362 2152 	bfi	r1, r2, #9, #10
   24780:	f363 41de 	bfi	r1, r3, #19, #12
   24784:	f363 71df 	bfi	r1, r3, #31, #1
   24788:	aa52      	add	r2, sp, #328	; 0x148
   2478a:	4807      	ldr	r0, [pc, #28]	; (247a8 <db_hash_gen+0x110>)
   2478c:	f7f2 f8de 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   24790:	e7b1      	b.n	246f6 <db_hash_gen+0x5e>
		db_hash_store();
   24792:	f7fe fc83 	bl	2309c <db_hash_store>
   24796:	e7a5      	b.n	246e4 <db_hash_gen+0x4c>
   24798:	0003a737 	.word	0x0003a737
   2479c:	2000b6c8 	.word	0x2000b6c8
   247a0:	2000b790 	.word	0x2000b790
   247a4:	00043bc4 	.word	0x00043bc4
   247a8:	0003f3c0 	.word	0x0003f3c0
   247ac:	00043be0 	.word	0x00043be0

000247b0 <db_hash_read>:
{
   247b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247b4:	b084      	sub	sp, #16
   247b6:	4604      	mov	r4, r0
   247b8:	460d      	mov	r5, r1
   247ba:	4616      	mov	r6, r2
   247bc:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   247be:	491c      	ldr	r1, [pc, #112]	; (24830 <db_hash_read+0x80>)
   247c0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   247c4:	f00e f9b2 	bl	32b2c <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   247c8:	4b1a      	ldr	r3, [pc, #104]	; (24834 <db_hash_read+0x84>)
   247ca:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   247ce:	f013 0f04 	tst.w	r3, #4
   247d2:	d017      	beq.n	24804 <db_hash_read+0x54>
	cfg = find_cf_cfg(conn);
   247d4:	4620      	mov	r0, r4
   247d6:	f7fe fcb3 	bl	23140 <find_cf_cfg>
	if (cfg &&
   247da:	b118      	cbz	r0, 247e4 <db_hash_read+0x34>
	    CF_ROBUST_CACHING(cfg) &&
   247dc:	7a02      	ldrb	r2, [r0, #8]
	if (cfg &&
   247de:	f012 0f01 	tst.w	r2, #1
   247e2:	d113      	bne.n	2480c <db_hash_read+0x5c>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   247e4:	2310      	movs	r3, #16
   247e6:	9302      	str	r3, [sp, #8]
   247e8:	4b13      	ldr	r3, [pc, #76]	; (24838 <db_hash_read+0x88>)
   247ea:	9301      	str	r3, [sp, #4]
   247ec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   247f0:	9300      	str	r3, [sp, #0]
   247f2:	463b      	mov	r3, r7
   247f4:	4632      	mov	r2, r6
   247f6:	4629      	mov	r1, r5
   247f8:	4620      	mov	r0, r4
   247fa:	f016 f9d1 	bl	3aba0 <bt_gatt_attr_read>
}
   247fe:	b004      	add	sp, #16
   24800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		db_hash_gen(true);
   24804:	2001      	movs	r0, #1
   24806:	f7ff ff47 	bl	24698 <db_hash_gen>
   2480a:	e7e3      	b.n	247d4 <db_hash_read+0x24>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2480c:	f100 080c 	add.w	r8, r0, #12
   24810:	2100      	movs	r1, #0
   24812:	4640      	mov	r0, r8
   24814:	f016 f81e 	bl	3a854 <atomic_test_bit>
	    CF_ROBUST_CACHING(cfg) &&
   24818:	2800      	cmp	r0, #0
   2481a:	d1e3      	bne.n	247e4 <db_hash_read+0x34>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2481c:	e8d8 3fef 	ldaex	r3, [r8]
   24820:	f043 0302 	orr.w	r3, r3, #2
   24824:	e8c8 3fe2 	stlex	r2, r3, [r8]
   24828:	2a00      	cmp	r2, #0
   2482a:	d0db      	beq.n	247e4 <db_hash_read+0x34>
   2482c:	e7f6      	b.n	2481c <db_hash_read+0x6c>
   2482e:	bf00      	nop
   24830:	2000b718 	.word	0x2000b718
   24834:	2000b790 	.word	0x2000b790
   24838:	2000b6c8 	.word	0x2000b6c8

0002483c <db_hash_process>:
{
   2483c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2483e:	4b1a      	ldr	r3, [pc, #104]	; (248a8 <db_hash_process+0x6c>)
   24840:	e8d3 2fef 	ldaex	r2, [r3]
   24844:	f022 0108 	bic.w	r1, r2, #8
   24848:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2484c:	2800      	cmp	r0, #0
   2484e:	d1f7      	bne.n	24840 <db_hash_process+0x4>
	if (atomic_test_and_clear_bit(gatt_sc.flags, DB_HASH_LOAD)) {
   24850:	f012 0f08 	tst.w	r2, #8
   24854:	d024      	beq.n	248a0 <db_hash_process+0x64>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24856:	e8d3 3faf 	lda	r3, [r3]
		if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   2485a:	f013 0f04 	tst.w	r3, #4
   2485e:	d013      	beq.n	24888 <db_hash_process+0x4c>
		if (!memcmp(db_hash.stored_hash, db_hash.hash,
   24860:	4912      	ldr	r1, [pc, #72]	; (248ac <db_hash_process+0x70>)
   24862:	2210      	movs	r2, #16
   24864:	1888      	adds	r0, r1, r2
   24866:	f013 fda3 	bl	383b0 <memcmp>
   2486a:	b988      	cbnz	r0, 24890 <db_hash_process+0x54>
			k_work_cancel_delayable(&gatt_sc.work);
   2486c:	4c10      	ldr	r4, [pc, #64]	; (248b0 <db_hash_process+0x74>)
   2486e:	4620      	mov	r0, r4
   24870:	f00e f8fc 	bl	32a6c <k_work_cancel_delayable>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24874:	3430      	adds	r4, #48	; 0x30
   24876:	e8d4 3fef 	ldaex	r3, [r4]
   2487a:	f023 0301 	bic.w	r3, r3, #1
   2487e:	e8c4 3fe2 	stlex	r2, r3, [r4]
   24882:	2a00      	cmp	r2, #0
   24884:	d1f7      	bne.n	24876 <db_hash_process+0x3a>
}
   24886:	bd10      	pop	{r4, pc}
			db_hash_gen(false);
   24888:	2000      	movs	r0, #0
   2488a:	f7ff ff05 	bl	24698 <db_hash_gen>
   2488e:	e7e7      	b.n	24860 <db_hash_process+0x24>
		sc_indicate(0x0001, 0xffff);
   24890:	f64f 71ff 	movw	r1, #65535	; 0xffff
   24894:	2001      	movs	r0, #1
   24896:	f7ff f851 	bl	2393c <sc_indicate>
		db_hash_store();
   2489a:	f7fe fbff 	bl	2309c <db_hash_store>
		return;
   2489e:	e7f2      	b.n	24886 <db_hash_process+0x4a>
	db_hash_gen(true);
   248a0:	2001      	movs	r0, #1
   248a2:	f7ff fef9 	bl	24698 <db_hash_gen>
   248a6:	e7ee      	b.n	24886 <db_hash_process+0x4a>
   248a8:	2000b790 	.word	0x2000b790
   248ac:	2000b6c8 	.word	0x2000b6c8
   248b0:	2000b760 	.word	0x2000b760

000248b4 <ccc_set>:
{
   248b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   248b8:	b0c3      	sub	sp, #268	; 0x10c
   248ba:	af04      	add	r7, sp, #16
   248bc:	4604      	mov	r4, r0
   248be:	460d      	mov	r5, r1
   248c0:	4616      	mov	r6, r2
   248c2:	4699      	mov	r9, r3
		settings_name_next(name, &next);
   248c4:	4639      	mov	r1, r7
   248c6:	f012 fe59 	bl	3757c <settings_name_next>
		if (!name) {
   248ca:	b154      	cbz	r4, 248e2 <ccc_set+0x2e>
		} else if (!next) {
   248cc:	6838      	ldr	r0, [r7, #0]
   248ce:	b398      	cbz	r0, 24938 <ccc_set+0x84>
			unsigned long next_id = strtoul(next, NULL, 10);
   248d0:	220a      	movs	r2, #10
   248d2:	2100      	movs	r1, #0
   248d4:	f013 fc8e 	bl	381f4 <strtoul>
			if (next_id >= CONFIG_BT_ID_MAX) {
   248d8:	4603      	mov	r3, r0
   248da:	2800      	cmp	r0, #0
   248dc:	d14b      	bne.n	24976 <ccc_set+0xc2>
			load.addr_with_id.id = (uint8_t)next_id;
   248de:	7538      	strb	r0, [r7, #20]
   248e0:	e02c      	b.n	2493c <ccc_set+0x88>
			LOG_ERR("Insufficient number of arguments");
   248e2:	4ba1      	ldr	r3, [pc, #644]	; (24b68 <ccc_set+0x2b4>)
   248e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
   248e8:	2302      	movs	r3, #2
   248ea:	f887 3020 	strb.w	r3, [r7, #32]
   248ee:	2300      	movs	r3, #0
   248f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   248f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   248f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   248fc:	6a3a      	ldr	r2, [r7, #32]
   248fe:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
   24902:	4619      	mov	r1, r3
   24904:	f363 0100 	bfi	r1, r3, #0, #1
   24908:	f363 0141 	bfi	r1, r3, #1, #1
   2490c:	f363 0182 	bfi	r1, r3, #2, #1
   24910:	f363 01c5 	bfi	r1, r3, #3, #3
   24914:	2201      	movs	r2, #1
   24916:	f362 1188 	bfi	r1, r2, #6, #3
   2491a:	2208      	movs	r2, #8
   2491c:	f362 2152 	bfi	r1, r2, #9, #10
   24920:	f363 41de 	bfi	r1, r3, #19, #12
   24924:	f363 71df 	bfi	r1, r3, #31, #1
   24928:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
   2492c:	488f      	ldr	r0, [pc, #572]	; (24b6c <ccc_set+0x2b8>)
   2492e:	f7f2 f80d 	bl	1694c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   24932:	f06f 0815 	mvn.w	r8, #21
   24936:	e112      	b.n	24b5e <ccc_set+0x2aa>
			load.addr_with_id.id = BT_ID_DEFAULT;
   24938:	2300      	movs	r3, #0
   2493a:	753b      	strb	r3, [r7, #20]
		err = bt_settings_decode_key(name, &addr);
   2493c:	f107 0108 	add.w	r1, r7, #8
   24940:	4620      	mov	r0, r4
   24942:	f013 fded 	bl	38520 <bt_settings_decode_key>
		if (err) {
   24946:	4680      	mov	r8, r0
   24948:	2800      	cmp	r0, #0
   2494a:	d159      	bne.n	24a00 <ccc_set+0x14c>
		load.addr_with_id.addr = &addr;
   2494c:	f107 0308 	add.w	r3, r7, #8
   24950:	613b      	str	r3, [r7, #16]
		if (len_rd) {
   24952:	2d00      	cmp	r5, #0
   24954:	f000 80f3 	beq.w	24b3e <ccc_set+0x28a>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
   24958:	22c0      	movs	r2, #192	; 0xc0
   2495a:	f107 0120 	add.w	r1, r7, #32
   2495e:	4648      	mov	r0, r9
   24960:	47b0      	blx	r6
			if (len < 0) {
   24962:	1e04      	subs	r4, r0, #0
   24964:	f2c0 80a7 	blt.w	24ab6 <ccc_set+0x202>
			load.entry = ccc_store;
   24968:	f107 0320 	add.w	r3, r7, #32
   2496c:	61bb      	str	r3, [r7, #24]
			load.count = len / sizeof(*ccc_store);
   2496e:	08a4      	lsrs	r4, r4, #2
   24970:	61fc      	str	r4, [r7, #28]
			for (size_t i = 0; i < load.count; i++) {
   24972:	2300      	movs	r3, #0
   24974:	e0e0      	b.n	24b38 <ccc_set+0x284>
				LOG_ERR("Invalid local identity %lu", next_id);
   24976:	466c      	mov	r4, sp
   24978:	b088      	sub	sp, #32
   2497a:	a904      	add	r1, sp, #16
   2497c:	f111 0210 	adds.w	r2, r1, #16
   24980:	d00d      	beq.n	2499e <ccc_set+0xea>
   24982:	200c      	movs	r0, #12
   24984:	b13a      	cbz	r2, 24996 <ccc_set+0xe2>
   24986:	4605      	mov	r5, r0
   24988:	2804      	cmp	r0, #4
   2498a:	dd01      	ble.n	24990 <ccc_set+0xdc>
   2498c:	4e78      	ldr	r6, [pc, #480]	; (24b70 <ccc_set+0x2bc>)
   2498e:	614e      	str	r6, [r1, #20]
   24990:	2d08      	cmp	r5, #8
   24992:	dd07      	ble.n	249a4 <ccc_set+0xf0>
   24994:	618b      	str	r3, [r1, #24]
   24996:	280b      	cmp	r0, #11
   24998:	dd2f      	ble.n	249fa <ccc_set+0x146>
   2499a:	230c      	movs	r3, #12
   2499c:	e004      	b.n	249a8 <ccc_set+0xf4>
   2499e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   249a2:	e7ef      	b.n	24984 <ccc_set+0xd0>
   249a4:	f06f 031b 	mvn.w	r3, #27
   249a8:	b15a      	cbz	r2, 249c2 <ccc_set+0x10e>
   249aa:	2003      	movs	r0, #3
   249ac:	f887 0020 	strb.w	r0, [r7, #32]
   249b0:	2000      	movs	r0, #0
   249b2:	f887 0021 	strb.w	r0, [r7, #33]	; 0x21
   249b6:	f887 0022 	strb.w	r0, [r7, #34]	; 0x22
   249ba:	f887 0023 	strb.w	r0, [r7, #35]	; 0x23
   249be:	6a38      	ldr	r0, [r7, #32]
   249c0:	6108      	str	r0, [r1, #16]
   249c2:	2100      	movs	r1, #0
   249c4:	f36f 0100 	bfc	r1, #0, #1
   249c8:	f36f 0141 	bfc	r1, #1, #1
   249cc:	f36f 0182 	bfc	r1, #2, #1
   249d0:	f36f 01c5 	bfc	r1, #3, #3
   249d4:	2001      	movs	r0, #1
   249d6:	f360 1188 	bfi	r1, r0, #6, #3
   249da:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   249de:	f363 2152 	bfi	r1, r3, #9, #10
   249e2:	f36f 41de 	bfc	r1, #19, #12
   249e6:	f36f 71df 	bfc	r1, #31, #1
   249ea:	2300      	movs	r3, #0
   249ec:	485f      	ldr	r0, [pc, #380]	; (24b6c <ccc_set+0x2b8>)
   249ee:	f7f1 ffad 	bl	1694c <z_impl_z_log_msg_static_create>
   249f2:	46a5      	mov	sp, r4
				return -EINVAL;
   249f4:	f06f 0815 	mvn.w	r8, #21
   249f8:	e0b1      	b.n	24b5e <ccc_set+0x2aa>
				LOG_ERR("Invalid local identity %lu", next_id);
   249fa:	f06f 031b 	mvn.w	r3, #27
   249fe:	e7d3      	b.n	249a8 <ccc_set+0xf4>
			LOG_ERR("Unable to decode address %s", name);
   24a00:	466d      	mov	r5, sp
   24a02:	2300      	movs	r3, #0
   24a04:	f887 3020 	strb.w	r3, [r7, #32]
   24a08:	2302      	movs	r3, #2
   24a0a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
   24a0e:	b088      	sub	sp, #32
   24a10:	ae04      	add	r6, sp, #16
   24a12:	f116 0210 	adds.w	r2, r6, #16
   24a16:	d011      	beq.n	24a3c <ccc_set+0x188>
   24a18:	200e      	movs	r0, #14
   24a1a:	b11a      	cbz	r2, 24a24 <ccc_set+0x170>
   24a1c:	2804      	cmp	r0, #4
   24a1e:	dd01      	ble.n	24a24 <ccc_set+0x170>
   24a20:	4b54      	ldr	r3, [pc, #336]	; (24b74 <ccc_set+0x2c0>)
   24a22:	6173      	str	r3, [r6, #20]
   24a24:	2300      	movs	r3, #0
   24a26:	713b      	strb	r3, [r7, #4]
   24a28:	2302      	movs	r3, #2
   24a2a:	717b      	strb	r3, [r7, #5]
   24a2c:	b19a      	cbz	r2, 24a56 <ccc_set+0x1a2>
   24a2e:	2808      	cmp	r0, #8
   24a30:	dd00      	ble.n	24a34 <ccc_set+0x180>
   24a32:	61b4      	str	r4, [r6, #24]
   24a34:	f106 031c 	add.w	r3, r6, #28
   24a38:	2100      	movs	r1, #0
   24a3a:	e00a      	b.n	24a52 <ccc_set+0x19e>
   24a3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   24a40:	e7eb      	b.n	24a1a <ccc_set+0x166>
   24a42:	f101 04f8 	add.w	r4, r1, #248	; 0xf8
   24a46:	443c      	add	r4, r7
   24a48:	f814 4cf4 	ldrb.w	r4, [r4, #-244]
   24a4c:	f803 4b01 	strb.w	r4, [r3], #1
   24a50:	3101      	adds	r1, #1
   24a52:	2901      	cmp	r1, #1
   24a54:	d9f5      	bls.n	24a42 <ccc_set+0x18e>
   24a56:	280d      	cmp	r0, #13
   24a58:	dd2a      	ble.n	24ab0 <ccc_set+0x1fc>
   24a5a:	230e      	movs	r3, #14
   24a5c:	b162      	cbz	r2, 24a78 <ccc_set+0x1c4>
   24a5e:	2103      	movs	r1, #3
   24a60:	f887 1020 	strb.w	r1, [r7, #32]
   24a64:	2100      	movs	r1, #0
   24a66:	f887 1021 	strb.w	r1, [r7, #33]	; 0x21
   24a6a:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
   24a6e:	2101      	movs	r1, #1
   24a70:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   24a74:	6a38      	ldr	r0, [r7, #32]
   24a76:	6130      	str	r0, [r6, #16]
   24a78:	2100      	movs	r1, #0
   24a7a:	f36f 0100 	bfc	r1, #0, #1
   24a7e:	f36f 0141 	bfc	r1, #1, #1
   24a82:	f36f 0182 	bfc	r1, #2, #1
   24a86:	f36f 01c5 	bfc	r1, #3, #3
   24a8a:	2001      	movs	r0, #1
   24a8c:	f360 1188 	bfi	r1, r0, #6, #3
   24a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
   24a94:	f363 2152 	bfi	r1, r3, #9, #10
   24a98:	f36f 41de 	bfc	r1, #19, #12
   24a9c:	f36f 71df 	bfc	r1, #31, #1
   24aa0:	2300      	movs	r3, #0
   24aa2:	4832      	ldr	r0, [pc, #200]	; (24b6c <ccc_set+0x2b8>)
   24aa4:	f7f1 ff52 	bl	1694c <z_impl_z_log_msg_static_create>
   24aa8:	46ad      	mov	sp, r5
			return -EINVAL;
   24aaa:	f06f 0815 	mvn.w	r8, #21
   24aae:	e056      	b.n	24b5e <ccc_set+0x2aa>
			LOG_ERR("Unable to decode address %s", name);
   24ab0:	f06f 031b 	mvn.w	r3, #27
   24ab4:	e7d2      	b.n	24a5c <ccc_set+0x1a8>
				LOG_ERR("Failed to decode value (err %zd)", len);
   24ab6:	466e      	mov	r6, sp
   24ab8:	b088      	sub	sp, #32
   24aba:	ab04      	add	r3, sp, #16
   24abc:	f113 0210 	adds.w	r2, r3, #16
   24ac0:	d00d      	beq.n	24ade <ccc_set+0x22a>
   24ac2:	210c      	movs	r1, #12
   24ac4:	b13a      	cbz	r2, 24ad6 <ccc_set+0x222>
   24ac6:	4608      	mov	r0, r1
   24ac8:	2904      	cmp	r1, #4
   24aca:	dd01      	ble.n	24ad0 <ccc_set+0x21c>
   24acc:	4d2a      	ldr	r5, [pc, #168]	; (24b78 <ccc_set+0x2c4>)
   24ace:	615d      	str	r5, [r3, #20]
   24ad0:	2808      	cmp	r0, #8
   24ad2:	dd07      	ble.n	24ae4 <ccc_set+0x230>
   24ad4:	619c      	str	r4, [r3, #24]
   24ad6:	290b      	cmp	r1, #11
   24ad8:	dd2a      	ble.n	24b30 <ccc_set+0x27c>
   24ada:	250c      	movs	r5, #12
   24adc:	e004      	b.n	24ae8 <ccc_set+0x234>
   24ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   24ae2:	e7ef      	b.n	24ac4 <ccc_set+0x210>
   24ae4:	f06f 051b 	mvn.w	r5, #27
   24ae8:	b13a      	cbz	r2, 24afa <ccc_set+0x246>
   24aea:	2103      	movs	r1, #3
   24aec:	7139      	strb	r1, [r7, #4]
   24aee:	2100      	movs	r1, #0
   24af0:	7179      	strb	r1, [r7, #5]
   24af2:	71b9      	strb	r1, [r7, #6]
   24af4:	71f9      	strb	r1, [r7, #7]
   24af6:	6878      	ldr	r0, [r7, #4]
   24af8:	6118      	str	r0, [r3, #16]
   24afa:	2100      	movs	r1, #0
   24afc:	f36f 0100 	bfc	r1, #0, #1
   24b00:	f36f 0141 	bfc	r1, #1, #1
   24b04:	f36f 0182 	bfc	r1, #2, #1
   24b08:	f36f 01c5 	bfc	r1, #3, #3
   24b0c:	2301      	movs	r3, #1
   24b0e:	f363 1188 	bfi	r1, r3, #6, #3
   24b12:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   24b16:	f363 2152 	bfi	r1, r3, #9, #10
   24b1a:	f36f 41de 	bfc	r1, #19, #12
   24b1e:	f36f 71df 	bfc	r1, #31, #1
   24b22:	2300      	movs	r3, #0
   24b24:	4811      	ldr	r0, [pc, #68]	; (24b6c <ccc_set+0x2b8>)
   24b26:	f7f1 ff11 	bl	1694c <z_impl_z_log_msg_static_create>
   24b2a:	46b5      	mov	sp, r6
				return len;
   24b2c:	46a0      	mov	r8, r4
   24b2e:	e016      	b.n	24b5e <ccc_set+0x2aa>
				LOG_ERR("Failed to decode value (err %zd)", len);
   24b30:	f06f 051b 	mvn.w	r5, #27
   24b34:	e7d8      	b.n	24ae8 <ccc_set+0x234>
			for (size_t i = 0; i < load.count; i++) {
   24b36:	3301      	adds	r3, #1
   24b38:	429c      	cmp	r4, r3
   24b3a:	d8fc      	bhi.n	24b36 <ccc_set+0x282>
   24b3c:	e002      	b.n	24b44 <ccc_set+0x290>
			load.entry = NULL;
   24b3e:	2300      	movs	r3, #0
   24b40:	61bb      	str	r3, [r7, #24]
			load.count = 0;
   24b42:	61fb      	str	r3, [r7, #28]
   24b44:	f107 0310 	add.w	r3, r7, #16
   24b48:	9302      	str	r3, [sp, #8]
   24b4a:	4b0c      	ldr	r3, [pc, #48]	; (24b7c <ccc_set+0x2c8>)
   24b4c:	9301      	str	r3, [sp, #4]
   24b4e:	2200      	movs	r2, #0
   24b50:	9200      	str	r2, [sp, #0]
   24b52:	4613      	mov	r3, r2
   24b54:	f64f 71ff 	movw	r1, #65535	; 0xffff
   24b58:	2001      	movs	r0, #1
   24b5a:	f7ff fd33 	bl	245c4 <bt_gatt_foreach_attr_type>
}
   24b5e:	4640      	mov	r0, r8
   24b60:	37fc      	adds	r7, #252	; 0xfc
   24b62:	46bd      	mov	sp, r7
   24b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24b68:	000420a0 	.word	0x000420a0
   24b6c:	0003f3c0 	.word	0x0003f3c0
   24b70:	00043afc 	.word	0x00043afc
   24b74:	00043ae0 	.word	0x00043ae0
   24b78:	0004394c 	.word	0x0004394c
   24b7c:	0002345d 	.word	0x0002345d

00024b80 <ccc_set_direct>:
{
   24b80:	b570      	push	{r4, r5, r6, lr}
   24b82:	b088      	sub	sp, #32
   24b84:	460c      	mov	r4, r1
   24b86:	4615      	mov	r5, r2
   24b88:	461e      	mov	r6, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
   24b8a:	466a      	mov	r2, sp
   24b8c:	491a      	ldr	r1, [pc, #104]	; (24bf8 <ccc_set_direct+0x78>)
   24b8e:	980c      	ldr	r0, [sp, #48]	; 0x30
   24b90:	f012 fcca 	bl	37528 <settings_name_steq>
   24b94:	b138      	cbz	r0, 24ba6 <ccc_set_direct+0x26>
		return ccc_set(name, len, read_cb, cb_arg);
   24b96:	4633      	mov	r3, r6
   24b98:	462a      	mov	r2, r5
   24b9a:	4621      	mov	r1, r4
   24b9c:	9800      	ldr	r0, [sp, #0]
   24b9e:	f7ff fe89 	bl	248b4 <ccc_set>
}
   24ba2:	b008      	add	sp, #32
   24ba4:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Invalid key");
   24ba6:	4b15      	ldr	r3, [pc, #84]	; (24bfc <ccc_set_direct+0x7c>)
   24ba8:	9307      	str	r3, [sp, #28]
   24baa:	2302      	movs	r3, #2
   24bac:	f88d 3004 	strb.w	r3, [sp, #4]
   24bb0:	2300      	movs	r3, #0
   24bb2:	f88d 3005 	strb.w	r3, [sp, #5]
   24bb6:	f88d 3006 	strb.w	r3, [sp, #6]
   24bba:	f88d 3007 	strb.w	r3, [sp, #7]
   24bbe:	9a01      	ldr	r2, [sp, #4]
   24bc0:	9206      	str	r2, [sp, #24]
   24bc2:	4619      	mov	r1, r3
   24bc4:	f363 0100 	bfi	r1, r3, #0, #1
   24bc8:	f363 0141 	bfi	r1, r3, #1, #1
   24bcc:	f363 0182 	bfi	r1, r3, #2, #1
   24bd0:	f363 01c5 	bfi	r1, r3, #3, #3
   24bd4:	2201      	movs	r2, #1
   24bd6:	f362 1188 	bfi	r1, r2, #6, #3
   24bda:	2208      	movs	r2, #8
   24bdc:	f362 2152 	bfi	r1, r2, #9, #10
   24be0:	f363 41de 	bfi	r1, r3, #19, #12
   24be4:	f363 71df 	bfi	r1, r3, #31, #1
   24be8:	aa06      	add	r2, sp, #24
   24bea:	4805      	ldr	r0, [pc, #20]	; (24c00 <ccc_set_direct+0x80>)
   24bec:	f7f1 feae 	bl	1694c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   24bf0:	f06f 0015 	mvn.w	r0, #21
   24bf4:	e7d5      	b.n	24ba2 <ccc_set_direct+0x22>
   24bf6:	bf00      	nop
   24bf8:	00043bfc 	.word	0x00043bfc
   24bfc:	00043c04 	.word	0x00043c04
   24c00:	0003f3c0 	.word	0x0003f3c0

00024c04 <gatt_find_by_uuid>:
{
   24c04:	b510      	push	{r4, lr}
   24c06:	b084      	sub	sp, #16
   24c08:	4604      	mov	r4, r0
   24c0a:	460a      	mov	r2, r1
	found->attr = NULL;
   24c0c:	2300      	movs	r3, #0
   24c0e:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   24c10:	9002      	str	r0, [sp, #8]
   24c12:	4907      	ldr	r1, [pc, #28]	; (24c30 <gatt_find_by_uuid+0x2c>)
   24c14:	9101      	str	r1, [sp, #4]
   24c16:	2101      	movs	r1, #1
   24c18:	9100      	str	r1, [sp, #0]
   24c1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   24c1e:	8880      	ldrh	r0, [r0, #4]
   24c20:	f7ff fcd0 	bl	245c4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   24c24:	6820      	ldr	r0, [r4, #0]
}
   24c26:	3800      	subs	r0, #0
   24c28:	bf18      	it	ne
   24c2a:	2001      	movne	r0, #1
   24c2c:	b004      	add	sp, #16
   24c2e:	bd10      	pop	{r4, pc}
   24c30:	0003a713 	.word	0x0003a713

00024c34 <bt_gatt_attr_next>:
{
   24c34:	b510      	push	{r4, lr}
   24c36:	b086      	sub	sp, #24
	struct bt_gatt_attr *next = NULL;
   24c38:	2400      	movs	r4, #0
   24c3a:	9405      	str	r4, [sp, #20]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   24c3c:	f7ff fc74 	bl	24528 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   24c40:	3001      	adds	r0, #1
   24c42:	b280      	uxth	r0, r0
   24c44:	ab05      	add	r3, sp, #20
   24c46:	9302      	str	r3, [sp, #8]
   24c48:	4b05      	ldr	r3, [pc, #20]	; (24c60 <bt_gatt_attr_next+0x2c>)
   24c4a:	9301      	str	r3, [sp, #4]
   24c4c:	9400      	str	r4, [sp, #0]
   24c4e:	4623      	mov	r3, r4
   24c50:	4622      	mov	r2, r4
   24c52:	4601      	mov	r1, r0
   24c54:	f7ff fcb6 	bl	245c4 <bt_gatt_foreach_attr_type>
}
   24c58:	9805      	ldr	r0, [sp, #20]
   24c5a:	b006      	add	sp, #24
   24c5c:	bd10      	pop	{r4, pc}
   24c5e:	bf00      	nop
   24c60:	0003a6bb 	.word	0x0003a6bb

00024c64 <bt_gatt_is_subscribed>:
{
   24c64:	b5f0      	push	{r4, r5, r6, r7, lr}
   24c66:	b089      	sub	sp, #36	; 0x24
	__ASSERT(conn, "invalid parameter\n");
   24c68:	b148      	cbz	r0, 24c7e <bt_gatt_is_subscribed+0x1a>
   24c6a:	460c      	mov	r4, r1
   24c6c:	4615      	mov	r5, r2
   24c6e:	4606      	mov	r6, r0
	__ASSERT(attr, "invalid parameter\n");
   24c70:	b1a9      	cbz	r1, 24c9e <bt_gatt_is_subscribed+0x3a>
	if (conn->state != BT_CONN_CONNECTED) {
   24c72:	7b43      	ldrb	r3, [r0, #13]
   24c74:	2b07      	cmp	r3, #7
   24c76:	d022      	beq.n	24cbe <bt_gatt_is_subscribed+0x5a>
		return false;
   24c78:	2000      	movs	r0, #0
}
   24c7a:	b009      	add	sp, #36	; 0x24
   24c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT(conn, "invalid parameter\n");
   24c7e:	4c66      	ldr	r4, [pc, #408]	; (24e18 <bt_gatt_is_subscribed+0x1b4>)
   24c80:	f640 434d 	movw	r3, #3149	; 0xc4d
   24c84:	4622      	mov	r2, r4
   24c86:	4965      	ldr	r1, [pc, #404]	; (24e1c <bt_gatt_is_subscribed+0x1b8>)
   24c88:	4865      	ldr	r0, [pc, #404]	; (24e20 <bt_gatt_is_subscribed+0x1bc>)
   24c8a:	f011 fb03 	bl	36294 <assert_print>
   24c8e:	4865      	ldr	r0, [pc, #404]	; (24e24 <bt_gatt_is_subscribed+0x1c0>)
   24c90:	f011 fb00 	bl	36294 <assert_print>
   24c94:	f640 414d 	movw	r1, #3149	; 0xc4d
   24c98:	4620      	mov	r0, r4
   24c9a:	f011 faf4 	bl	36286 <assert_post_action>
	__ASSERT(attr, "invalid parameter\n");
   24c9e:	4c5e      	ldr	r4, [pc, #376]	; (24e18 <bt_gatt_is_subscribed+0x1b4>)
   24ca0:	f640 434e 	movw	r3, #3150	; 0xc4e
   24ca4:	4622      	mov	r2, r4
   24ca6:	4960      	ldr	r1, [pc, #384]	; (24e28 <bt_gatt_is_subscribed+0x1c4>)
   24ca8:	485d      	ldr	r0, [pc, #372]	; (24e20 <bt_gatt_is_subscribed+0x1bc>)
   24caa:	f011 faf3 	bl	36294 <assert_print>
   24cae:	485d      	ldr	r0, [pc, #372]	; (24e24 <bt_gatt_is_subscribed+0x1c0>)
   24cb0:	f011 faf0 	bl	36294 <assert_print>
   24cb4:	f640 414e 	movw	r1, #3150	; 0xc4e
   24cb8:	4620      	mov	r0, r4
   24cba:	f011 fae4 	bl	36286 <assert_post_action>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   24cbe:	6808      	ldr	r0, [r1, #0]
   24cc0:	2300      	movs	r3, #0
   24cc2:	f88d 3004 	strb.w	r3, [sp, #4]
   24cc6:	f642 0303 	movw	r3, #10243	; 0x2803
   24cca:	f8ad 3006 	strh.w	r3, [sp, #6]
   24cce:	a901      	add	r1, sp, #4
   24cd0:	f013 fc63 	bl	3859a <bt_uuid_cmp>
   24cd4:	b950      	cbnz	r0, 24cec <bt_gatt_is_subscribed+0x88>
		struct bt_gatt_chrc *chrc = attr->user_data;
   24cd6:	68e3      	ldr	r3, [r4, #12]
		if (!(chrc->properties &
   24cd8:	799b      	ldrb	r3, [r3, #6]
   24cda:	f013 0f30 	tst.w	r3, #48	; 0x30
   24cde:	d0cc      	beq.n	24c7a <bt_gatt_is_subscribed+0x16>
		attr = bt_gatt_attr_next(attr);
   24ce0:	4620      	mov	r0, r4
   24ce2:	f7ff ffa7 	bl	24c34 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   24ce6:	4604      	mov	r4, r0
   24ce8:	2800      	cmp	r0, #0
   24cea:	d046      	beq.n	24d7a <bt_gatt_is_subscribed+0x116>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   24cec:	6820      	ldr	r0, [r4, #0]
   24cee:	2300      	movs	r3, #0
   24cf0:	f88d 3008 	strb.w	r3, [sp, #8]
   24cf4:	f642 1302 	movw	r3, #10498	; 0x2902
   24cf8:	f8ad 300a 	strh.w	r3, [sp, #10]
   24cfc:	a902      	add	r1, sp, #8
   24cfe:	f013 fc4c 	bl	3859a <bt_uuid_cmp>
   24d02:	2800      	cmp	r0, #0
   24d04:	d149      	bne.n	24d9a <bt_gatt_is_subscribed+0x136>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   24d06:	6820      	ldr	r0, [r4, #0]
   24d08:	2300      	movs	r3, #0
   24d0a:	f88d 300c 	strb.w	r3, [sp, #12]
   24d0e:	f642 1302 	movw	r3, #10498	; 0x2902
   24d12:	f8ad 300e 	strh.w	r3, [sp, #14]
   24d16:	a903      	add	r1, sp, #12
   24d18:	f013 fc3f 	bl	3859a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   24d1c:	2800      	cmp	r0, #0
   24d1e:	d052      	beq.n	24dc6 <bt_gatt_is_subscribed+0x162>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   24d20:	6820      	ldr	r0, [r4, #0]
   24d22:	2300      	movs	r3, #0
   24d24:	f88d 3010 	strb.w	r3, [sp, #16]
   24d28:	f642 0303 	movw	r3, #10243	; 0x2803
   24d2c:	f8ad 3012 	strh.w	r3, [sp, #18]
   24d30:	a904      	add	r1, sp, #16
   24d32:	f013 fc32 	bl	3859a <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   24d36:	2800      	cmp	r0, #0
   24d38:	d045      	beq.n	24dc6 <bt_gatt_is_subscribed+0x162>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   24d3a:	6820      	ldr	r0, [r4, #0]
   24d3c:	2300      	movs	r3, #0
   24d3e:	f88d 3014 	strb.w	r3, [sp, #20]
   24d42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   24d46:	f8ad 3016 	strh.w	r3, [sp, #22]
   24d4a:	a905      	add	r1, sp, #20
   24d4c:	f013 fc25 	bl	3859a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   24d50:	2800      	cmp	r0, #0
   24d52:	d038      	beq.n	24dc6 <bt_gatt_is_subscribed+0x162>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   24d54:	6820      	ldr	r0, [r4, #0]
   24d56:	2300      	movs	r3, #0
   24d58:	f88d 3018 	strb.w	r3, [sp, #24]
   24d5c:	f642 0301 	movw	r3, #10241	; 0x2801
   24d60:	f8ad 301a 	strh.w	r3, [sp, #26]
   24d64:	a906      	add	r1, sp, #24
   24d66:	f013 fc18 	bl	3859a <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   24d6a:	b360      	cbz	r0, 24dc6 <bt_gatt_is_subscribed+0x162>
		attr = bt_gatt_attr_next(attr);
   24d6c:	4620      	mov	r0, r4
   24d6e:	f7ff ff61 	bl	24c34 <bt_gatt_attr_next>
		if (!attr) {
   24d72:	4604      	mov	r4, r0
   24d74:	2800      	cmp	r0, #0
   24d76:	d1c6      	bne.n	24d06 <bt_gatt_is_subscribed+0xa2>
   24d78:	e77f      	b.n	24c7a <bt_gatt_is_subscribed+0x16>
		__ASSERT(attr, "No more attributes\n");
   24d7a:	4c27      	ldr	r4, [pc, #156]	; (24e18 <bt_gatt_is_subscribed+0x1b4>)
   24d7c:	f640 435f 	movw	r3, #3167	; 0xc5f
   24d80:	4622      	mov	r2, r4
   24d82:	4929      	ldr	r1, [pc, #164]	; (24e28 <bt_gatt_is_subscribed+0x1c4>)
   24d84:	4826      	ldr	r0, [pc, #152]	; (24e20 <bt_gatt_is_subscribed+0x1bc>)
   24d86:	f011 fa85 	bl	36294 <assert_print>
   24d8a:	4828      	ldr	r0, [pc, #160]	; (24e2c <bt_gatt_is_subscribed+0x1c8>)
   24d8c:	f011 fa82 	bl	36294 <assert_print>
   24d90:	f640 415f 	movw	r1, #3167	; 0xc5f
   24d94:	4620      	mov	r0, r4
   24d96:	f011 fa76 	bl	36286 <assert_post_action>
		attr = bt_gatt_attr_next(attr);
   24d9a:	4620      	mov	r0, r4
   24d9c:	f7ff ff4a 	bl	24c34 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   24da0:	4604      	mov	r4, r0
   24da2:	2800      	cmp	r0, #0
   24da4:	d1af      	bne.n	24d06 <bt_gatt_is_subscribed+0xa2>
   24da6:	4c1c      	ldr	r4, [pc, #112]	; (24e18 <bt_gatt_is_subscribed+0x1b4>)
   24da8:	f640 4365 	movw	r3, #3173	; 0xc65
   24dac:	4622      	mov	r2, r4
   24dae:	491e      	ldr	r1, [pc, #120]	; (24e28 <bt_gatt_is_subscribed+0x1c4>)
   24db0:	481b      	ldr	r0, [pc, #108]	; (24e20 <bt_gatt_is_subscribed+0x1bc>)
   24db2:	f011 fa6f 	bl	36294 <assert_print>
   24db6:	481d      	ldr	r0, [pc, #116]	; (24e2c <bt_gatt_is_subscribed+0x1c8>)
   24db8:	f011 fa6c 	bl	36294 <assert_print>
   24dbc:	f640 4165 	movw	r1, #3173	; 0xc65
   24dc0:	4620      	mov	r0, r4
   24dc2:	f011 fa60 	bl	36286 <assert_post_action>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   24dc6:	6820      	ldr	r0, [r4, #0]
   24dc8:	2300      	movs	r3, #0
   24dca:	f88d 301c 	strb.w	r3, [sp, #28]
   24dce:	f642 1302 	movw	r3, #10498	; 0x2902
   24dd2:	f8ad 301e 	strh.w	r3, [sp, #30]
   24dd6:	a907      	add	r1, sp, #28
   24dd8:	f013 fbdf 	bl	3859a <bt_uuid_cmp>
   24ddc:	b920      	cbnz	r0, 24de8 <bt_gatt_is_subscribed+0x184>
	ccc = attr->user_data;
   24dde:	68e7      	ldr	r7, [r4, #12]
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   24de0:	2400      	movs	r4, #0
   24de2:	b11c      	cbz	r4, 24dec <bt_gatt_is_subscribed+0x188>
	return false;
   24de4:	2000      	movs	r0, #0
   24de6:	e748      	b.n	24c7a <bt_gatt_is_subscribed+0x16>
		return false;
   24de8:	2000      	movs	r0, #0
   24dea:	e746      	b.n	24c7a <bt_gatt_is_subscribed+0x16>
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   24dec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   24df0:	eb07 0243 	add.w	r2, r7, r3, lsl #1
   24df4:	3201      	adds	r2, #1
   24df6:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   24dfa:	4630      	mov	r0, r6
   24dfc:	f014 fac6 	bl	3938c <bt_conn_is_peer_addr_le>
   24e00:	b138      	cbz	r0, 24e12 <bt_gatt_is_subscribed+0x1ae>
		    (ccc_type & ccc->cfg[i].value)) {
   24e02:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   24e06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   24e0a:	891b      	ldrh	r3, [r3, #8]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   24e0c:	422b      	tst	r3, r5
   24e0e:	f47f af34 	bne.w	24c7a <bt_gatt_is_subscribed+0x16>
	for (size_t i = 0; i < BT_GATT_CCC_MAX; i++) {
   24e12:	3401      	adds	r4, #1
   24e14:	e7e5      	b.n	24de2 <bt_gatt_is_subscribed+0x17e>
   24e16:	bf00      	nop
   24e18:	000438f4 	.word	0x000438f4
   24e1c:	0004311c 	.word	0x0004311c
   24e20:	0003f72c 	.word	0x0003f72c
   24e24:	00043c14 	.word	0x00043c14
   24e28:	00043c2c 	.word	0x00043c2c
   24e2c:	00043c34 	.word	0x00043c34

00024e30 <gatt_indicate>:
{
   24e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24e34:	b096      	sub	sp, #88	; 0x58
   24e36:	4605      	mov	r5, r0
   24e38:	460f      	mov	r7, r1
   24e3a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   24e3c:	2294      	movs	r2, #148	; 0x94
   24e3e:	6861      	ldr	r1, [r4, #4]
   24e40:	f015 ffc1 	bl	3adc6 <bt_gatt_check_perm>
   24e44:	2800      	cmp	r0, #0
   24e46:	d13f      	bne.n	24ec8 <gatt_indicate+0x98>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   24e48:	2202      	movs	r2, #2
   24e4a:	6861      	ldr	r1, [r4, #4]
   24e4c:	4628      	mov	r0, r5
   24e4e:	f7ff ff09 	bl	24c64 <bt_gatt_is_subscribed>
   24e52:	2800      	cmp	r0, #0
   24e54:	d05f      	beq.n	24f16 <gatt_indicate+0xe6>
	len = sizeof(*ind) + params->len;
   24e56:	8aa6      	ldrh	r6, [r4, #20]
   24e58:	3602      	adds	r6, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   24e5a:	9600      	str	r6, [sp, #0]
   24e5c:	231d      	movs	r3, #29
   24e5e:	2200      	movs	r2, #0
   24e60:	4621      	mov	r1, r4
   24e62:	4859      	ldr	r0, [pc, #356]	; (24fc8 <gatt_indicate+0x198>)
   24e64:	f015 fdf5 	bl	3aa52 <gatt_req_alloc>
	if (!req) {
   24e68:	4681      	mov	r9, r0
   24e6a:	2800      	cmp	r0, #0
   24e6c:	f000 80a8 	beq.w	24fc0 <gatt_indicate+0x190>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   24e70:	4632      	mov	r2, r6
   24e72:	211d      	movs	r1, #29
   24e74:	4628      	mov	r0, r5
   24e76:	f7fd fc19 	bl	226ac <bt_att_create_pdu>
	if (!buf) {
   24e7a:	4680      	mov	r8, r0
   24e7c:	2800      	cmp	r0, #0
   24e7e:	d071      	beq.n	24f64 <gatt_indicate+0x134>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   24e80:	2301      	movs	r3, #1
   24e82:	2200      	movs	r2, #0
   24e84:	4611      	mov	r1, r2
   24e86:	f015 fb7f 	bl	3a588 <bt_att_set_tx_meta_data>
   24e8a:	f108 0a0c 	add.w	sl, r8, #12
   24e8e:	2102      	movs	r1, #2
   24e90:	4650      	mov	r0, sl
   24e92:	f004 fd25 	bl	298e0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   24e96:	4606      	mov	r6, r0
   24e98:	f826 7b02 	strh.w	r7, [r6], #2
   24e9c:	8aa1      	ldrh	r1, [r4, #20]
   24e9e:	4650      	mov	r0, sl
   24ea0:	f004 fd1e 	bl	298e0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   24ea4:	8aa2      	ldrh	r2, [r4, #20]
   24ea6:	6921      	ldr	r1, [r4, #16]
   24ea8:	4630      	mov	r0, r6
   24eaa:	f013 faa6 	bl	383fa <memcpy>
	req->buf = buf;
   24eae:	f8c9 8008 	str.w	r8, [r9, #8]
	err = bt_att_req_send(conn, req);
   24eb2:	4649      	mov	r1, r9
   24eb4:	4628      	mov	r0, r5
   24eb6:	f7fe f819 	bl	22eec <bt_att_req_send>
	if (err) {
   24eba:	4604      	mov	r4, r0
   24ebc:	2800      	cmp	r0, #0
   24ebe:	d17b      	bne.n	24fb8 <gatt_indicate+0x188>
}
   24ec0:	4620      	mov	r0, r4
   24ec2:	b016      	add	sp, #88	; 0x58
   24ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_WRN("Link is not encrypted");
   24ec8:	4b40      	ldr	r3, [pc, #256]	; (24fcc <gatt_indicate+0x19c>)
   24eca:	9315      	str	r3, [sp, #84]	; 0x54
   24ecc:	2202      	movs	r2, #2
   24ece:	f88d 200c 	strb.w	r2, [sp, #12]
   24ed2:	2300      	movs	r3, #0
   24ed4:	f88d 300d 	strb.w	r3, [sp, #13]
   24ed8:	f88d 300e 	strb.w	r3, [sp, #14]
   24edc:	f88d 300f 	strb.w	r3, [sp, #15]
   24ee0:	9903      	ldr	r1, [sp, #12]
   24ee2:	9114      	str	r1, [sp, #80]	; 0x50
   24ee4:	4619      	mov	r1, r3
   24ee6:	f363 0100 	bfi	r1, r3, #0, #1
   24eea:	f363 0141 	bfi	r1, r3, #1, #1
   24eee:	f363 0182 	bfi	r1, r3, #2, #1
   24ef2:	f363 01c5 	bfi	r1, r3, #3, #3
   24ef6:	f362 1188 	bfi	r1, r2, #6, #3
   24efa:	2208      	movs	r2, #8
   24efc:	f362 2152 	bfi	r1, r2, #9, #10
   24f00:	f363 41de 	bfi	r1, r3, #19, #12
   24f04:	f363 71df 	bfi	r1, r3, #31, #1
   24f08:	aa14      	add	r2, sp, #80	; 0x50
   24f0a:	4831      	ldr	r0, [pc, #196]	; (24fd0 <gatt_indicate+0x1a0>)
   24f0c:	f7f1 fd1e 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EPERM;
   24f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   24f14:	e7d4      	b.n	24ec0 <gatt_indicate+0x90>
			LOG_WRN("Device is not subscribed to characteristic");
   24f16:	4b2f      	ldr	r3, [pc, #188]	; (24fd4 <gatt_indicate+0x1a4>)
   24f18:	930f      	str	r3, [sp, #60]	; 0x3c
   24f1a:	2202      	movs	r2, #2
   24f1c:	f88d 200c 	strb.w	r2, [sp, #12]
   24f20:	2300      	movs	r3, #0
   24f22:	f88d 300d 	strb.w	r3, [sp, #13]
   24f26:	f88d 300e 	strb.w	r3, [sp, #14]
   24f2a:	f88d 300f 	strb.w	r3, [sp, #15]
   24f2e:	9903      	ldr	r1, [sp, #12]
   24f30:	910e      	str	r1, [sp, #56]	; 0x38
   24f32:	4619      	mov	r1, r3
   24f34:	f363 0100 	bfi	r1, r3, #0, #1
   24f38:	f363 0141 	bfi	r1, r3, #1, #1
   24f3c:	f363 0182 	bfi	r1, r3, #2, #1
   24f40:	f363 01c5 	bfi	r1, r3, #3, #3
   24f44:	f362 1188 	bfi	r1, r2, #6, #3
   24f48:	2208      	movs	r2, #8
   24f4a:	f362 2152 	bfi	r1, r2, #9, #10
   24f4e:	f363 41de 	bfi	r1, r3, #19, #12
   24f52:	f363 71df 	bfi	r1, r3, #31, #1
   24f56:	aa0e      	add	r2, sp, #56	; 0x38
   24f58:	481d      	ldr	r0, [pc, #116]	; (24fd0 <gatt_indicate+0x1a0>)
   24f5a:	f7f1 fcf7 	bl	1694c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   24f5e:	f06f 0415 	mvn.w	r4, #21
   24f62:	e7ad      	b.n	24ec0 <gatt_indicate+0x90>
		LOG_WRN("No buffer available to send indication");
   24f64:	4b1c      	ldr	r3, [pc, #112]	; (24fd8 <gatt_indicate+0x1a8>)
   24f66:	9309      	str	r3, [sp, #36]	; 0x24
   24f68:	2202      	movs	r2, #2
   24f6a:	f88d 200c 	strb.w	r2, [sp, #12]
   24f6e:	2300      	movs	r3, #0
   24f70:	f88d 300d 	strb.w	r3, [sp, #13]
   24f74:	f88d 300e 	strb.w	r3, [sp, #14]
   24f78:	f88d 300f 	strb.w	r3, [sp, #15]
   24f7c:	9903      	ldr	r1, [sp, #12]
   24f7e:	9108      	str	r1, [sp, #32]
   24f80:	4619      	mov	r1, r3
   24f82:	f363 0100 	bfi	r1, r3, #0, #1
   24f86:	f363 0141 	bfi	r1, r3, #1, #1
   24f8a:	f363 0182 	bfi	r1, r3, #2, #1
   24f8e:	f363 01c5 	bfi	r1, r3, #3, #3
   24f92:	f362 1188 	bfi	r1, r2, #6, #3
   24f96:	2208      	movs	r2, #8
   24f98:	f362 2152 	bfi	r1, r2, #9, #10
   24f9c:	f363 41de 	bfi	r1, r3, #19, #12
   24fa0:	f363 71df 	bfi	r1, r3, #31, #1
   24fa4:	aa08      	add	r2, sp, #32
   24fa6:	480a      	ldr	r0, [pc, #40]	; (24fd0 <gatt_indicate+0x1a0>)
   24fa8:	f7f1 fcd0 	bl	1694c <z_impl_z_log_msg_static_create>
		bt_att_req_free(req);
   24fac:	4648      	mov	r0, r9
   24fae:	f7fd fe4b 	bl	22c48 <bt_att_req_free>
		return -ENOMEM;
   24fb2:	f06f 040b 	mvn.w	r4, #11
   24fb6:	e783      	b.n	24ec0 <gatt_indicate+0x90>
		bt_att_req_free(req);
   24fb8:	4648      	mov	r0, r9
   24fba:	f7fd fe45 	bl	22c48 <bt_att_req_free>
   24fbe:	e77f      	b.n	24ec0 <gatt_indicate+0x90>
		return -ENOMEM;
   24fc0:	f06f 040b 	mvn.w	r4, #11
   24fc4:	e77c      	b.n	24ec0 <gatt_indicate+0x90>
   24fc6:	bf00      	nop
   24fc8:	0003a6f1 	.word	0x0003a6f1
   24fcc:	00043c4c 	.word	0x00043c4c
   24fd0:	0003f3c0 	.word	0x0003f3c0
   24fd4:	00043c64 	.word	0x00043c64
   24fd8:	00043c90 	.word	0x00043c90

00024fdc <bt_gatt_indicate>:
{
   24fdc:	b530      	push	{r4, r5, lr}
   24fde:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
   24fe0:	2900      	cmp	r1, #0
   24fe2:	d041      	beq.n	25068 <bt_gatt_indicate+0x8c>
   24fe4:	4605      	mov	r5, r0
   24fe6:	460c      	mov	r4, r1
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   24fe8:	684b      	ldr	r3, [r1, #4]
   24fea:	2b00      	cmp	r3, #0
   24fec:	d04c      	beq.n	25088 <bt_gatt_indicate+0xac>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24fee:	4b47      	ldr	r3, [pc, #284]	; (2510c <bt_gatt_indicate+0x130>)
   24ff0:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   24ff4:	f013 0f04 	tst.w	r3, #4
   24ff8:	d07f      	beq.n	250fa <bt_gatt_indicate+0x11e>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   24ffa:	b115      	cbz	r5, 25002 <bt_gatt_indicate+0x26>
   24ffc:	7b6b      	ldrb	r3, [r5, #13]
   24ffe:	2b07      	cmp	r3, #7
   25000:	d17e      	bne.n	25100 <bt_gatt_indicate+0x124>
	data.attr = params->attr;
   25002:	6860      	ldr	r0, [r4, #4]
   25004:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   25006:	f7ff fa8f 	bl	24528 <bt_gatt_attr_get_handle>
   2500a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2500e:	6821      	ldr	r1, [r4, #0]
   25010:	2900      	cmp	r1, #0
   25012:	d04c      	beq.n	250ae <bt_gatt_indicate+0xd2>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   25014:	a805      	add	r0, sp, #20
   25016:	f7ff fdf5 	bl	24c04 <gatt_find_by_uuid>
   2501a:	2800      	cmp	r0, #0
   2501c:	d073      	beq.n	25106 <bt_gatt_indicate+0x12a>
		params->attr = data.attr;
   2501e:	9b05      	ldr	r3, [sp, #20]
   25020:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   25022:	9b05      	ldr	r3, [sp, #20]
   25024:	6818      	ldr	r0, [r3, #0]
   25026:	2300      	movs	r3, #0
   25028:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   2502c:	f642 0303 	movw	r3, #10243	; 0x2803
   25030:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   25034:	a90b      	add	r1, sp, #44	; 0x2c
   25036:	f013 fab0 	bl	3859a <bt_uuid_cmp>
   2503a:	b948      	cbnz	r0, 25050 <bt_gatt_indicate+0x74>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   2503c:	9805      	ldr	r0, [sp, #20]
   2503e:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   25040:	799b      	ldrb	r3, [r3, #6]
   25042:	f013 0f20 	tst.w	r3, #32
   25046:	d037      	beq.n	250b8 <bt_gatt_indicate+0xdc>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   25048:	f015 fe6e 	bl	3ad28 <bt_gatt_attr_value_handle>
   2504c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   25050:	2d00      	cmp	r5, #0
   25052:	d034      	beq.n	250be <bt_gatt_indicate+0xe2>
		params->_ref = 1;
   25054:	2301      	movs	r3, #1
   25056:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   25058:	4622      	mov	r2, r4
   2505a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   2505e:	4628      	mov	r0, r5
   25060:	f7ff fee6 	bl	24e30 <gatt_indicate>
}
   25064:	b00d      	add	sp, #52	; 0x34
   25066:	bd30      	pop	{r4, r5, pc}
	__ASSERT(params, "invalid parameters\n");
   25068:	4c29      	ldr	r4, [pc, #164]	; (25110 <bt_gatt_indicate+0x134>)
   2506a:	f640 330d 	movw	r3, #2829	; 0xb0d
   2506e:	4622      	mov	r2, r4
   25070:	4928      	ldr	r1, [pc, #160]	; (25114 <bt_gatt_indicate+0x138>)
   25072:	4829      	ldr	r0, [pc, #164]	; (25118 <bt_gatt_indicate+0x13c>)
   25074:	f011 f90e 	bl	36294 <assert_print>
   25078:	4828      	ldr	r0, [pc, #160]	; (2511c <bt_gatt_indicate+0x140>)
   2507a:	f011 f90b 	bl	36294 <assert_print>
   2507e:	f640 310d 	movw	r1, #2829	; 0xb0d
   25082:	4620      	mov	r0, r4
   25084:	f011 f8ff 	bl	36286 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   25088:	680b      	ldr	r3, [r1, #0]
   2508a:	2b00      	cmp	r3, #0
   2508c:	d1af      	bne.n	24fee <bt_gatt_indicate+0x12>
   2508e:	4c20      	ldr	r4, [pc, #128]	; (25110 <bt_gatt_indicate+0x134>)
   25090:	f640 330e 	movw	r3, #2830	; 0xb0e
   25094:	4622      	mov	r2, r4
   25096:	4922      	ldr	r1, [pc, #136]	; (25120 <bt_gatt_indicate+0x144>)
   25098:	481f      	ldr	r0, [pc, #124]	; (25118 <bt_gatt_indicate+0x13c>)
   2509a:	f011 f8fb 	bl	36294 <assert_print>
   2509e:	481f      	ldr	r0, [pc, #124]	; (2511c <bt_gatt_indicate+0x140>)
   250a0:	f011 f8f8 	bl	36294 <assert_print>
   250a4:	f640 310e 	movw	r1, #2830	; 0xb0e
   250a8:	4620      	mov	r0, r4
   250aa:	f011 f8ec 	bl	36286 <assert_post_action>
		if (!data.handle) {
   250ae:	2800      	cmp	r0, #0
   250b0:	d1b7      	bne.n	25022 <bt_gatt_indicate+0x46>
			return -ENOENT;
   250b2:	f06f 0001 	mvn.w	r0, #1
   250b6:	e7d5      	b.n	25064 <bt_gatt_indicate+0x88>
			return -EINVAL;
   250b8:	f06f 0015 	mvn.w	r0, #21
   250bc:	e7d2      	b.n	25064 <bt_gatt_indicate+0x88>
	data.err = -ENOTCONN;
   250be:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   250c2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   250c4:	2302      	movs	r3, #2
   250c6:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   250ca:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   250cc:	2300      	movs	r3, #0
   250ce:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   250d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   250d4:	f642 1202 	movw	r2, #10498	; 0x2902
   250d8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   250dc:	aa05      	add	r2, sp, #20
   250de:	9202      	str	r2, [sp, #8]
   250e0:	4a10      	ldr	r2, [pc, #64]	; (25124 <bt_gatt_indicate+0x148>)
   250e2:	9201      	str	r2, [sp, #4]
   250e4:	2201      	movs	r2, #1
   250e6:	9200      	str	r2, [sp, #0]
   250e8:	aa0a      	add	r2, sp, #40	; 0x28
   250ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   250ee:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   250f2:	f7ff fa67 	bl	245c4 <bt_gatt_foreach_attr_type>
	return data.err;
   250f6:	9807      	ldr	r0, [sp, #28]
   250f8:	e7b4      	b.n	25064 <bt_gatt_indicate+0x88>
		return -EAGAIN;
   250fa:	f06f 000a 	mvn.w	r0, #10
   250fe:	e7b1      	b.n	25064 <bt_gatt_indicate+0x88>
		return -ENOTCONN;
   25100:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25104:	e7ae      	b.n	25064 <bt_gatt_indicate+0x88>
			return -ENOENT;
   25106:	f06f 0001 	mvn.w	r0, #1
   2510a:	e7ab      	b.n	25064 <bt_gatt_indicate+0x88>
   2510c:	200080cc 	.word	0x200080cc
   25110:	000438f4 	.word	0x000438f4
   25114:	00043cb8 	.word	0x00043cb8
   25118:	0003f72c 	.word	0x0003f72c
   2511c:	00043cc0 	.word	0x00043cc0
   25120:	00043cd8 	.word	0x00043cd8
   25124:	0002566d 	.word	0x0002566d

00025128 <sc_process>:
{
   25128:	b530      	push	{r4, r5, lr}
   2512a:	b083      	sub	sp, #12
   2512c:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   2512e:	f100 0530 	add.w	r5, r0, #48	; 0x30
   25132:	2101      	movs	r1, #1
   25134:	4628      	mov	r0, r5
   25136:	f015 fb8d 	bl	3a854 <atomic_test_bit>
   2513a:	bb38      	cbnz	r0, 2518c <sc_process+0x64>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   2513c:	f834 3c08 	ldrh.w	r3, [r4, #-8]
   25140:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   25144:	f834 3c06 	ldrh.w	r3, [r4, #-6]
   25148:	f8ad 3006 	strh.w	r3, [sp, #6]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2514c:	e8d5 3fef 	ldaex	r3, [r5]
   25150:	f023 0301 	bic.w	r3, r3, #1
   25154:	e8c5 3fe2 	stlex	r2, r3, [r5]
   25158:	2a00      	cmp	r2, #0
   2515a:	d1f7      	bne.n	2514c <sc_process+0x24>
	sc->start = 0U;
   2515c:	2000      	movs	r0, #0
   2515e:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   25162:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   25166:	4b16      	ldr	r3, [pc, #88]	; (251c0 <sc_process+0x98>)
   25168:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   2516c:	4b15      	ldr	r3, [pc, #84]	; (251c4 <sc_process+0x9c>)
   2516e:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   25172:	ab01      	add	r3, sp, #4
   25174:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   25178:	2304      	movs	r3, #4
   2517a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   2517e:	f1a4 0120 	sub.w	r1, r4, #32
   25182:	f7ff ff2b 	bl	24fdc <bt_gatt_indicate>
   25186:	b188      	cbz	r0, 251ac <sc_process+0x84>
}
   25188:	b003      	add	sp, #12
   2518a:	bd30      	pop	{r4, r5, pc}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   2518c:	4c0e      	ldr	r4, [pc, #56]	; (251c8 <sc_process+0xa0>)
   2518e:	f240 439a 	movw	r3, #1178	; 0x49a
   25192:	4622      	mov	r2, r4
   25194:	490d      	ldr	r1, [pc, #52]	; (251cc <sc_process+0xa4>)
   25196:	480e      	ldr	r0, [pc, #56]	; (251d0 <sc_process+0xa8>)
   25198:	f011 f87c 	bl	36294 <assert_print>
   2519c:	480d      	ldr	r0, [pc, #52]	; (251d4 <sc_process+0xac>)
   2519e:	f011 f879 	bl	36294 <assert_print>
   251a2:	f240 419a 	movw	r1, #1178	; 0x49a
   251a6:	4620      	mov	r0, r4
   251a8:	f011 f86d 	bl	36286 <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   251ac:	e8d5 3fef 	ldaex	r3, [r5]
   251b0:	f043 0302 	orr.w	r3, r3, #2
   251b4:	e8c5 3fe2 	stlex	r2, r3, [r5]
   251b8:	2a00      	cmp	r2, #0
   251ba:	d0e5      	beq.n	25188 <sc_process+0x60>
   251bc:	e7f6      	b.n	251ac <sc_process+0x84>
   251be:	bf00      	nop
   251c0:	00043e50 	.word	0x00043e50
   251c4:	0002399d 	.word	0x0002399d
   251c8:	000438f4 	.word	0x000438f4
   251cc:	00043cf8 	.word	0x00043cf8
   251d0:	0003f72c 	.word	0x0003f72c
   251d4:	00043d2c 	.word	0x00043d2c

000251d8 <sc_restore>:
{
   251d8:	b510      	push	{r4, lr}
   251da:	b088      	sub	sp, #32
   251dc:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   251de:	f100 0190 	add.w	r1, r0, #144	; 0x90
   251e2:	7a00      	ldrb	r0, [r0, #8]
   251e4:	f7fd ffd2 	bl	2318c <find_sc_cfg>
	if (!cfg) {
   251e8:	b1f0      	cbz	r0, 25228 <sc_restore+0x50>
   251ea:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   251ec:	8902      	ldrh	r2, [r0, #8]
   251ee:	b90a      	cbnz	r2, 251f4 <sc_restore+0x1c>
   251f0:	8941      	ldrh	r1, [r0, #10]
   251f2:	b1c9      	cbz	r1, 25228 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   251f4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   251f8:	895b      	ldrh	r3, [r3, #10]
   251fa:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   251fe:	4620      	mov	r0, r4
   25200:	f7fb fa14 	bl	2062c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   25204:	491c      	ldr	r1, [pc, #112]	; (25278 <sc_restore+0xa0>)
   25206:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   2520a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   2520e:	4a1b      	ldr	r2, [pc, #108]	; (2527c <sc_restore+0xa4>)
   25210:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   25212:	4a1b      	ldr	r2, [pc, #108]	; (25280 <sc_restore+0xa8>)
   25214:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   25216:	aa01      	add	r2, sp, #4
   25218:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   2521a:	2204      	movs	r2, #4
   2521c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   2521e:	4619      	mov	r1, r3
   25220:	4620      	mov	r0, r4
   25222:	f7ff fedb 	bl	24fdc <bt_gatt_indicate>
   25226:	b908      	cbnz	r0, 2522c <sc_restore+0x54>
}
   25228:	b008      	add	sp, #32
   2522a:	bd10      	pop	{r4, pc}
		LOG_ERR("SC restore indication failed");
   2522c:	4b15      	ldr	r3, [pc, #84]	; (25284 <sc_restore+0xac>)
   2522e:	9307      	str	r3, [sp, #28]
   25230:	2302      	movs	r3, #2
   25232:	f88d 3000 	strb.w	r3, [sp]
   25236:	2300      	movs	r3, #0
   25238:	f88d 3001 	strb.w	r3, [sp, #1]
   2523c:	f88d 3002 	strb.w	r3, [sp, #2]
   25240:	f88d 3003 	strb.w	r3, [sp, #3]
   25244:	9a00      	ldr	r2, [sp, #0]
   25246:	9206      	str	r2, [sp, #24]
   25248:	4619      	mov	r1, r3
   2524a:	f363 0100 	bfi	r1, r3, #0, #1
   2524e:	f363 0141 	bfi	r1, r3, #1, #1
   25252:	f363 0182 	bfi	r1, r3, #2, #1
   25256:	f363 01c5 	bfi	r1, r3, #3, #3
   2525a:	2201      	movs	r2, #1
   2525c:	f362 1188 	bfi	r1, r2, #6, #3
   25260:	2208      	movs	r2, #8
   25262:	f362 2152 	bfi	r1, r2, #9, #10
   25266:	f363 41de 	bfi	r1, r3, #19, #12
   2526a:	f363 71df 	bfi	r1, r3, #31, #1
   2526e:	aa06      	add	r2, sp, #24
   25270:	4805      	ldr	r0, [pc, #20]	; (25288 <sc_restore+0xb0>)
   25272:	f7f1 fb6b 	bl	1694c <z_impl_z_log_msg_static_create>
   25276:	e7d7      	b.n	25228 <sc_restore+0x50>
   25278:	2000c21c 	.word	0x2000c21c
   2527c:	00043e50 	.word	0x00043e50
   25280:	0003a981 	.word	0x0003a981
   25284:	00043d48 	.word	0x00043d48
   25288:	0003f3c0 	.word	0x0003f3c0

0002528c <update_ccc>:
{
   2528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25290:	b083      	sub	sp, #12
   25292:	af00      	add	r7, sp, #0
   25294:	4615      	mov	r5, r2
	struct bt_conn *conn = data->conn;
   25296:	f8d2 9000 	ldr.w	r9, [r2]
	if (attr->write != bt_gatt_attr_write_ccc) {
   2529a:	6882      	ldr	r2, [r0, #8]
   2529c:	4b42      	ldr	r3, [pc, #264]	; (253a8 <update_ccc+0x11c>)
   2529e:	429a      	cmp	r2, r3
   252a0:	d004      	beq.n	252ac <update_ccc+0x20>
}
   252a2:	2001      	movs	r0, #1
   252a4:	370c      	adds	r7, #12
   252a6:	46bd      	mov	sp, r7
   252a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   252ac:	4604      	mov	r4, r0
	ccc = attr->user_data;
   252ae:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   252b2:	2600      	movs	r6, #0
   252b4:	2e00      	cmp	r6, #0
   252b6:	d1f4      	bne.n	252a2 <update_ccc+0x16>
		if (!cfg->value ||
   252b8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   252bc:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   252c0:	891b      	ldrh	r3, [r3, #8]
   252c2:	2b00      	cmp	r3, #0
   252c4:	d05f      	beq.n	25386 <update_ccc+0xfa>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   252c6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   252ca:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
   252ce:	3201      	adds	r2, #1
   252d0:	f81a 1013 	ldrb.w	r1, [sl, r3, lsl #1]
   252d4:	4648      	mov	r0, r9
   252d6:	f014 f859 	bl	3938c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   252da:	2800      	cmp	r0, #0
   252dc:	d053      	beq.n	25386 <update_ccc+0xfa>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   252de:	f44f 7295 	mov.w	r2, #298	; 0x12a
   252e2:	4621      	mov	r1, r4
   252e4:	4648      	mov	r0, r9
   252e6:	f015 fd6e 	bl	3adc6 <bt_gatt_check_perm>
		if (err) {
   252ea:	b150      	cbz	r0, 25302 <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   252ec:	2803      	cmp	r0, #3
   252ee:	d013      	beq.n	25318 <update_ccc+0x8c>
			if (err == BT_ATT_ERR_AUTHENTICATION) {
   252f0:	2805      	cmp	r0, #5
   252f2:	d050      	beq.n	25396 <update_ccc+0x10a>
			sec = BT_SECURITY_L2;
   252f4:	f04f 0b02 	mov.w	fp, #2
			    bt_conn_get_security(conn) < sec) {
   252f8:	4648      	mov	r0, r9
   252fa:	f014 f82c 	bl	39356 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
   252fe:	4583      	cmp	fp, r0
   25300:	d84c      	bhi.n	2539c <update_ccc+0x110>
		gatt_ccc_changed(attr, ccc);
   25302:	4651      	mov	r1, sl
   25304:	4620      	mov	r0, r4
   25306:	f015 f9db 	bl	3a6c0 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   2530a:	4b28      	ldr	r3, [pc, #160]	; (253ac <update_ccc+0x120>)
   2530c:	459a      	cmp	sl, r3
   2530e:	d1c8      	bne.n	252a2 <update_ccc+0x16>
			sc_restore(conn);
   25310:	4648      	mov	r0, r9
   25312:	f7ff ff61 	bl	251d8 <sc_restore>
   25316:	e7c4      	b.n	252a2 <update_ccc+0x16>
				LOG_WRN("CCC %p not writable", attr);
   25318:	46eb      	mov	fp, sp
   2531a:	b088      	sub	sp, #32
   2531c:	466b      	mov	r3, sp
   2531e:	f113 0210 	adds.w	r2, r3, #16
   25322:	d032      	beq.n	2538a <update_ccc+0xfe>
   25324:	210c      	movs	r1, #12
   25326:	b14a      	cbz	r2, 2533c <update_ccc+0xb0>
   25328:	4608      	mov	r0, r1
   2532a:	2904      	cmp	r1, #4
   2532c:	dd03      	ble.n	25336 <update_ccc+0xaa>
   2532e:	f8df c080 	ldr.w	ip, [pc, #128]	; 253b0 <update_ccc+0x124>
   25332:	f8c3 c014 	str.w	ip, [r3, #20]
   25336:	2808      	cmp	r0, #8
   25338:	dd00      	ble.n	2533c <update_ccc+0xb0>
   2533a:	619c      	str	r4, [r3, #24]
   2533c:	290b      	cmp	r1, #11
   2533e:	dd27      	ble.n	25390 <update_ccc+0x104>
   25340:	210c      	movs	r1, #12
   25342:	b13a      	cbz	r2, 25354 <update_ccc+0xc8>
   25344:	2003      	movs	r0, #3
   25346:	7138      	strb	r0, [r7, #4]
   25348:	2000      	movs	r0, #0
   2534a:	7178      	strb	r0, [r7, #5]
   2534c:	71b8      	strb	r0, [r7, #6]
   2534e:	71f8      	strb	r0, [r7, #7]
   25350:	6878      	ldr	r0, [r7, #4]
   25352:	6118      	str	r0, [r3, #16]
   25354:	f36f 0800 	bfc	r8, #0, #1
   25358:	f36f 0841 	bfc	r8, #1, #1
   2535c:	f36f 0882 	bfc	r8, #2, #1
   25360:	f36f 08c5 	bfc	r8, #3, #3
   25364:	2302      	movs	r3, #2
   25366:	f363 1888 	bfi	r8, r3, #6, #3
   2536a:	f401 737b 	and.w	r3, r1, #1004	; 0x3ec
   2536e:	f363 2852 	bfi	r8, r3, #9, #10
   25372:	f36f 48de 	bfc	r8, #19, #12
   25376:	f36f 78df 	bfc	r8, #31, #1
   2537a:	2300      	movs	r3, #0
   2537c:	4641      	mov	r1, r8
   2537e:	480d      	ldr	r0, [pc, #52]	; (253b4 <update_ccc+0x128>)
   25380:	f7f1 fae4 	bl	1694c <z_impl_z_log_msg_static_create>
   25384:	46dd      	mov	sp, fp
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   25386:	3601      	adds	r6, #1
   25388:	e794      	b.n	252b4 <update_ccc+0x28>
				LOG_WRN("CCC %p not writable", attr);
   2538a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2538e:	e7ca      	b.n	25326 <update_ccc+0x9a>
   25390:	f06f 011b 	mvn.w	r1, #27
   25394:	e7d5      	b.n	25342 <update_ccc+0xb6>
				sec = BT_SECURITY_L3;
   25396:	f04f 0b03 	mov.w	fp, #3
   2539a:	e7ad      	b.n	252f8 <update_ccc+0x6c>
				if (data->sec < sec) {
   2539c:	792b      	ldrb	r3, [r5, #4]
   2539e:	459b      	cmp	fp, r3
   253a0:	d9f1      	bls.n	25386 <update_ccc+0xfa>
					data->sec = sec;
   253a2:	f885 b004 	strb.w	fp, [r5, #4]
				continue;
   253a6:	e7ee      	b.n	25386 <update_ccc+0xfa>
   253a8:	00023ba1 	.word	0x00023ba1
   253ac:	20008510 	.word	0x20008510
   253b0:	00043d68 	.word	0x00043d68
   253b4:	0003f3c0 	.word	0x0003f3c0

000253b8 <gatt_notify>:
{
   253b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   253bc:	b095      	sub	sp, #84	; 0x54
   253be:	4605      	mov	r5, r0
   253c0:	460f      	mov	r7, r1
   253c2:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   253c4:	2294      	movs	r2, #148	; 0x94
   253c6:	6861      	ldr	r1, [r4, #4]
   253c8:	f015 fcfd 	bl	3adc6 <bt_gatt_check_perm>
   253cc:	bb70      	cbnz	r0, 2542c <gatt_notify+0x74>
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   253ce:	2201      	movs	r2, #1
   253d0:	6861      	ldr	r1, [r4, #4]
   253d2:	4628      	mov	r0, r5
   253d4:	f7ff fc46 	bl	24c64 <bt_gatt_is_subscribed>
   253d8:	2800      	cmp	r0, #0
   253da:	d04e      	beq.n	2547a <gatt_notify+0xc2>
				sizeof(*nfy) + params->len);
   253dc:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   253de:	3202      	adds	r2, #2
   253e0:	211b      	movs	r1, #27
   253e2:	4628      	mov	r0, r5
   253e4:	f7fd f962 	bl	226ac <bt_att_create_pdu>
	if (!buf) {
   253e8:	4680      	mov	r8, r0
   253ea:	2800      	cmp	r0, #0
   253ec:	d06c      	beq.n	254c8 <gatt_notify+0x110>
   253ee:	f100 090c 	add.w	r9, r0, #12
   253f2:	2102      	movs	r1, #2
   253f4:	4648      	mov	r0, r9
   253f6:	f004 fa73 	bl	298e0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   253fa:	4606      	mov	r6, r0
   253fc:	f826 7b02 	strh.w	r7, [r6], #2
   25400:	89a1      	ldrh	r1, [r4, #12]
   25402:	4648      	mov	r0, r9
   25404:	f004 fa6c 	bl	298e0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   25408:	89a2      	ldrh	r2, [r4, #12]
   2540a:	68a1      	ldr	r1, [r4, #8]
   2540c:	4630      	mov	r0, r6
   2540e:	f012 fff4 	bl	383fa <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   25412:	2301      	movs	r3, #1
   25414:	6962      	ldr	r2, [r4, #20]
   25416:	6921      	ldr	r1, [r4, #16]
   25418:	4640      	mov	r0, r8
   2541a:	f015 f8b5 	bl	3a588 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   2541e:	4641      	mov	r1, r8
   25420:	4628      	mov	r0, r5
   25422:	f7fd fd27 	bl	22e74 <bt_att_send>
}
   25426:	b015      	add	sp, #84	; 0x54
   25428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_WRN("Link is not encrypted");
   2542c:	4b3a      	ldr	r3, [pc, #232]	; (25518 <gatt_notify+0x160>)
   2542e:	9313      	str	r3, [sp, #76]	; 0x4c
   25430:	2202      	movs	r2, #2
   25432:	f88d 2004 	strb.w	r2, [sp, #4]
   25436:	2300      	movs	r3, #0
   25438:	f88d 3005 	strb.w	r3, [sp, #5]
   2543c:	f88d 3006 	strb.w	r3, [sp, #6]
   25440:	f88d 3007 	strb.w	r3, [sp, #7]
   25444:	9901      	ldr	r1, [sp, #4]
   25446:	9112      	str	r1, [sp, #72]	; 0x48
   25448:	4619      	mov	r1, r3
   2544a:	f363 0100 	bfi	r1, r3, #0, #1
   2544e:	f363 0141 	bfi	r1, r3, #1, #1
   25452:	f363 0182 	bfi	r1, r3, #2, #1
   25456:	f363 01c5 	bfi	r1, r3, #3, #3
   2545a:	f362 1188 	bfi	r1, r2, #6, #3
   2545e:	2208      	movs	r2, #8
   25460:	f362 2152 	bfi	r1, r2, #9, #10
   25464:	f363 41de 	bfi	r1, r3, #19, #12
   25468:	f363 71df 	bfi	r1, r3, #31, #1
   2546c:	aa12      	add	r2, sp, #72	; 0x48
   2546e:	482b      	ldr	r0, [pc, #172]	; (2551c <gatt_notify+0x164>)
   25470:	f7f1 fa6c 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EPERM;
   25474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25478:	e7d5      	b.n	25426 <gatt_notify+0x6e>
			LOG_WRN("Device is not subscribed to characteristic");
   2547a:	4b29      	ldr	r3, [pc, #164]	; (25520 <gatt_notify+0x168>)
   2547c:	930d      	str	r3, [sp, #52]	; 0x34
   2547e:	2202      	movs	r2, #2
   25480:	f88d 2004 	strb.w	r2, [sp, #4]
   25484:	2300      	movs	r3, #0
   25486:	f88d 3005 	strb.w	r3, [sp, #5]
   2548a:	f88d 3006 	strb.w	r3, [sp, #6]
   2548e:	f88d 3007 	strb.w	r3, [sp, #7]
   25492:	9901      	ldr	r1, [sp, #4]
   25494:	910c      	str	r1, [sp, #48]	; 0x30
   25496:	4619      	mov	r1, r3
   25498:	f363 0100 	bfi	r1, r3, #0, #1
   2549c:	f363 0141 	bfi	r1, r3, #1, #1
   254a0:	f363 0182 	bfi	r1, r3, #2, #1
   254a4:	f363 01c5 	bfi	r1, r3, #3, #3
   254a8:	f362 1188 	bfi	r1, r2, #6, #3
   254ac:	2208      	movs	r2, #8
   254ae:	f362 2152 	bfi	r1, r2, #9, #10
   254b2:	f363 41de 	bfi	r1, r3, #19, #12
   254b6:	f363 71df 	bfi	r1, r3, #31, #1
   254ba:	aa0c      	add	r2, sp, #48	; 0x30
   254bc:	4817      	ldr	r0, [pc, #92]	; (2551c <gatt_notify+0x164>)
   254be:	f7f1 fa45 	bl	1694c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   254c2:	f06f 0015 	mvn.w	r0, #21
   254c6:	e7ae      	b.n	25426 <gatt_notify+0x6e>
		LOG_WRN("No buffer available to send notification");
   254c8:	4b16      	ldr	r3, [pc, #88]	; (25524 <gatt_notify+0x16c>)
   254ca:	9307      	str	r3, [sp, #28]
   254cc:	2202      	movs	r2, #2
   254ce:	f88d 2004 	strb.w	r2, [sp, #4]
   254d2:	2300      	movs	r3, #0
   254d4:	f88d 3005 	strb.w	r3, [sp, #5]
   254d8:	f88d 3006 	strb.w	r3, [sp, #6]
   254dc:	f88d 3007 	strb.w	r3, [sp, #7]
   254e0:	9901      	ldr	r1, [sp, #4]
   254e2:	9106      	str	r1, [sp, #24]
   254e4:	4619      	mov	r1, r3
   254e6:	f363 0100 	bfi	r1, r3, #0, #1
   254ea:	f363 0141 	bfi	r1, r3, #1, #1
   254ee:	f363 0182 	bfi	r1, r3, #2, #1
   254f2:	f363 01c5 	bfi	r1, r3, #3, #3
   254f6:	f362 1188 	bfi	r1, r2, #6, #3
   254fa:	2208      	movs	r2, #8
   254fc:	f362 2152 	bfi	r1, r2, #9, #10
   25500:	f363 41de 	bfi	r1, r3, #19, #12
   25504:	f363 71df 	bfi	r1, r3, #31, #1
   25508:	aa06      	add	r2, sp, #24
   2550a:	4804      	ldr	r0, [pc, #16]	; (2551c <gatt_notify+0x164>)
   2550c:	f7f1 fa1e 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENOMEM;
   25510:	f06f 000b 	mvn.w	r0, #11
   25514:	e787      	b.n	25426 <gatt_notify+0x6e>
   25516:	bf00      	nop
   25518:	00043c4c 	.word	0x00043c4c
   2551c:	0003f3c0 	.word	0x0003f3c0
   25520:	00043c64 	.word	0x00043c64
   25524:	00043d7c 	.word	0x00043d7c

00025528 <bt_gatt_notify_cb>:
{
   25528:	b530      	push	{r4, r5, lr}
   2552a:	b08d      	sub	sp, #52	; 0x34
	__ASSERT(params, "invalid parameters\n");
   2552c:	2900      	cmp	r1, #0
   2552e:	d03f      	beq.n	255b0 <bt_gatt_notify_cb+0x88>
   25530:	4604      	mov	r4, r0
   25532:	460d      	mov	r5, r1
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   25534:	684b      	ldr	r3, [r1, #4]
   25536:	2b00      	cmp	r3, #0
   25538:	d04a      	beq.n	255d0 <bt_gatt_notify_cb+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2553a:	4b45      	ldr	r3, [pc, #276]	; (25650 <bt_gatt_notify_cb+0x128>)
   2553c:	e8d3 3faf 	lda	r3, [r3]
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   25540:	f013 0f04 	tst.w	r3, #4
   25544:	d07b      	beq.n	2563e <bt_gatt_notify_cb+0x116>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   25546:	b114      	cbz	r4, 2554e <bt_gatt_notify_cb+0x26>
   25548:	7b63      	ldrb	r3, [r4, #13]
   2554a:	2b07      	cmp	r3, #7
   2554c:	d17a      	bne.n	25644 <bt_gatt_notify_cb+0x11c>
	data.attr = params->attr;
   2554e:	6868      	ldr	r0, [r5, #4]
   25550:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   25552:	f7fe ffe9 	bl	24528 <bt_gatt_attr_get_handle>
   25556:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   2555a:	6829      	ldr	r1, [r5, #0]
   2555c:	2900      	cmp	r1, #0
   2555e:	d04a      	beq.n	255f6 <bt_gatt_notify_cb+0xce>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   25560:	a805      	add	r0, sp, #20
   25562:	f7ff fb4f 	bl	24c04 <gatt_find_by_uuid>
   25566:	2800      	cmp	r0, #0
   25568:	d06f      	beq.n	2564a <bt_gatt_notify_cb+0x122>
		params->attr = data.attr;
   2556a:	9b05      	ldr	r3, [sp, #20]
   2556c:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   2556e:	9b05      	ldr	r3, [sp, #20]
   25570:	6818      	ldr	r0, [r3, #0]
   25572:	2300      	movs	r3, #0
   25574:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   25578:	f642 0303 	movw	r3, #10243	; 0x2803
   2557c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   25580:	a90b      	add	r1, sp, #44	; 0x2c
   25582:	f013 f80a 	bl	3859a <bt_uuid_cmp>
   25586:	b948      	cbnz	r0, 2559c <bt_gatt_notify_cb+0x74>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   25588:	9805      	ldr	r0, [sp, #20]
   2558a:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   2558c:	799b      	ldrb	r3, [r3, #6]
   2558e:	f013 0f10 	tst.w	r3, #16
   25592:	d035      	beq.n	25600 <bt_gatt_notify_cb+0xd8>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   25594:	f015 fbc8 	bl	3ad28 <bt_gatt_attr_value_handle>
   25598:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   2559c:	2c00      	cmp	r4, #0
   2559e:	d032      	beq.n	25606 <bt_gatt_notify_cb+0xde>
		return gatt_notify(conn, data.handle, params);
   255a0:	462a      	mov	r2, r5
   255a2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   255a6:	4620      	mov	r0, r4
   255a8:	f7ff ff06 	bl	253b8 <gatt_notify>
}
   255ac:	b00d      	add	sp, #52	; 0x34
   255ae:	bd30      	pop	{r4, r5, pc}
	__ASSERT(params, "invalid parameters\n");
   255b0:	4c28      	ldr	r4, [pc, #160]	; (25654 <bt_gatt_notify_cb+0x12c>)
   255b2:	f640 232d 	movw	r3, #2605	; 0xa2d
   255b6:	4622      	mov	r2, r4
   255b8:	4927      	ldr	r1, [pc, #156]	; (25658 <bt_gatt_notify_cb+0x130>)
   255ba:	4828      	ldr	r0, [pc, #160]	; (2565c <bt_gatt_notify_cb+0x134>)
   255bc:	f010 fe6a 	bl	36294 <assert_print>
   255c0:	4827      	ldr	r0, [pc, #156]	; (25660 <bt_gatt_notify_cb+0x138>)
   255c2:	f010 fe67 	bl	36294 <assert_print>
   255c6:	f640 212d 	movw	r1, #2605	; 0xa2d
   255ca:	4620      	mov	r0, r4
   255cc:	f010 fe5b 	bl	36286 <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   255d0:	680b      	ldr	r3, [r1, #0]
   255d2:	2b00      	cmp	r3, #0
   255d4:	d1b1      	bne.n	2553a <bt_gatt_notify_cb+0x12>
   255d6:	4c1f      	ldr	r4, [pc, #124]	; (25654 <bt_gatt_notify_cb+0x12c>)
   255d8:	f640 232e 	movw	r3, #2606	; 0xa2e
   255dc:	4622      	mov	r2, r4
   255de:	4921      	ldr	r1, [pc, #132]	; (25664 <bt_gatt_notify_cb+0x13c>)
   255e0:	481e      	ldr	r0, [pc, #120]	; (2565c <bt_gatt_notify_cb+0x134>)
   255e2:	f010 fe57 	bl	36294 <assert_print>
   255e6:	481e      	ldr	r0, [pc, #120]	; (25660 <bt_gatt_notify_cb+0x138>)
   255e8:	f010 fe54 	bl	36294 <assert_print>
   255ec:	f640 212e 	movw	r1, #2606	; 0xa2e
   255f0:	4620      	mov	r0, r4
   255f2:	f010 fe48 	bl	36286 <assert_post_action>
		if (!data.handle) {
   255f6:	2800      	cmp	r0, #0
   255f8:	d1b9      	bne.n	2556e <bt_gatt_notify_cb+0x46>
			return -ENOENT;
   255fa:	f06f 0001 	mvn.w	r0, #1
   255fe:	e7d5      	b.n	255ac <bt_gatt_notify_cb+0x84>
			return -EINVAL;
   25600:	f06f 0015 	mvn.w	r0, #21
   25604:	e7d2      	b.n	255ac <bt_gatt_notify_cb+0x84>
	data.err = -ENOTCONN;
   25606:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2560a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   2560c:	2201      	movs	r2, #1
   2560e:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   25612:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   25614:	2300      	movs	r3, #0
   25616:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   2561a:	f642 1102 	movw	r1, #10498	; 0x2902
   2561e:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   25622:	a905      	add	r1, sp, #20
   25624:	9102      	str	r1, [sp, #8]
   25626:	4910      	ldr	r1, [pc, #64]	; (25668 <bt_gatt_notify_cb+0x140>)
   25628:	9101      	str	r1, [sp, #4]
   2562a:	9200      	str	r2, [sp, #0]
   2562c:	aa0a      	add	r2, sp, #40	; 0x28
   2562e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25632:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   25636:	f7fe ffc5 	bl	245c4 <bt_gatt_foreach_attr_type>
	return data.err;
   2563a:	9807      	ldr	r0, [sp, #28]
   2563c:	e7b6      	b.n	255ac <bt_gatt_notify_cb+0x84>
		return -EAGAIN;
   2563e:	f06f 000a 	mvn.w	r0, #10
   25642:	e7b3      	b.n	255ac <bt_gatt_notify_cb+0x84>
		return -ENOTCONN;
   25644:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25648:	e7b0      	b.n	255ac <bt_gatt_notify_cb+0x84>
			return -ENOENT;
   2564a:	f06f 0001 	mvn.w	r0, #1
   2564e:	e7ad      	b.n	255ac <bt_gatt_notify_cb+0x84>
   25650:	200080cc 	.word	0x200080cc
   25654:	000438f4 	.word	0x000438f4
   25658:	00043cb8 	.word	0x00043cb8
   2565c:	0003f72c 	.word	0x0003f72c
   25660:	00043cc0 	.word	0x00043cc0
   25664:	00043cd8 	.word	0x00043cd8
   25668:	0002566d 	.word	0x0002566d

0002566c <notify_cb>:
{
   2566c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25670:	b089      	sub	sp, #36	; 0x24
   25672:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   25674:	6882      	ldr	r2, [r0, #8]
   25676:	4b67      	ldr	r3, [pc, #412]	; (25814 <notify_cb+0x1a8>)
   25678:	429a      	cmp	r2, r3
   2567a:	d005      	beq.n	25688 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   2567c:	f04f 0a01 	mov.w	sl, #1
}
   25680:	4650      	mov	r0, sl
   25682:	b009      	add	sp, #36	; 0x24
   25684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25688:	4607      	mov	r7, r0
	ccc = attr->user_data;
   2568a:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   2568c:	4b62      	ldr	r3, [pc, #392]	; (25818 <notify_cb+0x1ac>)
   2568e:	429d      	cmp	r5, r3
   25690:	d02d      	beq.n	256ee <notify_cb+0x82>
			err = 0;
   25692:	2400      	movs	r4, #0
   25694:	e084      	b.n	257a0 <notify_cb+0x134>
				sc = (struct sc_data *)data->ind_params->data;
   25696:	6933      	ldr	r3, [r6, #16]
   25698:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   2569a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   2569e:	8853      	ldrh	r3, [r2, #2]
   256a0:	8812      	ldrh	r2, [r2, #0]
   256a2:	4649      	mov	r1, r9
   256a4:	f8df c174 	ldr.w	ip, [pc, #372]	; 2581c <notify_cb+0x1b0>
   256a8:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   256ac:	f7fd ff84 	bl	235b8 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   256b0:	3401      	adds	r4, #1
   256b2:	2c01      	cmp	r4, #1
   256b4:	d8ed      	bhi.n	25692 <notify_cb+0x26>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   256b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   256ba:	4b58      	ldr	r3, [pc, #352]	; (2581c <notify_cb+0x1b0>)
   256bc:	eb03 0982 	add.w	r9, r3, r2, lsl #2
   256c0:	f109 0901 	add.w	r9, r9, #1
	return memcmp(a, b, sizeof(*a));
   256c4:	2207      	movs	r2, #7
   256c6:	4956      	ldr	r1, [pc, #344]	; (25820 <notify_cb+0x1b4>)
   256c8:	4648      	mov	r0, r9
   256ca:	f012 fe71 	bl	383b0 <memcmp>
   256ce:	2800      	cmp	r0, #0
   256d0:	d0ee      	beq.n	256b0 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   256d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   256d6:	2207      	movs	r2, #7
   256d8:	4649      	mov	r1, r9
   256da:	4850      	ldr	r0, [pc, #320]	; (2581c <notify_cb+0x1b0>)
   256dc:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   256e0:	f7fb fa94 	bl	20c0c <bt_conn_lookup_state_le>
			if (!conn) {
   256e4:	2800      	cmp	r0, #0
   256e6:	d0d6      	beq.n	25696 <notify_cb+0x2a>
			bt_conn_unref(conn);
   256e8:	f7fa fde6 	bl	202b8 <bt_conn_unref>
   256ec:	e7e0      	b.n	256b0 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   256ee:	2400      	movs	r4, #0
   256f0:	e7df      	b.n	256b2 <notify_cb+0x46>
			bt_conn_unref(conn);
   256f2:	f7fa fde1 	bl	202b8 <bt_conn_unref>
			continue;
   256f6:	e052      	b.n	2579e <notify_cb+0x132>
			bt_conn_unref(conn);
   256f8:	4648      	mov	r0, r9
   256fa:	f7fa fddd 	bl	202b8 <bt_conn_unref>
			continue;
   256fe:	e04e      	b.n	2579e <notify_cb+0x132>
			LOG_WRN("Link is not encrypted");
   25700:	4b48      	ldr	r3, [pc, #288]	; (25824 <notify_cb+0x1b8>)
   25702:	9307      	str	r3, [sp, #28]
   25704:	2202      	movs	r2, #2
   25706:	f88d 2004 	strb.w	r2, [sp, #4]
   2570a:	2300      	movs	r3, #0
   2570c:	f88d 3005 	strb.w	r3, [sp, #5]
   25710:	f88d 3006 	strb.w	r3, [sp, #6]
   25714:	f88d 3007 	strb.w	r3, [sp, #7]
   25718:	9901      	ldr	r1, [sp, #4]
   2571a:	9106      	str	r1, [sp, #24]
   2571c:	f363 0800 	bfi	r8, r3, #0, #1
   25720:	f363 0841 	bfi	r8, r3, #1, #1
   25724:	f363 0882 	bfi	r8, r3, #2, #1
   25728:	f363 08c5 	bfi	r8, r3, #3, #3
   2572c:	f362 1888 	bfi	r8, r2, #6, #3
   25730:	2208      	movs	r2, #8
   25732:	f362 2852 	bfi	r8, r2, #9, #10
   25736:	f363 48de 	bfi	r8, r3, #19, #12
   2573a:	f363 78df 	bfi	r8, r3, #31, #1
   2573e:	aa06      	add	r2, sp, #24
   25740:	4641      	mov	r1, r8
   25742:	4839      	ldr	r0, [pc, #228]	; (25828 <notify_cb+0x1bc>)
   25744:	f7f1 f902 	bl	1694c <z_impl_z_log_msg_static_create>
			bt_conn_unref(conn);
   25748:	4648      	mov	r0, r9
   2574a:	f7fa fdb5 	bl	202b8 <bt_conn_unref>
			continue;
   2574e:	e026      	b.n	2579e <notify_cb+0x132>
		    (cfg->value & BT_GATT_CCC_INDICATE)) {
   25750:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   25754:	eb05 0242 	add.w	r2, r5, r2, lsl #1
   25758:	8912      	ldrh	r2, [r2, #8]
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   2575a:	f012 0f02 	tst.w	r2, #2
   2575e:	d049      	beq.n	257f4 <notify_cb+0x188>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   25760:	6932      	ldr	r2, [r6, #16]
   25762:	88b1      	ldrh	r1, [r6, #4]
   25764:	4648      	mov	r0, r9
   25766:	f7ff fb63 	bl	24e30 <gatt_indicate>
			if (err == 0) {
   2576a:	4683      	mov	fp, r0
   2576c:	b970      	cbnz	r0, 2578c <notify_cb+0x120>
				data->ind_params->_ref++;
   2576e:	6932      	ldr	r2, [r6, #16]
   25770:	7d93      	ldrb	r3, [r2, #22]
   25772:	3301      	adds	r3, #1
   25774:	7593      	strb	r3, [r2, #22]
   25776:	e009      	b.n	2578c <notify_cb+0x120>
			   (cfg->value & BT_GATT_CCC_NOTIFY)) {
   25778:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2577c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   25780:	891b      	ldrh	r3, [r3, #8]
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   25782:	f013 0f01 	tst.w	r3, #1
   25786:	d13a      	bne.n	257fe <notify_cb+0x192>
			err = 0;
   25788:	f04f 0b00 	mov.w	fp, #0
		bt_conn_unref(conn);
   2578c:	4648      	mov	r0, r9
   2578e:	f7fa fd93 	bl	202b8 <bt_conn_unref>
		if (err < 0) {
   25792:	f1bb 0f00 	cmp.w	fp, #0
   25796:	f6ff af73 	blt.w	25680 <notify_cb+0x14>
		data->err = 0;
   2579a:	2300      	movs	r3, #0
   2579c:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2579e:	3401      	adds	r4, #1
   257a0:	2c00      	cmp	r4, #0
   257a2:	d133      	bne.n	2580c <notify_cb+0x1a0>
		if (cfg->value != data->type) {
   257a4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   257a8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   257ac:	891a      	ldrh	r2, [r3, #8]
   257ae:	89b3      	ldrh	r3, [r6, #12]
   257b0:	429a      	cmp	r2, r3
   257b2:	d1f4      	bne.n	2579e <notify_cb+0x132>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   257b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   257b8:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   257bc:	3101      	adds	r1, #1
   257be:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   257c2:	f7fb f98d 	bl	20ae0 <bt_conn_lookup_addr_le>
		if (!conn) {
   257c6:	4681      	mov	r9, r0
   257c8:	2800      	cmp	r0, #0
   257ca:	d0e8      	beq.n	2579e <notify_cb+0x132>
		if (conn->state != BT_CONN_CONNECTED) {
   257cc:	7b43      	ldrb	r3, [r0, #13]
   257ce:	2b07      	cmp	r3, #7
   257d0:	d18f      	bne.n	256f2 <notify_cb+0x86>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   257d2:	696b      	ldr	r3, [r5, #20]
   257d4:	b11b      	cbz	r3, 257de <notify_cb+0x172>
   257d6:	4639      	mov	r1, r7
   257d8:	4798      	blx	r3
   257da:	2800      	cmp	r0, #0
   257dc:	d08c      	beq.n	256f8 <notify_cb+0x8c>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   257de:	2294      	movs	r2, #148	; 0x94
   257e0:	4639      	mov	r1, r7
   257e2:	4648      	mov	r0, r9
   257e4:	f015 faef 	bl	3adc6 <bt_gatt_check_perm>
   257e8:	4682      	mov	sl, r0
   257ea:	2800      	cmp	r0, #0
   257ec:	d188      	bne.n	25700 <notify_cb+0x94>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   257ee:	89b3      	ldrh	r3, [r6, #12]
   257f0:	2b02      	cmp	r3, #2
   257f2:	d0ad      	beq.n	25750 <notify_cb+0xe4>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   257f4:	2b01      	cmp	r3, #1
   257f6:	d0bf      	beq.n	25778 <notify_cb+0x10c>
			err = 0;
   257f8:	f04f 0b00 	mov.w	fp, #0
   257fc:	e7c6      	b.n	2578c <notify_cb+0x120>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   257fe:	6932      	ldr	r2, [r6, #16]
   25800:	88b1      	ldrh	r1, [r6, #4]
   25802:	4648      	mov	r0, r9
   25804:	f7ff fdd8 	bl	253b8 <gatt_notify>
   25808:	4683      	mov	fp, r0
   2580a:	e7bf      	b.n	2578c <notify_cb+0x120>
	return BT_GATT_ITER_CONTINUE;
   2580c:	f04f 0a01 	mov.w	sl, #1
   25810:	e736      	b.n	25680 <notify_cb+0x14>
   25812:	bf00      	nop
   25814:	00023ba1 	.word	0x00023ba1
   25818:	20008510 	.word	0x20008510
   2581c:	2000c254 	.word	0x2000c254
   25820:	0004203c 	.word	0x0004203c
   25824:	00043c4c 	.word	0x00043c4c
   25828:	0003f3c0 	.word	0x0003f3c0

0002582c <bt_gatt_unsubscribe>:
{
   2582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(conn, "invalid parameters\n");
   2582e:	b180      	cbz	r0, 25852 <bt_gatt_unsubscribe+0x26>
   25830:	460c      	mov	r4, r1
   25832:	4606      	mov	r6, r0
	__ASSERT(params, "invalid parameters\n");
   25834:	b1e9      	cbz	r1, 25872 <bt_gatt_unsubscribe+0x46>
	if (conn->state != BT_CONN_CONNECTED) {
   25836:	7b43      	ldrb	r3, [r0, #13]
   25838:	2b07      	cmp	r3, #7
   2583a:	d162      	bne.n	25902 <bt_gatt_unsubscribe+0xd6>
	sub = gatt_sub_find(conn);
   2583c:	f7fd fcf2 	bl	23224 <gatt_sub_find>
	if (!sub) {
   25840:	4607      	mov	r7, r0
   25842:	2800      	cmp	r0, #0
   25844:	d060      	beq.n	25908 <bt_gatt_unsubscribe+0xdc>
	return list->head;
   25846:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   25848:	b103      	cbz	r3, 2584c <bt_gatt_unsubscribe+0x20>
   2584a:	3b18      	subs	r3, #24
			has_subscription = true;
   2584c:	2000      	movs	r0, #0
   2584e:	4605      	mov	r5, r0
   25850:	e023      	b.n	2589a <bt_gatt_unsubscribe+0x6e>
	__ASSERT(conn, "invalid parameters\n");
   25852:	4c31      	ldr	r4, [pc, #196]	; (25918 <bt_gatt_unsubscribe+0xec>)
   25854:	f241 4309 	movw	r3, #5129	; 0x1409
   25858:	4622      	mov	r2, r4
   2585a:	4930      	ldr	r1, [pc, #192]	; (2591c <bt_gatt_unsubscribe+0xf0>)
   2585c:	4830      	ldr	r0, [pc, #192]	; (25920 <bt_gatt_unsubscribe+0xf4>)
   2585e:	f010 fd19 	bl	36294 <assert_print>
   25862:	4830      	ldr	r0, [pc, #192]	; (25924 <bt_gatt_unsubscribe+0xf8>)
   25864:	f010 fd16 	bl	36294 <assert_print>
   25868:	f241 4109 	movw	r1, #5129	; 0x1409
   2586c:	4620      	mov	r0, r4
   2586e:	f010 fd0a 	bl	36286 <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   25872:	4c29      	ldr	r4, [pc, #164]	; (25918 <bt_gatt_unsubscribe+0xec>)
   25874:	f241 430a 	movw	r3, #5130	; 0x140a
   25878:	4622      	mov	r2, r4
   2587a:	492b      	ldr	r1, [pc, #172]	; (25928 <bt_gatt_unsubscribe+0xfc>)
   2587c:	4828      	ldr	r0, [pc, #160]	; (25920 <bt_gatt_unsubscribe+0xf4>)
   2587e:	f010 fd09 	bl	36294 <assert_print>
   25882:	4828      	ldr	r0, [pc, #160]	; (25924 <bt_gatt_unsubscribe+0xf8>)
   25884:	f010 fd06 	bl	36294 <assert_print>
   25888:	f241 410a 	movw	r1, #5130	; 0x140a
   2588c:	4620      	mov	r0, r4
   2588e:	f010 fcfa 	bl	36286 <assert_post_action>
			found = true;
   25892:	2001      	movs	r0, #1
	return node->next;
   25894:	699b      	ldr	r3, [r3, #24]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   25896:	b103      	cbz	r3, 2589a <bt_gatt_unsubscribe+0x6e>
   25898:	3b18      	subs	r3, #24
   2589a:	b13b      	cbz	r3, 258ac <bt_gatt_unsubscribe+0x80>
		if (params == tmp) {
   2589c:	42a3      	cmp	r3, r4
   2589e:	d0f8      	beq.n	25892 <bt_gatt_unsubscribe+0x66>
		if (tmp->value_handle == params->value_handle) {
   258a0:	8999      	ldrh	r1, [r3, #12]
   258a2:	89a2      	ldrh	r2, [r4, #12]
   258a4:	4291      	cmp	r1, r2
   258a6:	d1f5      	bne.n	25894 <bt_gatt_unsubscribe+0x68>
			has_subscription = true;
   258a8:	2501      	movs	r5, #1
   258aa:	e7f3      	b.n	25894 <bt_gatt_unsubscribe+0x68>
	if (!found) {
   258ac:	b378      	cbz	r0, 2590e <bt_gatt_unsubscribe+0xe2>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   258ae:	2102      	movs	r1, #2
   258b0:	f104 0014 	add.w	r0, r4, #20
   258b4:	f014 ffce 	bl	3a854 <atomic_test_bit>
   258b8:	b9d0      	cbnz	r0, 258f0 <bt_gatt_unsubscribe+0xc4>
	if (!has_subscription) {
   258ba:	b935      	cbnz	r5, 258ca <bt_gatt_unsubscribe+0x9e>
		params->value = 0x0000;
   258bc:	2300      	movs	r3, #0
   258be:	8223      	strh	r3, [r4, #16]
		err = gatt_write_ccc(conn, params);
   258c0:	4621      	mov	r1, r4
   258c2:	4630      	mov	r0, r6
   258c4:	f7fe fa5a 	bl	23d7c <gatt_write_ccc>
		if (err) {
   258c8:	b988      	cbnz	r0, 258ee <bt_gatt_unsubscribe+0xc2>
	sys_slist_find_and_remove(&sub->list, &params->node);
   258ca:	f104 0118 	add.w	r1, r4, #24
   258ce:	f107 0008 	add.w	r0, r7, #8
   258d2:	f014 fe73 	bl	3a5bc <sys_slist_find_and_remove>
	if (gatt_sub_is_empty(sub)) {
   258d6:	4638      	mov	r0, r7
   258d8:	f014 ff1f 	bl	3a71a <gatt_sub_is_empty>
   258dc:	b968      	cbnz	r0, 258fa <bt_gatt_unsubscribe+0xce>
	if (has_subscription) {
   258de:	b1cd      	cbz	r5, 25914 <bt_gatt_unsubscribe+0xe8>
		params->notify(conn, params, NULL, 0);
   258e0:	6825      	ldr	r5, [r4, #0]
   258e2:	2300      	movs	r3, #0
   258e4:	461a      	mov	r2, r3
   258e6:	4621      	mov	r1, r4
   258e8:	4630      	mov	r0, r6
   258ea:	47a8      	blx	r5
	return 0;
   258ec:	2000      	movs	r0, #0
}
   258ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_gatt_cancel(conn, params);
   258f0:	4621      	mov	r1, r4
   258f2:	4630      	mov	r0, r6
   258f4:	f015 faa8 	bl	3ae48 <bt_gatt_cancel>
   258f8:	e7df      	b.n	258ba <bt_gatt_unsubscribe+0x8e>
		gatt_sub_free(sub);
   258fa:	4638      	mov	r0, r7
   258fc:	f7fd fd8e 	bl	2341c <gatt_sub_free>
   25900:	e7ed      	b.n	258de <bt_gatt_unsubscribe+0xb2>
		return -ENOTCONN;
   25902:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25906:	e7f2      	b.n	258ee <bt_gatt_unsubscribe+0xc2>
		return -EINVAL;
   25908:	f06f 0015 	mvn.w	r0, #21
   2590c:	e7ef      	b.n	258ee <bt_gatt_unsubscribe+0xc2>
		return -EINVAL;
   2590e:	f06f 0015 	mvn.w	r0, #21
   25912:	e7ec      	b.n	258ee <bt_gatt_unsubscribe+0xc2>
	return 0;
   25914:	2000      	movs	r0, #0
   25916:	e7ea      	b.n	258ee <bt_gatt_unsubscribe+0xc2>
   25918:	000438f4 	.word	0x000438f4
   2591c:	0004311c 	.word	0x0004311c
   25920:	0003f72c 	.word	0x0003f72c
   25924:	00043cc0 	.word	0x00043cc0
   25928:	00043cb8 	.word	0x00043cb8

0002592c <bt_gatt_mult_notification>:
{
   2592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25930:	b087      	sub	sp, #28
   25932:	af00      	add	r7, sp, #0
   25934:	4606      	mov	r6, r0
   25936:	460c      	mov	r4, r1
   25938:	4615      	mov	r5, r2
	sub = gatt_sub_find(conn);
   2593a:	f7fd fc73 	bl	23224 <gatt_sub_find>
	if (!sub) {
   2593e:	2800      	cmp	r0, #0
   25940:	d044      	beq.n	259cc <bt_gatt_mult_notification+0xa0>
   25942:	4680      	mov	r8, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   25944:	462a      	mov	r2, r5
   25946:	4621      	mov	r1, r4
   25948:	f107 000c 	add.w	r0, r7, #12
   2594c:	f016 fa3c 	bl	3bdc8 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   25950:	46b1      	mov	r9, r6
   25952:	607d      	str	r5, [r7, #4]
   25954:	e06c      	b.n	25a30 <bt_gatt_mult_notification+0x104>
			LOG_ERR("Invalid data len %u > %u", len, length);
   25956:	46ab      	mov	fp, r5
   25958:	687d      	ldr	r5, [r7, #4]
   2595a:	466e      	mov	r6, sp
   2595c:	b088      	sub	sp, #32
   2595e:	466b      	mov	r3, sp
   25960:	f113 0210 	adds.w	r2, r3, #16
   25964:	d036      	beq.n	259d4 <bt_gatt_mult_notification+0xa8>
   25966:	2110      	movs	r1, #16
   25968:	b15a      	cbz	r2, 25982 <bt_gatt_mult_notification+0x56>
   2596a:	4608      	mov	r0, r1
   2596c:	2904      	cmp	r1, #4
   2596e:	dd01      	ble.n	25974 <bt_gatt_mult_notification+0x48>
   25970:	4c3c      	ldr	r4, [pc, #240]	; (25a64 <bt_gatt_mult_notification+0x138>)
   25972:	615c      	str	r4, [r3, #20]
   25974:	2808      	cmp	r0, #8
   25976:	dd01      	ble.n	2597c <bt_gatt_mult_notification+0x50>
   25978:	f8c3 b018 	str.w	fp, [r3, #24]
   2597c:	280c      	cmp	r0, #12
   2597e:	dd00      	ble.n	25982 <bt_gatt_mult_notification+0x56>
   25980:	61dd      	str	r5, [r3, #28]
   25982:	290f      	cmp	r1, #15
   25984:	dd29      	ble.n	259da <bt_gatt_mult_notification+0xae>
   25986:	2410      	movs	r4, #16
   25988:	b13a      	cbz	r2, 2599a <bt_gatt_mult_notification+0x6e>
   2598a:	2104      	movs	r1, #4
   2598c:	7239      	strb	r1, [r7, #8]
   2598e:	2100      	movs	r1, #0
   25990:	7279      	strb	r1, [r7, #9]
   25992:	72b9      	strb	r1, [r7, #10]
   25994:	72f9      	strb	r1, [r7, #11]
   25996:	68b8      	ldr	r0, [r7, #8]
   25998:	6118      	str	r0, [r3, #16]
   2599a:	2100      	movs	r1, #0
   2599c:	f36f 0100 	bfc	r1, #0, #1
   259a0:	f36f 0141 	bfc	r1, #1, #1
   259a4:	f36f 0182 	bfc	r1, #2, #1
   259a8:	f36f 01c5 	bfc	r1, #3, #3
   259ac:	2301      	movs	r3, #1
   259ae:	f363 1188 	bfi	r1, r3, #6, #3
   259b2:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   259b6:	f364 2152 	bfi	r1, r4, #9, #10
   259ba:	f36f 41de 	bfc	r1, #19, #12
   259be:	f36f 71df 	bfc	r1, #31, #1
   259c2:	2300      	movs	r3, #0
   259c4:	4828      	ldr	r0, [pc, #160]	; (25a68 <bt_gatt_mult_notification+0x13c>)
   259c6:	f7f0 ffc1 	bl	1694c <z_impl_z_log_msg_static_create>
   259ca:	46b5      	mov	sp, r6
}
   259cc:	371c      	adds	r7, #28
   259ce:	46bd      	mov	sp, r7
   259d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid data len %u > %u", len, length);
   259d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   259d8:	e7c6      	b.n	25968 <bt_gatt_mult_notification+0x3c>
   259da:	f06f 041b 	mvn.w	r4, #27
   259de:	e7d3      	b.n	25988 <bt_gatt_mult_notification+0x5c>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   259e0:	b1fe      	cbz	r6, 25a22 <bt_gatt_mult_notification+0xf6>
   259e2:	69b3      	ldr	r3, [r6, #24]
   259e4:	b103      	cbz	r3, 259e8 <bt_gatt_mult_notification+0xbc>
   259e6:	3b18      	subs	r3, #24
   259e8:	4634      	mov	r4, r6
   259ea:	461e      	mov	r6, r3
   259ec:	b1dc      	cbz	r4, 25a26 <bt_gatt_mult_notification+0xfa>
			if (handle != params->value_handle) {
   259ee:	89a3      	ldrh	r3, [r4, #12]
   259f0:	459a      	cmp	sl, r3
   259f2:	d1f5      	bne.n	259e0 <bt_gatt_mult_notification+0xb4>
			if (check_subscribe_security_level(conn, params)) {
   259f4:	4621      	mov	r1, r4
   259f6:	4648      	mov	r0, r9
   259f8:	f014 fe94 	bl	3a724 <check_subscribe_security_level>
   259fc:	2800      	cmp	r0, #0
   259fe:	d0ef      	beq.n	259e0 <bt_gatt_mult_notification+0xb4>
				if (params->notify(conn, params, nfy->value, len) ==
   25a00:	462b      	mov	r3, r5
   25a02:	f10b 0204 	add.w	r2, fp, #4
   25a06:	4621      	mov	r1, r4
   25a08:	4648      	mov	r0, r9
   25a0a:	f8d4 c000 	ldr.w	ip, [r4]
   25a0e:	47e0      	blx	ip
   25a10:	2800      	cmp	r0, #0
   25a12:	d1e5      	bne.n	259e0 <bt_gatt_mult_notification+0xb4>
					bt_gatt_unsubscribe(conn, params);
   25a14:	4621      	mov	r1, r4
   25a16:	4648      	mov	r0, r9
   25a18:	f7ff ff08 	bl	2582c <bt_gatt_unsubscribe>
   25a1c:	e7e0      	b.n	259e0 <bt_gatt_mult_notification+0xb4>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   25a1e:	4626      	mov	r6, r4
   25a20:	e7e4      	b.n	259ec <bt_gatt_mult_notification+0xc0>
   25a22:	4633      	mov	r3, r6
   25a24:	e7e0      	b.n	259e8 <bt_gatt_mult_notification+0xbc>
		net_buf_simple_pull_mem(&buf, len);
   25a26:	4629      	mov	r1, r5
   25a28:	f107 000c 	add.w	r0, r7, #12
   25a2c:	f003 ff18 	bl	29860 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   25a30:	8a3b      	ldrh	r3, [r7, #16]
   25a32:	2b04      	cmp	r3, #4
   25a34:	d9ca      	bls.n	259cc <bt_gatt_mult_notification+0xa0>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   25a36:	2104      	movs	r1, #4
   25a38:	f107 000c 	add.w	r0, r7, #12
   25a3c:	f003 ff10 	bl	29860 <net_buf_simple_pull_mem>
   25a40:	4683      	mov	fp, r0
		handle = sys_cpu_to_le16(nfy->handle);
   25a42:	f8b0 a000 	ldrh.w	sl, [r0]
		len = sys_cpu_to_le16(nfy->len);
   25a46:	8845      	ldrh	r5, [r0, #2]
		if (len > buf.len) {
   25a48:	8a3b      	ldrh	r3, [r7, #16]
   25a4a:	42ab      	cmp	r3, r5
   25a4c:	d383      	bcc.n	25956 <bt_gatt_mult_notification+0x2a>
	return list->head;
   25a4e:	f8d8 4008 	ldr.w	r4, [r8, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   25a52:	2c00      	cmp	r4, #0
   25a54:	d0e3      	beq.n	25a1e <bt_gatt_mult_notification+0xf2>
	return node->next;
   25a56:	f854 6918 	ldr.w	r6, [r4], #-24
   25a5a:	2e00      	cmp	r6, #0
   25a5c:	d0c6      	beq.n	259ec <bt_gatt_mult_notification+0xc0>
   25a5e:	3e18      	subs	r6, #24
   25a60:	e7c4      	b.n	259ec <bt_gatt_mult_notification+0xc0>
   25a62:	bf00      	nop
   25a64:	00043da8 	.word	0x00043da8
   25a68:	0003f3c0 	.word	0x0003f3c0

00025a6c <bt_gatt_connected>:
{
   25a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25a6e:	b091      	sub	sp, #68	; 0x44
   25a70:	af04      	add	r7, sp, #16
   25a72:	4604      	mov	r4, r0
	data.conn = conn;
   25a74:	62b8      	str	r0, [r7, #40]	; 0x28
	data.sec = BT_SECURITY_L1;
   25a76:	2301      	movs	r3, #1
   25a78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25a7c:	f100 0590 	add.w	r5, r0, #144	; 0x90
   25a80:	4629      	mov	r1, r5
   25a82:	7a00      	ldrb	r0, [r0, #8]
   25a84:	f012 ff7b 	bl	3897e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   25a88:	b188      	cbz	r0, 25aae <bt_gatt_connected+0x42>
		if (conn->id) {
   25a8a:	7a22      	ldrb	r2, [r4, #8]
   25a8c:	b34a      	cbz	r2, 25ae2 <bt_gatt_connected+0x76>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
   25a8e:	2104      	movs	r1, #4
   25a90:	4638      	mov	r0, r7
   25a92:	f7ee fcc1 	bl	14418 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
   25a96:	9700      	str	r7, [sp, #0]
   25a98:	462b      	mov	r3, r5
   25a9a:	4a38      	ldr	r2, [pc, #224]	; (25b7c <bt_gatt_connected+0x110>)
   25a9c:	2124      	movs	r1, #36	; 0x24
   25a9e:	1d38      	adds	r0, r7, #4
   25aa0:	f7f5 fa72 	bl	1af88 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
   25aa4:	1d3a      	adds	r2, r7, #4
   25aa6:	4936      	ldr	r1, [pc, #216]	; (25b80 <bt_gatt_connected+0x114>)
   25aa8:	4610      	mov	r0, r2
   25aaa:	f7f2 fcd1 	bl	18450 <settings_load_subtree_direct>
   25aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
   25ab2:	9302      	str	r3, [sp, #8]
   25ab4:	4b33      	ldr	r3, [pc, #204]	; (25b84 <bt_gatt_connected+0x118>)
   25ab6:	9301      	str	r3, [sp, #4]
   25ab8:	2200      	movs	r2, #0
   25aba:	9200      	str	r2, [sp, #0]
   25abc:	4613      	mov	r3, r2
   25abe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25ac2:	2001      	movs	r0, #1
   25ac4:	f7fe fd7e 	bl	245c4 <bt_gatt_foreach_attr_type>
	    bt_conn_get_security(conn) < data.sec) {
   25ac8:	4620      	mov	r0, r4
   25aca:	f013 fc44 	bl	39356 <bt_conn_get_security>
   25ace:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
	if (IS_ENABLED(CONFIG_BT_SMP) &&
   25ad2:	4288      	cmp	r0, r1
   25ad4:	d30e      	bcc.n	25af4 <bt_gatt_connected+0x88>
	add_subscriptions(conn);
   25ad6:	4620      	mov	r0, r4
   25ad8:	f015 f811 	bl	3aafe <add_subscriptions>
}
   25adc:	3734      	adds	r7, #52	; 0x34
   25ade:	46bd      	mov	sp, r7
   25ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
   25ae2:	2300      	movs	r3, #0
   25ae4:	9300      	str	r3, [sp, #0]
   25ae6:	462b      	mov	r3, r5
   25ae8:	4a24      	ldr	r2, [pc, #144]	; (25b7c <bt_gatt_connected+0x110>)
   25aea:	2124      	movs	r1, #36	; 0x24
   25aec:	1d38      	adds	r0, r7, #4
   25aee:	f7f5 fa4b 	bl	1af88 <bt_settings_encode_key>
   25af2:	e7d7      	b.n	25aa4 <bt_gatt_connected+0x38>
		int err = bt_conn_set_security(conn, data.sec);
   25af4:	4620      	mov	r0, r4
   25af6:	f013 fc0c 	bl	39312 <bt_conn_set_security>
		if (err) {
   25afa:	4605      	mov	r5, r0
   25afc:	2800      	cmp	r0, #0
   25afe:	d0ea      	beq.n	25ad6 <bt_gatt_connected+0x6a>
			LOG_WRN("Failed to set security for bonded peer (%d)", err);
   25b00:	466e      	mov	r6, sp
   25b02:	b088      	sub	sp, #32
   25b04:	ab04      	add	r3, sp, #16
   25b06:	f113 0210 	adds.w	r2, r3, #16
   25b0a:	d031      	beq.n	25b70 <bt_gatt_connected+0x104>
   25b0c:	210c      	movs	r1, #12
   25b0e:	b14a      	cbz	r2, 25b24 <bt_gatt_connected+0xb8>
   25b10:	4608      	mov	r0, r1
   25b12:	2904      	cmp	r1, #4
   25b14:	dd03      	ble.n	25b1e <bt_gatt_connected+0xb2>
   25b16:	f8df c070 	ldr.w	ip, [pc, #112]	; 25b88 <bt_gatt_connected+0x11c>
   25b1a:	f8c3 c014 	str.w	ip, [r3, #20]
   25b1e:	2808      	cmp	r0, #8
   25b20:	dd00      	ble.n	25b24 <bt_gatt_connected+0xb8>
   25b22:	619d      	str	r5, [r3, #24]
   25b24:	290b      	cmp	r1, #11
   25b26:	dd26      	ble.n	25b76 <bt_gatt_connected+0x10a>
   25b28:	250c      	movs	r5, #12
   25b2a:	b13a      	cbz	r2, 25b3c <bt_gatt_connected+0xd0>
   25b2c:	2103      	movs	r1, #3
   25b2e:	7139      	strb	r1, [r7, #4]
   25b30:	2100      	movs	r1, #0
   25b32:	7179      	strb	r1, [r7, #5]
   25b34:	71b9      	strb	r1, [r7, #6]
   25b36:	71f9      	strb	r1, [r7, #7]
   25b38:	6878      	ldr	r0, [r7, #4]
   25b3a:	6118      	str	r0, [r3, #16]
   25b3c:	2100      	movs	r1, #0
   25b3e:	f36f 0100 	bfc	r1, #0, #1
   25b42:	f36f 0141 	bfc	r1, #1, #1
   25b46:	f36f 0182 	bfc	r1, #2, #1
   25b4a:	f36f 01c5 	bfc	r1, #3, #3
   25b4e:	2302      	movs	r3, #2
   25b50:	f363 1188 	bfi	r1, r3, #6, #3
   25b54:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   25b58:	f363 2152 	bfi	r1, r3, #9, #10
   25b5c:	f36f 41de 	bfc	r1, #19, #12
   25b60:	f36f 71df 	bfc	r1, #31, #1
   25b64:	2300      	movs	r3, #0
   25b66:	4809      	ldr	r0, [pc, #36]	; (25b8c <bt_gatt_connected+0x120>)
   25b68:	f7f0 fef0 	bl	1694c <z_impl_z_log_msg_static_create>
   25b6c:	46b5      	mov	sp, r6
   25b6e:	e7b2      	b.n	25ad6 <bt_gatt_connected+0x6a>
   25b70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   25b74:	e7cb      	b.n	25b0e <bt_gatt_connected+0xa2>
   25b76:	f06f 051b 	mvn.w	r5, #27
   25b7a:	e7d6      	b.n	25b2a <bt_gatt_connected+0xbe>
   25b7c:	00043c10 	.word	0x00043c10
   25b80:	00024b81 	.word	0x00024b81
   25b84:	0002528d 	.word	0x0002528d
   25b88:	00043dc4 	.word	0x00043dc4
   25b8c:	0003f3c0 	.word	0x0003f3c0

00025b90 <bt_gatt_att_max_mtu_changed>:
{
   25b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25b92:	4605      	mov	r5, r0
   25b94:	460e      	mov	r6, r1
   25b96:	4617      	mov	r7, r2
	return list->head;
   25b98:	4b0a      	ldr	r3, [pc, #40]	; (25bc4 <bt_gatt_att_max_mtu_changed+0x34>)
   25b9a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   25b9c:	b104      	cbz	r4, 25ba0 <bt_gatt_att_max_mtu_changed+0x10>
   25b9e:	3c04      	subs	r4, #4
   25ba0:	b174      	cbz	r4, 25bc0 <bt_gatt_att_max_mtu_changed+0x30>
		if (cb->att_mtu_updated) {
   25ba2:	6823      	ldr	r3, [r4, #0]
   25ba4:	b143      	cbz	r3, 25bb8 <bt_gatt_att_max_mtu_changed+0x28>
			cb->att_mtu_updated(conn, tx, rx);
   25ba6:	463a      	mov	r2, r7
   25ba8:	4631      	mov	r1, r6
   25baa:	4628      	mov	r0, r5
   25bac:	4798      	blx	r3
	return node->next;
   25bae:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   25bb0:	2c00      	cmp	r4, #0
   25bb2:	d0f5      	beq.n	25ba0 <bt_gatt_att_max_mtu_changed+0x10>
   25bb4:	3c04      	subs	r4, #4
   25bb6:	e7f3      	b.n	25ba0 <bt_gatt_att_max_mtu_changed+0x10>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25bb8:	1d23      	adds	r3, r4, #4
   25bba:	d1f8      	bne.n	25bae <bt_gatt_att_max_mtu_changed+0x1e>
   25bbc:	461c      	mov	r4, r3
   25bbe:	e7ef      	b.n	25ba0 <bt_gatt_att_max_mtu_changed+0x10>
}
   25bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25bc2:	bf00      	nop
   25bc4:	2000c274 	.word	0x2000c274

00025bc8 <bt_gatt_encrypt_change>:
{
   25bc8:	b500      	push	{lr}
   25bca:	b087      	sub	sp, #28
	data.conn = conn;
   25bcc:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   25bce:	2001      	movs	r0, #1
   25bd0:	f88d 0014 	strb.w	r0, [sp, #20]
   25bd4:	ab04      	add	r3, sp, #16
   25bd6:	9302      	str	r3, [sp, #8]
   25bd8:	4b05      	ldr	r3, [pc, #20]	; (25bf0 <bt_gatt_encrypt_change+0x28>)
   25bda:	9301      	str	r3, [sp, #4]
   25bdc:	2200      	movs	r2, #0
   25bde:	9200      	str	r2, [sp, #0]
   25be0:	4613      	mov	r3, r2
   25be2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25be6:	f7fe fced 	bl	245c4 <bt_gatt_foreach_attr_type>
}
   25bea:	b007      	add	sp, #28
   25bec:	f85d fb04 	ldr.w	pc, [sp], #4
   25bf0:	0002528d 	.word	0x0002528d

00025bf4 <bt_gatt_store_ccc>:
{
   25bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
   25bf6:	b0c3      	sub	sp, #268	; 0x10c
   25bf8:	af04      	add	r7, sp, #16
   25bfa:	4604      	mov	r4, r0
   25bfc:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
   25bfe:	62f9      	str	r1, [r7, #44]	; 0x2c
	save.addr_with_id.id = id;
   25c00:	f887 0030 	strb.w	r0, [r7, #48]	; 0x30
	save.count = 0;
   25c04:	2200      	movs	r2, #0
   25c06:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
   25c0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   25c0e:	9302      	str	r3, [sp, #8]
   25c10:	4b3c      	ldr	r3, [pc, #240]	; (25d04 <bt_gatt_store_ccc+0x110>)
   25c12:	9301      	str	r3, [sp, #4]
   25c14:	9200      	str	r2, [sp, #0]
   25c16:	4613      	mov	r3, r2
   25c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25c1c:	2001      	movs	r0, #1
   25c1e:	f7fe fcd1 	bl	245c4 <bt_gatt_foreach_attr_type>
	if (id) {
   25c22:	b1f4      	cbz	r4, 25c62 <bt_gatt_store_ccc+0x6e>
		u8_to_dec(id_str, sizeof(id_str), id);
   25c24:	1d3e      	adds	r6, r7, #4
   25c26:	4622      	mov	r2, r4
   25c28:	2104      	movs	r1, #4
   25c2a:	4630      	mov	r0, r6
   25c2c:	f7ee fbf4 	bl	14418 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
   25c30:	9600      	str	r6, [sp, #0]
   25c32:	462b      	mov	r3, r5
   25c34:	4a34      	ldr	r2, [pc, #208]	; (25d08 <bt_gatt_store_ccc+0x114>)
   25c36:	2124      	movs	r1, #36	; 0x24
   25c38:	f107 0008 	add.w	r0, r7, #8
   25c3c:	f7f5 f9a4 	bl	1af88 <bt_settings_encode_key>
	if (save.count) {
   25c40:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
   25c44:	b1bc      	cbz	r4, 25c76 <bt_gatt_store_ccc+0x82>
		len = save.count * sizeof(*save.store);
   25c46:	00a4      	lsls	r4, r4, #2
		str = (char *)save.store;
   25c48:	f107 0134 	add.w	r1, r7, #52	; 0x34
	err = settings_save_one(key, str, len);
   25c4c:	4622      	mov	r2, r4
   25c4e:	f107 0008 	add.w	r0, r7, #8
   25c52:	f7f2 fb93 	bl	1837c <settings_save_one>
	if (err) {
   25c56:	4605      	mov	r5, r0
   25c58:	b978      	cbnz	r0, 25c7a <bt_gatt_store_ccc+0x86>
	if (len) {
   25c5a:	2c00      	cmp	r4, #0
   25c5c:	d042      	beq.n	25ce4 <bt_gatt_store_ccc+0xf0>
		for (size_t i = 0; i < save.count; i++) {
   25c5e:	2300      	movs	r3, #0
   25c60:	e04b      	b.n	25cfa <bt_gatt_store_ccc+0x106>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
   25c62:	2300      	movs	r3, #0
   25c64:	9300      	str	r3, [sp, #0]
   25c66:	462b      	mov	r3, r5
   25c68:	4a27      	ldr	r2, [pc, #156]	; (25d08 <bt_gatt_store_ccc+0x114>)
   25c6a:	2124      	movs	r1, #36	; 0x24
   25c6c:	f107 0008 	add.w	r0, r7, #8
   25c70:	f7f5 f98a 	bl	1af88 <bt_settings_encode_key>
   25c74:	e7e4      	b.n	25c40 <bt_gatt_store_ccc+0x4c>
		str = NULL;
   25c76:	2100      	movs	r1, #0
   25c78:	e7e8      	b.n	25c4c <bt_gatt_store_ccc+0x58>
		LOG_ERR("Failed to store CCCs (err %d)", err);
   25c7a:	466e      	mov	r6, sp
   25c7c:	b088      	sub	sp, #32
   25c7e:	ab04      	add	r3, sp, #16
   25c80:	f113 0210 	adds.w	r2, r3, #16
   25c84:	d032      	beq.n	25cec <bt_gatt_store_ccc+0xf8>
   25c86:	210c      	movs	r1, #12
   25c88:	b13a      	cbz	r2, 25c9a <bt_gatt_store_ccc+0xa6>
   25c8a:	4608      	mov	r0, r1
   25c8c:	2904      	cmp	r1, #4
   25c8e:	dd01      	ble.n	25c94 <bt_gatt_store_ccc+0xa0>
   25c90:	4c1e      	ldr	r4, [pc, #120]	; (25d0c <bt_gatt_store_ccc+0x118>)
   25c92:	615c      	str	r4, [r3, #20]
   25c94:	2808      	cmp	r0, #8
   25c96:	dd00      	ble.n	25c9a <bt_gatt_store_ccc+0xa6>
   25c98:	619d      	str	r5, [r3, #24]
   25c9a:	290b      	cmp	r1, #11
   25c9c:	dd29      	ble.n	25cf2 <bt_gatt_store_ccc+0xfe>
   25c9e:	240c      	movs	r4, #12
   25ca0:	b13a      	cbz	r2, 25cb2 <bt_gatt_store_ccc+0xbe>
   25ca2:	2103      	movs	r1, #3
   25ca4:	7139      	strb	r1, [r7, #4]
   25ca6:	2100      	movs	r1, #0
   25ca8:	7179      	strb	r1, [r7, #5]
   25caa:	71b9      	strb	r1, [r7, #6]
   25cac:	71f9      	strb	r1, [r7, #7]
   25cae:	6878      	ldr	r0, [r7, #4]
   25cb0:	6118      	str	r0, [r3, #16]
   25cb2:	2100      	movs	r1, #0
   25cb4:	f36f 0100 	bfc	r1, #0, #1
   25cb8:	f36f 0141 	bfc	r1, #1, #1
   25cbc:	f36f 0182 	bfc	r1, #2, #1
   25cc0:	f36f 01c5 	bfc	r1, #3, #3
   25cc4:	2301      	movs	r3, #1
   25cc6:	f363 1188 	bfi	r1, r3, #6, #3
   25cca:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   25cce:	f363 2152 	bfi	r1, r3, #9, #10
   25cd2:	f36f 41de 	bfc	r1, #19, #12
   25cd6:	f36f 71df 	bfc	r1, #31, #1
   25cda:	2300      	movs	r3, #0
   25cdc:	480c      	ldr	r0, [pc, #48]	; (25d10 <bt_gatt_store_ccc+0x11c>)
   25cde:	f7f0 fe35 	bl	1694c <z_impl_z_log_msg_static_create>
   25ce2:	46b5      	mov	sp, r6
}
   25ce4:	4628      	mov	r0, r5
   25ce6:	37fc      	adds	r7, #252	; 0xfc
   25ce8:	46bd      	mov	sp, r7
   25cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to store CCCs (err %d)", err);
   25cec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   25cf0:	e7ca      	b.n	25c88 <bt_gatt_store_ccc+0x94>
   25cf2:	f06f 041b 	mvn.w	r4, #27
   25cf6:	e7d3      	b.n	25ca0 <bt_gatt_store_ccc+0xac>
		for (size_t i = 0; i < save.count; i++) {
   25cf8:	3301      	adds	r3, #1
   25cfa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
   25cfe:	429a      	cmp	r2, r3
   25d00:	d8fa      	bhi.n	25cf8 <bt_gatt_store_ccc+0x104>
   25d02:	e7ef      	b.n	25ce4 <bt_gatt_store_ccc+0xf0>
   25d04:	00023271 	.word	0x00023271
   25d08:	00043c10 	.word	0x00043c10
   25d0c:	00043df0 	.word	0x00043df0
   25d10:	0003f3c0 	.word	0x0003f3c0

00025d14 <bt_gatt_identity_resolved>:
{
   25d14:	b510      	push	{r4, lr}
   25d16:	b086      	sub	sp, #24
   25d18:	4604      	mov	r4, r0
	struct addr_match user_data = {
   25d1a:	9104      	str	r1, [sp, #16]
   25d1c:	9205      	str	r2, [sp, #20]
   25d1e:	ab04      	add	r3, sp, #16
   25d20:	9302      	str	r3, [sp, #8]
   25d22:	4b0a      	ldr	r3, [pc, #40]	; (25d4c <bt_gatt_identity_resolved+0x38>)
   25d24:	9301      	str	r3, [sp, #4]
   25d26:	2200      	movs	r2, #0
   25d28:	9200      	str	r2, [sp, #0]
   25d2a:	4613      	mov	r3, r2
   25d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25d30:	2001      	movs	r0, #1
   25d32:	f7fe fc47 	bl	245c4 <bt_gatt_foreach_attr_type>
	bt_gatt_store_ccc(conn->id, &(conn->le.dst));
   25d36:	f104 0190 	add.w	r1, r4, #144	; 0x90
   25d3a:	7a20      	ldrb	r0, [r4, #8]
   25d3c:	f7ff ff5a 	bl	25bf4 <bt_gatt_store_ccc>
	bt_gatt_store_cf(conn);
   25d40:	4620      	mov	r0, r4
   25d42:	f7fd fc9b 	bl	2367c <bt_gatt_store_cf>
}
   25d46:	b006      	add	sp, #24
   25d48:	bd10      	pop	{r4, pc}
   25d4a:	bf00      	nop
   25d4c:	000233bd 	.word	0x000233bd

00025d50 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   25d50:	b530      	push	{r4, r5, lr}
   25d52:	b087      	sub	sp, #28
   25d54:	4604      	mov	r4, r0
   25d56:	9002      	str	r0, [sp, #8]
   25d58:	4b20      	ldr	r3, [pc, #128]	; (25ddc <bt_gatt_disconnected+0x8c>)
   25d5a:	9301      	str	r3, [sp, #4]
   25d5c:	2200      	movs	r2, #0
   25d5e:	9200      	str	r2, [sp, #0]
   25d60:	4613      	mov	r3, r2
   25d62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25d66:	2001      	movs	r0, #1
   25d68:	f7fe fc2c 	bl	245c4 <bt_gatt_foreach_attr_type>
	/* Clear pending notifications */
	cleanup_notify(conn);
#endif /* CONFIG_BT_GATT_NOTIFY_MULTIPLE */

#if defined(CONFIG_BT_SETTINGS_CCC_STORE_ON_WRITE)
	gatt_ccc_conn_unqueue(conn);
   25d6c:	4620      	mov	r0, r4
   25d6e:	f7fd fee3 	bl	23b38 <gatt_ccc_conn_unqueue>

	if (gatt_ccc_conn_queue_is_empty()) {
   25d72:	f7fd f8f7 	bl	22f64 <gatt_ccc_conn_queue_is_empty>
   25d76:	b998      	cbnz	r0, 25da0 <bt_gatt_disconnected+0x50>
		k_work_cancel_delayable(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25d78:	f104 0590 	add.w	r5, r4, #144	; 0x90
   25d7c:	4629      	mov	r1, r5
   25d7e:	7a20      	ldrb	r0, [r4, #8]
   25d80:	f012 fdfd 	bl	3897e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
   25d84:	b980      	cbnz	r0, 25da8 <bt_gatt_disconnected+0x58>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25d86:	4629      	mov	r1, r5
   25d88:	7a20      	ldrb	r0, [r4, #8]
   25d8a:	f012 fdf8 	bl	3897e <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
   25d8e:	b998      	cbnz	r0, 25db8 <bt_gatt_disconnected+0x68>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   25d90:	4620      	mov	r0, r4
   25d92:	f014 fd98 	bl	3a8c6 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   25d96:	4620      	mov	r0, r4
   25d98:	f014 feeb 	bl	3ab72 <remove_cf_cfg>
#endif
}
   25d9c:	b007      	add	sp, #28
   25d9e:	bd30      	pop	{r4, r5, pc}
		k_work_cancel_delayable(&gatt_ccc_store.work);
   25da0:	480f      	ldr	r0, [pc, #60]	; (25de0 <bt_gatt_disconnected+0x90>)
   25da2:	f00c fe63 	bl	32a6c <k_work_cancel_delayable>
   25da6:	e7e7      	b.n	25d78 <bt_gatt_disconnected+0x28>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
   25da8:	4629      	mov	r1, r5
   25daa:	7a20      	ldrb	r0, [r4, #8]
   25dac:	f7ff ff22 	bl	25bf4 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
   25db0:	4620      	mov	r0, r4
   25db2:	f7fd fc63 	bl	2367c <bt_gatt_store_cf>
   25db6:	e7e6      	b.n	25d86 <bt_gatt_disconnected+0x36>
		struct addr_with_id addr_with_id = {
   25db8:	9504      	str	r5, [sp, #16]
			.id = conn->id,
   25dba:	7a23      	ldrb	r3, [r4, #8]
		struct addr_with_id addr_with_id = {
   25dbc:	f88d 3014 	strb.w	r3, [sp, #20]
   25dc0:	ab04      	add	r3, sp, #16
   25dc2:	9302      	str	r3, [sp, #8]
   25dc4:	4b07      	ldr	r3, [pc, #28]	; (25de4 <bt_gatt_disconnected+0x94>)
   25dc6:	9301      	str	r3, [sp, #4]
   25dc8:	2200      	movs	r2, #0
   25dca:	9200      	str	r2, [sp, #0]
   25dcc:	4613      	mov	r3, r2
   25dce:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25dd2:	2001      	movs	r0, #1
   25dd4:	f7fe fbf6 	bl	245c4 <bt_gatt_foreach_attr_type>
   25dd8:	e7da      	b.n	25d90 <bt_gatt_disconnected+0x40>
   25dda:	bf00      	nop
   25ddc:	00023cbd 	.word	0x00023cbd
   25de0:	2000b698 	.word	0x2000b698
   25de4:	00023911 	.word	0x00023911

00025de8 <le_sc_supported>:
	 */
	if (IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		return false;
	}

	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   25de8:	4b04      	ldr	r3, [pc, #16]	; (25dfc <le_sc_supported+0x14>)
   25dea:	f893 009a 	ldrb.w	r0, [r3, #154]	; 0x9a
   25dee:	f000 0006 	and.w	r0, r0, #6
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}
   25df2:	2806      	cmp	r0, #6
   25df4:	bf14      	ite	ne
   25df6:	2000      	movne	r0, #0
   25df8:	2001      	moveq	r0, #1
   25dfa:	4770      	bx	lr
   25dfc:	20008000 	.word	0x20008000

00025e00 <smp_chan_get>:
		return false;
	}
}

static struct bt_smp *smp_chan_get(struct bt_conn *conn)
{
   25e00:	b510      	push	{r4, lr}
   25e02:	b088      	sub	sp, #32
	struct bt_l2cap_chan *chan;

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   25e04:	2106      	movs	r1, #6
   25e06:	f013 fbfa 	bl	395fe <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   25e0a:	4604      	mov	r4, r0
   25e0c:	b120      	cbz	r0, 25e18 <smp_chan_get+0x18>
		LOG_ERR("Unable to find SMP channel");
		return NULL;
	}

	return CONTAINER_OF(chan, struct bt_smp, chan);
   25e0e:	f1a0 04ec 	sub.w	r4, r0, #236	; 0xec
}
   25e12:	4620      	mov	r0, r4
   25e14:	b008      	add	sp, #32
   25e16:	bd10      	pop	{r4, pc}
		LOG_ERR("Unable to find SMP channel");
   25e18:	4b12      	ldr	r3, [pc, #72]	; (25e64 <smp_chan_get+0x64>)
   25e1a:	9307      	str	r3, [sp, #28]
   25e1c:	2302      	movs	r3, #2
   25e1e:	f88d 3004 	strb.w	r3, [sp, #4]
   25e22:	2300      	movs	r3, #0
   25e24:	f88d 3005 	strb.w	r3, [sp, #5]
   25e28:	f88d 3006 	strb.w	r3, [sp, #6]
   25e2c:	f88d 3007 	strb.w	r3, [sp, #7]
   25e30:	9a01      	ldr	r2, [sp, #4]
   25e32:	9206      	str	r2, [sp, #24]
   25e34:	4619      	mov	r1, r3
   25e36:	f363 0100 	bfi	r1, r3, #0, #1
   25e3a:	f363 0141 	bfi	r1, r3, #1, #1
   25e3e:	f363 0182 	bfi	r1, r3, #2, #1
   25e42:	f363 01c5 	bfi	r1, r3, #3, #3
   25e46:	2201      	movs	r2, #1
   25e48:	f362 1188 	bfi	r1, r2, #6, #3
   25e4c:	2208      	movs	r2, #8
   25e4e:	f362 2152 	bfi	r1, r2, #9, #10
   25e52:	f363 41de 	bfi	r1, r3, #19, #12
   25e56:	f363 71df 	bfi	r1, r3, #31, #1
   25e5a:	aa06      	add	r2, sp, #24
   25e5c:	4802      	ldr	r0, [pc, #8]	; (25e68 <smp_chan_get+0x68>)
   25e5e:	f7f0 fd75 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   25e62:	e7d6      	b.n	25e12 <smp_chan_get+0x12>
   25e64:	00043f54 	.word	0x00043f54
   25e68:	0003f418 	.word	0x0003f418

00025e6c <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   25e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e6e:	b083      	sub	sp, #12
   25e70:	af00      	add	r7, sp, #0
   25e72:	4605      	mov	r5, r0
		.recv = bt_smp_recv,
	};

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   25e74:	2000      	movs	r0, #0
   25e76:	2800      	cmp	r0, #0
   25e78:	d03a      	beq.n	25ef0 <bt_smp_accept+0x84>
		*chan = &smp->chan.chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   25e7a:	466c      	mov	r4, sp
   25e7c:	b088      	sub	sp, #32
   25e7e:	466b      	mov	r3, sp
   25e80:	f113 0210 	adds.w	r2, r3, #16
   25e84:	d04c      	beq.n	25f20 <bt_smp_accept+0xb4>
   25e86:	210c      	movs	r1, #12
   25e88:	b13a      	cbz	r2, 25e9a <bt_smp_accept+0x2e>
   25e8a:	4608      	mov	r0, r1
   25e8c:	2904      	cmp	r1, #4
   25e8e:	dd01      	ble.n	25e94 <bt_smp_accept+0x28>
   25e90:	4e26      	ldr	r6, [pc, #152]	; (25f2c <bt_smp_accept+0xc0>)
   25e92:	615e      	str	r6, [r3, #20]
   25e94:	2808      	cmp	r0, #8
   25e96:	dd00      	ble.n	25e9a <bt_smp_accept+0x2e>
   25e98:	619d      	str	r5, [r3, #24]
   25e9a:	290b      	cmp	r1, #11
   25e9c:	dd43      	ble.n	25f26 <bt_smp_accept+0xba>
   25e9e:	f04f 0c0c 	mov.w	ip, #12
   25ea2:	b13a      	cbz	r2, 25eb4 <bt_smp_accept+0x48>
   25ea4:	2103      	movs	r1, #3
   25ea6:	7139      	strb	r1, [r7, #4]
   25ea8:	2100      	movs	r1, #0
   25eaa:	7179      	strb	r1, [r7, #5]
   25eac:	71b9      	strb	r1, [r7, #6]
   25eae:	71f9      	strb	r1, [r7, #7]
   25eb0:	6878      	ldr	r0, [r7, #4]
   25eb2:	6118      	str	r0, [r3, #16]
   25eb4:	2100      	movs	r1, #0
   25eb6:	f36f 0100 	bfc	r1, #0, #1
   25eba:	f36f 0141 	bfc	r1, #1, #1
   25ebe:	f36f 0182 	bfc	r1, #2, #1
   25ec2:	f36f 01c5 	bfc	r1, #3, #3
   25ec6:	2301      	movs	r3, #1
   25ec8:	f363 1188 	bfi	r1, r3, #6, #3
   25ecc:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   25ed0:	f36c 2152 	bfi	r1, ip, #9, #10
   25ed4:	f36f 41de 	bfc	r1, #19, #12
   25ed8:	f36f 71df 	bfc	r1, #31, #1
   25edc:	2300      	movs	r3, #0
   25ede:	4814      	ldr	r0, [pc, #80]	; (25f30 <bt_smp_accept+0xc4>)
   25ee0:	f7f0 fd34 	bl	1694c <z_impl_z_log_msg_static_create>
   25ee4:	46a5      	mov	sp, r4

	return -ENOMEM;
   25ee6:	f06f 000b 	mvn.w	r0, #11
}
   25eea:	370c      	adds	r7, #12
   25eec:	46bd      	mov	sp, r7
   25eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (smp->chan.chan.conn) {
   25ef0:	4b10      	ldr	r3, [pc, #64]	; (25f34 <bt_smp_accept+0xc8>)
   25ef2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   25ef6:	fb02 3300 	mla	r3, r2, r0, r3
   25efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   25efe:	b10b      	cbz	r3, 25f04 <bt_smp_accept+0x98>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   25f00:	3001      	adds	r0, #1
   25f02:	e7b8      	b.n	25e76 <bt_smp_accept+0xa>
		smp->chan.chan.ops = &ops;
   25f04:	4a0b      	ldr	r2, [pc, #44]	; (25f34 <bt_smp_accept+0xc8>)
   25f06:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   25f0a:	fb00 f303 	mul.w	r3, r0, r3
   25f0e:	18d4      	adds	r4, r2, r3
   25f10:	4d09      	ldr	r5, [pc, #36]	; (25f38 <bt_smp_accept+0xcc>)
   25f12:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
		*chan = &smp->chan.chan;
   25f16:	33e8      	adds	r3, #232	; 0xe8
   25f18:	4413      	add	r3, r2
   25f1a:	3304      	adds	r3, #4
   25f1c:	600b      	str	r3, [r1, #0]
		return 0;
   25f1e:	e7e4      	b.n	25eea <bt_smp_accept+0x7e>
	LOG_ERR("No available SMP context for conn %p", conn);
   25f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   25f24:	e7b0      	b.n	25e88 <bt_smp_accept+0x1c>
   25f26:	f06f 0c1b 	mvn.w	ip, #27
   25f2a:	e7ba      	b.n	25ea2 <bt_smp_accept+0x36>
   25f2c:	00043f70 	.word	0x00043f70
   25f30:	0003f418 	.word	0x0003f418
   25f34:	2000b798 	.word	0x2000b798
   25f38:	000443a0 	.word	0x000443a0

00025f3c <smp_find>:
{
   25f3c:	b538      	push	{r3, r4, r5, lr}
   25f3e:	4605      	mov	r5, r0
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   25f40:	2400      	movs	r4, #0
   25f42:	b10c      	cbz	r4, 25f48 <smp_find+0xc>
	return NULL;
   25f44:	2000      	movs	r0, #0
}
   25f46:	bd38      	pop	{r3, r4, r5, pc}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
   25f48:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   25f4c:	4807      	ldr	r0, [pc, #28]	; (25f6c <smp_find+0x30>)
   25f4e:	fb03 0004 	mla	r0, r3, r4, r0
   25f52:	4629      	mov	r1, r5
   25f54:	3004      	adds	r0, #4
   25f56:	f015 f8c6 	bl	3b0e6 <atomic_test_bit>
   25f5a:	b908      	cbnz	r0, 25f60 <smp_find+0x24>
	for (int i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   25f5c:	3401      	adds	r4, #1
   25f5e:	e7f0      	b.n	25f42 <smp_find+0x6>
			return &bt_smp_pool[i];
   25f60:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   25f64:	4801      	ldr	r0, [pc, #4]	; (25f6c <smp_find+0x30>)
   25f66:	fb03 0004 	mla	r0, r3, r4, r0
   25f6a:	e7ec      	b.n	25f46 <smp_find+0xa>
   25f6c:	2000b798 	.word	0x2000b798

00025f70 <latch_auth_cb>:
	atomic_ptr_cas(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED, (atomic_ptr_val_t)bt_auth);
   25f70:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
   25f74:	4b07      	ldr	r3, [pc, #28]	; (25f94 <latch_auth_cb+0x24>)
   25f76:	681a      	ldr	r2, [r3, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25f78:	4b07      	ldr	r3, [pc, #28]	; (25f98 <latch_auth_cb+0x28>)
   25f7a:	e8d0 1fef 	ldaex	r1, [r0]
   25f7e:	4299      	cmp	r1, r3
   25f80:	d104      	bne.n	25f8c <latch_auth_cb+0x1c>
   25f82:	e8c0 2fec 	stlex	ip, r2, [r0]
   25f86:	f1bc 0f00 	cmp.w	ip, #0
   25f8a:	d1f6      	bne.n	25f7a <latch_auth_cb+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25f8c:	e8d0 0faf 	lda	r0, [r0]
}
   25f90:	4770      	bx	lr
   25f92:	bf00      	nop
   25f94:	2000c128 	.word	0x2000c128
   25f98:	2000b798 	.word	0x2000b798

00025f9c <get_io_capa>:
{
   25f9c:	b508      	push	{r3, lr}
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   25f9e:	f7ff ffe7 	bl	25f70 <latch_auth_cb>
	if (!smp_auth_cb) {
   25fa2:	b1c0      	cbz	r0, 25fd6 <get_io_capa+0x3a>
   25fa4:	4603      	mov	r3, r0
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   25fa6:	6802      	ldr	r2, [r0, #0]
   25fa8:	b132      	cbz	r2, 25fb8 <get_io_capa+0x1c>
   25faa:	6841      	ldr	r1, [r0, #4]
   25fac:	b121      	cbz	r1, 25fb8 <get_io_capa+0x1c>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   25fae:	6881      	ldr	r1, [r0, #8]
	if (smp_auth_cb->passkey_display && smp_auth_cb->passkey_entry &&
   25fb0:	b999      	cbnz	r1, 25fda <get_io_capa+0x3e>
	    (smp_auth_cb->passkey_confirm || !sc_supported)) {
   25fb2:	490d      	ldr	r1, [pc, #52]	; (25fe8 <get_io_capa+0x4c>)
   25fb4:	7809      	ldrb	r1, [r1, #0]
   25fb6:	b191      	cbz	r1, 25fde <get_io_capa+0x42>
	if (sc_supported && smp_auth_cb->passkey_display &&
   25fb8:	490b      	ldr	r1, [pc, #44]	; (25fe8 <get_io_capa+0x4c>)
   25fba:	7809      	ldrb	r1, [r1, #0]
   25fbc:	b121      	cbz	r1, 25fc8 <get_io_capa+0x2c>
   25fbe:	b11a      	cbz	r2, 25fc8 <get_io_capa+0x2c>
	    smp_auth_cb->passkey_confirm) {
   25fc0:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && smp_auth_cb->passkey_display &&
   25fc2:	b109      	cbz	r1, 25fc8 <get_io_capa+0x2c>
		return BT_SMP_IO_DISPLAY_YESNO;
   25fc4:	2001      	movs	r0, #1
   25fc6:	e003      	b.n	25fd0 <get_io_capa+0x34>
	if (smp_auth_cb->passkey_entry) {
   25fc8:	685b      	ldr	r3, [r3, #4]
   25fca:	b953      	cbnz	r3, 25fe2 <get_io_capa+0x46>
	if (smp_auth_cb->passkey_display) {
   25fcc:	b10a      	cbz	r2, 25fd2 <get_io_capa+0x36>
		return BT_SMP_IO_DISPLAY_ONLY;
   25fce:	2000      	movs	r0, #0
}
   25fd0:	bd08      	pop	{r3, pc}
		return BT_SMP_IO_NO_INPUT_OUTPUT;
   25fd2:	2003      	movs	r0, #3
   25fd4:	e7fc      	b.n	25fd0 <get_io_capa+0x34>
   25fd6:	2003      	movs	r0, #3
   25fd8:	e7fa      	b.n	25fd0 <get_io_capa+0x34>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
   25fda:	2004      	movs	r0, #4
   25fdc:	e7f8      	b.n	25fd0 <get_io_capa+0x34>
   25fde:	2004      	movs	r0, #4
   25fe0:	e7f6      	b.n	25fd0 <get_io_capa+0x34>
			return BT_SMP_IO_KEYBOARD_ONLY;
   25fe2:	2002      	movs	r0, #2
   25fe4:	e7f4      	b.n	25fd0 <get_io_capa+0x34>
   25fe6:	bf00      	nop
   25fe8:	2000cab5 	.word	0x2000cab5

00025fec <get_auth>:
{
   25fec:	b510      	push	{r4, lr}
	if (sc_supported) {
   25fee:	4b0d      	ldr	r3, [pc, #52]	; (26024 <get_auth+0x38>)
   25ff0:	781b      	ldrb	r3, [r3, #0]
   25ff2:	b16b      	cbz	r3, 26010 <get_auth+0x24>
		auth &= BT_SMP_AUTH_MASK_SC;
   25ff4:	f001 040f 	and.w	r4, r1, #15
	if ((get_io_capa(smp) == BT_SMP_IO_NO_INPUT_OUTPUT) ||
   25ff8:	f7ff ffd0 	bl	25f9c <get_io_capa>
   25ffc:	2803      	cmp	r0, #3
   25ffe:	d00a      	beq.n	26016 <get_auth+0x2a>
		auth |= BT_SMP_AUTH_MITM;
   26000:	f044 0004 	orr.w	r0, r4, #4
	if (bondable) {
   26004:	4b08      	ldr	r3, [pc, #32]	; (26028 <get_auth+0x3c>)
   26006:	781b      	ldrb	r3, [r3, #0]
   26008:	b143      	cbz	r3, 2601c <get_auth+0x30>
		auth |= BT_SMP_AUTH_BONDING;
   2600a:	f040 0001 	orr.w	r0, r0, #1
}
   2600e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
   26010:	f001 0407 	and.w	r4, r1, #7
   26014:	e7f0      	b.n	25ff8 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
   26016:	f004 000b 	and.w	r0, r4, #11
   2601a:	e7f3      	b.n	26004 <get_auth+0x18>
		auth &= ~BT_SMP_AUTH_BONDING;
   2601c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
   26020:	e7f5      	b.n	2600e <get_auth+0x22>
   26022:	bf00      	nop
   26024:	2000cab5 	.word	0x2000cab5
   26028:	20008837 	.word	0x20008837

0002602c <legacy_get_pair_method>:
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   2602c:	2904      	cmp	r1, #4
   2602e:	d821      	bhi.n	26074 <legacy_get_pair_method+0x48>
{
   26030:	b538      	push	{r3, r4, r5, lr}
   26032:	4604      	mov	r4, r0
   26034:	460d      	mov	r5, r1
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   26036:	7ac3      	ldrb	r3, [r0, #11]
   26038:	7c82      	ldrb	r2, [r0, #18]
   2603a:	4013      	ands	r3, r2
   2603c:	f013 0f01 	tst.w	r3, #1
   26040:	d11a      	bne.n	26078 <legacy_get_pair_method+0x4c>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   26042:	7b00      	ldrb	r0, [r0, #12]
   26044:	7ce3      	ldrb	r3, [r4, #19]
   26046:	4318      	orrs	r0, r3
   26048:	f010 0004 	ands.w	r0, r0, #4
   2604c:	d100      	bne.n	26050 <legacy_get_pair_method+0x24>
}
   2604e:	bd38      	pop	{r3, r4, r5, pc}
	method = gen_method_legacy[remote_io][get_io_capa(smp)];
   26050:	4620      	mov	r0, r4
   26052:	f7ff ffa3 	bl	25f9c <get_io_capa>
   26056:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   2605a:	4b08      	ldr	r3, [pc, #32]	; (2607c <legacy_get_pair_method+0x50>)
   2605c:	442b      	add	r3, r5
   2605e:	5c18      	ldrb	r0, [r3, r0]
	if (method == PASSKEY_ROLE) {
   26060:	2804      	cmp	r0, #4
   26062:	d1f4      	bne.n	2604e <legacy_get_pair_method+0x22>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   26064:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   26068:	78db      	ldrb	r3, [r3, #3]
   2606a:	b10b      	cbz	r3, 26070 <legacy_get_pair_method+0x44>
			method = PASSKEY_INPUT;
   2606c:	2001      	movs	r0, #1
   2606e:	e7ee      	b.n	2604e <legacy_get_pair_method+0x22>
			method = PASSKEY_DISPLAY;
   26070:	2002      	movs	r0, #2
   26072:	e7ec      	b.n	2604e <legacy_get_pair_method+0x22>
		return JUST_WORKS;
   26074:	2000      	movs	r0, #0
}
   26076:	4770      	bx	lr
		return LEGACY_OOB;
   26078:	2006      	movs	r0, #6
   2607a:	e7e8      	b.n	2604e <legacy_get_pair_method+0x22>
   2607c:	0004445c 	.word	0x0004445c

00026080 <get_pair_method>:
{
   26080:	b538      	push	{r3, r4, r5, lr}
   26082:	4604      	mov	r4, r0
   26084:	460d      	mov	r5, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26086:	2105      	movs	r1, #5
   26088:	3004      	adds	r0, #4
   2608a:	f015 f82c 	bl	3b0e6 <atomic_test_bit>
   2608e:	b1d8      	cbz	r0, 260c8 <get_pair_method+0x48>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
   26090:	7b20      	ldrb	r0, [r4, #12]
   26092:	7ce3      	ldrb	r3, [r4, #19]
   26094:	ea00 0203 	and.w	r2, r0, r3
   26098:	f012 0f08 	tst.w	r2, #8
   2609c:	d005      	beq.n	260aa <get_pair_method+0x2a>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
   2609e:	7ae2      	ldrb	r2, [r4, #11]
   260a0:	7ca1      	ldrb	r1, [r4, #18]
   260a2:	430a      	orrs	r2, r1
   260a4:	f012 0f01 	tst.w	r2, #1
   260a8:	d113      	bne.n	260d2 <get_pair_method+0x52>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
   260aa:	2d04      	cmp	r5, #4
   260ac:	d813      	bhi.n	260d6 <get_pair_method+0x56>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
   260ae:	4318      	orrs	r0, r3
   260b0:	f010 0004 	ands.w	r0, r0, #4
   260b4:	d010      	beq.n	260d8 <get_pair_method+0x58>
	return gen_method_sc[remote_io][get_io_capa(smp)];
   260b6:	4620      	mov	r0, r4
   260b8:	f7ff ff70 	bl	25f9c <get_io_capa>
   260bc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   260c0:	4b06      	ldr	r3, [pc, #24]	; (260dc <get_pair_method+0x5c>)
   260c2:	442b      	add	r3, r5
   260c4:	5c18      	ldrb	r0, [r3, r0]
   260c6:	e007      	b.n	260d8 <get_pair_method+0x58>
		return legacy_get_pair_method(smp, remote_io);
   260c8:	4629      	mov	r1, r5
   260ca:	4620      	mov	r0, r4
   260cc:	f7ff ffae 	bl	2602c <legacy_get_pair_method>
   260d0:	e002      	b.n	260d8 <get_pair_method+0x58>
			return LE_SC_OOB;
   260d2:	2005      	movs	r0, #5
   260d4:	e000      	b.n	260d8 <get_pair_method+0x58>
		return JUST_WORKS;
   260d6:	2000      	movs	r0, #0
}
   260d8:	bd38      	pop	{r3, r4, r5, pc}
   260da:	bf00      	nop
   260dc:	00044440 	.word	0x00044440

000260e0 <sec_level_reachable>:
{
   260e0:	b538      	push	{r3, r4, r5, lr}
   260e2:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   260e4:	f7ff ff44 	bl	25f70 <latch_auth_cb>
   260e8:	4605      	mov	r5, r0
	switch (smp->chan.chan.conn->required_sec_level) {
   260ea:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   260ee:	7a9b      	ldrb	r3, [r3, #10]
   260f0:	2b03      	cmp	r3, #3
   260f2:	d016      	beq.n	26122 <sec_level_reachable+0x42>
   260f4:	d807      	bhi.n	26106 <sec_level_reachable+0x26>
   260f6:	3b01      	subs	r3, #1
   260f8:	b2db      	uxtb	r3, r3
   260fa:	2b01      	cmp	r3, #1
   260fc:	d801      	bhi.n	26102 <sec_level_reachable+0x22>
   260fe:	2001      	movs	r0, #1
}
   26100:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   26102:	2000      	movs	r0, #0
   26104:	e7fc      	b.n	26100 <sec_level_reachable+0x20>
	switch (smp->chan.chan.conn->required_sec_level) {
   26106:	2b04      	cmp	r3, #4
   26108:	d109      	bne.n	2611e <sec_level_reachable+0x3e>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   2610a:	4620      	mov	r0, r4
   2610c:	f7ff ff46 	bl	25f9c <get_io_capa>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   26110:	2803      	cmp	r0, #3
   26112:	d016      	beq.n	26142 <sec_level_reachable+0x62>
   26114:	4b10      	ldr	r3, [pc, #64]	; (26158 <sec_level_reachable+0x78>)
   26116:	781b      	ldrb	r3, [r3, #0]
   26118:	b9db      	cbnz	r3, 26152 <sec_level_reachable+0x72>
   2611a:	2000      	movs	r0, #0
   2611c:	e7f0      	b.n	26100 <sec_level_reachable+0x20>
		return false;
   2611e:	2000      	movs	r0, #0
   26120:	e7ee      	b.n	26100 <sec_level_reachable+0x20>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   26122:	4620      	mov	r0, r4
   26124:	f7ff ff3a 	bl	25f9c <get_io_capa>
   26128:	2803      	cmp	r0, #3
   2612a:	d001      	beq.n	26130 <sec_level_reachable+0x50>
   2612c:	2001      	movs	r0, #1
   2612e:	e7e7      	b.n	26100 <sec_level_reachable+0x20>
   26130:	b12d      	cbz	r5, 2613e <sec_level_reachable+0x5e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request);
   26132:	68eb      	ldr	r3, [r5, #12]
   26134:	b10b      	cbz	r3, 2613a <sec_level_reachable+0x5a>
		return get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   26136:	2001      	movs	r0, #1
   26138:	e7e2      	b.n	26100 <sec_level_reachable+0x20>
   2613a:	2000      	movs	r0, #0
   2613c:	e7e0      	b.n	26100 <sec_level_reachable+0x20>
   2613e:	2000      	movs	r0, #0
   26140:	e7de      	b.n	26100 <sec_level_reachable+0x20>
		return (get_io_capa(smp) != BT_SMP_IO_NO_INPUT_OUTPUT ||
   26142:	b125      	cbz	r5, 2614e <sec_level_reachable+0x6e>
		       (smp_auth_cb && smp_auth_cb->oob_data_request)) && sc_supported;
   26144:	68eb      	ldr	r3, [r5, #12]
   26146:	2b00      	cmp	r3, #0
   26148:	d1e4      	bne.n	26114 <sec_level_reachable+0x34>
   2614a:	2000      	movs	r0, #0
   2614c:	e7d8      	b.n	26100 <sec_level_reachable+0x20>
   2614e:	2000      	movs	r0, #0
   26150:	e7d6      	b.n	26100 <sec_level_reachable+0x20>
   26152:	2001      	movs	r0, #1
   26154:	e7d4      	b.n	26100 <sec_level_reachable+0x20>
   26156:	bf00      	nop
   26158:	2000cab5 	.word	0x2000cab5

0002615c <legacy_pairing_random>:
{
   2615c:	b570      	push	{r4, r5, r6, lr}
   2615e:	b090      	sub	sp, #64	; 0x40
   26160:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   26162:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   26166:	f100 0547 	add.w	r5, r0, #71	; 0x47
   2616a:	f100 0637 	add.w	r6, r0, #55	; 0x37
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   2616e:	f103 0297 	add.w	r2, r3, #151	; 0x97
   26172:	339e      	adds	r3, #158	; 0x9e
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   26174:	a906      	add	r1, sp, #24
   26176:	9102      	str	r1, [sp, #8]
   26178:	9301      	str	r3, [sp, #4]
   2617a:	9200      	str	r2, [sp, #0]
   2617c:	f100 0310 	add.w	r3, r0, #16
   26180:	f100 0209 	add.w	r2, r0, #9
   26184:	4631      	mov	r1, r6
   26186:	4628      	mov	r0, r5
   26188:	f015 f86a 	bl	3b260 <smp_c1>
	if (err) {
   2618c:	2800      	cmp	r0, #0
   2618e:	d149      	bne.n	26224 <legacy_pairing_random+0xc8>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   26190:	2210      	movs	r2, #16
   26192:	a906      	add	r1, sp, #24
   26194:	f104 0017 	add.w	r0, r4, #23
   26198:	f012 f90a 	bl	383b0 <memcmp>
   2619c:	2800      	cmp	r0, #0
   2619e:	d143      	bne.n	26228 <legacy_pairing_random+0xcc>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
   261a0:	ab06      	add	r3, sp, #24
   261a2:	4632      	mov	r2, r6
   261a4:	f104 0127 	add.w	r1, r4, #39	; 0x27
   261a8:	4628      	mov	r0, r5
   261aa:	f015 f8a3 	bl	3b2f4 <smp_s1>
		if (err) {
   261ae:	b990      	cbnz	r0, 261d6 <legacy_pairing_random+0x7a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
   261b0:	2210      	movs	r2, #16
   261b2:	a906      	add	r1, sp, #24
   261b4:	4628      	mov	r0, r5
   261b6:	f012 f920 	bl	383fa <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   261ba:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   261bc:	e8d3 1fef 	ldaex	r1, [r3]
   261c0:	f041 0102 	orr.w	r1, r1, #2
   261c4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   261c8:	2a00      	cmp	r2, #0
   261ca:	d1f7      	bne.n	261bc <legacy_pairing_random+0x60>
		return smp_send_pairing_random(smp);
   261cc:	4620      	mov	r0, r4
   261ce:	f015 f96e 	bl	3b4ae <smp_send_pairing_random>
}
   261d2:	b010      	add	sp, #64	; 0x40
   261d4:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERR("Calculate STK failed");
   261d6:	4b15      	ldr	r3, [pc, #84]	; (2622c <legacy_pairing_random+0xd0>)
   261d8:	930f      	str	r3, [sp, #60]	; 0x3c
   261da:	2302      	movs	r3, #2
   261dc:	f88d 3014 	strb.w	r3, [sp, #20]
   261e0:	2300      	movs	r3, #0
   261e2:	f88d 3015 	strb.w	r3, [sp, #21]
   261e6:	f88d 3016 	strb.w	r3, [sp, #22]
   261ea:	f88d 3017 	strb.w	r3, [sp, #23]
   261ee:	9a05      	ldr	r2, [sp, #20]
   261f0:	920e      	str	r2, [sp, #56]	; 0x38
   261f2:	4619      	mov	r1, r3
   261f4:	f363 0100 	bfi	r1, r3, #0, #1
   261f8:	f363 0141 	bfi	r1, r3, #1, #1
   261fc:	f363 0182 	bfi	r1, r3, #2, #1
   26200:	f363 01c5 	bfi	r1, r3, #3, #3
   26204:	2201      	movs	r2, #1
   26206:	f362 1188 	bfi	r1, r2, #6, #3
   2620a:	2408      	movs	r4, #8
   2620c:	f364 2152 	bfi	r1, r4, #9, #10
   26210:	f363 41de 	bfi	r1, r3, #19, #12
   26214:	f363 71df 	bfi	r1, r3, #31, #1
   26218:	aa0e      	add	r2, sp, #56	; 0x38
   2621a:	4805      	ldr	r0, [pc, #20]	; (26230 <legacy_pairing_random+0xd4>)
   2621c:	f7f0 fb96 	bl	1694c <z_impl_z_log_msg_static_create>
			return BT_SMP_ERR_UNSPECIFIED;
   26220:	4620      	mov	r0, r4
   26222:	e7d6      	b.n	261d2 <legacy_pairing_random+0x76>
		return BT_SMP_ERR_UNSPECIFIED;
   26224:	2008      	movs	r0, #8
   26226:	e7d4      	b.n	261d2 <legacy_pairing_random+0x76>
		return BT_SMP_ERR_CONFIRM_FAILED;
   26228:	2004      	movs	r0, #4
   2622a:	e7d2      	b.n	261d2 <legacy_pairing_random+0x76>
   2622c:	00043f98 	.word	0x00043f98
   26230:	0003f418 	.word	0x0003f418

00026234 <sc_send_public_key>:
{
   26234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26236:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
   26238:	2240      	movs	r2, #64	; 0x40
   2623a:	210c      	movs	r1, #12
   2623c:	f015 f886 	bl	3b34c <smp_create_pdu>
	if (!req_buf) {
   26240:	b1c0      	cbz	r0, 26274 <sc_send_public_key+0x40>
   26242:	4606      	mov	r6, r0
   26244:	2140      	movs	r1, #64	; 0x40
   26246:	300c      	adds	r0, #12
   26248:	f003 fb4a 	bl	298e0 <net_buf_simple_add>
   2624c:	4605      	mov	r5, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
   2624e:	4f0a      	ldr	r7, [pc, #40]	; (26278 <sc_send_public_key+0x44>)
   26250:	2220      	movs	r2, #32
   26252:	6839      	ldr	r1, [r7, #0]
   26254:	f012 f8d1 	bl	383fa <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
   26258:	6839      	ldr	r1, [r7, #0]
   2625a:	2220      	movs	r2, #32
   2625c:	4411      	add	r1, r2
   2625e:	18a8      	adds	r0, r5, r2
   26260:	f012 f8cb 	bl	383fa <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
   26264:	2300      	movs	r3, #0
   26266:	461a      	mov	r2, r3
   26268:	4631      	mov	r1, r6
   2626a:	4620      	mov	r0, r4
   2626c:	f015 f892 	bl	3b394 <smp_send>
	return 0;
   26270:	2000      	movs	r0, #0
}
   26272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26274:	2008      	movs	r0, #8
   26276:	e7fc      	b.n	26272 <sc_send_public_key+0x3e>
   26278:	2000c29c 	.word	0x2000c29c

0002627c <smp_send_pairing_confirm>:
{
   2627c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2627e:	b085      	sub	sp, #20
   26280:	af02      	add	r7, sp, #8
   26282:	4605      	mov	r5, r0
	switch (smp->method) {
   26284:	7a04      	ldrb	r4, [r0, #8]
   26286:	4620      	mov	r0, r4
   26288:	2c02      	cmp	r4, #2
   2628a:	d83b      	bhi.n	26304 <smp_send_pairing_confirm+0x88>
   2628c:	b263      	sxtb	r3, r4
   2628e:	2b00      	cmp	r3, #0
   26290:	d165      	bne.n	2635e <smp_send_pairing_confirm+0xe2>
   26292:	2c00      	cmp	r4, #0
   26294:	d039      	beq.n	2630a <smp_send_pairing_confirm+0x8e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26296:	466d      	mov	r5, sp
   26298:	b088      	sub	sp, #32
   2629a:	ab02      	add	r3, sp, #8
   2629c:	f113 0210 	adds.w	r2, r3, #16
   262a0:	d067      	beq.n	26372 <smp_send_pairing_confirm+0xf6>
   262a2:	210c      	movs	r1, #12
   262a4:	b13a      	cbz	r2, 262b6 <smp_send_pairing_confirm+0x3a>
   262a6:	460c      	mov	r4, r1
   262a8:	2904      	cmp	r1, #4
   262aa:	dd01      	ble.n	262b0 <smp_send_pairing_confirm+0x34>
   262ac:	4e37      	ldr	r6, [pc, #220]	; (2638c <smp_send_pairing_confirm+0x110>)
   262ae:	615e      	str	r6, [r3, #20]
   262b0:	2c08      	cmp	r4, #8
   262b2:	dd00      	ble.n	262b6 <smp_send_pairing_confirm+0x3a>
   262b4:	6198      	str	r0, [r3, #24]
   262b6:	290b      	cmp	r1, #11
   262b8:	dd5e      	ble.n	26378 <smp_send_pairing_confirm+0xfc>
   262ba:	240c      	movs	r4, #12
   262bc:	b13a      	cbz	r2, 262ce <smp_send_pairing_confirm+0x52>
   262be:	2103      	movs	r1, #3
   262c0:	7139      	strb	r1, [r7, #4]
   262c2:	2100      	movs	r1, #0
   262c4:	7179      	strb	r1, [r7, #5]
   262c6:	71b9      	strb	r1, [r7, #6]
   262c8:	71f9      	strb	r1, [r7, #7]
   262ca:	6878      	ldr	r0, [r7, #4]
   262cc:	6118      	str	r0, [r3, #16]
   262ce:	2100      	movs	r1, #0
   262d0:	f36f 0100 	bfc	r1, #0, #1
   262d4:	f36f 0141 	bfc	r1, #1, #1
   262d8:	f36f 0182 	bfc	r1, #2, #1
   262dc:	f36f 01c5 	bfc	r1, #3, #3
   262e0:	2301      	movs	r3, #1
   262e2:	f363 1188 	bfi	r1, r3, #6, #3
   262e6:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   262ea:	f363 2152 	bfi	r1, r3, #9, #10
   262ee:	f36f 41de 	bfc	r1, #19, #12
   262f2:	f36f 71df 	bfc	r1, #31, #1
   262f6:	2300      	movs	r3, #0
   262f8:	4825      	ldr	r0, [pc, #148]	; (26390 <smp_send_pairing_confirm+0x114>)
   262fa:	f7f0 fb27 	bl	1694c <z_impl_z_log_msg_static_create>
   262fe:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   26300:	2008      	movs	r0, #8
   26302:	e029      	b.n	26358 <smp_send_pairing_confirm+0xdc>
	switch (smp->method) {
   26304:	2c03      	cmp	r4, #3
   26306:	d1c6      	bne.n	26296 <smp_send_pairing_confirm+0x1a>
   26308:	2400      	movs	r4, #0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2630a:	2210      	movs	r2, #16
   2630c:	2103      	movs	r1, #3
   2630e:	4628      	mov	r0, r5
   26310:	f015 f81c 	bl	3b34c <smp_create_pdu>
	if (!buf) {
   26314:	4606      	mov	r6, r0
   26316:	b3b8      	cbz	r0, 26388 <smp_send_pairing_confirm+0x10c>
   26318:	2110      	movs	r1, #16
   2631a:	300c      	adds	r0, #12
   2631c:	f003 fae0 	bl	298e0 <net_buf_simple_add>
   26320:	4603      	mov	r3, r0
	if (bt_crypto_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
   26322:	4a1c      	ldr	r2, [pc, #112]	; (26394 <smp_send_pairing_confirm+0x118>)
   26324:	6810      	ldr	r0, [r2, #0]
   26326:	9300      	str	r3, [sp, #0]
   26328:	4623      	mov	r3, r4
   2632a:	f105 0227 	add.w	r2, r5, #39	; 0x27
   2632e:	f105 0157 	add.w	r1, r5, #87	; 0x57
   26332:	f015 fc61 	bl	3bbf8 <bt_crypto_f4>
   26336:	bb10      	cbnz	r0, 2637e <smp_send_pairing_confirm+0x102>
	smp_send(smp, buf, NULL, NULL);
   26338:	2300      	movs	r3, #0
   2633a:	461a      	mov	r2, r3
   2633c:	4631      	mov	r1, r6
   2633e:	4628      	mov	r0, r5
   26340:	f015 f828 	bl	3b394 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26344:	1d28      	adds	r0, r5, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26346:	e8d0 3fef 	ldaex	r3, [r0]
   2634a:	f023 0301 	bic.w	r3, r3, #1
   2634e:	e8c0 3fe2 	stlex	r2, r3, [r0]
   26352:	2a00      	cmp	r2, #0
   26354:	d1f7      	bne.n	26346 <smp_send_pairing_confirm+0xca>
	return 0;
   26356:	2000      	movs	r0, #0
}
   26358:	370c      	adds	r7, #12
   2635a:	46bd      	mov	sp, r7
   2635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   2635e:	f8d5 40d8 	ldr.w	r4, [r5, #216]	; 0xd8
   26362:	f895 30dc 	ldrb.w	r3, [r5, #220]	; 0xdc
   26366:	40dc      	lsrs	r4, r3
   26368:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
   2636c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
		break;
   26370:	e7cb      	b.n	2630a <smp_send_pairing_confirm+0x8e>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   26376:	e795      	b.n	262a4 <smp_send_pairing_confirm+0x28>
   26378:	f06f 041b 	mvn.w	r4, #27
   2637c:	e79e      	b.n	262bc <smp_send_pairing_confirm+0x40>
		net_buf_unref(buf);
   2637e:	4630      	mov	r0, r6
   26380:	f003 f990 	bl	296a4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   26384:	2008      	movs	r0, #8
   26386:	e7e7      	b.n	26358 <smp_send_pairing_confirm+0xdc>
		return BT_SMP_ERR_UNSPECIFIED;
   26388:	2008      	movs	r0, #8
   2638a:	e7e5      	b.n	26358 <smp_send_pairing_confirm+0xdc>
   2638c:	00043fb0 	.word	0x00043fb0
   26390:	0003f418 	.word	0x0003f418
   26394:	2000c29c 	.word	0x2000c29c

00026398 <smp_pairing_confirm>:
{
   26398:	b5f0      	push	{r4, r5, r6, r7, lr}
   2639a:	b083      	sub	sp, #12
   2639c:	af00      	add	r7, sp, #0
   2639e:	4604      	mov	r4, r0
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   263a0:	68c9      	ldr	r1, [r1, #12]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   263a2:	1d05      	adds	r5, r0, #4
   263a4:	e8d5 3fef 	ldaex	r3, [r5]
   263a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   263ac:	e8c5 3fe2 	stlex	r2, r3, [r5]
   263b0:	2a00      	cmp	r2, #0
   263b2:	d1f7      	bne.n	263a4 <smp_pairing_confirm+0xc>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   263b4:	2210      	movs	r2, #16
   263b6:	f104 0017 	add.w	r0, r4, #23
   263ba:	f012 f81e 	bl	383fa <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   263be:	2105      	movs	r1, #5
   263c0:	4628      	mov	r0, r5
   263c2:	f014 fe90 	bl	3b0e6 <atomic_test_bit>
   263c6:	b190      	cbz	r0, 263ee <smp_pairing_confirm+0x56>
	switch (smp->method) {
   263c8:	7a23      	ldrb	r3, [r4, #8]
   263ca:	2b01      	cmp	r3, #1
   263cc:	d013      	beq.n	263f6 <smp_pairing_confirm+0x5e>
   263ce:	2b02      	cmp	r3, #2
   263d0:	d12c      	bne.n	2642c <smp_pairing_confirm+0x94>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   263d2:	e8d4 3fef 	ldaex	r3, [r4]
   263d6:	f043 0310 	orr.w	r3, r3, #16
   263da:	e8c4 3fe2 	stlex	r2, r3, [r4]
   263de:	2a00      	cmp	r2, #0
   263e0:	d1f7      	bne.n	263d2 <smp_pairing_confirm+0x3a>
		return smp_send_pairing_confirm(smp);
   263e2:	4620      	mov	r0, r4
   263e4:	f7ff ff4a 	bl	2627c <smp_send_pairing_confirm>
}
   263e8:	370c      	adds	r7, #12
   263ea:	46bd      	mov	sp, r7
   263ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return legacy_pairing_confirm(smp);
   263ee:	4620      	mov	r0, r4
   263f0:	f015 f824 	bl	3b43c <legacy_pairing_confirm>
   263f4:	e7f8      	b.n	263e8 <smp_pairing_confirm+0x50>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   263f6:	210a      	movs	r1, #10
   263f8:	4628      	mov	r0, r5
   263fa:	f014 fe74 	bl	3b0e6 <atomic_test_bit>
   263fe:	b958      	cbnz	r0, 26418 <smp_pairing_confirm+0x80>
   26400:	e8d4 3fef 	ldaex	r3, [r4]
   26404:	f043 0310 	orr.w	r3, r3, #16
   26408:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2640c:	2a00      	cmp	r2, #0
   2640e:	d1f7      	bne.n	26400 <smp_pairing_confirm+0x68>
		return smp_send_pairing_confirm(smp);
   26410:	4620      	mov	r0, r4
   26412:	f7ff ff33 	bl	2627c <smp_send_pairing_confirm>
   26416:	e7e7      	b.n	263e8 <smp_pairing_confirm+0x50>
   26418:	e8d5 3fef 	ldaex	r3, [r5]
   2641c:	f043 0301 	orr.w	r3, r3, #1
   26420:	e8c5 3fe2 	stlex	r2, r3, [r5]
   26424:	2a00      	cmp	r2, #0
   26426:	d1f7      	bne.n	26418 <smp_pairing_confirm+0x80>
			return 0;
   26428:	2000      	movs	r0, #0
   2642a:	e7dd      	b.n	263e8 <smp_pairing_confirm+0x50>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   2642c:	466c      	mov	r4, sp
   2642e:	b088      	sub	sp, #32
   26430:	4669      	mov	r1, sp
   26432:	f111 0210 	adds.w	r2, r1, #16
   26436:	d030      	beq.n	2649a <smp_pairing_confirm+0x102>
   26438:	200c      	movs	r0, #12
   2643a:	b13a      	cbz	r2, 2644c <smp_pairing_confirm+0xb4>
   2643c:	4605      	mov	r5, r0
   2643e:	2804      	cmp	r0, #4
   26440:	dd01      	ble.n	26446 <smp_pairing_confirm+0xae>
   26442:	4e19      	ldr	r6, [pc, #100]	; (264a8 <smp_pairing_confirm+0x110>)
   26444:	614e      	str	r6, [r1, #20]
   26446:	2d08      	cmp	r5, #8
   26448:	dd00      	ble.n	2644c <smp_pairing_confirm+0xb4>
   2644a:	618b      	str	r3, [r1, #24]
   2644c:	280b      	cmp	r0, #11
   2644e:	dd27      	ble.n	264a0 <smp_pairing_confirm+0x108>
   26450:	230c      	movs	r3, #12
   26452:	b13a      	cbz	r2, 26464 <smp_pairing_confirm+0xcc>
   26454:	2003      	movs	r0, #3
   26456:	7138      	strb	r0, [r7, #4]
   26458:	2000      	movs	r0, #0
   2645a:	7178      	strb	r0, [r7, #5]
   2645c:	71b8      	strb	r0, [r7, #6]
   2645e:	71f8      	strb	r0, [r7, #7]
   26460:	6878      	ldr	r0, [r7, #4]
   26462:	6108      	str	r0, [r1, #16]
   26464:	2100      	movs	r1, #0
   26466:	f36f 0100 	bfc	r1, #0, #1
   2646a:	f36f 0141 	bfc	r1, #1, #1
   2646e:	f36f 0182 	bfc	r1, #2, #1
   26472:	f36f 01c5 	bfc	r1, #3, #3
   26476:	2001      	movs	r0, #1
   26478:	f360 1188 	bfi	r1, r0, #6, #3
   2647c:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   26480:	f363 2152 	bfi	r1, r3, #9, #10
   26484:	f36f 41de 	bfc	r1, #19, #12
   26488:	f36f 71df 	bfc	r1, #31, #1
   2648c:	2300      	movs	r3, #0
   2648e:	4807      	ldr	r0, [pc, #28]	; (264ac <smp_pairing_confirm+0x114>)
   26490:	f7f0 fa5c 	bl	1694c <z_impl_z_log_msg_static_create>
   26494:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   26496:	2008      	movs	r0, #8
   26498:	e7a6      	b.n	263e8 <smp_pairing_confirm+0x50>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   2649a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2649e:	e7cc      	b.n	2643a <smp_pairing_confirm+0xa2>
   264a0:	f06f 031b 	mvn.w	r3, #27
   264a4:	e7d5      	b.n	26452 <smp_pairing_confirm+0xba>
   264a6:	bf00      	nop
   264a8:	00043fb0 	.word	0x00043fb0
   264ac:	0003f418 	.word	0x0003f418

000264b0 <sc_smp_check_confirm>:
{
   264b0:	b5b0      	push	{r4, r5, r7, lr}
   264b2:	b08e      	sub	sp, #56	; 0x38
   264b4:	af02      	add	r7, sp, #8
   264b6:	4604      	mov	r4, r0
	switch (smp->method) {
   264b8:	7a03      	ldrb	r3, [r0, #8]
   264ba:	2b05      	cmp	r3, #5
   264bc:	d80e      	bhi.n	264dc <sc_smp_check_confirm+0x2c>
   264be:	e8df f003 	tbb	[pc, r3]
   264c2:	034e      	.short	0x034e
   264c4:	8a0d4e03 	.word	0x8a0d4e03
		r = (smp->passkey >> smp->passkey_round) & 0x01;
   264c8:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
   264cc:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   264d0:	40d3      	lsrs	r3, r2
   264d2:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
   264d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		break;
   264da:	e041      	b.n	26560 <sc_smp_check_confirm+0xb0>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   264dc:	466c      	mov	r4, sp
   264de:	b088      	sub	sp, #32
   264e0:	a902      	add	r1, sp, #8
   264e2:	f111 0210 	adds.w	r2, r1, #16
   264e6:	d00e      	beq.n	26506 <sc_smp_check_confirm+0x56>
   264e8:	200c      	movs	r0, #12
   264ea:	b142      	cbz	r2, 264fe <sc_smp_check_confirm+0x4e>
   264ec:	4684      	mov	ip, r0
   264ee:	2804      	cmp	r0, #4
   264f0:	dd01      	ble.n	264f6 <sc_smp_check_confirm+0x46>
   264f2:	4d3b      	ldr	r5, [pc, #236]	; (265e0 <sc_smp_check_confirm+0x130>)
   264f4:	614d      	str	r5, [r1, #20]
   264f6:	f1bc 0f08 	cmp.w	ip, #8
   264fa:	dd07      	ble.n	2650c <sc_smp_check_confirm+0x5c>
   264fc:	618b      	str	r3, [r1, #24]
   264fe:	280b      	cmp	r0, #11
   26500:	dd2a      	ble.n	26558 <sc_smp_check_confirm+0xa8>
   26502:	230c      	movs	r3, #12
   26504:	e004      	b.n	26510 <sc_smp_check_confirm+0x60>
   26506:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2650a:	e7ee      	b.n	264ea <sc_smp_check_confirm+0x3a>
   2650c:	f06f 031b 	mvn.w	r3, #27
   26510:	b13a      	cbz	r2, 26522 <sc_smp_check_confirm+0x72>
   26512:	2003      	movs	r0, #3
   26514:	7138      	strb	r0, [r7, #4]
   26516:	2000      	movs	r0, #0
   26518:	7178      	strb	r0, [r7, #5]
   2651a:	71b8      	strb	r0, [r7, #6]
   2651c:	71f8      	strb	r0, [r7, #7]
   2651e:	6878      	ldr	r0, [r7, #4]
   26520:	6108      	str	r0, [r1, #16]
   26522:	2100      	movs	r1, #0
   26524:	f36f 0100 	bfc	r1, #0, #1
   26528:	f36f 0141 	bfc	r1, #1, #1
   2652c:	f36f 0182 	bfc	r1, #2, #1
   26530:	f36f 01c5 	bfc	r1, #3, #3
   26534:	2001      	movs	r0, #1
   26536:	f360 1188 	bfi	r1, r0, #6, #3
   2653a:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   2653e:	f363 2152 	bfi	r1, r3, #9, #10
   26542:	f36f 41de 	bfc	r1, #19, #12
   26546:	f36f 71df 	bfc	r1, #31, #1
   2654a:	2300      	movs	r3, #0
   2654c:	4825      	ldr	r0, [pc, #148]	; (265e4 <sc_smp_check_confirm+0x134>)
   2654e:	f7f0 f9fd 	bl	1694c <z_impl_z_log_msg_static_create>
   26552:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   26554:	2008      	movs	r0, #8
   26556:	e017      	b.n	26588 <sc_smp_check_confirm+0xd8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26558:	f06f 031b 	mvn.w	r3, #27
   2655c:	e7d8      	b.n	26510 <sc_smp_check_confirm+0x60>
	switch (smp->method) {
   2655e:	2300      	movs	r3, #0
	if (bt_crypto_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
   26560:	4a21      	ldr	r2, [pc, #132]	; (265e8 <sc_smp_check_confirm+0x138>)
   26562:	6811      	ldr	r1, [r2, #0]
   26564:	f107 0208 	add.w	r2, r7, #8
   26568:	9200      	str	r2, [sp, #0]
   2656a:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2656e:	f104 0057 	add.w	r0, r4, #87	; 0x57
   26572:	f015 fb41 	bl	3bbf8 <bt_crypto_f4>
   26576:	b950      	cbnz	r0, 2658e <sc_smp_check_confirm+0xde>
	if (memcmp(smp->pcnf, cfm, 16)) {
   26578:	2210      	movs	r2, #16
   2657a:	f107 0108 	add.w	r1, r7, #8
   2657e:	f104 0017 	add.w	r0, r4, #23
   26582:	f011 ff15 	bl	383b0 <memcmp>
   26586:	bb40      	cbnz	r0, 265da <sc_smp_check_confirm+0x12a>
}
   26588:	3730      	adds	r7, #48	; 0x30
   2658a:	46bd      	mov	sp, r7
   2658c:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("Calculate confirm failed");
   2658e:	4b17      	ldr	r3, [pc, #92]	; (265ec <sc_smp_check_confirm+0x13c>)
   26590:	62fb      	str	r3, [r7, #44]	; 0x2c
   26592:	2302      	movs	r3, #2
   26594:	713b      	strb	r3, [r7, #4]
   26596:	2300      	movs	r3, #0
   26598:	717b      	strb	r3, [r7, #5]
   2659a:	71bb      	strb	r3, [r7, #6]
   2659c:	71fb      	strb	r3, [r7, #7]
   2659e:	687a      	ldr	r2, [r7, #4]
   265a0:	62ba      	str	r2, [r7, #40]	; 0x28
   265a2:	4619      	mov	r1, r3
   265a4:	f363 0100 	bfi	r1, r3, #0, #1
   265a8:	f363 0141 	bfi	r1, r3, #1, #1
   265ac:	f363 0182 	bfi	r1, r3, #2, #1
   265b0:	f363 01c5 	bfi	r1, r3, #3, #3
   265b4:	2201      	movs	r2, #1
   265b6:	f362 1188 	bfi	r1, r2, #6, #3
   265ba:	2408      	movs	r4, #8
   265bc:	f364 2152 	bfi	r1, r4, #9, #10
   265c0:	f363 41de 	bfi	r1, r3, #19, #12
   265c4:	f363 71df 	bfi	r1, r3, #31, #1
   265c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
   265cc:	4805      	ldr	r0, [pc, #20]	; (265e4 <sc_smp_check_confirm+0x134>)
   265ce:	f7f0 f9bd 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   265d2:	4620      	mov	r0, r4
   265d4:	e7d8      	b.n	26588 <sc_smp_check_confirm+0xd8>
	switch (smp->method) {
   265d6:	2000      	movs	r0, #0
   265d8:	e7d6      	b.n	26588 <sc_smp_check_confirm+0xd8>
		return BT_SMP_ERR_CONFIRM_FAILED;
   265da:	2004      	movs	r0, #4
   265dc:	e7d4      	b.n	26588 <sc_smp_check_confirm+0xd8>
   265de:	bf00      	nop
   265e0:	00043fb0 	.word	0x00043fb0
   265e4:	0003f418 	.word	0x0003f418
   265e8:	2000c29c 	.word	0x2000c29c
   265ec:	00043fcc 	.word	0x00043fcc

000265f0 <compute_and_check_and_send_periph_dhcheck>:
{
   265f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265f4:	b0a4      	sub	sp, #144	; 0x90
   265f6:	af04      	add	r7, sp, #16
   265f8:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
   265fa:	2210      	movs	r2, #16
   265fc:	2100      	movs	r1, #0
   265fe:	f107 0008 	add.w	r0, r7, #8
   26602:	f011 ff29 	bl	38458 <memset>
	switch (smp->method) {
   26606:	7a23      	ldrb	r3, [r4, #8]
   26608:	2b05      	cmp	r3, #5
   2660a:	d87d      	bhi.n	26708 <compute_and_check_and_send_periph_dhcheck+0x118>
   2660c:	e8df f003 	tbb	[pc, r3]
   26610:	0a03030a 	.word	0x0a03030a
   26614:	727c      	.short	0x727c
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
   26616:	2204      	movs	r2, #4
   26618:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
   2661c:	f107 0008 	add.w	r0, r7, #8
   26620:	f011 feeb 	bl	383fa <memcpy>
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   26624:	f104 0637 	add.w	r6, r4, #55	; 0x37
   26628:	f104 0827 	add.w	r8, r4, #39	; 0x27
   2662c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
			 &smp->chan.chan.conn->le.resp_addr, smp->mackey, smp->tk)) {
   26630:	f103 029e 	add.w	r2, r3, #158	; 0x9e
   26634:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
   26638:	f104 0147 	add.w	r1, r4, #71	; 0x47
	if (bt_crypto_f5(smp->dhkey, smp->rrnd, smp->prnd, &smp->chan.chan.conn->le.init_addr,
   2663c:	9102      	str	r1, [sp, #8]
   2663e:	9501      	str	r5, [sp, #4]
   26640:	9200      	str	r2, [sp, #0]
   26642:	3397      	adds	r3, #151	; 0x97
   26644:	4642      	mov	r2, r8
   26646:	4631      	mov	r1, r6
   26648:	f104 0097 	add.w	r0, r4, #151	; 0x97
   2664c:	f002 fd14 	bl	29078 <bt_crypto_f5>
   26650:	2800      	cmp	r0, #0
   26652:	f040 8099 	bne.w	26788 <compute_and_check_and_send_periph_dhcheck+0x198>
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   26656:	f104 0211 	add.w	r2, r4, #17
			 &smp->chan.chan.conn->le.resp_addr, &smp->chan.chan.conn->le.init_addr,
   2665a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2665e:	f103 019e 	add.w	r1, r3, #158	; 0x9e
   26662:	3397      	adds	r3, #151	; 0x97
	if (bt_crypto_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
   26664:	f107 0018 	add.w	r0, r7, #24
   26668:	9003      	str	r0, [sp, #12]
   2666a:	9302      	str	r3, [sp, #8]
   2666c:	9101      	str	r1, [sp, #4]
   2666e:	9200      	str	r2, [sp, #0]
   26670:	f107 0308 	add.w	r3, r7, #8
   26674:	4632      	mov	r2, r6
   26676:	4641      	mov	r1, r8
   26678:	4628      	mov	r0, r5
   2667a:	f015 fae4 	bl	3bc46 <bt_crypto_f6>
   2667e:	2800      	cmp	r0, #0
   26680:	f040 80a6 	bne.w	267d0 <compute_and_check_and_send_periph_dhcheck+0x1e0>
	if (smp->method == LE_SC_OOB) {
   26684:	7a23      	ldrb	r3, [r4, #8]
   26686:	2b05      	cmp	r3, #5
   26688:	f000 80c6 	beq.w	26818 <compute_and_check_and_send_periph_dhcheck+0x228>
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2668c:	f104 020a 	add.w	r2, r4, #10
			 &smp->chan.chan.conn->le.init_addr, &smp->chan.chan.conn->le.resp_addr,
   26690:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   26694:	f103 0197 	add.w	r1, r3, #151	; 0x97
   26698:	339e      	adds	r3, #158	; 0x9e
	if (bt_crypto_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
   2669a:	f107 0028 	add.w	r0, r7, #40	; 0x28
   2669e:	9003      	str	r0, [sp, #12]
   266a0:	9302      	str	r3, [sp, #8]
   266a2:	9101      	str	r1, [sp, #4]
   266a4:	9200      	str	r2, [sp, #0]
   266a6:	f107 0308 	add.w	r3, r7, #8
   266aa:	4642      	mov	r2, r8
   266ac:	4631      	mov	r1, r6
   266ae:	4628      	mov	r0, r5
   266b0:	f015 fac9 	bl	3bc46 <bt_crypto_f6>
   266b4:	2800      	cmp	r0, #0
   266b6:	f040 80bf 	bne.w	26838 <compute_and_check_and_send_periph_dhcheck+0x248>
	if (memcmp(smp->e, re, 16)) {
   266ba:	2210      	movs	r2, #16
   266bc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   266c0:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   266c4:	f011 fe74 	bl	383b0 <memcmp>
   266c8:	2800      	cmp	r0, #0
   266ca:	f040 80d9 	bne.w	26880 <compute_and_check_and_send_periph_dhcheck+0x290>
	err = sc_smp_send_dhkey_check(smp, e);
   266ce:	f107 0118 	add.w	r1, r7, #24
   266d2:	4620      	mov	r0, r4
   266d4:	f014 fed0 	bl	3b478 <sc_smp_send_dhkey_check>
	if (err) {
   266d8:	b940      	cbnz	r0, 266ec <compute_and_check_and_send_periph_dhcheck+0xfc>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   266da:	3404      	adds	r4, #4
   266dc:	e8d4 3fef 	ldaex	r3, [r4]
   266e0:	f043 0302 	orr.w	r3, r3, #2
   266e4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   266e8:	2a00      	cmp	r2, #0
   266ea:	d1f7      	bne.n	266dc <compute_and_check_and_send_periph_dhcheck+0xec>
}
   266ec:	3780      	adds	r7, #128	; 0x80
   266ee:	46bd      	mov	sp, r7
   266f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (smp->oobd_remote) {
   266f4:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
   266f8:	2900      	cmp	r1, #0
   266fa:	d093      	beq.n	26624 <compute_and_check_and_send_periph_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
   266fc:	2210      	movs	r2, #16
   266fe:	f107 0008 	add.w	r0, r7, #8
   26702:	f011 fe7a 	bl	383fa <memcpy>
   26706:	e78d      	b.n	26624 <compute_and_check_and_send_periph_dhcheck+0x34>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26708:	466c      	mov	r4, sp
   2670a:	b088      	sub	sp, #32
   2670c:	a904      	add	r1, sp, #16
   2670e:	f111 0210 	adds.w	r2, r1, #16
   26712:	d00d      	beq.n	26730 <compute_and_check_and_send_periph_dhcheck+0x140>
   26714:	200c      	movs	r0, #12
   26716:	b13a      	cbz	r2, 26728 <compute_and_check_and_send_periph_dhcheck+0x138>
   26718:	4605      	mov	r5, r0
   2671a:	2804      	cmp	r0, #4
   2671c:	dd01      	ble.n	26722 <compute_and_check_and_send_periph_dhcheck+0x132>
   2671e:	4e59      	ldr	r6, [pc, #356]	; (26884 <compute_and_check_and_send_periph_dhcheck+0x294>)
   26720:	614e      	str	r6, [r1, #20]
   26722:	2d08      	cmp	r5, #8
   26724:	dd07      	ble.n	26736 <compute_and_check_and_send_periph_dhcheck+0x146>
   26726:	618b      	str	r3, [r1, #24]
   26728:	280b      	cmp	r0, #11
   2672a:	dd2a      	ble.n	26782 <compute_and_check_and_send_periph_dhcheck+0x192>
   2672c:	230c      	movs	r3, #12
   2672e:	e004      	b.n	2673a <compute_and_check_and_send_periph_dhcheck+0x14a>
   26730:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   26734:	e7ef      	b.n	26716 <compute_and_check_and_send_periph_dhcheck+0x126>
   26736:	f06f 031b 	mvn.w	r3, #27
   2673a:	b13a      	cbz	r2, 2674c <compute_and_check_and_send_periph_dhcheck+0x15c>
   2673c:	2003      	movs	r0, #3
   2673e:	7138      	strb	r0, [r7, #4]
   26740:	2000      	movs	r0, #0
   26742:	7178      	strb	r0, [r7, #5]
   26744:	71b8      	strb	r0, [r7, #6]
   26746:	71f8      	strb	r0, [r7, #7]
   26748:	6878      	ldr	r0, [r7, #4]
   2674a:	6108      	str	r0, [r1, #16]
   2674c:	2100      	movs	r1, #0
   2674e:	f36f 0100 	bfc	r1, #0, #1
   26752:	f36f 0141 	bfc	r1, #1, #1
   26756:	f36f 0182 	bfc	r1, #2, #1
   2675a:	f36f 01c5 	bfc	r1, #3, #3
   2675e:	2001      	movs	r0, #1
   26760:	f360 1188 	bfi	r1, r0, #6, #3
   26764:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   26768:	f363 2152 	bfi	r1, r3, #9, #10
   2676c:	f36f 41de 	bfc	r1, #19, #12
   26770:	f36f 71df 	bfc	r1, #31, #1
   26774:	2300      	movs	r3, #0
   26776:	4844      	ldr	r0, [pc, #272]	; (26888 <compute_and_check_and_send_periph_dhcheck+0x298>)
   26778:	f7f0 f8e8 	bl	1694c <z_impl_z_log_msg_static_create>
   2677c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   2677e:	2008      	movs	r0, #8
   26780:	e7b4      	b.n	266ec <compute_and_check_and_send_periph_dhcheck+0xfc>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26782:	f06f 031b 	mvn.w	r3, #27
   26786:	e7d8      	b.n	2673a <compute_and_check_and_send_periph_dhcheck+0x14a>
		LOG_ERR("Calculate LTK failed");
   26788:	4b40      	ldr	r3, [pc, #256]	; (2688c <compute_and_check_and_send_periph_dhcheck+0x29c>)
   2678a:	67fb      	str	r3, [r7, #124]	; 0x7c
   2678c:	2302      	movs	r3, #2
   2678e:	713b      	strb	r3, [r7, #4]
   26790:	2300      	movs	r3, #0
   26792:	717b      	strb	r3, [r7, #5]
   26794:	71bb      	strb	r3, [r7, #6]
   26796:	71fb      	strb	r3, [r7, #7]
   26798:	687a      	ldr	r2, [r7, #4]
   2679a:	67ba      	str	r2, [r7, #120]	; 0x78
   2679c:	4619      	mov	r1, r3
   2679e:	f363 0100 	bfi	r1, r3, #0, #1
   267a2:	f363 0141 	bfi	r1, r3, #1, #1
   267a6:	f363 0182 	bfi	r1, r3, #2, #1
   267aa:	f363 01c5 	bfi	r1, r3, #3, #3
   267ae:	2201      	movs	r2, #1
   267b0:	f362 1188 	bfi	r1, r2, #6, #3
   267b4:	2408      	movs	r4, #8
   267b6:	f364 2152 	bfi	r1, r4, #9, #10
   267ba:	f363 41de 	bfi	r1, r3, #19, #12
   267be:	f363 71df 	bfi	r1, r3, #31, #1
   267c2:	f107 0278 	add.w	r2, r7, #120	; 0x78
   267c6:	4830      	ldr	r0, [pc, #192]	; (26888 <compute_and_check_and_send_periph_dhcheck+0x298>)
   267c8:	f7f0 f8c0 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   267cc:	4620      	mov	r0, r4
   267ce:	e78d      	b.n	266ec <compute_and_check_and_send_periph_dhcheck+0xfc>
		LOG_ERR("Calculate local DHKey check failed");
   267d0:	4b2f      	ldr	r3, [pc, #188]	; (26890 <compute_and_check_and_send_periph_dhcheck+0x2a0>)
   267d2:	667b      	str	r3, [r7, #100]	; 0x64
   267d4:	2302      	movs	r3, #2
   267d6:	713b      	strb	r3, [r7, #4]
   267d8:	2300      	movs	r3, #0
   267da:	717b      	strb	r3, [r7, #5]
   267dc:	71bb      	strb	r3, [r7, #6]
   267de:	71fb      	strb	r3, [r7, #7]
   267e0:	687a      	ldr	r2, [r7, #4]
   267e2:	663a      	str	r2, [r7, #96]	; 0x60
   267e4:	4619      	mov	r1, r3
   267e6:	f363 0100 	bfi	r1, r3, #0, #1
   267ea:	f363 0141 	bfi	r1, r3, #1, #1
   267ee:	f363 0182 	bfi	r1, r3, #2, #1
   267f2:	f363 01c5 	bfi	r1, r3, #3, #3
   267f6:	2201      	movs	r2, #1
   267f8:	f362 1188 	bfi	r1, r2, #6, #3
   267fc:	2408      	movs	r4, #8
   267fe:	f364 2152 	bfi	r1, r4, #9, #10
   26802:	f363 41de 	bfi	r1, r3, #19, #12
   26806:	f363 71df 	bfi	r1, r3, #31, #1
   2680a:	f107 0260 	add.w	r2, r7, #96	; 0x60
   2680e:	481e      	ldr	r0, [pc, #120]	; (26888 <compute_and_check_and_send_periph_dhcheck+0x298>)
   26810:	f7f0 f89c 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   26814:	4620      	mov	r0, r4
   26816:	e769      	b.n	266ec <compute_and_check_and_send_periph_dhcheck+0xfc>
		if (smp->oobd_local) {
   26818:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
   2681c:	b129      	cbz	r1, 2682a <compute_and_check_and_send_periph_dhcheck+0x23a>
			memcpy(r, smp->oobd_local->r, sizeof(r));
   2681e:	2210      	movs	r2, #16
   26820:	f107 0008 	add.w	r0, r7, #8
   26824:	f011 fde9 	bl	383fa <memcpy>
   26828:	e730      	b.n	2668c <compute_and_check_and_send_periph_dhcheck+0x9c>
			memset(r, 0, sizeof(r));
   2682a:	2210      	movs	r2, #16
   2682c:	2100      	movs	r1, #0
   2682e:	f107 0008 	add.w	r0, r7, #8
   26832:	f011 fe11 	bl	38458 <memset>
   26836:	e729      	b.n	2668c <compute_and_check_and_send_periph_dhcheck+0x9c>
		LOG_ERR("Calculate remote DHKey check failed");
   26838:	4b16      	ldr	r3, [pc, #88]	; (26894 <compute_and_check_and_send_periph_dhcheck+0x2a4>)
   2683a:	64fb      	str	r3, [r7, #76]	; 0x4c
   2683c:	2302      	movs	r3, #2
   2683e:	713b      	strb	r3, [r7, #4]
   26840:	2300      	movs	r3, #0
   26842:	717b      	strb	r3, [r7, #5]
   26844:	71bb      	strb	r3, [r7, #6]
   26846:	71fb      	strb	r3, [r7, #7]
   26848:	687a      	ldr	r2, [r7, #4]
   2684a:	64ba      	str	r2, [r7, #72]	; 0x48
   2684c:	4619      	mov	r1, r3
   2684e:	f363 0100 	bfi	r1, r3, #0, #1
   26852:	f363 0141 	bfi	r1, r3, #1, #1
   26856:	f363 0182 	bfi	r1, r3, #2, #1
   2685a:	f363 01c5 	bfi	r1, r3, #3, #3
   2685e:	2201      	movs	r2, #1
   26860:	f362 1188 	bfi	r1, r2, #6, #3
   26864:	2408      	movs	r4, #8
   26866:	f364 2152 	bfi	r1, r4, #9, #10
   2686a:	f363 41de 	bfi	r1, r3, #19, #12
   2686e:	f363 71df 	bfi	r1, r3, #31, #1
   26872:	f107 0248 	add.w	r2, r7, #72	; 0x48
   26876:	4804      	ldr	r0, [pc, #16]	; (26888 <compute_and_check_and_send_periph_dhcheck+0x298>)
   26878:	f7f0 f868 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   2687c:	4620      	mov	r0, r4
   2687e:	e735      	b.n	266ec <compute_and_check_and_send_periph_dhcheck+0xfc>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26880:	200b      	movs	r0, #11
   26882:	e733      	b.n	266ec <compute_and_check_and_send_periph_dhcheck+0xfc>
   26884:	00043fb0 	.word	0x00043fb0
   26888:	0003f418 	.word	0x0003f418
   2688c:	00043fe8 	.word	0x00043fe8
   26890:	00044000 	.word	0x00044000
   26894:	00044024 	.word	0x00044024

00026898 <display_passkey>:
{
   26898:	b570      	push	{r4, r5, r6, lr}
   2689a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   2689c:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   268a0:	f7ff fb66 	bl	25f70 <latch_auth_cb>
   268a4:	4605      	mov	r5, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
   268a6:	2104      	movs	r1, #4
   268a8:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   268ac:	f7f8 fe80 	bl	1f5b0 <bt_rand>
   268b0:	bb00      	cbnz	r0, 268f4 <display_passkey+0x5c>
		smp->passkey %= 1000000;
   268b2:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   268b6:	4b10      	ldr	r3, [pc, #64]	; (268f8 <display_passkey+0x60>)
   268b8:	fba3 1302 	umull	r1, r3, r3, r2
   268bc:	0c9b      	lsrs	r3, r3, #18
   268be:	490f      	ldr	r1, [pc, #60]	; (268fc <display_passkey+0x64>)
   268c0:	fb01 2213 	mls	r2, r1, r3, r2
   268c4:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
	smp->passkey_round = 0U;
   268c8:	2300      	movs	r3, #0
   268ca:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	if (smp_auth_cb && smp_auth_cb->passkey_display) {
   268ce:	b17d      	cbz	r5, 268f0 <display_passkey+0x58>
   268d0:	682b      	ldr	r3, [r5, #0]
   268d2:	b16b      	cbz	r3, 268f0 <display_passkey+0x58>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   268d4:	1d23      	adds	r3, r4, #4
   268d6:	e8d3 1fef 	ldaex	r1, [r3]
   268da:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   268de:	e8c3 1fe2 	stlex	r2, r1, [r3]
   268e2:	2a00      	cmp	r2, #0
   268e4:	d1f7      	bne.n	268d6 <display_passkey+0x3e>
		smp_auth_cb->passkey_display(conn, smp->passkey);
   268e6:	682b      	ldr	r3, [r5, #0]
   268e8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
   268ec:	4630      	mov	r0, r6
   268ee:	4798      	blx	r3
	return 0;
   268f0:	2000      	movs	r0, #0
}
   268f2:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   268f4:	2008      	movs	r0, #8
   268f6:	e7fc      	b.n	268f2 <display_passkey+0x5a>
   268f8:	431bde83 	.word	0x431bde83
   268fc:	000f4240 	.word	0x000f4240

00026900 <smp_init>:
{
   26900:	b538      	push	{r3, r4, r5, lr}
   26902:	4604      	mov	r4, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
   26904:	22ec      	movs	r2, #236	; 0xec
   26906:	2100      	movs	r1, #0
   26908:	f011 fda6 	bl	38458 <memset>
	if (bt_rand(smp->prnd, 16)) {
   2690c:	2110      	movs	r1, #16
   2690e:	f104 0027 	add.w	r0, r4, #39	; 0x27
   26912:	f7f8 fe4d 	bl	1f5b0 <bt_rand>
   26916:	4605      	mov	r5, r0
   26918:	b968      	cbnz	r0, 26936 <smp_init+0x36>
   2691a:	e8d4 3fef 	ldaex	r3, [r4]
   2691e:	f043 0320 	orr.w	r3, r3, #32
   26922:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26926:	2a00      	cmp	r2, #0
   26928:	d1f7      	bne.n	2691a <smp_init+0x1a>
	sc_public_key = bt_pub_key_get();
   2692a:	f7f8 ff59 	bl	1f7e0 <bt_pub_key_get>
   2692e:	4b03      	ldr	r3, [pc, #12]	; (2693c <smp_init+0x3c>)
   26930:	6018      	str	r0, [r3, #0]
}
   26932:	4628      	mov	r0, r5
   26934:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   26936:	2508      	movs	r5, #8
   26938:	e7fb      	b.n	26932 <smp_init+0x32>
   2693a:	bf00      	nop
   2693c:	2000c29c 	.word	0x2000c29c

00026940 <legacy_distribute_keys>:
{
   26940:	b5f0      	push	{r4, r5, r6, r7, lr}
   26942:	b09b      	sub	sp, #108	; 0x6c
	struct bt_conn *conn = smp->chan.chan.conn;
   26944:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   26948:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
   2694c:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   26950:	f013 0f01 	tst.w	r3, #1
   26954:	d101      	bne.n	2695a <legacy_distribute_keys+0x1a>
}
   26956:	b01b      	add	sp, #108	; 0x6c
   26958:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2695a:	4604      	mov	r4, r0
		if (bt_rand((void *)&rand, sizeof(rand))) {
   2695c:	211a      	movs	r1, #26
   2695e:	a801      	add	r0, sp, #4
   26960:	f7f8 fe26 	bl	1f5b0 <bt_rand>
   26964:	2800      	cmp	r0, #0
   26966:	d155      	bne.n	26a14 <legacy_distribute_keys+0xd4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
   26968:	2210      	movs	r2, #16
   2696a:	2106      	movs	r1, #6
   2696c:	4620      	mov	r0, r4
   2696e:	f014 fced 	bl	3b34c <smp_create_pdu>
		if (!buf) {
   26972:	4607      	mov	r7, r0
   26974:	2800      	cmp	r0, #0
   26976:	d073      	beq.n	26a60 <legacy_distribute_keys+0x120>
   26978:	2110      	movs	r1, #16
   2697a:	300c      	adds	r0, #12
   2697c:	f002 ffb0 	bl	298e0 <net_buf_simple_add>
   26980:	4606      	mov	r6, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
   26982:	7b2a      	ldrb	r2, [r5, #12]
   26984:	a901      	add	r1, sp, #4
   26986:	f011 fd38 	bl	383fa <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
   2698a:	7b28      	ldrb	r0, [r5, #12]
   2698c:	280f      	cmp	r0, #15
   2698e:	f240 808d 	bls.w	26aac <legacy_distribute_keys+0x16c>
		smp_send(smp, buf, NULL, NULL);
   26992:	2300      	movs	r3, #0
   26994:	461a      	mov	r2, r3
   26996:	4639      	mov	r1, r7
   26998:	4620      	mov	r0, r4
   2699a:	f014 fcfb 	bl	3b394 <smp_send>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
   2699e:	220a      	movs	r2, #10
   269a0:	2107      	movs	r1, #7
   269a2:	4620      	mov	r0, r4
   269a4:	f014 fcd2 	bl	3b34c <smp_create_pdu>
		if (!buf) {
   269a8:	4607      	mov	r7, r0
   269aa:	2800      	cmp	r0, #0
   269ac:	f000 8085 	beq.w	26aba <legacy_distribute_keys+0x17a>
   269b0:	210a      	movs	r1, #10
   269b2:	300c      	adds	r0, #12
   269b4:	f002 ff94 	bl	298e0 <net_buf_simple_add>
   269b8:	4606      	mov	r6, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
   269ba:	2208      	movs	r2, #8
   269bc:	a905      	add	r1, sp, #20
   269be:	3002      	adds	r0, #2
   269c0:	f011 fd1b 	bl	383fa <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
   269c4:	2202      	movs	r2, #2
   269c6:	a907      	add	r1, sp, #28
   269c8:	4630      	mov	r0, r6
   269ca:	f011 fd16 	bl	383fa <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
   269ce:	2300      	movs	r3, #0
   269d0:	4a4d      	ldr	r2, [pc, #308]	; (26b08 <legacy_distribute_keys+0x1c8>)
   269d2:	4639      	mov	r1, r7
   269d4:	4620      	mov	r0, r4
   269d6:	f014 fcdd 	bl	3b394 <smp_send>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   269da:	210d      	movs	r1, #13
   269dc:	1d20      	adds	r0, r4, #4
   269de:	f014 fb82 	bl	3b0e6 <atomic_test_bit>
   269e2:	2800      	cmp	r0, #0
   269e4:	d0b7      	beq.n	26956 <legacy_distribute_keys+0x16>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
   269e6:	2101      	movs	r1, #1
   269e8:	4628      	mov	r0, r5
   269ea:	f001 ffb7 	bl	2895c <bt_keys_add_type>
			memcpy(keys->periph_ltk.val, rand.key,
   269ee:	2210      	movs	r2, #16
   269f0:	a901      	add	r1, sp, #4
   269f2:	f105 004a 	add.w	r0, r5, #74	; 0x4a
   269f6:	f011 fd00 	bl	383fa <memcpy>
			memcpy(keys->periph_ltk.rand, rand.rand,
   269fa:	2208      	movs	r2, #8
   269fc:	a905      	add	r1, sp, #20
   269fe:	f105 0040 	add.w	r0, r5, #64	; 0x40
   26a02:	f011 fcfa 	bl	383fa <memcpy>
			memcpy(keys->periph_ltk.ediv, rand.ediv,
   26a06:	2202      	movs	r2, #2
   26a08:	a907      	add	r1, sp, #28
   26a0a:	f105 0048 	add.w	r0, r5, #72	; 0x48
   26a0e:	f011 fcf4 	bl	383fa <memcpy>
   26a12:	e7a0      	b.n	26956 <legacy_distribute_keys+0x16>
			LOG_ERR("Unable to get random bytes");
   26a14:	4b3d      	ldr	r3, [pc, #244]	; (26b0c <legacy_distribute_keys+0x1cc>)
   26a16:	9319      	str	r3, [sp, #100]	; 0x64
   26a18:	2302      	movs	r3, #2
   26a1a:	f88d 3000 	strb.w	r3, [sp]
   26a1e:	2300      	movs	r3, #0
   26a20:	f88d 3001 	strb.w	r3, [sp, #1]
   26a24:	f88d 3002 	strb.w	r3, [sp, #2]
   26a28:	f88d 3003 	strb.w	r3, [sp, #3]
   26a2c:	9a00      	ldr	r2, [sp, #0]
   26a2e:	9218      	str	r2, [sp, #96]	; 0x60
   26a30:	4619      	mov	r1, r3
   26a32:	f363 0100 	bfi	r1, r3, #0, #1
   26a36:	f363 0141 	bfi	r1, r3, #1, #1
   26a3a:	f363 0182 	bfi	r1, r3, #2, #1
   26a3e:	f363 01c5 	bfi	r1, r3, #3, #3
   26a42:	2201      	movs	r2, #1
   26a44:	f362 1188 	bfi	r1, r2, #6, #3
   26a48:	2208      	movs	r2, #8
   26a4a:	f362 2152 	bfi	r1, r2, #9, #10
   26a4e:	f363 41de 	bfi	r1, r3, #19, #12
   26a52:	f363 71df 	bfi	r1, r3, #31, #1
   26a56:	aa18      	add	r2, sp, #96	; 0x60
   26a58:	482d      	ldr	r0, [pc, #180]	; (26b10 <legacy_distribute_keys+0x1d0>)
   26a5a:	f7ef ff77 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   26a5e:	e77a      	b.n	26956 <legacy_distribute_keys+0x16>
			LOG_ERR("Unable to allocate Encrypt Info buffer");
   26a60:	4b2c      	ldr	r3, [pc, #176]	; (26b14 <legacy_distribute_keys+0x1d4>)
   26a62:	9313      	str	r3, [sp, #76]	; 0x4c
   26a64:	2302      	movs	r3, #2
   26a66:	f88d 3000 	strb.w	r3, [sp]
   26a6a:	2300      	movs	r3, #0
   26a6c:	f88d 3001 	strb.w	r3, [sp, #1]
   26a70:	f88d 3002 	strb.w	r3, [sp, #2]
   26a74:	f88d 3003 	strb.w	r3, [sp, #3]
   26a78:	9a00      	ldr	r2, [sp, #0]
   26a7a:	9212      	str	r2, [sp, #72]	; 0x48
   26a7c:	4619      	mov	r1, r3
   26a7e:	f363 0100 	bfi	r1, r3, #0, #1
   26a82:	f363 0141 	bfi	r1, r3, #1, #1
   26a86:	f363 0182 	bfi	r1, r3, #2, #1
   26a8a:	f363 01c5 	bfi	r1, r3, #3, #3
   26a8e:	2201      	movs	r2, #1
   26a90:	f362 1188 	bfi	r1, r2, #6, #3
   26a94:	2208      	movs	r2, #8
   26a96:	f362 2152 	bfi	r1, r2, #9, #10
   26a9a:	f363 41de 	bfi	r1, r3, #19, #12
   26a9e:	f363 71df 	bfi	r1, r3, #31, #1
   26aa2:	aa12      	add	r2, sp, #72	; 0x48
   26aa4:	481a      	ldr	r0, [pc, #104]	; (26b10 <legacy_distribute_keys+0x1d0>)
   26aa6:	f7ef ff51 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   26aaa:	e754      	b.n	26956 <legacy_distribute_keys+0x16>
			(void)memset(info->ltk + keys->enc_size, 0,
   26aac:	f1c0 0210 	rsb	r2, r0, #16
   26ab0:	2100      	movs	r1, #0
   26ab2:	4430      	add	r0, r6
   26ab4:	f011 fcd0 	bl	38458 <memset>
   26ab8:	e76b      	b.n	26992 <legacy_distribute_keys+0x52>
			LOG_ERR("Unable to allocate Central Ident buffer");
   26aba:	4b17      	ldr	r3, [pc, #92]	; (26b18 <legacy_distribute_keys+0x1d8>)
   26abc:	930d      	str	r3, [sp, #52]	; 0x34
   26abe:	2302      	movs	r3, #2
   26ac0:	f88d 3000 	strb.w	r3, [sp]
   26ac4:	2300      	movs	r3, #0
   26ac6:	f88d 3001 	strb.w	r3, [sp, #1]
   26aca:	f88d 3002 	strb.w	r3, [sp, #2]
   26ace:	f88d 3003 	strb.w	r3, [sp, #3]
   26ad2:	9a00      	ldr	r2, [sp, #0]
   26ad4:	920c      	str	r2, [sp, #48]	; 0x30
   26ad6:	4619      	mov	r1, r3
   26ad8:	f363 0100 	bfi	r1, r3, #0, #1
   26adc:	f363 0141 	bfi	r1, r3, #1, #1
   26ae0:	f363 0182 	bfi	r1, r3, #2, #1
   26ae4:	f363 01c5 	bfi	r1, r3, #3, #3
   26ae8:	2201      	movs	r2, #1
   26aea:	f362 1188 	bfi	r1, r2, #6, #3
   26aee:	2208      	movs	r2, #8
   26af0:	f362 2152 	bfi	r1, r2, #9, #10
   26af4:	f363 41de 	bfi	r1, r3, #19, #12
   26af8:	f363 71df 	bfi	r1, r3, #31, #1
   26afc:	aa0c      	add	r2, sp, #48	; 0x30
   26afe:	4804      	ldr	r0, [pc, #16]	; (26b10 <legacy_distribute_keys+0x1d0>)
   26b00:	f7ef ff24 	bl	1694c <z_impl_z_log_msg_static_create>
			return;
   26b04:	e727      	b.n	26956 <legacy_distribute_keys+0x16>
   26b06:	bf00      	nop
   26b08:	0003bb19 	.word	0x0003bb19
   26b0c:	00044048 	.word	0x00044048
   26b10:	0003f418 	.word	0x0003f418
   26b14:	00044064 	.word	0x00044064
   26b18:	0004408c 	.word	0x0004408c

00026b1c <bt_smp_distribute_keys>:
{
   26b1c:	b5b0      	push	{r4, r5, r7, lr}
   26b1e:	b082      	sub	sp, #8
   26b20:	af00      	add	r7, sp, #0
   26b22:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   26b24:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
	struct bt_keys *keys = conn->le.keys;
   26b28:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
	if (!keys) {
   26b2c:	b14b      	cbz	r3, 26b42 <bt_smp_distribute_keys+0x26>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   26b2e:	2105      	movs	r1, #5
   26b30:	1d20      	adds	r0, r4, #4
   26b32:	f014 fad8 	bl	3b0e6 <atomic_test_bit>
   26b36:	2800      	cmp	r0, #0
   26b38:	d05e      	beq.n	26bf8 <bt_smp_distribute_keys+0xdc>
	return 0;
   26b3a:	2000      	movs	r0, #0
}
   26b3c:	3708      	adds	r7, #8
   26b3e:	46bd      	mov	sp, r7
   26b40:	bdb0      	pop	{r4, r5, r7, pc}
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   26b42:	3090      	adds	r0, #144	; 0x90
   26b44:	f7f4 f8d0 	bl	1ace8 <bt_addr_le_str>
   26b48:	466d      	mov	r5, sp
   26b4a:	2300      	movs	r3, #0
   26b4c:	713b      	strb	r3, [r7, #4]
   26b4e:	2302      	movs	r3, #2
   26b50:	717b      	strb	r3, [r7, #5]
   26b52:	b088      	sub	sp, #32
   26b54:	466c      	mov	r4, sp
   26b56:	f114 0210 	adds.w	r2, r4, #16
   26b5a:	d014      	beq.n	26b86 <bt_smp_distribute_keys+0x6a>
   26b5c:	f04f 0c0e 	mov.w	ip, #14
   26b60:	b122      	cbz	r2, 26b6c <bt_smp_distribute_keys+0x50>
   26b62:	f1bc 0f04 	cmp.w	ip, #4
   26b66:	dd01      	ble.n	26b6c <bt_smp_distribute_keys+0x50>
   26b68:	4b26      	ldr	r3, [pc, #152]	; (26c04 <bt_smp_distribute_keys+0xe8>)
   26b6a:	6163      	str	r3, [r4, #20]
   26b6c:	2300      	movs	r3, #0
   26b6e:	703b      	strb	r3, [r7, #0]
   26b70:	2302      	movs	r3, #2
   26b72:	707b      	strb	r3, [r7, #1]
   26b74:	b1a2      	cbz	r2, 26ba0 <bt_smp_distribute_keys+0x84>
   26b76:	f1bc 0f08 	cmp.w	ip, #8
   26b7a:	dd00      	ble.n	26b7e <bt_smp_distribute_keys+0x62>
   26b7c:	61a0      	str	r0, [r4, #24]
   26b7e:	f104 031c 	add.w	r3, r4, #28
   26b82:	2100      	movs	r1, #0
   26b84:	e00a      	b.n	26b9c <bt_smp_distribute_keys+0x80>
   26b86:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   26b8a:	e7e9      	b.n	26b60 <bt_smp_distribute_keys+0x44>
   26b8c:	f101 0008 	add.w	r0, r1, #8
   26b90:	4438      	add	r0, r7
   26b92:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   26b96:	f803 0b01 	strb.w	r0, [r3], #1
   26b9a:	3101      	adds	r1, #1
   26b9c:	2901      	cmp	r1, #1
   26b9e:	d9f5      	bls.n	26b8c <bt_smp_distribute_keys+0x70>
   26ba0:	f1bc 0f0d 	cmp.w	ip, #13
   26ba4:	dd25      	ble.n	26bf2 <bt_smp_distribute_keys+0xd6>
   26ba6:	230e      	movs	r3, #14
   26ba8:	b142      	cbz	r2, 26bbc <bt_smp_distribute_keys+0xa0>
   26baa:	2103      	movs	r1, #3
   26bac:	7139      	strb	r1, [r7, #4]
   26bae:	2100      	movs	r1, #0
   26bb0:	7179      	strb	r1, [r7, #5]
   26bb2:	71b9      	strb	r1, [r7, #6]
   26bb4:	2101      	movs	r1, #1
   26bb6:	71f9      	strb	r1, [r7, #7]
   26bb8:	6878      	ldr	r0, [r7, #4]
   26bba:	6120      	str	r0, [r4, #16]
   26bbc:	2100      	movs	r1, #0
   26bbe:	f36f 0100 	bfc	r1, #0, #1
   26bc2:	f36f 0141 	bfc	r1, #1, #1
   26bc6:	f36f 0182 	bfc	r1, #2, #1
   26bca:	f36f 01c5 	bfc	r1, #3, #3
   26bce:	2001      	movs	r0, #1
   26bd0:	f360 1188 	bfi	r1, r0, #6, #3
   26bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   26bd8:	f363 2152 	bfi	r1, r3, #9, #10
   26bdc:	f36f 41de 	bfc	r1, #19, #12
   26be0:	f36f 71df 	bfc	r1, #31, #1
   26be4:	2300      	movs	r3, #0
   26be6:	4808      	ldr	r0, [pc, #32]	; (26c08 <bt_smp_distribute_keys+0xec>)
   26be8:	f7ef feb0 	bl	1694c <z_impl_z_log_msg_static_create>
   26bec:	46ad      	mov	sp, r5
		return BT_SMP_ERR_UNSPECIFIED;
   26bee:	2008      	movs	r0, #8
   26bf0:	e7a4      	b.n	26b3c <bt_smp_distribute_keys+0x20>
		LOG_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
   26bf2:	f06f 031b 	mvn.w	r3, #27
   26bf6:	e7d7      	b.n	26ba8 <bt_smp_distribute_keys+0x8c>
		legacy_distribute_keys(smp);
   26bf8:	4620      	mov	r0, r4
   26bfa:	f7ff fea1 	bl	26940 <legacy_distribute_keys>
	return 0;
   26bfe:	2000      	movs	r0, #0
   26c00:	e79c      	b.n	26b3c <bt_smp_distribute_keys+0x20>
   26c02:	bf00      	nop
   26c04:	000440b4 	.word	0x000440b4
   26c08:	0003f418 	.word	0x0003f418

00026c0c <smp_dhkey_generate>:
{
   26c0c:	b510      	push	{r4, lr}
   26c0e:	b088      	sub	sp, #32
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   26c10:	1d04      	adds	r4, r0, #4
   26c12:	e8d4 3fef 	ldaex	r3, [r4]
   26c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   26c1a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26c1e:	2a00      	cmp	r2, #0
   26c20:	d1f7      	bne.n	26c12 <smp_dhkey_generate+0x6>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
   26c22:	491b      	ldr	r1, [pc, #108]	; (26c90 <smp_dhkey_generate+0x84>)
   26c24:	3057      	adds	r0, #87	; 0x57
   26c26:	f7f8 fde9 	bl	1f7fc <bt_dh_key_gen>
	if (err) {
   26c2a:	b910      	cbnz	r0, 26c32 <smp_dhkey_generate+0x26>
	return 0;
   26c2c:	2000      	movs	r0, #0
}
   26c2e:	b008      	add	sp, #32
   26c30:	bd10      	pop	{r4, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   26c32:	e8d4 3fef 	ldaex	r3, [r4]
   26c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   26c3a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26c3e:	2a00      	cmp	r2, #0
   26c40:	d1f7      	bne.n	26c32 <smp_dhkey_generate+0x26>
		LOG_ERR("Failed to generate DHKey");
   26c42:	4b14      	ldr	r3, [pc, #80]	; (26c94 <smp_dhkey_generate+0x88>)
   26c44:	9307      	str	r3, [sp, #28]
   26c46:	2302      	movs	r3, #2
   26c48:	f88d 3004 	strb.w	r3, [sp, #4]
   26c4c:	2300      	movs	r3, #0
   26c4e:	f88d 3005 	strb.w	r3, [sp, #5]
   26c52:	f88d 3006 	strb.w	r3, [sp, #6]
   26c56:	f88d 3007 	strb.w	r3, [sp, #7]
   26c5a:	9a01      	ldr	r2, [sp, #4]
   26c5c:	9206      	str	r2, [sp, #24]
   26c5e:	4619      	mov	r1, r3
   26c60:	f363 0100 	bfi	r1, r3, #0, #1
   26c64:	f363 0141 	bfi	r1, r3, #1, #1
   26c68:	f363 0182 	bfi	r1, r3, #2, #1
   26c6c:	f363 01c5 	bfi	r1, r3, #3, #3
   26c70:	2201      	movs	r2, #1
   26c72:	f362 1188 	bfi	r1, r2, #6, #3
   26c76:	2408      	movs	r4, #8
   26c78:	f364 2152 	bfi	r1, r4, #9, #10
   26c7c:	f363 41de 	bfi	r1, r3, #19, #12
   26c80:	f363 71df 	bfi	r1, r3, #31, #1
   26c84:	aa06      	add	r2, sp, #24
   26c86:	4804      	ldr	r0, [pc, #16]	; (26c98 <smp_dhkey_generate+0x8c>)
   26c88:	f7ef fe60 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   26c8c:	4620      	mov	r0, r4
   26c8e:	e7ce      	b.n	26c2e <smp_dhkey_generate+0x22>
   26c90:	0003b993 	.word	0x0003b993
   26c94:	000440cc 	.word	0x000440cc
   26c98:	0003f418 	.word	0x0003f418

00026c9c <smp_public_key_periph>:
{
   26c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   26c9e:	b089      	sub	sp, #36	; 0x24
   26ca0:	af00      	add	r7, sp, #0
   26ca2:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   26ca4:	f7ff f964 	bl	25f70 <latch_auth_cb>
   26ca8:	4605      	mov	r5, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   26caa:	1d26      	adds	r6, r4, #4
   26cac:	210e      	movs	r1, #14
   26cae:	4630      	mov	r0, r6
   26cb0:	f014 fa19 	bl	3b0e6 <atomic_test_bit>
   26cb4:	b938      	cbnz	r0, 26cc6 <smp_public_key_periph+0x2a>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
   26cb6:	2220      	movs	r2, #32
   26cb8:	4b64      	ldr	r3, [pc, #400]	; (26e4c <smp_public_key_periph+0x1b0>)
   26cba:	6819      	ldr	r1, [r3, #0]
   26cbc:	f104 0057 	add.w	r0, r4, #87	; 0x57
   26cc0:	f011 fb76 	bl	383b0 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
   26cc4:	b168      	cbz	r0, 26ce2 <smp_public_key_periph+0x46>
	err = sc_send_public_key(smp);
   26cc6:	4620      	mov	r0, r4
   26cc8:	f7ff fab4 	bl	26234 <sc_send_public_key>
	if (err) {
   26ccc:	4603      	mov	r3, r0
   26cce:	2800      	cmp	r0, #0
   26cd0:	d16e      	bne.n	26db0 <smp_public_key_periph+0x114>
	switch (smp->method) {
   26cd2:	7a23      	ldrb	r3, [r4, #8]
   26cd4:	2b05      	cmp	r3, #5
   26cd6:	d878      	bhi.n	26dca <smp_public_key_periph+0x12e>
   26cd8:	e8df f003 	tbb	[pc, r3]
   26cdc:	26344a26 	.word	0x26344a26
   26ce0:	6e77      	.short	0x6e77
		LOG_WRN("Remote public key rejected");
   26ce2:	4b5b      	ldr	r3, [pc, #364]	; (26e50 <smp_public_key_periph+0x1b4>)
   26ce4:	61fb      	str	r3, [r7, #28]
   26ce6:	2202      	movs	r2, #2
   26ce8:	713a      	strb	r2, [r7, #4]
   26cea:	2300      	movs	r3, #0
   26cec:	717b      	strb	r3, [r7, #5]
   26cee:	71bb      	strb	r3, [r7, #6]
   26cf0:	71fb      	strb	r3, [r7, #7]
   26cf2:	6879      	ldr	r1, [r7, #4]
   26cf4:	61b9      	str	r1, [r7, #24]
   26cf6:	4619      	mov	r1, r3
   26cf8:	f363 0100 	bfi	r1, r3, #0, #1
   26cfc:	f363 0141 	bfi	r1, r3, #1, #1
   26d00:	f363 0182 	bfi	r1, r3, #2, #1
   26d04:	f363 01c5 	bfi	r1, r3, #3, #3
   26d08:	f362 1188 	bfi	r1, r2, #6, #3
   26d0c:	2408      	movs	r4, #8
   26d0e:	f364 2152 	bfi	r1, r4, #9, #10
   26d12:	f363 41de 	bfi	r1, r3, #19, #12
   26d16:	f363 71df 	bfi	r1, r3, #31, #1
   26d1a:	f107 0218 	add.w	r2, r7, #24
   26d1e:	484d      	ldr	r0, [pc, #308]	; (26e54 <smp_public_key_periph+0x1b8>)
   26d20:	f7ef fe14 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   26d24:	4623      	mov	r3, r4
   26d26:	e043      	b.n	26db0 <smp_public_key_periph+0x114>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26d28:	e8d4 3fef 	ldaex	r3, [r4]
   26d2c:	f043 0310 	orr.w	r3, r3, #16
   26d30:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26d34:	2a00      	cmp	r2, #0
   26d36:	d1f7      	bne.n	26d28 <smp_public_key_periph+0x8c>
		err = smp_send_pairing_confirm(smp);
   26d38:	4620      	mov	r0, r4
   26d3a:	f7ff fa9f 	bl	2627c <smp_send_pairing_confirm>
		if (err) {
   26d3e:	4603      	mov	r3, r0
   26d40:	b390      	cbz	r0, 26da8 <smp_public_key_periph+0x10c>
   26d42:	e035      	b.n	26db0 <smp_public_key_periph+0x114>
		err = display_passkey(smp);
   26d44:	4620      	mov	r0, r4
   26d46:	f7ff fda7 	bl	26898 <display_passkey>
		if (err) {
   26d4a:	4603      	mov	r3, r0
   26d4c:	bb80      	cbnz	r0, 26db0 <smp_public_key_periph+0x114>
   26d4e:	e8d4 3fef 	ldaex	r3, [r4]
   26d52:	f043 0308 	orr.w	r3, r3, #8
   26d56:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26d5a:	2a00      	cmp	r2, #0
   26d5c:	d1f7      	bne.n	26d4e <smp_public_key_periph+0xb2>
   26d5e:	e8d4 3fef 	ldaex	r3, [r4]
   26d62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   26d66:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26d6a:	2a00      	cmp	r2, #0
   26d6c:	d01c      	beq.n	26da8 <smp_public_key_periph+0x10c>
   26d6e:	e7f6      	b.n	26d5e <smp_public_key_periph+0xc2>
   26d70:	e8d4 3fef 	ldaex	r3, [r4]
   26d74:	f043 0308 	orr.w	r3, r3, #8
   26d78:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26d7c:	2a00      	cmp	r2, #0
   26d7e:	d1f7      	bne.n	26d70 <smp_public_key_periph+0xd4>
   26d80:	e8d4 3fef 	ldaex	r3, [r4]
   26d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   26d88:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26d8c:	2a00      	cmp	r2, #0
   26d8e:	d1f7      	bne.n	26d80 <smp_public_key_periph+0xe4>
   26d90:	e8d6 3fef 	ldaex	r3, [r6]
   26d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   26d98:	e8c6 3fe2 	stlex	r2, r3, [r6]
   26d9c:	2a00      	cmp	r2, #0
   26d9e:	d1f7      	bne.n	26d90 <smp_public_key_periph+0xf4>
		smp_auth_cb->passkey_entry(smp->chan.chan.conn);
   26da0:	686b      	ldr	r3, [r5, #4]
   26da2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   26da6:	4798      	blx	r3
	return generate_dhkey(smp);
   26da8:	4620      	mov	r0, r4
   26daa:	f014 fcd1 	bl	3b750 <generate_dhkey>
   26dae:	4603      	mov	r3, r0
}
   26db0:	4618      	mov	r0, r3
   26db2:	3724      	adds	r7, #36	; 0x24
   26db4:	46bd      	mov	sp, r7
   26db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   26db8:	e8d4 3fef 	ldaex	r3, [r4]
   26dbc:	f043 0310 	orr.w	r3, r3, #16
   26dc0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26dc4:	2a00      	cmp	r2, #0
   26dc6:	d0ef      	beq.n	26da8 <smp_public_key_periph+0x10c>
   26dc8:	e7f6      	b.n	26db8 <smp_public_key_periph+0x11c>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26dca:	466c      	mov	r4, sp
   26dcc:	b088      	sub	sp, #32
   26dce:	4669      	mov	r1, sp
   26dd0:	f111 0210 	adds.w	r2, r1, #16
   26dd4:	d00d      	beq.n	26df2 <smp_public_key_periph+0x156>
   26dd6:	200c      	movs	r0, #12
   26dd8:	b13a      	cbz	r2, 26dea <smp_public_key_periph+0x14e>
   26dda:	4605      	mov	r5, r0
   26ddc:	2804      	cmp	r0, #4
   26dde:	dd01      	ble.n	26de4 <smp_public_key_periph+0x148>
   26de0:	4e1d      	ldr	r6, [pc, #116]	; (26e58 <smp_public_key_periph+0x1bc>)
   26de2:	614e      	str	r6, [r1, #20]
   26de4:	2d08      	cmp	r5, #8
   26de6:	dd07      	ble.n	26df8 <smp_public_key_periph+0x15c>
   26de8:	618b      	str	r3, [r1, #24]
   26dea:	280b      	cmp	r0, #11
   26dec:	dd2a      	ble.n	26e44 <smp_public_key_periph+0x1a8>
   26dee:	230c      	movs	r3, #12
   26df0:	e004      	b.n	26dfc <smp_public_key_periph+0x160>
   26df2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   26df6:	e7ef      	b.n	26dd8 <smp_public_key_periph+0x13c>
   26df8:	f06f 031b 	mvn.w	r3, #27
   26dfc:	b13a      	cbz	r2, 26e0e <smp_public_key_periph+0x172>
   26dfe:	2003      	movs	r0, #3
   26e00:	7138      	strb	r0, [r7, #4]
   26e02:	2000      	movs	r0, #0
   26e04:	7178      	strb	r0, [r7, #5]
   26e06:	71b8      	strb	r0, [r7, #6]
   26e08:	71f8      	strb	r0, [r7, #7]
   26e0a:	6878      	ldr	r0, [r7, #4]
   26e0c:	6108      	str	r0, [r1, #16]
   26e0e:	2100      	movs	r1, #0
   26e10:	f36f 0100 	bfc	r1, #0, #1
   26e14:	f36f 0141 	bfc	r1, #1, #1
   26e18:	f36f 0182 	bfc	r1, #2, #1
   26e1c:	f36f 01c5 	bfc	r1, #3, #3
   26e20:	2001      	movs	r0, #1
   26e22:	f360 1188 	bfi	r1, r0, #6, #3
   26e26:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   26e2a:	f363 2152 	bfi	r1, r3, #9, #10
   26e2e:	f36f 41de 	bfc	r1, #19, #12
   26e32:	f36f 71df 	bfc	r1, #31, #1
   26e36:	2300      	movs	r3, #0
   26e38:	4806      	ldr	r0, [pc, #24]	; (26e54 <smp_public_key_periph+0x1b8>)
   26e3a:	f7ef fd87 	bl	1694c <z_impl_z_log_msg_static_create>
   26e3e:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   26e40:	2308      	movs	r3, #8
   26e42:	e7b5      	b.n	26db0 <smp_public_key_periph+0x114>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   26e44:	f06f 031b 	mvn.w	r3, #27
   26e48:	e7d8      	b.n	26dfc <smp_public_key_periph+0x160>
   26e4a:	bf00      	nop
   26e4c:	2000c29c 	.word	0x2000c29c
   26e50:	000440e8 	.word	0x000440e8
   26e54:	0003f418 	.word	0x0003f418
   26e58:	00043fb0 	.word	0x00043fb0

00026e5c <smp_public_key>:
{
   26e5c:	b570      	push	{r4, r5, r6, lr}
   26e5e:	b088      	sub	sp, #32
   26e60:	4604      	mov	r4, r0
   26e62:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   26e64:	f7ff f884 	bl	25f70 <latch_auth_cb>
	struct bt_smp_public_key *req = (void *)buf->data;
   26e68:	68ee      	ldr	r6, [r5, #12]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
   26e6a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   26e6e:	2220      	movs	r2, #32
   26e70:	4631      	mov	r1, r6
   26e72:	4628      	mov	r0, r5
   26e74:	f011 fac1 	bl	383fa <memcpy>
	memcpy(&smp->pkey[BT_PUB_KEY_COORD_LEN], req->y, BT_PUB_KEY_COORD_LEN);
   26e78:	2220      	movs	r2, #32
   26e7a:	18b1      	adds	r1, r6, r2
   26e7c:	f104 0077 	add.w	r0, r4, #119	; 0x77
   26e80:	f011 fabb 	bl	383fa <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
   26e84:	4628      	mov	r0, r5
   26e86:	f7f8 fbb9 	bl	1f5fc <bt_pub_key_is_debug>
   26e8a:	b388      	cbz	r0, 26ef0 <smp_public_key+0x94>
		LOG_INF("Remote is using Debug Public key");
   26e8c:	4b23      	ldr	r3, [pc, #140]	; (26f1c <smp_public_key+0xc0>)
   26e8e:	9307      	str	r3, [sp, #28]
   26e90:	2302      	movs	r3, #2
   26e92:	f88d 3004 	strb.w	r3, [sp, #4]
   26e96:	2300      	movs	r3, #0
   26e98:	f88d 3005 	strb.w	r3, [sp, #5]
   26e9c:	f88d 3006 	strb.w	r3, [sp, #6]
   26ea0:	f88d 3007 	strb.w	r3, [sp, #7]
   26ea4:	9a01      	ldr	r2, [sp, #4]
   26ea6:	9206      	str	r2, [sp, #24]
   26ea8:	4619      	mov	r1, r3
   26eaa:	f363 0100 	bfi	r1, r3, #0, #1
   26eae:	f363 0141 	bfi	r1, r3, #1, #1
   26eb2:	f363 0182 	bfi	r1, r3, #2, #1
   26eb6:	f363 01c5 	bfi	r1, r3, #3, #3
   26eba:	2203      	movs	r2, #3
   26ebc:	f362 1188 	bfi	r1, r2, #6, #3
   26ec0:	2208      	movs	r2, #8
   26ec2:	f362 2152 	bfi	r1, r2, #9, #10
   26ec6:	f363 41de 	bfi	r1, r3, #19, #12
   26eca:	f363 71df 	bfi	r1, r3, #31, #1
   26ece:	aa06      	add	r2, sp, #24
   26ed0:	4813      	ldr	r0, [pc, #76]	; (26f20 <smp_public_key+0xc4>)
   26ed2:	f7ef fd3b 	bl	1694c <z_impl_z_log_msg_static_create>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
   26ed6:	1d23      	adds	r3, r4, #4
   26ed8:	e8d3 1fef 	ldaex	r1, [r3]
   26edc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   26ee0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26ee4:	2a00      	cmp	r2, #0
   26ee6:	d1f7      	bne.n	26ed8 <smp_public_key+0x7c>
		if (!update_debug_keys_check(smp)) {
   26ee8:	4620      	mov	r0, r4
   26eea:	f014 fb8e 	bl	3b60a <update_debug_keys_check>
   26eee:	b190      	cbz	r0, 26f16 <smp_public_key+0xba>
	if (!sc_public_key) {
   26ef0:	4b0c      	ldr	r3, [pc, #48]	; (26f24 <smp_public_key+0xc8>)
   26ef2:	681b      	ldr	r3, [r3, #0]
   26ef4:	b123      	cbz	r3, 26f00 <smp_public_key+0xa4>
	err = smp_public_key_periph(smp);
   26ef6:	4620      	mov	r0, r4
   26ef8:	f7ff fed0 	bl	26c9c <smp_public_key_periph>
}
   26efc:	b008      	add	sp, #32
   26efe:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   26f00:	3404      	adds	r4, #4
   26f02:	e8d4 3fef 	ldaex	r3, [r4]
   26f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26f0a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   26f0e:	2a00      	cmp	r2, #0
   26f10:	d1f7      	bne.n	26f02 <smp_public_key+0xa6>
		return 0;
   26f12:	2000      	movs	r0, #0
   26f14:	e7f2      	b.n	26efc <smp_public_key+0xa0>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   26f16:	2003      	movs	r0, #3
   26f18:	e7f0      	b.n	26efc <smp_public_key+0xa0>
   26f1a:	bf00      	nop
   26f1c:	00044104 	.word	0x00044104
   26f20:	0003f418 	.word	0x0003f418
   26f24:	2000c29c 	.word	0x2000c29c

00026f28 <legacy_request_tk>:
{
   26f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   26f2a:	b089      	sub	sp, #36	; 0x24
   26f2c:	af00      	add	r7, sp, #0
   26f2e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   26f30:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   26f34:	f7ff f81c 	bl	25f70 <latch_auth_cb>
   26f38:	4606      	mov	r6, r0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
   26f3a:	f105 0190 	add.w	r1, r5, #144	; 0x90
   26f3e:	7a28      	ldrb	r0, [r5, #8]
   26f40:	f001 fcd6 	bl	288f0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   26f44:	b128      	cbz	r0, 26f52 <legacy_request_tk+0x2a>
   26f46:	7b43      	ldrb	r3, [r0, #13]
   26f48:	f013 0f01 	tst.w	r3, #1
   26f4c:	d001      	beq.n	26f52 <legacy_request_tk+0x2a>
	    smp->method == JUST_WORKS) {
   26f4e:	7a23      	ldrb	r3, [r4, #8]
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
   26f50:	b153      	cbz	r3, 26f68 <legacy_request_tk+0x40>
	switch (smp->method) {
   26f52:	7a20      	ldrb	r0, [r4, #8]
   26f54:	4603      	mov	r3, r0
   26f56:	2806      	cmp	r0, #6
   26f58:	f200 8081 	bhi.w	2705e <legacy_request_tk+0x136>
   26f5c:	e8df f000 	tbb	[pc, r0]
   26f60:	7f416f7c 	.word	0x7f416f7c
   26f64:	7f7f      	.short	0x7f7f
   26f66:	28          	.byte	0x28
   26f67:	00          	.byte	0x00
		LOG_ERR("JustWorks failed, authenticated keys present");
   26f68:	4b60      	ldr	r3, [pc, #384]	; (270ec <legacy_request_tk+0x1c4>)
   26f6a:	61fb      	str	r3, [r7, #28]
   26f6c:	2302      	movs	r3, #2
   26f6e:	703b      	strb	r3, [r7, #0]
   26f70:	2300      	movs	r3, #0
   26f72:	707b      	strb	r3, [r7, #1]
   26f74:	70bb      	strb	r3, [r7, #2]
   26f76:	70fb      	strb	r3, [r7, #3]
   26f78:	683a      	ldr	r2, [r7, #0]
   26f7a:	61ba      	str	r2, [r7, #24]
   26f7c:	4619      	mov	r1, r3
   26f7e:	f363 0100 	bfi	r1, r3, #0, #1
   26f82:	f363 0141 	bfi	r1, r3, #1, #1
   26f86:	f363 0182 	bfi	r1, r3, #2, #1
   26f8a:	f363 01c5 	bfi	r1, r3, #3, #3
   26f8e:	2201      	movs	r2, #1
   26f90:	f362 1188 	bfi	r1, r2, #6, #3
   26f94:	2408      	movs	r4, #8
   26f96:	f364 2152 	bfi	r1, r4, #9, #10
   26f9a:	f363 41de 	bfi	r1, r3, #19, #12
   26f9e:	f363 71df 	bfi	r1, r3, #31, #1
   26fa2:	f107 0218 	add.w	r2, r7, #24
   26fa6:	4852      	ldr	r0, [pc, #328]	; (270f0 <legacy_request_tk+0x1c8>)
   26fa8:	f7ef fcd0 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_UNSPECIFIED;
   26fac:	4620      	mov	r0, r4
   26fae:	e053      	b.n	27058 <legacy_request_tk+0x130>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   26fb0:	2e00      	cmp	r6, #0
   26fb2:	f000 8094 	beq.w	270de <legacy_request_tk+0x1b6>
   26fb6:	68f3      	ldr	r3, [r6, #12]
   26fb8:	2b00      	cmp	r3, #0
   26fba:	f000 8092 	beq.w	270e2 <legacy_request_tk+0x1ba>
			struct bt_conn_oob_info info = {
   26fbe:	2500      	movs	r5, #0
   26fc0:	803d      	strh	r5, [r7, #0]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   26fc2:	1d23      	adds	r3, r4, #4
   26fc4:	e8d3 1fef 	ldaex	r1, [r3]
   26fc8:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   26fcc:	e8c3 1fe2 	stlex	r2, r1, [r3]
   26fd0:	2a00      	cmp	r2, #0
   26fd2:	d1f7      	bne.n	26fc4 <legacy_request_tk+0x9c>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   26fd4:	68f3      	ldr	r3, [r6, #12]
   26fd6:	4639      	mov	r1, r7
   26fd8:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   26fdc:	4798      	blx	r3
	return 0;
   26fde:	4628      	mov	r0, r5
		break;
   26fe0:	e03a      	b.n	27058 <legacy_request_tk+0x130>
			if (bt_rand(&passkey, sizeof(passkey))) {
   26fe2:	2104      	movs	r1, #4
   26fe4:	1878      	adds	r0, r7, r1
   26fe6:	f7f8 fae3 	bl	1f5b0 <bt_rand>
   26fea:	2800      	cmp	r0, #0
   26fec:	d17b      	bne.n	270e6 <legacy_request_tk+0x1be>
			passkey %= 1000000;
   26fee:	687a      	ldr	r2, [r7, #4]
   26ff0:	4b40      	ldr	r3, [pc, #256]	; (270f4 <legacy_request_tk+0x1cc>)
   26ff2:	fba3 1302 	umull	r1, r3, r3, r2
   26ff6:	0c9b      	lsrs	r3, r3, #18
   26ff8:	493f      	ldr	r1, [pc, #252]	; (270f8 <legacy_request_tk+0x1d0>)
   26ffa:	fb01 2213 	mls	r2, r1, r3, r2
   26ffe:	607a      	str	r2, [r7, #4]
		if (smp_auth_cb && smp_auth_cb->passkey_display) {
   27000:	b176      	cbz	r6, 27020 <legacy_request_tk+0xf8>
   27002:	6833      	ldr	r3, [r6, #0]
   27004:	b163      	cbz	r3, 27020 <legacy_request_tk+0xf8>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
   27006:	1d23      	adds	r3, r4, #4
   27008:	e8d3 1fef 	ldaex	r1, [r3]
   2700c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   27010:	e8c3 1fe2 	stlex	r2, r1, [r3]
   27014:	2a00      	cmp	r2, #0
   27016:	d1f7      	bne.n	27008 <legacy_request_tk+0xe0>
			smp_auth_cb->passkey_display(conn, passkey);
   27018:	6833      	ldr	r3, [r6, #0]
   2701a:	6879      	ldr	r1, [r7, #4]
   2701c:	4628      	mov	r0, r5
   2701e:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
   27020:	687b      	ldr	r3, [r7, #4]
	dst[0] = val;
   27022:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
   27026:	f3c3 2207 	ubfx	r2, r3, #8, #8
   2702a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
	sys_put_le16(val >> 16, &dst[2]);
   2702e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   27030:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
	dst[1] = val >> 8;
   27034:	0e1b      	lsrs	r3, r3, #24
   27036:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	return 0;
   2703a:	2000      	movs	r0, #0
}
   2703c:	e00c      	b.n	27058 <legacy_request_tk+0x130>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   2703e:	3404      	adds	r4, #4
   27040:	e8d4 3fef 	ldaex	r3, [r4]
   27044:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27048:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2704c:	2a00      	cmp	r2, #0
   2704e:	d1f7      	bne.n	27040 <legacy_request_tk+0x118>
		smp_auth_cb->passkey_entry(conn);
   27050:	6873      	ldr	r3, [r6, #4]
   27052:	4628      	mov	r0, r5
   27054:	4798      	blx	r3
	return 0;
   27056:	2000      	movs	r0, #0
}
   27058:	3724      	adds	r7, #36	; 0x24
   2705a:	46bd      	mov	sp, r7
   2705c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   2705e:	466c      	mov	r4, sp
   27060:	b088      	sub	sp, #32
   27062:	4669      	mov	r1, sp
   27064:	f111 0210 	adds.w	r2, r1, #16
   27068:	d00d      	beq.n	27086 <legacy_request_tk+0x15e>
   2706a:	200c      	movs	r0, #12
   2706c:	b13a      	cbz	r2, 2707e <legacy_request_tk+0x156>
   2706e:	4605      	mov	r5, r0
   27070:	2804      	cmp	r0, #4
   27072:	dd01      	ble.n	27078 <legacy_request_tk+0x150>
   27074:	4e21      	ldr	r6, [pc, #132]	; (270fc <legacy_request_tk+0x1d4>)
   27076:	614e      	str	r6, [r1, #20]
   27078:	2d08      	cmp	r5, #8
   2707a:	dd07      	ble.n	2708c <legacy_request_tk+0x164>
   2707c:	618b      	str	r3, [r1, #24]
   2707e:	280b      	cmp	r0, #11
   27080:	dd2a      	ble.n	270d8 <legacy_request_tk+0x1b0>
   27082:	230c      	movs	r3, #12
   27084:	e004      	b.n	27090 <legacy_request_tk+0x168>
   27086:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2708a:	e7ef      	b.n	2706c <legacy_request_tk+0x144>
   2708c:	f06f 031b 	mvn.w	r3, #27
   27090:	b13a      	cbz	r2, 270a2 <legacy_request_tk+0x17a>
   27092:	2003      	movs	r0, #3
   27094:	7038      	strb	r0, [r7, #0]
   27096:	2000      	movs	r0, #0
   27098:	7078      	strb	r0, [r7, #1]
   2709a:	70b8      	strb	r0, [r7, #2]
   2709c:	70f8      	strb	r0, [r7, #3]
   2709e:	6838      	ldr	r0, [r7, #0]
   270a0:	6108      	str	r0, [r1, #16]
   270a2:	2100      	movs	r1, #0
   270a4:	f36f 0100 	bfc	r1, #0, #1
   270a8:	f36f 0141 	bfc	r1, #1, #1
   270ac:	f36f 0182 	bfc	r1, #2, #1
   270b0:	f36f 01c5 	bfc	r1, #3, #3
   270b4:	2001      	movs	r0, #1
   270b6:	f360 1188 	bfi	r1, r0, #6, #3
   270ba:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   270be:	f363 2152 	bfi	r1, r3, #9, #10
   270c2:	f36f 41de 	bfc	r1, #19, #12
   270c6:	f36f 71df 	bfc	r1, #31, #1
   270ca:	2300      	movs	r3, #0
   270cc:	4808      	ldr	r0, [pc, #32]	; (270f0 <legacy_request_tk+0x1c8>)
   270ce:	f7ef fc3d 	bl	1694c <z_impl_z_log_msg_static_create>
   270d2:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   270d4:	2008      	movs	r0, #8
   270d6:	e7bf      	b.n	27058 <legacy_request_tk+0x130>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   270d8:	f06f 031b 	mvn.w	r3, #27
   270dc:	e7d8      	b.n	27090 <legacy_request_tk+0x168>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   270de:	2002      	movs	r0, #2
   270e0:	e7ba      	b.n	27058 <legacy_request_tk+0x130>
   270e2:	2002      	movs	r0, #2
   270e4:	e7b8      	b.n	27058 <legacy_request_tk+0x130>
				return BT_SMP_ERR_UNSPECIFIED;
   270e6:	2008      	movs	r0, #8
   270e8:	e7b6      	b.n	27058 <legacy_request_tk+0x130>
   270ea:	bf00      	nop
   270ec:	00044128 	.word	0x00044128
   270f0:	0003f418 	.word	0x0003f418
   270f4:	431bde83 	.word	0x431bde83
   270f8:	000f4240 	.word	0x000f4240
   270fc:	00043fb0 	.word	0x00043fb0

00027100 <smp_pairing_req>:
{
   27100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27104:	4604      	mov	r4, r0
   27106:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   27108:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   2710c:	f7fe ff30 	bl	25f70 <latch_auth_cb>
	struct bt_smp_pairing *req = (void *)buf->data;
   27110:	68ed      	ldr	r5, [r5, #12]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
   27112:	78eb      	ldrb	r3, [r5, #3]
   27114:	3b07      	subs	r3, #7
   27116:	b2db      	uxtb	r3, r3
   27118:	2b09      	cmp	r3, #9
   2711a:	f200 80c5 	bhi.w	272a8 <smp_pairing_req+0x1a8>
   2711e:	4607      	mov	r7, r0
	if (!conn->le.keys) {
   27120:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   27124:	2b00      	cmp	r3, #0
   27126:	f000 80a0 	beq.w	2726a <smp_pairing_req+0x16a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2712a:	f104 0804 	add.w	r8, r4, #4
   2712e:	210f      	movs	r1, #15
   27130:	4640      	mov	r0, r8
   27132:	f013 ffd8 	bl	3b0e6 <atomic_test_bit>
   27136:	b928      	cbnz	r0, 27144 <smp_pairing_req+0x44>
		int ret = smp_init(smp);
   27138:	4620      	mov	r0, r4
   2713a:	f7ff fbe1 	bl	26900 <smp_init>
		if (ret) {
   2713e:	2800      	cmp	r0, #0
   27140:	f040 809f 	bne.w	27282 <smp_pairing_req+0x182>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
   27144:	2301      	movs	r3, #1
   27146:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
   27148:	2206      	movs	r2, #6
   2714a:	4629      	mov	r1, r5
   2714c:	f104 000a 	add.w	r0, r4, #10
   27150:	f011 f953 	bl	383fa <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
   27154:	2302      	movs	r3, #2
   27156:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(smp, req->auth_req);
   27158:	78a9      	ldrb	r1, [r5, #2]
   2715a:	4620      	mov	r0, r4
   2715c:	f7fe ff46 	bl	25fec <get_auth>
   27160:	74e0      	strb	r0, [r4, #19]
	rsp->io_capability = get_io_capa(smp);
   27162:	4620      	mov	r0, r4
   27164:	f7fe ff1a 	bl	25f9c <get_io_capa>
   27168:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
   2716a:	4b51      	ldr	r3, [pc, #324]	; (272b0 <smp_pairing_req+0x1b0>)
   2716c:	781b      	ldrb	r3, [r3, #0]
   2716e:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
   27170:	2310      	movs	r3, #16
   27172:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
   27174:	792b      	ldrb	r3, [r5, #4]
   27176:	f003 0303 	and.w	r3, r3, #3
   2717a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
   2717c:	796b      	ldrb	r3, [r5, #5]
   2717e:	f003 0301 	and.w	r3, r3, #1
   27182:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   27184:	7ce3      	ldrb	r3, [r4, #19]
   27186:	f013 0f08 	tst.w	r3, #8
   2718a:	d011      	beq.n	271b0 <smp_pairing_req+0xb0>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
   2718c:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
   2718e:	f013 0f08 	tst.w	r3, #8
   27192:	d00d      	beq.n	271b0 <smp_pairing_req+0xb0>
   27194:	e8d8 3fef 	ldaex	r3, [r8]
   27198:	f043 0320 	orr.w	r3, r3, #32
   2719c:	e8c8 3fe2 	stlex	r2, r3, [r8]
   271a0:	2a00      	cmp	r2, #0
   271a2:	d1f7      	bne.n	27194 <smp_pairing_req+0x94>
		rsp->init_key_dist &= RECV_KEYS_SC;
   271a4:	7d63      	ldrb	r3, [r4, #21]
   271a6:	f003 0302 	and.w	r3, r3, #2
   271aa:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
   271ac:	2300      	movs	r3, #0
   271ae:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   271b0:	7ce3      	ldrb	r3, [r4, #19]
   271b2:	f013 0f20 	tst.w	r3, #32
   271b6:	d00b      	beq.n	271d0 <smp_pairing_req+0xd0>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
   271b8:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   271ba:	f013 0f20 	tst.w	r3, #32
   271be:	d007      	beq.n	271d0 <smp_pairing_req+0xd0>
   271c0:	e8d8 3fef 	ldaex	r3, [r8]
   271c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   271c8:	e8c8 3fe2 	stlex	r2, r3, [r8]
   271cc:	2a00      	cmp	r2, #0
   271ce:	d1f7      	bne.n	271c0 <smp_pairing_req+0xc0>
	smp->local_dist = rsp->resp_key_dist;
   271d0:	7da3      	ldrb	r3, [r4, #22]
   271d2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
   271d6:	7d63      	ldrb	r3, [r4, #21]
   271d8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   271dc:	7ce3      	ldrb	r3, [r4, #19]
   271de:	f013 0f01 	tst.w	r3, #1
   271e2:	d00b      	beq.n	271fc <smp_pairing_req+0xfc>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
   271e4:	78ab      	ldrb	r3, [r5, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   271e6:	f013 0f01 	tst.w	r3, #1
   271ea:	d007      	beq.n	271fc <smp_pairing_req+0xfc>
   271ec:	e8d8 3fef 	ldaex	r3, [r8]
   271f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   271f4:	e8c8 3fe2 	stlex	r2, r3, [r8]
   271f8:	2a00      	cmp	r2, #0
   271fa:	d1f7      	bne.n	271ec <smp_pairing_req+0xec>
   271fc:	e8d8 3fef 	ldaex	r3, [r8]
   27200:	f043 0308 	orr.w	r3, r3, #8
   27204:	e8c8 3fe2 	stlex	r2, r3, [r8]
   27208:	2a00      	cmp	r2, #0
   2720a:	d1f7      	bne.n	271fc <smp_pairing_req+0xfc>
	smp->method = get_pair_method(smp, req->io_capability);
   2720c:	7829      	ldrb	r1, [r5, #0]
   2720e:	4620      	mov	r0, r4
   27210:	f7fe ff36 	bl	26080 <get_pair_method>
   27214:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   27216:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
   2721a:	4620      	mov	r0, r4
   2721c:	f013 ffad 	bl	3b17a <update_keys_check>
   27220:	2800      	cmp	r0, #0
   27222:	d043      	beq.n	272ac <smp_pairing_req+0x1ac>
	err = remote_sec_level_reachable(smp);
   27224:	4620      	mov	r0, r4
   27226:	f013 ffd6 	bl	3b1d6 <remote_sec_level_reachable>
	if (err) {
   2722a:	4605      	mov	r5, r0
   2722c:	b9d0      	cbnz	r0, 27264 <smp_pairing_req+0x164>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2722e:	2105      	movs	r1, #5
   27230:	4640      	mov	r0, r8
   27232:	f013 ff58 	bl	3b0e6 <atomic_test_bit>
   27236:	b330      	cbz	r0, 27286 <smp_pairing_req+0x186>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   27238:	7a25      	ldrb	r5, [r4, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_SC_PAIR_ONLY) &&
   2723a:	b93d      	cbnz	r5, 2724c <smp_pairing_req+0x14c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   2723c:	210f      	movs	r1, #15
   2723e:	4640      	mov	r0, r8
   27240:	f013 ff51 	bl	3b0e6 <atomic_test_bit>
	    (DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   27244:	b910      	cbnz	r0, 2724c <smp_pairing_req+0x14c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   27246:	b10f      	cbz	r7, 2724c <smp_pairing_req+0x14c>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   27248:	697b      	ldr	r3, [r7, #20]
   2724a:	bb0b      	cbnz	r3, 27290 <smp_pairing_req+0x190>
   2724c:	e8d4 3fef 	ldaex	r3, [r4]
   27250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   27254:	e8c4 3fe2 	stlex	r2, r3, [r4]
   27258:	2a00      	cmp	r2, #0
   2725a:	d1f7      	bne.n	2724c <smp_pairing_req+0x14c>
	return send_pairing_rsp(smp);
   2725c:	4620      	mov	r0, r4
   2725e:	f014 f941 	bl	3b4e4 <send_pairing_rsp>
   27262:	4605      	mov	r5, r0
}
   27264:	4628      	mov	r0, r5
   27266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2726a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   2726e:	7a30      	ldrb	r0, [r6, #8]
   27270:	f001 fa08 	bl	28684 <bt_keys_get_addr>
   27274:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
		if (!conn->le.keys) {
   27278:	2800      	cmp	r0, #0
   2727a:	f47f af56 	bne.w	2712a <smp_pairing_req+0x2a>
			return BT_SMP_ERR_UNSPECIFIED;
   2727e:	2508      	movs	r5, #8
   27280:	e7f0      	b.n	27264 <smp_pairing_req+0x164>
			return ret;
   27282:	b2c5      	uxtb	r5, r0
   27284:	e7ee      	b.n	27264 <smp_pairing_req+0x164>
		return legacy_pairing_req(smp);
   27286:	4620      	mov	r0, r4
   27288:	f014 fa77 	bl	3b77a <legacy_pairing_req>
   2728c:	4605      	mov	r5, r0
   2728e:	e7e9      	b.n	27264 <smp_pairing_req+0x164>
   27290:	e8d8 3fef 	ldaex	r3, [r8]
   27294:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27298:	e8c8 3fe2 	stlex	r2, r3, [r8]
   2729c:	2a00      	cmp	r2, #0
   2729e:	d1f7      	bne.n	27290 <smp_pairing_req+0x190>
		smp_auth_cb->pairing_confirm(conn);
   272a0:	697b      	ldr	r3, [r7, #20]
   272a2:	4630      	mov	r0, r6
   272a4:	4798      	blx	r3
		return 0;
   272a6:	e7dd      	b.n	27264 <smp_pairing_req+0x164>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   272a8:	2506      	movs	r5, #6
   272aa:	e7db      	b.n	27264 <smp_pairing_req+0x164>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   272ac:	2503      	movs	r5, #3
   272ae:	e7d9      	b.n	27264 <smp_pairing_req+0x164>
   272b0:	2000cab6 	.word	0x2000cab6

000272b4 <smp_ident_info>:
{
   272b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   272b6:	b083      	sub	sp, #12
   272b8:	af00      	add	r7, sp, #0
   272ba:	4604      	mov	r4, r0
   272bc:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   272be:	210d      	movs	r1, #13
   272c0:	3004      	adds	r0, #4
   272c2:	f013 ff10 	bl	3b0e6 <atomic_test_bit>
   272c6:	b178      	cbz	r0, 272e8 <smp_ident_info+0x34>
		struct bt_smp_ident_info *req = (void *)buf->data;
   272c8:	68ee      	ldr	r6, [r5, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   272ca:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   272ce:	f103 0590 	add.w	r5, r3, #144	; 0x90
   272d2:	462a      	mov	r2, r5
   272d4:	7a19      	ldrb	r1, [r3, #8]
   272d6:	2002      	movs	r0, #2
   272d8:	f001 fb5a 	bl	28990 <bt_keys_get_type>
		if (!keys) {
   272dc:	b180      	cbz	r0, 27300 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
   272de:	2210      	movs	r2, #16
   272e0:	4631      	mov	r1, r6
   272e2:	302a      	adds	r0, #42	; 0x2a
   272e4:	f011 f889 	bl	383fa <memcpy>
   272e8:	e8d4 3fef 	ldaex	r3, [r4]
   272ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   272f0:	e8c4 3fe2 	stlex	r2, r3, [r4]
   272f4:	2a00      	cmp	r2, #0
   272f6:	d1f7      	bne.n	272e8 <smp_ident_info+0x34>
	return 0;
   272f8:	2000      	movs	r0, #0
}
   272fa:	370c      	adds	r7, #12
   272fc:	46bd      	mov	sp, r7
   272fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   27300:	4628      	mov	r0, r5
   27302:	f7f3 fcf1 	bl	1ace8 <bt_addr_le_str>
   27306:	466d      	mov	r5, sp
   27308:	2300      	movs	r3, #0
   2730a:	713b      	strb	r3, [r7, #4]
   2730c:	2302      	movs	r3, #2
   2730e:	717b      	strb	r3, [r7, #5]
   27310:	b088      	sub	sp, #32
   27312:	466c      	mov	r4, sp
   27314:	f114 0210 	adds.w	r2, r4, #16
   27318:	d011      	beq.n	2733e <smp_ident_info+0x8a>
   2731a:	260e      	movs	r6, #14
   2731c:	b11a      	cbz	r2, 27326 <smp_ident_info+0x72>
   2731e:	2e04      	cmp	r6, #4
   27320:	dd01      	ble.n	27326 <smp_ident_info+0x72>
   27322:	4b23      	ldr	r3, [pc, #140]	; (273b0 <smp_ident_info+0xfc>)
   27324:	6163      	str	r3, [r4, #20]
   27326:	2300      	movs	r3, #0
   27328:	703b      	strb	r3, [r7, #0]
   2732a:	2302      	movs	r3, #2
   2732c:	707b      	strb	r3, [r7, #1]
   2732e:	b19a      	cbz	r2, 27358 <smp_ident_info+0xa4>
   27330:	2e08      	cmp	r6, #8
   27332:	dd00      	ble.n	27336 <smp_ident_info+0x82>
   27334:	61a0      	str	r0, [r4, #24]
   27336:	f104 031c 	add.w	r3, r4, #28
   2733a:	2100      	movs	r1, #0
   2733c:	e00a      	b.n	27354 <smp_ident_info+0xa0>
   2733e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   27342:	e7eb      	b.n	2731c <smp_ident_info+0x68>
   27344:	f101 0008 	add.w	r0, r1, #8
   27348:	4438      	add	r0, r7
   2734a:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   2734e:	f803 0b01 	strb.w	r0, [r3], #1
   27352:	3101      	adds	r1, #1
   27354:	2901      	cmp	r1, #1
   27356:	d9f5      	bls.n	27344 <smp_ident_info+0x90>
   27358:	2e0d      	cmp	r6, #13
   2735a:	dd25      	ble.n	273a8 <smp_ident_info+0xf4>
   2735c:	230e      	movs	r3, #14
   2735e:	b142      	cbz	r2, 27372 <smp_ident_info+0xbe>
   27360:	2103      	movs	r1, #3
   27362:	7139      	strb	r1, [r7, #4]
   27364:	2100      	movs	r1, #0
   27366:	7179      	strb	r1, [r7, #5]
   27368:	71b9      	strb	r1, [r7, #6]
   2736a:	2101      	movs	r1, #1
   2736c:	71f9      	strb	r1, [r7, #7]
   2736e:	6878      	ldr	r0, [r7, #4]
   27370:	6120      	str	r0, [r4, #16]
   27372:	2100      	movs	r1, #0
   27374:	f36f 0100 	bfc	r1, #0, #1
   27378:	f36f 0141 	bfc	r1, #1, #1
   2737c:	f36f 0182 	bfc	r1, #2, #1
   27380:	f36f 01c5 	bfc	r1, #3, #3
   27384:	2001      	movs	r0, #1
   27386:	f360 1188 	bfi	r1, r0, #6, #3
   2738a:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2738e:	f363 2152 	bfi	r1, r3, #9, #10
   27392:	f36f 41de 	bfc	r1, #19, #12
   27396:	f36f 71df 	bfc	r1, #31, #1
   2739a:	2300      	movs	r3, #0
   2739c:	4805      	ldr	r0, [pc, #20]	; (273b4 <smp_ident_info+0x100>)
   2739e:	f7ef fad5 	bl	1694c <z_impl_z_log_msg_static_create>
   273a2:	46ad      	mov	sp, r5
			return BT_SMP_ERR_UNSPECIFIED;
   273a4:	2008      	movs	r0, #8
   273a6:	e7a8      	b.n	272fa <smp_ident_info+0x46>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   273a8:	f06f 031b 	mvn.w	r3, #27
   273ac:	e7d7      	b.n	2735e <smp_ident_info+0xaa>
   273ae:	bf00      	nop
   273b0:	00044158 	.word	0x00044158
   273b4:	0003f418 	.word	0x0003f418

000273b8 <smp_encrypt_info>:
{
   273b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   273ba:	b083      	sub	sp, #12
   273bc:	af00      	add	r7, sp, #0
   273be:	4604      	mov	r4, r0
   273c0:	460d      	mov	r5, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   273c2:	210d      	movs	r1, #13
   273c4:	3004      	adds	r0, #4
   273c6:	f013 fe8e 	bl	3b0e6 <atomic_test_bit>
   273ca:	b178      	cbz	r0, 273ec <smp_encrypt_info+0x34>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   273cc:	68ee      	ldr	r6, [r5, #12]
		struct bt_conn *conn = smp->chan.chan.conn;
   273ce:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   273d2:	f103 0590 	add.w	r5, r3, #144	; 0x90
   273d6:	462a      	mov	r2, r5
   273d8:	7a19      	ldrb	r1, [r3, #8]
   273da:	2004      	movs	r0, #4
   273dc:	f001 fad8 	bl	28990 <bt_keys_get_type>
		if (!keys) {
   273e0:	b180      	cbz	r0, 27404 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
   273e2:	2210      	movs	r2, #16
   273e4:	4631      	mov	r1, r6
   273e6:	301a      	adds	r0, #26
   273e8:	f011 f807 	bl	383fa <memcpy>
   273ec:	e8d4 3fef 	ldaex	r3, [r4]
   273f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   273f4:	e8c4 3fe2 	stlex	r2, r3, [r4]
   273f8:	2a00      	cmp	r2, #0
   273fa:	d1f7      	bne.n	273ec <smp_encrypt_info+0x34>
	return 0;
   273fc:	2000      	movs	r0, #0
}
   273fe:	370c      	adds	r7, #12
   27400:	46bd      	mov	sp, r7
   27402:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   27404:	4628      	mov	r0, r5
   27406:	f7f3 fc6f 	bl	1ace8 <bt_addr_le_str>
   2740a:	466d      	mov	r5, sp
   2740c:	2300      	movs	r3, #0
   2740e:	713b      	strb	r3, [r7, #4]
   27410:	2302      	movs	r3, #2
   27412:	717b      	strb	r3, [r7, #5]
   27414:	b088      	sub	sp, #32
   27416:	466c      	mov	r4, sp
   27418:	f114 0210 	adds.w	r2, r4, #16
   2741c:	d011      	beq.n	27442 <smp_encrypt_info+0x8a>
   2741e:	260e      	movs	r6, #14
   27420:	b11a      	cbz	r2, 2742a <smp_encrypt_info+0x72>
   27422:	2e04      	cmp	r6, #4
   27424:	dd01      	ble.n	2742a <smp_encrypt_info+0x72>
   27426:	4b23      	ldr	r3, [pc, #140]	; (274b4 <smp_encrypt_info+0xfc>)
   27428:	6163      	str	r3, [r4, #20]
   2742a:	2300      	movs	r3, #0
   2742c:	703b      	strb	r3, [r7, #0]
   2742e:	2302      	movs	r3, #2
   27430:	707b      	strb	r3, [r7, #1]
   27432:	b19a      	cbz	r2, 2745c <smp_encrypt_info+0xa4>
   27434:	2e08      	cmp	r6, #8
   27436:	dd00      	ble.n	2743a <smp_encrypt_info+0x82>
   27438:	61a0      	str	r0, [r4, #24]
   2743a:	f104 031c 	add.w	r3, r4, #28
   2743e:	2100      	movs	r1, #0
   27440:	e00a      	b.n	27458 <smp_encrypt_info+0xa0>
   27442:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   27446:	e7eb      	b.n	27420 <smp_encrypt_info+0x68>
   27448:	f101 0008 	add.w	r0, r1, #8
   2744c:	4438      	add	r0, r7
   2744e:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   27452:	f803 0b01 	strb.w	r0, [r3], #1
   27456:	3101      	adds	r1, #1
   27458:	2901      	cmp	r1, #1
   2745a:	d9f5      	bls.n	27448 <smp_encrypt_info+0x90>
   2745c:	2e0d      	cmp	r6, #13
   2745e:	dd25      	ble.n	274ac <smp_encrypt_info+0xf4>
   27460:	230e      	movs	r3, #14
   27462:	b142      	cbz	r2, 27476 <smp_encrypt_info+0xbe>
   27464:	2103      	movs	r1, #3
   27466:	7139      	strb	r1, [r7, #4]
   27468:	2100      	movs	r1, #0
   2746a:	7179      	strb	r1, [r7, #5]
   2746c:	71b9      	strb	r1, [r7, #6]
   2746e:	2101      	movs	r1, #1
   27470:	71f9      	strb	r1, [r7, #7]
   27472:	6878      	ldr	r0, [r7, #4]
   27474:	6120      	str	r0, [r4, #16]
   27476:	2100      	movs	r1, #0
   27478:	f36f 0100 	bfc	r1, #0, #1
   2747c:	f36f 0141 	bfc	r1, #1, #1
   27480:	f36f 0182 	bfc	r1, #2, #1
   27484:	f36f 01c5 	bfc	r1, #3, #3
   27488:	2001      	movs	r0, #1
   2748a:	f360 1188 	bfi	r1, r0, #6, #3
   2748e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   27492:	f363 2152 	bfi	r1, r3, #9, #10
   27496:	f36f 41de 	bfc	r1, #19, #12
   2749a:	f36f 71df 	bfc	r1, #31, #1
   2749e:	2300      	movs	r3, #0
   274a0:	4805      	ldr	r0, [pc, #20]	; (274b8 <smp_encrypt_info+0x100>)
   274a2:	f7ef fa53 	bl	1694c <z_impl_z_log_msg_static_create>
   274a6:	46ad      	mov	sp, r5
			return BT_SMP_ERR_UNSPECIFIED;
   274a8:	2008      	movs	r0, #8
   274aa:	e7a8      	b.n	273fe <smp_encrypt_info+0x46>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   274ac:	f06f 031b 	mvn.w	r3, #27
   274b0:	e7d7      	b.n	27462 <smp_encrypt_info+0xaa>
   274b2:	bf00      	nop
   274b4:	00044158 	.word	0x00044158
   274b8:	0003f418 	.word	0x0003f418

000274bc <smp_id_add_replace>:
{
   274bc:	b530      	push	{r4, r5, lr}
   274be:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   274c0:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   274c4:	f013 0402 	ands.w	r4, r3, #2
   274c8:	d10f      	bne.n	274ea <smp_id_add_replace+0x2e>
   274ca:	460d      	mov	r5, r1
	conflict = bt_id_find_conflict(new_bond);
   274cc:	4608      	mov	r0, r1
   274ce:	f7f6 ff95 	bl	1e3fc <bt_id_find_conflict>
	if (conflict && !IS_ENABLED(CONFIG_BT_ID_UNPAIR_MATCHING_BONDS)) {
   274d2:	b9b8      	cbnz	r0, 27504 <smp_id_add_replace+0x48>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   274d4:	4628      	mov	r0, r5
   274d6:	f7f6 ff91 	bl	1e3fc <bt_id_find_conflict>
   274da:	2800      	cmp	r0, #0
   274dc:	d138      	bne.n	27550 <smp_id_add_replace+0x94>
	bt_id_add(new_bond);
   274de:	4628      	mov	r0, r5
   274e0:	f7f6 ff9e 	bl	1e420 <bt_id_add>
}
   274e4:	4620      	mov	r0, r4
   274e6:	b009      	add	sp, #36	; 0x24
   274e8:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(!(smp->remote_dist & BT_SMP_DIST_ID_KEY));
   274ea:	4c20      	ldr	r4, [pc, #128]	; (2756c <smp_id_add_replace+0xb0>)
   274ec:	f640 6363 	movw	r3, #3683	; 0xe63
   274f0:	4622      	mov	r2, r4
   274f2:	491f      	ldr	r1, [pc, #124]	; (27570 <smp_id_add_replace+0xb4>)
   274f4:	481f      	ldr	r0, [pc, #124]	; (27574 <smp_id_add_replace+0xb8>)
   274f6:	f00e fecd 	bl	36294 <assert_print>
   274fa:	f640 6163 	movw	r1, #3683	; 0xe63
   274fe:	4620      	mov	r0, r4
   27500:	f00e fec1 	bl	36286 <assert_post_action>
		LOG_WRN("Refusing new pairing. The old bond must be unpaired first.");
   27504:	4b1c      	ldr	r3, [pc, #112]	; (27578 <smp_id_add_replace+0xbc>)
   27506:	9307      	str	r3, [sp, #28]
   27508:	2202      	movs	r2, #2
   2750a:	f88d 2004 	strb.w	r2, [sp, #4]
   2750e:	2300      	movs	r3, #0
   27510:	f88d 3005 	strb.w	r3, [sp, #5]
   27514:	f88d 3006 	strb.w	r3, [sp, #6]
   27518:	f88d 3007 	strb.w	r3, [sp, #7]
   2751c:	9901      	ldr	r1, [sp, #4]
   2751e:	9106      	str	r1, [sp, #24]
   27520:	4619      	mov	r1, r3
   27522:	f363 0100 	bfi	r1, r3, #0, #1
   27526:	f363 0141 	bfi	r1, r3, #1, #1
   2752a:	f363 0182 	bfi	r1, r3, #2, #1
   2752e:	f363 01c5 	bfi	r1, r3, #3, #3
   27532:	f362 1188 	bfi	r1, r2, #6, #3
   27536:	2208      	movs	r2, #8
   27538:	f362 2152 	bfi	r1, r2, #9, #10
   2753c:	f363 41de 	bfi	r1, r3, #19, #12
   27540:	f363 71df 	bfi	r1, r3, #31, #1
   27544:	aa06      	add	r2, sp, #24
   27546:	480d      	ldr	r0, [pc, #52]	; (2757c <smp_id_add_replace+0xc0>)
   27548:	f7ef fa00 	bl	1694c <z_impl_z_log_msg_static_create>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2754c:	2403      	movs	r4, #3
   2754e:	e7c9      	b.n	274e4 <smp_id_add_replace+0x28>
	__ASSERT_NO_MSG(!bt_id_find_conflict(new_bond));
   27550:	4c06      	ldr	r4, [pc, #24]	; (2756c <smp_id_add_replace+0xb0>)
   27552:	f640 637f 	movw	r3, #3711	; 0xe7f
   27556:	4622      	mov	r2, r4
   27558:	4909      	ldr	r1, [pc, #36]	; (27580 <smp_id_add_replace+0xc4>)
   2755a:	4806      	ldr	r0, [pc, #24]	; (27574 <smp_id_add_replace+0xb8>)
   2755c:	f00e fe9a 	bl	36294 <assert_print>
   27560:	f640 617f 	movw	r1, #3711	; 0xe7f
   27564:	4620      	mov	r0, r4
   27566:	f00e fe8e 	bl	36286 <assert_post_action>
   2756a:	bf00      	nop
   2756c:	00044174 	.word	0x00044174
   27570:	000441a4 	.word	0x000441a4
   27574:	0003f72c 	.word	0x0003f72c
   27578:	000441c0 	.word	0x000441c0
   2757c:	0003f418 	.word	0x0003f418
   27580:	000441fc 	.word	0x000441fc

00027584 <smp_pairing_random>:
{
   27584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27588:	b085      	sub	sp, #20
   2758a:	af02      	add	r7, sp, #8
   2758c:	4604      	mov	r4, r0
   2758e:	460d      	mov	r5, r1
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   27590:	f7fe fcee 	bl	25f70 <latch_auth_cb>
   27594:	4680      	mov	r8, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   27596:	f104 0937 	add.w	r9, r4, #55	; 0x37
   2759a:	2210      	movs	r2, #16
   2759c:	68e9      	ldr	r1, [r5, #12]
   2759e:	4648      	mov	r0, r9
   275a0:	f010 ff2b 	bl	383fa <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   275a4:	1d26      	adds	r6, r4, #4
   275a6:	2105      	movs	r1, #5
   275a8:	4630      	mov	r0, r6
   275aa:	f013 fd9c 	bl	3b0e6 <atomic_test_bit>
   275ae:	b140      	cbz	r0, 275c2 <smp_pairing_random+0x3e>
	switch (smp->method) {
   275b0:	7a23      	ldrb	r3, [r4, #8]
   275b2:	2b05      	cmp	r3, #5
   275b4:	f200 809e 	bhi.w	276f4 <smp_pairing_random+0x170>
   275b8:	e8df f003 	tbb	[pc, r3]
   275bc:	083d3d24 	.word	0x083d3d24
   275c0:	739c      	.short	0x739c
		return legacy_pairing_random(smp);
   275c2:	4620      	mov	r0, r4
   275c4:	f7fe fdca 	bl	2615c <legacy_pairing_random>
   275c8:	4605      	mov	r5, r0
   275ca:	e02f      	b.n	2762c <smp_pairing_random+0xa8>
		if (bt_crypto_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd, &passkey)) {
   275cc:	4b6c      	ldr	r3, [pc, #432]	; (27780 <smp_pairing_random+0x1fc>)
   275ce:	6819      	ldr	r1, [r3, #0]
   275d0:	1d3b      	adds	r3, r7, #4
   275d2:	9300      	str	r3, [sp, #0]
   275d4:	f104 0327 	add.w	r3, r4, #39	; 0x27
   275d8:	464a      	mov	r2, r9
   275da:	f104 0057 	add.w	r0, r4, #87	; 0x57
   275de:	f001 fdb5 	bl	2914c <bt_crypto_g2>
   275e2:	2800      	cmp	r0, #0
   275e4:	f040 80c3 	bne.w	2776e <smp_pairing_random+0x1ea>
   275e8:	e8d6 3fef 	ldaex	r3, [r6]
   275ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   275f0:	e8c6 3fe2 	stlex	r2, r3, [r6]
   275f4:	2a00      	cmp	r2, #0
   275f6:	d1f7      	bne.n	275e8 <smp_pairing_random+0x64>
		smp_auth_cb->passkey_confirm(smp->chan.chan.conn, passkey);
   275f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   275fc:	6879      	ldr	r1, [r7, #4]
   275fe:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   27602:	4798      	blx	r3
   27604:	e8d4 3fef 	ldaex	r3, [r4]
   27608:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   2760c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   27610:	2a00      	cmp	r2, #0
   27612:	d1f7      	bne.n	27604 <smp_pairing_random+0x80>
   27614:	e8d6 3fef 	ldaex	r3, [r6]
   27618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2761c:	e8c6 3fe2 	stlex	r2, r3, [r6]
   27620:	2a00      	cmp	r2, #0
   27622:	d1f7      	bne.n	27614 <smp_pairing_random+0x90>
	return smp_send_pairing_random(smp);
   27624:	4620      	mov	r0, r4
   27626:	f013 ff42 	bl	3b4ae <smp_send_pairing_random>
   2762a:	4605      	mov	r5, r0
}
   2762c:	4628      	mov	r0, r5
   2762e:	370c      	adds	r7, #12
   27630:	46bd      	mov	sp, r7
   27632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = sc_smp_check_confirm(smp);
   27636:	4620      	mov	r0, r4
   27638:	f7fe ff3a 	bl	264b0 <sc_smp_check_confirm>
		if (err) {
   2763c:	4605      	mov	r5, r0
   2763e:	2800      	cmp	r0, #0
   27640:	d1f4      	bne.n	2762c <smp_pairing_random+0xa8>
   27642:	e8d4 3fef 	ldaex	r3, [r4]
   27646:	f043 0308 	orr.w	r3, r3, #8
   2764a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2764e:	2a00      	cmp	r2, #0
   27650:	d1f7      	bne.n	27642 <smp_pairing_random+0xbe>
		err = smp_send_pairing_random(smp);
   27652:	4620      	mov	r0, r4
   27654:	f013 ff2b 	bl	3b4ae <smp_send_pairing_random>
		if (err) {
   27658:	4605      	mov	r5, r0
   2765a:	2800      	cmp	r0, #0
   2765c:	d1e6      	bne.n	2762c <smp_pairing_random+0xa8>
		smp->passkey_round++;
   2765e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   27662:	3301      	adds	r3, #1
   27664:	b2db      	uxtb	r3, r3
   27666:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   2766a:	2b14      	cmp	r3, #20
   2766c:	d008      	beq.n	27680 <smp_pairing_random+0xfc>
		if (bt_rand(smp->prnd, 16)) {
   2766e:	2110      	movs	r1, #16
   27670:	f104 0027 	add.w	r0, r4, #39	; 0x27
   27674:	f7f7 ff9c 	bl	1f5b0 <bt_rand>
   27678:	2800      	cmp	r0, #0
   2767a:	d0d7      	beq.n	2762c <smp_pairing_random+0xa8>
			return BT_SMP_ERR_UNSPECIFIED;
   2767c:	2508      	movs	r5, #8
   2767e:	e7d5      	b.n	2762c <smp_pairing_random+0xa8>
   27680:	e8d4 3fef 	ldaex	r3, [r4]
   27684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   27688:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2768c:	2a00      	cmp	r2, #0
   2768e:	d1f7      	bne.n	27680 <smp_pairing_random+0xfc>
   27690:	e8d6 3fef 	ldaex	r3, [r6]
   27694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   27698:	e8c6 3fe2 	stlex	r2, r3, [r6]
   2769c:	2a00      	cmp	r2, #0
   2769e:	d0c5      	beq.n	2762c <smp_pairing_random+0xa8>
   276a0:	e7f6      	b.n	27690 <smp_pairing_random+0x10c>
		if (bt_rand(smp->prnd, 16)) {
   276a2:	2110      	movs	r1, #16
   276a4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   276a8:	f7f7 ff82 	bl	1f5b0 <bt_rand>
   276ac:	2800      	cmp	r0, #0
   276ae:	d160      	bne.n	27772 <smp_pairing_random+0x1ee>
		if (smp_auth_cb && smp_auth_cb->oob_data_request) {
   276b0:	f1b8 0f00 	cmp.w	r8, #0
   276b4:	d05f      	beq.n	27776 <smp_pairing_random+0x1f2>
   276b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   276ba:	2b00      	cmp	r3, #0
   276bc:	d05d      	beq.n	2777a <smp_pairing_random+0x1f6>
			struct bt_conn_oob_info info = {
   276be:	4b31      	ldr	r3, [pc, #196]	; (27784 <smp_pairing_random+0x200>)
   276c0:	881b      	ldrh	r3, [r3, #0]
   276c2:	803b      	strh	r3, [r7, #0]
			le_sc_oob_config_set(smp, &info);
   276c4:	4639      	mov	r1, r7
   276c6:	4620      	mov	r0, r4
   276c8:	f013 fceb 	bl	3b0a2 <le_sc_oob_config_set>
			smp->oobd_local = NULL;
   276cc:	2500      	movs	r5, #0
   276ce:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
			smp->oobd_remote = NULL;
   276d2:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
   276d6:	e8d6 3fef 	ldaex	r3, [r6]
   276da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   276de:	e8c6 3fe2 	stlex	r2, r3, [r6]
   276e2:	2a00      	cmp	r2, #0
   276e4:	d1f7      	bne.n	276d6 <smp_pairing_random+0x152>
			smp_auth_cb->oob_data_request(smp->chan.chan.conn, &info);
   276e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   276ea:	4639      	mov	r1, r7
   276ec:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   276f0:	4798      	blx	r3
			return 0;
   276f2:	e79b      	b.n	2762c <smp_pairing_random+0xa8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   276f4:	466c      	mov	r4, sp
   276f6:	b088      	sub	sp, #32
   276f8:	a902      	add	r1, sp, #8
   276fa:	f111 0210 	adds.w	r2, r1, #16
   276fe:	d030      	beq.n	27762 <smp_pairing_random+0x1de>
   27700:	200c      	movs	r0, #12
   27702:	b13a      	cbz	r2, 27714 <smp_pairing_random+0x190>
   27704:	4605      	mov	r5, r0
   27706:	2804      	cmp	r0, #4
   27708:	dd01      	ble.n	2770e <smp_pairing_random+0x18a>
   2770a:	4e1f      	ldr	r6, [pc, #124]	; (27788 <smp_pairing_random+0x204>)
   2770c:	614e      	str	r6, [r1, #20]
   2770e:	2d08      	cmp	r5, #8
   27710:	dd00      	ble.n	27714 <smp_pairing_random+0x190>
   27712:	618b      	str	r3, [r1, #24]
   27714:	280b      	cmp	r0, #11
   27716:	dd27      	ble.n	27768 <smp_pairing_random+0x1e4>
   27718:	230c      	movs	r3, #12
   2771a:	b13a      	cbz	r2, 2772c <smp_pairing_random+0x1a8>
   2771c:	2003      	movs	r0, #3
   2771e:	7038      	strb	r0, [r7, #0]
   27720:	2000      	movs	r0, #0
   27722:	7078      	strb	r0, [r7, #1]
   27724:	70b8      	strb	r0, [r7, #2]
   27726:	70f8      	strb	r0, [r7, #3]
   27728:	6838      	ldr	r0, [r7, #0]
   2772a:	6108      	str	r0, [r1, #16]
   2772c:	2100      	movs	r1, #0
   2772e:	f36f 0100 	bfc	r1, #0, #1
   27732:	f36f 0141 	bfc	r1, #1, #1
   27736:	f36f 0182 	bfc	r1, #2, #1
   2773a:	f36f 01c5 	bfc	r1, #3, #3
   2773e:	2001      	movs	r0, #1
   27740:	f360 1188 	bfi	r1, r0, #6, #3
   27744:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   27748:	f363 2152 	bfi	r1, r3, #9, #10
   2774c:	f36f 41de 	bfc	r1, #19, #12
   27750:	f36f 71df 	bfc	r1, #31, #1
   27754:	2300      	movs	r3, #0
   27756:	480d      	ldr	r0, [pc, #52]	; (2778c <smp_pairing_random+0x208>)
   27758:	f7ef f8f8 	bl	1694c <z_impl_z_log_msg_static_create>
   2775c:	46a5      	mov	sp, r4
		return BT_SMP_ERR_UNSPECIFIED;
   2775e:	2508      	movs	r5, #8
   27760:	e764      	b.n	2762c <smp_pairing_random+0xa8>
		LOG_ERR("Unknown pairing method (%u)", smp->method);
   27762:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27766:	e7cc      	b.n	27702 <smp_pairing_random+0x17e>
   27768:	f06f 031b 	mvn.w	r3, #27
   2776c:	e7d5      	b.n	2771a <smp_pairing_random+0x196>
			return BT_SMP_ERR_UNSPECIFIED;
   2776e:	2508      	movs	r5, #8
   27770:	e75c      	b.n	2762c <smp_pairing_random+0xa8>
			return BT_SMP_ERR_UNSPECIFIED;
   27772:	2508      	movs	r5, #8
   27774:	e75a      	b.n	2762c <smp_pairing_random+0xa8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   27776:	2502      	movs	r5, #2
   27778:	e758      	b.n	2762c <smp_pairing_random+0xa8>
   2777a:	2502      	movs	r5, #2
   2777c:	e756      	b.n	2762c <smp_pairing_random+0xa8>
   2777e:	bf00      	nop
   27780:	2000c29c 	.word	0x2000c29c
   27784:	0003f660 	.word	0x0003f660
   27788:	00043fb0 	.word	0x00043fb0
   2778c:	0003f418 	.word	0x0003f418

00027790 <bt_smp_connected>:
{
   27790:	b538      	push	{r3, r4, r5, lr}
   27792:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   27794:	f1a0 05ec 	sub.w	r5, r0, #236	; 0xec
	k_work_init_delayable(&smp->work, smp_timeout);
   27798:	4907      	ldr	r1, [pc, #28]	; (277b8 <bt_smp_connected+0x28>)
   2779a:	3094      	adds	r0, #148	; 0x94
   2779c:	f00b f802 	bl	327a4 <k_work_init_delayable>
	smp_reset(smp);
   277a0:	4628      	mov	r0, r5
   277a2:	f013 fd3f 	bl	3b224 <smp_reset>
	atomic_ptr_set(&smp->auth_cb, BT_SMP_AUTH_CB_UNINITIALIZED);
   277a6:	34c4      	adds	r4, #196	; 0xc4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   277a8:	4b04      	ldr	r3, [pc, #16]	; (277bc <bt_smp_connected+0x2c>)
   277aa:	e8d4 2fef 	ldaex	r2, [r4]
   277ae:	e8c4 3fe1 	stlex	r1, r3, [r4]
   277b2:	2900      	cmp	r1, #0
   277b4:	d1f9      	bne.n	277aa <bt_smp_connected+0x1a>
}
   277b6:	bd38      	pop	{r3, r4, r5, pc}
   277b8:	000283dd 	.word	0x000283dd
   277bc:	2000b798 	.word	0x2000b798

000277c0 <smp_pairing_complete>:
{
   277c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277c2:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   277c4:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	if (!status) {
   277c8:	b359      	cbz	r1, 27822 <smp_pairing_complete+0x62>
   277ca:	4608      	mov	r0, r1
		enum bt_security_err security_err = security_err_get(status);
   277cc:	f013 fbfe 	bl	3afcc <security_err_get>
   277d0:	4607      	mov	r7, r0
		if (conn->le.keys &&
   277d2:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   277d6:	b16b      	cbz	r3, 277f4 <smp_pairing_complete+0x34>
		    (!conn->le.keys->enc_size ||
   277d8:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys &&
   277da:	b123      	cbz	r3, 277e6 <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   277dc:	2102      	movs	r1, #2
   277de:	1d30      	adds	r0, r6, #4
   277e0:	f013 fc81 	bl	3b0e6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   277e4:	b130      	cbz	r0, 277f4 <smp_pairing_complete+0x34>
			bt_keys_clear(conn->le.keys);
   277e6:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   277ea:	f001 f8f9 	bl	289e0 <bt_keys_clear>
			conn->le.keys = NULL;
   277ee:	2300      	movs	r3, #0
   277f0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   277f4:	1d34      	adds	r4, r6, #4
   277f6:	2102      	movs	r1, #2
   277f8:	4620      	mov	r0, r4
   277fa:	f013 fc74 	bl	3b0e6 <atomic_test_bit>
   277fe:	2800      	cmp	r0, #0
   27800:	d037      	beq.n	27872 <smp_pairing_complete+0xb2>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   27802:	2103      	movs	r1, #3
   27804:	4620      	mov	r0, r4
   27806:	f013 fc6e 	bl	3b0e6 <atomic_test_bit>
   2780a:	2800      	cmp	r0, #0
   2780c:	d04c      	beq.n	278a8 <smp_pairing_complete+0xe8>
	return list->head;
   2780e:	4b2c      	ldr	r3, [pc, #176]	; (278c0 <smp_pairing_complete+0x100>)
   27810:	681a      	ldr	r2, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   27812:	2a00      	cmp	r2, #0
   27814:	d036      	beq.n	27884 <smp_pairing_complete+0xc4>
	return node->next;
   27816:	f852 490c 	ldr.w	r4, [r2], #-12
   2781a:	2c00      	cmp	r4, #0
   2781c:	d037      	beq.n	2788e <smp_pairing_complete+0xce>
   2781e:	3c0c      	subs	r4, #12
   27820:	e035      	b.n	2788e <smp_pairing_complete+0xce>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   27822:	210d      	movs	r1, #13
   27824:	3004      	adds	r0, #4
   27826:	f013 fc5e 	bl	3b0e6 <atomic_test_bit>
		if (bond_flag) {
   2782a:	4607      	mov	r7, r0
   2782c:	b950      	cbnz	r0, 27844 <smp_pairing_complete+0x84>
	return list->head;
   2782e:	4b24      	ldr	r3, [pc, #144]	; (278c0 <smp_pairing_complete+0x100>)
   27830:	681b      	ldr	r3, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   27832:	b163      	cbz	r3, 2784e <smp_pairing_complete+0x8e>
   27834:	3b0c      	subs	r3, #12
Z_GENLIST_PEEK_NEXT(slist, snode)
   27836:	f113 040c 	adds.w	r4, r3, #12
   2783a:	d00d      	beq.n	27858 <smp_pairing_complete+0x98>
	return node->next;
   2783c:	68dc      	ldr	r4, [r3, #12]
   2783e:	b15c      	cbz	r4, 27858 <smp_pairing_complete+0x98>
   27840:	3c0c      	subs	r4, #12
   27842:	e009      	b.n	27858 <smp_pairing_complete+0x98>
			bt_keys_store(conn->le.keys);
   27844:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
   27848:	f001 fb6a 	bl	28f20 <bt_keys_store>
   2784c:	e7ef      	b.n	2782e <smp_pairing_complete+0x6e>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   2784e:	461c      	mov	r4, r3
   27850:	e002      	b.n	27858 <smp_pairing_complete+0x98>
   27852:	4622      	mov	r2, r4
   27854:	4623      	mov	r3, r4
   27856:	4614      	mov	r4, r2
   27858:	b333      	cbz	r3, 278a8 <smp_pairing_complete+0xe8>
			if (listener->pairing_complete) {
   2785a:	681b      	ldr	r3, [r3, #0]
   2785c:	b113      	cbz	r3, 27864 <smp_pairing_complete+0xa4>
				listener->pairing_complete(conn, bond_flag);
   2785e:	4639      	mov	r1, r7
   27860:	4628      	mov	r0, r5
   27862:	4798      	blx	r3
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs, listener,
   27864:	2c00      	cmp	r4, #0
   27866:	d0f4      	beq.n	27852 <smp_pairing_complete+0x92>
   27868:	68e2      	ldr	r2, [r4, #12]
   2786a:	2a00      	cmp	r2, #0
   2786c:	d0f2      	beq.n	27854 <smp_pairing_complete+0x94>
   2786e:	3a0c      	subs	r2, #12
   27870:	e7f0      	b.n	27854 <smp_pairing_complete+0x94>
			bt_conn_security_changed(conn,
   27872:	4638      	mov	r0, r7
   27874:	f013 fbe2 	bl	3b03c <hci_err_get>
   27878:	4601      	mov	r1, r0
   2787a:	463a      	mov	r2, r7
   2787c:	4628      	mov	r0, r5
   2787e:	f7f9 f8df 	bl	20a40 <bt_conn_security_changed>
   27882:	e7be      	b.n	27802 <smp_pairing_complete+0x42>
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   27884:	4614      	mov	r4, r2
   27886:	e002      	b.n	2788e <smp_pairing_complete+0xce>
   27888:	4623      	mov	r3, r4
   2788a:	4622      	mov	r2, r4
   2788c:	461c      	mov	r4, r3
   2788e:	b15a      	cbz	r2, 278a8 <smp_pairing_complete+0xe8>
				if (listener->pairing_failed) {
   27890:	6853      	ldr	r3, [r2, #4]
   27892:	b113      	cbz	r3, 2789a <smp_pairing_complete+0xda>
					listener->pairing_failed(conn, security_err);
   27894:	4639      	mov	r1, r7
   27896:	4628      	mov	r0, r5
   27898:	4798      	blx	r3
			SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&bt_auth_info_cbs,
   2789a:	2c00      	cmp	r4, #0
   2789c:	d0f4      	beq.n	27888 <smp_pairing_complete+0xc8>
   2789e:	68e3      	ldr	r3, [r4, #12]
   278a0:	2b00      	cmp	r3, #0
   278a2:	d0f2      	beq.n	2788a <smp_pairing_complete+0xca>
   278a4:	3b0c      	subs	r3, #12
   278a6:	e7f0      	b.n	2788a <smp_pairing_complete+0xca>
	smp_reset(smp);
   278a8:	4630      	mov	r0, r6
   278aa:	f013 fcbb 	bl	3b224 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   278ae:	7a6a      	ldrb	r2, [r5, #9]
   278b0:	7aab      	ldrb	r3, [r5, #10]
   278b2:	429a      	cmp	r2, r3
   278b4:	d100      	bne.n	278b8 <smp_pairing_complete+0xf8>
}
   278b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_smp_start_security(conn);
   278b8:	4628      	mov	r0, r5
   278ba:	f014 f860 	bl	3b97e <bt_smp_start_security>
}
   278be:	e7fa      	b.n	278b6 <smp_pairing_complete+0xf6>
   278c0:	2000c120 	.word	0x2000c120

000278c4 <smp_error>:
{
   278c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   278c6:	b08b      	sub	sp, #44	; 0x2c
   278c8:	4604      	mov	r4, r0
   278ca:	460d      	mov	r5, r1
	remote_already_completed = (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
   278cc:	1d07      	adds	r7, r0, #4
   278ce:	2102      	movs	r1, #2
   278d0:	4638      	mov	r0, r7
   278d2:	f013 fc08 	bl	3b0e6 <atomic_test_bit>
				    !smp->local_dist && !smp->remote_dist);
   278d6:	b120      	cbz	r0, 278e2 <smp_error+0x1e>
   278d8:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   278dc:	b34b      	cbz	r3, 27932 <smp_error+0x6e>
   278de:	2600      	movs	r6, #0
   278e0:	e000      	b.n	278e4 <smp_error+0x20>
   278e2:	2600      	movs	r6, #0
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   278e4:	2103      	movs	r1, #3
   278e6:	4638      	mov	r0, r7
   278e8:	f013 fbfd 	bl	3b0e6 <atomic_test_bit>
   278ec:	b920      	cbnz	r0, 278f8 <smp_error+0x34>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   278ee:	2101      	movs	r1, #1
   278f0:	4638      	mov	r0, r7
   278f2:	f013 fbf8 	bl	3b0e6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   278f6:	b1f0      	cbz	r0, 27936 <smp_error+0x72>
		smp_pairing_complete(smp, reason);
   278f8:	4629      	mov	r1, r5
   278fa:	4620      	mov	r0, r4
   278fc:	f7ff ff60 	bl	277c0 <smp_pairing_complete>
	if (remote_already_completed) {
   27900:	bb06      	cbnz	r6, 27944 <smp_error+0x80>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   27902:	2201      	movs	r2, #1
   27904:	2105      	movs	r1, #5
   27906:	4620      	mov	r0, r4
   27908:	f013 fd20 	bl	3b34c <smp_create_pdu>
	if (!buf) {
   2790c:	4606      	mov	r6, r0
   2790e:	2800      	cmp	r0, #0
   27910:	d049      	beq.n	279a6 <smp_error+0xe2>
   27912:	2101      	movs	r1, #1
   27914:	300c      	adds	r0, #12
   27916:	f001 ffe3 	bl	298e0 <net_buf_simple_add>
	rsp->reason = reason;
   2791a:	7005      	strb	r5, [r0, #0]
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2791c:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   27920:	2300      	movs	r3, #0
   27922:	9300      	str	r3, [sp, #0]
   27924:	4632      	mov	r2, r6
   27926:	2106      	movs	r1, #6
   27928:	f011 fe10 	bl	3954c <bt_l2cap_send_cb>
   2792c:	bbb0      	cbnz	r0, 2799c <smp_error+0xd8>
}
   2792e:	b00b      	add	sp, #44	; 0x2c
   27930:	bdf0      	pop	{r4, r5, r6, r7, pc}
				    !smp->local_dist && !smp->remote_dist);
   27932:	2601      	movs	r6, #1
   27934:	e7d6      	b.n	278e4 <smp_error+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   27936:	210f      	movs	r1, #15
   27938:	4638      	mov	r0, r7
   2793a:	f013 fbd4 	bl	3b0e6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2793e:	2800      	cmp	r0, #0
   27940:	d0de      	beq.n	27900 <smp_error+0x3c>
   27942:	e7d9      	b.n	278f8 <smp_error+0x34>
		LOG_WRN("SMP does not allow a pairing failure at this point. Known issue. "
   27944:	4b19      	ldr	r3, [pc, #100]	; (279ac <smp_error+0xe8>)
   27946:	9309      	str	r3, [sp, #36]	; 0x24
   27948:	2302      	movs	r3, #2
   2794a:	f88d 300c 	strb.w	r3, [sp, #12]
   2794e:	2500      	movs	r5, #0
   27950:	f88d 500d 	strb.w	r5, [sp, #13]
   27954:	f88d 500e 	strb.w	r5, [sp, #14]
   27958:	f88d 500f 	strb.w	r5, [sp, #15]
   2795c:	9a03      	ldr	r2, [sp, #12]
   2795e:	9208      	str	r2, [sp, #32]
   27960:	4629      	mov	r1, r5
   27962:	f365 0100 	bfi	r1, r5, #0, #1
   27966:	f365 0141 	bfi	r1, r5, #1, #1
   2796a:	f365 0182 	bfi	r1, r5, #2, #1
   2796e:	f365 01c5 	bfi	r1, r5, #3, #3
   27972:	f363 1188 	bfi	r1, r3, #6, #3
   27976:	2308      	movs	r3, #8
   27978:	f363 2152 	bfi	r1, r3, #9, #10
   2797c:	f365 41de 	bfi	r1, r5, #19, #12
   27980:	f365 71df 	bfi	r1, r5, #31, #1
   27984:	462b      	mov	r3, r5
   27986:	aa08      	add	r2, sp, #32
   27988:	4809      	ldr	r0, [pc, #36]	; (279b0 <smp_error+0xec>)
   2798a:	f7ee ffdf 	bl	1694c <z_impl_z_log_msg_static_create>
		bt_conn_disconnect(smp->chan.chan.conn, BT_HCI_ERR_AUTH_FAIL);
   2798e:	2105      	movs	r1, #5
   27990:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   27994:	f011 fca4 	bl	392e0 <bt_conn_disconnect>
		return 0;
   27998:	4628      	mov	r0, r5
   2799a:	e7c8      	b.n	2792e <smp_error+0x6a>
		net_buf_unref(buf);
   2799c:	4630      	mov	r0, r6
   2799e:	f001 fe81 	bl	296a4 <net_buf_unref>
	return 0;
   279a2:	2000      	movs	r0, #0
   279a4:	e7c3      	b.n	2792e <smp_error+0x6a>
		return -ENOBUFS;
   279a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   279aa:	e7c0      	b.n	2792e <smp_error+0x6a>
   279ac:	0004421c 	.word	0x0004421c
   279b0:	0003f418 	.word	0x0003f418

000279b4 <bt_smp_recv>:
{
   279b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   279b8:	b088      	sub	sp, #32
   279ba:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   279bc:	8a0b      	ldrh	r3, [r1, #16]
   279be:	2b00      	cmp	r3, #0
   279c0:	d046      	beq.n	27a50 <bt_smp_recv+0x9c>
   279c2:	4604      	mov	r4, r0
   279c4:	460d      	mov	r5, r1
   279c6:	f1a0 08ec 	sub.w	r8, r0, #236	; 0xec
	return net_buf_simple_pull_mem(&buf->b, len);
   279ca:	2101      	movs	r1, #1
   279cc:	f105 000c 	add.w	r0, r5, #12
   279d0:	f001 ff46 	bl	29860 <net_buf_simple_pull_mem>
   279d4:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   279d6:	2104      	movs	r1, #4
   279d8:	f1a4 00e8 	sub.w	r0, r4, #232	; 0xe8
   279dc:	f013 fb83 	bl	3b0e6 <atomic_test_bit>
   279e0:	2800      	cmp	r0, #0
   279e2:	d15c      	bne.n	27a9e <bt_smp_recv+0xea>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   279e4:	7831      	ldrb	r1, [r6, #0]
   279e6:	290e      	cmp	r1, #14
   279e8:	f200 8099 	bhi.w	27b1e <bt_smp_recv+0x16a>
	if (!handlers[hdr->code].func) {
   279ec:	4bb3      	ldr	r3, [pc, #716]	; (27cbc <bt_smp_recv+0x308>)
   279ee:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   279f2:	2b00      	cmp	r3, #0
   279f4:	f000 80d2 	beq.w	27b9c <bt_smp_recv+0x1e8>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   279f8:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   279fc:	f013 fc8e 	bl	3b31c <atomic_test_and_clear_bit>
   27a00:	2800      	cmp	r0, #0
   27a02:	f000 810e 	beq.w	27c22 <bt_smp_recv+0x26e>
	if (buf->len != handlers[hdr->code].expect_len) {
   27a06:	8a28      	ldrh	r0, [r5, #16]
   27a08:	7831      	ldrb	r1, [r6, #0]
   27a0a:	4bac      	ldr	r3, [pc, #688]	; (27cbc <bt_smp_recv+0x308>)
   27a0c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   27a10:	791b      	ldrb	r3, [r3, #4]
   27a12:	4298      	cmp	r0, r3
   27a14:	f000 818e 	beq.w	27d34 <bt_smp_recv+0x380>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   27a18:	466c      	mov	r4, sp
   27a1a:	b088      	sub	sp, #32
   27a1c:	466b      	mov	r3, sp
   27a1e:	f113 0210 	adds.w	r2, r3, #16
   27a22:	f000 8148 	beq.w	27cb6 <bt_smp_recv+0x302>
   27a26:	2510      	movs	r5, #16
   27a28:	b16a      	cbz	r2, 27a46 <bt_smp_recv+0x92>
   27a2a:	462e      	mov	r6, r5
   27a2c:	2d04      	cmp	r5, #4
   27a2e:	dd03      	ble.n	27a38 <bt_smp_recv+0x84>
   27a30:	f8df c28c 	ldr.w	ip, [pc, #652]	; 27cc0 <bt_smp_recv+0x30c>
   27a34:	f8c3 c014 	str.w	ip, [r3, #20]
   27a38:	2e08      	cmp	r6, #8
   27a3a:	dd00      	ble.n	27a3e <bt_smp_recv+0x8a>
   27a3c:	6198      	str	r0, [r3, #24]
   27a3e:	2e0c      	cmp	r6, #12
   27a40:	f340 814c 	ble.w	27cdc <bt_smp_recv+0x328>
   27a44:	61d9      	str	r1, [r3, #28]
   27a46:	2d0f      	cmp	r5, #15
   27a48:	f340 8171 	ble.w	27d2e <bt_smp_recv+0x37a>
   27a4c:	2510      	movs	r5, #16
   27a4e:	e147      	b.n	27ce0 <bt_smp_recv+0x32c>
		LOG_ERR("Too small SMP PDU received");
   27a50:	4b9c      	ldr	r3, [pc, #624]	; (27cc4 <bt_smp_recv+0x310>)
   27a52:	61fb      	str	r3, [r7, #28]
   27a54:	2302      	movs	r3, #2
   27a56:	713b      	strb	r3, [r7, #4]
   27a58:	2300      	movs	r3, #0
   27a5a:	717b      	strb	r3, [r7, #5]
   27a5c:	71bb      	strb	r3, [r7, #6]
   27a5e:	71fb      	strb	r3, [r7, #7]
   27a60:	687a      	ldr	r2, [r7, #4]
   27a62:	61ba      	str	r2, [r7, #24]
   27a64:	4619      	mov	r1, r3
   27a66:	f363 0100 	bfi	r1, r3, #0, #1
   27a6a:	f363 0141 	bfi	r1, r3, #1, #1
   27a6e:	f363 0182 	bfi	r1, r3, #2, #1
   27a72:	f363 01c5 	bfi	r1, r3, #3, #3
   27a76:	2201      	movs	r2, #1
   27a78:	f362 1188 	bfi	r1, r2, #6, #3
   27a7c:	2208      	movs	r2, #8
   27a7e:	f362 2152 	bfi	r1, r2, #9, #10
   27a82:	f363 41de 	bfi	r1, r3, #19, #12
   27a86:	f363 71df 	bfi	r1, r3, #31, #1
   27a8a:	f107 0218 	add.w	r2, r7, #24
   27a8e:	488e      	ldr	r0, [pc, #568]	; (27cc8 <bt_smp_recv+0x314>)
   27a90:	f7ee ff5c 	bl	1694c <z_impl_z_log_msg_static_create>
}
   27a94:	2000      	movs	r0, #0
   27a96:	3720      	adds	r7, #32
   27a98:	46bd      	mov	sp, r7
   27a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   27a9e:	7834      	ldrb	r4, [r6, #0]
   27aa0:	466d      	mov	r5, sp
   27aa2:	b088      	sub	sp, #32
   27aa4:	466b      	mov	r3, sp
   27aa6:	f113 0210 	adds.w	r2, r3, #16
   27aaa:	d00d      	beq.n	27ac8 <bt_smp_recv+0x114>
   27aac:	210c      	movs	r1, #12
   27aae:	b13a      	cbz	r2, 27ac0 <bt_smp_recv+0x10c>
   27ab0:	4608      	mov	r0, r1
   27ab2:	2904      	cmp	r1, #4
   27ab4:	dd01      	ble.n	27aba <bt_smp_recv+0x106>
   27ab6:	4e85      	ldr	r6, [pc, #532]	; (27ccc <bt_smp_recv+0x318>)
   27ab8:	615e      	str	r6, [r3, #20]
   27aba:	2808      	cmp	r0, #8
   27abc:	dd07      	ble.n	27ace <bt_smp_recv+0x11a>
   27abe:	619c      	str	r4, [r3, #24]
   27ac0:	290b      	cmp	r1, #11
   27ac2:	dd29      	ble.n	27b18 <bt_smp_recv+0x164>
   27ac4:	240c      	movs	r4, #12
   27ac6:	e004      	b.n	27ad2 <bt_smp_recv+0x11e>
   27ac8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   27acc:	e7ef      	b.n	27aae <bt_smp_recv+0xfa>
   27ace:	f06f 041b 	mvn.w	r4, #27
   27ad2:	b13a      	cbz	r2, 27ae4 <bt_smp_recv+0x130>
   27ad4:	2103      	movs	r1, #3
   27ad6:	7139      	strb	r1, [r7, #4]
   27ad8:	2100      	movs	r1, #0
   27ada:	7179      	strb	r1, [r7, #5]
   27adc:	71b9      	strb	r1, [r7, #6]
   27ade:	71f9      	strb	r1, [r7, #7]
   27ae0:	6878      	ldr	r0, [r7, #4]
   27ae2:	6118      	str	r0, [r3, #16]
   27ae4:	2100      	movs	r1, #0
   27ae6:	f36f 0100 	bfc	r1, #0, #1
   27aea:	f36f 0141 	bfc	r1, #1, #1
   27aee:	f36f 0182 	bfc	r1, #2, #1
   27af2:	f36f 01c5 	bfc	r1, #3, #3
   27af6:	2302      	movs	r3, #2
   27af8:	f363 1188 	bfi	r1, r3, #6, #3
   27afc:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   27b00:	f363 2152 	bfi	r1, r3, #9, #10
   27b04:	f36f 41de 	bfc	r1, #19, #12
   27b08:	f36f 71df 	bfc	r1, #31, #1
   27b0c:	2300      	movs	r3, #0
   27b0e:	486e      	ldr	r0, [pc, #440]	; (27cc8 <bt_smp_recv+0x314>)
   27b10:	f7ee ff1c 	bl	1694c <z_impl_z_log_msg_static_create>
   27b14:	46ad      	mov	sp, r5
		return 0;
   27b16:	e7bd      	b.n	27a94 <bt_smp_recv+0xe0>
		LOG_WRN("SMP command (code 0x%02x) received after timeout", hdr->code);
   27b18:	f06f 041b 	mvn.w	r4, #27
   27b1c:	e7d9      	b.n	27ad2 <bt_smp_recv+0x11e>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   27b1e:	466d      	mov	r5, sp
   27b20:	b088      	sub	sp, #32
   27b22:	466b      	mov	r3, sp
   27b24:	f113 0210 	adds.w	r2, r3, #16
   27b28:	d00d      	beq.n	27b46 <bt_smp_recv+0x192>
   27b2a:	200c      	movs	r0, #12
   27b2c:	b13a      	cbz	r2, 27b3e <bt_smp_recv+0x18a>
   27b2e:	4604      	mov	r4, r0
   27b30:	2804      	cmp	r0, #4
   27b32:	dd01      	ble.n	27b38 <bt_smp_recv+0x184>
   27b34:	4e66      	ldr	r6, [pc, #408]	; (27cd0 <bt_smp_recv+0x31c>)
   27b36:	615e      	str	r6, [r3, #20]
   27b38:	2c08      	cmp	r4, #8
   27b3a:	dd07      	ble.n	27b4c <bt_smp_recv+0x198>
   27b3c:	6199      	str	r1, [r3, #24]
   27b3e:	280b      	cmp	r0, #11
   27b40:	dd29      	ble.n	27b96 <bt_smp_recv+0x1e2>
   27b42:	240c      	movs	r4, #12
   27b44:	e004      	b.n	27b50 <bt_smp_recv+0x19c>
   27b46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27b4a:	e7ef      	b.n	27b2c <bt_smp_recv+0x178>
   27b4c:	f06f 041b 	mvn.w	r4, #27
   27b50:	b13a      	cbz	r2, 27b62 <bt_smp_recv+0x1ae>
   27b52:	2103      	movs	r1, #3
   27b54:	7139      	strb	r1, [r7, #4]
   27b56:	2100      	movs	r1, #0
   27b58:	7179      	strb	r1, [r7, #5]
   27b5a:	71b9      	strb	r1, [r7, #6]
   27b5c:	71f9      	strb	r1, [r7, #7]
   27b5e:	6878      	ldr	r0, [r7, #4]
   27b60:	6118      	str	r0, [r3, #16]
   27b62:	2100      	movs	r1, #0
   27b64:	f36f 0100 	bfc	r1, #0, #1
   27b68:	f36f 0141 	bfc	r1, #1, #1
   27b6c:	f36f 0182 	bfc	r1, #2, #1
   27b70:	f36f 01c5 	bfc	r1, #3, #3
   27b74:	2302      	movs	r3, #2
   27b76:	f363 1188 	bfi	r1, r3, #6, #3
   27b7a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   27b7e:	f363 2152 	bfi	r1, r3, #9, #10
   27b82:	f36f 41de 	bfc	r1, #19, #12
   27b86:	f36f 71df 	bfc	r1, #31, #1
   27b8a:	2300      	movs	r3, #0
   27b8c:	484e      	ldr	r0, [pc, #312]	; (27cc8 <bt_smp_recv+0x314>)
   27b8e:	f7ee fedd 	bl	1694c <z_impl_z_log_msg_static_create>
   27b92:	46ad      	mov	sp, r5
		return 0;
   27b94:	e77e      	b.n	27a94 <bt_smp_recv+0xe0>
		LOG_WRN("Received reserved SMP code 0x%02x", hdr->code);
   27b96:	f06f 041b 	mvn.w	r4, #27
   27b9a:	e7d9      	b.n	27b50 <bt_smp_recv+0x19c>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   27b9c:	466c      	mov	r4, sp
   27b9e:	b088      	sub	sp, #32
   27ba0:	466b      	mov	r3, sp
   27ba2:	f113 0210 	adds.w	r2, r3, #16
   27ba6:	d00d      	beq.n	27bc4 <bt_smp_recv+0x210>
   27ba8:	200c      	movs	r0, #12
   27baa:	b13a      	cbz	r2, 27bbc <bt_smp_recv+0x208>
   27bac:	4605      	mov	r5, r0
   27bae:	2804      	cmp	r0, #4
   27bb0:	dd01      	ble.n	27bb6 <bt_smp_recv+0x202>
   27bb2:	4e48      	ldr	r6, [pc, #288]	; (27cd4 <bt_smp_recv+0x320>)
   27bb4:	615e      	str	r6, [r3, #20]
   27bb6:	2d08      	cmp	r5, #8
   27bb8:	dd07      	ble.n	27bca <bt_smp_recv+0x216>
   27bba:	6199      	str	r1, [r3, #24]
   27bbc:	280b      	cmp	r0, #11
   27bbe:	dd2d      	ble.n	27c1c <bt_smp_recv+0x268>
   27bc0:	250c      	movs	r5, #12
   27bc2:	e004      	b.n	27bce <bt_smp_recv+0x21a>
   27bc4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   27bc8:	e7ef      	b.n	27baa <bt_smp_recv+0x1f6>
   27bca:	f06f 051b 	mvn.w	r5, #27
   27bce:	b13a      	cbz	r2, 27be0 <bt_smp_recv+0x22c>
   27bd0:	2103      	movs	r1, #3
   27bd2:	7139      	strb	r1, [r7, #4]
   27bd4:	2100      	movs	r1, #0
   27bd6:	7179      	strb	r1, [r7, #5]
   27bd8:	71b9      	strb	r1, [r7, #6]
   27bda:	71f9      	strb	r1, [r7, #7]
   27bdc:	6878      	ldr	r0, [r7, #4]
   27bde:	6118      	str	r0, [r3, #16]
   27be0:	2100      	movs	r1, #0
   27be2:	f36f 0100 	bfc	r1, #0, #1
   27be6:	f36f 0141 	bfc	r1, #1, #1
   27bea:	f36f 0182 	bfc	r1, #2, #1
   27bee:	f36f 01c5 	bfc	r1, #3, #3
   27bf2:	2302      	movs	r3, #2
   27bf4:	f363 1188 	bfi	r1, r3, #6, #3
   27bf8:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   27bfc:	f363 2152 	bfi	r1, r3, #9, #10
   27c00:	f36f 41de 	bfc	r1, #19, #12
   27c04:	f36f 71df 	bfc	r1, #31, #1
   27c08:	2300      	movs	r3, #0
   27c0a:	482f      	ldr	r0, [pc, #188]	; (27cc8 <bt_smp_recv+0x314>)
   27c0c:	f7ee fe9e 	bl	1694c <z_impl_z_log_msg_static_create>
   27c10:	46a5      	mov	sp, r4
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   27c12:	2107      	movs	r1, #7
   27c14:	4640      	mov	r0, r8
   27c16:	f7ff fe55 	bl	278c4 <smp_error>
		return 0;
   27c1a:	e73b      	b.n	27a94 <bt_smp_recv+0xe0>
		LOG_WRN("Unhandled SMP code 0x%02x", hdr->code);
   27c1c:	f06f 051b 	mvn.w	r5, #27
   27c20:	e7d5      	b.n	27bce <bt_smp_recv+0x21a>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   27c22:	7835      	ldrb	r5, [r6, #0]
   27c24:	466c      	mov	r4, sp
   27c26:	b088      	sub	sp, #32
   27c28:	466b      	mov	r3, sp
   27c2a:	f113 0210 	adds.w	r2, r3, #16
   27c2e:	d00f      	beq.n	27c50 <bt_smp_recv+0x29c>
   27c30:	210c      	movs	r1, #12
   27c32:	b14a      	cbz	r2, 27c48 <bt_smp_recv+0x294>
   27c34:	4608      	mov	r0, r1
   27c36:	2904      	cmp	r1, #4
   27c38:	dd03      	ble.n	27c42 <bt_smp_recv+0x28e>
   27c3a:	f8df c09c 	ldr.w	ip, [pc, #156]	; 27cd8 <bt_smp_recv+0x324>
   27c3e:	f8c3 c014 	str.w	ip, [r3, #20]
   27c42:	2808      	cmp	r0, #8
   27c44:	dd07      	ble.n	27c56 <bt_smp_recv+0x2a2>
   27c46:	619d      	str	r5, [r3, #24]
   27c48:	290b      	cmp	r1, #11
   27c4a:	dd31      	ble.n	27cb0 <bt_smp_recv+0x2fc>
   27c4c:	250c      	movs	r5, #12
   27c4e:	e004      	b.n	27c5a <bt_smp_recv+0x2a6>
   27c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   27c54:	e7ed      	b.n	27c32 <bt_smp_recv+0x27e>
   27c56:	f06f 051b 	mvn.w	r5, #27
   27c5a:	b13a      	cbz	r2, 27c6c <bt_smp_recv+0x2b8>
   27c5c:	2103      	movs	r1, #3
   27c5e:	7139      	strb	r1, [r7, #4]
   27c60:	2100      	movs	r1, #0
   27c62:	7179      	strb	r1, [r7, #5]
   27c64:	71b9      	strb	r1, [r7, #6]
   27c66:	71f9      	strb	r1, [r7, #7]
   27c68:	6878      	ldr	r0, [r7, #4]
   27c6a:	6118      	str	r0, [r3, #16]
   27c6c:	2100      	movs	r1, #0
   27c6e:	f36f 0100 	bfc	r1, #0, #1
   27c72:	f36f 0141 	bfc	r1, #1, #1
   27c76:	f36f 0182 	bfc	r1, #2, #1
   27c7a:	f36f 01c5 	bfc	r1, #3, #3
   27c7e:	2302      	movs	r3, #2
   27c80:	f363 1188 	bfi	r1, r3, #6, #3
   27c84:	f405 737b 	and.w	r3, r5, #1004	; 0x3ec
   27c88:	f363 2152 	bfi	r1, r3, #9, #10
   27c8c:	f36f 41de 	bfc	r1, #19, #12
   27c90:	f36f 71df 	bfc	r1, #31, #1
   27c94:	2300      	movs	r3, #0
   27c96:	480c      	ldr	r0, [pc, #48]	; (27cc8 <bt_smp_recv+0x314>)
   27c98:	f7ee fe58 	bl	1694c <z_impl_z_log_msg_static_create>
   27c9c:	46a5      	mov	sp, r4
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   27c9e:	7833      	ldrb	r3, [r6, #0]
   27ca0:	2b05      	cmp	r3, #5
   27ca2:	f43f aef7 	beq.w	27a94 <bt_smp_recv+0xe0>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   27ca6:	2108      	movs	r1, #8
   27ca8:	4640      	mov	r0, r8
   27caa:	f7ff fe0b 	bl	278c4 <smp_error>
		return 0;
   27cae:	e6f1      	b.n	27a94 <bt_smp_recv+0xe0>
		LOG_WRN("Unexpected SMP code 0x%02x", hdr->code);
   27cb0:	f06f 051b 	mvn.w	r5, #27
   27cb4:	e7d1      	b.n	27c5a <bt_smp_recv+0x2a6>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   27cb6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   27cba:	e6b5      	b.n	27a28 <bt_smp_recv+0x74>
   27cbc:	000443c8 	.word	0x000443c8
   27cc0:	0004379c 	.word	0x0004379c
   27cc4:	00044274 	.word	0x00044274
   27cc8:	0003f418 	.word	0x0003f418
   27ccc:	00044290 	.word	0x00044290
   27cd0:	000442c4 	.word	0x000442c4
   27cd4:	000442e8 	.word	0x000442e8
   27cd8:	00044304 	.word	0x00044304
   27cdc:	f06f 051b 	mvn.w	r5, #27
   27ce0:	b13a      	cbz	r2, 27cf2 <bt_smp_recv+0x33e>
   27ce2:	2104      	movs	r1, #4
   27ce4:	7139      	strb	r1, [r7, #4]
   27ce6:	2100      	movs	r1, #0
   27ce8:	7179      	strb	r1, [r7, #5]
   27cea:	71b9      	strb	r1, [r7, #6]
   27cec:	71f9      	strb	r1, [r7, #7]
   27cee:	6878      	ldr	r0, [r7, #4]
   27cf0:	6118      	str	r0, [r3, #16]
   27cf2:	2100      	movs	r1, #0
   27cf4:	f36f 0100 	bfc	r1, #0, #1
   27cf8:	f36f 0141 	bfc	r1, #1, #1
   27cfc:	f36f 0182 	bfc	r1, #2, #1
   27d00:	f36f 01c5 	bfc	r1, #3, #3
   27d04:	2301      	movs	r3, #1
   27d06:	f363 1188 	bfi	r1, r3, #6, #3
   27d0a:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   27d0e:	f363 2152 	bfi	r1, r3, #9, #10
   27d12:	f36f 41de 	bfc	r1, #19, #12
   27d16:	f36f 71df 	bfc	r1, #31, #1
   27d1a:	2300      	movs	r3, #0
   27d1c:	480c      	ldr	r0, [pc, #48]	; (27d50 <bt_smp_recv+0x39c>)
   27d1e:	f7ee fe15 	bl	1694c <z_impl_z_log_msg_static_create>
   27d22:	46a5      	mov	sp, r4
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   27d24:	210a      	movs	r1, #10
   27d26:	4640      	mov	r0, r8
   27d28:	f7ff fdcc 	bl	278c4 <smp_error>
		return 0;
   27d2c:	e6b2      	b.n	27a94 <bt_smp_recv+0xe0>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   27d2e:	f06f 051b 	mvn.w	r5, #27
   27d32:	e7d5      	b.n	27ce0 <bt_smp_recv+0x32c>
	err = handlers[hdr->code].func(smp, buf);
   27d34:	4b07      	ldr	r3, [pc, #28]	; (27d54 <bt_smp_recv+0x3a0>)
   27d36:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
   27d3a:	4629      	mov	r1, r5
   27d3c:	4640      	mov	r0, r8
   27d3e:	4798      	blx	r3
	if (err) {
   27d40:	4601      	mov	r1, r0
   27d42:	2800      	cmp	r0, #0
   27d44:	f43f aea6 	beq.w	27a94 <bt_smp_recv+0xe0>
		smp_error(smp, err);
   27d48:	4640      	mov	r0, r8
   27d4a:	f7ff fdbb 	bl	278c4 <smp_error>
   27d4e:	e6a1      	b.n	27a94 <bt_smp_recv+0xe0>
   27d50:	0003f418 	.word	0x0003f418
   27d54:	000443c8 	.word	0x000443c8

00027d58 <bt_smp_pkey_ready>:
{
   27d58:	b530      	push	{r4, r5, lr}
   27d5a:	b089      	sub	sp, #36	; 0x24
	sc_public_key = pkey;
   27d5c:	4b22      	ldr	r3, [pc, #136]	; (27de8 <bt_smp_pkey_ready+0x90>)
   27d5e:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   27d60:	b120      	cbz	r0, 27d6c <bt_smp_pkey_ready+0x14>
	z_impl_k_sem_give(sem);
   27d62:	4822      	ldr	r0, [pc, #136]	; (27dec <bt_smp_pkey_ready+0x94>)
   27d64:	f00a f83c 	bl	31de0 <z_impl_k_sem_give>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   27d68:	2400      	movs	r4, #0
   27d6a:	e034      	b.n	27dd6 <bt_smp_pkey_ready+0x7e>
		LOG_WRN("Public key not available");
   27d6c:	4b20      	ldr	r3, [pc, #128]	; (27df0 <bt_smp_pkey_ready+0x98>)
   27d6e:	9307      	str	r3, [sp, #28]
   27d70:	2202      	movs	r2, #2
   27d72:	f88d 2004 	strb.w	r2, [sp, #4]
   27d76:	2300      	movs	r3, #0
   27d78:	f88d 3005 	strb.w	r3, [sp, #5]
   27d7c:	f88d 3006 	strb.w	r3, [sp, #6]
   27d80:	f88d 3007 	strb.w	r3, [sp, #7]
   27d84:	9901      	ldr	r1, [sp, #4]
   27d86:	9106      	str	r1, [sp, #24]
   27d88:	4619      	mov	r1, r3
   27d8a:	f363 0100 	bfi	r1, r3, #0, #1
   27d8e:	f363 0141 	bfi	r1, r3, #1, #1
   27d92:	f363 0182 	bfi	r1, r3, #2, #1
   27d96:	f363 01c5 	bfi	r1, r3, #3, #3
   27d9a:	f362 1188 	bfi	r1, r2, #6, #3
   27d9e:	2208      	movs	r2, #8
   27da0:	f362 2152 	bfi	r1, r2, #9, #10
   27da4:	f363 41de 	bfi	r1, r3, #19, #12
   27da8:	f363 71df 	bfi	r1, r3, #31, #1
   27dac:	aa06      	add	r2, sp, #24
   27dae:	4811      	ldr	r0, [pc, #68]	; (27df4 <bt_smp_pkey_ready+0x9c>)
   27db0:	f7ee fdcc 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   27db4:	e011      	b.n	27dda <bt_smp_pkey_ready+0x82>
		struct bt_smp *smp = &bt_smp_pool[i];
   27db6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   27dba:	4d0f      	ldr	r5, [pc, #60]	; (27df8 <bt_smp_pkey_ready+0xa0>)
   27dbc:	fb03 5504 	mla	r5, r3, r4, r5
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   27dc0:	2106      	movs	r1, #6
   27dc2:	1d28      	adds	r0, r5, #4
   27dc4:	f013 f98f 	bl	3b0e6 <atomic_test_bit>
   27dc8:	b120      	cbz	r0, 27dd4 <bt_smp_pkey_ready+0x7c>
		err = smp_public_key_periph(smp);
   27dca:	4628      	mov	r0, r5
   27dcc:	f7fe ff66 	bl	26c9c <smp_public_key_periph>
		if (err) {
   27dd0:	4601      	mov	r1, r0
   27dd2:	b920      	cbnz	r0, 27dde <bt_smp_pkey_ready+0x86>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   27dd4:	3401      	adds	r4, #1
   27dd6:	2c00      	cmp	r4, #0
   27dd8:	d0ed      	beq.n	27db6 <bt_smp_pkey_ready+0x5e>
}
   27dda:	b009      	add	sp, #36	; 0x24
   27ddc:	bd30      	pop	{r4, r5, pc}
			smp_error(smp, err);
   27dde:	4628      	mov	r0, r5
   27de0:	f7ff fd70 	bl	278c4 <smp_error>
   27de4:	e7f6      	b.n	27dd4 <bt_smp_pkey_ready+0x7c>
   27de6:	bf00      	nop
   27de8:	2000c29c 	.word	0x2000c29c
   27dec:	200089ac 	.word	0x200089ac
   27df0:	00044320 	.word	0x00044320
   27df4:	0003f418 	.word	0x0003f418
   27df8:	2000b798 	.word	0x2000b798

00027dfc <smp_ident_addr_info>:
{
   27dfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27e00:	b083      	sub	sp, #12
   27e02:	af00      	add	r7, sp, #0
   27e04:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   27e06:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   27e0a:	68cd      	ldr	r5, [r1, #12]
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   27e0c:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   27e10:	f023 0302 	bic.w	r3, r3, #2
   27e14:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   27e18:	782b      	ldrb	r3, [r5, #0]
   27e1a:	b123      	cbz	r3, 27e26 <smp_ident_addr_info+0x2a>
	return BT_ADDR_IS_STATIC(&addr->a);
   27e1c:	79ab      	ldrb	r3, [r5, #6]
   27e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_identity(&req->addr)) {
   27e22:	2bc0      	cmp	r3, #192	; 0xc0
   27e24:	d135      	bne.n	27e92 <smp_ident_addr_info+0x96>
	if (!bt_addr_le_eq(&conn->le.dst, &req->addr)) {
   27e26:	f106 0890 	add.w	r8, r6, #144	; 0x90
	return memcmp(a, b, sizeof(*a));
   27e2a:	2207      	movs	r2, #7
   27e2c:	4629      	mov	r1, r5
   27e2e:	4640      	mov	r0, r8
   27e30:	f010 fabe 	bl	383b0 <memcmp>
   27e34:	b178      	cbz	r0, 27e56 <smp_ident_addr_info+0x5a>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   27e36:	4629      	mov	r1, r5
   27e38:	7a30      	ldrb	r0, [r6, #8]
   27e3a:	f000 fd59 	bl	288f0 <bt_keys_find_addr>
		if (keys) {
   27e3e:	4681      	mov	r9, r0
   27e40:	b148      	cbz	r0, 27e56 <smp_ident_addr_info+0x5a>
			if (!update_keys_check(smp, keys)) {
   27e42:	4601      	mov	r1, r0
   27e44:	4620      	mov	r0, r4
   27e46:	f013 f998 	bl	3b17a <update_keys_check>
   27e4a:	2800      	cmp	r0, #0
   27e4c:	f000 816d 	beq.w	2812a <smp_ident_addr_info+0x32e>
			bt_keys_clear(keys);
   27e50:	4648      	mov	r0, r9
   27e52:	f000 fdc5 	bl	289e0 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   27e56:	210d      	movs	r1, #13
   27e58:	1d20      	adds	r0, r4, #4
   27e5a:	f013 f944 	bl	3b0e6 <atomic_test_bit>
   27e5e:	2800      	cmp	r0, #0
   27e60:	f040 80c8 	bne.w	27ff4 <smp_ident_addr_info+0x1f8>
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   27e64:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   27e68:	f013 0f04 	tst.w	r3, #4
   27e6c:	d007      	beq.n	27e7e <smp_ident_addr_info+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27e6e:	e8d4 3fef 	ldaex	r3, [r4]
   27e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   27e76:	e8c4 3fe2 	stlex	r2, r3, [r4]
   27e7a:	2a00      	cmp	r2, #0
   27e7c:	d1f7      	bne.n	27e6e <smp_ident_addr_info+0x72>
	if (!smp->local_dist && !smp->remote_dist) {
   27e7e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   27e82:	2b00      	cmp	r3, #0
   27e84:	f000 814b 	beq.w	2811e <smp_ident_addr_info+0x322>
	return 0;
   27e88:	2000      	movs	r0, #0
}
   27e8a:	370c      	adds	r7, #12
   27e8c:	46bd      	mov	sp, r7
   27e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   27e92:	4628      	mov	r0, r5
   27e94:	f7f2 ff28 	bl	1ace8 <bt_addr_le_str>
   27e98:	466d      	mov	r5, sp
   27e9a:	2300      	movs	r3, #0
   27e9c:	713b      	strb	r3, [r7, #4]
   27e9e:	2302      	movs	r3, #2
   27ea0:	717b      	strb	r3, [r7, #5]
   27ea2:	b088      	sub	sp, #32
   27ea4:	466c      	mov	r4, sp
   27ea6:	f114 0210 	adds.w	r2, r4, #16
   27eaa:	d014      	beq.n	27ed6 <smp_ident_addr_info+0xda>
   27eac:	f04f 0c0e 	mov.w	ip, #14
   27eb0:	b122      	cbz	r2, 27ebc <smp_ident_addr_info+0xc0>
   27eb2:	f1bc 0f04 	cmp.w	ip, #4
   27eb6:	dd01      	ble.n	27ebc <smp_ident_addr_info+0xc0>
   27eb8:	4b9d      	ldr	r3, [pc, #628]	; (28130 <smp_ident_addr_info+0x334>)
   27eba:	6163      	str	r3, [r4, #20]
   27ebc:	2300      	movs	r3, #0
   27ebe:	703b      	strb	r3, [r7, #0]
   27ec0:	2302      	movs	r3, #2
   27ec2:	707b      	strb	r3, [r7, #1]
   27ec4:	b1a2      	cbz	r2, 27ef0 <smp_ident_addr_info+0xf4>
   27ec6:	f1bc 0f08 	cmp.w	ip, #8
   27eca:	dd00      	ble.n	27ece <smp_ident_addr_info+0xd2>
   27ecc:	61a0      	str	r0, [r4, #24]
   27ece:	f104 031c 	add.w	r3, r4, #28
   27ed2:	2100      	movs	r1, #0
   27ed4:	e00a      	b.n	27eec <smp_ident_addr_info+0xf0>
   27ed6:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   27eda:	e7e9      	b.n	27eb0 <smp_ident_addr_info+0xb4>
   27edc:	f101 0008 	add.w	r0, r1, #8
   27ee0:	4438      	add	r0, r7
   27ee2:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   27ee6:	f803 0b01 	strb.w	r0, [r3], #1
   27eea:	3101      	adds	r1, #1
   27eec:	2901      	cmp	r1, #1
   27eee:	d9f5      	bls.n	27edc <smp_ident_addr_info+0xe0>
   27ef0:	f1bc 0f0d 	cmp.w	ip, #13
   27ef4:	dd43      	ble.n	27f7e <smp_ident_addr_info+0x182>
   27ef6:	230e      	movs	r3, #14
   27ef8:	b142      	cbz	r2, 27f0c <smp_ident_addr_info+0x110>
   27efa:	2103      	movs	r1, #3
   27efc:	7139      	strb	r1, [r7, #4]
   27efe:	2100      	movs	r1, #0
   27f00:	7179      	strb	r1, [r7, #5]
   27f02:	71b9      	strb	r1, [r7, #6]
   27f04:	2101      	movs	r1, #1
   27f06:	71f9      	strb	r1, [r7, #7]
   27f08:	6878      	ldr	r0, [r7, #4]
   27f0a:	6120      	str	r0, [r4, #16]
   27f0c:	2100      	movs	r1, #0
   27f0e:	f36f 0100 	bfc	r1, #0, #1
   27f12:	f36f 0141 	bfc	r1, #1, #1
   27f16:	f36f 0182 	bfc	r1, #2, #1
   27f1a:	f36f 01c5 	bfc	r1, #3, #3
   27f1e:	2001      	movs	r0, #1
   27f20:	f360 1188 	bfi	r1, r0, #6, #3
   27f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
   27f28:	f363 2152 	bfi	r1, r3, #9, #10
   27f2c:	f36f 41de 	bfc	r1, #19, #12
   27f30:	f36f 71df 	bfc	r1, #31, #1
   27f34:	2300      	movs	r3, #0
   27f36:	487f      	ldr	r0, [pc, #508]	; (28134 <smp_ident_addr_info+0x338>)
   27f38:	f7ee fd08 	bl	1694c <z_impl_z_log_msg_static_create>
   27f3c:	46ad      	mov	sp, r5
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   27f3e:	f106 0090 	add.w	r0, r6, #144	; 0x90
   27f42:	f7f2 fed1 	bl	1ace8 <bt_addr_le_str>
   27f46:	466d      	mov	r5, sp
   27f48:	2300      	movs	r3, #0
   27f4a:	713b      	strb	r3, [r7, #4]
   27f4c:	2302      	movs	r3, #2
   27f4e:	717b      	strb	r3, [r7, #5]
   27f50:	b088      	sub	sp, #32
   27f52:	466c      	mov	r4, sp
   27f54:	f114 0210 	adds.w	r2, r4, #16
   27f58:	d014      	beq.n	27f84 <smp_ident_addr_info+0x188>
   27f5a:	260e      	movs	r6, #14
   27f5c:	b11a      	cbz	r2, 27f66 <smp_ident_addr_info+0x16a>
   27f5e:	2e04      	cmp	r6, #4
   27f60:	dd01      	ble.n	27f66 <smp_ident_addr_info+0x16a>
   27f62:	4b75      	ldr	r3, [pc, #468]	; (28138 <smp_ident_addr_info+0x33c>)
   27f64:	6163      	str	r3, [r4, #20]
   27f66:	2300      	movs	r3, #0
   27f68:	703b      	strb	r3, [r7, #0]
   27f6a:	2302      	movs	r3, #2
   27f6c:	707b      	strb	r3, [r7, #1]
   27f6e:	b1b2      	cbz	r2, 27f9e <smp_ident_addr_info+0x1a2>
   27f70:	2e08      	cmp	r6, #8
   27f72:	dd00      	ble.n	27f76 <smp_ident_addr_info+0x17a>
   27f74:	61a0      	str	r0, [r4, #24]
   27f76:	f104 031c 	add.w	r3, r4, #28
   27f7a:	2100      	movs	r1, #0
   27f7c:	e00d      	b.n	27f9a <smp_ident_addr_info+0x19e>
		LOG_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   27f7e:	f06f 031b 	mvn.w	r3, #27
   27f82:	e7b9      	b.n	27ef8 <smp_ident_addr_info+0xfc>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   27f84:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   27f88:	e7e8      	b.n	27f5c <smp_ident_addr_info+0x160>
   27f8a:	f101 0008 	add.w	r0, r1, #8
   27f8e:	4438      	add	r0, r7
   27f90:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   27f94:	f803 0b01 	strb.w	r0, [r3], #1
   27f98:	3101      	adds	r1, #1
   27f9a:	2901      	cmp	r1, #1
   27f9c:	d9f5      	bls.n	27f8a <smp_ident_addr_info+0x18e>
   27f9e:	2e0d      	cmp	r6, #13
   27fa0:	dd25      	ble.n	27fee <smp_ident_addr_info+0x1f2>
   27fa2:	230e      	movs	r3, #14
   27fa4:	b142      	cbz	r2, 27fb8 <smp_ident_addr_info+0x1bc>
   27fa6:	2103      	movs	r1, #3
   27fa8:	7139      	strb	r1, [r7, #4]
   27faa:	2100      	movs	r1, #0
   27fac:	7179      	strb	r1, [r7, #5]
   27fae:	71b9      	strb	r1, [r7, #6]
   27fb0:	2101      	movs	r1, #1
   27fb2:	71f9      	strb	r1, [r7, #7]
   27fb4:	6878      	ldr	r0, [r7, #4]
   27fb6:	6120      	str	r0, [r4, #16]
   27fb8:	2100      	movs	r1, #0
   27fba:	f36f 0100 	bfc	r1, #0, #1
   27fbe:	f36f 0141 	bfc	r1, #1, #1
   27fc2:	f36f 0182 	bfc	r1, #2, #1
   27fc6:	f36f 01c5 	bfc	r1, #3, #3
   27fca:	2001      	movs	r0, #1
   27fcc:	f360 1188 	bfi	r1, r0, #6, #3
   27fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   27fd4:	f363 2152 	bfi	r1, r3, #9, #10
   27fd8:	f36f 41de 	bfc	r1, #19, #12
   27fdc:	f36f 71df 	bfc	r1, #31, #1
   27fe0:	2300      	movs	r3, #0
   27fe2:	4854      	ldr	r0, [pc, #336]	; (28134 <smp_ident_addr_info+0x338>)
   27fe4:	f7ee fcb2 	bl	1694c <z_impl_z_log_msg_static_create>
   27fe8:	46ad      	mov	sp, r5
		return BT_SMP_ERR_INVALID_PARAMS;
   27fea:	200a      	movs	r0, #10
   27fec:	e74d      	b.n	27e8a <smp_ident_addr_info+0x8e>
		LOG_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   27fee:	f06f 031b 	mvn.w	r3, #27
   27ff2:	e7d7      	b.n	27fa4 <smp_ident_addr_info+0x1a8>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   27ff4:	4642      	mov	r2, r8
   27ff6:	7a31      	ldrb	r1, [r6, #8]
   27ff8:	2002      	movs	r0, #2
   27ffa:	f000 fcc9 	bl	28990 <bt_keys_get_type>
		if (!keys) {
   27ffe:	4681      	mov	r9, r0
   28000:	b1a0      	cbz	r0, 2802c <smp_ident_addr_info+0x230>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   28002:	78f3      	ldrb	r3, [r6, #3]
   28004:	2b00      	cmp	r3, #0
   28006:	d168      	bne.n	280da <smp_ident_addr_info+0x2de>
			dst = &conn->le.resp_addr;
   28008:	f106 019e 	add.w	r1, r6, #158	; 0x9e
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2800c:	780b      	ldrb	r3, [r1, #0]
   2800e:	2b01      	cmp	r3, #1
   28010:	d104      	bne.n	2801c <smp_ident_addr_info+0x220>
	return BT_ADDR_IS_RPA(&addr->a);
   28012:	798b      	ldrb	r3, [r1, #6]
   28014:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
		if (bt_addr_le_is_rpa(dst)) {
   28018:	2b40      	cmp	r3, #64	; 0x40
   2801a:	d061      	beq.n	280e0 <smp_ident_addr_info+0x2e4>
		err = smp_id_add_replace(smp, keys);
   2801c:	4649      	mov	r1, r9
   2801e:	4620      	mov	r0, r4
   28020:	f7ff fa4c 	bl	274bc <smp_id_add_replace>
		if (err) {
   28024:	2800      	cmp	r0, #0
   28026:	f43f af1d 	beq.w	27e64 <smp_ident_addr_info+0x68>
   2802a:	e72e      	b.n	27e8a <smp_ident_addr_info+0x8e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   2802c:	4640      	mov	r0, r8
   2802e:	f7f2 fe5b 	bl	1ace8 <bt_addr_le_str>
   28032:	466d      	mov	r5, sp
   28034:	2300      	movs	r3, #0
   28036:	713b      	strb	r3, [r7, #4]
   28038:	2302      	movs	r3, #2
   2803a:	717b      	strb	r3, [r7, #5]
   2803c:	b088      	sub	sp, #32
   2803e:	466c      	mov	r4, sp
   28040:	f114 0210 	adds.w	r2, r4, #16
   28044:	d011      	beq.n	2806a <smp_ident_addr_info+0x26e>
   28046:	260e      	movs	r6, #14
   28048:	b11a      	cbz	r2, 28052 <smp_ident_addr_info+0x256>
   2804a:	2e04      	cmp	r6, #4
   2804c:	dd01      	ble.n	28052 <smp_ident_addr_info+0x256>
   2804e:	4b3b      	ldr	r3, [pc, #236]	; (2813c <smp_ident_addr_info+0x340>)
   28050:	6163      	str	r3, [r4, #20]
   28052:	2300      	movs	r3, #0
   28054:	703b      	strb	r3, [r7, #0]
   28056:	2302      	movs	r3, #2
   28058:	707b      	strb	r3, [r7, #1]
   2805a:	b19a      	cbz	r2, 28084 <smp_ident_addr_info+0x288>
   2805c:	2e08      	cmp	r6, #8
   2805e:	dd00      	ble.n	28062 <smp_ident_addr_info+0x266>
   28060:	61a0      	str	r0, [r4, #24]
   28062:	f104 031c 	add.w	r3, r4, #28
   28066:	2100      	movs	r1, #0
   28068:	e00a      	b.n	28080 <smp_ident_addr_info+0x284>
   2806a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2806e:	e7eb      	b.n	28048 <smp_ident_addr_info+0x24c>
   28070:	f101 0008 	add.w	r0, r1, #8
   28074:	4438      	add	r0, r7
   28076:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   2807a:	f803 0b01 	strb.w	r0, [r3], #1
   2807e:	3101      	adds	r1, #1
   28080:	2901      	cmp	r1, #1
   28082:	d9f5      	bls.n	28070 <smp_ident_addr_info+0x274>
   28084:	2e0d      	cmp	r6, #13
   28086:	dd25      	ble.n	280d4 <smp_ident_addr_info+0x2d8>
   28088:	230e      	movs	r3, #14
   2808a:	b142      	cbz	r2, 2809e <smp_ident_addr_info+0x2a2>
   2808c:	2103      	movs	r1, #3
   2808e:	7139      	strb	r1, [r7, #4]
   28090:	2100      	movs	r1, #0
   28092:	7179      	strb	r1, [r7, #5]
   28094:	71b9      	strb	r1, [r7, #6]
   28096:	2101      	movs	r1, #1
   28098:	71f9      	strb	r1, [r7, #7]
   2809a:	6878      	ldr	r0, [r7, #4]
   2809c:	6120      	str	r0, [r4, #16]
   2809e:	2100      	movs	r1, #0
   280a0:	f36f 0100 	bfc	r1, #0, #1
   280a4:	f36f 0141 	bfc	r1, #1, #1
   280a8:	f36f 0182 	bfc	r1, #2, #1
   280ac:	f36f 01c5 	bfc	r1, #3, #3
   280b0:	2001      	movs	r0, #1
   280b2:	f360 1188 	bfi	r1, r0, #6, #3
   280b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   280ba:	f363 2152 	bfi	r1, r3, #9, #10
   280be:	f36f 41de 	bfc	r1, #19, #12
   280c2:	f36f 71df 	bfc	r1, #31, #1
   280c6:	2300      	movs	r3, #0
   280c8:	481a      	ldr	r0, [pc, #104]	; (28134 <smp_ident_addr_info+0x338>)
   280ca:	f7ee fc3f 	bl	1694c <z_impl_z_log_msg_static_create>
   280ce:	46ad      	mov	sp, r5
			return BT_SMP_ERR_UNSPECIFIED;
   280d0:	2008      	movs	r0, #8
   280d2:	e6da      	b.n	27e8a <smp_ident_addr_info+0x8e>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   280d4:	f06f 031b 	mvn.w	r3, #27
   280d8:	e7d7      	b.n	2808a <smp_ident_addr_info+0x28e>
			dst = &conn->le.init_addr;
   280da:	f106 0197 	add.w	r1, r6, #151	; 0x97
   280de:	e795      	b.n	2800c <smp_ident_addr_info+0x210>
	memcpy(dst, src, sizeof(*dst));
   280e0:	2206      	movs	r2, #6
   280e2:	3101      	adds	r1, #1
   280e4:	f109 003a 	add.w	r0, r9, #58	; 0x3a
   280e8:	f010 f987 	bl	383fa <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   280ec:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
   280f0:	2b00      	cmp	r3, #0
   280f2:	d093      	beq.n	2801c <smp_ident_addr_info+0x220>
	return BT_ADDR_IS_STATIC(&addr->a);
   280f4:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
   280f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   280fc:	2bc0      	cmp	r3, #192	; 0xc0
   280fe:	d08d      	beq.n	2801c <smp_ident_addr_info+0x220>
	memcpy(dst, src, sizeof(*dst));
   28100:	2207      	movs	r2, #7
   28102:	4629      	mov	r1, r5
   28104:	f109 0001 	add.w	r0, r9, #1
   28108:	f010 f977 	bl	383fa <memcpy>
   2810c:	2207      	movs	r2, #7
   2810e:	4629      	mov	r1, r5
   28110:	4640      	mov	r0, r8
   28112:	f010 f972 	bl	383fa <memcpy>
				bt_conn_identity_resolved(conn);
   28116:	4630      	mov	r0, r6
   28118:	f7f8 fc4a 	bl	209b0 <bt_conn_identity_resolved>
   2811c:	e77e      	b.n	2801c <smp_ident_addr_info+0x220>
		smp_pairing_complete(smp, 0);
   2811e:	2100      	movs	r1, #0
   28120:	4620      	mov	r0, r4
   28122:	f7ff fb4d 	bl	277c0 <smp_pairing_complete>
	return 0;
   28126:	2000      	movs	r0, #0
   28128:	e6af      	b.n	27e8a <smp_ident_addr_info+0x8e>
				return BT_SMP_ERR_UNSPECIFIED;
   2812a:	2008      	movs	r0, #8
   2812c:	e6ad      	b.n	27e8a <smp_ident_addr_info+0x8e>
   2812e:	bf00      	nop
   28130:	0004433c 	.word	0x0004433c
   28134:	0003f418 	.word	0x0003f418
   28138:	00044350 	.word	0x00044350
   2813c:	00044158 	.word	0x00044158

00028140 <smp_central_ident>:
{
   28140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28144:	b083      	sub	sp, #12
   28146:	af00      	add	r7, sp, #0
   28148:	4604      	mov	r4, r0
   2814a:	460d      	mov	r5, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   2814c:	f8d0 60ec 	ldr.w	r6, [r0, #236]	; 0xec
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   28150:	210d      	movs	r1, #13
   28152:	3004      	adds	r0, #4
   28154:	f012 ffc7 	bl	3b0e6 <atomic_test_bit>
   28158:	b9a0      	cbnz	r0, 28184 <smp_central_ident+0x44>
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   2815a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   2815e:	f023 0201 	bic.w	r2, r3, #1
   28162:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   28166:	f013 0f02 	tst.w	r3, #2
   2816a:	d17a      	bne.n	28262 <smp_central_ident+0x122>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   2816c:	f013 0f04 	tst.w	r3, #4
   28170:	d07f      	beq.n	28272 <smp_central_ident+0x132>
   28172:	e8d4 3fef 	ldaex	r3, [r4]
   28176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   2817a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2817e:	2a00      	cmp	r2, #0
   28180:	d077      	beq.n	28272 <smp_central_ident+0x132>
   28182:	e7f6      	b.n	28172 <smp_central_ident+0x32>
		struct bt_smp_central_ident *req = (void *)buf->data;
   28184:	f8d5 800c 	ldr.w	r8, [r5, #12]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   28188:	f106 0990 	add.w	r9, r6, #144	; 0x90
   2818c:	464a      	mov	r2, r9
   2818e:	7a31      	ldrb	r1, [r6, #8]
   28190:	2004      	movs	r0, #4
   28192:	f000 fbfd 	bl	28990 <bt_keys_get_type>
		if (!keys) {
   28196:	4605      	mov	r5, r0
   28198:	b160      	cbz	r0, 281b4 <smp_central_ident+0x74>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   2819a:	2202      	movs	r2, #2
   2819c:	4641      	mov	r1, r8
   2819e:	3018      	adds	r0, #24
   281a0:	f010 f92b 	bl	383fa <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   281a4:	2208      	movs	r2, #8
   281a6:	f108 0102 	add.w	r1, r8, #2
   281aa:	f105 0010 	add.w	r0, r5, #16
   281ae:	f010 f924 	bl	383fa <memcpy>
   281b2:	e7d2      	b.n	2815a <smp_central_ident+0x1a>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   281b4:	4648      	mov	r0, r9
   281b6:	f7f2 fd97 	bl	1ace8 <bt_addr_le_str>
   281ba:	466d      	mov	r5, sp
   281bc:	2300      	movs	r3, #0
   281be:	713b      	strb	r3, [r7, #4]
   281c0:	2302      	movs	r3, #2
   281c2:	717b      	strb	r3, [r7, #5]
   281c4:	b088      	sub	sp, #32
   281c6:	466c      	mov	r4, sp
   281c8:	f114 0210 	adds.w	r2, r4, #16
   281cc:	d011      	beq.n	281f2 <smp_central_ident+0xb2>
   281ce:	260e      	movs	r6, #14
   281d0:	b11a      	cbz	r2, 281da <smp_central_ident+0x9a>
   281d2:	2e04      	cmp	r6, #4
   281d4:	dd01      	ble.n	281da <smp_central_ident+0x9a>
   281d6:	4b2e      	ldr	r3, [pc, #184]	; (28290 <smp_central_ident+0x150>)
   281d8:	6163      	str	r3, [r4, #20]
   281da:	2300      	movs	r3, #0
   281dc:	703b      	strb	r3, [r7, #0]
   281de:	2302      	movs	r3, #2
   281e0:	707b      	strb	r3, [r7, #1]
   281e2:	b19a      	cbz	r2, 2820c <smp_central_ident+0xcc>
   281e4:	2e08      	cmp	r6, #8
   281e6:	dd00      	ble.n	281ea <smp_central_ident+0xaa>
   281e8:	61a0      	str	r0, [r4, #24]
   281ea:	f104 031c 	add.w	r3, r4, #28
   281ee:	2100      	movs	r1, #0
   281f0:	e00a      	b.n	28208 <smp_central_ident+0xc8>
   281f2:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   281f6:	e7eb      	b.n	281d0 <smp_central_ident+0x90>
   281f8:	f101 0008 	add.w	r0, r1, #8
   281fc:	4438      	add	r0, r7
   281fe:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   28202:	f803 0b01 	strb.w	r0, [r3], #1
   28206:	3101      	adds	r1, #1
   28208:	2901      	cmp	r1, #1
   2820a:	d9f5      	bls.n	281f8 <smp_central_ident+0xb8>
   2820c:	2e0d      	cmp	r6, #13
   2820e:	dd25      	ble.n	2825c <smp_central_ident+0x11c>
   28210:	230e      	movs	r3, #14
   28212:	b142      	cbz	r2, 28226 <smp_central_ident+0xe6>
   28214:	2103      	movs	r1, #3
   28216:	7139      	strb	r1, [r7, #4]
   28218:	2100      	movs	r1, #0
   2821a:	7179      	strb	r1, [r7, #5]
   2821c:	71b9      	strb	r1, [r7, #6]
   2821e:	2101      	movs	r1, #1
   28220:	71f9      	strb	r1, [r7, #7]
   28222:	6878      	ldr	r0, [r7, #4]
   28224:	6120      	str	r0, [r4, #16]
   28226:	2100      	movs	r1, #0
   28228:	f36f 0100 	bfc	r1, #0, #1
   2822c:	f36f 0141 	bfc	r1, #1, #1
   28230:	f36f 0182 	bfc	r1, #2, #1
   28234:	f36f 01c5 	bfc	r1, #3, #3
   28238:	2001      	movs	r0, #1
   2823a:	f360 1188 	bfi	r1, r0, #6, #3
   2823e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   28242:	f363 2152 	bfi	r1, r3, #9, #10
   28246:	f36f 41de 	bfc	r1, #19, #12
   2824a:	f36f 71df 	bfc	r1, #31, #1
   2824e:	2300      	movs	r3, #0
   28250:	4810      	ldr	r0, [pc, #64]	; (28294 <smp_central_ident+0x154>)
   28252:	f7ee fb7b 	bl	1694c <z_impl_z_log_msg_static_create>
   28256:	46ad      	mov	sp, r5
			return BT_SMP_ERR_UNSPECIFIED;
   28258:	2008      	movs	r0, #8
   2825a:	e00e      	b.n	2827a <smp_central_ident+0x13a>
			LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   2825c:	f06f 031b 	mvn.w	r3, #27
   28260:	e7d7      	b.n	28212 <smp_central_ident+0xd2>
   28262:	e8d4 3fef 	ldaex	r3, [r4]
   28266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2826a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   2826e:	2a00      	cmp	r2, #0
   28270:	d1f7      	bne.n	28262 <smp_central_ident+0x122>
	if (!smp->local_dist && !smp->remote_dist) {
   28272:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
   28276:	b123      	cbz	r3, 28282 <smp_central_ident+0x142>
	return 0;
   28278:	2000      	movs	r0, #0
}
   2827a:	370c      	adds	r7, #12
   2827c:	46bd      	mov	sp, r7
   2827e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		smp_pairing_complete(smp, 0);
   28282:	2100      	movs	r1, #0
   28284:	4620      	mov	r0, r4
   28286:	f7ff fa9b 	bl	277c0 <smp_pairing_complete>
	return 0;
   2828a:	2000      	movs	r0, #0
   2828c:	e7f5      	b.n	2827a <smp_central_ident+0x13a>
   2828e:	bf00      	nop
   28290:	00044158 	.word	0x00044158
   28294:	0003f418 	.word	0x0003f418

00028298 <smp_pairing_failed>:
{
   28298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2829c:	b083      	sub	sp, #12
   2829e:	af00      	add	r7, sp, #0
   282a0:	4604      	mov	r4, r0
   282a2:	460e      	mov	r6, r1
	struct bt_conn *conn = smp->chan.chan.conn;
   282a4:	f8d0 90ec 	ldr.w	r9, [r0, #236]	; 0xec
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   282a8:	f7fd fe62 	bl	25f70 <latch_auth_cb>
   282ac:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   282ae:	68f6      	ldr	r6, [r6, #12]
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   282b0:	f896 c000 	ldrb.w	ip, [r6]
   282b4:	46e8      	mov	r8, sp
   282b6:	b088      	sub	sp, #32
   282b8:	466b      	mov	r3, sp
   282ba:	f113 0210 	adds.w	r2, r3, #16
   282be:	d047      	beq.n	28350 <smp_pairing_failed+0xb8>
   282c0:	210c      	movs	r1, #12
   282c2:	b152      	cbz	r2, 282da <smp_pairing_failed+0x42>
   282c4:	4608      	mov	r0, r1
   282c6:	2904      	cmp	r1, #4
   282c8:	dd03      	ble.n	282d2 <smp_pairing_failed+0x3a>
   282ca:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 2836c <smp_pairing_failed+0xd4>
   282ce:	f8c3 e014 	str.w	lr, [r3, #20]
   282d2:	2808      	cmp	r0, #8
   282d4:	dd01      	ble.n	282da <smp_pairing_failed+0x42>
   282d6:	f8c3 c018 	str.w	ip, [r3, #24]
   282da:	290b      	cmp	r1, #11
   282dc:	dd3b      	ble.n	28356 <smp_pairing_failed+0xbe>
   282de:	f04f 0c0c 	mov.w	ip, #12
   282e2:	b13a      	cbz	r2, 282f4 <smp_pairing_failed+0x5c>
   282e4:	2103      	movs	r1, #3
   282e6:	7139      	strb	r1, [r7, #4]
   282e8:	2100      	movs	r1, #0
   282ea:	7179      	strb	r1, [r7, #5]
   282ec:	71b9      	strb	r1, [r7, #6]
   282ee:	71f9      	strb	r1, [r7, #7]
   282f0:	6878      	ldr	r0, [r7, #4]
   282f2:	6118      	str	r0, [r3, #16]
   282f4:	2100      	movs	r1, #0
   282f6:	f36f 0100 	bfc	r1, #0, #1
   282fa:	f36f 0141 	bfc	r1, #1, #1
   282fe:	f36f 0182 	bfc	r1, #2, #1
   28302:	f36f 01c5 	bfc	r1, #3, #3
   28306:	2301      	movs	r3, #1
   28308:	f363 1188 	bfi	r1, r3, #6, #3
   2830c:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   28310:	f36c 2152 	bfi	r1, ip, #9, #10
   28314:	f36f 41de 	bfc	r1, #19, #12
   28318:	f36f 71df 	bfc	r1, #31, #1
   2831c:	2300      	movs	r3, #0
   2831e:	4814      	ldr	r0, [pc, #80]	; (28370 <smp_pairing_failed+0xd8>)
   28320:	f7ee fb14 	bl	1694c <z_impl_z_log_msg_static_create>
   28324:	46c5      	mov	sp, r8
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   28326:	f104 0804 	add.w	r8, r4, #4
   2832a:	210a      	movs	r1, #10
   2832c:	4640      	mov	r0, r8
   2832e:	f012 fff5 	bl	3b31c <atomic_test_and_clear_bit>
   28332:	b198      	cbz	r0, 2835c <smp_pairing_failed+0xc4>
		if (smp_auth_cb && smp_auth_cb->cancel) {
   28334:	b11d      	cbz	r5, 2833e <smp_pairing_failed+0xa6>
   28336:	692b      	ldr	r3, [r5, #16]
   28338:	b10b      	cbz	r3, 2833e <smp_pairing_failed+0xa6>
			smp_auth_cb->cancel(conn);
   2833a:	4648      	mov	r0, r9
   2833c:	4798      	blx	r3
	smp_pairing_complete(smp, req->reason);
   2833e:	7831      	ldrb	r1, [r6, #0]
   28340:	4620      	mov	r0, r4
   28342:	f7ff fa3d 	bl	277c0 <smp_pairing_complete>
}
   28346:	2000      	movs	r0, #0
   28348:	370c      	adds	r7, #12
   2834a:	46bd      	mov	sp, r7
   2834c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("pairing failed (peer reason 0x%x)", req->reason);
   28350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   28354:	e7b5      	b.n	282c2 <smp_pairing_failed+0x2a>
   28356:	f06f 0c1b 	mvn.w	ip, #27
   2835a:	e7c2      	b.n	282e2 <smp_pairing_failed+0x4a>
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   2835c:	210b      	movs	r1, #11
   2835e:	4640      	mov	r0, r8
   28360:	f012 ffdc 	bl	3b31c <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   28364:	2800      	cmp	r0, #0
   28366:	d0ea      	beq.n	2833e <smp_pairing_failed+0xa6>
   28368:	e7e4      	b.n	28334 <smp_pairing_failed+0x9c>
   2836a:	bf00      	nop
   2836c:	00044358 	.word	0x00044358
   28370:	0003f418 	.word	0x0003f418

00028374 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
   28374:	7883      	ldrb	r3, [r0, #2]
   28376:	2b01      	cmp	r3, #1
   28378:	d000      	beq.n	2837c <smp_check_complete+0x8>
   2837a:	4770      	bx	lr
{
   2837c:	b510      	push	{r4, lr}
   2837e:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   28380:	2106      	movs	r1, #6
   28382:	f011 f92a 	bl	395da <bt_l2cap_le_lookup_tx_cid>
		__ASSERT(chan, "No SMP channel found");
   28386:	4603      	mov	r3, r0
   28388:	b158      	cbz	r0, 283a2 <smp_check_complete+0x2e>
		smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2838a:	38ec      	subs	r0, #236	; 0xec
		smp->local_dist &= ~dist_complete;
   2838c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
   28390:	43e1      	mvns	r1, r4
   28392:	b249      	sxtb	r1, r1
   28394:	400a      	ands	r2, r1
   28396:	f803 2c04 	strb.w	r2, [r3, #-4]
		if (!smp->local_dist && !smp->remote_dist) {
   2839a:	f833 3c04 	ldrh.w	r3, [r3, #-4]
   2839e:	b183      	cbz	r3, 283c2 <smp_check_complete+0x4e>
}
   283a0:	bd10      	pop	{r4, pc}
		__ASSERT(chan, "No SMP channel found");
   283a2:	4c0a      	ldr	r4, [pc, #40]	; (283cc <smp_check_complete+0x58>)
   283a4:	f240 2365 	movw	r3, #613	; 0x265
   283a8:	4622      	mov	r2, r4
   283aa:	4909      	ldr	r1, [pc, #36]	; (283d0 <smp_check_complete+0x5c>)
   283ac:	4809      	ldr	r0, [pc, #36]	; (283d4 <smp_check_complete+0x60>)
   283ae:	f00d ff71 	bl	36294 <assert_print>
   283b2:	4809      	ldr	r0, [pc, #36]	; (283d8 <smp_check_complete+0x64>)
   283b4:	f00d ff6e 	bl	36294 <assert_print>
   283b8:	f240 2165 	movw	r1, #613	; 0x265
   283bc:	4620      	mov	r0, r4
   283be:	f00d ff62 	bl	36286 <assert_post_action>
			smp_pairing_complete(smp, 0);
   283c2:	2100      	movs	r1, #0
   283c4:	f7ff f9fc 	bl	277c0 <smp_pairing_complete>
		return;
   283c8:	e7ea      	b.n	283a0 <smp_check_complete+0x2c>
   283ca:	bf00      	nop
   283cc:	00044174 	.word	0x00044174
   283d0:	0004367c 	.word	0x0004367c
   283d4:	0003f72c 	.word	0x0003f72c
   283d8:	0004437c 	.word	0x0004437c

000283dc <smp_timeout>:
{
   283dc:	b570      	push	{r4, r5, r6, lr}
   283de:	b088      	sub	sp, #32
   283e0:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
   283e2:	f5a0 76c0 	sub.w	r6, r0, #384	; 0x180
	LOG_ERR("SMP Timeout");
   283e6:	4b1a      	ldr	r3, [pc, #104]	; (28450 <smp_timeout+0x74>)
   283e8:	9307      	str	r3, [sp, #28]
   283ea:	2302      	movs	r3, #2
   283ec:	f88d 3004 	strb.w	r3, [sp, #4]
   283f0:	2300      	movs	r3, #0
   283f2:	f88d 3005 	strb.w	r3, [sp, #5]
   283f6:	f88d 3006 	strb.w	r3, [sp, #6]
   283fa:	f88d 3007 	strb.w	r3, [sp, #7]
   283fe:	9a01      	ldr	r2, [sp, #4]
   28400:	9206      	str	r2, [sp, #24]
   28402:	4619      	mov	r1, r3
   28404:	f363 0100 	bfi	r1, r3, #0, #1
   28408:	f363 0141 	bfi	r1, r3, #1, #1
   2840c:	f363 0182 	bfi	r1, r3, #2, #1
   28410:	f363 01c5 	bfi	r1, r3, #3, #3
   28414:	2201      	movs	r2, #1
   28416:	f362 1188 	bfi	r1, r2, #6, #3
   2841a:	2508      	movs	r5, #8
   2841c:	f365 2152 	bfi	r1, r5, #9, #10
   28420:	f363 41de 	bfi	r1, r3, #19, #12
   28424:	f363 71df 	bfi	r1, r3, #31, #1
   28428:	aa06      	add	r2, sp, #24
   2842a:	480a      	ldr	r0, [pc, #40]	; (28454 <smp_timeout+0x78>)
   2842c:	f7ee fa8e 	bl	1694c <z_impl_z_log_msg_static_create>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   28430:	4629      	mov	r1, r5
   28432:	4630      	mov	r0, r6
   28434:	f7ff f9c4 	bl	277c0 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   28438:	f5a4 74be 	sub.w	r4, r4, #380	; 0x17c
   2843c:	e8d4 3fef 	ldaex	r3, [r4]
   28440:	f043 0310 	orr.w	r3, r3, #16
   28444:	e8c4 3fe2 	stlex	r2, r3, [r4]
   28448:	2a00      	cmp	r2, #0
   2844a:	d1f7      	bne.n	2843c <smp_timeout+0x60>
}
   2844c:	b008      	add	sp, #32
   2844e:	bd70      	pop	{r4, r5, r6, pc}
   28450:	00044394 	.word	0x00044394
   28454:	0003f418 	.word	0x0003f418

00028458 <bt_smp_update_keys>:
{
   28458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2845c:	b082      	sub	sp, #8
   2845e:	af00      	add	r7, sp, #0
   28460:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   28462:	f7fd fccd 	bl	25e00 <smp_chan_get>
	if (!smp) {
   28466:	2800      	cmp	r0, #0
   28468:	d048      	beq.n	284fc <bt_smp_update_keys+0xa4>
   2846a:	4605      	mov	r5, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2846c:	1d06      	adds	r6, r0, #4
   2846e:	2103      	movs	r1, #3
   28470:	4630      	mov	r0, r6
   28472:	f012 fe38 	bl	3b0e6 <atomic_test_bit>
   28476:	2800      	cmp	r0, #0
   28478:	d040      	beq.n	284fc <bt_smp_update_keys+0xa4>
	if (conn->le.keys) {
   2847a:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   2847e:	b108      	cbz	r0, 28484 <bt_smp_update_keys+0x2c>
		bt_keys_clear(conn->le.keys);
   28480:	f000 faae 	bl	289e0 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   28484:	f104 0890 	add.w	r8, r4, #144	; 0x90
   28488:	4641      	mov	r1, r8
   2848a:	7a20      	ldrb	r0, [r4, #8]
   2848c:	f000 f8fa 	bl	28684 <bt_keys_get_addr>
   28490:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
   28494:	b3b0      	cbz	r0, 28504 <bt_smp_update_keys+0xac>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   28496:	210e      	movs	r1, #14
   28498:	4630      	mov	r0, r6
   2849a:	f012 fe24 	bl	3b0e6 <atomic_test_bit>
   2849e:	b128      	cbz	r0, 284ac <bt_smp_update_keys+0x54>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   284a0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   284a4:	7b53      	ldrb	r3, [r2, #13]
   284a6:	f043 0302 	orr.w	r3, r3, #2
   284aa:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   284ac:	7a2b      	ldrb	r3, [r5, #8]
   284ae:	2b03      	cmp	r3, #3
   284b0:	f240 8086 	bls.w	285c0 <bt_smp_update_keys+0x168>
   284b4:	3b05      	subs	r3, #5
   284b6:	b2db      	uxtb	r3, r3
   284b8:	2b01      	cmp	r3, #1
   284ba:	f200 8084 	bhi.w	285c6 <bt_smp_update_keys+0x16e>
		conn->le.keys->flags |= BT_KEYS_OOB;
   284be:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   284c2:	7b53      	ldrb	r3, [r2, #13]
   284c4:	f043 0320 	orr.w	r3, r3, #32
   284c8:	7353      	strb	r3, [r2, #13]
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   284ca:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   284ce:	7b53      	ldrb	r3, [r2, #13]
   284d0:	f043 0301 	orr.w	r3, r3, #1
   284d4:	7353      	strb	r3, [r2, #13]
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   284d6:	f8d4 80c0 	ldr.w	r8, [r4, #192]	; 0xc0
   284da:	4628      	mov	r0, r5
   284dc:	f012 fda7 	bl	3b02e <get_encryption_key_size>
   284e0:	f888 000c 	strb.w	r0, [r8, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   284e4:	2105      	movs	r1, #5
   284e6:	4630      	mov	r0, r6
   284e8:	f012 fdfd 	bl	3b0e6 <atomic_test_bit>
   284ec:	2800      	cmp	r0, #0
   284ee:	d177      	bne.n	285e0 <bt_smp_update_keys+0x188>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   284f0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   284f4:	7b53      	ldrb	r3, [r2, #13]
   284f6:	f023 0310 	bic.w	r3, r3, #16
   284fa:	7353      	strb	r3, [r2, #13]
}
   284fc:	3708      	adds	r7, #8
   284fe:	46bd      	mov	sp, r7
   28500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   28504:	4640      	mov	r0, r8
   28506:	f7f2 fbef 	bl	1ace8 <bt_addr_le_str>
   2850a:	466e      	mov	r6, sp
   2850c:	2300      	movs	r3, #0
   2850e:	713b      	strb	r3, [r7, #4]
   28510:	2302      	movs	r3, #2
   28512:	717b      	strb	r3, [r7, #5]
   28514:	b088      	sub	sp, #32
   28516:	466c      	mov	r4, sp
   28518:	f114 0210 	adds.w	r2, r4, #16
   2851c:	d014      	beq.n	28548 <bt_smp_update_keys+0xf0>
   2851e:	f04f 0c0e 	mov.w	ip, #14
   28522:	b122      	cbz	r2, 2852e <bt_smp_update_keys+0xd6>
   28524:	f1bc 0f04 	cmp.w	ip, #4
   28528:	dd01      	ble.n	2852e <bt_smp_update_keys+0xd6>
   2852a:	4b41      	ldr	r3, [pc, #260]	; (28630 <bt_smp_update_keys+0x1d8>)
   2852c:	6163      	str	r3, [r4, #20]
   2852e:	2300      	movs	r3, #0
   28530:	703b      	strb	r3, [r7, #0]
   28532:	2302      	movs	r3, #2
   28534:	707b      	strb	r3, [r7, #1]
   28536:	b1a2      	cbz	r2, 28562 <bt_smp_update_keys+0x10a>
   28538:	f1bc 0f08 	cmp.w	ip, #8
   2853c:	dd00      	ble.n	28540 <bt_smp_update_keys+0xe8>
   2853e:	61a0      	str	r0, [r4, #24]
   28540:	f104 031c 	add.w	r3, r4, #28
   28544:	2100      	movs	r1, #0
   28546:	e00a      	b.n	2855e <bt_smp_update_keys+0x106>
   28548:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   2854c:	e7e9      	b.n	28522 <bt_smp_update_keys+0xca>
   2854e:	f101 0008 	add.w	r0, r1, #8
   28552:	4438      	add	r0, r7
   28554:	f810 0c08 	ldrb.w	r0, [r0, #-8]
   28558:	f803 0b01 	strb.w	r0, [r3], #1
   2855c:	3101      	adds	r1, #1
   2855e:	2901      	cmp	r1, #1
   28560:	d9f5      	bls.n	2854e <bt_smp_update_keys+0xf6>
   28562:	f1bc 0f0d 	cmp.w	ip, #13
   28566:	dd28      	ble.n	285ba <bt_smp_update_keys+0x162>
   28568:	230e      	movs	r3, #14
   2856a:	b142      	cbz	r2, 2857e <bt_smp_update_keys+0x126>
   2856c:	2103      	movs	r1, #3
   2856e:	7139      	strb	r1, [r7, #4]
   28570:	2100      	movs	r1, #0
   28572:	7179      	strb	r1, [r7, #5]
   28574:	71b9      	strb	r1, [r7, #6]
   28576:	2101      	movs	r1, #1
   28578:	71f9      	strb	r1, [r7, #7]
   2857a:	6878      	ldr	r0, [r7, #4]
   2857c:	6120      	str	r0, [r4, #16]
   2857e:	2100      	movs	r1, #0
   28580:	f36f 0100 	bfc	r1, #0, #1
   28584:	f36f 0141 	bfc	r1, #1, #1
   28588:	f36f 0182 	bfc	r1, #2, #1
   2858c:	f36f 01c5 	bfc	r1, #3, #3
   28590:	2001      	movs	r0, #1
   28592:	f360 1188 	bfi	r1, r0, #6, #3
   28596:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2859a:	f363 2152 	bfi	r1, r3, #9, #10
   2859e:	f36f 41de 	bfc	r1, #19, #12
   285a2:	f36f 71df 	bfc	r1, #31, #1
   285a6:	2300      	movs	r3, #0
   285a8:	4822      	ldr	r0, [pc, #136]	; (28634 <bt_smp_update_keys+0x1dc>)
   285aa:	f7ee f9cf 	bl	1694c <z_impl_z_log_msg_static_create>
   285ae:	46b5      	mov	sp, r6
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   285b0:	2108      	movs	r1, #8
   285b2:	4628      	mov	r0, r5
   285b4:	f7ff f986 	bl	278c4 <smp_error>
		return;
   285b8:	e7a0      	b.n	284fc <bt_smp_update_keys+0xa4>
		LOG_ERR("Unable to get keys for %s", bt_addr_le_str(&conn->le.dst));
   285ba:	f06f 031b 	mvn.w	r3, #27
   285be:	e7d4      	b.n	2856a <bt_smp_update_keys+0x112>
	switch (smp->method) {
   285c0:	b25b      	sxtb	r3, r3
   285c2:	2b00      	cmp	r3, #0
   285c4:	d181      	bne.n	284ca <bt_smp_update_keys+0x72>
		conn->le.keys->flags &= ~BT_KEYS_OOB;
   285c6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   285ca:	7b53      	ldrb	r3, [r2, #13]
   285cc:	f023 0320 	bic.w	r3, r3, #32
   285d0:	7353      	strb	r3, [r2, #13]
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   285d2:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   285d6:	7b53      	ldrb	r3, [r2, #13]
   285d8:	f023 0301 	bic.w	r3, r3, #1
   285dc:	7353      	strb	r3, [r2, #13]
		break;
   285de:	e77a      	b.n	284d6 <bt_smp_update_keys+0x7e>
		conn->le.keys->flags |= BT_KEYS_SC;
   285e0:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   285e4:	7b53      	ldrb	r3, [r2, #13]
   285e6:	f043 0310 	orr.w	r3, r3, #16
   285ea:	7353      	strb	r3, [r2, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   285ec:	210d      	movs	r1, #13
   285ee:	4630      	mov	r0, r6
   285f0:	f012 fd79 	bl	3b0e6 <atomic_test_bit>
   285f4:	2800      	cmp	r0, #0
   285f6:	d081      	beq.n	284fc <bt_smp_update_keys+0xa4>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   285f8:	2120      	movs	r1, #32
   285fa:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   285fe:	f000 f9ad 	bl	2895c <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   28602:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   28606:	2210      	movs	r2, #16
   28608:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2860c:	301a      	adds	r0, #26
   2860e:	f00f fef4 	bl	383fa <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   28612:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   28616:	2208      	movs	r2, #8
   28618:	2100      	movs	r1, #0
   2861a:	3010      	adds	r0, #16
   2861c:	f00f ff1c 	bl	38458 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   28620:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   28624:	2202      	movs	r2, #2
   28626:	2100      	movs	r1, #0
   28628:	3018      	adds	r0, #24
   2862a:	f00f ff15 	bl	38458 <memset>
   2862e:	e765      	b.n	284fc <bt_smp_update_keys+0xa4>
   28630:	00044158 	.word	0x00044158
   28634:	0003f418 	.word	0x0003f418

00028638 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   28638:	b508      	push	{r3, lr}
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
   2863a:	f7fd fbd5 	bl	25de8 <le_sc_supported>
   2863e:	4b03      	ldr	r3, [pc, #12]	; (2864c <bt_smp_init+0x14>)
   28640:	7018      	strb	r0, [r3, #0]
	}

	LOG_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   28642:	4803      	ldr	r0, [pc, #12]	; (28650 <bt_smp_init+0x18>)
   28644:	f7f6 ffe6 	bl	1f614 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   28648:	2000      	movs	r0, #0
   2864a:	bd08      	pop	{r3, pc}
   2864c:	2000cab5 	.word	0x2000cab5
   28650:	2000856c 	.word	0x2000856c

00028654 <id_add>:
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	return 0;
}

static void id_add(struct bt_keys *keys, void *user_data)
{
   28654:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   28656:	b110      	cbz	r0, 2865e <id_add+0xa>

	bt_id_add(keys);
   28658:	f7f5 fee2 	bl	1e420 <bt_id_add>
}
   2865c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(keys != NULL);
   2865e:	4c06      	ldr	r4, [pc, #24]	; (28678 <id_add+0x24>)
   28660:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   28664:	4622      	mov	r2, r4
   28666:	4905      	ldr	r1, [pc, #20]	; (2867c <id_add+0x28>)
   28668:	4805      	ldr	r0, [pc, #20]	; (28680 <id_add+0x2c>)
   2866a:	f00d fe13 	bl	36294 <assert_print>
   2866e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   28672:	4620      	mov	r0, r4
   28674:	f00d fe07 	bl	36286 <assert_post_action>
   28678:	00044480 	.word	0x00044480
   2867c:	000444b0 	.word	0x000444b0
   28680:	0003f72c 	.word	0x0003f72c

00028684 <bt_keys_get_addr>:
{
   28684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(addr != NULL);
   28688:	b149      	cbz	r1, 2869e <bt_keys_get_addr+0x1a>
   2868a:	4606      	mov	r6, r0
   2868c:	4688      	mov	r8, r1
	size_t first_free_slot = ARRAY_SIZE(key_pool);
   2868e:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   28690:	2400      	movs	r4, #0
   28692:	b17c      	cbz	r4, 286b4 <bt_keys_get_addr+0x30>
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
   28694:	b385      	cbz	r5, 286f8 <bt_keys_get_addr+0x74>
	return NULL;
   28696:	2700      	movs	r7, #0
}
   28698:	4638      	mov	r0, r7
   2869a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(addr != NULL);
   2869e:	4c1c      	ldr	r4, [pc, #112]	; (28710 <bt_keys_get_addr+0x8c>)
   286a0:	2359      	movs	r3, #89	; 0x59
   286a2:	4622      	mov	r2, r4
   286a4:	491b      	ldr	r1, [pc, #108]	; (28714 <bt_keys_get_addr+0x90>)
   286a6:	481c      	ldr	r0, [pc, #112]	; (28718 <bt_keys_get_addr+0x94>)
   286a8:	f00d fdf4 	bl	36294 <assert_print>
   286ac:	2159      	movs	r1, #89	; 0x59
   286ae:	4620      	mov	r0, r4
   286b0:	f00d fde9 	bl	36286 <assert_post_action>
		keys = &key_pool[i];
   286b4:	235c      	movs	r3, #92	; 0x5c
   286b6:	fb04 f303 	mul.w	r3, r4, r3
   286ba:	4a18      	ldr	r2, [pc, #96]	; (2871c <bt_keys_get_addr+0x98>)
   286bc:	189f      	adds	r7, r3, r2
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   286be:	5cd3      	ldrb	r3, [r2, r3]
   286c0:	42b3      	cmp	r3, r6
   286c2:	d003      	beq.n	286cc <bt_keys_get_addr+0x48>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   286c4:	2d01      	cmp	r5, #1
   286c6:	d00a      	beq.n	286de <bt_keys_get_addr+0x5a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   286c8:	3401      	adds	r4, #1
   286ca:	e7e2      	b.n	28692 <bt_keys_get_addr+0xe>
		if (keys->id == id && bt_addr_le_eq(&keys->addr, addr)) {
   286cc:	4638      	mov	r0, r7
	return memcmp(a, b, sizeof(*a));
   286ce:	2207      	movs	r2, #7
   286d0:	4641      	mov	r1, r8
   286d2:	3001      	adds	r0, #1
   286d4:	f00f fe6c 	bl	383b0 <memcmp>
   286d8:	2800      	cmp	r0, #0
   286da:	d1f3      	bne.n	286c4 <bt_keys_get_addr+0x40>
   286dc:	e7dc      	b.n	28698 <bt_keys_get_addr+0x14>
		    bt_addr_le_eq(&keys->addr, BT_ADDR_LE_ANY)) {
   286de:	235c      	movs	r3, #92	; 0x5c
   286e0:	480e      	ldr	r0, [pc, #56]	; (2871c <bt_keys_get_addr+0x98>)
   286e2:	fb03 0004 	mla	r0, r3, r4, r0
   286e6:	2207      	movs	r2, #7
   286e8:	490d      	ldr	r1, [pc, #52]	; (28720 <bt_keys_get_addr+0x9c>)
   286ea:	3001      	adds	r0, #1
   286ec:	f00f fe60 	bl	383b0 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   286f0:	2800      	cmp	r0, #0
   286f2:	d1e9      	bne.n	286c8 <bt_keys_get_addr+0x44>
			first_free_slot = i;
   286f4:	4625      	mov	r5, r4
   286f6:	e7e7      	b.n	286c8 <bt_keys_get_addr+0x44>
		keys = &key_pool[first_free_slot];
   286f8:	235c      	movs	r3, #92	; 0x5c
   286fa:	fb03 f505 	mul.w	r5, r3, r5
   286fe:	4b07      	ldr	r3, [pc, #28]	; (2871c <bt_keys_get_addr+0x98>)
   28700:	18ef      	adds	r7, r5, r3
		keys->id = id;
   28702:	555e      	strb	r6, [r3, r5]
	memcpy(dst, src, sizeof(*dst));
   28704:	2207      	movs	r2, #7
   28706:	4641      	mov	r1, r8
   28708:	1c78      	adds	r0, r7, #1
   2870a:	f00f fe76 	bl	383fa <memcpy>
		return keys;
   2870e:	e7c3      	b.n	28698 <bt_keys_get_addr+0x14>
   28710:	00044480 	.word	0x00044480
   28714:	000444c4 	.word	0x000444c4
   28718:	0003f72c 	.word	0x0003f72c
   2871c:	2000c2a0 	.word	0x2000c2a0
   28720:	0004203c 	.word	0x0004203c

00028724 <bt_keys_foreach_type>:
{
   28724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(func != NULL);
   28726:	b121      	cbz	r1, 28732 <bt_keys_foreach_type+0xe>
   28728:	4605      	mov	r5, r0
   2872a:	4616      	mov	r6, r2
   2872c:	460f      	mov	r7, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2872e:	2400      	movs	r4, #0
   28730:	e017      	b.n	28762 <bt_keys_foreach_type+0x3e>
	__ASSERT_NO_MSG(func != NULL);
   28732:	4c0d      	ldr	r4, [pc, #52]	; (28768 <bt_keys_foreach_type+0x44>)
   28734:	23b3      	movs	r3, #179	; 0xb3
   28736:	4622      	mov	r2, r4
   28738:	490c      	ldr	r1, [pc, #48]	; (2876c <bt_keys_foreach_type+0x48>)
   2873a:	480d      	ldr	r0, [pc, #52]	; (28770 <bt_keys_foreach_type+0x4c>)
   2873c:	f00d fdaa 	bl	36294 <assert_print>
   28740:	21b3      	movs	r1, #179	; 0xb3
   28742:	4620      	mov	r0, r4
   28744:	f00d fd9f 	bl	36286 <assert_post_action>
		if ((key_pool[i].keys & type)) {
   28748:	4b0a      	ldr	r3, [pc, #40]	; (28774 <bt_keys_foreach_type+0x50>)
   2874a:	225c      	movs	r2, #92	; 0x5c
   2874c:	fb02 3304 	mla	r3, r2, r4, r3
   28750:	89db      	ldrh	r3, [r3, #14]
   28752:	421d      	tst	r5, r3
   28754:	d004      	beq.n	28760 <bt_keys_foreach_type+0x3c>
			func(&key_pool[i], data);
   28756:	4631      	mov	r1, r6
   28758:	4b06      	ldr	r3, [pc, #24]	; (28774 <bt_keys_foreach_type+0x50>)
   2875a:	fb02 3004 	mla	r0, r2, r4, r3
   2875e:	47b8      	blx	r7
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   28760:	3401      	adds	r4, #1
   28762:	2c00      	cmp	r4, #0
   28764:	d0f0      	beq.n	28748 <bt_keys_foreach_type+0x24>
}
   28766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28768:	00044480 	.word	0x00044480
   2876c:	000444d8 	.word	0x000444d8
   28770:	0003f72c 	.word	0x0003f72c
   28774:	2000c2a0 	.word	0x2000c2a0

00028778 <keys_commit>:

static int keys_commit(void)
{
   28778:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach_type(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach_type(BT_KEYS_IRK, id_add, NULL);
   2877a:	2200      	movs	r2, #0
   2877c:	4902      	ldr	r1, [pc, #8]	; (28788 <keys_commit+0x10>)
   2877e:	2002      	movs	r0, #2
   28780:	f7ff ffd0 	bl	28724 <bt_keys_foreach_type>
	}

	return 0;
}
   28784:	2000      	movs	r0, #0
   28786:	bd08      	pop	{r3, pc}
   28788:	00028655 	.word	0x00028655

0002878c <bt_keys_find>:
{
   2878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(addr != NULL);
   2878e:	b132      	cbz	r2, 2879e <bt_keys_find+0x12>
   28790:	4606      	mov	r6, r0
   28792:	460d      	mov	r5, r1
   28794:	4617      	mov	r7, r2
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   28796:	2400      	movs	r4, #0
   28798:	b164      	cbz	r4, 287b4 <bt_keys_find+0x28>
	return NULL;
   2879a:	2000      	movs	r0, #0
}
   2879c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(addr != NULL);
   2879e:	4c15      	ldr	r4, [pc, #84]	; (287f4 <bt_keys_find+0x68>)
   287a0:	23c0      	movs	r3, #192	; 0xc0
   287a2:	4622      	mov	r2, r4
   287a4:	4914      	ldr	r1, [pc, #80]	; (287f8 <bt_keys_find+0x6c>)
   287a6:	4815      	ldr	r0, [pc, #84]	; (287fc <bt_keys_find+0x70>)
   287a8:	f00d fd74 	bl	36294 <assert_print>
   287ac:	21c0      	movs	r1, #192	; 0xc0
   287ae:	4620      	mov	r0, r4
   287b0:	f00d fd69 	bl	36286 <assert_post_action>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   287b4:	4b12      	ldr	r3, [pc, #72]	; (28800 <bt_keys_find+0x74>)
   287b6:	225c      	movs	r2, #92	; 0x5c
   287b8:	fb02 3304 	mla	r3, r2, r4, r3
   287bc:	89db      	ldrh	r3, [r3, #14]
   287be:	421e      	tst	r6, r3
   287c0:	d006      	beq.n	287d0 <bt_keys_find+0x44>
   287c2:	4613      	mov	r3, r2
   287c4:	fb04 f303 	mul.w	r3, r4, r3
   287c8:	4a0d      	ldr	r2, [pc, #52]	; (28800 <bt_keys_find+0x74>)
   287ca:	5cd3      	ldrb	r3, [r2, r3]
   287cc:	429d      	cmp	r5, r3
   287ce:	d001      	beq.n	287d4 <bt_keys_find+0x48>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   287d0:	3401      	adds	r4, #1
   287d2:	e7e1      	b.n	28798 <bt_keys_find+0xc>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   287d4:	235c      	movs	r3, #92	; 0x5c
   287d6:	fb03 2004 	mla	r0, r3, r4, r2
	return memcmp(a, b, sizeof(*a));
   287da:	2207      	movs	r2, #7
   287dc:	4639      	mov	r1, r7
   287de:	3001      	adds	r0, #1
   287e0:	f00f fde6 	bl	383b0 <memcmp>
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   287e4:	2800      	cmp	r0, #0
   287e6:	d1f3      	bne.n	287d0 <bt_keys_find+0x44>
			return &key_pool[i];
   287e8:	235c      	movs	r3, #92	; 0x5c
   287ea:	4805      	ldr	r0, [pc, #20]	; (28800 <bt_keys_find+0x74>)
   287ec:	fb03 0004 	mla	r0, r3, r4, r0
   287f0:	e7d4      	b.n	2879c <bt_keys_find+0x10>
   287f2:	bf00      	nop
   287f4:	00044480 	.word	0x00044480
   287f8:	000444c4 	.word	0x000444c4
   287fc:	0003f72c 	.word	0x0003f72c
   28800:	2000c2a0 	.word	0x2000c2a0

00028804 <bt_keys_find_irk>:
{
   28804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(addr != NULL);
   28806:	b179      	cbz	r1, 28828 <bt_keys_find_irk+0x24>
   28808:	4605      	mov	r5, r0
   2880a:	460e      	mov	r6, r1
	if (addr->type != BT_ADDR_LE_RANDOM) {
   2880c:	780b      	ldrb	r3, [r1, #0]
   2880e:	2b01      	cmp	r3, #1
   28810:	d164      	bne.n	288dc <bt_keys_find_irk+0xd8>
	return BT_ADDR_IS_RPA(&addr->a);
   28812:	798b      	ldrb	r3, [r1, #6]
   28814:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	if (!bt_addr_le_is_rpa(addr)) {
   28818:	2b40      	cmp	r3, #64	; 0x40
   2881a:	d110      	bne.n	2883e <bt_keys_find_irk+0x3a>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   2881c:	2400      	movs	r4, #0
   2881e:	b184      	cbz	r4, 28842 <bt_keys_find_irk+0x3e>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   28820:	2400      	movs	r4, #0
   28822:	b384      	cbz	r4, 28886 <bt_keys_find_irk+0x82>
	return NULL;
   28824:	2000      	movs	r0, #0
   28826:	e05a      	b.n	288de <bt_keys_find_irk+0xda>
	__ASSERT_NO_MSG(addr != NULL);
   28828:	4c2d      	ldr	r4, [pc, #180]	; (288e0 <bt_keys_find_irk+0xdc>)
   2882a:	23e9      	movs	r3, #233	; 0xe9
   2882c:	4622      	mov	r2, r4
   2882e:	492d      	ldr	r1, [pc, #180]	; (288e4 <bt_keys_find_irk+0xe0>)
   28830:	482d      	ldr	r0, [pc, #180]	; (288e8 <bt_keys_find_irk+0xe4>)
   28832:	f00d fd2f 	bl	36294 <assert_print>
   28836:	21e9      	movs	r1, #233	; 0xe9
   28838:	4620      	mov	r0, r4
   2883a:	f00d fd24 	bl	36286 <assert_post_action>
		return NULL;
   2883e:	2000      	movs	r0, #0
   28840:	e04d      	b.n	288de <bt_keys_find_irk+0xda>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   28842:	4b2a      	ldr	r3, [pc, #168]	; (288ec <bt_keys_find_irk+0xe8>)
   28844:	225c      	movs	r2, #92	; 0x5c
   28846:	fb02 3304 	mla	r3, r2, r4, r3
   2884a:	89db      	ldrh	r3, [r3, #14]
   2884c:	f013 0f02 	tst.w	r3, #2
   28850:	d006      	beq.n	28860 <bt_keys_find_irk+0x5c>
		if (key_pool[i].id == id &&
   28852:	4613      	mov	r3, r2
   28854:	fb04 f303 	mul.w	r3, r4, r3
   28858:	4a24      	ldr	r2, [pc, #144]	; (288ec <bt_keys_find_irk+0xe8>)
   2885a:	5cd3      	ldrb	r3, [r2, r3]
   2885c:	42ab      	cmp	r3, r5
   2885e:	d001      	beq.n	28864 <bt_keys_find_irk+0x60>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   28860:	3401      	adds	r4, #1
   28862:	e7dc      	b.n	2881e <bt_keys_find_irk+0x1a>
		    !bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
   28864:	215c      	movs	r1, #92	; 0x5c
   28866:	fb04 f101 	mul.w	r1, r4, r1
   2886a:	3138      	adds	r1, #56	; 0x38
   2886c:	4411      	add	r1, r2
	return memcmp(a, b, sizeof(*a));
   2886e:	2206      	movs	r2, #6
   28870:	3102      	adds	r1, #2
   28872:	1c70      	adds	r0, r6, #1
   28874:	f00f fd9c 	bl	383b0 <memcmp>
		if (key_pool[i].id == id &&
   28878:	2800      	cmp	r0, #0
   2887a:	d1f1      	bne.n	28860 <bt_keys_find_irk+0x5c>
			return &key_pool[i];
   2887c:	235c      	movs	r3, #92	; 0x5c
   2887e:	481b      	ldr	r0, [pc, #108]	; (288ec <bt_keys_find_irk+0xe8>)
   28880:	fb03 0004 	mla	r0, r3, r4, r0
   28884:	e02b      	b.n	288de <bt_keys_find_irk+0xda>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   28886:	4b19      	ldr	r3, [pc, #100]	; (288ec <bt_keys_find_irk+0xe8>)
   28888:	225c      	movs	r2, #92	; 0x5c
   2888a:	fb02 3304 	mla	r3, r2, r4, r3
   2888e:	89db      	ldrh	r3, [r3, #14]
   28890:	f013 0f02 	tst.w	r3, #2
   28894:	d006      	beq.n	288a4 <bt_keys_find_irk+0xa0>
		if (key_pool[i].id != id) {
   28896:	4613      	mov	r3, r2
   28898:	fb04 f303 	mul.w	r3, r4, r3
   2889c:	4a13      	ldr	r2, [pc, #76]	; (288ec <bt_keys_find_irk+0xe8>)
   2889e:	5cd3      	ldrb	r3, [r2, r3]
   288a0:	42ab      	cmp	r3, r5
   288a2:	d001      	beq.n	288a8 <bt_keys_find_irk+0xa4>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   288a4:	3401      	adds	r4, #1
   288a6:	e7bc      	b.n	28822 <bt_keys_find_irk+0x1e>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   288a8:	205c      	movs	r0, #92	; 0x5c
   288aa:	fb04 f000 	mul.w	r0, r4, r0
   288ae:	3028      	adds	r0, #40	; 0x28
   288b0:	4410      	add	r0, r2
   288b2:	1c77      	adds	r7, r6, #1
   288b4:	4639      	mov	r1, r7
   288b6:	3002      	adds	r0, #2
   288b8:	f00f fe1e 	bl	384f8 <bt_rpa_irk_matches>
   288bc:	2800      	cmp	r0, #0
   288be:	d0f1      	beq.n	288a4 <bt_keys_find_irk+0xa0>
			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
   288c0:	235c      	movs	r3, #92	; 0x5c
   288c2:	fb03 f404 	mul.w	r4, r3, r4
   288c6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   288ca:	4d08      	ldr	r5, [pc, #32]	; (288ec <bt_keys_find_irk+0xe8>)
   288cc:	4428      	add	r0, r5
	memcpy(dst, src, sizeof(*dst));
   288ce:	2206      	movs	r2, #6
   288d0:	4639      	mov	r1, r7
   288d2:	3002      	adds	r0, #2
   288d4:	f00f fd91 	bl	383fa <memcpy>
			return &key_pool[i];
   288d8:	1960      	adds	r0, r4, r5
   288da:	e000      	b.n	288de <bt_keys_find_irk+0xda>
		return NULL;
   288dc:	2000      	movs	r0, #0
}
   288de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   288e0:	00044480 	.word	0x00044480
   288e4:	000444c4 	.word	0x000444c4
   288e8:	0003f72c 	.word	0x0003f72c
   288ec:	2000c2a0 	.word	0x2000c2a0

000288f0 <bt_keys_find_addr>:
{
   288f0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(addr != NULL);
   288f2:	b129      	cbz	r1, 28900 <bt_keys_find_addr+0x10>
   288f4:	4605      	mov	r5, r0
   288f6:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   288f8:	2400      	movs	r4, #0
   288fa:	b174      	cbz	r4, 2891a <bt_keys_find_addr+0x2a>
	return NULL;
   288fc:	2000      	movs	r0, #0
}
   288fe:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(addr != NULL);
   28900:	4c12      	ldr	r4, [pc, #72]	; (2894c <bt_keys_find_addr+0x5c>)
   28902:	f44f 738d 	mov.w	r3, #282	; 0x11a
   28906:	4622      	mov	r2, r4
   28908:	4911      	ldr	r1, [pc, #68]	; (28950 <bt_keys_find_addr+0x60>)
   2890a:	4812      	ldr	r0, [pc, #72]	; (28954 <bt_keys_find_addr+0x64>)
   2890c:	f00d fcc2 	bl	36294 <assert_print>
   28910:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28914:	4620      	mov	r0, r4
   28916:	f00d fcb6 	bl	36286 <assert_post_action>
		if (key_pool[i].id == id &&
   2891a:	235c      	movs	r3, #92	; 0x5c
   2891c:	fb04 f303 	mul.w	r3, r4, r3
   28920:	4a0d      	ldr	r2, [pc, #52]	; (28958 <bt_keys_find_addr+0x68>)
   28922:	5cd3      	ldrb	r3, [r2, r3]
   28924:	429d      	cmp	r5, r3
   28926:	d001      	beq.n	2892c <bt_keys_find_addr+0x3c>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
   28928:	3401      	adds	r4, #1
   2892a:	e7e6      	b.n	288fa <bt_keys_find_addr+0xa>
		    bt_addr_le_eq(&key_pool[i].addr, addr)) {
   2892c:	235c      	movs	r3, #92	; 0x5c
   2892e:	fb03 2004 	mla	r0, r3, r4, r2
	return memcmp(a, b, sizeof(*a));
   28932:	2207      	movs	r2, #7
   28934:	4631      	mov	r1, r6
   28936:	3001      	adds	r0, #1
   28938:	f00f fd3a 	bl	383b0 <memcmp>
		if (key_pool[i].id == id &&
   2893c:	2800      	cmp	r0, #0
   2893e:	d1f3      	bne.n	28928 <bt_keys_find_addr+0x38>
			return &key_pool[i];
   28940:	235c      	movs	r3, #92	; 0x5c
   28942:	4805      	ldr	r0, [pc, #20]	; (28958 <bt_keys_find_addr+0x68>)
   28944:	fb03 0004 	mla	r0, r3, r4, r0
   28948:	e7d9      	b.n	288fe <bt_keys_find_addr+0xe>
   2894a:	bf00      	nop
   2894c:	00044480 	.word	0x00044480
   28950:	000444c4 	.word	0x000444c4
   28954:	0003f72c 	.word	0x0003f72c
   28958:	2000c2a0 	.word	0x2000c2a0

0002895c <bt_keys_add_type>:
	__ASSERT_NO_MSG(keys != NULL);
   2895c:	b118      	cbz	r0, 28966 <bt_keys_add_type+0xa>
	keys->keys |= type;
   2895e:	89c2      	ldrh	r2, [r0, #14]
   28960:	4311      	orrs	r1, r2
   28962:	81c1      	strh	r1, [r0, #14]
   28964:	4770      	bx	lr
{
   28966:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(keys != NULL);
   28968:	4c06      	ldr	r4, [pc, #24]	; (28984 <bt_keys_add_type+0x28>)
   2896a:	f44f 7395 	mov.w	r3, #298	; 0x12a
   2896e:	4622      	mov	r2, r4
   28970:	4905      	ldr	r1, [pc, #20]	; (28988 <bt_keys_add_type+0x2c>)
   28972:	4806      	ldr	r0, [pc, #24]	; (2898c <bt_keys_add_type+0x30>)
   28974:	f00d fc8e 	bl	36294 <assert_print>
   28978:	f44f 7195 	mov.w	r1, #298	; 0x12a
   2897c:	4620      	mov	r0, r4
   2897e:	f00d fc82 	bl	36286 <assert_post_action>
   28982:	bf00      	nop
   28984:	00044480 	.word	0x00044480
   28988:	000444b0 	.word	0x000444b0
   2898c:	0003f72c 	.word	0x0003f72c

00028990 <bt_keys_get_type>:
{
   28990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(addr != NULL);
   28992:	b142      	cbz	r2, 289a6 <bt_keys_get_type+0x16>
   28994:	4605      	mov	r5, r0
   28996:	460c      	mov	r4, r1
   28998:	4617      	mov	r7, r2
	keys = bt_keys_find(type, id, addr);
   2899a:	f7ff fef7 	bl	2878c <bt_keys_find>
	if (keys) {
   2899e:	4606      	mov	r6, r0
   289a0:	b160      	cbz	r0, 289bc <bt_keys_get_type+0x2c>
}
   289a2:	4630      	mov	r0, r6
   289a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(addr != NULL);
   289a6:	4c0b      	ldr	r4, [pc, #44]	; (289d4 <bt_keys_get_type+0x44>)
   289a8:	23d2      	movs	r3, #210	; 0xd2
   289aa:	4622      	mov	r2, r4
   289ac:	490a      	ldr	r1, [pc, #40]	; (289d8 <bt_keys_get_type+0x48>)
   289ae:	480b      	ldr	r0, [pc, #44]	; (289dc <bt_keys_get_type+0x4c>)
   289b0:	f00d fc70 	bl	36294 <assert_print>
   289b4:	21d2      	movs	r1, #210	; 0xd2
   289b6:	4620      	mov	r0, r4
   289b8:	f00d fc65 	bl	36286 <assert_post_action>
	keys = bt_keys_get_addr(id, addr);
   289bc:	4639      	mov	r1, r7
   289be:	4620      	mov	r0, r4
   289c0:	f7ff fe60 	bl	28684 <bt_keys_get_addr>
	if (!keys) {
   289c4:	4606      	mov	r6, r0
   289c6:	2800      	cmp	r0, #0
   289c8:	d0eb      	beq.n	289a2 <bt_keys_get_type+0x12>
	bt_keys_add_type(keys, type);
   289ca:	4629      	mov	r1, r5
   289cc:	f7ff ffc6 	bl	2895c <bt_keys_add_type>
	return keys;
   289d0:	e7e7      	b.n	289a2 <bt_keys_get_type+0x12>
   289d2:	bf00      	nop
   289d4:	00044480 	.word	0x00044480
   289d8:	000444c4 	.word	0x000444c4
   289dc:	0003f72c 	.word	0x0003f72c

000289e0 <bt_keys_clear>:
{
   289e0:	b530      	push	{r4, r5, lr}
   289e2:	b08d      	sub	sp, #52	; 0x34
	__ASSERT_NO_MSG(keys != NULL);
   289e4:	b1e0      	cbz	r0, 28a20 <bt_keys_clear+0x40>
   289e6:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   289e8:	7a03      	ldrb	r3, [r0, #8]
   289ea:	f013 0f04 	tst.w	r3, #4
   289ee:	d124      	bne.n	28a3a <bt_keys_clear+0x5a>
		if (keys->id) {
   289f0:	7822      	ldrb	r2, [r4, #0]
   289f2:	b32a      	cbz	r2, 28a40 <bt_keys_clear+0x60>
			u8_to_dec(id, sizeof(id), keys->id);
   289f4:	ad02      	add	r5, sp, #8
   289f6:	2104      	movs	r1, #4
   289f8:	4628      	mov	r0, r5
   289fa:	f7eb fd0d 	bl	14418 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   289fe:	9500      	str	r5, [sp, #0]
   28a00:	1c63      	adds	r3, r4, #1
   28a02:	4a14      	ldr	r2, [pc, #80]	; (28a54 <bt_keys_clear+0x74>)
   28a04:	2124      	movs	r1, #36	; 0x24
   28a06:	a803      	add	r0, sp, #12
   28a08:	f7f2 fabe 	bl	1af88 <bt_settings_encode_key>
		settings_delete(key);
   28a0c:	a803      	add	r0, sp, #12
   28a0e:	f00e fd85 	bl	3751c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   28a12:	225c      	movs	r2, #92	; 0x5c
   28a14:	2100      	movs	r1, #0
   28a16:	4620      	mov	r0, r4
   28a18:	f00f fd1e 	bl	38458 <memset>
}
   28a1c:	b00d      	add	sp, #52	; 0x34
   28a1e:	bd30      	pop	{r4, r5, pc}
	__ASSERT_NO_MSG(keys != NULL);
   28a20:	4c0d      	ldr	r4, [pc, #52]	; (28a58 <bt_keys_clear+0x78>)
   28a22:	f240 1331 	movw	r3, #305	; 0x131
   28a26:	4622      	mov	r2, r4
   28a28:	490c      	ldr	r1, [pc, #48]	; (28a5c <bt_keys_clear+0x7c>)
   28a2a:	480d      	ldr	r0, [pc, #52]	; (28a60 <bt_keys_clear+0x80>)
   28a2c:	f00d fc32 	bl	36294 <assert_print>
   28a30:	f240 1131 	movw	r1, #305	; 0x131
   28a34:	4620      	mov	r0, r4
   28a36:	f00d fc26 	bl	36286 <assert_post_action>
		bt_id_del(keys);
   28a3a:	f7f5 fe33 	bl	1e6a4 <bt_id_del>
   28a3e:	e7d7      	b.n	289f0 <bt_keys_clear+0x10>
			bt_settings_encode_key(key, sizeof(key), "keys",
   28a40:	2300      	movs	r3, #0
   28a42:	9300      	str	r3, [sp, #0]
   28a44:	1c63      	adds	r3, r4, #1
   28a46:	4a03      	ldr	r2, [pc, #12]	; (28a54 <bt_keys_clear+0x74>)
   28a48:	2124      	movs	r1, #36	; 0x24
   28a4a:	a803      	add	r0, sp, #12
   28a4c:	f7f2 fa9c 	bl	1af88 <bt_settings_encode_key>
   28a50:	e7dc      	b.n	28a0c <bt_keys_clear+0x2c>
   28a52:	bf00      	nop
   28a54:	000444ec 	.word	0x000444ec
   28a58:	00044480 	.word	0x00044480
   28a5c:	000444b0 	.word	0x000444b0
   28a60:	0003f72c 	.word	0x0003f72c

00028a64 <keys_set>:
{
   28a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   28a66:	b0a1      	sub	sp, #132	; 0x84
   28a68:	af00      	add	r7, sp, #0
	if (!name) {
   28a6a:	2800      	cmp	r0, #0
   28a6c:	d03b      	beq.n	28ae6 <keys_set+0x82>
   28a6e:	4614      	mov	r4, r2
   28a70:	4605      	mov	r5, r0
	len = read_cb(cb_arg, val, sizeof(val));
   28a72:	2250      	movs	r2, #80	; 0x50
   28a74:	f107 0110 	add.w	r1, r7, #16
   28a78:	4618      	mov	r0, r3
   28a7a:	47a0      	blx	r4
	if (len < 0) {
   28a7c:	1e04      	subs	r4, r0, #0
   28a7e:	db57      	blt.n	28b30 <keys_set+0xcc>
	err = bt_settings_decode_key(name, &addr);
   28a80:	f107 0160 	add.w	r1, r7, #96	; 0x60
   28a84:	4628      	mov	r0, r5
   28a86:	f00f fd4b 	bl	38520 <bt_settings_decode_key>
	if (err) {
   28a8a:	4606      	mov	r6, r0
   28a8c:	2800      	cmp	r0, #0
   28a8e:	f040 8090 	bne.w	28bb2 <keys_set+0x14e>
	settings_name_next(name, &next);
   28a92:	f107 010c 	add.w	r1, r7, #12
   28a96:	4628      	mov	r0, r5
   28a98:	f00e fd70 	bl	3757c <settings_name_next>
	if (!next) {
   28a9c:	68f8      	ldr	r0, [r7, #12]
   28a9e:	2800      	cmp	r0, #0
   28aa0:	f000 811d 	beq.w	28cde <keys_set+0x27a>
		unsigned long next_id = strtoul(next, NULL, 10);
   28aa4:	220a      	movs	r2, #10
   28aa6:	2100      	movs	r1, #0
   28aa8:	f00f fba4 	bl	381f4 <strtoul>
		if (next_id >= CONFIG_BT_ID_MAX) {
   28aac:	4603      	mov	r3, r0
   28aae:	2800      	cmp	r0, #0
   28ab0:	f040 80d4 	bne.w	28c5c <keys_set+0x1f8>
		id = (uint8_t)next_id;
   28ab4:	b2c0      	uxtb	r0, r0
	if (!len) {
   28ab6:	2c00      	cmp	r4, #0
   28ab8:	f000 8113 	beq.w	28ce2 <keys_set+0x27e>
	keys = bt_keys_get_addr(id, &addr);
   28abc:	f107 0160 	add.w	r1, r7, #96	; 0x60
   28ac0:	f7ff fde0 	bl	28684 <bt_keys_get_addr>
	if (!keys) {
   28ac4:	4605      	mov	r5, r0
   28ac6:	2800      	cmp	r0, #0
   28ac8:	f000 8180 	beq.w	28dcc <keys_set+0x368>
	if (len != BT_KEYS_STORAGE_LEN) {
   28acc:	2c50      	cmp	r4, #80	; 0x50
   28ace:	f040 81d7 	bne.w	28e80 <keys_set+0x41c>
		memcpy(keys->storage_start, val, len);
   28ad2:	4622      	mov	r2, r4
   28ad4:	f107 0110 	add.w	r1, r7, #16
   28ad8:	300c      	adds	r0, #12
   28ada:	f00f fc8e 	bl	383fa <memcpy>
}
   28ade:	4630      	mov	r0, r6
   28ae0:	3784      	adds	r7, #132	; 0x84
   28ae2:	46bd      	mov	sp, r7
   28ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Insufficient number of arguments");
   28ae6:	4bb3      	ldr	r3, [pc, #716]	; (28db4 <keys_set+0x350>)
   28ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
   28aea:	2302      	movs	r3, #2
   28aec:	723b      	strb	r3, [r7, #8]
   28aee:	2300      	movs	r3, #0
   28af0:	727b      	strb	r3, [r7, #9]
   28af2:	72bb      	strb	r3, [r7, #10]
   28af4:	72fb      	strb	r3, [r7, #11]
   28af6:	68ba      	ldr	r2, [r7, #8]
   28af8:	67ba      	str	r2, [r7, #120]	; 0x78
   28afa:	4619      	mov	r1, r3
   28afc:	f363 0100 	bfi	r1, r3, #0, #1
   28b00:	f363 0141 	bfi	r1, r3, #1, #1
   28b04:	f363 0182 	bfi	r1, r3, #2, #1
   28b08:	f363 01c5 	bfi	r1, r3, #3, #3
   28b0c:	2201      	movs	r2, #1
   28b0e:	f362 1188 	bfi	r1, r2, #6, #3
   28b12:	2208      	movs	r2, #8
   28b14:	f362 2152 	bfi	r1, r2, #9, #10
   28b18:	f363 41de 	bfi	r1, r3, #19, #12
   28b1c:	f363 71df 	bfi	r1, r3, #31, #1
   28b20:	f107 0278 	add.w	r2, r7, #120	; 0x78
   28b24:	48a4      	ldr	r0, [pc, #656]	; (28db8 <keys_set+0x354>)
   28b26:	f7ed ff11 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   28b2a:	f06f 0615 	mvn.w	r6, #21
   28b2e:	e7d6      	b.n	28ade <keys_set+0x7a>
		LOG_ERR("Failed to read value (err %zd)", len);
   28b30:	466d      	mov	r5, sp
   28b32:	b088      	sub	sp, #32
   28b34:	466b      	mov	r3, sp
   28b36:	f113 0210 	adds.w	r2, r3, #16
   28b3a:	d00d      	beq.n	28b58 <keys_set+0xf4>
   28b3c:	210c      	movs	r1, #12
   28b3e:	b13a      	cbz	r2, 28b50 <keys_set+0xec>
   28b40:	4608      	mov	r0, r1
   28b42:	2904      	cmp	r1, #4
   28b44:	dd01      	ble.n	28b4a <keys_set+0xe6>
   28b46:	4e9d      	ldr	r6, [pc, #628]	; (28dbc <keys_set+0x358>)
   28b48:	615e      	str	r6, [r3, #20]
   28b4a:	2808      	cmp	r0, #8
   28b4c:	dd07      	ble.n	28b5e <keys_set+0xfa>
   28b4e:	619c      	str	r4, [r3, #24]
   28b50:	290b      	cmp	r1, #11
   28b52:	dd2b      	ble.n	28bac <keys_set+0x148>
   28b54:	240c      	movs	r4, #12
   28b56:	e004      	b.n	28b62 <keys_set+0xfe>
   28b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   28b5c:	e7ef      	b.n	28b3e <keys_set+0xda>
   28b5e:	f06f 041b 	mvn.w	r4, #27
   28b62:	b13a      	cbz	r2, 28b74 <keys_set+0x110>
   28b64:	2103      	movs	r1, #3
   28b66:	7239      	strb	r1, [r7, #8]
   28b68:	2100      	movs	r1, #0
   28b6a:	7279      	strb	r1, [r7, #9]
   28b6c:	72b9      	strb	r1, [r7, #10]
   28b6e:	72f9      	strb	r1, [r7, #11]
   28b70:	68b8      	ldr	r0, [r7, #8]
   28b72:	6118      	str	r0, [r3, #16]
   28b74:	2100      	movs	r1, #0
   28b76:	f36f 0100 	bfc	r1, #0, #1
   28b7a:	f36f 0141 	bfc	r1, #1, #1
   28b7e:	f36f 0182 	bfc	r1, #2, #1
   28b82:	f36f 01c5 	bfc	r1, #3, #3
   28b86:	2301      	movs	r3, #1
   28b88:	f363 1188 	bfi	r1, r3, #6, #3
   28b8c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   28b90:	f363 2152 	bfi	r1, r3, #9, #10
   28b94:	f36f 41de 	bfc	r1, #19, #12
   28b98:	f36f 71df 	bfc	r1, #31, #1
   28b9c:	2300      	movs	r3, #0
   28b9e:	4886      	ldr	r0, [pc, #536]	; (28db8 <keys_set+0x354>)
   28ba0:	f7ed fed4 	bl	1694c <z_impl_z_log_msg_static_create>
   28ba4:	46ad      	mov	sp, r5
		return -EINVAL;
   28ba6:	f06f 0615 	mvn.w	r6, #21
   28baa:	e798      	b.n	28ade <keys_set+0x7a>
		LOG_ERR("Failed to read value (err %zd)", len);
   28bac:	f06f 041b 	mvn.w	r4, #27
   28bb0:	e7d7      	b.n	28b62 <keys_set+0xfe>
		LOG_ERR("Unable to decode address %s", name);
   28bb2:	466e      	mov	r6, sp
   28bb4:	2300      	movs	r3, #0
   28bb6:	723b      	strb	r3, [r7, #8]
   28bb8:	2302      	movs	r3, #2
   28bba:	727b      	strb	r3, [r7, #9]
   28bbc:	b088      	sub	sp, #32
   28bbe:	466c      	mov	r4, sp
   28bc0:	f114 0210 	adds.w	r2, r4, #16
   28bc4:	d011      	beq.n	28bea <keys_set+0x186>
   28bc6:	200e      	movs	r0, #14
   28bc8:	b11a      	cbz	r2, 28bd2 <keys_set+0x16e>
   28bca:	2804      	cmp	r0, #4
   28bcc:	dd01      	ble.n	28bd2 <keys_set+0x16e>
   28bce:	4b7c      	ldr	r3, [pc, #496]	; (28dc0 <keys_set+0x35c>)
   28bd0:	6163      	str	r3, [r4, #20]
   28bd2:	2300      	movs	r3, #0
   28bd4:	713b      	strb	r3, [r7, #4]
   28bd6:	2302      	movs	r3, #2
   28bd8:	717b      	strb	r3, [r7, #5]
   28bda:	b19a      	cbz	r2, 28c04 <keys_set+0x1a0>
   28bdc:	2808      	cmp	r0, #8
   28bde:	dd00      	ble.n	28be2 <keys_set+0x17e>
   28be0:	61a5      	str	r5, [r4, #24]
   28be2:	f104 031c 	add.w	r3, r4, #28
   28be6:	2100      	movs	r1, #0
   28be8:	e00a      	b.n	28c00 <keys_set+0x19c>
   28bea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   28bee:	e7eb      	b.n	28bc8 <keys_set+0x164>
   28bf0:	f101 0580 	add.w	r5, r1, #128	; 0x80
   28bf4:	443d      	add	r5, r7
   28bf6:	f815 5c7c 	ldrb.w	r5, [r5, #-124]
   28bfa:	f803 5b01 	strb.w	r5, [r3], #1
   28bfe:	3101      	adds	r1, #1
   28c00:	2901      	cmp	r1, #1
   28c02:	d9f5      	bls.n	28bf0 <keys_set+0x18c>
   28c04:	280d      	cmp	r0, #13
   28c06:	dd26      	ble.n	28c56 <keys_set+0x1f2>
   28c08:	230e      	movs	r3, #14
   28c0a:	b142      	cbz	r2, 28c1e <keys_set+0x1ba>
   28c0c:	2103      	movs	r1, #3
   28c0e:	7239      	strb	r1, [r7, #8]
   28c10:	2100      	movs	r1, #0
   28c12:	7279      	strb	r1, [r7, #9]
   28c14:	72b9      	strb	r1, [r7, #10]
   28c16:	2101      	movs	r1, #1
   28c18:	72f9      	strb	r1, [r7, #11]
   28c1a:	68b8      	ldr	r0, [r7, #8]
   28c1c:	6120      	str	r0, [r4, #16]
   28c1e:	2100      	movs	r1, #0
   28c20:	f36f 0100 	bfc	r1, #0, #1
   28c24:	f36f 0141 	bfc	r1, #1, #1
   28c28:	f36f 0182 	bfc	r1, #2, #1
   28c2c:	f36f 01c5 	bfc	r1, #3, #3
   28c30:	2001      	movs	r0, #1
   28c32:	f360 1188 	bfi	r1, r0, #6, #3
   28c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
   28c3a:	f363 2152 	bfi	r1, r3, #9, #10
   28c3e:	f36f 41de 	bfc	r1, #19, #12
   28c42:	f36f 71df 	bfc	r1, #31, #1
   28c46:	2300      	movs	r3, #0
   28c48:	485b      	ldr	r0, [pc, #364]	; (28db8 <keys_set+0x354>)
   28c4a:	f7ed fe7f 	bl	1694c <z_impl_z_log_msg_static_create>
   28c4e:	46b5      	mov	sp, r6
		return -EINVAL;
   28c50:	f06f 0615 	mvn.w	r6, #21
   28c54:	e743      	b.n	28ade <keys_set+0x7a>
		LOG_ERR("Unable to decode address %s", name);
   28c56:	f06f 031b 	mvn.w	r3, #27
   28c5a:	e7d6      	b.n	28c0a <keys_set+0x1a6>
			LOG_ERR("Invalid local identity %lu", next_id);
   28c5c:	466c      	mov	r4, sp
   28c5e:	b088      	sub	sp, #32
   28c60:	4669      	mov	r1, sp
   28c62:	f111 0210 	adds.w	r2, r1, #16
   28c66:	d00d      	beq.n	28c84 <keys_set+0x220>
   28c68:	200c      	movs	r0, #12
   28c6a:	b13a      	cbz	r2, 28c7c <keys_set+0x218>
   28c6c:	4605      	mov	r5, r0
   28c6e:	2804      	cmp	r0, #4
   28c70:	dd01      	ble.n	28c76 <keys_set+0x212>
   28c72:	4e54      	ldr	r6, [pc, #336]	; (28dc4 <keys_set+0x360>)
   28c74:	614e      	str	r6, [r1, #20]
   28c76:	2d08      	cmp	r5, #8
   28c78:	dd07      	ble.n	28c8a <keys_set+0x226>
   28c7a:	618b      	str	r3, [r1, #24]
   28c7c:	280b      	cmp	r0, #11
   28c7e:	dd2b      	ble.n	28cd8 <keys_set+0x274>
   28c80:	230c      	movs	r3, #12
   28c82:	e004      	b.n	28c8e <keys_set+0x22a>
   28c84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   28c88:	e7ef      	b.n	28c6a <keys_set+0x206>
   28c8a:	f06f 031b 	mvn.w	r3, #27
   28c8e:	b13a      	cbz	r2, 28ca0 <keys_set+0x23c>
   28c90:	2003      	movs	r0, #3
   28c92:	7238      	strb	r0, [r7, #8]
   28c94:	2000      	movs	r0, #0
   28c96:	7278      	strb	r0, [r7, #9]
   28c98:	72b8      	strb	r0, [r7, #10]
   28c9a:	72f8      	strb	r0, [r7, #11]
   28c9c:	68b8      	ldr	r0, [r7, #8]
   28c9e:	6108      	str	r0, [r1, #16]
   28ca0:	2100      	movs	r1, #0
   28ca2:	f36f 0100 	bfc	r1, #0, #1
   28ca6:	f36f 0141 	bfc	r1, #1, #1
   28caa:	f36f 0182 	bfc	r1, #2, #1
   28cae:	f36f 01c5 	bfc	r1, #3, #3
   28cb2:	2001      	movs	r0, #1
   28cb4:	f360 1188 	bfi	r1, r0, #6, #3
   28cb8:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   28cbc:	f363 2152 	bfi	r1, r3, #9, #10
   28cc0:	f36f 41de 	bfc	r1, #19, #12
   28cc4:	f36f 71df 	bfc	r1, #31, #1
   28cc8:	2300      	movs	r3, #0
   28cca:	483b      	ldr	r0, [pc, #236]	; (28db8 <keys_set+0x354>)
   28ccc:	f7ed fe3e 	bl	1694c <z_impl_z_log_msg_static_create>
   28cd0:	46a5      	mov	sp, r4
			return -EINVAL;
   28cd2:	f06f 0615 	mvn.w	r6, #21
   28cd6:	e702      	b.n	28ade <keys_set+0x7a>
			LOG_ERR("Invalid local identity %lu", next_id);
   28cd8:	f06f 031b 	mvn.w	r3, #27
   28cdc:	e7d7      	b.n	28c8e <keys_set+0x22a>
		id = BT_ID_DEFAULT;
   28cde:	2000      	movs	r0, #0
   28ce0:	e6e9      	b.n	28ab6 <keys_set+0x52>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   28ce2:	f107 0260 	add.w	r2, r7, #96	; 0x60
   28ce6:	4601      	mov	r1, r0
   28ce8:	203f      	movs	r0, #63	; 0x3f
   28cea:	f7ff fd4f 	bl	2878c <bt_keys_find>
		if (keys) {
   28cee:	b128      	cbz	r0, 28cfc <keys_set+0x298>
			(void)memset(keys, 0, sizeof(*keys));
   28cf0:	225c      	movs	r2, #92	; 0x5c
   28cf2:	2100      	movs	r1, #0
   28cf4:	f00f fbb0 	bl	38458 <memset>
		return 0;
   28cf8:	4626      	mov	r6, r4
   28cfa:	e6f0      	b.n	28ade <keys_set+0x7a>
			LOG_WRN("Unable to find deleted keys for %s", bt_addr_le_str(&addr));
   28cfc:	f107 0060 	add.w	r0, r7, #96	; 0x60
   28d00:	f7f1 fff2 	bl	1ace8 <bt_addr_le_str>
   28d04:	466e      	mov	r6, sp
   28d06:	2300      	movs	r3, #0
   28d08:	723b      	strb	r3, [r7, #8]
   28d0a:	2302      	movs	r3, #2
   28d0c:	727b      	strb	r3, [r7, #9]
   28d0e:	b088      	sub	sp, #32
   28d10:	466d      	mov	r5, sp
   28d12:	f115 0210 	adds.w	r2, r5, #16
   28d16:	d014      	beq.n	28d42 <keys_set+0x2de>
   28d18:	f04f 0c0e 	mov.w	ip, #14
   28d1c:	b122      	cbz	r2, 28d28 <keys_set+0x2c4>
   28d1e:	f1bc 0f04 	cmp.w	ip, #4
   28d22:	dd01      	ble.n	28d28 <keys_set+0x2c4>
   28d24:	4b28      	ldr	r3, [pc, #160]	; (28dc8 <keys_set+0x364>)
   28d26:	616b      	str	r3, [r5, #20]
   28d28:	2300      	movs	r3, #0
   28d2a:	713b      	strb	r3, [r7, #4]
   28d2c:	2302      	movs	r3, #2
   28d2e:	717b      	strb	r3, [r7, #5]
   28d30:	b1a2      	cbz	r2, 28d5c <keys_set+0x2f8>
   28d32:	f1bc 0f08 	cmp.w	ip, #8
   28d36:	dd00      	ble.n	28d3a <keys_set+0x2d6>
   28d38:	61a8      	str	r0, [r5, #24]
   28d3a:	f105 031c 	add.w	r3, r5, #28
   28d3e:	2100      	movs	r1, #0
   28d40:	e00a      	b.n	28d58 <keys_set+0x2f4>
   28d42:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   28d46:	e7e9      	b.n	28d1c <keys_set+0x2b8>
   28d48:	f101 0080 	add.w	r0, r1, #128	; 0x80
   28d4c:	4438      	add	r0, r7
   28d4e:	f810 0c7c 	ldrb.w	r0, [r0, #-124]
   28d52:	f803 0b01 	strb.w	r0, [r3], #1
   28d56:	3101      	adds	r1, #1
   28d58:	2901      	cmp	r1, #1
   28d5a:	d9f5      	bls.n	28d48 <keys_set+0x2e4>
   28d5c:	f1bc 0f0d 	cmp.w	ip, #13
   28d60:	dd24      	ble.n	28dac <keys_set+0x348>
   28d62:	230e      	movs	r3, #14
   28d64:	b142      	cbz	r2, 28d78 <keys_set+0x314>
   28d66:	2103      	movs	r1, #3
   28d68:	7239      	strb	r1, [r7, #8]
   28d6a:	2100      	movs	r1, #0
   28d6c:	7279      	strb	r1, [r7, #9]
   28d6e:	72b9      	strb	r1, [r7, #10]
   28d70:	2101      	movs	r1, #1
   28d72:	72f9      	strb	r1, [r7, #11]
   28d74:	68b8      	ldr	r0, [r7, #8]
   28d76:	6128      	str	r0, [r5, #16]
   28d78:	2100      	movs	r1, #0
   28d7a:	f36f 0100 	bfc	r1, #0, #1
   28d7e:	f36f 0141 	bfc	r1, #1, #1
   28d82:	f36f 0182 	bfc	r1, #2, #1
   28d86:	f36f 01c5 	bfc	r1, #3, #3
   28d8a:	2002      	movs	r0, #2
   28d8c:	f360 1188 	bfi	r1, r0, #6, #3
   28d90:	f3c3 0309 	ubfx	r3, r3, #0, #10
   28d94:	f363 2152 	bfi	r1, r3, #9, #10
   28d98:	f36f 41de 	bfc	r1, #19, #12
   28d9c:	f36f 71df 	bfc	r1, #31, #1
   28da0:	2300      	movs	r3, #0
   28da2:	4805      	ldr	r0, [pc, #20]	; (28db8 <keys_set+0x354>)
   28da4:	f7ed fdd2 	bl	1694c <z_impl_z_log_msg_static_create>
   28da8:	46b5      	mov	sp, r6
   28daa:	e7a5      	b.n	28cf8 <keys_set+0x294>
   28dac:	f06f 031b 	mvn.w	r3, #27
   28db0:	e7d8      	b.n	28d64 <keys_set+0x300>
   28db2:	bf00      	nop
   28db4:	000420a0 	.word	0x000420a0
   28db8:	0003f3f0 	.word	0x0003f3f0
   28dbc:	000444f4 	.word	0x000444f4
   28dc0:	00043ae0 	.word	0x00043ae0
   28dc4:	00043afc 	.word	0x00043afc
   28dc8:	00044514 	.word	0x00044514
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   28dcc:	f107 0060 	add.w	r0, r7, #96	; 0x60
   28dd0:	f7f1 ff8a 	bl	1ace8 <bt_addr_le_str>
   28dd4:	4601      	mov	r1, r0
   28dd6:	466c      	mov	r4, sp
   28dd8:	2300      	movs	r3, #0
   28dda:	723b      	strb	r3, [r7, #8]
   28ddc:	2302      	movs	r3, #2
   28dde:	727b      	strb	r3, [r7, #9]
   28de0:	b088      	sub	sp, #32
   28de2:	466b      	mov	r3, sp
   28de4:	f113 0210 	adds.w	r2, r3, #16
   28de8:	d011      	beq.n	28e0e <keys_set+0x3aa>
   28dea:	250e      	movs	r5, #14
   28dec:	b11a      	cbz	r2, 28df6 <keys_set+0x392>
   28dee:	2d04      	cmp	r5, #4
   28df0:	dd01      	ble.n	28df6 <keys_set+0x392>
   28df2:	4848      	ldr	r0, [pc, #288]	; (28f14 <keys_set+0x4b0>)
   28df4:	6158      	str	r0, [r3, #20]
   28df6:	2000      	movs	r0, #0
   28df8:	7138      	strb	r0, [r7, #4]
   28dfa:	2002      	movs	r0, #2
   28dfc:	7178      	strb	r0, [r7, #5]
   28dfe:	b19a      	cbz	r2, 28e28 <keys_set+0x3c4>
   28e00:	2d08      	cmp	r5, #8
   28e02:	dd00      	ble.n	28e06 <keys_set+0x3a2>
   28e04:	6199      	str	r1, [r3, #24]
   28e06:	f103 011c 	add.w	r1, r3, #28
   28e0a:	2000      	movs	r0, #0
   28e0c:	e00a      	b.n	28e24 <keys_set+0x3c0>
   28e0e:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   28e12:	e7eb      	b.n	28dec <keys_set+0x388>
   28e14:	f100 0680 	add.w	r6, r0, #128	; 0x80
   28e18:	443e      	add	r6, r7
   28e1a:	f816 6c7c 	ldrb.w	r6, [r6, #-124]
   28e1e:	f801 6b01 	strb.w	r6, [r1], #1
   28e22:	3001      	adds	r0, #1
   28e24:	2801      	cmp	r0, #1
   28e26:	d9f5      	bls.n	28e14 <keys_set+0x3b0>
   28e28:	2d0d      	cmp	r5, #13
   28e2a:	dd26      	ble.n	28e7a <keys_set+0x416>
   28e2c:	250e      	movs	r5, #14
   28e2e:	b142      	cbz	r2, 28e42 <keys_set+0x3de>
   28e30:	2103      	movs	r1, #3
   28e32:	7239      	strb	r1, [r7, #8]
   28e34:	2100      	movs	r1, #0
   28e36:	7279      	strb	r1, [r7, #9]
   28e38:	72b9      	strb	r1, [r7, #10]
   28e3a:	2101      	movs	r1, #1
   28e3c:	72f9      	strb	r1, [r7, #11]
   28e3e:	68b8      	ldr	r0, [r7, #8]
   28e40:	6118      	str	r0, [r3, #16]
   28e42:	2100      	movs	r1, #0
   28e44:	f36f 0100 	bfc	r1, #0, #1
   28e48:	f36f 0141 	bfc	r1, #1, #1
   28e4c:	f36f 0182 	bfc	r1, #2, #1
   28e50:	f36f 01c5 	bfc	r1, #3, #3
   28e54:	2301      	movs	r3, #1
   28e56:	f363 1188 	bfi	r1, r3, #6, #3
   28e5a:	f3c5 0509 	ubfx	r5, r5, #0, #10
   28e5e:	f365 2152 	bfi	r1, r5, #9, #10
   28e62:	f36f 41de 	bfc	r1, #19, #12
   28e66:	f36f 71df 	bfc	r1, #31, #1
   28e6a:	2300      	movs	r3, #0
   28e6c:	482a      	ldr	r0, [pc, #168]	; (28f18 <keys_set+0x4b4>)
   28e6e:	f7ed fd6d 	bl	1694c <z_impl_z_log_msg_static_create>
   28e72:	46a5      	mov	sp, r4
		return -ENOMEM;
   28e74:	f06f 060b 	mvn.w	r6, #11
   28e78:	e631      	b.n	28ade <keys_set+0x7a>
		LOG_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   28e7a:	f06f 051b 	mvn.w	r5, #27
   28e7e:	e7d6      	b.n	28e2e <keys_set+0x3ca>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   28e80:	466e      	mov	r6, sp
   28e82:	b088      	sub	sp, #32
   28e84:	466b      	mov	r3, sp
   28e86:	f113 0210 	adds.w	r2, r3, #16
   28e8a:	d013      	beq.n	28eb4 <keys_set+0x450>
   28e8c:	2110      	movs	r1, #16
   28e8e:	b16a      	cbz	r2, 28eac <keys_set+0x448>
   28e90:	4608      	mov	r0, r1
   28e92:	2904      	cmp	r1, #4
   28e94:	dd03      	ble.n	28e9e <keys_set+0x43a>
   28e96:	f8df c084 	ldr.w	ip, [pc, #132]	; 28f1c <keys_set+0x4b8>
   28e9a:	f8c3 c014 	str.w	ip, [r3, #20]
   28e9e:	2808      	cmp	r0, #8
   28ea0:	dd00      	ble.n	28ea4 <keys_set+0x440>
   28ea2:	619c      	str	r4, [r3, #24]
   28ea4:	280c      	cmp	r0, #12
   28ea6:	dd08      	ble.n	28eba <keys_set+0x456>
   28ea8:	2050      	movs	r0, #80	; 0x50
   28eaa:	61d8      	str	r0, [r3, #28]
   28eac:	290f      	cmp	r1, #15
   28eae:	dd2e      	ble.n	28f0e <keys_set+0x4aa>
   28eb0:	2410      	movs	r4, #16
   28eb2:	e004      	b.n	28ebe <keys_set+0x45a>
   28eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   28eb8:	e7e9      	b.n	28e8e <keys_set+0x42a>
   28eba:	f06f 041b 	mvn.w	r4, #27
   28ebe:	b13a      	cbz	r2, 28ed0 <keys_set+0x46c>
   28ec0:	2104      	movs	r1, #4
   28ec2:	7239      	strb	r1, [r7, #8]
   28ec4:	2100      	movs	r1, #0
   28ec6:	7279      	strb	r1, [r7, #9]
   28ec8:	72b9      	strb	r1, [r7, #10]
   28eca:	72f9      	strb	r1, [r7, #11]
   28ecc:	68b8      	ldr	r0, [r7, #8]
   28ece:	6118      	str	r0, [r3, #16]
   28ed0:	2100      	movs	r1, #0
   28ed2:	f36f 0100 	bfc	r1, #0, #1
   28ed6:	f36f 0141 	bfc	r1, #1, #1
   28eda:	f36f 0182 	bfc	r1, #2, #1
   28ede:	f36f 01c5 	bfc	r1, #3, #3
   28ee2:	2301      	movs	r3, #1
   28ee4:	f363 1188 	bfi	r1, r3, #6, #3
   28ee8:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   28eec:	f363 2152 	bfi	r1, r3, #9, #10
   28ef0:	f36f 41de 	bfc	r1, #19, #12
   28ef4:	f36f 71df 	bfc	r1, #31, #1
   28ef8:	2300      	movs	r3, #0
   28efa:	4807      	ldr	r0, [pc, #28]	; (28f18 <keys_set+0x4b4>)
   28efc:	f7ed fd26 	bl	1694c <z_impl_z_log_msg_static_create>
   28f00:	46b5      	mov	sp, r6
			bt_keys_clear(keys);
   28f02:	4628      	mov	r0, r5
   28f04:	f7ff fd6c 	bl	289e0 <bt_keys_clear>
			return -EINVAL;
   28f08:	f06f 0615 	mvn.w	r6, #21
   28f0c:	e5e7      	b.n	28ade <keys_set+0x7a>
			LOG_ERR("Invalid key length %zd != %zu", len, BT_KEYS_STORAGE_LEN);
   28f0e:	f06f 041b 	mvn.w	r4, #27
   28f12:	e7d4      	b.n	28ebe <keys_set+0x45a>
   28f14:	00044538 	.word	0x00044538
   28f18:	0003f3f0 	.word	0x0003f3f0
   28f1c:	00044558 	.word	0x00044558

00028f20 <bt_keys_store>:
{
   28f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   28f22:	b08d      	sub	sp, #52	; 0x34
   28f24:	af02      	add	r7, sp, #8
	__ASSERT_NO_MSG(keys != NULL);
   28f26:	b1c8      	cbz	r0, 28f5c <bt_keys_store+0x3c>
   28f28:	4604      	mov	r4, r0
	if (keys->id) {
   28f2a:	7802      	ldrb	r2, [r0, #0]
   28f2c:	b31a      	cbz	r2, 28f76 <bt_keys_store+0x56>
		u8_to_dec(id, sizeof(id), keys->id);
   28f2e:	2104      	movs	r1, #4
   28f30:	4638      	mov	r0, r7
   28f32:	f7eb fa71 	bl	14418 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   28f36:	9700      	str	r7, [sp, #0]
   28f38:	1c63      	adds	r3, r4, #1
   28f3a:	4a32      	ldr	r2, [pc, #200]	; (29004 <bt_keys_store+0xe4>)
   28f3c:	2124      	movs	r1, #36	; 0x24
   28f3e:	1d38      	adds	r0, r7, #4
   28f40:	f7f2 f822 	bl	1af88 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   28f44:	2250      	movs	r2, #80	; 0x50
   28f46:	f104 010c 	add.w	r1, r4, #12
   28f4a:	1d38      	adds	r0, r7, #4
   28f4c:	f7ef fa16 	bl	1837c <settings_save_one>
	if (err) {
   28f50:	4604      	mov	r4, r0
   28f52:	b9c8      	cbnz	r0, 28f88 <bt_keys_store+0x68>
}
   28f54:	4620      	mov	r0, r4
   28f56:	372c      	adds	r7, #44	; 0x2c
   28f58:	46bd      	mov	sp, r7
   28f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(keys != NULL);
   28f5c:	4c2a      	ldr	r4, [pc, #168]	; (29008 <bt_keys_store+0xe8>)
   28f5e:	f240 1355 	movw	r3, #341	; 0x155
   28f62:	4622      	mov	r2, r4
   28f64:	4929      	ldr	r1, [pc, #164]	; (2900c <bt_keys_store+0xec>)
   28f66:	482a      	ldr	r0, [pc, #168]	; (29010 <bt_keys_store+0xf0>)
   28f68:	f00d f994 	bl	36294 <assert_print>
   28f6c:	f240 1155 	movw	r1, #341	; 0x155
   28f70:	4620      	mov	r0, r4
   28f72:	f00d f988 	bl	36286 <assert_post_action>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   28f76:	2300      	movs	r3, #0
   28f78:	9300      	str	r3, [sp, #0]
   28f7a:	1c43      	adds	r3, r0, #1
   28f7c:	4a21      	ldr	r2, [pc, #132]	; (29004 <bt_keys_store+0xe4>)
   28f7e:	2124      	movs	r1, #36	; 0x24
   28f80:	1d38      	adds	r0, r7, #4
   28f82:	f7f2 f801 	bl	1af88 <bt_settings_encode_key>
   28f86:	e7dd      	b.n	28f44 <bt_keys_store+0x24>
		LOG_ERR("Failed to save keys (err %d)", err);
   28f88:	466d      	mov	r5, sp
   28f8a:	b088      	sub	sp, #32
   28f8c:	ab02      	add	r3, sp, #8
   28f8e:	f113 0210 	adds.w	r2, r3, #16
   28f92:	d030      	beq.n	28ff6 <bt_keys_store+0xd6>
   28f94:	210c      	movs	r1, #12
   28f96:	b13a      	cbz	r2, 28fa8 <bt_keys_store+0x88>
   28f98:	4608      	mov	r0, r1
   28f9a:	2904      	cmp	r1, #4
   28f9c:	dd01      	ble.n	28fa2 <bt_keys_store+0x82>
   28f9e:	4e1d      	ldr	r6, [pc, #116]	; (29014 <bt_keys_store+0xf4>)
   28fa0:	615e      	str	r6, [r3, #20]
   28fa2:	2808      	cmp	r0, #8
   28fa4:	dd00      	ble.n	28fa8 <bt_keys_store+0x88>
   28fa6:	619c      	str	r4, [r3, #24]
   28fa8:	290b      	cmp	r1, #11
   28faa:	dd27      	ble.n	28ffc <bt_keys_store+0xdc>
   28fac:	f04f 0c0c 	mov.w	ip, #12
   28fb0:	b13a      	cbz	r2, 28fc2 <bt_keys_store+0xa2>
   28fb2:	2103      	movs	r1, #3
   28fb4:	7039      	strb	r1, [r7, #0]
   28fb6:	2100      	movs	r1, #0
   28fb8:	7079      	strb	r1, [r7, #1]
   28fba:	70b9      	strb	r1, [r7, #2]
   28fbc:	70f9      	strb	r1, [r7, #3]
   28fbe:	6838      	ldr	r0, [r7, #0]
   28fc0:	6118      	str	r0, [r3, #16]
   28fc2:	2100      	movs	r1, #0
   28fc4:	f36f 0100 	bfc	r1, #0, #1
   28fc8:	f36f 0141 	bfc	r1, #1, #1
   28fcc:	f36f 0182 	bfc	r1, #2, #1
   28fd0:	f36f 01c5 	bfc	r1, #3, #3
   28fd4:	2301      	movs	r3, #1
   28fd6:	f363 1188 	bfi	r1, r3, #6, #3
   28fda:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   28fde:	f363 2152 	bfi	r1, r3, #9, #10
   28fe2:	f36f 41de 	bfc	r1, #19, #12
   28fe6:	f36f 71df 	bfc	r1, #31, #1
   28fea:	2300      	movs	r3, #0
   28fec:	480a      	ldr	r0, [pc, #40]	; (29018 <bt_keys_store+0xf8>)
   28fee:	f7ed fcad 	bl	1694c <z_impl_z_log_msg_static_create>
   28ff2:	46ad      	mov	sp, r5
		return err;
   28ff4:	e7ae      	b.n	28f54 <bt_keys_store+0x34>
		LOG_ERR("Failed to save keys (err %d)", err);
   28ff6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   28ffa:	e7cc      	b.n	28f96 <bt_keys_store+0x76>
   28ffc:	f06f 0c1b 	mvn.w	ip, #27
   29000:	e7d6      	b.n	28fb0 <bt_keys_store+0x90>
   29002:	bf00      	nop
   29004:	000444ec 	.word	0x000444ec
   29008:	00044480 	.word	0x00044480
   2900c:	000444b0 	.word	0x000444b0
   29010:	0003f72c 	.word	0x0003f72c
   29014:	00044578 	.word	0x00044578
   29018:	0003f3f0 	.word	0x0003f3f0

0002901c <sys_memcpy_swap>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   2901c:	4288      	cmp	r0, r1
   2901e:	d902      	bls.n	29026 <sys_memcpy_swap+0xa>
   29020:	188b      	adds	r3, r1, r2
   29022:	4283      	cmp	r3, r0
   29024:	d904      	bls.n	29030 <sys_memcpy_swap+0x14>
   29026:	4288      	cmp	r0, r1
   29028:	d205      	bcs.n	29036 <sys_memcpy_swap+0x1a>
   2902a:	1883      	adds	r3, r0, r2
   2902c:	428b      	cmp	r3, r1
   2902e:	d802      	bhi.n	29036 <sys_memcpy_swap+0x1a>
	psrc += length - 1;
   29030:	1e53      	subs	r3, r2, #1
   29032:	4419      	add	r1, r3
	for (; length > 0; length--) {
   29034:	e015      	b.n	29062 <sys_memcpy_swap+0x46>
{
   29036:	b510      	push	{r4, lr}
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   29038:	4c0b      	ldr	r4, [pc, #44]	; (29068 <sys_memcpy_swap+0x4c>)
   2903a:	f240 2315 	movw	r3, #533	; 0x215
   2903e:	4622      	mov	r2, r4
   29040:	490a      	ldr	r1, [pc, #40]	; (2906c <sys_memcpy_swap+0x50>)
   29042:	480b      	ldr	r0, [pc, #44]	; (29070 <sys_memcpy_swap+0x54>)
   29044:	f00d f926 	bl	36294 <assert_print>
   29048:	480a      	ldr	r0, [pc, #40]	; (29074 <sys_memcpy_swap+0x58>)
   2904a:	f00d f923 	bl	36294 <assert_print>
   2904e:	f240 2115 	movw	r1, #533	; 0x215
   29052:	4620      	mov	r0, r4
   29054:	f00d f917 	bl	36286 <assert_post_action>
		*pdst++ = *psrc--;
   29058:	f811 3901 	ldrb.w	r3, [r1], #-1
   2905c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   29060:	3a01      	subs	r2, #1
   29062:	2a00      	cmp	r2, #0
   29064:	d1f8      	bne.n	29058 <sys_memcpy_swap+0x3c>
   29066:	4770      	bx	lr
   29068:	00042cf8 	.word	0x00042cf8
   2906c:	00042d2c 	.word	0x00042d2c
   29070:	0003f72c 	.word	0x0003f72c
   29074:	00042d84 	.word	0x00042d84

00029078 <bt_crypto_f5>:
	return err;
}

int bt_crypto_f5(const uint8_t *w, const uint8_t *n1, const uint8_t *n2, const bt_addr_le_t *a1,
		 const bt_addr_le_t *a2, uint8_t *mackey, uint8_t *ltk)
{
   29078:	b5f0      	push	{r4, r5, r6, r7, lr}
   2907a:	b09b      	sub	sp, #108	; 0x6c
   2907c:	4686      	mov	lr, r0
   2907e:	460f      	mov	r7, r1
   29080:	4616      	mov	r6, r2
   29082:	461d      	mov	r5, r3
	static const uint8_t salt[16] = {0x6c, 0x88, 0x83, 0x91, 0xaa, 0xf5, 0xa5, 0x38,
					 0x60, 0x37, 0x0b, 0xdb, 0x5a, 0x60, 0x83, 0xbe};
	uint8_t m[53] = {0x00,						 /* counter */
   29084:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   29088:	4c2e      	ldr	r4, [pc, #184]	; (29144 <bt_crypto_f5+0xcc>)
   2908a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2908c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   29090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29092:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   29096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   29098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2909c:	e894 0003 	ldmia.w	r4, {r0, r1}
   290a0:	f84c 0b04 	str.w	r0, [ip], #4
   290a4:	f88c 1000 	strb.w	r1, [ip]

	LOG_DBG("w %s", bt_hex(w, 32));
	LOG_DBG("n1 %s", bt_hex(n1, 16));
	LOG_DBG("n2 %s", bt_hex(n2, 16));

	sys_memcpy_swap(ws, w, 32);
   290a8:	2220      	movs	r2, #32
   290aa:	4671      	mov	r1, lr
   290ac:	4668      	mov	r0, sp
   290ae:	f7ff ffb5 	bl	2901c <sys_memcpy_swap>

	err = bt_crypto_aes_cmac(salt, ws, 32, t);
   290b2:	ab08      	add	r3, sp, #32
   290b4:	2220      	movs	r2, #32
   290b6:	4669      	mov	r1, sp
   290b8:	4823      	ldr	r0, [pc, #140]	; (29148 <bt_crypto_f5+0xd0>)
   290ba:	f012 fd7b 	bl	3bbb4 <bt_crypto_aes_cmac>
	if (err) {
   290be:	4604      	mov	r4, r0
   290c0:	b110      	cbz	r0, 290c8 <bt_crypto_f5+0x50>
	LOG_DBG("ltk %s", bt_hex(ltk, 16));

	sys_mem_swap(ltk, 16);

	return 0;
}
   290c2:	4620      	mov	r0, r4
   290c4:	b01b      	add	sp, #108	; 0x6c
   290c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_memcpy_swap(m + 5, n1, 16);
   290c8:	2210      	movs	r2, #16
   290ca:	4639      	mov	r1, r7
   290cc:	f10d 0035 	add.w	r0, sp, #53	; 0x35
   290d0:	f7ff ffa4 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
   290d4:	2210      	movs	r2, #16
   290d6:	4631      	mov	r1, r6
   290d8:	f10d 0045 	add.w	r0, sp, #69	; 0x45
   290dc:	f7ff ff9e 	bl	2901c <sys_memcpy_swap>
	m[37] = a1->type;
   290e0:	4629      	mov	r1, r5
   290e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   290e6:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
   290ea:	2206      	movs	r2, #6
   290ec:	f10d 0056 	add.w	r0, sp, #86	; 0x56
   290f0:	f7ff ff94 	bl	2901c <sys_memcpy_swap>
	m[44] = a2->type;
   290f4:	9920      	ldr	r1, [sp, #128]	; 0x80
   290f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   290fa:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
   290fe:	2206      	movs	r2, #6
   29100:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
   29104:	f7ff ff8a 	bl	2901c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(t, m, sizeof(m), mackey);
   29108:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2910a:	2235      	movs	r2, #53	; 0x35
   2910c:	a90c      	add	r1, sp, #48	; 0x30
   2910e:	a808      	add	r0, sp, #32
   29110:	f012 fd50 	bl	3bbb4 <bt_crypto_aes_cmac>
	if (err) {
   29114:	4604      	mov	r4, r0
   29116:	2800      	cmp	r0, #0
   29118:	d1d3      	bne.n	290c2 <bt_crypto_f5+0x4a>
	sys_mem_swap(mackey, 16);
   2911a:	2110      	movs	r1, #16
   2911c:	9821      	ldr	r0, [sp, #132]	; 0x84
   2911e:	f012 fd33 	bl	3bb88 <sys_mem_swap>
	m[0] = 0x01;
   29122:	2301      	movs	r3, #1
   29124:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_crypto_aes_cmac(t, m, sizeof(m), ltk);
   29128:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2912a:	2235      	movs	r2, #53	; 0x35
   2912c:	a90c      	add	r1, sp, #48	; 0x30
   2912e:	a808      	add	r0, sp, #32
   29130:	f012 fd40 	bl	3bbb4 <bt_crypto_aes_cmac>
	if (err) {
   29134:	4604      	mov	r4, r0
   29136:	2800      	cmp	r0, #0
   29138:	d1c3      	bne.n	290c2 <bt_crypto_f5+0x4a>
	sys_mem_swap(ltk, 16);
   2913a:	2110      	movs	r1, #16
   2913c:	9822      	ldr	r0, [sp, #136]	; 0x88
   2913e:	f012 fd23 	bl	3bb88 <sys_mem_swap>
	return 0;
   29142:	e7be      	b.n	290c2 <bt_crypto_f5+0x4a>
   29144:	0003f664 	.word	0x0003f664
   29148:	000445a8 	.word	0x000445a8

0002914c <bt_crypto_g2>:
	return 0;
}

int bt_crypto_g2(const uint8_t u[32], const uint8_t v[32], const uint8_t x[16], const uint8_t y[16],
		 uint32_t *passkey)
{
   2914c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2914e:	b099      	sub	sp, #100	; 0x64
   29150:	460f      	mov	r7, r1
   29152:	4614      	mov	r4, r2
   29154:	461d      	mov	r5, r3
   29156:	9e1e      	ldr	r6, [sp, #120]	; 0x78
	LOG_DBG("u %s", bt_hex(u, 32));
	LOG_DBG("v %s", bt_hex(v, 32));
	LOG_DBG("x %s", bt_hex(x, 16));
	LOG_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
   29158:	2220      	movs	r2, #32
   2915a:	4601      	mov	r1, r0
   2915c:	a804      	add	r0, sp, #16
   2915e:	f7ff ff5d 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   29162:	2220      	movs	r2, #32
   29164:	4639      	mov	r1, r7
   29166:	a80c      	add	r0, sp, #48	; 0x30
   29168:	f7ff ff58 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
   2916c:	2210      	movs	r2, #16
   2916e:	4629      	mov	r1, r5
   29170:	a814      	add	r0, sp, #80	; 0x50
   29172:	f7ff ff53 	bl	2901c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
   29176:	2210      	movs	r2, #16
   29178:	4621      	mov	r1, r4
   2917a:	4668      	mov	r0, sp
   2917c:	f7ff ff4e 	bl	2901c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), xs);
   29180:	466b      	mov	r3, sp
   29182:	2250      	movs	r2, #80	; 0x50
   29184:	a904      	add	r1, sp, #16
   29186:	4668      	mov	r0, sp
   29188:	f012 fd14 	bl	3bbb4 <bt_crypto_aes_cmac>
	if (err) {
   2918c:	4604      	mov	r4, r0
   2918e:	b110      	cbz	r0, 29196 <bt_crypto_g2+0x4a>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;

	LOG_DBG("passkey %u", *passkey);

	return 0;
}
   29190:	4620      	mov	r0, r4
   29192:	b019      	add	sp, #100	; 0x64
   29194:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
   29196:	2204      	movs	r2, #4
   29198:	a903      	add	r1, sp, #12
   2919a:	4630      	mov	r0, r6
   2919c:	f00f f92d 	bl	383fa <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
   291a0:	6832      	ldr	r2, [r6, #0]
   291a2:	0a13      	lsrs	r3, r2, #8
   291a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   291a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   291ac:	0211      	lsls	r1, r2, #8
   291ae:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   291b2:	430b      	orrs	r3, r1
   291b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   291b8:	4a04      	ldr	r2, [pc, #16]	; (291cc <bt_crypto_g2+0x80>)
   291ba:	fba2 1203 	umull	r1, r2, r2, r3
   291be:	0c92      	lsrs	r2, r2, #18
   291c0:	4903      	ldr	r1, [pc, #12]	; (291d0 <bt_crypto_g2+0x84>)
   291c2:	fb01 3212 	mls	r2, r1, r2, r3
   291c6:	6032      	str	r2, [r6, #0]
	return 0;
   291c8:	e7e2      	b.n	29190 <bt_crypto_g2+0x44>
   291ca:	bf00      	nop
   291cc:	431bde83 	.word	0x431bde83
   291d0:	000f4240 	.word	0x000f4240

000291d4 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   291d4:	4b03      	ldr	r3, [pc, #12]	; (291e4 <pool_id+0x10>)
   291d6:	1ac0      	subs	r0, r0, r3
   291d8:	1080      	asrs	r0, r0, #2
}
   291da:	4b03      	ldr	r3, [pc, #12]	; (291e8 <pool_id+0x14>)
   291dc:	fb03 f000 	mul.w	r0, r3, r0
   291e0:	4770      	bx	lr
   291e2:	bf00      	nop
   291e4:	20008a34 	.word	0x20008a34
   291e8:	c4ec4ec5 	.word	0xc4ec4ec5

000291ec <net_buf_pool_get>:
}
   291ec:	2234      	movs	r2, #52	; 0x34
   291ee:	4b02      	ldr	r3, [pc, #8]	; (291f8 <net_buf_pool_get+0xc>)
   291f0:	fb02 3000 	mla	r0, r2, r0, r3
   291f4:	4770      	bx	lr
   291f6:	bf00      	nop
   291f8:	20008a34 	.word	0x20008a34

000291fc <net_buf_reset>:

	return buf;
}

void net_buf_reset(struct net_buf *buf)
{
   291fc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   291fe:	7a43      	ldrb	r3, [r0, #9]
   29200:	b933      	cbnz	r3, 29210 <net_buf_reset+0x14>
	__ASSERT_NO_MSG(buf->frags == NULL);
   29202:	6843      	ldr	r3, [r0, #4]
   29204:	b97b      	cbnz	r3, 29226 <net_buf_reset+0x2a>
	buf->len  = 0U;
   29206:	2300      	movs	r3, #0
   29208:	8203      	strh	r3, [r0, #16]
	buf->data = buf->__buf;
   2920a:	6943      	ldr	r3, [r0, #20]
   2920c:	60c3      	str	r3, [r0, #12]

	net_buf_simple_reset(&buf->b);
}
   2920e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(buf->flags == 0U);
   29210:	4c0a      	ldr	r4, [pc, #40]	; (2923c <net_buf_reset+0x40>)
   29212:	2356      	movs	r3, #86	; 0x56
   29214:	4622      	mov	r2, r4
   29216:	490a      	ldr	r1, [pc, #40]	; (29240 <net_buf_reset+0x44>)
   29218:	480a      	ldr	r0, [pc, #40]	; (29244 <net_buf_reset+0x48>)
   2921a:	f00d f83b 	bl	36294 <assert_print>
   2921e:	2156      	movs	r1, #86	; 0x56
   29220:	4620      	mov	r0, r4
   29222:	f00d f830 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   29226:	4c05      	ldr	r4, [pc, #20]	; (2923c <net_buf_reset+0x40>)
   29228:	2357      	movs	r3, #87	; 0x57
   2922a:	4622      	mov	r2, r4
   2922c:	4906      	ldr	r1, [pc, #24]	; (29248 <net_buf_reset+0x4c>)
   2922e:	4805      	ldr	r0, [pc, #20]	; (29244 <net_buf_reset+0x48>)
   29230:	f00d f830 	bl	36294 <assert_print>
   29234:	2157      	movs	r1, #87	; 0x57
   29236:	4620      	mov	r0, r4
   29238:	f00d f825 	bl	36286 <assert_post_action>
   2923c:	000445c4 	.word	0x000445c4
   29240:	000445e8 	.word	0x000445e8
   29244:	0003f72c 	.word	0x0003f72c
   29248:	000445fc 	.word	0x000445fc

0002924c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   2924c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29250:	b083      	sub	sp, #12
   29252:	4605      	mov	r5, r0
   29254:	9101      	str	r1, [sp, #4]
   29256:	4616      	mov	r6, r2
   29258:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2925a:	4610      	mov	r0, r2
   2925c:	4619      	mov	r1, r3
   2925e:	f015 fd07 	bl	3ec70 <sys_clock_timeout_end_calc>
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   29262:	b34d      	cbz	r5, 292b8 <net_buf_alloc_len+0x6c>
   29264:	4682      	mov	sl, r0
   29266:	468b      	mov	fp, r1
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   29268:	f105 091c 	add.w	r9, r5, #28
	__asm__ volatile(
   2926c:	f04f 0320 	mov.w	r3, #32
   29270:	f3ef 8811 	mrs	r8, BASEPRI
   29274:	f383 8812 	msr	BASEPRI_MAX, r3
   29278:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2927c:	4648      	mov	r0, r9
   2927e:	f008 f8bd 	bl	313fc <z_spin_lock_valid>
   29282:	b320      	cbz	r0, 292ce <net_buf_alloc_len+0x82>
	z_spin_lock_set_owner(l);
   29284:	4648      	mov	r0, r9
   29286:	f008 f8d9 	bl	3143c <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2928a:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   2928c:	2b00      	cmp	r3, #0
   2928e:	f000 8086 	beq.w	2939e <net_buf_alloc_len+0x152>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   29292:	8c2a      	ldrh	r2, [r5, #32]
   29294:	4293      	cmp	r3, r2
   29296:	d238      	bcs.n	2930a <net_buf_alloc_len+0xbe>
	return z_impl_k_queue_get(queue, timeout);
   29298:	2200      	movs	r2, #0
   2929a:	2300      	movs	r3, #0
   2929c:	4628      	mov	r0, r5
   2929e:	f008 fd11 	bl	31cc4 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   292a2:	4604      	mov	r4, r0
   292a4:	b388      	cbz	r0, 2930a <net_buf_alloc_len+0xbe>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   292a6:	4648      	mov	r0, r9
   292a8:	f008 f8b8 	bl	3141c <z_spin_unlock_valid>
   292ac:	b1f0      	cbz	r0, 292ec <net_buf_alloc_len+0xa0>
	__asm__ volatile(
   292ae:	f388 8811 	msr	BASEPRI, r8
   292b2:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   292b6:	e038      	b.n	2932a <net_buf_alloc_len+0xde>
	__ASSERT_NO_MSG(pool);
   292b8:	4c5c      	ldr	r4, [pc, #368]	; (2942c <net_buf_alloc_len+0x1e0>)
   292ba:	23f4      	movs	r3, #244	; 0xf4
   292bc:	4622      	mov	r2, r4
   292be:	495c      	ldr	r1, [pc, #368]	; (29430 <net_buf_alloc_len+0x1e4>)
   292c0:	485c      	ldr	r0, [pc, #368]	; (29434 <net_buf_alloc_len+0x1e8>)
   292c2:	f00c ffe7 	bl	36294 <assert_print>
   292c6:	21f4      	movs	r1, #244	; 0xf4
   292c8:	4620      	mov	r0, r4
   292ca:	f00c ffdc 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   292ce:	4c5a      	ldr	r4, [pc, #360]	; (29438 <net_buf_alloc_len+0x1ec>)
   292d0:	2394      	movs	r3, #148	; 0x94
   292d2:	4622      	mov	r2, r4
   292d4:	4959      	ldr	r1, [pc, #356]	; (2943c <net_buf_alloc_len+0x1f0>)
   292d6:	4857      	ldr	r0, [pc, #348]	; (29434 <net_buf_alloc_len+0x1e8>)
   292d8:	f00c ffdc 	bl	36294 <assert_print>
   292dc:	4649      	mov	r1, r9
   292de:	4858      	ldr	r0, [pc, #352]	; (29440 <net_buf_alloc_len+0x1f4>)
   292e0:	f00c ffd8 	bl	36294 <assert_print>
   292e4:	2194      	movs	r1, #148	; 0x94
   292e6:	4620      	mov	r0, r4
   292e8:	f00c ffcd 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   292ec:	4c52      	ldr	r4, [pc, #328]	; (29438 <net_buf_alloc_len+0x1ec>)
   292ee:	23c2      	movs	r3, #194	; 0xc2
   292f0:	4622      	mov	r2, r4
   292f2:	4954      	ldr	r1, [pc, #336]	; (29444 <net_buf_alloc_len+0x1f8>)
   292f4:	484f      	ldr	r0, [pc, #316]	; (29434 <net_buf_alloc_len+0x1e8>)
   292f6:	f00c ffcd 	bl	36294 <assert_print>
   292fa:	4649      	mov	r1, r9
   292fc:	4852      	ldr	r0, [pc, #328]	; (29448 <net_buf_alloc_len+0x1fc>)
   292fe:	f00c ffc9 	bl	36294 <assert_print>
   29302:	21c2      	movs	r1, #194	; 0xc2
   29304:	4620      	mov	r0, r4
   29306:	f00c ffbe 	bl	36286 <assert_post_action>
			}
		}

		uninit_count = pool->uninit_count--;
   2930a:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   2930c:	1e63      	subs	r3, r4, #1
   2930e:	846b      	strh	r3, [r5, #34]	; 0x22
   29310:	4648      	mov	r0, r9
   29312:	f008 f883 	bl	3141c <z_spin_unlock_valid>
   29316:	b398      	cbz	r0, 29380 <net_buf_alloc_len+0x134>
   29318:	f388 8811 	msr	BASEPRI, r8
   2931c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&pool->lock, key);

		buf = pool_get_uninit(pool, uninit_count);
   29320:	4621      	mov	r1, r4
   29322:	4628      	mov	r0, r5
   29324:	f012 fcdd 	bl	3bce2 <pool_get_uninit>
   29328:	4604      	mov	r4, r0
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2932a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   2932e:	f1b8 0f00 	cmp.w	r8, #0
   29332:	d06a      	beq.n	2940a <net_buf_alloc_len+0x1be>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   29334:	ea56 0307 	orrs.w	r3, r6, r7
   29338:	d005      	beq.n	29346 <net_buf_alloc_len+0xfa>
   2933a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2933e:	bf08      	it	eq
   29340:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   29344:	d14b      	bne.n	293de <net_buf_alloc_len+0x192>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   29346:	4632      	mov	r2, r6
   29348:	463b      	mov	r3, r7
   2934a:	a901      	add	r1, sp, #4
   2934c:	4620      	mov	r0, r4
   2934e:	f012 fcdd 	bl	3bd0c <data_alloc>
   29352:	4605      	mov	r5, r0
   29354:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   29356:	2800      	cmp	r0, #0
   29358:	d052      	beq.n	29400 <net_buf_alloc_len+0x1b4>
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   2935a:	9b01      	ldr	r3, [sp, #4]
   2935c:	4598      	cmp	r8, r3
   2935e:	d956      	bls.n	2940e <net_buf_alloc_len+0x1c2>
   29360:	4c32      	ldr	r4, [pc, #200]	; (2942c <net_buf_alloc_len+0x1e0>)
   29362:	f240 1355 	movw	r3, #341	; 0x155
   29366:	4622      	mov	r2, r4
   29368:	4938      	ldr	r1, [pc, #224]	; (2944c <net_buf_alloc_len+0x200>)
   2936a:	4832      	ldr	r0, [pc, #200]	; (29434 <net_buf_alloc_len+0x1e8>)
   2936c:	f00c ff92 	bl	36294 <assert_print>
   29370:	4837      	ldr	r0, [pc, #220]	; (29450 <net_buf_alloc_len+0x204>)
   29372:	f00c ff8f 	bl	36294 <assert_print>
   29376:	f240 1155 	movw	r1, #341	; 0x155
   2937a:	4620      	mov	r0, r4
   2937c:	f00c ff83 	bl	36286 <assert_post_action>
   29380:	4c2d      	ldr	r4, [pc, #180]	; (29438 <net_buf_alloc_len+0x1ec>)
   29382:	23c2      	movs	r3, #194	; 0xc2
   29384:	4622      	mov	r2, r4
   29386:	492f      	ldr	r1, [pc, #188]	; (29444 <net_buf_alloc_len+0x1f8>)
   29388:	482a      	ldr	r0, [pc, #168]	; (29434 <net_buf_alloc_len+0x1e8>)
   2938a:	f00c ff83 	bl	36294 <assert_print>
   2938e:	4649      	mov	r1, r9
   29390:	482d      	ldr	r0, [pc, #180]	; (29448 <net_buf_alloc_len+0x1fc>)
   29392:	f00c ff7f 	bl	36294 <assert_print>
   29396:	21c2      	movs	r1, #194	; 0xc2
   29398:	4620      	mov	r0, r4
   2939a:	f00c ff74 	bl	36286 <assert_post_action>
   2939e:	4648      	mov	r0, r9
   293a0:	f008 f83c 	bl	3141c <z_spin_unlock_valid>
   293a4:	b160      	cbz	r0, 293c0 <net_buf_alloc_len+0x174>
   293a6:	f388 8811 	msr	BASEPRI, r8
   293aa:	f3bf 8f6f 	isb	sy
   293ae:	4632      	mov	r2, r6
   293b0:	463b      	mov	r3, r7
   293b2:	4628      	mov	r0, r5
   293b4:	f008 fc86 	bl	31cc4 <z_impl_k_queue_get>
	if (!buf) {
   293b8:	4604      	mov	r4, r0
   293ba:	2800      	cmp	r0, #0
   293bc:	d1b5      	bne.n	2932a <net_buf_alloc_len+0xde>
   293be:	e030      	b.n	29422 <net_buf_alloc_len+0x1d6>
   293c0:	4c1d      	ldr	r4, [pc, #116]	; (29438 <net_buf_alloc_len+0x1ec>)
   293c2:	23c2      	movs	r3, #194	; 0xc2
   293c4:	4622      	mov	r2, r4
   293c6:	491f      	ldr	r1, [pc, #124]	; (29444 <net_buf_alloc_len+0x1f8>)
   293c8:	481a      	ldr	r0, [pc, #104]	; (29434 <net_buf_alloc_len+0x1e8>)
   293ca:	f00c ff63 	bl	36294 <assert_print>
   293ce:	4649      	mov	r1, r9
   293d0:	481d      	ldr	r0, [pc, #116]	; (29448 <net_buf_alloc_len+0x1fc>)
   293d2:	f00c ff5f 	bl	36294 <assert_print>
   293d6:	21c2      	movs	r1, #194	; 0xc2
   293d8:	4620      	mov	r0, r4
   293da:	f00c ff54 	bl	36286 <assert_post_action>
			int64_t remaining = end - sys_clock_tick_get();
   293de:	f00b fac9 	bl	34974 <sys_clock_tick_get>
   293e2:	ebba 0a00 	subs.w	sl, sl, r0
   293e6:	eb6b 0b01 	sbc.w	fp, fp, r1
			if (remaining <= 0) {
   293ea:	f1ba 0f01 	cmp.w	sl, #1
   293ee:	f17b 0300 	sbcs.w	r3, fp, #0
   293f2:	db02      	blt.n	293fa <net_buf_alloc_len+0x1ae>
				timeout = Z_TIMEOUT_TICKS(remaining);
   293f4:	4656      	mov	r6, sl
   293f6:	465f      	mov	r7, fp
   293f8:	e7a5      	b.n	29346 <net_buf_alloc_len+0xfa>
				timeout = K_NO_WAIT;
   293fa:	2600      	movs	r6, #0
   293fc:	4637      	mov	r7, r6
   293fe:	e7a2      	b.n	29346 <net_buf_alloc_len+0xfa>
			net_buf_destroy(buf);
   29400:	4620      	mov	r0, r4
   29402:	f012 fc97 	bl	3bd34 <net_buf_destroy>
			return NULL;
   29406:	462c      	mov	r4, r5
   29408:	e00b      	b.n	29422 <net_buf_alloc_len+0x1d6>
#endif
	} else {
		buf->__buf = NULL;
   2940a:	2300      	movs	r3, #0
   2940c:	6163      	str	r3, [r4, #20]
	}

	buf->ref   = 1U;
   2940e:	2301      	movs	r3, #1
   29410:	7223      	strb	r3, [r4, #8]
	buf->flags = 0U;
   29412:	2300      	movs	r3, #0
   29414:	7263      	strb	r3, [r4, #9]
	buf->frags = NULL;
   29416:	6063      	str	r3, [r4, #4]
	buf->size  = size;
   29418:	9b01      	ldr	r3, [sp, #4]
   2941a:	8263      	strh	r3, [r4, #18]
	net_buf_reset(buf);
   2941c:	4620      	mov	r0, r4
   2941e:	f7ff feed 	bl	291fc <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   29422:	4620      	mov	r0, r4
   29424:	b003      	add	sp, #12
   29426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2942a:	bf00      	nop
   2942c:	000445c4 	.word	0x000445c4
   29430:	00044618 	.word	0x00044618
   29434:	0003f72c 	.word	0x0003f72c
   29438:	00040b28 	.word	0x00040b28
   2943c:	00040b88 	.word	0x00040b88
   29440:	00040ba0 	.word	0x00040ba0
   29444:	00040b58 	.word	0x00040b58
   29448:	00040b70 	.word	0x00040b70
   2944c:	00044620 	.word	0x00044620
   29450:	00044634 	.word	0x00044634

00029454 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   29454:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   29456:	b128      	cbz	r0, 29464 <net_buf_simple_reserve+0x10>
	__ASSERT_NO_MSG(buf->len == 0U);
   29458:	8882      	ldrh	r2, [r0, #4]
   2945a:	b982      	cbnz	r2, 2947e <net_buf_simple_reserve+0x2a>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2945c:	6882      	ldr	r2, [r0, #8]
   2945e:	440a      	add	r2, r1
   29460:	6002      	str	r2, [r0, #0]
}
   29462:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(buf);
   29464:	4c0c      	ldr	r4, [pc, #48]	; (29498 <net_buf_simple_reserve+0x44>)
   29466:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   2946a:	4622      	mov	r2, r4
   2946c:	490b      	ldr	r1, [pc, #44]	; (2949c <net_buf_simple_reserve+0x48>)
   2946e:	480c      	ldr	r0, [pc, #48]	; (294a0 <net_buf_simple_reserve+0x4c>)
   29470:	f00c ff10 	bl	36294 <assert_print>
   29474:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   29478:	4620      	mov	r0, r4
   2947a:	f00c ff04 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   2947e:	4c06      	ldr	r4, [pc, #24]	; (29498 <net_buf_simple_reserve+0x44>)
   29480:	f240 13b9 	movw	r3, #441	; 0x1b9
   29484:	4622      	mov	r2, r4
   29486:	4907      	ldr	r1, [pc, #28]	; (294a4 <net_buf_simple_reserve+0x50>)
   29488:	4805      	ldr	r0, [pc, #20]	; (294a0 <net_buf_simple_reserve+0x4c>)
   2948a:	f00c ff03 	bl	36294 <assert_print>
   2948e:	f240 11b9 	movw	r1, #441	; 0x1b9
   29492:	4620      	mov	r0, r4
   29494:	f00c fef7 	bl	36286 <assert_post_action>
   29498:	000445c4 	.word	0x000445c4
   2949c:	000446d0 	.word	0x000446d0
   294a0:	0003f72c 	.word	0x0003f72c
   294a4:	00044638 	.word	0x00044638

000294a8 <net_buf_slist_put>:

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   294a8:	b570      	push	{r4, r5, r6, lr}
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   294aa:	b310      	cbz	r0, 294f2 <net_buf_slist_put+0x4a>
   294ac:	460c      	mov	r4, r1
   294ae:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(buf);
   294b0:	b361      	cbz	r1, 2950c <net_buf_slist_put+0x64>
	__asm__ volatile(
   294b2:	f04f 0220 	mov.w	r2, #32
   294b6:	f3ef 8311 	mrs	r3, BASEPRI
   294ba:	f382 8812 	msr	BASEPRI_MAX, r2
   294be:	f3bf 8f6f 	isb	sy
   294c2:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   294c4:	4828      	ldr	r0, [pc, #160]	; (29568 <net_buf_slist_put+0xc0>)
   294c6:	f007 ff99 	bl	313fc <z_spin_lock_valid>
   294ca:	b360      	cbz	r0, 29526 <net_buf_slist_put+0x7e>
	z_spin_lock_set_owner(l);
   294cc:	4826      	ldr	r0, [pc, #152]	; (29568 <net_buf_slist_put+0xc0>)
   294ce:	f007 ffb5 	bl	3143c <z_spin_lock_set_owner>
	parent->next = child;
   294d2:	2300      	movs	r3, #0
   294d4:	6023      	str	r3, [r4, #0]
	return list->tail;
   294d6:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_APPEND(slist, snode)
   294d8:	2b00      	cmp	r3, #0
   294da:	d033      	beq.n	29544 <net_buf_slist_put+0x9c>
	parent->next = child;
   294dc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   294de:	6074      	str	r4, [r6, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   294e0:	4821      	ldr	r0, [pc, #132]	; (29568 <net_buf_slist_put+0xc0>)
   294e2:	f007 ff9b 	bl	3141c <z_spin_unlock_valid>
   294e6:	b380      	cbz	r0, 2954a <net_buf_slist_put+0xa2>
	__asm__ volatile(
   294e8:	f385 8811 	msr	BASEPRI, r5
   294ec:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   294f0:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(list);
   294f2:	4c1e      	ldr	r4, [pc, #120]	; (2956c <net_buf_slist_put+0xc4>)
   294f4:	f240 13c5 	movw	r3, #453	; 0x1c5
   294f8:	4622      	mov	r2, r4
   294fa:	491d      	ldr	r1, [pc, #116]	; (29570 <net_buf_slist_put+0xc8>)
   294fc:	481d      	ldr	r0, [pc, #116]	; (29574 <net_buf_slist_put+0xcc>)
   294fe:	f00c fec9 	bl	36294 <assert_print>
   29502:	f240 11c5 	movw	r1, #453	; 0x1c5
   29506:	4620      	mov	r0, r4
   29508:	f00c febd 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   2950c:	4c17      	ldr	r4, [pc, #92]	; (2956c <net_buf_slist_put+0xc4>)
   2950e:	f44f 73e3 	mov.w	r3, #454	; 0x1c6
   29512:	4622      	mov	r2, r4
   29514:	4918      	ldr	r1, [pc, #96]	; (29578 <net_buf_slist_put+0xd0>)
   29516:	4817      	ldr	r0, [pc, #92]	; (29574 <net_buf_slist_put+0xcc>)
   29518:	f00c febc 	bl	36294 <assert_print>
   2951c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
   29520:	4620      	mov	r0, r4
   29522:	f00c feb0 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29526:	4c15      	ldr	r4, [pc, #84]	; (2957c <net_buf_slist_put+0xd4>)
   29528:	2394      	movs	r3, #148	; 0x94
   2952a:	4622      	mov	r2, r4
   2952c:	4914      	ldr	r1, [pc, #80]	; (29580 <net_buf_slist_put+0xd8>)
   2952e:	4811      	ldr	r0, [pc, #68]	; (29574 <net_buf_slist_put+0xcc>)
   29530:	f00c feb0 	bl	36294 <assert_print>
   29534:	490c      	ldr	r1, [pc, #48]	; (29568 <net_buf_slist_put+0xc0>)
   29536:	4813      	ldr	r0, [pc, #76]	; (29584 <net_buf_slist_put+0xdc>)
   29538:	f00c feac 	bl	36294 <assert_print>
   2953c:	2194      	movs	r1, #148	; 0x94
   2953e:	4620      	mov	r0, r4
   29540:	f00c fea1 	bl	36286 <assert_post_action>
   29544:	6074      	str	r4, [r6, #4]
	list->head = node;
   29546:	6034      	str	r4, [r6, #0]
}
   29548:	e7ca      	b.n	294e0 <net_buf_slist_put+0x38>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2954a:	4c0c      	ldr	r4, [pc, #48]	; (2957c <net_buf_slist_put+0xd4>)
   2954c:	23c2      	movs	r3, #194	; 0xc2
   2954e:	4622      	mov	r2, r4
   29550:	490d      	ldr	r1, [pc, #52]	; (29588 <net_buf_slist_put+0xe0>)
   29552:	4808      	ldr	r0, [pc, #32]	; (29574 <net_buf_slist_put+0xcc>)
   29554:	f00c fe9e 	bl	36294 <assert_print>
   29558:	4903      	ldr	r1, [pc, #12]	; (29568 <net_buf_slist_put+0xc0>)
   2955a:	480c      	ldr	r0, [pc, #48]	; (2958c <net_buf_slist_put+0xe4>)
   2955c:	f00c fe9a 	bl	36294 <assert_print>
   29560:	21c2      	movs	r1, #194	; 0xc2
   29562:	4620      	mov	r0, r4
   29564:	f00c fe8f 	bl	36286 <assert_post_action>
   29568:	2000c2fc 	.word	0x2000c2fc
   2956c:	000445c4 	.word	0x000445c4
   29570:	00044648 	.word	0x00044648
   29574:	0003f72c 	.word	0x0003f72c
   29578:	000446d0 	.word	0x000446d0
   2957c:	00040b28 	.word	0x00040b28
   29580:	00040b88 	.word	0x00040b88
   29584:	00040ba0 	.word	0x00040ba0
   29588:	00040b58 	.word	0x00040b58
   2958c:	00040b70 	.word	0x00040b70

00029590 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   29590:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   29592:	b300      	cbz	r0, 295d6 <net_buf_slist_get+0x46>
   29594:	4606      	mov	r6, r0
	__asm__ volatile(
   29596:	f04f 0320 	mov.w	r3, #32
   2959a:	f3ef 8511 	mrs	r5, BASEPRI
   2959e:	f383 8812 	msr	BASEPRI_MAX, r3
   295a2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   295a6:	4822      	ldr	r0, [pc, #136]	; (29630 <net_buf_slist_get+0xa0>)
   295a8:	f007 ff28 	bl	313fc <z_spin_lock_valid>
   295ac:	b300      	cbz	r0, 295f0 <net_buf_slist_get+0x60>
	z_spin_lock_set_owner(l);
   295ae:	4820      	ldr	r0, [pc, #128]	; (29630 <net_buf_slist_get+0xa0>)
   295b0:	f007 ff44 	bl	3143c <z_spin_lock_set_owner>
	return list->head;
   295b4:	6834      	ldr	r4, [r6, #0]
Z_GENLIST_GET(slist, snode)
   295b6:	b124      	cbz	r4, 295c2 <net_buf_slist_get+0x32>
	return node->next;
   295b8:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   295ba:	6033      	str	r3, [r6, #0]
	return list->tail;
   295bc:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   295be:	4294      	cmp	r4, r2
   295c0:	d025      	beq.n	2960e <net_buf_slist_get+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   295c2:	481b      	ldr	r0, [pc, #108]	; (29630 <net_buf_slist_get+0xa0>)
   295c4:	f007 ff2a 	bl	3141c <z_spin_unlock_valid>
   295c8:	b318      	cbz	r0, 29612 <net_buf_slist_get+0x82>
	__asm__ volatile(
   295ca:	f385 8811 	msr	BASEPRI, r5
   295ce:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   295d2:	4620      	mov	r0, r4
   295d4:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(list);
   295d6:	4c17      	ldr	r4, [pc, #92]	; (29634 <net_buf_slist_get+0xa4>)
   295d8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   295dc:	4622      	mov	r2, r4
   295de:	4916      	ldr	r1, [pc, #88]	; (29638 <net_buf_slist_get+0xa8>)
   295e0:	4816      	ldr	r0, [pc, #88]	; (2963c <net_buf_slist_get+0xac>)
   295e2:	f00c fe57 	bl	36294 <assert_print>
   295e6:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   295ea:	4620      	mov	r0, r4
   295ec:	f00c fe4b 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   295f0:	4c13      	ldr	r4, [pc, #76]	; (29640 <net_buf_slist_get+0xb0>)
   295f2:	2394      	movs	r3, #148	; 0x94
   295f4:	4622      	mov	r2, r4
   295f6:	4913      	ldr	r1, [pc, #76]	; (29644 <net_buf_slist_get+0xb4>)
   295f8:	4810      	ldr	r0, [pc, #64]	; (2963c <net_buf_slist_get+0xac>)
   295fa:	f00c fe4b 	bl	36294 <assert_print>
   295fe:	490c      	ldr	r1, [pc, #48]	; (29630 <net_buf_slist_get+0xa0>)
   29600:	4811      	ldr	r0, [pc, #68]	; (29648 <net_buf_slist_get+0xb8>)
   29602:	f00c fe47 	bl	36294 <assert_print>
   29606:	2194      	movs	r1, #148	; 0x94
   29608:	4620      	mov	r0, r4
   2960a:	f00c fe3c 	bl	36286 <assert_post_action>
	list->tail = node;
   2960e:	6073      	str	r3, [r6, #4]
}
   29610:	e7d7      	b.n	295c2 <net_buf_slist_get+0x32>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   29612:	4c0b      	ldr	r4, [pc, #44]	; (29640 <net_buf_slist_get+0xb0>)
   29614:	23c2      	movs	r3, #194	; 0xc2
   29616:	4622      	mov	r2, r4
   29618:	490c      	ldr	r1, [pc, #48]	; (2964c <net_buf_slist_get+0xbc>)
   2961a:	4808      	ldr	r0, [pc, #32]	; (2963c <net_buf_slist_get+0xac>)
   2961c:	f00c fe3a 	bl	36294 <assert_print>
   29620:	4903      	ldr	r1, [pc, #12]	; (29630 <net_buf_slist_get+0xa0>)
   29622:	480b      	ldr	r0, [pc, #44]	; (29650 <net_buf_slist_get+0xc0>)
   29624:	f00c fe36 	bl	36294 <assert_print>
   29628:	21c2      	movs	r1, #194	; 0xc2
   2962a:	4620      	mov	r0, r4
   2962c:	f00c fe2b 	bl	36286 <assert_post_action>
   29630:	2000c2fc 	.word	0x2000c2fc
   29634:	000445c4 	.word	0x000445c4
   29638:	00044648 	.word	0x00044648
   2963c:	0003f72c 	.word	0x0003f72c
   29640:	00040b28 	.word	0x00040b28
   29644:	00040b88 	.word	0x00040b88
   29648:	00040ba0 	.word	0x00040ba0
   2964c:	00040b58 	.word	0x00040b58
   29650:	00040b70 	.word	0x00040b70

00029654 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   29654:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(fifo);
   29656:	b118      	cbz	r0, 29660 <net_buf_put+0xc>
	__ASSERT_NO_MSG(buf);
   29658:	b179      	cbz	r1, 2967a <net_buf_put+0x26>

	k_fifo_put(fifo, buf);
   2965a:	f015 f9bf 	bl	3e9dc <k_queue_append>
}
   2965e:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(fifo);
   29660:	4c0c      	ldr	r4, [pc, #48]	; (29694 <net_buf_put+0x40>)
   29662:	f240 13df 	movw	r3, #479	; 0x1df
   29666:	4622      	mov	r2, r4
   29668:	490b      	ldr	r1, [pc, #44]	; (29698 <net_buf_put+0x44>)
   2966a:	480c      	ldr	r0, [pc, #48]	; (2969c <net_buf_put+0x48>)
   2966c:	f00c fe12 	bl	36294 <assert_print>
   29670:	f240 11df 	movw	r1, #479	; 0x1df
   29674:	4620      	mov	r0, r4
   29676:	f00c fe06 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(buf);
   2967a:	4c06      	ldr	r4, [pc, #24]	; (29694 <net_buf_put+0x40>)
   2967c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   29680:	4622      	mov	r2, r4
   29682:	4907      	ldr	r1, [pc, #28]	; (296a0 <net_buf_put+0x4c>)
   29684:	4805      	ldr	r0, [pc, #20]	; (2969c <net_buf_put+0x48>)
   29686:	f00c fe05 	bl	36294 <assert_print>
   2968a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   2968e:	4620      	mov	r0, r4
   29690:	f00c fdf9 	bl	36286 <assert_post_action>
   29694:	000445c4 	.word	0x000445c4
   29698:	00044650 	.word	0x00044650
   2969c:	0003f72c 	.word	0x0003f72c
   296a0:	000446d0 	.word	0x000446d0

000296a4 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   296a4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf);
   296a6:	4604      	mov	r4, r0
   296a8:	b9b8      	cbnz	r0, 296da <net_buf_unref+0x36>
   296aa:	4c16      	ldr	r4, [pc, #88]	; (29704 <net_buf_unref+0x60>)
   296ac:	f240 13eb 	movw	r3, #491	; 0x1eb
   296b0:	4622      	mov	r2, r4
   296b2:	4915      	ldr	r1, [pc, #84]	; (29708 <net_buf_unref+0x64>)
   296b4:	4815      	ldr	r0, [pc, #84]	; (2970c <net_buf_unref+0x68>)
   296b6:	f00c fded 	bl	36294 <assert_print>
   296ba:	f240 11eb 	movw	r1, #491	; 0x1eb
   296be:	4620      	mov	r0, r4
   296c0:	f00c fde1 	bl	36286 <assert_post_action>
		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
		}

		buf->data = NULL;
   296c4:	2300      	movs	r3, #0
   296c6:	60e3      	str	r3, [r4, #12]
		buf->frags = NULL;
   296c8:	6063      	str	r3, [r4, #4]

		pool = net_buf_pool_get(buf->pool_id);
   296ca:	7aa0      	ldrb	r0, [r4, #10]
   296cc:	f7ff fd8e 	bl	291ec <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   296d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   296d2:	b193      	cbz	r3, 296fa <net_buf_unref+0x56>
			pool->destroy(buf);
   296d4:	4620      	mov	r0, r4
   296d6:	4798      	blx	r3
{
   296d8:	462c      	mov	r4, r5
	while (buf) {
   296da:	b194      	cbz	r4, 29702 <net_buf_unref+0x5e>
		struct net_buf *frags = buf->frags;
   296dc:	6865      	ldr	r5, [r4, #4]
		if (--buf->ref > 0) {
   296de:	7a23      	ldrb	r3, [r4, #8]
   296e0:	3b01      	subs	r3, #1
   296e2:	b2db      	uxtb	r3, r3
   296e4:	7223      	strb	r3, [r4, #8]
   296e6:	b963      	cbnz	r3, 29702 <net_buf_unref+0x5e>
		if (buf->__buf) {
   296e8:	6961      	ldr	r1, [r4, #20]
   296ea:	2900      	cmp	r1, #0
   296ec:	d0ea      	beq.n	296c4 <net_buf_unref+0x20>
			data_unref(buf, buf->__buf);
   296ee:	4620      	mov	r0, r4
   296f0:	f012 fb29 	bl	3bd46 <data_unref>
			buf->__buf = NULL;
   296f4:	2300      	movs	r3, #0
   296f6:	6163      	str	r3, [r4, #20]
   296f8:	e7e4      	b.n	296c4 <net_buf_unref+0x20>
		} else {
			net_buf_destroy(buf);
   296fa:	4620      	mov	r0, r4
   296fc:	f012 fb1a 	bl	3bd34 <net_buf_destroy>
   29700:	e7ea      	b.n	296d8 <net_buf_unref+0x34>
		}

		buf = frags;
	}
}
   29702:	bd38      	pop	{r3, r4, r5, pc}
   29704:	000445c4 	.word	0x000445c4
   29708:	000446d0 	.word	0x000446d0
   2970c:	0003f72c 	.word	0x0003f72c

00029710 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
	__ASSERT_NO_MSG(buf);
   29710:	b118      	cbz	r0, 2971a <net_buf_ref+0xa>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   29712:	7a02      	ldrb	r2, [r0, #8]
   29714:	3201      	adds	r2, #1
   29716:	7202      	strb	r2, [r0, #8]
	return buf;
}
   29718:	4770      	bx	lr
{
   2971a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   2971c:	4c06      	ldr	r4, [pc, #24]	; (29738 <net_buf_ref+0x28>)
   2971e:	f240 231a 	movw	r3, #538	; 0x21a
   29722:	4622      	mov	r2, r4
   29724:	4905      	ldr	r1, [pc, #20]	; (2973c <net_buf_ref+0x2c>)
   29726:	4806      	ldr	r0, [pc, #24]	; (29740 <net_buf_ref+0x30>)
   29728:	f00c fdb4 	bl	36294 <assert_print>
   2972c:	f240 211a 	movw	r1, #538	; 0x21a
   29730:	4620      	mov	r0, r4
   29732:	f00c fda8 	bl	36286 <assert_post_action>
   29736:	bf00      	nop
   29738:	000445c4 	.word	0x000445c4
   2973c:	000446d0 	.word	0x000446d0
   29740:	0003f72c 	.word	0x0003f72c

00029744 <net_buf_frag_last>:
	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	__ASSERT_NO_MSG(buf);
   29744:	4603      	mov	r3, r0
   29746:	b120      	cbz	r0, 29752 <net_buf_frag_last+0xe>

	while (buf->frags) {
   29748:	4618      	mov	r0, r3
   2974a:	685b      	ldr	r3, [r3, #4]
   2974c:	2b00      	cmp	r3, #0
   2974e:	d1fb      	bne.n	29748 <net_buf_frag_last+0x4>
		buf = buf->frags;
	}

	return buf;
}
   29750:	4770      	bx	lr
{
   29752:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   29754:	4c06      	ldr	r4, [pc, #24]	; (29770 <net_buf_frag_last+0x2c>)
   29756:	f240 2357 	movw	r3, #599	; 0x257
   2975a:	4622      	mov	r2, r4
   2975c:	4905      	ldr	r1, [pc, #20]	; (29774 <net_buf_frag_last+0x30>)
   2975e:	4806      	ldr	r0, [pc, #24]	; (29778 <net_buf_frag_last+0x34>)
   29760:	f00c fd98 	bl	36294 <assert_print>
   29764:	f240 2157 	movw	r1, #599	; 0x257
   29768:	4620      	mov	r0, r4
   2976a:	f00c fd8c 	bl	36286 <assert_post_action>
   2976e:	bf00      	nop
   29770:	000445c4 	.word	0x000445c4
   29774:	000446d0 	.word	0x000446d0
   29778:	0003f72c 	.word	0x0003f72c

0002977c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2977c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(parent);
   2977e:	b158      	cbz	r0, 29798 <net_buf_frag_insert+0x1c>
   29780:	460c      	mov	r4, r1
   29782:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   29784:	b1a9      	cbz	r1, 297b2 <net_buf_frag_insert+0x36>

	if (parent->frags) {
   29786:	6843      	ldr	r3, [r0, #4]
   29788:	b123      	cbz	r3, 29794 <net_buf_frag_insert+0x18>
		net_buf_frag_last(frag)->frags = parent->frags;
   2978a:	4608      	mov	r0, r1
   2978c:	f7ff ffda 	bl	29744 <net_buf_frag_last>
   29790:	686b      	ldr	r3, [r5, #4]
   29792:	6043      	str	r3, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   29794:	606c      	str	r4, [r5, #4]
}
   29796:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(parent);
   29798:	4c0c      	ldr	r4, [pc, #48]	; (297cc <net_buf_frag_insert+0x50>)
   2979a:	f240 2362 	movw	r3, #610	; 0x262
   2979e:	4622      	mov	r2, r4
   297a0:	490b      	ldr	r1, [pc, #44]	; (297d0 <net_buf_frag_insert+0x54>)
   297a2:	480c      	ldr	r0, [pc, #48]	; (297d4 <net_buf_frag_insert+0x58>)
   297a4:	f00c fd76 	bl	36294 <assert_print>
   297a8:	f240 2162 	movw	r1, #610	; 0x262
   297ac:	4620      	mov	r0, r4
   297ae:	f00c fd6a 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(frag);
   297b2:	4c06      	ldr	r4, [pc, #24]	; (297cc <net_buf_frag_insert+0x50>)
   297b4:	f240 2363 	movw	r3, #611	; 0x263
   297b8:	4622      	mov	r2, r4
   297ba:	4907      	ldr	r1, [pc, #28]	; (297d8 <net_buf_frag_insert+0x5c>)
   297bc:	4805      	ldr	r0, [pc, #20]	; (297d4 <net_buf_frag_insert+0x58>)
   297be:	f00c fd69 	bl	36294 <assert_print>
   297c2:	f240 2163 	movw	r1, #611	; 0x263
   297c6:	4620      	mov	r0, r4
   297c8:	f00c fd5d 	bl	36286 <assert_post_action>
   297cc:	000445c4 	.word	0x000445c4
   297d0:	00044658 	.word	0x00044658
   297d4:	0003f72c 	.word	0x0003f72c
   297d8:	00044660 	.word	0x00044660

000297dc <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   297dc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(frag);
   297de:	b149      	cbz	r1, 297f4 <net_buf_frag_add+0x18>
   297e0:	4604      	mov	r4, r0
   297e2:	460d      	mov	r5, r1

	if (!head) {
   297e4:	b198      	cbz	r0, 2980e <net_buf_frag_add+0x32>
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   297e6:	f7ff ffad 	bl	29744 <net_buf_frag_last>
   297ea:	4629      	mov	r1, r5
   297ec:	f7ff ffc6 	bl	2977c <net_buf_frag_insert>

	return head;
   297f0:	4620      	mov	r0, r4
}
   297f2:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(frag);
   297f4:	4c08      	ldr	r4, [pc, #32]	; (29818 <net_buf_frag_add+0x3c>)
   297f6:	f240 236e 	movw	r3, #622	; 0x26e
   297fa:	4622      	mov	r2, r4
   297fc:	4907      	ldr	r1, [pc, #28]	; (2981c <net_buf_frag_add+0x40>)
   297fe:	4808      	ldr	r0, [pc, #32]	; (29820 <net_buf_frag_add+0x44>)
   29800:	f00c fd48 	bl	36294 <assert_print>
   29804:	f240 216e 	movw	r1, #622	; 0x26e
   29808:	4620      	mov	r0, r4
   2980a:	f00c fd3c 	bl	36286 <assert_post_action>
		return net_buf_ref(frag);
   2980e:	4608      	mov	r0, r1
   29810:	f7ff ff7e 	bl	29710 <net_buf_ref>
   29814:	e7ed      	b.n	297f2 <net_buf_frag_add+0x16>
   29816:	bf00      	nop
   29818:	000445c4 	.word	0x000445c4
   2981c:	00044660 	.word	0x00044660
   29820:	0003f72c 	.word	0x0003f72c

00029824 <net_buf_simple_pull>:

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   29824:	8882      	ldrh	r2, [r0, #4]
   29826:	428a      	cmp	r2, r1
   29828:	d306      	bcc.n	29838 <net_buf_simple_pull+0x14>
   2982a:	4603      	mov	r3, r0

	buf->len -= len;
   2982c:	1a52      	subs	r2, r2, r1
   2982e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   29830:	6800      	ldr	r0, [r0, #0]
   29832:	4408      	add	r0, r1
   29834:	6018      	str	r0, [r3, #0]
}
   29836:	4770      	bx	lr
{
   29838:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   2983a:	4c06      	ldr	r4, [pc, #24]	; (29854 <net_buf_simple_pull+0x30>)
   2983c:	f240 4352 	movw	r3, #1106	; 0x452
   29840:	4622      	mov	r2, r4
   29842:	4905      	ldr	r1, [pc, #20]	; (29858 <net_buf_simple_pull+0x34>)
   29844:	4805      	ldr	r0, [pc, #20]	; (2985c <net_buf_simple_pull+0x38>)
   29846:	f00c fd25 	bl	36294 <assert_print>
   2984a:	f240 4152 	movw	r1, #1106	; 0x452
   2984e:	4620      	mov	r0, r4
   29850:	f00c fd19 	bl	36286 <assert_post_action>
   29854:	000445c4 	.word	0x000445c4
   29858:	00044668 	.word	0x00044668
   2985c:	0003f72c 	.word	0x0003f72c

00029860 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   29860:	4603      	mov	r3, r0
	void *data = buf->data;
   29862:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);
   29864:	889a      	ldrh	r2, [r3, #4]
   29866:	428a      	cmp	r2, r1
   29868:	d304      	bcc.n	29874 <net_buf_simple_pull_mem+0x14>

	buf->len -= len;
   2986a:	1a52      	subs	r2, r2, r1
   2986c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2986e:	4401      	add	r1, r0
   29870:	6019      	str	r1, [r3, #0]

	return data;
}
   29872:	4770      	bx	lr
{
   29874:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   29876:	4c06      	ldr	r4, [pc, #24]	; (29890 <net_buf_simple_pull_mem+0x30>)
   29878:	f240 435e 	movw	r3, #1118	; 0x45e
   2987c:	4622      	mov	r2, r4
   2987e:	4905      	ldr	r1, [pc, #20]	; (29894 <net_buf_simple_pull_mem+0x34>)
   29880:	4805      	ldr	r0, [pc, #20]	; (29898 <net_buf_simple_pull_mem+0x38>)
   29882:	f00c fd07 	bl	36294 <assert_print>
   29886:	f240 415e 	movw	r1, #1118	; 0x45e
   2988a:	4620      	mov	r0, r4
   2988c:	f00c fcfb 	bl	36286 <assert_post_action>
   29890:	000445c4 	.word	0x000445c4
   29894:	00044668 	.word	0x00044668
   29898:	0003f72c 	.word	0x0003f72c

0002989c <net_buf_simple_push>:
{
   2989c:	b538      	push	{r3, r4, r5, lr}
   2989e:	4604      	mov	r4, r0
   298a0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   298a2:	f012 fa9f 	bl	3bde4 <net_buf_simple_headroom>
   298a6:	42a8      	cmp	r0, r5
   298a8:	d306      	bcc.n	298b8 <net_buf_simple_push+0x1c>
	buf->data -= len;
   298aa:	6820      	ldr	r0, [r4, #0]
   298ac:	1b40      	subs	r0, r0, r5
   298ae:	6020      	str	r0, [r4, #0]
	buf->len += len;
   298b0:	88a3      	ldrh	r3, [r4, #4]
   298b2:	442b      	add	r3, r5
   298b4:	80a3      	strh	r3, [r4, #4]
}
   298b6:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   298b8:	4c06      	ldr	r4, [pc, #24]	; (298d4 <net_buf_simple_push+0x38>)
   298ba:	f240 33f2 	movw	r3, #1010	; 0x3f2
   298be:	4622      	mov	r2, r4
   298c0:	4905      	ldr	r1, [pc, #20]	; (298d8 <net_buf_simple_push+0x3c>)
   298c2:	4806      	ldr	r0, [pc, #24]	; (298dc <net_buf_simple_push+0x40>)
   298c4:	f00c fce6 	bl	36294 <assert_print>
   298c8:	f240 31f2 	movw	r1, #1010	; 0x3f2
   298cc:	4620      	mov	r0, r4
   298ce:	f00c fcda 	bl	36286 <assert_post_action>
   298d2:	bf00      	nop
   298d4:	000445c4 	.word	0x000445c4
   298d8:	00044678 	.word	0x00044678
   298dc:	0003f72c 	.word	0x0003f72c

000298e0 <net_buf_simple_add>:
{
   298e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   298e2:	4604      	mov	r4, r0
   298e4:	460d      	mov	r5, r1
	return buf->data + buf->len;
   298e6:	6803      	ldr	r3, [r0, #0]
   298e8:	8886      	ldrh	r6, [r0, #4]
   298ea:	199f      	adds	r7, r3, r6
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   298ec:	f012 fa85 	bl	3bdfa <net_buf_simple_tailroom>
   298f0:	42a8      	cmp	r0, r5
   298f2:	d303      	bcc.n	298fc <net_buf_simple_add+0x1c>
	buf->len += len;
   298f4:	442e      	add	r6, r5
   298f6:	80a6      	strh	r6, [r4, #4]
}
   298f8:	4638      	mov	r0, r7
   298fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   298fc:	4c06      	ldr	r4, [pc, #24]	; (29918 <net_buf_simple_add+0x38>)
   298fe:	f240 3303 	movw	r3, #771	; 0x303
   29902:	4622      	mov	r2, r4
   29904:	4905      	ldr	r1, [pc, #20]	; (2991c <net_buf_simple_add+0x3c>)
   29906:	4806      	ldr	r0, [pc, #24]	; (29920 <net_buf_simple_add+0x40>)
   29908:	f00c fcc4 	bl	36294 <assert_print>
   2990c:	f240 3103 	movw	r1, #771	; 0x303
   29910:	4620      	mov	r0, r4
   29912:	f00c fcb8 	bl	36286 <assert_post_action>
   29916:	bf00      	nop
   29918:	000445c4 	.word	0x000445c4
   2991c:	0004469c 	.word	0x0004469c
   29920:	0003f72c 	.word	0x0003f72c

00029924 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   29924:	b508      	push	{r3, lr}
   29926:	4804      	ldr	r0, [pc, #16]	; (29938 <xoshiro128_initialize+0x14>)
   29928:	f014 ff79 	bl	3e81e <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
   2992c:	b108      	cbz	r0, 29932 <xoshiro128_initialize+0xe>
		return -ENODEV;
	}
	return 0;
   2992e:	2000      	movs	r0, #0
}
   29930:	bd08      	pop	{r3, pc}
		return -ENODEV;
   29932:	f06f 0012 	mvn.w	r0, #18
   29936:	e7fb      	b.n	29930 <xoshiro128_initialize+0xc>
   29938:	0003efb4 	.word	0x0003efb4

0002993c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   2993c:	4800      	ldr	r0, [pc, #0]	; (29940 <get_hf_flags+0x4>)
   2993e:	4770      	bx	lr
   29940:	2000c39c 	.word	0x2000c39c

00029944 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   29944:	4b01      	ldr	r3, [pc, #4]	; (2994c <get_subsys+0x8>)
   29946:	1ac0      	subs	r0, r0, r3

	return (clock_control_subsys_t)offset;
}
   29948:	1140      	asrs	r0, r0, #5
   2994a:	4770      	bx	lr
   2994c:	2000c314 	.word	0x2000c314

00029950 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   29950:	b530      	push	{r4, r5, lr}
   29952:	b083      	sub	sp, #12
   29954:	4605      	mov	r5, r0
   29956:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   29958:	f7ff fff4 	bl	29944 <get_subsys>
   2995c:	4601      	mov	r1, r0
   2995e:	2340      	movs	r3, #64	; 0x40
   29960:	9300      	str	r3, [sp, #0]
   29962:	4623      	mov	r3, r4
   29964:	4a05      	ldr	r2, [pc, #20]	; (2997c <onoff_start+0x2c>)
   29966:	4806      	ldr	r0, [pc, #24]	; (29980 <onoff_start+0x30>)
   29968:	f012 fad8 	bl	3bf1c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   2996c:	1e01      	subs	r1, r0, #0
   2996e:	db01      	blt.n	29974 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   29970:	b003      	add	sp, #12
   29972:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   29974:	4628      	mov	r0, r5
   29976:	47a0      	blx	r4
}
   29978:	e7fa      	b.n	29970 <onoff_start+0x20>
   2997a:	bf00      	nop
   2997c:	0003bf65 	.word	0x0003bf65
   29980:	0003ef54 	.word	0x0003ef54

00029984 <generic_hfclk_stop>:
{
   29984:	b510      	push	{r4, lr}
	__asm__ volatile(
   29986:	f04f 0320 	mov.w	r3, #32
   2998a:	f3ef 8411 	mrs	r4, BASEPRI
   2998e:	f383 8812 	msr	BASEPRI_MAX, r3
   29992:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   29996:	4a08      	ldr	r2, [pc, #32]	; (299b8 <generic_hfclk_stop+0x34>)
   29998:	6813      	ldr	r3, [r2, #0]
   2999a:	f023 0102 	bic.w	r1, r3, #2
   2999e:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   299a0:	f013 0f01 	tst.w	r3, #1
   299a4:	d004      	beq.n	299b0 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
   299a6:	f384 8811 	msr	BASEPRI, r4
   299aa:	f3bf 8f6f 	isb	sy
}
   299ae:	bd10      	pop	{r4, pc}
		hfclk_stop();
   299b0:	f012 faf4 	bl	3bf9c <hfclk_stop>
   299b4:	e7f7      	b.n	299a6 <generic_hfclk_stop+0x22>
   299b6:	bf00      	nop
   299b8:	2000c3c4 	.word	0x2000c3c4

000299bc <sys_notify_init_spinwait>:
 *
 * @param notify pointer to the notification configuration object.
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);
   299bc:	b130      	cbz	r0, 299cc <sys_notify_init_spinwait+0x10>

	*notify = (struct sys_notify){
   299be:	2200      	movs	r2, #0
   299c0:	6002      	str	r2, [r0, #0]
   299c2:	6042      	str	r2, [r0, #4]
   299c4:	6082      	str	r2, [r0, #8]
   299c6:	2201      	movs	r2, #1
   299c8:	6042      	str	r2, [r0, #4]
   299ca:	4770      	bx	lr
{
   299cc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(notify != NULL);
   299ce:	4c06      	ldr	r4, [pc, #24]	; (299e8 <sys_notify_init_spinwait+0x2c>)
   299d0:	f44f 7385 	mov.w	r3, #266	; 0x10a
   299d4:	4622      	mov	r2, r4
   299d6:	4905      	ldr	r1, [pc, #20]	; (299ec <sys_notify_init_spinwait+0x30>)
   299d8:	4805      	ldr	r0, [pc, #20]	; (299f0 <sys_notify_init_spinwait+0x34>)
   299da:	f00c fc5b 	bl	36294 <assert_print>
   299de:	f44f 7185 	mov.w	r1, #266	; 0x10a
   299e2:	4620      	mov	r0, r4
   299e4:	f00c fc4f 	bl	36286 <assert_post_action>
   299e8:	000446d4 	.word	0x000446d4
   299ec:	00044704 	.word	0x00044704
   299f0:	0003f72c 	.word	0x0003f72c

000299f4 <nrf_clock_is_running>:

NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
                                            nrf_clock_domain_t     domain,
                                            void *                 p_clk_src)
{
    switch (domain)
   299f4:	2903      	cmp	r1, #3
   299f6:	d82f      	bhi.n	29a58 <nrf_clock_is_running+0x64>
   299f8:	e8df f001 	tbb	[pc, r1]
   299fc:	291c0f02 	.word	0x291c0f02
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
            if (p_clk_src != NULL)
   29a00:	b122      	cbz	r2, 29a0c <nrf_clock_is_running+0x18>
            {
                (*(nrf_clock_lfclk_t *)p_clk_src) =
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   29a02:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   29a06:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   29a0a:	7013      	strb	r3, [r2, #0]
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   29a0c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   29a10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   29a14:	d12e      	bne.n	29a74 <nrf_clock_is_running+0x80>
#endif
        default:
            NRFX_ASSERT(0);
            return false;
    }
    return false;
   29a16:	2000      	movs	r0, #0
   29a18:	4770      	bx	lr
            if (p_clk_src != NULL)
   29a1a:	b122      	cbz	r2, 29a26 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   29a1c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   29a20:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   29a24:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   29a26:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   29a2a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   29a2e:	d123      	bne.n	29a78 <nrf_clock_is_running+0x84>
    return false;
   29a30:	2000      	movs	r0, #0
   29a32:	4770      	bx	lr
            if (p_clk_src != NULL)
   29a34:	b122      	cbz	r2, 29a40 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   29a36:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   29a3a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   29a3e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   29a40:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   29a44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   29a48:	d118      	bne.n	29a7c <nrf_clock_is_running+0x88>
    return false;
   29a4a:	2000      	movs	r0, #0
   29a4c:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   29a4e:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   29a52:	f3c0 4000 	ubfx	r0, r0, #16, #1
   29a56:	4770      	bx	lr
{
   29a58:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
   29a5a:	4c09      	ldr	r4, [pc, #36]	; (29a80 <nrf_clock_is_running+0x8c>)
   29a5c:	f240 3347 	movw	r3, #839	; 0x347
   29a60:	4622      	mov	r2, r4
   29a62:	4908      	ldr	r1, [pc, #32]	; (29a84 <nrf_clock_is_running+0x90>)
   29a64:	4808      	ldr	r0, [pc, #32]	; (29a88 <nrf_clock_is_running+0x94>)
   29a66:	f00c fc15 	bl	36294 <assert_print>
   29a6a:	f240 3147 	movw	r1, #839	; 0x347
   29a6e:	4620      	mov	r0, r4
   29a70:	f00c fc09 	bl	36286 <assert_post_action>
                return true;
   29a74:	2001      	movs	r0, #1
   29a76:	4770      	bx	lr
                return true;
   29a78:	2001      	movs	r0, #1
   29a7a:	4770      	bx	lr
                return true;
   29a7c:	2001      	movs	r0, #1
}
   29a7e:	4770      	bx	lr
   29a80:	0004471c 	.word	0x0004471c
   29a84:	0003f964 	.word	0x0003f964
   29a88:	0003f72c 	.word	0x0003f72c

00029a8c <generic_hfclk_start>:
{
   29a8c:	b510      	push	{r4, lr}
   29a8e:	b082      	sub	sp, #8
	__asm__ volatile(
   29a90:	f04f 0320 	mov.w	r3, #32
   29a94:	f3ef 8411 	mrs	r4, BASEPRI
   29a98:	f383 8812 	msr	BASEPRI_MAX, r3
   29a9c:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   29aa0:	4a14      	ldr	r2, [pc, #80]	; (29af4 <generic_hfclk_start+0x68>)
   29aa2:	6813      	ldr	r3, [r2, #0]
   29aa4:	f043 0102 	orr.w	r1, r3, #2
   29aa8:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   29aaa:	f013 0f01 	tst.w	r3, #1
   29aae:	d109      	bne.n	29ac4 <generic_hfclk_start+0x38>
	bool already_started = false;
   29ab0:	2300      	movs	r3, #0
	__asm__ volatile(
   29ab2:	f384 8811 	msr	BASEPRI, r4
   29ab6:	f3bf 8f6f 	isb	sy
	if (already_started) {
   29aba:	b9ab      	cbnz	r3, 29ae8 <generic_hfclk_start+0x5c>
	hfclk_start();
   29abc:	f012 fa5a 	bl	3bf74 <hfclk_start>
}
   29ac0:	b002      	add	sp, #8
   29ac2:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   29ac4:	f10d 0207 	add.w	r2, sp, #7
   29ac8:	2101      	movs	r1, #1
   29aca:	480b      	ldr	r0, [pc, #44]	; (29af8 <generic_hfclk_start+0x6c>)
   29acc:	f7ff ff92 	bl	299f4 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   29ad0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29ad4:	2b01      	cmp	r3, #1
   29ad6:	d001      	beq.n	29adc <generic_hfclk_start+0x50>
	bool already_started = false;
   29ad8:	2300      	movs	r3, #0
   29ada:	e7ea      	b.n	29ab2 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
   29adc:	f7ff ff2e 	bl	2993c <get_hf_flags>
   29ae0:	f012 f9f7 	bl	3bed2 <set_on_state>
			already_started = true;
   29ae4:	2301      	movs	r3, #1
   29ae6:	e7e4      	b.n	29ab2 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
   29ae8:	2100      	movs	r1, #0
   29aea:	4804      	ldr	r0, [pc, #16]	; (29afc <generic_hfclk_start+0x70>)
   29aec:	f012 fa04 	bl	3bef8 <clkstarted_handle>
		return;
   29af0:	e7e6      	b.n	29ac0 <generic_hfclk_start+0x34>
   29af2:	bf00      	nop
   29af4:	2000c3c4 	.word	0x2000c3c4
   29af8:	40005000 	.word	0x40005000
   29afc:	0003ef54 	.word	0x0003ef54

00029b00 <get_status>:
{
   29b00:	b510      	push	{r4, lr}
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   29b02:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   29b04:	2903      	cmp	r1, #3
   29b06:	d805      	bhi.n	29b14 <get_status+0x14>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   29b08:	f012 f99b 	bl	3be42 <get_sub_data>
   29b0c:	6880      	ldr	r0, [r0, #8]
}
   29b0e:	f000 0007 	and.w	r0, r0, #7
   29b12:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   29b14:	4c05      	ldr	r4, [pc, #20]	; (29b2c <get_status+0x2c>)
   29b16:	237a      	movs	r3, #122	; 0x7a
   29b18:	4622      	mov	r2, r4
   29b1a:	4905      	ldr	r1, [pc, #20]	; (29b30 <get_status+0x30>)
   29b1c:	4805      	ldr	r0, [pc, #20]	; (29b34 <get_status+0x34>)
   29b1e:	f00c fbb9 	bl	36294 <assert_print>
   29b22:	217a      	movs	r1, #122	; 0x7a
   29b24:	4620      	mov	r0, r4
   29b26:	f00c fbae 	bl	36286 <assert_post_action>
   29b2a:	bf00      	nop
   29b2c:	00044750 	.word	0x00044750
   29b30:	00044790 	.word	0x00044790
   29b34:	0003f72c 	.word	0x0003f72c

00029b38 <stop>:
{
   29b38:	b570      	push	{r4, r5, r6, lr}
   29b3a:	4605      	mov	r5, r0
   29b3c:	4616      	mov	r6, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   29b3e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   29b40:	4621      	mov	r1, r4
   29b42:	f012 f97e 	bl	3be42 <get_sub_data>
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   29b46:	2c03      	cmp	r4, #3
   29b48:	d80d      	bhi.n	29b66 <stop+0x2e>
	err = set_off_state(&subdata->flags, ctx);
   29b4a:	4631      	mov	r1, r6
   29b4c:	3008      	adds	r0, #8
   29b4e:	f012 f989 	bl	3be64 <set_off_state>
	if (err < 0) {
   29b52:	2800      	cmp	r0, #0
   29b54:	db06      	blt.n	29b64 <stop+0x2c>
	get_sub_config(dev, type)->stop();
   29b56:	4621      	mov	r1, r4
   29b58:	4628      	mov	r0, r5
   29b5a:	f012 f979 	bl	3be50 <get_sub_config>
   29b5e:	6843      	ldr	r3, [r0, #4]
   29b60:	4798      	blx	r3
	return 0;
   29b62:	2000      	movs	r0, #0
}
   29b64:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   29b66:	4c06      	ldr	r4, [pc, #24]	; (29b80 <stop+0x48>)
   29b68:	f240 135d 	movw	r3, #349	; 0x15d
   29b6c:	4622      	mov	r2, r4
   29b6e:	4905      	ldr	r1, [pc, #20]	; (29b84 <stop+0x4c>)
   29b70:	4805      	ldr	r0, [pc, #20]	; (29b88 <stop+0x50>)
   29b72:	f00c fb8f 	bl	36294 <assert_print>
   29b76:	f240 115d 	movw	r1, #349	; 0x15d
   29b7a:	4620      	mov	r0, r4
   29b7c:	f00c fb83 	bl	36286 <assert_post_action>
   29b80:	00044750 	.word	0x00044750
   29b84:	00044790 	.word	0x00044790
   29b88:	0003f72c 	.word	0x0003f72c

00029b8c <onoff_stop>:
{
   29b8c:	b538      	push	{r3, r4, r5, lr}
   29b8e:	4605      	mov	r5, r0
   29b90:	460c      	mov	r4, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   29b92:	f7ff fed7 	bl	29944 <get_subsys>
   29b96:	4601      	mov	r1, r0
   29b98:	2240      	movs	r2, #64	; 0x40
   29b9a:	4803      	ldr	r0, [pc, #12]	; (29ba8 <onoff_stop+0x1c>)
   29b9c:	f7ff ffcc 	bl	29b38 <stop>
   29ba0:	4601      	mov	r1, r0
	notify(mgr, res);
   29ba2:	4628      	mov	r0, r5
   29ba4:	47a0      	blx	r4
}
   29ba6:	bd38      	pop	{r3, r4, r5, pc}
   29ba8:	0003ef54 	.word	0x0003ef54

00029bac <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   29bac:	b510      	push	{r4, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   29bae:	2805      	cmp	r0, #5
   29bb0:	d82d      	bhi.n	29c0e <clock_event_handler+0x62>
   29bb2:	e8df f000 	tbb	[pc, r0]
   29bb6:	1a03      	.short	0x1a03
   29bb8:	10151f2c 	.word	0x10151f2c
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   29bbc:	2100      	movs	r1, #0
   29bbe:	481a      	ldr	r0, [pc, #104]	; (29c28 <clock_event_handler+0x7c>)
   29bc0:	f012 f93f 	bl	3be42 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   29bc4:	6883      	ldr	r3, [r0, #8]
   29bc6:	f013 0f07 	tst.w	r3, #7
   29bca:	d108      	bne.n	29bde <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   29bcc:	2100      	movs	r1, #0
   29bce:	4816      	ldr	r0, [pc, #88]	; (29c28 <clock_event_handler+0x7c>)
   29bd0:	f012 f992 	bl	3bef8 <clkstarted_handle>
   29bd4:	e003      	b.n	29bde <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
   29bd6:	2102      	movs	r1, #2
   29bd8:	4813      	ldr	r0, [pc, #76]	; (29c28 <clock_event_handler+0x7c>)
   29bda:	f012 f98d 	bl	3bef8 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   29bde:	bd10      	pop	{r4, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
   29be0:	2103      	movs	r1, #3
   29be2:	4811      	ldr	r0, [pc, #68]	; (29c28 <clock_event_handler+0x7c>)
   29be4:	f012 f988 	bl	3bef8 <clkstarted_handle>
		break;
   29be8:	e7f9      	b.n	29bde <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   29bea:	2101      	movs	r1, #1
   29bec:	480e      	ldr	r0, [pc, #56]	; (29c28 <clock_event_handler+0x7c>)
   29bee:	f012 f983 	bl	3bef8 <clkstarted_handle>
		break;
   29bf2:	e7f4      	b.n	29bde <clock_event_handler+0x32>
			__ASSERT_NO_MSG(false);
   29bf4:	4c0d      	ldr	r4, [pc, #52]	; (29c2c <clock_event_handler+0x80>)
   29bf6:	f240 236e 	movw	r3, #622	; 0x26e
   29bfa:	4622      	mov	r2, r4
   29bfc:	490c      	ldr	r1, [pc, #48]	; (29c30 <clock_event_handler+0x84>)
   29bfe:	480d      	ldr	r0, [pc, #52]	; (29c34 <clock_event_handler+0x88>)
   29c00:	f00c fb48 	bl	36294 <assert_print>
   29c04:	f240 216e 	movw	r1, #622	; 0x26e
   29c08:	4620      	mov	r0, r4
   29c0a:	f00c fb3c 	bl	36286 <assert_post_action>
		__ASSERT_NO_MSG(0);
   29c0e:	4c07      	ldr	r4, [pc, #28]	; (29c2c <clock_event_handler+0x80>)
   29c10:	f240 2372 	movw	r3, #626	; 0x272
   29c14:	4622      	mov	r2, r4
   29c16:	4906      	ldr	r1, [pc, #24]	; (29c30 <clock_event_handler+0x84>)
   29c18:	4806      	ldr	r0, [pc, #24]	; (29c34 <clock_event_handler+0x88>)
   29c1a:	f00c fb3b 	bl	36294 <assert_print>
   29c1e:	f240 2172 	movw	r1, #626	; 0x272
   29c22:	4620      	mov	r0, r4
   29c24:	f00c fb2f 	bl	36286 <assert_post_action>
   29c28:	0003ef54 	.word	0x0003ef54
   29c2c:	00044750 	.word	0x00044750
   29c30:	0003f964 	.word	0x0003f964
   29c34:	0003f72c 	.word	0x0003f72c

00029c38 <lfclk_spinwait>:
{
   29c38:	b570      	push	{r4, r5, r6, lr}
   29c3a:	b082      	sub	sp, #8
   29c3c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   29c3e:	2801      	cmp	r0, #1
   29c40:	d106      	bne.n	29c50 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   29c42:	4b2e      	ldr	r3, [pc, #184]	; (29cfc <lfclk_spinwait+0xc4>)
   29c44:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   29c48:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   29c4c:	2b02      	cmp	r3, #2
   29c4e:	d034      	beq.n	29cba <lfclk_spinwait+0x82>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   29c50:	f014 fe31 	bl	3e8b6 <k_is_in_isr>
   29c54:	4604      	mov	r4, r0
   29c56:	b910      	cbnz	r0, 29c5e <lfclk_spinwait+0x26>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   29c58:	4b29      	ldr	r3, [pc, #164]	; (29d00 <lfclk_spinwait+0xc8>)
   29c5a:	781b      	ldrb	r3, [r3, #0]
   29c5c:	b973      	cbnz	r3, 29c7c <lfclk_spinwait+0x44>
	__asm__ volatile(
   29c5e:	f04f 0320 	mov.w	r3, #32
   29c62:	f3ef 8611 	mrs	r6, BASEPRI
   29c66:	f383 8812 	msr	BASEPRI_MAX, r3
   29c6a:	f3bf 8f6f 	isb	sy
   29c6e:	2401      	movs	r4, #1
	if (!isr_mode) {
   29c70:	b984      	cbnz	r4, 29c94 <lfclk_spinwait+0x5c>
    p_reg->INTENCLR = mask;
   29c72:	4b22      	ldr	r3, [pc, #136]	; (29cfc <lfclk_spinwait+0xc4>)
   29c74:	2202      	movs	r2, #2
   29c76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   29c7a:	e00b      	b.n	29c94 <lfclk_spinwait+0x5c>
	int key = isr_mode ? irq_lock() : 0;
   29c7c:	2600      	movs	r6, #0
   29c7e:	e7f7      	b.n	29c70 <lfclk_spinwait+0x38>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   29c80:	b1ec      	cbz	r4, 29cbe <lfclk_spinwait+0x86>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   29c82:	4630      	mov	r0, r6
   29c84:	f7ef fa2a 	bl	190dc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   29c88:	4b1c      	ldr	r3, [pc, #112]	; (29cfc <lfclk_spinwait+0xc4>)
   29c8a:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   29c8e:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   29c90:	2b01      	cmp	r3, #1
   29c92:	d018      	beq.n	29cc6 <lfclk_spinwait+0x8e>
   29c94:	f10d 0207 	add.w	r2, sp, #7
   29c98:	2100      	movs	r1, #0
   29c9a:	4818      	ldr	r0, [pc, #96]	; (29cfc <lfclk_spinwait+0xc4>)
   29c9c:	f7ff feaa 	bl	299f4 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   29ca0:	2800      	cmp	r0, #0
   29ca2:	d0ed      	beq.n	29c80 <lfclk_spinwait+0x48>
		 && ((type == target_type)
   29ca4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
   29ca8:	2b02      	cmp	r3, #2
   29caa:	d001      	beq.n	29cb0 <lfclk_spinwait+0x78>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   29cac:	2d01      	cmp	r5, #1
   29cae:	d1e7      	bne.n	29c80 <lfclk_spinwait+0x48>
	if (isr_mode) {
   29cb0:	b1f4      	cbz	r4, 29cf0 <lfclk_spinwait+0xb8>
	__asm__ volatile(
   29cb2:	f386 8811 	msr	BASEPRI, r6
   29cb6:	f3bf 8f6f 	isb	sy
}
   29cba:	b002      	add	sp, #8
   29cbc:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
   29cbe:	2001      	movs	r0, #1
   29cc0:	f012 f985 	bl	3bfce <k_msleep>
   29cc4:	e7e0      	b.n	29c88 <lfclk_spinwait+0x50>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   29cc6:	4b0d      	ldr	r3, [pc, #52]	; (29cfc <lfclk_spinwait+0xc4>)
   29cc8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   29ccc:	2b00      	cmp	r3, #0
   29cce:	d0e1      	beq.n	29c94 <lfclk_spinwait+0x5c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29cd0:	4b0a      	ldr	r3, [pc, #40]	; (29cfc <lfclk_spinwait+0xc4>)
   29cd2:	2200      	movs	r2, #0
   29cd4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   29cd8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   29cdc:	2202      	movs	r2, #2
   29cde:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29ce2:	4a08      	ldr	r2, [pc, #32]	; (29d04 <lfclk_spinwait+0xcc>)
   29ce4:	2120      	movs	r1, #32
   29ce6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29cea:	2201      	movs	r2, #1
   29cec:	609a      	str	r2, [r3, #8]
}
   29cee:	e7d1      	b.n	29c94 <lfclk_spinwait+0x5c>
    p_reg->INTENSET = mask;
   29cf0:	4b02      	ldr	r3, [pc, #8]	; (29cfc <lfclk_spinwait+0xc4>)
   29cf2:	2202      	movs	r2, #2
   29cf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   29cf8:	e7df      	b.n	29cba <lfclk_spinwait+0x82>
   29cfa:	bf00      	nop
   29cfc:	40005000 	.word	0x40005000
   29d00:	2000cabb 	.word	0x2000cabb
   29d04:	e000e100 	.word	0xe000e100

00029d08 <api_blocking_start>:
{
   29d08:	b500      	push	{lr}
   29d0a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   29d0c:	f8cd d000 	str.w	sp, [sp]
   29d10:	f8cd d004 	str.w	sp, [sp, #4]
   29d14:	2300      	movs	r3, #0
   29d16:	9302      	str	r3, [sp, #8]
   29d18:	2301      	movs	r3, #1
   29d1a:	9303      	str	r3, [sp, #12]
   29d1c:	ab04      	add	r3, sp, #16
   29d1e:	9304      	str	r3, [sp, #16]
   29d20:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   29d22:	466b      	mov	r3, sp
   29d24:	4a06      	ldr	r2, [pc, #24]	; (29d40 <api_blocking_start+0x38>)
   29d26:	f012 f915 	bl	3bf54 <api_start>
	if (err < 0) {
   29d2a:	2800      	cmp	r0, #0
   29d2c:	db05      	blt.n	29d3a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   29d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   29d32:	2300      	movs	r3, #0
   29d34:	4668      	mov	r0, sp
   29d36:	f008 f89b 	bl	31e70 <z_impl_k_sem_take>
}
   29d3a:	b007      	add	sp, #28
   29d3c:	f85d fb04 	ldr.w	pc, [sp], #4
   29d40:	0003bffb 	.word	0x0003bffb

00029d44 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   29d44:	b570      	push	{r4, r5, r6, lr}
   29d46:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   29d48:	2200      	movs	r2, #0
   29d4a:	2101      	movs	r1, #1
   29d4c:	2005      	movs	r0, #5
   29d4e:	f7ef fb3f 	bl	193d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   29d52:	4811      	ldr	r0, [pc, #68]	; (29d98 <clk_init+0x54>)
   29d54:	f004 fa4c 	bl	2e1f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   29d58:	4b10      	ldr	r3, [pc, #64]	; (29d9c <clk_init+0x58>)
   29d5a:	4298      	cmp	r0, r3
   29d5c:	d119      	bne.n	29d92 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   29d5e:	f004 fa6d 	bl	2e23c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   29d62:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   29d64:	2c03      	cmp	r4, #3
   29d66:	d812      	bhi.n	29d8e <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   29d68:	4621      	mov	r1, r4
   29d6a:	4630      	mov	r0, r6
   29d6c:	f012 f869 	bl	3be42 <get_sub_data>
   29d70:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
   29d72:	4621      	mov	r1, r4
   29d74:	4630      	mov	r0, r6
   29d76:	f012 f871 	bl	3be5c <get_onoff_manager>
   29d7a:	4909      	ldr	r1, [pc, #36]	; (29da0 <clk_init+0x5c>)
   29d7c:	f00c f81c 	bl	35db8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   29d80:	2800      	cmp	r0, #0
   29d82:	db05      	blt.n	29d90 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   29d84:	2301      	movs	r3, #1
   29d86:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   29d88:	441c      	add	r4, r3
   29d8a:	b2e4      	uxtb	r4, r4
   29d8c:	e7ea      	b.n	29d64 <clk_init+0x20>
	}

	return 0;
   29d8e:	2000      	movs	r0, #0
}
   29d90:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   29d92:	f06f 0004 	mvn.w	r0, #4
   29d96:	e7fb      	b.n	29d90 <clk_init+0x4c>
   29d98:	00029bad 	.word	0x00029bad
   29d9c:	0bad0000 	.word	0x0bad0000
   29da0:	000447b4 	.word	0x000447b4

00029da4 <z_nrf_clock_control_lf_on>:
{
   29da4:	b570      	push	{r4, r5, r6, lr}
   29da6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29da8:	4b1c      	ldr	r3, [pc, #112]	; (29e1c <z_nrf_clock_control_lf_on+0x78>)
   29daa:	2101      	movs	r1, #1
   29dac:	e8d3 2fef 	ldaex	r2, [r3]
   29db0:	e8c3 1fe0 	stlex	r0, r1, [r3]
   29db4:	2800      	cmp	r0, #0
   29db6:	d1f9      	bne.n	29dac <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
   29db8:	b142      	cbz	r2, 29dcc <z_nrf_clock_control_lf_on+0x28>
	switch (start_mode) {
   29dba:	b134      	cbz	r4, 29dca <z_nrf_clock_control_lf_on+0x26>
   29dbc:	1e63      	subs	r3, r4, #1
   29dbe:	b2db      	uxtb	r3, r3
   29dc0:	2b01      	cmp	r3, #1
   29dc2:	d81e      	bhi.n	29e02 <z_nrf_clock_control_lf_on+0x5e>
		lfclk_spinwait(start_mode);
   29dc4:	4620      	mov	r0, r4
   29dc6:	f7ff ff37 	bl	29c38 <lfclk_spinwait>
}
   29dca:	bd70      	pop	{r4, r5, r6, pc}
				get_onoff_manager(CLOCK_DEVICE,
   29dcc:	4814      	ldr	r0, [pc, #80]	; (29e20 <z_nrf_clock_control_lf_on+0x7c>)
   29dce:	f012 f845 	bl	3be5c <get_onoff_manager>
   29dd2:	4605      	mov	r5, r0
		sys_notify_init_spinwait(&cli.notify);
   29dd4:	4e13      	ldr	r6, [pc, #76]	; (29e24 <z_nrf_clock_control_lf_on+0x80>)
   29dd6:	4630      	mov	r0, r6
   29dd8:	f7ff fdf0 	bl	299bc <sys_notify_init_spinwait>
		err = onoff_request(mgr, &cli);
   29ddc:	1f31      	subs	r1, r6, #4
   29dde:	4628      	mov	r0, r5
   29de0:	f7ea ff52 	bl	14c88 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   29de4:	2800      	cmp	r0, #0
   29de6:	dae8      	bge.n	29dba <z_nrf_clock_control_lf_on+0x16>
   29de8:	4c0f      	ldr	r4, [pc, #60]	; (29e28 <z_nrf_clock_control_lf_on+0x84>)
   29dea:	f44f 730c 	mov.w	r3, #560	; 0x230
   29dee:	4622      	mov	r2, r4
   29df0:	490e      	ldr	r1, [pc, #56]	; (29e2c <z_nrf_clock_control_lf_on+0x88>)
   29df2:	480f      	ldr	r0, [pc, #60]	; (29e30 <z_nrf_clock_control_lf_on+0x8c>)
   29df4:	f00c fa4e 	bl	36294 <assert_print>
   29df8:	f44f 710c 	mov.w	r1, #560	; 0x230
   29dfc:	4620      	mov	r0, r4
   29dfe:	f00c fa42 	bl	36286 <assert_post_action>
		__ASSERT_NO_MSG(false);
   29e02:	4c09      	ldr	r4, [pc, #36]	; (29e28 <z_nrf_clock_control_lf_on+0x84>)
   29e04:	f240 2342 	movw	r3, #578	; 0x242
   29e08:	4622      	mov	r2, r4
   29e0a:	490a      	ldr	r1, [pc, #40]	; (29e34 <z_nrf_clock_control_lf_on+0x90>)
   29e0c:	4808      	ldr	r0, [pc, #32]	; (29e30 <z_nrf_clock_control_lf_on+0x8c>)
   29e0e:	f00c fa41 	bl	36294 <assert_print>
   29e12:	f240 2142 	movw	r1, #578	; 0x242
   29e16:	4620      	mov	r0, r4
   29e18:	f00c fa35 	bl	36286 <assert_post_action>
   29e1c:	2000c310 	.word	0x2000c310
   29e20:	0003ef54 	.word	0x0003ef54
   29e24:	2000c304 	.word	0x2000c304
   29e28:	00044750 	.word	0x00044750
   29e2c:	000410a0 	.word	0x000410a0
   29e30:	0003f72c 	.word	0x0003f72c
   29e34:	0003f964 	.word	0x0003f964

00029e38 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   29e38:	b510      	push	{r4, lr}
   29e3a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   29e3c:	280a      	cmp	r0, #10
   29e3e:	d006      	beq.n	29e4e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   29e40:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   29e42:	4806      	ldr	r0, [pc, #24]	; (29e5c <console_out+0x24>)
   29e44:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   29e46:	69db      	ldr	r3, [r3, #28]
   29e48:	4798      	blx	r3

	return c;
}
   29e4a:	4620      	mov	r0, r4
   29e4c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
   29e4e:	4803      	ldr	r0, [pc, #12]	; (29e5c <console_out+0x24>)
   29e50:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   29e52:	69db      	ldr	r3, [r3, #28]
   29e54:	210d      	movs	r1, #13
   29e56:	4798      	blx	r3
}
   29e58:	e7f2      	b.n	29e40 <console_out+0x8>
   29e5a:	bf00      	nop
   29e5c:	0003efcc 	.word	0x0003efcc

00029e60 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
   29e60:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   29e62:	4c04      	ldr	r4, [pc, #16]	; (29e74 <uart_console_hook_install+0x14>)
   29e64:	4620      	mov	r0, r4
   29e66:	f7f0 fea1 	bl	1abac <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   29e6a:	4620      	mov	r0, r4
   29e6c:	f7ea fafc 	bl	14468 <__printk_hook_install>
#endif
}
   29e70:	bd10      	pop	{r4, pc}
   29e72:	bf00      	nop
   29e74:	00029e39 	.word	0x00029e39

00029e78 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   29e78:	b508      	push	{r3, lr}
   29e7a:	4805      	ldr	r0, [pc, #20]	; (29e90 <uart_console_init+0x18>)
   29e7c:	f014 fccf 	bl	3e81e <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
   29e80:	b118      	cbz	r0, 29e8a <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
   29e82:	f7ff ffed 	bl	29e60 <uart_console_hook_install>

	return 0;
   29e86:	2000      	movs	r0, #0
}
   29e88:	bd08      	pop	{r3, pc}
		return -ENODEV;
   29e8a:	f06f 0012 	mvn.w	r0, #18
   29e8e:	e7fb      	b.n	29e88 <uart_console_init+0x10>
   29e90:	0003efcc 	.word	0x0003efcc

00029e94 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29e94:	b128      	cbz	r0, 29ea2 <get_dev+0xe>
   29e96:	2801      	cmp	r0, #1
   29e98:	d101      	bne.n	29e9e <get_dev+0xa>
   29e9a:	4803      	ldr	r0, [pc, #12]	; (29ea8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   29e9c:	4770      	bx	lr
	const struct device *dev = NULL;
   29e9e:	2000      	movs	r0, #0
   29ea0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   29ea2:	4802      	ldr	r0, [pc, #8]	; (29eac <get_dev+0x18>)
   29ea4:	4770      	bx	lr
   29ea6:	bf00      	nop
   29ea8:	0003ef6c 	.word	0x0003ef6c
   29eac:	0003ef84 	.word	0x0003ef84

00029eb0 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
   29eb0:	b570      	push	{r4, r5, r6, lr}
	__ASSERT(callback, "No callback!");
   29eb2:	b169      	cbz	r1, 29ed0 <gpio_manage_callback+0x20>
   29eb4:	4604      	mov	r4, r0
   29eb6:	4616      	mov	r6, r2
   29eb8:	460d      	mov	r5, r1
	__ASSERT(callback->handler, "No callback handler!");
   29eba:	684b      	ldr	r3, [r1, #4]
   29ebc:	b1b3      	cbz	r3, 29eec <gpio_manage_callback+0x3c>
	return list->head;
   29ebe:	6803      	ldr	r3, [r0, #0]

	if (!sys_slist_is_empty(callbacks)) {
   29ec0:	b313      	cbz	r3, 29f08 <gpio_manage_callback+0x58>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   29ec2:	f012 f8c4 	bl	3c04e <sys_slist_find_and_remove>
   29ec6:	bb50      	cbnz	r0, 29f1e <gpio_manage_callback+0x6e>
			if (!set) {
   29ec8:	b9fe      	cbnz	r6, 29f0a <gpio_manage_callback+0x5a>
				return -EINVAL;
   29eca:	f06f 0015 	mvn.w	r0, #21
   29ece:	e022      	b.n	29f16 <gpio_manage_callback+0x66>
	__ASSERT(callback, "No callback!");
   29ed0:	4c16      	ldr	r4, [pc, #88]	; (29f2c <gpio_manage_callback+0x7c>)
   29ed2:	232a      	movs	r3, #42	; 0x2a
   29ed4:	4622      	mov	r2, r4
   29ed6:	4916      	ldr	r1, [pc, #88]	; (29f30 <gpio_manage_callback+0x80>)
   29ed8:	4816      	ldr	r0, [pc, #88]	; (29f34 <gpio_manage_callback+0x84>)
   29eda:	f00c f9db 	bl	36294 <assert_print>
   29ede:	4816      	ldr	r0, [pc, #88]	; (29f38 <gpio_manage_callback+0x88>)
   29ee0:	f00c f9d8 	bl	36294 <assert_print>
   29ee4:	212a      	movs	r1, #42	; 0x2a
   29ee6:	4620      	mov	r0, r4
   29ee8:	f00c f9cd 	bl	36286 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   29eec:	4c0f      	ldr	r4, [pc, #60]	; (29f2c <gpio_manage_callback+0x7c>)
   29eee:	232b      	movs	r3, #43	; 0x2b
   29ef0:	4622      	mov	r2, r4
   29ef2:	4912      	ldr	r1, [pc, #72]	; (29f3c <gpio_manage_callback+0x8c>)
   29ef4:	480f      	ldr	r0, [pc, #60]	; (29f34 <gpio_manage_callback+0x84>)
   29ef6:	f00c f9cd 	bl	36294 <assert_print>
   29efa:	4811      	ldr	r0, [pc, #68]	; (29f40 <gpio_manage_callback+0x90>)
   29efc:	f00c f9ca 	bl	36294 <assert_print>
   29f00:	212b      	movs	r1, #43	; 0x2b
   29f02:	4620      	mov	r0, r4
   29f04:	f00c f9bf 	bl	36286 <assert_post_action>
			}
		}
	} else if (!set) {
   29f08:	b132      	cbz	r2, 29f18 <gpio_manage_callback+0x68>
   29f0a:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
   29f0c:	602b      	str	r3, [r5, #0]
	list->head = node;
   29f0e:	6025      	str	r5, [r4, #0]
	return list->tail;
   29f10:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   29f12:	b143      	cbz	r3, 29f26 <gpio_manage_callback+0x76>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   29f14:	2000      	movs	r0, #0
}
   29f16:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   29f18:	f06f 0015 	mvn.w	r0, #21
   29f1c:	e7fb      	b.n	29f16 <gpio_manage_callback+0x66>
	if (set) {
   29f1e:	2e00      	cmp	r6, #0
   29f20:	d1f3      	bne.n	29f0a <gpio_manage_callback+0x5a>
	return 0;
   29f22:	2000      	movs	r0, #0
   29f24:	e7f7      	b.n	29f16 <gpio_manage_callback+0x66>
	list->tail = node;
   29f26:	6065      	str	r5, [r4, #4]
   29f28:	2000      	movs	r0, #0
}
   29f2a:	e7f4      	b.n	29f16 <gpio_manage_callback+0x66>
   29f2c:	00044850 	.word	0x00044850
   29f30:	0003fc48 	.word	0x0003fc48
   29f34:	0003f72c 	.word	0x0003f72c
   29f38:	0004488c 	.word	0x0004488c
   29f3c:	0004489c 	.word	0x0004489c
   29f40:	000448b0 	.word	0x000448b0

00029f44 <nrf_gpio_pin_port_decode>:
 *                      that is relative to the port.
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   29f44:	b538      	push	{r3, r4, r5, lr}
   29f46:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29f48:	6804      	ldr	r4, [r0, #0]
   29f4a:	4620      	mov	r0, r4
   29f4c:	f012 f85a 	bl	3c004 <nrf_gpio_pin_present_check>
   29f50:	b140      	cbz	r0, 29f64 <nrf_gpio_pin_port_decode+0x20>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   29f52:	f004 031f 	and.w	r3, r4, #31
   29f56:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29f58:	0964      	lsrs	r4, r4, #5
   29f5a:	d01d      	beq.n	29f98 <nrf_gpio_pin_port_decode+0x54>
   29f5c:	2c01      	cmp	r4, #1
   29f5e:	d10e      	bne.n	29f7e <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   29f60:	480e      	ldr	r0, [pc, #56]	; (29f9c <nrf_gpio_pin_port_decode+0x58>)
}
   29f62:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   29f64:	4c0e      	ldr	r4, [pc, #56]	; (29fa0 <nrf_gpio_pin_port_decode+0x5c>)
   29f66:	f240 2347 	movw	r3, #583	; 0x247
   29f6a:	4622      	mov	r2, r4
   29f6c:	490d      	ldr	r1, [pc, #52]	; (29fa4 <nrf_gpio_pin_port_decode+0x60>)
   29f6e:	480e      	ldr	r0, [pc, #56]	; (29fa8 <nrf_gpio_pin_port_decode+0x64>)
   29f70:	f00c f990 	bl	36294 <assert_print>
   29f74:	f240 2147 	movw	r1, #583	; 0x247
   29f78:	4620      	mov	r0, r4
   29f7a:	f00c f984 	bl	36286 <assert_post_action>
            NRFX_ASSERT(0);
   29f7e:	4c08      	ldr	r4, [pc, #32]	; (29fa0 <nrf_gpio_pin_port_decode+0x5c>)
   29f80:	f44f 7313 	mov.w	r3, #588	; 0x24c
   29f84:	4622      	mov	r2, r4
   29f86:	4909      	ldr	r1, [pc, #36]	; (29fac <nrf_gpio_pin_port_decode+0x68>)
   29f88:	4807      	ldr	r0, [pc, #28]	; (29fa8 <nrf_gpio_pin_port_decode+0x64>)
   29f8a:	f00c f983 	bl	36294 <assert_print>
   29f8e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   29f92:	4620      	mov	r0, r4
   29f94:	f00c f977 	bl	36286 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   29f98:	4805      	ldr	r0, [pc, #20]	; (29fb0 <nrf_gpio_pin_port_decode+0x6c>)
   29f9a:	e7e2      	b.n	29f62 <nrf_gpio_pin_port_decode+0x1e>
   29f9c:	40842800 	.word	0x40842800
   29fa0:	000448c8 	.word	0x000448c8
   29fa4:	000448fc 	.word	0x000448fc
   29fa8:	0003f72c 	.word	0x0003f72c
   29fac:	0003f964 	.word	0x0003f964
   29fb0:	40842500 	.word	0x40842500

00029fb4 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   29fb4:	b570      	push	{r4, r5, r6, lr}
   29fb6:	460e      	mov	r6, r1
   29fb8:	4615      	mov	r5, r2
	return list->head;
   29fba:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   29fbc:	b121      	cbz	r1, 29fc8 <gpio_fire_callbacks+0x14>
	return node->next;
   29fbe:	680c      	ldr	r4, [r1, #0]
   29fc0:	b1ac      	cbz	r4, 29fee <gpio_fire_callbacks+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29fc2:	b9a1      	cbnz	r1, 29fee <gpio_fire_callbacks+0x3a>
   29fc4:	460c      	mov	r4, r1
   29fc6:	e012      	b.n	29fee <gpio_fire_callbacks+0x3a>
   29fc8:	460c      	mov	r4, r1
   29fca:	e010      	b.n	29fee <gpio_fire_callbacks+0x3a>
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   29fcc:	4c11      	ldr	r4, [pc, #68]	; (2a014 <gpio_fire_callbacks+0x60>)
   29fce:	234d      	movs	r3, #77	; 0x4d
   29fd0:	4622      	mov	r2, r4
   29fd2:	4911      	ldr	r1, [pc, #68]	; (2a018 <gpio_fire_callbacks+0x64>)
   29fd4:	4811      	ldr	r0, [pc, #68]	; (2a01c <gpio_fire_callbacks+0x68>)
   29fd6:	f00c f95d 	bl	36294 <assert_print>
   29fda:	4811      	ldr	r0, [pc, #68]	; (2a020 <gpio_fire_callbacks+0x6c>)
   29fdc:	f00c f95a 	bl	36294 <assert_print>
   29fe0:	214d      	movs	r1, #77	; 0x4d
   29fe2:	4620      	mov	r0, r4
   29fe4:	f00c f94f 	bl	36286 <assert_post_action>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   29fe8:	4623      	mov	r3, r4
   29fea:	4621      	mov	r1, r4
   29fec:	461c      	mov	r4, r3
   29fee:	b181      	cbz	r1, 2a012 <gpio_fire_callbacks+0x5e>
		if (cb->pin_mask & pins) {
   29ff0:	688a      	ldr	r2, [r1, #8]
   29ff2:	402a      	ands	r2, r5
   29ff4:	d004      	beq.n	2a000 <gpio_fire_callbacks+0x4c>
			__ASSERT(cb->handler, "No callback handler!");
   29ff6:	684b      	ldr	r3, [r1, #4]
   29ff8:	2b00      	cmp	r3, #0
   29ffa:	d0e7      	beq.n	29fcc <gpio_fire_callbacks+0x18>
			cb->handler(port, cb, cb->pin_mask & pins);
   29ffc:	4630      	mov	r0, r6
   29ffe:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a000:	2c00      	cmp	r4, #0
   2a002:	d0f1      	beq.n	29fe8 <gpio_fire_callbacks+0x34>
	return node->next;
   2a004:	6823      	ldr	r3, [r4, #0]
   2a006:	2b00      	cmp	r3, #0
   2a008:	d0ef      	beq.n	29fea <gpio_fire_callbacks+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a00a:	2c00      	cmp	r4, #0
   2a00c:	d1ed      	bne.n	29fea <gpio_fire_callbacks+0x36>
   2a00e:	4623      	mov	r3, r4
   2a010:	e7eb      	b.n	29fea <gpio_fire_callbacks+0x36>
		}
	}
}
   2a012:	bd70      	pop	{r4, r5, r6, pc}
   2a014:	00044850 	.word	0x00044850
   2a018:	00044920 	.word	0x00044920
   2a01c:	0003f72c 	.word	0x0003f72c
   2a020:	000448b0 	.word	0x000448b0

0002a024 <gpio_nrfx_pin_interrupt_configure>:
{
   2a024:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a026:	b085      	sub	sp, #20
   2a028:	460e      	mov	r6, r1
   2a02a:	4619      	mov	r1, r3
	return port->config;
   2a02c:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   2a02e:	7b1b      	ldrb	r3, [r3, #12]
   2a030:	f006 051f 	and.w	r5, r6, #31
   2a034:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   2a038:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
   2a03c:	d022      	beq.n	2a084 <gpio_nrfx_pin_interrupt_configure+0x60>
   2a03e:	4607      	mov	r7, r0
   2a040:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a042:	2300      	movs	r3, #0
   2a044:	9301      	str	r3, [sp, #4]
   2a046:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
   2a048:	4610      	mov	r0, r2
   2a04a:	f012 f883 	bl	3c154 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a04e:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
   2a052:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   2a054:	6899      	ldr	r1, [r3, #8]
   2a056:	40f1      	lsrs	r1, r6
   2a058:	f011 0f01 	tst.w	r1, #1
   2a05c:	d102      	bne.n	2a064 <gpio_nrfx_pin_interrupt_configure+0x40>
   2a05e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
   2a062:	d014      	beq.n	2a08e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2a064:	2300      	movs	r3, #0
   2a066:	aa01      	add	r2, sp, #4
   2a068:	4619      	mov	r1, r3
   2a06a:	4628      	mov	r0, r5
   2a06c:	f004 fc3e 	bl	2e8ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2a070:	4b16      	ldr	r3, [pc, #88]	; (2a0cc <gpio_nrfx_pin_interrupt_configure+0xa8>)
   2a072:	4298      	cmp	r0, r3
   2a074:	d126      	bne.n	2a0c4 <gpio_nrfx_pin_interrupt_configure+0xa0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   2a076:	2101      	movs	r1, #1
   2a078:	4628      	mov	r0, r5
   2a07a:	f004 fdad 	bl	2ebd8 <nrfx_gpiote_trigger_enable>
	return 0;
   2a07e:	2000      	movs	r0, #0
}
   2a080:	b005      	add	sp, #20
   2a082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   2a084:	4628      	mov	r0, r5
   2a086:	f004 fdff 	bl	2ec88 <nrfx_gpiote_trigger_disable>
		return 0;
   2a08a:	2000      	movs	r0, #0
   2a08c:	e7f8      	b.n	2a080 <gpio_nrfx_pin_interrupt_configure+0x5c>
	    (nrf_gpio_pin_dir_get(abs_pin) == NRF_GPIO_PIN_DIR_INPUT)) {
   2a08e:	4628      	mov	r0, r5
   2a090:	f012 f87c 	bl	3c18c <nrf_gpio_pin_dir_get>
	    (mode == GPIO_INT_MODE_EDGE) &&
   2a094:	2800      	cmp	r0, #0
   2a096:	d1e5      	bne.n	2a064 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2a098:	f10d 010f 	add.w	r1, sp, #15
   2a09c:	4628      	mov	r0, r5
   2a09e:	f004 fd2d 	bl	2eafc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2a0a2:	4b0b      	ldr	r3, [pc, #44]	; (2a0d0 <gpio_nrfx_pin_interrupt_configure+0xac>)
   2a0a4:	4298      	cmp	r0, r3
   2a0a6:	d003      	beq.n	2a0b0 <gpio_nrfx_pin_interrupt_configure+0x8c>
		trigger_config.p_in_channel = &ch;
   2a0a8:	f10d 030f 	add.w	r3, sp, #15
   2a0ac:	9302      	str	r3, [sp, #8]
   2a0ae:	e7d9      	b.n	2a064 <gpio_nrfx_pin_interrupt_configure+0x40>
			err = nrfx_gpiote_channel_alloc(&ch);
   2a0b0:	f10d 000f 	add.w	r0, sp, #15
   2a0b4:	f004 fd88 	bl	2ebc8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2a0b8:	4b04      	ldr	r3, [pc, #16]	; (2a0cc <gpio_nrfx_pin_interrupt_configure+0xa8>)
   2a0ba:	4298      	cmp	r0, r3
   2a0bc:	d0f4      	beq.n	2a0a8 <gpio_nrfx_pin_interrupt_configure+0x84>
				return -ENOMEM;
   2a0be:	f06f 000b 	mvn.w	r0, #11
   2a0c2:	e7dd      	b.n	2a080 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
   2a0c4:	f06f 0015 	mvn.w	r0, #21
   2a0c8:	e7da      	b.n	2a080 <gpio_nrfx_pin_interrupt_configure+0x5c>
   2a0ca:	bf00      	nop
   2a0cc:	0bad0000 	.word	0x0bad0000
   2a0d0:	0bad0004 	.word	0x0bad0004

0002a0d4 <gpio_nrfx_pin_configure>:
{
   2a0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a0d8:	b086      	sub	sp, #24
   2a0da:	460e      	mov	r6, r1
   2a0dc:	4614      	mov	r4, r2
	return port->config;
   2a0de:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a0e2:	f898 300c 	ldrb.w	r3, [r8, #12]
   2a0e6:	f001 051f 	and.w	r5, r1, #31
   2a0ea:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2a0ee:	f10d 0117 	add.w	r1, sp, #23
   2a0f2:	4628      	mov	r0, r5
   2a0f4:	f004 fd02 	bl	2eafc <nrfx_gpiote_channel_get>
   2a0f8:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2a0fa:	f414 3f40 	tst.w	r4, #196608	; 0x30000
   2a0fe:	d11c      	bne.n	2a13a <gpio_nrfx_pin_configure+0x66>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   2a100:	4628      	mov	r0, r5
   2a102:	f004 fde3 	bl	2eccc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2a106:	4b43      	ldr	r3, [pc, #268]	; (2a214 <gpio_nrfx_pin_configure+0x140>)
   2a108:	429f      	cmp	r7, r3
   2a10a:	d004      	beq.n	2a116 <gpio_nrfx_pin_configure+0x42>
		return 0;
   2a10c:	2700      	movs	r7, #0
}
   2a10e:	4638      	mov	r0, r7
   2a110:	b006      	add	sp, #24
   2a112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
   2a116:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2a11a:	f004 fd4d 	bl	2ebb8 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   2a11e:	4b3d      	ldr	r3, [pc, #244]	; (2a214 <gpio_nrfx_pin_configure+0x140>)
   2a120:	4298      	cmp	r0, r3
   2a122:	d0f3      	beq.n	2a10c <gpio_nrfx_pin_configure+0x38>
   2a124:	4c3c      	ldr	r4, [pc, #240]	; (2a218 <gpio_nrfx_pin_configure+0x144>)
   2a126:	236a      	movs	r3, #106	; 0x6a
   2a128:	4622      	mov	r2, r4
   2a12a:	493c      	ldr	r1, [pc, #240]	; (2a21c <gpio_nrfx_pin_configure+0x148>)
   2a12c:	483c      	ldr	r0, [pc, #240]	; (2a220 <gpio_nrfx_pin_configure+0x14c>)
   2a12e:	f00c f8b1 	bl	36294 <assert_print>
   2a132:	216a      	movs	r1, #106	; 0x6a
   2a134:	4620      	mov	r0, r4
   2a136:	f00c f8a6 	bl	36286 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2a13a:	2100      	movs	r1, #0
   2a13c:	9103      	str	r1, [sp, #12]
   2a13e:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2a140:	460b      	mov	r3, r1
   2a142:	aa03      	add	r2, sp, #12
   2a144:	4628      	mov	r0, r5
   2a146:	f004 fbd1 	bl	2e8ec <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2a14a:	4b32      	ldr	r3, [pc, #200]	; (2a214 <gpio_nrfx_pin_configure+0x140>)
   2a14c:	4298      	cmp	r0, r3
   2a14e:	d15d      	bne.n	2a20c <gpio_nrfx_pin_configure+0x138>
	if (free_ch) {
   2a150:	429f      	cmp	r7, r3
   2a152:	d02d      	beq.n	2a1b0 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_OUTPUT) {
   2a154:	f414 3f00 	tst.w	r4, #131072	; 0x20000
   2a158:	d045      	beq.n	2a1e6 <gpio_nrfx_pin_configure+0x112>
		int rv = get_drive(flags, &drive);
   2a15a:	f10d 0103 	add.w	r1, sp, #3
   2a15e:	4620      	mov	r0, r4
   2a160:	f011 ff85 	bl	3c06e <get_drive>
		if (rv != 0) {
   2a164:	4607      	mov	r7, r0
   2a166:	2800      	cmp	r0, #0
   2a168:	d1d1      	bne.n	2a10e <gpio_nrfx_pin_configure+0x3a>
		nrfx_gpiote_output_config_t output_config = {
   2a16a:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2a16e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2a172:	f414 3f80 	tst.w	r4, #65536	; 0x10000
   2a176:	bf0c      	ite	eq
   2a178:	2301      	moveq	r3, #1
   2a17a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   2a17c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   2a180:	4620      	mov	r0, r4
   2a182:	f011 ffb7 	bl	3c0f4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   2a186:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   2a18a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   2a18e:	d021      	beq.n	2a1d4 <gpio_nrfx_pin_configure+0x100>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   2a190:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a194:	2301      	movs	r3, #1
   2a196:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   2a198:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   2a19a:	2200      	movs	r2, #0
   2a19c:	a901      	add	r1, sp, #4
   2a19e:	4628      	mov	r0, r5
   2a1a0:	f004 fc3a 	bl	2ea18 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2a1a4:	4b1b      	ldr	r3, [pc, #108]	; (2a214 <gpio_nrfx_pin_configure+0x140>)
   2a1a6:	4298      	cmp	r0, r3
   2a1a8:	d0b1      	beq.n	2a10e <gpio_nrfx_pin_configure+0x3a>
   2a1aa:	f06f 0715 	mvn.w	r7, #21
   2a1ae:	e7ae      	b.n	2a10e <gpio_nrfx_pin_configure+0x3a>
		err = nrfx_gpiote_channel_free(ch);
   2a1b0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   2a1b4:	f004 fd00 	bl	2ebb8 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   2a1b8:	4b16      	ldr	r3, [pc, #88]	; (2a214 <gpio_nrfx_pin_configure+0x140>)
   2a1ba:	4298      	cmp	r0, r3
   2a1bc:	d0ca      	beq.n	2a154 <gpio_nrfx_pin_configure+0x80>
   2a1be:	4c16      	ldr	r4, [pc, #88]	; (2a218 <gpio_nrfx_pin_configure+0x144>)
   2a1c0:	237c      	movs	r3, #124	; 0x7c
   2a1c2:	4622      	mov	r2, r4
   2a1c4:	4915      	ldr	r1, [pc, #84]	; (2a21c <gpio_nrfx_pin_configure+0x148>)
   2a1c6:	4816      	ldr	r0, [pc, #88]	; (2a220 <gpio_nrfx_pin_configure+0x14c>)
   2a1c8:	f00c f864 	bl	36294 <assert_print>
   2a1cc:	217c      	movs	r1, #124	; 0x7c
   2a1ce:	4620      	mov	r0, r4
   2a1d0:	f00c f859 	bl	36286 <assert_post_action>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   2a1d4:	f414 2f80 	tst.w	r4, #262144	; 0x40000
   2a1d8:	d0df      	beq.n	2a19a <gpio_nrfx_pin_configure+0xc6>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2a1da:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2a1de:	2301      	movs	r3, #1
   2a1e0:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
   2a1e2:	60d3      	str	r3, [r2, #12]
}
   2a1e4:	e7d9      	b.n	2a19a <gpio_nrfx_pin_configure+0xc6>
		.pull = get_pull(flags)
   2a1e6:	4620      	mov	r0, r4
   2a1e8:	f011 ff84 	bl	3c0f4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   2a1ec:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2a1f0:	2300      	movs	r3, #0
   2a1f2:	461a      	mov	r2, r3
   2a1f4:	a902      	add	r1, sp, #8
   2a1f6:	4628      	mov	r0, r5
   2a1f8:	f004 fb78 	bl	2e8ec <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2a1fc:	4b05      	ldr	r3, [pc, #20]	; (2a214 <gpio_nrfx_pin_configure+0x140>)
   2a1fe:	4298      	cmp	r0, r3
   2a200:	d101      	bne.n	2a206 <gpio_nrfx_pin_configure+0x132>
   2a202:	2700      	movs	r7, #0
   2a204:	e783      	b.n	2a10e <gpio_nrfx_pin_configure+0x3a>
   2a206:	f06f 0715 	mvn.w	r7, #21
   2a20a:	e780      	b.n	2a10e <gpio_nrfx_pin_configure+0x3a>
		return -EINVAL;
   2a20c:	f06f 0715 	mvn.w	r7, #21
   2a210:	e77d      	b.n	2a10e <gpio_nrfx_pin_configure+0x3a>
   2a212:	bf00      	nop
   2a214:	0bad0000 	.word	0x0bad0000
   2a218:	0004492c 	.word	0x0004492c
   2a21c:	00040d14 	.word	0x00040d14
   2a220:	0003f72c 	.word	0x0003f72c

0002a224 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2a224:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2a226:	f004 fcbd 	bl	2eba4 <nrfx_gpiote_is_init>
   2a22a:	b108      	cbz	r0, 2a230 <gpio_nrfx_init+0xc>
		return 0;
   2a22c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   2a22e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   2a230:	f004 fc8e 	bl	2eb50 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   2a234:	4b08      	ldr	r3, [pc, #32]	; (2a258 <gpio_nrfx_init+0x34>)
   2a236:	4298      	cmp	r0, r3
   2a238:	d10a      	bne.n	2a250 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2a23a:	2100      	movs	r1, #0
   2a23c:	4807      	ldr	r0, [pc, #28]	; (2a25c <gpio_nrfx_init+0x38>)
   2a23e:	f004 fc57 	bl	2eaf0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   2a242:	2200      	movs	r2, #0
   2a244:	2105      	movs	r1, #5
   2a246:	202f      	movs	r0, #47	; 0x2f
   2a248:	f7ef f8c2 	bl	193d0 <z_arm_irq_priority_set>
	return 0;
   2a24c:	2000      	movs	r0, #0
   2a24e:	e7ee      	b.n	2a22e <gpio_nrfx_init+0xa>
		return -EIO;
   2a250:	f06f 0004 	mvn.w	r0, #4
   2a254:	e7eb      	b.n	2a22e <gpio_nrfx_init+0xa>
   2a256:	bf00      	nop
   2a258:	0bad0000 	.word	0x0bad0000
   2a25c:	0003c1ab 	.word	0x0003c1ab

0002a260 <get_nrf_spim_frequency>:

static inline nrf_spim_frequency_t get_nrf_spim_frequency(uint32_t frequency)
{
	/* Get the highest supported frequency not exceeding the requested one.
	 */
	if (frequency < 250000) {
   2a260:	4b19      	ldr	r3, [pc, #100]	; (2a2c8 <get_nrf_spim_frequency+0x68>)
   2a262:	4298      	cmp	r0, r3
   2a264:	d917      	bls.n	2a296 <get_nrf_spim_frequency+0x36>
		return NRF_SPIM_FREQ_125K;
	} else if (frequency < 500000) {
   2a266:	4b19      	ldr	r3, [pc, #100]	; (2a2cc <get_nrf_spim_frequency+0x6c>)
   2a268:	4298      	cmp	r0, r3
   2a26a:	d917      	bls.n	2a29c <get_nrf_spim_frequency+0x3c>
		return NRF_SPIM_FREQ_250K;
	} else if (frequency < 1000000) {
   2a26c:	4b18      	ldr	r3, [pc, #96]	; (2a2d0 <get_nrf_spim_frequency+0x70>)
   2a26e:	4298      	cmp	r0, r3
   2a270:	d917      	bls.n	2a2a2 <get_nrf_spim_frequency+0x42>
		return NRF_SPIM_FREQ_500K;
	} else if (frequency < 2000000) {
   2a272:	4b18      	ldr	r3, [pc, #96]	; (2a2d4 <get_nrf_spim_frequency+0x74>)
   2a274:	4298      	cmp	r0, r3
   2a276:	d917      	bls.n	2a2a8 <get_nrf_spim_frequency+0x48>
		return NRF_SPIM_FREQ_1M;
	} else if (frequency < 4000000) {
   2a278:	4b17      	ldr	r3, [pc, #92]	; (2a2d8 <get_nrf_spim_frequency+0x78>)
   2a27a:	4298      	cmp	r0, r3
   2a27c:	d917      	bls.n	2a2ae <get_nrf_spim_frequency+0x4e>
		return NRF_SPIM_FREQ_2M;
	} else if (frequency < 8000000) {
   2a27e:	4b17      	ldr	r3, [pc, #92]	; (2a2dc <get_nrf_spim_frequency+0x7c>)
   2a280:	4298      	cmp	r0, r3
   2a282:	d317      	bcc.n	2a2b4 <get_nrf_spim_frequency+0x54>
		return NRF_SPIM_FREQ_4M;
/* Only the devices with HS-SPI can use SPI clock higher than 8 MHz and
 * have SPIM_FREQUENCY_FREQUENCY_M32 defined in their own bitfields.h
 */
#if defined(SPIM_FREQUENCY_FREQUENCY_M32)
	} else if (frequency < 16000000) {
   2a284:	4b16      	ldr	r3, [pc, #88]	; (2a2e0 <get_nrf_spim_frequency+0x80>)
   2a286:	4298      	cmp	r0, r3
   2a288:	d317      	bcc.n	2a2ba <get_nrf_spim_frequency+0x5a>
		return NRF_SPIM_FREQ_8M;
	} else if (frequency < 32000000) {
   2a28a:	4b16      	ldr	r3, [pc, #88]	; (2a2e4 <get_nrf_spim_frequency+0x84>)
   2a28c:	4298      	cmp	r0, r3
   2a28e:	d217      	bcs.n	2a2c0 <get_nrf_spim_frequency+0x60>
		return NRF_SPIM_FREQ_16M;
   2a290:	f04f 6020 	mov.w	r0, #167772160	; 0xa000000
   2a294:	4770      	bx	lr
		return NRF_SPIM_FREQ_125K;
   2a296:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
   2a29a:	4770      	bx	lr
		return NRF_SPIM_FREQ_250K;
   2a29c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
   2a2a0:	4770      	bx	lr
		return NRF_SPIM_FREQ_500K;
   2a2a2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   2a2a6:	4770      	bx	lr
		return NRF_SPIM_FREQ_1M;
   2a2a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   2a2ac:	4770      	bx	lr
		return NRF_SPIM_FREQ_2M;
   2a2ae:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
   2a2b2:	4770      	bx	lr
		return NRF_SPIM_FREQ_4M;
   2a2b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   2a2b8:	4770      	bx	lr
		return NRF_SPIM_FREQ_8M;
   2a2ba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2a2be:	4770      	bx	lr
	} else {
		return NRF_SPIM_FREQ_32M;
   2a2c0:	f04f 50a0 	mov.w	r0, #335544320	; 0x14000000
#else
	} else {
		return NRF_SPIM_FREQ_8M;
#endif
	}
}
   2a2c4:	4770      	bx	lr
   2a2c6:	bf00      	nop
   2a2c8:	0003d08f 	.word	0x0003d08f
   2a2cc:	0007a11f 	.word	0x0007a11f
   2a2d0:	000f423f 	.word	0x000f423f
   2a2d4:	001e847f 	.word	0x001e847f
   2a2d8:	003d08ff 	.word	0x003d08ff
   2a2dc:	007a1200 	.word	0x007a1200
   2a2e0:	00f42400 	.word	0x00f42400
   2a2e4:	01e84800 	.word	0x01e84800

0002a2e8 <gpio_pin_set_raw>:
{
   2a2e8:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
   2a2ea:	6843      	ldr	r3, [r0, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a2ec:	681c      	ldr	r4, [r3, #0]
   2a2ee:	2301      	movs	r3, #1
   2a2f0:	fa03 f101 	lsl.w	r1, r3, r1
   2a2f4:	420c      	tst	r4, r1
   2a2f6:	d004      	beq.n	2a302 <gpio_pin_set_raw+0x1a>
	if (value != 0)	{
   2a2f8:	b19a      	cbz	r2, 2a322 <gpio_pin_set_raw+0x3a>
	const struct gpio_driver_api *api =
   2a2fa:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2a2fc:	68db      	ldr	r3, [r3, #12]
   2a2fe:	4798      	blx	r3
}
   2a300:	bd10      	pop	{r4, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a302:	4c0a      	ldr	r4, [pc, #40]	; (2a32c <gpio_pin_set_raw+0x44>)
   2a304:	f240 5314 	movw	r3, #1300	; 0x514
   2a308:	4622      	mov	r2, r4
   2a30a:	4909      	ldr	r1, [pc, #36]	; (2a330 <gpio_pin_set_raw+0x48>)
   2a30c:	4809      	ldr	r0, [pc, #36]	; (2a334 <gpio_pin_set_raw+0x4c>)
   2a30e:	f00b ffc1 	bl	36294 <assert_print>
   2a312:	4809      	ldr	r0, [pc, #36]	; (2a338 <gpio_pin_set_raw+0x50>)
   2a314:	f00b ffbe 	bl	36294 <assert_print>
   2a318:	f240 5114 	movw	r1, #1300	; 0x514
   2a31c:	4620      	mov	r0, r4
   2a31e:	f00b ffb2 	bl	36286 <assert_post_action>
	const struct gpio_driver_api *api =
   2a322:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2a324:	691b      	ldr	r3, [r3, #16]
   2a326:	4798      	blx	r3
	return ret;
   2a328:	e7ea      	b.n	2a300 <gpio_pin_set_raw+0x18>
   2a32a:	bf00      	nop
   2a32c:	0003f6b8 	.word	0x0003f6b8
   2a330:	0003f6ec 	.word	0x0003f6ec
   2a334:	0003f72c 	.word	0x0003f72c
   2a338:	0003f74c 	.word	0x0003f74c

0002a33c <gpio_pin_set>:
{
   2a33c:	b538      	push	{r3, r4, r5, lr}
	__unused const struct gpio_driver_config *const cfg =
   2a33e:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   2a340:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a342:	681c      	ldr	r4, [r3, #0]
   2a344:	2301      	movs	r3, #1
   2a346:	408b      	lsls	r3, r1
   2a348:	421c      	tst	r4, r3
   2a34a:	d008      	beq.n	2a35e <gpio_pin_set+0x22>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2a34c:	682c      	ldr	r4, [r5, #0]
   2a34e:	4223      	tst	r3, r4
   2a350:	d002      	beq.n	2a358 <gpio_pin_set+0x1c>
		value = (value != 0) ? 0 : 1;
   2a352:	fab2 f282 	clz	r2, r2
   2a356:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2a358:	f7ff ffc6 	bl	2a2e8 <gpio_pin_set_raw>
}
   2a35c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a35e:	4c08      	ldr	r4, [pc, #32]	; (2a380 <gpio_pin_set+0x44>)
   2a360:	f240 533d 	movw	r3, #1341	; 0x53d
   2a364:	4622      	mov	r2, r4
   2a366:	4907      	ldr	r1, [pc, #28]	; (2a384 <gpio_pin_set+0x48>)
   2a368:	4807      	ldr	r0, [pc, #28]	; (2a388 <gpio_pin_set+0x4c>)
   2a36a:	f00b ff93 	bl	36294 <assert_print>
   2a36e:	4807      	ldr	r0, [pc, #28]	; (2a38c <gpio_pin_set+0x50>)
   2a370:	f00b ff90 	bl	36294 <assert_print>
   2a374:	f240 513d 	movw	r1, #1341	; 0x53d
   2a378:	4620      	mov	r0, r4
   2a37a:	f00b ff84 	bl	36286 <assert_post_action>
   2a37e:	bf00      	nop
   2a380:	0003f6b8 	.word	0x0003f6b8
   2a384:	0003f6ec 	.word	0x0003f6ec
   2a388:	0003f72c 	.word	0x0003f72c
   2a38c:	0003f74c 	.word	0x0003f74c

0002a390 <z_impl_gpio_pin_configure>:
{
   2a390:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   2a392:	6885      	ldr	r5, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
   2a394:	6846      	ldr	r6, [r0, #4]
	struct gpio_driver_data *data =
   2a396:	6904      	ldr	r4, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   2a398:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
   2a39c:	d132      	bne.n	2a404 <z_impl_gpio_pin_configure+0x74>
   2a39e:	4613      	mov	r3, r2
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2a3a0:	f002 0230 	and.w	r2, r2, #48	; 0x30
   2a3a4:	2a30      	cmp	r2, #48	; 0x30
   2a3a6:	d03d      	beq.n	2a424 <z_impl_gpio_pin_configure+0x94>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   2a3a8:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   2a3ac:	2a02      	cmp	r2, #2
   2a3ae:	d049      	beq.n	2a444 <z_impl_gpio_pin_configure+0xb4>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   2a3b0:	f003 0206 	and.w	r2, r3, #6
   2a3b4:	2a04      	cmp	r2, #4
   2a3b6:	d055      	beq.n	2a464 <z_impl_gpio_pin_configure+0xd4>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2a3b8:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   2a3bc:	d002      	beq.n	2a3c4 <z_impl_gpio_pin_configure+0x34>
   2a3be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2a3c2:	d05c      	beq.n	2a47e <z_impl_gpio_pin_configure+0xee>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2a3c4:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   2a3c8:	d069      	beq.n	2a49e <z_impl_gpio_pin_configure+0x10e>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2a3ca:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   2a3ce:	d005      	beq.n	2a3dc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2a3d0:	b122      	cbz	r2, 2a3dc <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2a3d2:	f013 0f01 	tst.w	r3, #1
   2a3d6:	d001      	beq.n	2a3dc <z_impl_gpio_pin_configure+0x4c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2a3d8:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2a3dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a3e0:	6836      	ldr	r6, [r6, #0]
   2a3e2:	f04f 0c01 	mov.w	ip, #1
   2a3e6:	fa0c fc01 	lsl.w	ip, ip, r1
   2a3ea:	ea16 0f0c 	tst.w	r6, ip
   2a3ee:	d066      	beq.n	2a4be <z_impl_gpio_pin_configure+0x12e>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2a3f0:	f013 0f01 	tst.w	r3, #1
   2a3f4:	d073      	beq.n	2a4de <z_impl_gpio_pin_configure+0x14e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2a3f6:	6823      	ldr	r3, [r4, #0]
   2a3f8:	ea4c 0303 	orr.w	r3, ip, r3
   2a3fc:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2a3fe:	682b      	ldr	r3, [r5, #0]
   2a400:	4798      	blx	r3
}
   2a402:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   2a404:	4c38      	ldr	r4, [pc, #224]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a406:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   2a40a:	4622      	mov	r2, r4
   2a40c:	4937      	ldr	r1, [pc, #220]	; (2a4ec <z_impl_gpio_pin_configure+0x15c>)
   2a40e:	4838      	ldr	r0, [pc, #224]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a410:	f00b ff40 	bl	36294 <assert_print>
   2a414:	4837      	ldr	r0, [pc, #220]	; (2a4f4 <z_impl_gpio_pin_configure+0x164>)
   2a416:	f00b ff3d 	bl	36294 <assert_print>
   2a41a:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   2a41e:	4620      	mov	r0, r4
   2a420:	f00b ff31 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2a424:	4c30      	ldr	r4, [pc, #192]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a426:	f240 23b7 	movw	r3, #695	; 0x2b7
   2a42a:	4622      	mov	r2, r4
   2a42c:	4932      	ldr	r1, [pc, #200]	; (2a4f8 <z_impl_gpio_pin_configure+0x168>)
   2a42e:	4830      	ldr	r0, [pc, #192]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a430:	f00b ff30 	bl	36294 <assert_print>
   2a434:	4831      	ldr	r0, [pc, #196]	; (2a4fc <z_impl_gpio_pin_configure+0x16c>)
   2a436:	f00b ff2d 	bl	36294 <assert_print>
   2a43a:	f240 21b7 	movw	r1, #695	; 0x2b7
   2a43e:	4620      	mov	r0, r4
   2a440:	f00b ff21 	bl	36286 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   2a444:	4c28      	ldr	r4, [pc, #160]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a446:	f240 23bb 	movw	r3, #699	; 0x2bb
   2a44a:	4622      	mov	r2, r4
   2a44c:	492c      	ldr	r1, [pc, #176]	; (2a500 <z_impl_gpio_pin_configure+0x170>)
   2a44e:	4828      	ldr	r0, [pc, #160]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a450:	f00b ff20 	bl	36294 <assert_print>
   2a454:	482b      	ldr	r0, [pc, #172]	; (2a504 <z_impl_gpio_pin_configure+0x174>)
   2a456:	f00b ff1d 	bl	36294 <assert_print>
   2a45a:	f240 21bb 	movw	r1, #699	; 0x2bb
   2a45e:	4620      	mov	r0, r4
   2a460:	f00b ff11 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   2a464:	4c20      	ldr	r4, [pc, #128]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a466:	f240 23bf 	movw	r3, #703	; 0x2bf
   2a46a:	4622      	mov	r2, r4
   2a46c:	4926      	ldr	r1, [pc, #152]	; (2a508 <z_impl_gpio_pin_configure+0x178>)
   2a46e:	4820      	ldr	r0, [pc, #128]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a470:	f00b ff10 	bl	36294 <assert_print>
   2a474:	f240 21bf 	movw	r1, #703	; 0x2bf
   2a478:	4620      	mov	r0, r4
   2a47a:	f00b ff04 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2a47e:	4c1a      	ldr	r4, [pc, #104]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a480:	f240 23c2 	movw	r3, #706	; 0x2c2
   2a484:	4622      	mov	r2, r4
   2a486:	4921      	ldr	r1, [pc, #132]	; (2a50c <z_impl_gpio_pin_configure+0x17c>)
   2a488:	4819      	ldr	r0, [pc, #100]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a48a:	f00b ff03 	bl	36294 <assert_print>
   2a48e:	4820      	ldr	r0, [pc, #128]	; (2a510 <z_impl_gpio_pin_configure+0x180>)
   2a490:	f00b ff00 	bl	36294 <assert_print>
   2a494:	f240 21c2 	movw	r1, #706	; 0x2c2
   2a498:	4620      	mov	r0, r4
   2a49a:	f00b fef4 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2a49e:	4c12      	ldr	r4, [pc, #72]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a4a0:	f240 23c6 	movw	r3, #710	; 0x2c6
   2a4a4:	4622      	mov	r2, r4
   2a4a6:	491b      	ldr	r1, [pc, #108]	; (2a514 <z_impl_gpio_pin_configure+0x184>)
   2a4a8:	4811      	ldr	r0, [pc, #68]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a4aa:	f00b fef3 	bl	36294 <assert_print>
   2a4ae:	481a      	ldr	r0, [pc, #104]	; (2a518 <z_impl_gpio_pin_configure+0x188>)
   2a4b0:	f00b fef0 	bl	36294 <assert_print>
   2a4b4:	f240 21c6 	movw	r1, #710	; 0x2c6
   2a4b8:	4620      	mov	r0, r4
   2a4ba:	f00b fee4 	bl	36286 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a4be:	4c0a      	ldr	r4, [pc, #40]	; (2a4e8 <z_impl_gpio_pin_configure+0x158>)
   2a4c0:	f240 23d2 	movw	r3, #722	; 0x2d2
   2a4c4:	4622      	mov	r2, r4
   2a4c6:	4915      	ldr	r1, [pc, #84]	; (2a51c <z_impl_gpio_pin_configure+0x18c>)
   2a4c8:	4809      	ldr	r0, [pc, #36]	; (2a4f0 <z_impl_gpio_pin_configure+0x160>)
   2a4ca:	f00b fee3 	bl	36294 <assert_print>
   2a4ce:	4814      	ldr	r0, [pc, #80]	; (2a520 <z_impl_gpio_pin_configure+0x190>)
   2a4d0:	f00b fee0 	bl	36294 <assert_print>
   2a4d4:	f240 21d2 	movw	r1, #722	; 0x2d2
   2a4d8:	4620      	mov	r0, r4
   2a4da:	f00b fed4 	bl	36286 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2a4de:	6823      	ldr	r3, [r4, #0]
   2a4e0:	ea23 030c 	bic.w	r3, r3, ip
   2a4e4:	6023      	str	r3, [r4, #0]
   2a4e6:	e78a      	b.n	2a3fe <z_impl_gpio_pin_configure+0x6e>
   2a4e8:	0003f6b8 	.word	0x0003f6b8
   2a4ec:	0003f760 	.word	0x0003f760
   2a4f0:	0003f72c 	.word	0x0003f72c
   2a4f4:	0003f7c0 	.word	0x0003f7c0
   2a4f8:	0003f7e4 	.word	0x0003f7e4
   2a4fc:	0003f820 	.word	0x0003f820
   2a500:	0003f860 	.word	0x0003f860
   2a504:	0003f898 	.word	0x0003f898
   2a508:	0003f8ec 	.word	0x0003f8ec
   2a50c:	0003f920 	.word	0x0003f920
   2a510:	0003f968 	.word	0x0003f968
   2a514:	0003f9a4 	.word	0x0003f9a4
   2a518:	0003f9e8 	.word	0x0003f9e8
   2a51c:	0003f6ec 	.word	0x0003f6ec
   2a520:	0003f74c 	.word	0x0003f74c

0002a524 <configure>:
	}
}

static int configure(const struct device *dev,
		     const struct spi_config *spi_cfg)
{
   2a524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a528:	b0a1      	sub	sp, #132	; 0x84
   2a52a:	af00      	add	r7, sp, #0
   2a52c:	460c      	mov	r4, r1
	struct spi_nrfx_data *dev_data = dev->data;
   2a52e:	6905      	ldr	r5, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   2a530:	6846      	ldr	r6, [r0, #4]
	struct spi_context *ctx = &dev_data->ctx;
	uint32_t max_freq = dev_config->max_freq;
   2a532:	f8d6 9008 	ldr.w	r9, [r6, #8]
	nrfx_spim_config_t config;
	nrfx_err_t result;

	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   2a536:	f895 806d 	ldrb.w	r8, [r5, #109]	; 0x6d
   2a53a:	f1b8 0f00 	cmp.w	r8, #0
   2a53e:	d003      	beq.n	2a548 <configure+0x24>
	._ctx_name.num_cs_gpios = DT_PROP_LEN_OR(_node_id, cs_gpios, 0),

static inline bool spi_context_configured(struct spi_context *ctx,
					  const struct spi_config *config)
{
	return !!(ctx->config == config);
   2a540:	682b      	ldr	r3, [r5, #0]
   2a542:	428b      	cmp	r3, r1
   2a544:	f000 819a 	beq.w	2a87c <configure+0x358>
		/* Already configured. No need to do it again. */
		return 0;
	}

	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   2a548:	88a3      	ldrh	r3, [r4, #4]
   2a54a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   2a54e:	d158      	bne.n	2a602 <configure+0xde>
		LOG_ERR("Half-duplex not supported");
		return -ENOTSUP;
	}

	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   2a550:	f013 0f01 	tst.w	r3, #1
   2a554:	d17a      	bne.n	2a64c <configure+0x128>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
		return -EINVAL;
	}

	if (spi_cfg->operation & SPI_MODE_LOOP) {
   2a556:	f013 0f08 	tst.w	r3, #8
   2a55a:	f040 80cd 	bne.w	2a6f8 <configure+0x1d4>
	    (spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
		LOG_ERR("Only single line mode is supported");
		return -EINVAL;
	}

	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   2a55e:	f3c3 1345 	ubfx	r3, r3, #5, #6
   2a562:	2b08      	cmp	r3, #8
   2a564:	f040 80ed 	bne.w	2a742 <configure+0x21e>
		LOG_ERR("Word sizes other than 8 bits are not supported");
		return -EINVAL;
	}

	if (spi_cfg->frequency < 125000) {
   2a568:	6822      	ldr	r2, [r4, #0]
   2a56a:	4bc5      	ldr	r3, [pc, #788]	; (2a880 <configure+0x35c>)
   2a56c:	429a      	cmp	r2, r3
   2a56e:	f240 810d 	bls.w	2a78c <configure+0x268>
#if defined(CONFIG_SOC_NRF5340_CPUAPP)
	/* On nRF5340, the 32 Mbps speed is supported by the application core
	 * when it is running at 128 MHz (see the Timing specifications section
	 * in the nRF5340 PS).
	 */
	if (max_freq > 16000000 &&
   2a572:	4bc4      	ldr	r3, [pc, #784]	; (2a884 <configure+0x360>)
   2a574:	4599      	cmp	r9, r3
   2a576:	d907      	bls.n	2a588 <configure+0x64>
                        CLOCK_HFCLKCTRL_HCLK_Msk);
}

NRF_STATIC_INLINE nrf_clock_hfclk_div_t nrf_clock_hfclk_div_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_hfclk_div_t)((p_reg->HFCLKCTRL & CLOCK_HFCLKCTRL_HCLK_Msk)
   2a578:	4bc3      	ldr	r3, [pc, #780]	; (2a888 <configure+0x364>)
   2a57a:	f8d3 3558 	ldr.w	r3, [r3, #1368]	; 0x558
   2a57e:	f013 0f03 	tst.w	r3, #3
   2a582:	d001      	beq.n	2a588 <configure+0x64>
	    nrf_clock_hfclk_div_get(NRF_CLOCK) != NRF_CLOCK_HFCLK_DIV_1) {
		max_freq = 16000000;
   2a584:	f8df 92fc 	ldr.w	r9, [pc, #764]	; 2a884 <configure+0x360>
	}
#endif

	config = dev_config->def_config;
   2a588:	f107 0c08 	add.w	ip, r7, #8
   2a58c:	f106 0e0c 	add.w	lr, r6, #12
   2a590:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   2a594:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2a598:	e89e 0003 	ldmia.w	lr, {r0, r1}
   2a59c:	e88c 0003 	stmia.w	ip, {r0, r1}

	/* Limit the frequency to that supported by the SPIM instance. */
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
   2a5a0:	6820      	ldr	r0, [r4, #0]
   2a5a2:	4548      	cmp	r0, r9
   2a5a4:	bf28      	it	cs
   2a5a6:	4648      	movcs	r0, r9
   2a5a8:	f7ff fe5a 	bl	2a260 <get_nrf_spim_frequency>
   2a5ac:	6138      	str	r0, [r7, #16]
						      max_freq));
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   2a5ae:	88a3      	ldrh	r3, [r4, #4]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   2a5b0:	f013 0f02 	tst.w	r3, #2
   2a5b4:	f000 810f 	beq.w	2a7d6 <configure+0x2b2>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   2a5b8:	f013 0f04 	tst.w	r3, #4
   2a5bc:	f000 8110 	beq.w	2a7e0 <configure+0x2bc>
			return NRF_SPIM_MODE_3;
   2a5c0:	2303      	movs	r3, #3
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
   2a5c2:	753b      	strb	r3, [r7, #20]
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   2a5c4:	88a3      	ldrh	r3, [r4, #4]
	if (operation & SPI_TRANSFER_LSB) {
   2a5c6:	f013 0f10 	tst.w	r3, #16
   2a5ca:	f000 810d 	beq.w	2a7e8 <configure+0x2c4>
		return NRF_SPIM_BIT_ORDER_LSB_FIRST;
   2a5ce:	2301      	movs	r3, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
   2a5d0:	757b      	strb	r3, [r7, #21]

	if (dev_data->initialized) {
   2a5d2:	f1b8 0f00 	cmp.w	r8, #0
   2a5d6:	f040 8109 	bne.w	2a7ec <configure+0x2c8>
		nrfx_spim_uninit(&dev_config->spim);
		dev_data->initialized = false;
	}

	result = nrfx_spim_init(&dev_config->spim, &config,
   2a5da:	462b      	mov	r3, r5
   2a5dc:	4aab      	ldr	r2, [pc, #684]	; (2a88c <configure+0x368>)
   2a5de:	f107 0108 	add.w	r1, r7, #8
   2a5e2:	4630      	mov	r0, r6
   2a5e4:	f005 f99a 	bl	2f91c <nrfx_spim_init>
				event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   2a5e8:	4ba9      	ldr	r3, [pc, #676]	; (2a890 <configure+0x36c>)
   2a5ea:	4298      	cmp	r0, r3
   2a5ec:	f040 8105 	bne.w	2a7fa <configure+0x2d6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
		return -EIO;
	}

	dev_data->initialized = true;
   2a5f0:	2301      	movs	r3, #1
   2a5f2:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d

	ctx->config = spi_cfg;
   2a5f6:	602c      	str	r4, [r5, #0]

	return 0;
   2a5f8:	2000      	movs	r0, #0
}
   2a5fa:	3784      	adds	r7, #132	; 0x84
   2a5fc:	46bd      	mov	sp, r7
   2a5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Half-duplex not supported");
   2a602:	4ba4      	ldr	r3, [pc, #656]	; (2a894 <configure+0x370>)
   2a604:	67fb      	str	r3, [r7, #124]	; 0x7c
   2a606:	2302      	movs	r3, #2
   2a608:	713b      	strb	r3, [r7, #4]
   2a60a:	2300      	movs	r3, #0
   2a60c:	717b      	strb	r3, [r7, #5]
   2a60e:	71bb      	strb	r3, [r7, #6]
   2a610:	71fb      	strb	r3, [r7, #7]
   2a612:	687a      	ldr	r2, [r7, #4]
   2a614:	67ba      	str	r2, [r7, #120]	; 0x78
   2a616:	4619      	mov	r1, r3
   2a618:	f363 0100 	bfi	r1, r3, #0, #1
   2a61c:	f363 0141 	bfi	r1, r3, #1, #1
   2a620:	f363 0182 	bfi	r1, r3, #2, #1
   2a624:	f363 01c5 	bfi	r1, r3, #3, #3
   2a628:	2201      	movs	r2, #1
   2a62a:	f362 1188 	bfi	r1, r2, #6, #3
   2a62e:	2208      	movs	r2, #8
   2a630:	f362 2152 	bfi	r1, r2, #9, #10
   2a634:	f363 41de 	bfi	r1, r3, #19, #12
   2a638:	f363 71df 	bfi	r1, r3, #31, #1
   2a63c:	f107 0278 	add.w	r2, r7, #120	; 0x78
   2a640:	4895      	ldr	r0, [pc, #596]	; (2a898 <configure+0x374>)
   2a642:	f7ec f983 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ENOTSUP;
   2a646:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a64a:	e7d6      	b.n	2a5fa <configure+0xd6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   2a64c:	6801      	ldr	r1, [r0, #0]
   2a64e:	466d      	mov	r5, sp
   2a650:	2300      	movs	r3, #0
   2a652:	713b      	strb	r3, [r7, #4]
   2a654:	2302      	movs	r3, #2
   2a656:	717b      	strb	r3, [r7, #5]
   2a658:	b088      	sub	sp, #32
   2a65a:	466c      	mov	r4, sp
   2a65c:	f114 0210 	adds.w	r2, r4, #16
   2a660:	d011      	beq.n	2a686 <configure+0x162>
   2a662:	200e      	movs	r0, #14
   2a664:	b11a      	cbz	r2, 2a66e <configure+0x14a>
   2a666:	2804      	cmp	r0, #4
   2a668:	dd01      	ble.n	2a66e <configure+0x14a>
   2a66a:	4b8c      	ldr	r3, [pc, #560]	; (2a89c <configure+0x378>)
   2a66c:	6163      	str	r3, [r4, #20]
   2a66e:	2300      	movs	r3, #0
   2a670:	703b      	strb	r3, [r7, #0]
   2a672:	2302      	movs	r3, #2
   2a674:	707b      	strb	r3, [r7, #1]
   2a676:	b19a      	cbz	r2, 2a6a0 <configure+0x17c>
   2a678:	2808      	cmp	r0, #8
   2a67a:	dd00      	ble.n	2a67e <configure+0x15a>
   2a67c:	61a1      	str	r1, [r4, #24]
   2a67e:	f104 031c 	add.w	r3, r4, #28
   2a682:	2100      	movs	r1, #0
   2a684:	e00a      	b.n	2a69c <configure+0x178>
   2a686:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2a68a:	e7eb      	b.n	2a664 <configure+0x140>
   2a68c:	f101 0680 	add.w	r6, r1, #128	; 0x80
   2a690:	443e      	add	r6, r7
   2a692:	f816 6c80 	ldrb.w	r6, [r6, #-128]
   2a696:	f803 6b01 	strb.w	r6, [r3], #1
   2a69a:	3101      	adds	r1, #1
   2a69c:	2901      	cmp	r1, #1
   2a69e:	d9f5      	bls.n	2a68c <configure+0x168>
   2a6a0:	280d      	cmp	r0, #13
   2a6a2:	dd26      	ble.n	2a6f2 <configure+0x1ce>
   2a6a4:	230e      	movs	r3, #14
   2a6a6:	b142      	cbz	r2, 2a6ba <configure+0x196>
   2a6a8:	2103      	movs	r1, #3
   2a6aa:	7139      	strb	r1, [r7, #4]
   2a6ac:	2100      	movs	r1, #0
   2a6ae:	7179      	strb	r1, [r7, #5]
   2a6b0:	71b9      	strb	r1, [r7, #6]
   2a6b2:	2101      	movs	r1, #1
   2a6b4:	71f9      	strb	r1, [r7, #7]
   2a6b6:	6878      	ldr	r0, [r7, #4]
   2a6b8:	6120      	str	r0, [r4, #16]
   2a6ba:	2100      	movs	r1, #0
   2a6bc:	f36f 0100 	bfc	r1, #0, #1
   2a6c0:	f36f 0141 	bfc	r1, #1, #1
   2a6c4:	f36f 0182 	bfc	r1, #2, #1
   2a6c8:	f36f 01c5 	bfc	r1, #3, #3
   2a6cc:	2001      	movs	r0, #1
   2a6ce:	f360 1188 	bfi	r1, r0, #6, #3
   2a6d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2a6d6:	f363 2152 	bfi	r1, r3, #9, #10
   2a6da:	f36f 41de 	bfc	r1, #19, #12
   2a6de:	f36f 71df 	bfc	r1, #31, #1
   2a6e2:	2300      	movs	r3, #0
   2a6e4:	486c      	ldr	r0, [pc, #432]	; (2a898 <configure+0x374>)
   2a6e6:	f7ec f931 	bl	1694c <z_impl_z_log_msg_static_create>
   2a6ea:	46ad      	mov	sp, r5
		return -EINVAL;
   2a6ec:	f06f 0015 	mvn.w	r0, #21
   2a6f0:	e783      	b.n	2a5fa <configure+0xd6>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   2a6f2:	f06f 031b 	mvn.w	r3, #27
   2a6f6:	e7d6      	b.n	2a6a6 <configure+0x182>
		LOG_ERR("Loopback mode is not supported");
   2a6f8:	4b69      	ldr	r3, [pc, #420]	; (2a8a0 <configure+0x37c>)
   2a6fa:	667b      	str	r3, [r7, #100]	; 0x64
   2a6fc:	2302      	movs	r3, #2
   2a6fe:	713b      	strb	r3, [r7, #4]
   2a700:	2300      	movs	r3, #0
   2a702:	717b      	strb	r3, [r7, #5]
   2a704:	71bb      	strb	r3, [r7, #6]
   2a706:	71fb      	strb	r3, [r7, #7]
   2a708:	687a      	ldr	r2, [r7, #4]
   2a70a:	663a      	str	r2, [r7, #96]	; 0x60
   2a70c:	4619      	mov	r1, r3
   2a70e:	f363 0100 	bfi	r1, r3, #0, #1
   2a712:	f363 0141 	bfi	r1, r3, #1, #1
   2a716:	f363 0182 	bfi	r1, r3, #2, #1
   2a71a:	f363 01c5 	bfi	r1, r3, #3, #3
   2a71e:	2201      	movs	r2, #1
   2a720:	f362 1188 	bfi	r1, r2, #6, #3
   2a724:	2208      	movs	r2, #8
   2a726:	f362 2152 	bfi	r1, r2, #9, #10
   2a72a:	f363 41de 	bfi	r1, r3, #19, #12
   2a72e:	f363 71df 	bfi	r1, r3, #31, #1
   2a732:	f107 0260 	add.w	r2, r7, #96	; 0x60
   2a736:	4858      	ldr	r0, [pc, #352]	; (2a898 <configure+0x374>)
   2a738:	f7ec f908 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2a73c:	f06f 0015 	mvn.w	r0, #21
   2a740:	e75b      	b.n	2a5fa <configure+0xd6>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   2a742:	4b58      	ldr	r3, [pc, #352]	; (2a8a4 <configure+0x380>)
   2a744:	64fb      	str	r3, [r7, #76]	; 0x4c
   2a746:	2302      	movs	r3, #2
   2a748:	713b      	strb	r3, [r7, #4]
   2a74a:	2300      	movs	r3, #0
   2a74c:	717b      	strb	r3, [r7, #5]
   2a74e:	71bb      	strb	r3, [r7, #6]
   2a750:	71fb      	strb	r3, [r7, #7]
   2a752:	687a      	ldr	r2, [r7, #4]
   2a754:	64ba      	str	r2, [r7, #72]	; 0x48
   2a756:	4619      	mov	r1, r3
   2a758:	f363 0100 	bfi	r1, r3, #0, #1
   2a75c:	f363 0141 	bfi	r1, r3, #1, #1
   2a760:	f363 0182 	bfi	r1, r3, #2, #1
   2a764:	f363 01c5 	bfi	r1, r3, #3, #3
   2a768:	2201      	movs	r2, #1
   2a76a:	f362 1188 	bfi	r1, r2, #6, #3
   2a76e:	2208      	movs	r2, #8
   2a770:	f362 2152 	bfi	r1, r2, #9, #10
   2a774:	f363 41de 	bfi	r1, r3, #19, #12
   2a778:	f363 71df 	bfi	r1, r3, #31, #1
   2a77c:	f107 0248 	add.w	r2, r7, #72	; 0x48
   2a780:	4845      	ldr	r0, [pc, #276]	; (2a898 <configure+0x374>)
   2a782:	f7ec f8e3 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2a786:	f06f 0015 	mvn.w	r0, #21
   2a78a:	e736      	b.n	2a5fa <configure+0xd6>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   2a78c:	4b46      	ldr	r3, [pc, #280]	; (2a8a8 <configure+0x384>)
   2a78e:	637b      	str	r3, [r7, #52]	; 0x34
   2a790:	2302      	movs	r3, #2
   2a792:	713b      	strb	r3, [r7, #4]
   2a794:	2300      	movs	r3, #0
   2a796:	717b      	strb	r3, [r7, #5]
   2a798:	71bb      	strb	r3, [r7, #6]
   2a79a:	71fb      	strb	r3, [r7, #7]
   2a79c:	687a      	ldr	r2, [r7, #4]
   2a79e:	633a      	str	r2, [r7, #48]	; 0x30
   2a7a0:	4619      	mov	r1, r3
   2a7a2:	f363 0100 	bfi	r1, r3, #0, #1
   2a7a6:	f363 0141 	bfi	r1, r3, #1, #1
   2a7aa:	f363 0182 	bfi	r1, r3, #2, #1
   2a7ae:	f363 01c5 	bfi	r1, r3, #3, #3
   2a7b2:	2201      	movs	r2, #1
   2a7b4:	f362 1188 	bfi	r1, r2, #6, #3
   2a7b8:	2208      	movs	r2, #8
   2a7ba:	f362 2152 	bfi	r1, r2, #9, #10
   2a7be:	f363 41de 	bfi	r1, r3, #19, #12
   2a7c2:	f363 71df 	bfi	r1, r3, #31, #1
   2a7c6:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2a7ca:	4833      	ldr	r0, [pc, #204]	; (2a898 <configure+0x374>)
   2a7cc:	f7ec f8be 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2a7d0:	f06f 0015 	mvn.w	r0, #21
   2a7d4:	e711      	b.n	2a5fa <configure+0xd6>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   2a7d6:	f013 0f04 	tst.w	r3, #4
   2a7da:	d003      	beq.n	2a7e4 <configure+0x2c0>
			return NRF_SPIM_MODE_1;
   2a7dc:	2301      	movs	r3, #1
   2a7de:	e6f0      	b.n	2a5c2 <configure+0x9e>
			return NRF_SPIM_MODE_2;
   2a7e0:	2302      	movs	r3, #2
   2a7e2:	e6ee      	b.n	2a5c2 <configure+0x9e>
			return NRF_SPIM_MODE_0;
   2a7e4:	2300      	movs	r3, #0
   2a7e6:	e6ec      	b.n	2a5c2 <configure+0x9e>
		return NRF_SPIM_BIT_ORDER_MSB_FIRST;
   2a7e8:	2300      	movs	r3, #0
   2a7ea:	e6f1      	b.n	2a5d0 <configure+0xac>
		nrfx_spim_uninit(&dev_config->spim);
   2a7ec:	4630      	mov	r0, r6
   2a7ee:	f005 f961 	bl	2fab4 <nrfx_spim_uninit>
		dev_data->initialized = false;
   2a7f2:	2300      	movs	r3, #0
   2a7f4:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   2a7f8:	e6ef      	b.n	2a5da <configure+0xb6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   2a7fa:	466d      	mov	r5, sp
   2a7fc:	b088      	sub	sp, #32
   2a7fe:	466b      	mov	r3, sp
   2a800:	f113 0210 	adds.w	r2, r3, #16
   2a804:	d00d      	beq.n	2a822 <configure+0x2fe>
   2a806:	210c      	movs	r1, #12
   2a808:	b13a      	cbz	r2, 2a81a <configure+0x2f6>
   2a80a:	460c      	mov	r4, r1
   2a80c:	2904      	cmp	r1, #4
   2a80e:	dd01      	ble.n	2a814 <configure+0x2f0>
   2a810:	4e26      	ldr	r6, [pc, #152]	; (2a8ac <configure+0x388>)
   2a812:	615e      	str	r6, [r3, #20]
   2a814:	2c08      	cmp	r4, #8
   2a816:	dd07      	ble.n	2a828 <configure+0x304>
   2a818:	6198      	str	r0, [r3, #24]
   2a81a:	290b      	cmp	r1, #11
   2a81c:	dd2b      	ble.n	2a876 <configure+0x352>
   2a81e:	240c      	movs	r4, #12
   2a820:	e004      	b.n	2a82c <configure+0x308>
   2a822:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2a826:	e7ef      	b.n	2a808 <configure+0x2e4>
   2a828:	f06f 041b 	mvn.w	r4, #27
   2a82c:	b13a      	cbz	r2, 2a83e <configure+0x31a>
   2a82e:	2103      	movs	r1, #3
   2a830:	7139      	strb	r1, [r7, #4]
   2a832:	2100      	movs	r1, #0
   2a834:	7179      	strb	r1, [r7, #5]
   2a836:	71b9      	strb	r1, [r7, #6]
   2a838:	71f9      	strb	r1, [r7, #7]
   2a83a:	6878      	ldr	r0, [r7, #4]
   2a83c:	6118      	str	r0, [r3, #16]
   2a83e:	2100      	movs	r1, #0
   2a840:	f36f 0100 	bfc	r1, #0, #1
   2a844:	f36f 0141 	bfc	r1, #1, #1
   2a848:	f36f 0182 	bfc	r1, #2, #1
   2a84c:	f36f 01c5 	bfc	r1, #3, #3
   2a850:	2301      	movs	r3, #1
   2a852:	f363 1188 	bfi	r1, r3, #6, #3
   2a856:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
   2a85a:	f363 2152 	bfi	r1, r3, #9, #10
   2a85e:	f36f 41de 	bfc	r1, #19, #12
   2a862:	f36f 71df 	bfc	r1, #31, #1
   2a866:	2300      	movs	r3, #0
   2a868:	480b      	ldr	r0, [pc, #44]	; (2a898 <configure+0x374>)
   2a86a:	f7ec f86f 	bl	1694c <z_impl_z_log_msg_static_create>
   2a86e:	46ad      	mov	sp, r5
		return -EIO;
   2a870:	f06f 0004 	mvn.w	r0, #4
   2a874:	e6c1      	b.n	2a5fa <configure+0xd6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   2a876:	f06f 041b 	mvn.w	r4, #27
   2a87a:	e7d7      	b.n	2a82c <configure+0x308>
		return 0;
   2a87c:	2000      	movs	r0, #0
   2a87e:	e6bc      	b.n	2a5fa <configure+0xd6>
   2a880:	0001e847 	.word	0x0001e847
   2a884:	00f42400 	.word	0x00f42400
   2a888:	40005000 	.word	0x40005000
   2a88c:	0002aa11 	.word	0x0002aa11
   2a890:	0bad0000 	.word	0x0bad0000
   2a894:	000449a4 	.word	0x000449a4
   2a898:	0003f4b8 	.word	0x0003f4b8
   2a89c:	000449c0 	.word	0x000449c0
   2a8a0:	000449e4 	.word	0x000449e4
   2a8a4:	00044a04 	.word	0x00044a04
   2a8a8:	00044a34 	.word	0x00044a34
   2a8ac:	00044a68 	.word	0x00044a68

0002a8b0 <spi_context_wait_for_completion>:
	}
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_wait_for_completion(struct spi_context *ctx)
{
   2a8b0:	b530      	push	{r4, r5, lr}
   2a8b2:	b089      	sub	sp, #36	; 0x24
   2a8b4:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SPI_SLAVE) && spi_context_is_slave(ctx)) {
		timeout = K_FOREVER;
	} else {
		uint32_t timeout_ms;

		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2a8b6:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2a8b8:	6d82      	ldr	r2, [r0, #88]	; 0x58
   2a8ba:	4293      	cmp	r3, r2
   2a8bc:	bf38      	it	cc
   2a8be:	4613      	movcc	r3, r2
   2a8c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
   2a8c4:	fb02 f303 	mul.w	r3, r2, r3
			     ctx->config->frequency;
   2a8c8:	4605      	mov	r5, r0
   2a8ca:	f855 2b28 	ldr.w	r2, [r5], #40
   2a8ce:	6812      	ldr	r2, [r2, #0]
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   2a8d0:	fbb3 f3f2 	udiv	r3, r3, r2
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   2a8d4:	33c8      	adds	r3, #200	; 0xc8
   2a8d6:	0c59      	lsrs	r1, r3, #17
   2a8d8:	03db      	lsls	r3, r3, #15
   2a8da:	f240 32e7 	movw	r2, #999	; 0x3e7
   2a8de:	1898      	adds	r0, r3, r2
   2a8e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2a8e4:	f04f 0300 	mov.w	r3, #0
   2a8e8:	f141 0100 	adc.w	r1, r1, #0
   2a8ec:	f7e5 fc34 	bl	10158 <__aeabi_uldivmod>
   2a8f0:	4602      	mov	r2, r0
   2a8f2:	460b      	mov	r3, r1
   2a8f4:	4628      	mov	r0, r5
   2a8f6:	f007 fabb 	bl	31e70 <z_impl_k_sem_take>
			return -ETIMEDOUT;
		}
		status = ctx->sync_status;
	}
#else
	if (k_sem_take(&ctx->sync, timeout)) {
   2a8fa:	b910      	cbnz	r0, 2a902 <spi_context_wait_for_completion+0x52>
		LOG_ERR("Timeout waiting for transfer complete");
		return -ETIMEDOUT;
	}
	status = ctx->sync_status;
   2a8fc:	6c20      	ldr	r0, [r4, #64]	; 0x40
		return ctx->recv_frames;
	}
#endif /* CONFIG_SPI_SLAVE */

	return status;
}
   2a8fe:	b009      	add	sp, #36	; 0x24
   2a900:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Timeout waiting for transfer complete");
   2a902:	4b14      	ldr	r3, [pc, #80]	; (2a954 <spi_context_wait_for_completion+0xa4>)
   2a904:	9307      	str	r3, [sp, #28]
   2a906:	2302      	movs	r3, #2
   2a908:	f88d 3004 	strb.w	r3, [sp, #4]
   2a90c:	2300      	movs	r3, #0
   2a90e:	f88d 3005 	strb.w	r3, [sp, #5]
   2a912:	f88d 3006 	strb.w	r3, [sp, #6]
   2a916:	f88d 3007 	strb.w	r3, [sp, #7]
   2a91a:	9a01      	ldr	r2, [sp, #4]
   2a91c:	9206      	str	r2, [sp, #24]
   2a91e:	4619      	mov	r1, r3
   2a920:	f363 0100 	bfi	r1, r3, #0, #1
   2a924:	f363 0141 	bfi	r1, r3, #1, #1
   2a928:	f363 0182 	bfi	r1, r3, #2, #1
   2a92c:	f363 01c5 	bfi	r1, r3, #3, #3
   2a930:	2201      	movs	r2, #1
   2a932:	f362 1188 	bfi	r1, r2, #6, #3
   2a936:	2208      	movs	r2, #8
   2a938:	f362 2152 	bfi	r1, r2, #9, #10
   2a93c:	f363 41de 	bfi	r1, r3, #19, #12
   2a940:	f363 71df 	bfi	r1, r3, #31, #1
   2a944:	aa06      	add	r2, sp, #24
   2a946:	4804      	ldr	r0, [pc, #16]	; (2a958 <spi_context_wait_for_completion+0xa8>)
   2a948:	f7ec f800 	bl	1694c <z_impl_z_log_msg_static_create>
		return -ETIMEDOUT;
   2a94c:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2a950:	e7d5      	b.n	2a8fe <spi_context_wait_for_completion+0x4e>
   2a952:	bf00      	nop
   2a954:	00044a90 	.word	0x00044a90
   2a958:	0003f4b8 	.word	0x0003f4b8

0002a95c <transfer_next_chunk>:
	return 0;
}
#endif

static void transfer_next_chunk(const struct device *dev)
{
   2a95c:	b570      	push	{r4, r5, r6, lr}
   2a95e:	b084      	sub	sp, #16
	struct spi_nrfx_data *dev_data = dev->data;
   2a960:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   2a962:	6846      	ldr	r6, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   2a964:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2a966:	2b00      	cmp	r3, #0
   2a968:	d043      	beq.n	2a9f2 <transfer_next_chunk+0x96>
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   2a96a:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2a96c:	2d00      	cmp	r5, #0
   2a96e:	d042      	beq.n	2a9f6 <transfer_next_chunk+0x9a>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   2a970:	429d      	cmp	r5, r3
   2a972:	bf28      	it	cs
   2a974:	461d      	movcs	r5, r3
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
   2a976:	2d00      	cmp	r5, #0
   2a978:	d045      	beq.n	2aa06 <transfer_next_chunk+0xaa>
		nrfx_spim_xfer_desc_t xfer;
		nrfx_err_t result;
		const uint8_t *tx_buf = ctx->tx_buf;
   2a97a:	6d61      	ldr	r1, [r4, #84]	; 0x54
	return !!(ctx->tx_buf && ctx->tx_len);
   2a97c:	b169      	cbz	r1, 2a99a <transfer_next_chunk+0x3e>
   2a97e:	b163      	cbz	r3, 2a99a <transfer_next_chunk+0x3e>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2a980:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
#if (CONFIG_SPI_NRFX_RAM_BUFFER_SIZE > 0)
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
   2a984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2a988:	d007      	beq.n	2a99a <transfer_next_chunk+0x3e>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
   2a98a:	2d08      	cmp	r5, #8
   2a98c:	d900      	bls.n	2a990 <transfer_next_chunk+0x34>
				chunk_len = CONFIG_SPI_NRFX_RAM_BUFFER_SIZE;
   2a98e:	2508      	movs	r5, #8
			}

			memcpy(dev_data->buffer, tx_buf, chunk_len);
   2a990:	462a      	mov	r2, r5
   2a992:	6f20      	ldr	r0, [r4, #112]	; 0x70
   2a994:	f00d fd31 	bl	383fa <memcpy>
			tx_buf = dev_data->buffer;
   2a998:	6f21      	ldr	r1, [r4, #112]	; 0x70
		}
#endif
		if (chunk_len > MAX_CHUNK_LEN) {
   2a99a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2a99e:	d301      	bcc.n	2a9a4 <transfer_next_chunk+0x48>
			chunk_len = MAX_CHUNK_LEN;
   2a9a0:	f64f 75ff 	movw	r5, #65535	; 0xffff
		}

		dev_data->chunk_len = chunk_len;
   2a9a4:	66a5      	str	r5, [r4, #104]	; 0x68

		xfer.p_tx_buffer = tx_buf;
   2a9a6:	9100      	str	r1, [sp, #0]
   2a9a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   2a9aa:	b333      	cbz	r3, 2a9fa <transfer_next_chunk+0x9e>
   2a9ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2a9ae:	bb33      	cbnz	r3, 2a9fe <transfer_next_chunk+0xa2>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   2a9b0:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   2a9b2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2a9b4:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   2a9b6:	b323      	cbz	r3, 2aa02 <transfer_next_chunk+0xa6>
   2a9b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2a9ba:	b903      	cbnz	r3, 2a9be <transfer_next_chunk+0x62>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2a9bc:	461d      	mov	r5, r3
   2a9be:	9503      	str	r5, [sp, #12]
				error = -EIO;
			}
		}
#endif
		if (error == 0) {
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
   2a9c0:	2200      	movs	r2, #0
   2a9c2:	4669      	mov	r1, sp
   2a9c4:	4630      	mov	r0, r6
   2a9c6:	f005 f8d7 	bl	2fb78 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
   2a9ca:	4b10      	ldr	r3, [pc, #64]	; (2aa0c <transfer_next_chunk+0xb0>)
   2a9cc:	4298      	cmp	r0, r3
   2a9ce:	d00e      	beq.n	2a9ee <transfer_next_chunk+0x92>
				return;
			}
			error = -EIO;
   2a9d0:	f06f 0504 	mvn.w	r5, #4
	_spi_context_cs_control(ctx, on, false);
   2a9d4:	2200      	movs	r2, #0
   2a9d6:	4611      	mov	r1, r2
   2a9d8:	4620      	mov	r0, r4
   2a9da:	f011 fc3c 	bl	3c256 <_spi_context_cs_control>
	ctx->sync_status = status;
   2a9de:	6425      	str	r5, [r4, #64]	; 0x40
	k_sem_give(&ctx->sync);
   2a9e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
   2a9e4:	f007 f9fc 	bl	31de0 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, dev, error);
	dev_data->busy = false;
   2a9e8:	2300      	movs	r3, #0
   2a9ea:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
   2a9ee:	b004      	add	sp, #16
   2a9f0:	bd70      	pop	{r4, r5, r6, pc}
		return ctx->rx_len;
   2a9f2:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2a9f4:	e7bf      	b.n	2a976 <transfer_next_chunk+0x1a>
		return ctx->tx_len;
   2a9f6:	461d      	mov	r5, r3
   2a9f8:	e7bd      	b.n	2a976 <transfer_next_chunk+0x1a>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   2a9fa:	2300      	movs	r3, #0
   2a9fc:	e7d8      	b.n	2a9b0 <transfer_next_chunk+0x54>
   2a9fe:	462b      	mov	r3, r5
   2aa00:	e7d6      	b.n	2a9b0 <transfer_next_chunk+0x54>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   2aa02:	2500      	movs	r5, #0
   2aa04:	e7db      	b.n	2a9be <transfer_next_chunk+0x62>
	int error = 0;
   2aa06:	2500      	movs	r5, #0
   2aa08:	e7e4      	b.n	2a9d4 <transfer_next_chunk+0x78>
   2aa0a:	bf00      	nop
   2aa0c:	0bad0000 	.word	0x0bad0000

0002aa10 <event_handler>:

static void event_handler(const nrfx_spim_evt_t *p_event, void *p_context)
{
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
   2aa10:	7803      	ldrb	r3, [r0, #0]
   2aa12:	2b00      	cmp	r3, #0
   2aa14:	f040 808f 	bne.w	2ab36 <event_handler+0x126>
{
   2aa18:	b510      	push	{r4, lr}
   2aa1a:	b08e      	sub	sp, #56	; 0x38
   2aa1c:	460c      	mov	r4, r1
#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
		anomaly_58_workaround_clear(dev_data);
#endif
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   2aa1e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
	if (!ctx->tx_len) {
   2aa20:	6d8b      	ldr	r3, [r1, #88]	; 0x58
   2aa22:	b14b      	cbz	r3, 2aa38 <event_handler+0x28>
	if (len > ctx->tx_len) {
   2aa24:	429a      	cmp	r2, r3
   2aa26:	d819      	bhi.n	2aa5c <event_handler+0x4c>
	ctx->tx_len -= len;
   2aa28:	1a9b      	subs	r3, r3, r2
   2aa2a:	658b      	str	r3, [r1, #88]	; 0x58
	if (!ctx->tx_len) {
   2aa2c:	2b00      	cmp	r3, #0
   2aa2e:	d03b      	beq.n	2aaa8 <event_handler+0x98>
	} else if (ctx->tx_buf) {
   2aa30:	6d4b      	ldr	r3, [r1, #84]	; 0x54
   2aa32:	b10b      	cbz	r3, 2aa38 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   2aa34:	4413      	add	r3, r2
   2aa36:	654b      	str	r3, [r1, #84]	; 0x54
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   2aa38:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	if (!ctx->rx_len) {
   2aa3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2aa3c:	b14b      	cbz	r3, 2aa52 <event_handler+0x42>
	if (len > ctx->rx_len) {
   2aa3e:	429a      	cmp	r2, r3
   2aa40:	d842      	bhi.n	2aac8 <event_handler+0xb8>
	ctx->rx_len -= len;
   2aa42:	1a9b      	subs	r3, r3, r2
   2aa44:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   2aa46:	2b00      	cmp	r3, #0
   2aa48:	d064      	beq.n	2ab14 <event_handler+0x104>
	} else if (ctx->rx_buf) {
   2aa4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2aa4c:	b10b      	cbz	r3, 2aa52 <event_handler+0x42>
		ctx->rx_buf += dfs * len;
   2aa4e:	4413      	add	r3, r2
   2aa50:	65e3      	str	r3, [r4, #92]	; 0x5c

		transfer_next_chunk(dev_data->dev);
   2aa52:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2aa54:	f7ff ff82 	bl	2a95c <transfer_next_chunk>
	}
}
   2aa58:	b00e      	add	sp, #56	; 0x38
   2aa5a:	bd10      	pop	{r4, pc}
		LOG_ERR("Update exceeds current buffer");
   2aa5c:	4b36      	ldr	r3, [pc, #216]	; (2ab38 <event_handler+0x128>)
   2aa5e:	930d      	str	r3, [sp, #52]	; 0x34
   2aa60:	2302      	movs	r3, #2
   2aa62:	f88d 3004 	strb.w	r3, [sp, #4]
   2aa66:	2300      	movs	r3, #0
   2aa68:	f88d 3005 	strb.w	r3, [sp, #5]
   2aa6c:	f88d 3006 	strb.w	r3, [sp, #6]
   2aa70:	f88d 3007 	strb.w	r3, [sp, #7]
   2aa74:	9a01      	ldr	r2, [sp, #4]
   2aa76:	920c      	str	r2, [sp, #48]	; 0x30
   2aa78:	4619      	mov	r1, r3
   2aa7a:	f363 0100 	bfi	r1, r3, #0, #1
   2aa7e:	f363 0141 	bfi	r1, r3, #1, #1
   2aa82:	f363 0182 	bfi	r1, r3, #2, #1
   2aa86:	f363 01c5 	bfi	r1, r3, #3, #3
   2aa8a:	2201      	movs	r2, #1
   2aa8c:	f362 1188 	bfi	r1, r2, #6, #3
   2aa90:	2208      	movs	r2, #8
   2aa92:	f362 2152 	bfi	r1, r2, #9, #10
   2aa96:	f363 41de 	bfi	r1, r3, #19, #12
   2aa9a:	f363 71df 	bfi	r1, r3, #31, #1
   2aa9e:	aa0c      	add	r2, sp, #48	; 0x30
   2aaa0:	4826      	ldr	r0, [pc, #152]	; (2ab3c <event_handler+0x12c>)
   2aaa2:	f7eb ff53 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   2aaa6:	e7c7      	b.n	2aa38 <event_handler+0x28>
		++ctx->current_tx;
   2aaa8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
   2aaaa:	3308      	adds	r3, #8
   2aaac:	644b      	str	r3, [r1, #68]	; 0x44
		--ctx->tx_count;
   2aaae:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   2aab0:	3b01      	subs	r3, #1
   2aab2:	648b      	str	r3, [r1, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   2aab4:	2301      	movs	r3, #1
   2aab6:	f101 0258 	add.w	r2, r1, #88	; 0x58
   2aaba:	3148      	adds	r1, #72	; 0x48
   2aabc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   2aac0:	f011 fb82 	bl	3c1c8 <spi_context_get_next_buf>
		ctx->tx_buf = (const uint8_t *)
   2aac4:	6560      	str	r0, [r4, #84]	; 0x54
   2aac6:	e7b7      	b.n	2aa38 <event_handler+0x28>
		LOG_ERR("Update exceeds current buffer");
   2aac8:	4b1b      	ldr	r3, [pc, #108]	; (2ab38 <event_handler+0x128>)
   2aaca:	9307      	str	r3, [sp, #28]
   2aacc:	2302      	movs	r3, #2
   2aace:	f88d 3004 	strb.w	r3, [sp, #4]
   2aad2:	2300      	movs	r3, #0
   2aad4:	f88d 3005 	strb.w	r3, [sp, #5]
   2aad8:	f88d 3006 	strb.w	r3, [sp, #6]
   2aadc:	f88d 3007 	strb.w	r3, [sp, #7]
   2aae0:	9a01      	ldr	r2, [sp, #4]
   2aae2:	9206      	str	r2, [sp, #24]
   2aae4:	4619      	mov	r1, r3
   2aae6:	f363 0100 	bfi	r1, r3, #0, #1
   2aaea:	f363 0141 	bfi	r1, r3, #1, #1
   2aaee:	f363 0182 	bfi	r1, r3, #2, #1
   2aaf2:	f363 01c5 	bfi	r1, r3, #3, #3
   2aaf6:	2201      	movs	r2, #1
   2aaf8:	f362 1188 	bfi	r1, r2, #6, #3
   2aafc:	2208      	movs	r2, #8
   2aafe:	f362 2152 	bfi	r1, r2, #9, #10
   2ab02:	f363 41de 	bfi	r1, r3, #19, #12
   2ab06:	f363 71df 	bfi	r1, r3, #31, #1
   2ab0a:	aa06      	add	r2, sp, #24
   2ab0c:	480b      	ldr	r0, [pc, #44]	; (2ab3c <event_handler+0x12c>)
   2ab0e:	f7eb ff1d 	bl	1694c <z_impl_z_log_msg_static_create>
		return;
   2ab12:	e79e      	b.n	2aa52 <event_handler+0x42>
		++ctx->current_rx;
   2ab14:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2ab16:	3308      	adds	r3, #8
   2ab18:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   2ab1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2ab1c:	3b01      	subs	r3, #1
   2ab1e:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   2ab20:	2301      	movs	r3, #1
   2ab22:	f104 0260 	add.w	r2, r4, #96	; 0x60
   2ab26:	f104 0150 	add.w	r1, r4, #80	; 0x50
   2ab2a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   2ab2e:	f011 fb4b 	bl	3c1c8 <spi_context_get_next_buf>
		ctx->rx_buf = (uint8_t *)
   2ab32:	65e0      	str	r0, [r4, #92]	; 0x5c
   2ab34:	e78d      	b.n	2aa52 <event_handler+0x42>
   2ab36:	4770      	bx	lr
   2ab38:	00044ab8 	.word	0x00044ab8
   2ab3c:	0003f4b8 	.word	0x0003f4b8

0002ab40 <spi_context_cs_configure_all>:
{
   2ab40:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab42:	b083      	sub	sp, #12
   2ab44:	af00      	add	r7, sp, #0
   2ab46:	4605      	mov	r5, r0
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   2ab48:	6884      	ldr	r4, [r0, #8]
   2ab4a:	e05d      	b.n	2ac08 <spi_context_cs_configure_all+0xc8>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   2ab4c:	6823      	ldr	r3, [r4, #0]
   2ab4e:	681e      	ldr	r6, [r3, #0]
   2ab50:	7921      	ldrb	r1, [r4, #4]
   2ab52:	466d      	mov	r5, sp
   2ab54:	2300      	movs	r3, #0
   2ab56:	713b      	strb	r3, [r7, #4]
   2ab58:	2302      	movs	r3, #2
   2ab5a:	717b      	strb	r3, [r7, #5]
   2ab5c:	b08a      	sub	sp, #40	; 0x28
   2ab5e:	466c      	mov	r4, sp
   2ab60:	f114 0210 	adds.w	r2, r4, #16
   2ab64:	d015      	beq.n	2ab92 <spi_context_cs_configure_all+0x52>
   2ab66:	2012      	movs	r0, #18
   2ab68:	b11a      	cbz	r2, 2ab72 <spi_context_cs_configure_all+0x32>
   2ab6a:	2804      	cmp	r0, #4
   2ab6c:	dd01      	ble.n	2ab72 <spi_context_cs_configure_all+0x32>
   2ab6e:	4b32      	ldr	r3, [pc, #200]	; (2ac38 <spi_context_cs_configure_all+0xf8>)
   2ab70:	6163      	str	r3, [r4, #20]
   2ab72:	2300      	movs	r3, #0
   2ab74:	703b      	strb	r3, [r7, #0]
   2ab76:	2302      	movs	r3, #2
   2ab78:	707b      	strb	r3, [r7, #1]
   2ab7a:	b1c2      	cbz	r2, 2abae <spi_context_cs_configure_all+0x6e>
   2ab7c:	4603      	mov	r3, r0
   2ab7e:	2808      	cmp	r0, #8
   2ab80:	dd00      	ble.n	2ab84 <spi_context_cs_configure_all+0x44>
   2ab82:	61a6      	str	r6, [r4, #24]
   2ab84:	2b0c      	cmp	r3, #12
   2ab86:	dd00      	ble.n	2ab8a <spi_context_cs_configure_all+0x4a>
   2ab88:	61e1      	str	r1, [r4, #28]
   2ab8a:	f104 0320 	add.w	r3, r4, #32
   2ab8e:	2100      	movs	r1, #0
   2ab90:	e00b      	b.n	2abaa <spi_context_cs_configure_all+0x6a>
   2ab92:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2ab96:	e7e7      	b.n	2ab68 <spi_context_cs_configure_all+0x28>
   2ab98:	f101 0608 	add.w	r6, r1, #8
   2ab9c:	eb06 0c07 	add.w	ip, r6, r7
   2aba0:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   2aba4:	f803 cb01 	strb.w	ip, [r3], #1
   2aba8:	3101      	adds	r1, #1
   2abaa:	2901      	cmp	r1, #1
   2abac:	d9f4      	bls.n	2ab98 <spi_context_cs_configure_all+0x58>
   2abae:	2811      	cmp	r0, #17
   2abb0:	dd26      	ble.n	2ac00 <spi_context_cs_configure_all+0xc0>
   2abb2:	2312      	movs	r3, #18
   2abb4:	b142      	cbz	r2, 2abc8 <spi_context_cs_configure_all+0x88>
   2abb6:	2104      	movs	r1, #4
   2abb8:	7139      	strb	r1, [r7, #4]
   2abba:	2100      	movs	r1, #0
   2abbc:	7179      	strb	r1, [r7, #5]
   2abbe:	71b9      	strb	r1, [r7, #6]
   2abc0:	2101      	movs	r1, #1
   2abc2:	71f9      	strb	r1, [r7, #7]
   2abc4:	6878      	ldr	r0, [r7, #4]
   2abc6:	6120      	str	r0, [r4, #16]
   2abc8:	2100      	movs	r1, #0
   2abca:	f36f 0100 	bfc	r1, #0, #1
   2abce:	f36f 0141 	bfc	r1, #1, #1
   2abd2:	f36f 0182 	bfc	r1, #2, #1
   2abd6:	f36f 01c5 	bfc	r1, #3, #3
   2abda:	2001      	movs	r0, #1
   2abdc:	f360 1188 	bfi	r1, r0, #6, #3
   2abe0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2abe4:	f363 2152 	bfi	r1, r3, #9, #10
   2abe8:	f36f 41de 	bfc	r1, #19, #12
   2abec:	f36f 71df 	bfc	r1, #31, #1
   2abf0:	2300      	movs	r3, #0
   2abf2:	4812      	ldr	r0, [pc, #72]	; (2ac3c <spi_context_cs_configure_all+0xfc>)
   2abf4:	f7eb feaa 	bl	1694c <z_impl_z_log_msg_static_create>
   2abf8:	46ad      	mov	sp, r5
			return -ENODEV;
   2abfa:	f06f 0012 	mvn.w	r0, #18
   2abfe:	e017      	b.n	2ac30 <spi_context_cs_configure_all+0xf0>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   2ac00:	f06f 031b 	mvn.w	r3, #27
   2ac04:	e7d6      	b.n	2abb4 <spi_context_cs_configure_all+0x74>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   2ac06:	3408      	adds	r4, #8
   2ac08:	68ab      	ldr	r3, [r5, #8]
   2ac0a:	68ea      	ldr	r2, [r5, #12]
   2ac0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2ac10:	429c      	cmp	r4, r3
   2ac12:	d20c      	bcs.n	2ac2e <spi_context_cs_configure_all+0xee>
		if (!device_is_ready(cs_gpio->port)) {
   2ac14:	6820      	ldr	r0, [r4, #0]
   2ac16:	f013 fe02 	bl	3e81e <z_device_is_ready>
   2ac1a:	2800      	cmp	r0, #0
   2ac1c:	d096      	beq.n	2ab4c <spi_context_cs_configure_all+0xc>
		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
   2ac1e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
   2ac22:	4620      	mov	r0, r4
   2ac24:	f011 fb3a 	bl	3c29c <gpio_pin_configure_dt>
		if (ret < 0) {
   2ac28:	2800      	cmp	r0, #0
   2ac2a:	daec      	bge.n	2ac06 <spi_context_cs_configure_all+0xc6>
   2ac2c:	e000      	b.n	2ac30 <spi_context_cs_configure_all+0xf0>
	return 0;
   2ac2e:	2000      	movs	r0, #0
}
   2ac30:	370c      	adds	r7, #12
   2ac32:	46bd      	mov	sp, r7
   2ac34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ac36:	bf00      	nop
   2ac38:	00044ad8 	.word	0x00044ad8
   2ac3c:	0003f4b8 	.word	0x0003f4b8

0002ac40 <qspi_nor_pages_layout>:

static void qspi_nor_pages_layout(const struct device *dev,
				  const struct flash_pages_layout **layout,
				  size_t *layout_size)
{
	*layout = &dev_layout;
   2ac40:	4b02      	ldr	r3, [pc, #8]	; (2ac4c <qspi_nor_pages_layout+0xc>)
   2ac42:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2ac44:	2301      	movs	r3, #1
   2ac46:	6013      	str	r3, [r2, #0]
}
   2ac48:	4770      	bx	lr
   2ac4a:	bf00      	nop
   2ac4c:	00044eac 	.word	0x00044eac

0002ac50 <qspi_flash_get_parameters>:
		.write_block_size = 4,
		.erase_value = 0xff,
	};

	return &qspi_flash_parameters;
}
   2ac50:	4800      	ldr	r0, [pc, #0]	; (2ac54 <qspi_flash_get_parameters+0x4>)
   2ac52:	4770      	bx	lr
   2ac54:	00044e24 	.word	0x00044e24

0002ac58 <qspi_device_init>:
{
   2ac58:	b538      	push	{r3, r4, r5, lr}
   2ac5a:	4604      	mov	r4, r0
	struct qspi_nor_data *dev_data = dev->data;
   2ac5c:	6905      	ldr	r5, [r0, #16]
	qspi_lock(dev);
   2ac5e:	f011 fc0e 	bl	3c47e <qspi_lock>
	k_sem_give(&dev_data->count);
   2ac62:	f105 0048 	add.w	r0, r5, #72	; 0x48
   2ac66:	f007 f8bb 	bl	31de0 <z_impl_k_sem_give>
	if (!qspi_initialized) {
   2ac6a:	4b0c      	ldr	r3, [pc, #48]	; (2ac9c <qspi_device_init+0x44>)
   2ac6c:	781b      	ldrb	r3, [r3, #0]
   2ac6e:	b133      	cbz	r3, 2ac7e <qspi_device_init+0x26>
	int ret = 0;
   2ac70:	2500      	movs	r5, #0
	struct qspi_nor_data *dev_data = dev->data;
   2ac72:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   2ac74:	3018      	adds	r0, #24
   2ac76:	f007 f8b3 	bl	31de0 <z_impl_k_sem_give>
}
   2ac7a:	4628      	mov	r0, r5
   2ac7c:	bd38      	pop	{r3, r4, r5, pc}
		res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2ac7e:	462a      	mov	r2, r5
   2ac80:	4907      	ldr	r1, [pc, #28]	; (2aca0 <qspi_device_init+0x48>)
   2ac82:	6860      	ldr	r0, [r4, #4]
   2ac84:	f004 fbee 	bl	2f464 <nrfx_qspi_init>
		ret = qspi_get_zephyr_ret_code(res);
   2ac88:	f011 fbcf 	bl	3c42a <qspi_get_zephyr_ret_code>
		qspi_initialized = (ret == 0);
   2ac8c:	4605      	mov	r5, r0
   2ac8e:	fab0 f080 	clz	r0, r0
   2ac92:	0940      	lsrs	r0, r0, #5
   2ac94:	4b01      	ldr	r3, [pc, #4]	; (2ac9c <qspi_device_init+0x44>)
   2ac96:	7018      	strb	r0, [r3, #0]
   2ac98:	e7eb      	b.n	2ac72 <qspi_device_init+0x1a>
   2ac9a:	bf00      	nop
   2ac9c:	2000cab7 	.word	0x2000cab7
   2aca0:	0003c45d 	.word	0x0003c45d

0002aca4 <qspi_wait_for_completion>:
{
   2aca4:	b508      	push	{r3, lr}
	struct qspi_nor_data *dev_data = dev->data;
   2aca6:	6900      	ldr	r0, [r0, #16]
	if (res == NRFX_SUCCESS) {
   2aca8:	4b05      	ldr	r3, [pc, #20]	; (2acc0 <qspi_wait_for_completion+0x1c>)
   2acaa:	4299      	cmp	r1, r3
   2acac:	d000      	beq.n	2acb0 <qspi_wait_for_completion+0xc>
}
   2acae:	bd08      	pop	{r3, pc}
		k_sem_take(&dev_data->sync, K_FOREVER);
   2acb0:	3030      	adds	r0, #48	; 0x30
	return z_impl_k_sem_take(sem, timeout);
   2acb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2acb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2acba:	f007 f8d9 	bl	31e70 <z_impl_k_sem_take>
}
   2acbe:	e7f6      	b.n	2acae <qspi_wait_for_completion+0xa>
   2acc0:	0bad0000 	.word	0x0bad0000

0002acc4 <qspi_send_cmd>:
	if (!cmd) {
   2acc4:	2900      	cmp	r1, #0
   2acc6:	d07c      	beq.n	2adc2 <qspi_send_cmd+0xfe>
{
   2acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2acca:	b085      	sub	sp, #20
   2accc:	af00      	add	r7, sp, #0
   2acce:	4604      	mov	r4, r0
   2acd0:	4608      	mov	r0, r1
	if (cmd->tx_buf) {
   2acd2:	684b      	ldr	r3, [r1, #4]
   2acd4:	b15b      	cbz	r3, 2acee <qspi_send_cmd+0x2a>
		tx_buf = cmd->tx_buf->buf;
   2acd6:	681d      	ldr	r5, [r3, #0]
		tx_len = cmd->tx_buf->len;
   2acd8:	6859      	ldr	r1, [r3, #4]
	if (cmd->rx_buf) {
   2acda:	6883      	ldr	r3, [r0, #8]
   2acdc:	b153      	cbz	r3, 2acf4 <qspi_send_cmd+0x30>
		rx_buf = cmd->rx_buf->buf;
   2acde:	681e      	ldr	r6, [r3, #0]
		rx_len = cmd->rx_buf->len;
   2ace0:	685b      	ldr	r3, [r3, #4]
	if ((rx_len != 0) && (tx_len != 0)) {
   2ace2:	b14b      	cbz	r3, 2acf8 <qspi_send_cmd+0x34>
   2ace4:	b141      	cbz	r1, 2acf8 <qspi_send_cmd+0x34>
		if (rx_len != tx_len) {
   2ace6:	428b      	cmp	r3, r1
   2ace8:	d16e      	bne.n	2adc8 <qspi_send_cmd+0x104>
		xfer_len += tx_len;
   2acea:	1c4b      	adds	r3, r1, #1
   2acec:	e006      	b.n	2acfc <qspi_send_cmd+0x38>
	const void *tx_buf = NULL;
   2acee:	461d      	mov	r5, r3
	size_t tx_len = 0;
   2acf0:	2100      	movs	r1, #0
   2acf2:	e7f2      	b.n	2acda <qspi_send_cmd+0x16>
	void *rx_buf = NULL;
   2acf4:	461e      	mov	r6, r3
	size_t rx_len = 0;
   2acf6:	2300      	movs	r3, #0
		xfer_len += tx_len + rx_len;
   2acf8:	440b      	add	r3, r1
   2acfa:	3301      	adds	r3, #1
	if (xfer_len > NRF_QSPI_CINSTR_LEN_9B) {
   2acfc:	2b09      	cmp	r3, #9
   2acfe:	d81c      	bhi.n	2ad3a <qspi_send_cmd+0x76>
		.opcode = cmd->op_code,
   2ad00:	7801      	ldrb	r1, [r0, #0]
	nrf_qspi_cinstr_conf_t cinstr_cfg = {
   2ad02:	7239      	strb	r1, [r7, #8]
   2ad04:	727b      	strb	r3, [r7, #9]
   2ad06:	2301      	movs	r3, #1
   2ad08:	72bb      	strb	r3, [r7, #10]
   2ad0a:	72fb      	strb	r3, [r7, #11]
   2ad0c:	2300      	movs	r3, #0
   2ad0e:	733b      	strb	r3, [r7, #12]
   2ad10:	737a      	strb	r2, [r7, #13]
	qspi_lock(dev);
   2ad12:	4620      	mov	r0, r4
   2ad14:	f011 fbb3 	bl	3c47e <qspi_lock>
	int res = nrfx_qspi_cinstr_xfer(&cinstr_cfg, tx_buf, rx_buf);
   2ad18:	4632      	mov	r2, r6
   2ad1a:	4629      	mov	r1, r5
   2ad1c:	f107 0008 	add.w	r0, r7, #8
   2ad20:	f004 fc0c 	bl	2f53c <nrfx_qspi_cinstr_xfer>
   2ad24:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   2ad26:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   2ad28:	3018      	adds	r0, #24
	z_impl_k_sem_give(sem);
   2ad2a:	f007 f859 	bl	31de0 <z_impl_k_sem_give>
	return qspi_get_zephyr_ret_code(res);
   2ad2e:	4628      	mov	r0, r5
   2ad30:	f011 fb7b 	bl	3c42a <qspi_get_zephyr_ret_code>
}
   2ad34:	3714      	adds	r7, #20
   2ad36:	46bd      	mov	sp, r7
   2ad38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_WRN("cinstr %02x transfer too long: %zu",
   2ad3a:	7806      	ldrb	r6, [r0, #0]
   2ad3c:	466c      	mov	r4, sp
   2ad3e:	b088      	sub	sp, #32
   2ad40:	4669      	mov	r1, sp
   2ad42:	f111 0210 	adds.w	r2, r1, #16
   2ad46:	d036      	beq.n	2adb6 <qspi_send_cmd+0xf2>
   2ad48:	2010      	movs	r0, #16
   2ad4a:	b162      	cbz	r2, 2ad66 <qspi_send_cmd+0xa2>
   2ad4c:	4605      	mov	r5, r0
   2ad4e:	2804      	cmp	r0, #4
   2ad50:	dd03      	ble.n	2ad5a <qspi_send_cmd+0x96>
   2ad52:	f8df c07c 	ldr.w	ip, [pc, #124]	; 2add0 <qspi_send_cmd+0x10c>
   2ad56:	f8c1 c014 	str.w	ip, [r1, #20]
   2ad5a:	2d08      	cmp	r5, #8
   2ad5c:	dd00      	ble.n	2ad60 <qspi_send_cmd+0x9c>
   2ad5e:	618e      	str	r6, [r1, #24]
   2ad60:	2d0c      	cmp	r5, #12
   2ad62:	dd00      	ble.n	2ad66 <qspi_send_cmd+0xa2>
   2ad64:	61cb      	str	r3, [r1, #28]
   2ad66:	280f      	cmp	r0, #15
   2ad68:	dd28      	ble.n	2adbc <qspi_send_cmd+0xf8>
   2ad6a:	2310      	movs	r3, #16
   2ad6c:	b13a      	cbz	r2, 2ad7e <qspi_send_cmd+0xba>
   2ad6e:	2004      	movs	r0, #4
   2ad70:	7138      	strb	r0, [r7, #4]
   2ad72:	2000      	movs	r0, #0
   2ad74:	7178      	strb	r0, [r7, #5]
   2ad76:	71b8      	strb	r0, [r7, #6]
   2ad78:	71f8      	strb	r0, [r7, #7]
   2ad7a:	6878      	ldr	r0, [r7, #4]
   2ad7c:	6108      	str	r0, [r1, #16]
   2ad7e:	2100      	movs	r1, #0
   2ad80:	f36f 0100 	bfc	r1, #0, #1
   2ad84:	f36f 0141 	bfc	r1, #1, #1
   2ad88:	f36f 0182 	bfc	r1, #2, #1
   2ad8c:	f36f 01c5 	bfc	r1, #3, #3
   2ad90:	2002      	movs	r0, #2
   2ad92:	f360 1188 	bfi	r1, r0, #6, #3
   2ad96:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   2ad9a:	f363 2152 	bfi	r1, r3, #9, #10
   2ad9e:	f36f 41de 	bfc	r1, #19, #12
   2ada2:	f36f 71df 	bfc	r1, #31, #1
   2ada6:	2300      	movs	r3, #0
   2ada8:	480a      	ldr	r0, [pc, #40]	; (2add4 <qspi_send_cmd+0x110>)
   2adaa:	f7eb fdcf 	bl	1694c <z_impl_z_log_msg_static_create>
   2adae:	46a5      	mov	sp, r4
		return -EINVAL;
   2adb0:	f06f 0015 	mvn.w	r0, #21
   2adb4:	e7be      	b.n	2ad34 <qspi_send_cmd+0x70>
		LOG_WRN("cinstr %02x transfer too long: %zu",
   2adb6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2adba:	e7c6      	b.n	2ad4a <qspi_send_cmd+0x86>
   2adbc:	f06f 031b 	mvn.w	r3, #27
   2adc0:	e7d4      	b.n	2ad6c <qspi_send_cmd+0xa8>
		return -EINVAL;
   2adc2:	f06f 0015 	mvn.w	r0, #21
}
   2adc6:	4770      	bx	lr
			return -EINVAL;
   2adc8:	f06f 0015 	mvn.w	r0, #21
   2adcc:	e7b2      	b.n	2ad34 <qspi_send_cmd+0x70>
   2adce:	bf00      	nop
   2add0:	00044c34 	.word	0x00044c34
   2add4:	0003f4a0 	.word	0x0003f4a0

0002add8 <qspi_wrsr>:
{
   2add8:	b510      	push	{r4, lr}
   2adda:	b08e      	sub	sp, #56	; 0x38
	uint8_t sr_array[2] = {0};
   2addc:	2300      	movs	r3, #0
   2adde:	f8ad 301c 	strh.w	r3, [sp, #28]
	if (sr_num > 2 || sr_num == 0) {
   2ade2:	1e53      	subs	r3, r2, #1
   2ade4:	b2db      	uxtb	r3, r3
   2ade6:	2b01      	cmp	r3, #1
   2ade8:	d841      	bhi.n	2ae6e <qspi_wrsr+0x96>
   2adea:	4604      	mov	r4, r0
	if (sr_num == 1) {
   2adec:	2a01      	cmp	r2, #1
   2adee:	d112      	bne.n	2ae16 <qspi_wrsr+0x3e>
		sr_array[0] = sr_val;
   2adf0:	f88d 101c 	strb.w	r1, [sp, #28]
	const struct qspi_buf sr_buf = {
   2adf4:	ab07      	add	r3, sp, #28
   2adf6:	9305      	str	r3, [sp, #20]
   2adf8:	9206      	str	r2, [sp, #24]
	struct qspi_cmd cmd = {
   2adfa:	2300      	movs	r3, #0
   2adfc:	9302      	str	r3, [sp, #8]
   2adfe:	9303      	str	r3, [sp, #12]
   2ae00:	9304      	str	r3, [sp, #16]
   2ae02:	f88d 2008 	strb.w	r2, [sp, #8]
   2ae06:	ab05      	add	r3, sp, #20
   2ae08:	9303      	str	r3, [sp, #12]
	ret = qspi_send_cmd(dev, &cmd, true);
   2ae0a:	a902      	add	r1, sp, #8
   2ae0c:	f7ff ff5a 	bl	2acc4 <qspi_send_cmd>
	if (ret == 0) {
   2ae10:	b348      	cbz	r0, 2ae66 <qspi_wrsr+0x8e>
}
   2ae12:	b00e      	add	sp, #56	; 0x38
   2ae14:	bd10      	pop	{r4, pc}
		LOG_ERR("Attempted to write status register 2, but no known method to write sr2");
   2ae16:	4b17      	ldr	r3, [pc, #92]	; (2ae74 <qspi_wrsr+0x9c>)
   2ae18:	930d      	str	r3, [sp, #52]	; 0x34
   2ae1a:	2302      	movs	r3, #2
   2ae1c:	f88d 3004 	strb.w	r3, [sp, #4]
   2ae20:	2300      	movs	r3, #0
   2ae22:	f88d 3005 	strb.w	r3, [sp, #5]
   2ae26:	f88d 3006 	strb.w	r3, [sp, #6]
   2ae2a:	f88d 3007 	strb.w	r3, [sp, #7]
   2ae2e:	9a01      	ldr	r2, [sp, #4]
   2ae30:	920c      	str	r2, [sp, #48]	; 0x30
   2ae32:	4619      	mov	r1, r3
   2ae34:	f363 0100 	bfi	r1, r3, #0, #1
   2ae38:	f363 0141 	bfi	r1, r3, #1, #1
   2ae3c:	f363 0182 	bfi	r1, r3, #2, #1
   2ae40:	f363 01c5 	bfi	r1, r3, #3, #3
   2ae44:	2201      	movs	r2, #1
   2ae46:	f362 1188 	bfi	r1, r2, #6, #3
   2ae4a:	2208      	movs	r2, #8
   2ae4c:	f362 2152 	bfi	r1, r2, #9, #10
   2ae50:	f363 41de 	bfi	r1, r3, #19, #12
   2ae54:	f363 71df 	bfi	r1, r3, #31, #1
   2ae58:	aa0c      	add	r2, sp, #48	; 0x30
   2ae5a:	4807      	ldr	r0, [pc, #28]	; (2ae78 <qspi_wrsr+0xa0>)
   2ae5c:	f7eb fd76 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2ae60:	f06f 0015 	mvn.w	r0, #21
   2ae64:	e7d5      	b.n	2ae12 <qspi_wrsr+0x3a>
		ret = qspi_wait_while_writing(dev);
   2ae66:	4620      	mov	r0, r4
   2ae68:	f011 fb52 	bl	3c510 <qspi_wait_while_writing>
   2ae6c:	e7d1      	b.n	2ae12 <qspi_wrsr+0x3a>
		return -EINVAL;
   2ae6e:	f06f 0015 	mvn.w	r0, #21
   2ae72:	e7ce      	b.n	2ae12 <qspi_wrsr+0x3a>
   2ae74:	00044c58 	.word	0x00044c58
   2ae78:	0003f4a0 	.word	0x0003f4a0

0002ae7c <qspi_nrfx_configure>:
{
   2ae7c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ae7e:	b083      	sub	sp, #12
   2ae80:	af00      	add	r7, sp, #0
   2ae82:	4606      	mov	r6, r0
	const struct qspi_nor_config *dev_config = dev->config;
   2ae84:	6845      	ldr	r5, [r0, #4]
	nrfx_err_t res = nrfx_qspi_init(&dev_config->nrfx_cfg,
   2ae86:	6902      	ldr	r2, [r0, #16]
   2ae88:	4964      	ldr	r1, [pc, #400]	; (2b01c <qspi_nrfx_configure+0x1a0>)
   2ae8a:	4628      	mov	r0, r5
   2ae8c:	f004 faea 	bl	2f464 <nrfx_qspi_init>
	int ret = qspi_get_zephyr_ret_code(res);
   2ae90:	f011 facb 	bl	3c42a <qspi_get_zephyr_ret_code>
	if (ret < 0) {
   2ae94:	1e04      	subs	r4, r0, #0
   2ae96:	db1b      	blt.n	2aed0 <qspi_nrfx_configure+0x54>
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   2ae98:	7aeb      	ldrb	r3, [r5, #11]
   2ae9a:	3b02      	subs	r3, #2
   2ae9c:	b2db      	uxtb	r3, r3
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2ae9e:	2b01      	cmp	r3, #1
   2aea0:	d908      	bls.n	2aeb4 <qspi_nrfx_configure+0x38>
   2aea2:	7aab      	ldrb	r3, [r5, #10]
				(prot_if->writeoc == NRF_QSPI_WRITEOC_PP4O)  ||
   2aea4:	2b04      	cmp	r3, #4
   2aea6:	d017      	beq.n	2aed8 <qspi_nrfx_configure+0x5c>
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2aea8:	2b03      	cmp	r3, #3
   2aeaa:	d001      	beq.n	2aeb0 <qspi_nrfx_configure+0x34>
   2aeac:	2300      	movs	r3, #0
   2aeae:	e002      	b.n	2aeb6 <qspi_nrfx_configure+0x3a>
   2aeb0:	2301      	movs	r3, #1
   2aeb2:	e000      	b.n	2aeb6 <qspi_nrfx_configure+0x3a>
   2aeb4:	2301      	movs	r3, #1
		bool qe_value = (prot_if->writeoc == NRF_QSPI_WRITEOC_PP4IO) ||
   2aeb6:	461d      	mov	r5, r3
		ret = qspi_rdsr(dev, sr_num);
   2aeb8:	2101      	movs	r1, #1
   2aeba:	4630      	mov	r0, r6
   2aebc:	f011 fb00 	bl	3c4c0 <qspi_rdsr>
		if (ret < 0) {
   2aec0:	1e04      	subs	r4, r0, #0
   2aec2:	db0b      	blt.n	2aedc <qspi_nrfx_configure+0x60>
		uint8_t sr = (uint8_t)ret;
   2aec4:	b2e1      	uxtb	r1, r4
		bool qe_state = ((sr & qe_mask) != 0U);
   2aec6:	f3c4 1480 	ubfx	r4, r4, #6, #1
		if (qe_state != qe_value) {
   2aeca:	42ac      	cmp	r4, r5
   2aecc:	d142      	bne.n	2af54 <qspi_nrfx_configure+0xd8>
		ret = 0;
   2aece:	2400      	movs	r4, #0
}
   2aed0:	4620      	mov	r0, r4
   2aed2:	370c      	adds	r7, #12
   2aed4:	46bd      	mov	sp, r7
   2aed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				(prot_if->readoc == NRF_QSPI_READOC_READ4IO) ||
   2aed8:	2301      	movs	r3, #1
   2aeda:	e7ec      	b.n	2aeb6 <qspi_nrfx_configure+0x3a>
			LOG_ERR("RDSR failed: %d", ret);
   2aedc:	466e      	mov	r6, sp
   2aede:	b088      	sub	sp, #32
   2aee0:	466b      	mov	r3, sp
   2aee2:	f113 0210 	adds.w	r2, r3, #16
   2aee6:	d02f      	beq.n	2af48 <qspi_nrfx_configure+0xcc>
   2aee8:	210c      	movs	r1, #12
   2aeea:	b13a      	cbz	r2, 2aefc <qspi_nrfx_configure+0x80>
   2aeec:	4608      	mov	r0, r1
   2aeee:	2904      	cmp	r1, #4
   2aef0:	dd01      	ble.n	2aef6 <qspi_nrfx_configure+0x7a>
   2aef2:	4d4b      	ldr	r5, [pc, #300]	; (2b020 <qspi_nrfx_configure+0x1a4>)
   2aef4:	615d      	str	r5, [r3, #20]
   2aef6:	2808      	cmp	r0, #8
   2aef8:	dd00      	ble.n	2aefc <qspi_nrfx_configure+0x80>
   2aefa:	619c      	str	r4, [r3, #24]
   2aefc:	290b      	cmp	r1, #11
   2aefe:	dd26      	ble.n	2af4e <qspi_nrfx_configure+0xd2>
   2af00:	250c      	movs	r5, #12
   2af02:	b13a      	cbz	r2, 2af14 <qspi_nrfx_configure+0x98>
   2af04:	2103      	movs	r1, #3
   2af06:	7139      	strb	r1, [r7, #4]
   2af08:	2100      	movs	r1, #0
   2af0a:	7179      	strb	r1, [r7, #5]
   2af0c:	71b9      	strb	r1, [r7, #6]
   2af0e:	71f9      	strb	r1, [r7, #7]
   2af10:	6878      	ldr	r0, [r7, #4]
   2af12:	6118      	str	r0, [r3, #16]
   2af14:	2100      	movs	r1, #0
   2af16:	f36f 0100 	bfc	r1, #0, #1
   2af1a:	f36f 0141 	bfc	r1, #1, #1
   2af1e:	f36f 0182 	bfc	r1, #2, #1
   2af22:	f36f 01c5 	bfc	r1, #3, #3
   2af26:	2301      	movs	r3, #1
   2af28:	f363 1188 	bfi	r1, r3, #6, #3
   2af2c:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   2af30:	f365 2152 	bfi	r1, r5, #9, #10
   2af34:	f36f 41de 	bfc	r1, #19, #12
   2af38:	f36f 71df 	bfc	r1, #31, #1
   2af3c:	2300      	movs	r3, #0
   2af3e:	4839      	ldr	r0, [pc, #228]	; (2b024 <qspi_nrfx_configure+0x1a8>)
   2af40:	f7eb fd04 	bl	1694c <z_impl_z_log_msg_static_create>
   2af44:	46b5      	mov	sp, r6
			return ret;
   2af46:	e7c3      	b.n	2aed0 <qspi_nrfx_configure+0x54>
			LOG_ERR("RDSR failed: %d", ret);
   2af48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2af4c:	e7cd      	b.n	2aeea <qspi_nrfx_configure+0x6e>
   2af4e:	f06f 051b 	mvn.w	r5, #27
   2af52:	e7d6      	b.n	2af02 <qspi_nrfx_configure+0x86>
			ret = qspi_wrsr(dev, sr, sr_num);
   2af54:	2201      	movs	r2, #1
   2af56:	f081 0140 	eor.w	r1, r1, #64	; 0x40
   2af5a:	4630      	mov	r0, r6
   2af5c:	f7ff ff3c 	bl	2add8 <qspi_wrsr>
		if (ret < 0) {
   2af60:	1e04      	subs	r4, r0, #0
   2af62:	dab5      	bge.n	2aed0 <qspi_nrfx_configure+0x54>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   2af64:	b305      	cbz	r5, 2afa8 <qspi_nrfx_configure+0x12c>
   2af66:	4930      	ldr	r1, [pc, #192]	; (2b028 <qspi_nrfx_configure+0x1ac>)
   2af68:	466e      	mov	r6, sp
   2af6a:	2300      	movs	r3, #0
   2af6c:	713b      	strb	r3, [r7, #4]
   2af6e:	2302      	movs	r3, #2
   2af70:	717b      	strb	r3, [r7, #5]
   2af72:	b08a      	sub	sp, #40	; 0x28
   2af74:	466d      	mov	r5, sp
   2af76:	f115 0210 	adds.w	r2, r5, #16
   2af7a:	d017      	beq.n	2afac <qspi_nrfx_configure+0x130>
   2af7c:	2012      	movs	r0, #18
   2af7e:	b11a      	cbz	r2, 2af88 <qspi_nrfx_configure+0x10c>
   2af80:	2804      	cmp	r0, #4
   2af82:	dd01      	ble.n	2af88 <qspi_nrfx_configure+0x10c>
   2af84:	4b29      	ldr	r3, [pc, #164]	; (2b02c <qspi_nrfx_configure+0x1b0>)
   2af86:	616b      	str	r3, [r5, #20]
   2af88:	2300      	movs	r3, #0
   2af8a:	703b      	strb	r3, [r7, #0]
   2af8c:	2302      	movs	r3, #2
   2af8e:	707b      	strb	r3, [r7, #1]
   2af90:	b1ca      	cbz	r2, 2afc6 <qspi_nrfx_configure+0x14a>
   2af92:	4603      	mov	r3, r0
   2af94:	2808      	cmp	r0, #8
   2af96:	dd00      	ble.n	2af9a <qspi_nrfx_configure+0x11e>
   2af98:	61a9      	str	r1, [r5, #24]
   2af9a:	2b0c      	cmp	r3, #12
   2af9c:	dd00      	ble.n	2afa0 <qspi_nrfx_configure+0x124>
   2af9e:	61ec      	str	r4, [r5, #28]
   2afa0:	f105 0320 	add.w	r3, r5, #32
   2afa4:	2100      	movs	r1, #0
   2afa6:	e00c      	b.n	2afc2 <qspi_nrfx_configure+0x146>
   2afa8:	4921      	ldr	r1, [pc, #132]	; (2b030 <qspi_nrfx_configure+0x1b4>)
   2afaa:	e7dd      	b.n	2af68 <qspi_nrfx_configure+0xec>
   2afac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2afb0:	e7e5      	b.n	2af7e <qspi_nrfx_configure+0x102>
   2afb2:	f101 0c08 	add.w	ip, r1, #8
   2afb6:	44bc      	add	ip, r7
   2afb8:	f81c cc08 	ldrb.w	ip, [ip, #-8]
   2afbc:	f803 cb01 	strb.w	ip, [r3], #1
   2afc0:	3101      	adds	r1, #1
   2afc2:	2901      	cmp	r1, #1
   2afc4:	d9f5      	bls.n	2afb2 <qspi_nrfx_configure+0x136>
   2afc6:	2811      	cmp	r0, #17
   2afc8:	dd24      	ble.n	2b014 <qspi_nrfx_configure+0x198>
   2afca:	2312      	movs	r3, #18
   2afcc:	b142      	cbz	r2, 2afe0 <qspi_nrfx_configure+0x164>
   2afce:	2104      	movs	r1, #4
   2afd0:	7139      	strb	r1, [r7, #4]
   2afd2:	2100      	movs	r1, #0
   2afd4:	7179      	strb	r1, [r7, #5]
   2afd6:	71b9      	strb	r1, [r7, #6]
   2afd8:	2101      	movs	r1, #1
   2afda:	71f9      	strb	r1, [r7, #7]
   2afdc:	6878      	ldr	r0, [r7, #4]
   2afde:	6128      	str	r0, [r5, #16]
   2afe0:	2100      	movs	r1, #0
   2afe2:	f36f 0100 	bfc	r1, #0, #1
   2afe6:	f36f 0141 	bfc	r1, #1, #1
   2afea:	f36f 0182 	bfc	r1, #2, #1
   2afee:	f36f 01c5 	bfc	r1, #3, #3
   2aff2:	2001      	movs	r0, #1
   2aff4:	f360 1188 	bfi	r1, r0, #6, #3
   2aff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   2affc:	f363 2152 	bfi	r1, r3, #9, #10
   2b000:	f36f 41de 	bfc	r1, #19, #12
   2b004:	f36f 71df 	bfc	r1, #31, #1
   2b008:	2300      	movs	r3, #0
   2b00a:	4806      	ldr	r0, [pc, #24]	; (2b024 <qspi_nrfx_configure+0x1a8>)
   2b00c:	f7eb fc9e 	bl	1694c <z_impl_z_log_msg_static_create>
   2b010:	46b5      	mov	sp, r6
			return ret;
   2b012:	e75d      	b.n	2aed0 <qspi_nrfx_configure+0x54>
			LOG_ERR("QE %s failed: %d", qe_value ? "set" : "clear",
   2b014:	f06f 031b 	mvn.w	r3, #27
   2b018:	e7d8      	b.n	2afcc <qspi_nrfx_configure+0x150>
   2b01a:	bf00      	nop
   2b01c:	0003c45d 	.word	0x0003c45d
   2b020:	00044ca8 	.word	0x00044ca8
   2b024:	0003f4a0 	.word	0x0003f4a0
   2b028:	00043190 	.word	0x00043190
   2b02c:	00044cb8 	.word	0x00044cb8
   2b030:	00044ca0 	.word	0x00044ca0

0002b034 <qspi_device_uninit>:
{
   2b034:	b538      	push	{r3, r4, r5, lr}
   2b036:	4604      	mov	r4, r0
	qspi_lock(dev);
   2b038:	f011 fa21 	bl	3c47e <qspi_lock>
	struct qspi_nor_data *dev_data = dev->data;
   2b03c:	6925      	ldr	r5, [r4, #16]
	(void) k_sem_take(&dev_data->count, K_NO_WAIT);
   2b03e:	f105 0048 	add.w	r0, r5, #72	; 0x48
	return z_impl_k_sem_take(sem, timeout);
   2b042:	2200      	movs	r2, #0
   2b044:	2300      	movs	r3, #0
   2b046:	f006 ff13 	bl	31e70 <z_impl_k_sem_take>
	return sem->count;
   2b04a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
	if (last) {
   2b04c:	b13b      	cbz	r3, 2b05e <qspi_device_uninit+0x2a>
	struct qspi_nor_data *dev_data = dev->data;
   2b04e:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   2b050:	3018      	adds	r0, #24
	z_impl_k_sem_give(sem);
   2b052:	f006 fec5 	bl	31de0 <z_impl_k_sem_give>
}
   2b056:	bd38      	pop	{r3, r4, r5, pc}
				k_msleep(50);
   2b058:	2032      	movs	r0, #50	; 0x32
   2b05a:	f011 fa67 	bl	3c52c <k_msleep>
		while (nrfx_qspi_mem_busy_check() != NRFX_SUCCESS) {
   2b05e:	f004 facb 	bl	2f5f8 <nrfx_qspi_mem_busy_check>
   2b062:	4b04      	ldr	r3, [pc, #16]	; (2b074 <qspi_device_uninit+0x40>)
   2b064:	4298      	cmp	r0, r3
   2b066:	d1f7      	bne.n	2b058 <qspi_device_uninit+0x24>
		nrfx_qspi_uninit();
   2b068:	f004 faee 	bl	2f648 <nrfx_qspi_uninit>
		qspi_initialized = false;
   2b06c:	4b02      	ldr	r3, [pc, #8]	; (2b078 <qspi_device_uninit+0x44>)
   2b06e:	2200      	movs	r2, #0
   2b070:	701a      	strb	r2, [r3, #0]
   2b072:	e7ec      	b.n	2b04e <qspi_device_uninit+0x1a>
   2b074:	0bad0000 	.word	0x0bad0000
   2b078:	2000cab7 	.word	0x2000cab7

0002b07c <qspi_erase>:
{
   2b07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b080:	b085      	sub	sp, #20
   2b082:	af00      	add	r7, sp, #0
	if ((addr % QSPI_SECTOR_SIZE) != 0) {
   2b084:	f3c1 030b 	ubfx	r3, r1, #0, #12
   2b088:	2b00      	cmp	r3, #0
   2b08a:	f040 80f9 	bne.w	2b280 <qspi_erase+0x204>
   2b08e:	4680      	mov	r8, r0
   2b090:	460d      	mov	r5, r1
   2b092:	4614      	mov	r4, r2
	if ((size == 0) || (size % QSPI_SECTOR_SIZE) != 0) {
   2b094:	2a00      	cmp	r2, #0
   2b096:	f000 80f7 	beq.w	2b288 <qspi_erase+0x20c>
   2b09a:	f3c2 030b 	ubfx	r3, r2, #0, #12
   2b09e:	603b      	str	r3, [r7, #0]
   2b0a0:	2b00      	cmp	r3, #0
   2b0a2:	f040 80f5 	bne.w	2b290 <qspi_erase+0x214>
	const struct qspi_nor_config *params = dev->config;
   2b0a6:	f8d0 b004 	ldr.w	fp, [r0, #4]
	rv = qspi_device_init(dev);
   2b0aa:	f7ff fdd5 	bl	2ac58 <qspi_device_init>
	if (rv != 0) {
   2b0ae:	6078      	str	r0, [r7, #4]
   2b0b0:	b138      	cbz	r0, 2b0c2 <qspi_erase+0x46>
	qspi_device_uninit(dev);
   2b0b2:	4640      	mov	r0, r8
   2b0b4:	f7ff ffbe 	bl	2b034 <qspi_device_uninit>
}
   2b0b8:	6878      	ldr	r0, [r7, #4]
   2b0ba:	3714      	adds	r7, #20
   2b0bc:	46bd      	mov	sp, r7
   2b0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	qspi_trans_lock(dev);
   2b0c2:	4640      	mov	r0, r8
   2b0c4:	f011 f9d2 	bl	3c46c <qspi_trans_lock>
	rv = qspi_nor_write_protection_set(dev, false);
   2b0c8:	2100      	movs	r1, #0
   2b0ca:	4640      	mov	r0, r8
   2b0cc:	f011 f9e1 	bl	3c492 <qspi_nor_write_protection_set>
	if (rv != 0) {
   2b0d0:	6078      	str	r0, [r7, #4]
   2b0d2:	b120      	cbz	r0, 2b0de <qspi_erase+0x62>
	struct qspi_nor_data *dev_data = dev->data;
   2b0d4:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2b0d8:	f006 fe82 	bl	31de0 <z_impl_k_sem_give>
}
   2b0dc:	e7e9      	b.n	2b0b2 <qspi_erase+0x36>
	qspi_lock(dev);
   2b0de:	4640      	mov	r0, r8
   2b0e0:	f011 f9cd 	bl	3c47e <qspi_lock>
	while (size > 0) {
   2b0e4:	e04a      	b.n	2b17c <qspi_erase+0x100>
			res = nrfx_qspi_chip_erase();
   2b0e6:	f012 fc36 	bl	3d956 <nrfx_qspi_chip_erase>
   2b0ea:	4681      	mov	r9, r0
			adj = size;
   2b0ec:	46a2      	mov	sl, r4
   2b0ee:	e03b      	b.n	2b168 <qspi_erase+0xec>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_64KB, addr);
   2b0f0:	4629      	mov	r1, r5
   2b0f2:	2001      	movs	r0, #1
   2b0f4:	f004 faf6 	bl	2f6e4 <nrfx_qspi_erase>
   2b0f8:	4681      	mov	r9, r0
			adj = QSPI_BLOCK_SIZE;
   2b0fa:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   2b0fe:	e033      	b.n	2b168 <qspi_erase+0xec>
			res = nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_4KB, addr);
   2b100:	4629      	mov	r1, r5
   2b102:	2000      	movs	r0, #0
   2b104:	f004 faee 	bl	2f6e4 <nrfx_qspi_erase>
   2b108:	4681      	mov	r9, r0
			adj = QSPI_SECTOR_SIZE;
   2b10a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
   2b10e:	e02b      	b.n	2b168 <qspi_erase+0xec>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   2b110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b114:	e04d      	b.n	2b1b2 <qspi_erase+0x136>
   2b116:	290f      	cmp	r1, #15
   2b118:	dd5c      	ble.n	2b1d4 <qspi_erase+0x158>
   2b11a:	2110      	movs	r1, #16
   2b11c:	b13a      	cbz	r2, 2b12e <qspi_erase+0xb2>
   2b11e:	2004      	movs	r0, #4
   2b120:	7338      	strb	r0, [r7, #12]
   2b122:	2000      	movs	r0, #0
   2b124:	7378      	strb	r0, [r7, #13]
   2b126:	73b8      	strb	r0, [r7, #14]
   2b128:	73f8      	strb	r0, [r7, #15]
   2b12a:	68f8      	ldr	r0, [r7, #12]
   2b12c:	6118      	str	r0, [r3, #16]
   2b12e:	f36f 0600 	bfc	r6, #0, #1
   2b132:	f36f 0641 	bfc	r6, #1, #1
   2b136:	f36f 0682 	bfc	r6, #2, #1
   2b13a:	f36f 06c5 	bfc	r6, #3, #3
   2b13e:	2301      	movs	r3, #1
   2b140:	f363 1688 	bfi	r6, r3, #6, #3
   2b144:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   2b148:	f363 2652 	bfi	r6, r3, #9, #10
   2b14c:	f36f 46de 	bfc	r6, #19, #12
   2b150:	f36f 76df 	bfc	r6, #31, #1
   2b154:	2300      	movs	r3, #0
   2b156:	4631      	mov	r1, r6
   2b158:	484f      	ldr	r0, [pc, #316]	; (2b298 <qspi_erase+0x21c>)
   2b15a:	f7eb fbf7 	bl	1694c <z_impl_z_log_msg_static_create>
   2b15e:	46cd      	mov	sp, r9
		uint32_t adj = 0;
   2b160:	f8d7 a000 	ldr.w	sl, [r7]
			res = NRFX_ERROR_INVALID_PARAM;
   2b164:	f8df 9134 	ldr.w	r9, [pc, #308]	; 2b29c <qspi_erase+0x220>
		qspi_wait_for_completion(dev, res);
   2b168:	4649      	mov	r1, r9
   2b16a:	4640      	mov	r0, r8
   2b16c:	f7ff fd9a 	bl	2aca4 <qspi_wait_for_completion>
		if (res == NRFX_SUCCESS) {
   2b170:	4b4b      	ldr	r3, [pc, #300]	; (2b2a0 <qspi_erase+0x224>)
   2b172:	4599      	cmp	r9, r3
   2b174:	d131      	bne.n	2b1da <qspi_erase+0x15e>
			addr += adj;
   2b176:	4455      	add	r5, sl
			size -= adj;
   2b178:	eba4 040a 	sub.w	r4, r4, sl
	while (size > 0) {
   2b17c:	2c00      	cmp	r4, #0
   2b17e:	d06a      	beq.n	2b256 <qspi_erase+0x1da>
		if (size == params->size) {
   2b180:	f8db 3018 	ldr.w	r3, [fp, #24]
   2b184:	42a3      	cmp	r3, r4
   2b186:	d0ae      	beq.n	2b0e6 <qspi_erase+0x6a>
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   2b188:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   2b18c:	d302      	bcc.n	2b194 <qspi_erase+0x118>
			   QSPI_IS_BLOCK_ALIGNED(addr)) {
   2b18e:	b2ab      	uxth	r3, r5
		} else if ((size >= QSPI_BLOCK_SIZE) &&
   2b190:	2b00      	cmp	r3, #0
   2b192:	d0ad      	beq.n	2b0f0 <qspi_erase+0x74>
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   2b194:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2b198:	d303      	bcc.n	2b1a2 <qspi_erase+0x126>
			   QSPI_IS_SECTOR_ALIGNED(addr)) {
   2b19a:	f3c5 030b 	ubfx	r3, r5, #0, #12
		} else if ((size >= QSPI_SECTOR_SIZE) &&
   2b19e:	2b00      	cmp	r3, #0
   2b1a0:	d0ae      	beq.n	2b100 <qspi_erase+0x84>
			LOG_ERR("unsupported at 0x%lx size %zu", (long)addr, size);
   2b1a2:	46ac      	mov	ip, r5
   2b1a4:	46e9      	mov	r9, sp
   2b1a6:	b088      	sub	sp, #32
   2b1a8:	466b      	mov	r3, sp
   2b1aa:	f113 0210 	adds.w	r2, r3, #16
   2b1ae:	d0af      	beq.n	2b110 <qspi_erase+0x94>
   2b1b0:	2110      	movs	r1, #16
   2b1b2:	2a00      	cmp	r2, #0
   2b1b4:	d0af      	beq.n	2b116 <qspi_erase+0x9a>
   2b1b6:	4608      	mov	r0, r1
   2b1b8:	2904      	cmp	r1, #4
   2b1ba:	dd03      	ble.n	2b1c4 <qspi_erase+0x148>
   2b1bc:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 2b2a4 <qspi_erase+0x228>
   2b1c0:	f8c3 e014 	str.w	lr, [r3, #20]
   2b1c4:	2808      	cmp	r0, #8
   2b1c6:	dd01      	ble.n	2b1cc <qspi_erase+0x150>
   2b1c8:	f8c3 c018 	str.w	ip, [r3, #24]
   2b1cc:	280c      	cmp	r0, #12
   2b1ce:	dda2      	ble.n	2b116 <qspi_erase+0x9a>
   2b1d0:	61dc      	str	r4, [r3, #28]
   2b1d2:	e7a0      	b.n	2b116 <qspi_erase+0x9a>
   2b1d4:	f06f 011b 	mvn.w	r1, #27
   2b1d8:	e7a0      	b.n	2b11c <qspi_erase+0xa0>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   2b1da:	466e      	mov	r6, sp
   2b1dc:	b088      	sub	sp, #32
   2b1de:	466b      	mov	r3, sp
   2b1e0:	f113 0210 	adds.w	r2, r3, #16
   2b1e4:	d046      	beq.n	2b274 <qspi_erase+0x1f8>
   2b1e6:	2110      	movs	r1, #16
   2b1e8:	b162      	cbz	r2, 2b204 <qspi_erase+0x188>
   2b1ea:	4608      	mov	r0, r1
   2b1ec:	2904      	cmp	r1, #4
   2b1ee:	dd03      	ble.n	2b1f8 <qspi_erase+0x17c>
   2b1f0:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2b2a8 <qspi_erase+0x22c>
   2b1f4:	f8c3 c014 	str.w	ip, [r3, #20]
   2b1f8:	2808      	cmp	r0, #8
   2b1fa:	dd00      	ble.n	2b1fe <qspi_erase+0x182>
   2b1fc:	619d      	str	r5, [r3, #24]
   2b1fe:	280c      	cmp	r0, #12
   2b200:	dd00      	ble.n	2b204 <qspi_erase+0x188>
   2b202:	61dc      	str	r4, [r3, #28]
   2b204:	290f      	cmp	r1, #15
   2b206:	dd38      	ble.n	2b27a <qspi_erase+0x1fe>
   2b208:	2410      	movs	r4, #16
   2b20a:	b13a      	cbz	r2, 2b21c <qspi_erase+0x1a0>
   2b20c:	2104      	movs	r1, #4
   2b20e:	7339      	strb	r1, [r7, #12]
   2b210:	2100      	movs	r1, #0
   2b212:	7379      	strb	r1, [r7, #13]
   2b214:	73b9      	strb	r1, [r7, #14]
   2b216:	73f9      	strb	r1, [r7, #15]
   2b218:	68f8      	ldr	r0, [r7, #12]
   2b21a:	6118      	str	r0, [r3, #16]
   2b21c:	2100      	movs	r1, #0
   2b21e:	f36f 0100 	bfc	r1, #0, #1
   2b222:	f36f 0141 	bfc	r1, #1, #1
   2b226:	f36f 0182 	bfc	r1, #2, #1
   2b22a:	f36f 01c5 	bfc	r1, #3, #3
   2b22e:	2301      	movs	r3, #1
   2b230:	f363 1188 	bfi	r1, r3, #6, #3
   2b234:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2b238:	f364 2152 	bfi	r1, r4, #9, #10
   2b23c:	f36f 41de 	bfc	r1, #19, #12
   2b240:	f36f 71df 	bfc	r1, #31, #1
   2b244:	2300      	movs	r3, #0
   2b246:	4814      	ldr	r0, [pc, #80]	; (2b298 <qspi_erase+0x21c>)
   2b248:	f7eb fb80 	bl	1694c <z_impl_z_log_msg_static_create>
   2b24c:	46b5      	mov	sp, r6
			rv = qspi_get_zephyr_ret_code(res);
   2b24e:	4648      	mov	r0, r9
   2b250:	f011 f8eb 	bl	3c42a <qspi_get_zephyr_ret_code>
   2b254:	6078      	str	r0, [r7, #4]
	struct qspi_nor_data *dev_data = dev->data;
   2b256:	f8d8 0010 	ldr.w	r0, [r8, #16]
	k_sem_give(&dev_data->sem);
   2b25a:	3018      	adds	r0, #24
   2b25c:	f006 fdc0 	bl	31de0 <z_impl_k_sem_give>
	int rv2 = qspi_nor_write_protection_set(dev, true);
   2b260:	2101      	movs	r1, #1
   2b262:	4640      	mov	r0, r8
   2b264:	f011 f915 	bl	3c492 <qspi_nor_write_protection_set>
	if (!rv) {
   2b268:	687b      	ldr	r3, [r7, #4]
   2b26a:	2b00      	cmp	r3, #0
   2b26c:	f47f af32 	bne.w	2b0d4 <qspi_erase+0x58>
		rv = rv2;
   2b270:	6078      	str	r0, [r7, #4]
   2b272:	e72f      	b.n	2b0d4 <qspi_erase+0x58>
			LOG_ERR("erase error at 0x%lx size %zu", (long)addr, size);
   2b274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b278:	e7b6      	b.n	2b1e8 <qspi_erase+0x16c>
   2b27a:	f06f 041b 	mvn.w	r4, #27
   2b27e:	e7c4      	b.n	2b20a <qspi_erase+0x18e>
		return -EINVAL;
   2b280:	f06f 0315 	mvn.w	r3, #21
   2b284:	607b      	str	r3, [r7, #4]
   2b286:	e717      	b.n	2b0b8 <qspi_erase+0x3c>
		return -EINVAL;
   2b288:	f06f 0315 	mvn.w	r3, #21
   2b28c:	607b      	str	r3, [r7, #4]
   2b28e:	e713      	b.n	2b0b8 <qspi_erase+0x3c>
   2b290:	f06f 0315 	mvn.w	r3, #21
   2b294:	607b      	str	r3, [r7, #4]
   2b296:	e70f      	b.n	2b0b8 <qspi_erase+0x3c>
   2b298:	0003f4a0 	.word	0x0003f4a0
   2b29c:	0bad0004 	.word	0x0bad0004
   2b2a0:	0bad0000 	.word	0x0bad0000
   2b2a4:	00044ccc 	.word	0x00044ccc
   2b2a8:	00044cec 	.word	0x00044cec

0002b2ac <qspi_nor_erase>:
{
   2b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b2ae:	b083      	sub	sp, #12
   2b2b0:	af00      	add	r7, sp, #0
	const struct qspi_nor_config *params = dev->config;
   2b2b2:	6844      	ldr	r4, [r0, #4]
	if (addr < 0 ||
   2b2b4:	2900      	cmp	r1, #0
   2b2b6:	db08      	blt.n	2b2ca <qspi_nor_erase+0x1e>
	    (addr + size) > params->size) {
   2b2b8:	188b      	adds	r3, r1, r2
   2b2ba:	69a4      	ldr	r4, [r4, #24]
	if (addr < 0 ||
   2b2bc:	42a3      	cmp	r3, r4
   2b2be:	d804      	bhi.n	2b2ca <qspi_nor_erase+0x1e>
	int ret = qspi_erase(dev, addr, size);
   2b2c0:	f7ff fedc 	bl	2b07c <qspi_erase>
}
   2b2c4:	370c      	adds	r7, #12
   2b2c6:	46bd      	mov	sp, r7
   2b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("erase error: address or size "
   2b2ca:	466d      	mov	r5, sp
   2b2cc:	b088      	sub	sp, #32
   2b2ce:	466b      	mov	r3, sp
   2b2d0:	f113 0410 	adds.w	r4, r3, #16
   2b2d4:	d037      	beq.n	2b346 <qspi_nor_erase+0x9a>
   2b2d6:	2010      	movs	r0, #16
   2b2d8:	b164      	cbz	r4, 2b2f4 <qspi_nor_erase+0x48>
   2b2da:	4684      	mov	ip, r0
   2b2dc:	2804      	cmp	r0, #4
   2b2de:	dd01      	ble.n	2b2e4 <qspi_nor_erase+0x38>
   2b2e0:	4e1c      	ldr	r6, [pc, #112]	; (2b354 <qspi_nor_erase+0xa8>)
   2b2e2:	615e      	str	r6, [r3, #20]
   2b2e4:	f1bc 0f08 	cmp.w	ip, #8
   2b2e8:	dd00      	ble.n	2b2ec <qspi_nor_erase+0x40>
   2b2ea:	6199      	str	r1, [r3, #24]
   2b2ec:	f1bc 0f0c 	cmp.w	ip, #12
   2b2f0:	dd00      	ble.n	2b2f4 <qspi_nor_erase+0x48>
   2b2f2:	61da      	str	r2, [r3, #28]
   2b2f4:	280f      	cmp	r0, #15
   2b2f6:	dd29      	ble.n	2b34c <qspi_nor_erase+0xa0>
   2b2f8:	2210      	movs	r2, #16
   2b2fa:	b13c      	cbz	r4, 2b30c <qspi_nor_erase+0x60>
   2b2fc:	2104      	movs	r1, #4
   2b2fe:	7139      	strb	r1, [r7, #4]
   2b300:	2100      	movs	r1, #0
   2b302:	7179      	strb	r1, [r7, #5]
   2b304:	71b9      	strb	r1, [r7, #6]
   2b306:	71f9      	strb	r1, [r7, #7]
   2b308:	6878      	ldr	r0, [r7, #4]
   2b30a:	6118      	str	r0, [r3, #16]
   2b30c:	2100      	movs	r1, #0
   2b30e:	f36f 0100 	bfc	r1, #0, #1
   2b312:	f36f 0141 	bfc	r1, #1, #1
   2b316:	f36f 0182 	bfc	r1, #2, #1
   2b31a:	f36f 01c5 	bfc	r1, #3, #3
   2b31e:	2301      	movs	r3, #1
   2b320:	f363 1188 	bfi	r1, r3, #6, #3
   2b324:	f402 727d 	and.w	r2, r2, #1012	; 0x3f4
   2b328:	f362 2152 	bfi	r1, r2, #9, #10
   2b32c:	f36f 41de 	bfc	r1, #19, #12
   2b330:	f36f 71df 	bfc	r1, #31, #1
   2b334:	2300      	movs	r3, #0
   2b336:	4622      	mov	r2, r4
   2b338:	4807      	ldr	r0, [pc, #28]	; (2b358 <qspi_nor_erase+0xac>)
   2b33a:	f7eb fb07 	bl	1694c <z_impl_z_log_msg_static_create>
   2b33e:	46ad      	mov	sp, r5
		return -EINVAL;
   2b340:	f06f 0015 	mvn.w	r0, #21
   2b344:	e7be      	b.n	2b2c4 <qspi_nor_erase+0x18>
		LOG_ERR("erase error: address or size "
   2b346:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2b34a:	e7c5      	b.n	2b2d8 <qspi_nor_erase+0x2c>
   2b34c:	f06f 021b 	mvn.w	r2, #27
   2b350:	e7d3      	b.n	2b2fa <qspi_nor_erase+0x4e>
   2b352:	bf00      	nop
   2b354:	00044d0c 	.word	0x00044d0c
   2b358:	0003f4a0 	.word	0x0003f4a0

0002b35c <write_sub_word>:
{
   2b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b360:	b082      	sub	sp, #8
   2b362:	4605      	mov	r5, r0
   2b364:	460e      	mov	r6, r1
   2b366:	4617      	mov	r7, r2
   2b368:	4698      	mov	r8, r3
	res = nrfx_qspi_read(buf, sizeof(buf), addr);
   2b36a:	460a      	mov	r2, r1
   2b36c:	2104      	movs	r1, #4
   2b36e:	eb0d 0001 	add.w	r0, sp, r1
   2b372:	f012 faeb 	bl	3d94c <nrfx_qspi_read>
   2b376:	4604      	mov	r4, r0
	qspi_wait_for_completion(dev, res);
   2b378:	4601      	mov	r1, r0
   2b37a:	4628      	mov	r0, r5
   2b37c:	f7ff fc92 	bl	2aca4 <qspi_wait_for_completion>
	if (res == NRFX_SUCCESS) {
   2b380:	4b0b      	ldr	r3, [pc, #44]	; (2b3b0 <write_sub_word+0x54>)
   2b382:	429c      	cmp	r4, r3
   2b384:	d003      	beq.n	2b38e <write_sub_word+0x32>
}
   2b386:	4620      	mov	r0, r4
   2b388:	b002      	add	sp, #8
   2b38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(buf, sptr, slen);
   2b38e:	4642      	mov	r2, r8
   2b390:	4639      	mov	r1, r7
   2b392:	a801      	add	r0, sp, #4
   2b394:	f00d f831 	bl	383fa <memcpy>
		res = nrfx_qspi_write(buf, sizeof(buf), addr);
   2b398:	4632      	mov	r2, r6
   2b39a:	2104      	movs	r1, #4
   2b39c:	eb0d 0001 	add.w	r0, sp, r1
   2b3a0:	f012 facf 	bl	3d942 <nrfx_qspi_write>
   2b3a4:	4604      	mov	r4, r0
		qspi_wait_for_completion(dev, res);
   2b3a6:	4601      	mov	r1, r0
   2b3a8:	4628      	mov	r0, r5
   2b3aa:	f7ff fc7b 	bl	2aca4 <qspi_wait_for_completion>
	return res;
   2b3ae:	e7ea      	b.n	2b386 <write_sub_word+0x2a>
   2b3b0:	0bad0000 	.word	0x0bad0000

0002b3b4 <write_from_nvmc>:
{
   2b3b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b3b8:	b083      	sub	sp, #12
   2b3ba:	4681      	mov	r9, r0
   2b3bc:	4688      	mov	r8, r1
   2b3be:	4617      	mov	r7, r2
   2b3c0:	461d      	mov	r5, r3
	nrfx_err_t res = NRFX_SUCCESS;
   2b3c2:	4c12      	ldr	r4, [pc, #72]	; (2b40c <write_from_nvmc+0x58>)
		while ((slen > 0) && (res == NRFX_SUCCESS)) {
   2b3c4:	b1ed      	cbz	r5, 2b402 <write_from_nvmc+0x4e>
   2b3c6:	4b11      	ldr	r3, [pc, #68]	; (2b40c <write_from_nvmc+0x58>)
   2b3c8:	429c      	cmp	r4, r3
   2b3ca:	d11a      	bne.n	2b402 <write_from_nvmc+0x4e>
			size_t len = MIN(slen, sizeof(buf));
   2b3cc:	462e      	mov	r6, r5
   2b3ce:	2d04      	cmp	r5, #4
   2b3d0:	bf28      	it	cs
   2b3d2:	2604      	movcs	r6, #4
			memcpy(buf, sp, len);
   2b3d4:	4632      	mov	r2, r6
   2b3d6:	4639      	mov	r1, r7
   2b3d8:	a801      	add	r0, sp, #4
   2b3da:	f00d f80e 	bl	383fa <memcpy>
			res = nrfx_qspi_write(buf, sizeof(buf), addr);
   2b3de:	4642      	mov	r2, r8
   2b3e0:	2104      	movs	r1, #4
   2b3e2:	eb0d 0001 	add.w	r0, sp, r1
   2b3e6:	f012 faac 	bl	3d942 <nrfx_qspi_write>
   2b3ea:	4604      	mov	r4, r0
			qspi_wait_for_completion(dev, res);
   2b3ec:	4601      	mov	r1, r0
   2b3ee:	4648      	mov	r0, r9
   2b3f0:	f7ff fc58 	bl	2aca4 <qspi_wait_for_completion>
			if (res == NRFX_SUCCESS) {
   2b3f4:	4b05      	ldr	r3, [pc, #20]	; (2b40c <write_from_nvmc+0x58>)
   2b3f6:	429c      	cmp	r4, r3
   2b3f8:	d1e4      	bne.n	2b3c4 <write_from_nvmc+0x10>
				slen -= len;
   2b3fa:	1bad      	subs	r5, r5, r6
				sp += len;
   2b3fc:	4437      	add	r7, r6
				addr += len;
   2b3fe:	44b0      	add	r8, r6
   2b400:	e7e0      	b.n	2b3c4 <write_from_nvmc+0x10>
}
   2b402:	4620      	mov	r0, r4
   2b404:	b003      	add	sp, #12
   2b406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2b40a:	bf00      	nop
   2b40c:	0bad0000 	.word	0x0bad0000

0002b410 <qspi_nor_write>:
{
   2b410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b414:	b083      	sub	sp, #12
   2b416:	af00      	add	r7, sp, #0
	if (!src) {
   2b418:	2a00      	cmp	r2, #0
   2b41a:	f000 80ad 	beq.w	2b578 <qspi_nor_write+0x168>
   2b41e:	4604      	mov	r4, r0
   2b420:	460e      	mov	r6, r1
   2b422:	461d      	mov	r5, r3
   2b424:	4691      	mov	r9, r2
	if ((size == 0)
   2b426:	2b00      	cmp	r3, #0
   2b428:	f000 80a9 	beq.w	2b57e <qspi_nor_write+0x16e>
	    || ((size > 4) && ((size % 4U) != 0))) {
   2b42c:	2b04      	cmp	r3, #4
   2b42e:	d903      	bls.n	2b438 <qspi_nor_write+0x28>
   2b430:	f013 0f03 	tst.w	r3, #3
   2b434:	f040 80a6 	bne.w	2b584 <qspi_nor_write+0x174>
	if ((addr % 4U) != 0) {
   2b438:	f016 0f03 	tst.w	r6, #3
   2b43c:	f040 80a5 	bne.w	2b58a <qspi_nor_write+0x17a>
	const struct qspi_nor_config *params = dev->config;
   2b440:	6862      	ldr	r2, [r4, #4]
	if (addr < 0 ||
   2b442:	2e00      	cmp	r6, #0
   2b444:	db11      	blt.n	2b46a <qspi_nor_write+0x5a>
	    (addr + size) > params->size) {
   2b446:	1973      	adds	r3, r6, r5
   2b448:	6992      	ldr	r2, [r2, #24]
	if (addr < 0 ||
   2b44a:	4293      	cmp	r3, r2
   2b44c:	d80d      	bhi.n	2b46a <qspi_nor_write+0x5a>
	int rc = qspi_device_init(dev);
   2b44e:	4620      	mov	r0, r4
   2b450:	f7ff fc02 	bl	2ac58 <qspi_device_init>
	if (rc != 0) {
   2b454:	4680      	mov	r8, r0
   2b456:	2800      	cmp	r0, #0
   2b458:	d04a      	beq.n	2b4f0 <qspi_nor_write+0xe0>
	qspi_device_uninit(dev);
   2b45a:	4620      	mov	r0, r4
   2b45c:	f7ff fdea 	bl	2b034 <qspi_device_uninit>
}
   2b460:	4640      	mov	r0, r8
   2b462:	370c      	adds	r7, #12
   2b464:	46bd      	mov	sp, r7
   2b466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("write error: address or size "
   2b46a:	466c      	mov	r4, sp
   2b46c:	b088      	sub	sp, #32
   2b46e:	466b      	mov	r3, sp
   2b470:	f113 0210 	adds.w	r2, r3, #16
   2b474:	d036      	beq.n	2b4e4 <qspi_nor_write+0xd4>
   2b476:	2110      	movs	r1, #16
   2b478:	b162      	cbz	r2, 2b494 <qspi_nor_write+0x84>
   2b47a:	4608      	mov	r0, r1
   2b47c:	2904      	cmp	r1, #4
   2b47e:	dd03      	ble.n	2b488 <qspi_nor_write+0x78>
   2b480:	f8df c10c 	ldr.w	ip, [pc, #268]	; 2b590 <qspi_nor_write+0x180>
   2b484:	f8c3 c014 	str.w	ip, [r3, #20]
   2b488:	2808      	cmp	r0, #8
   2b48a:	dd00      	ble.n	2b48e <qspi_nor_write+0x7e>
   2b48c:	619e      	str	r6, [r3, #24]
   2b48e:	280c      	cmp	r0, #12
   2b490:	dd00      	ble.n	2b494 <qspi_nor_write+0x84>
   2b492:	61dd      	str	r5, [r3, #28]
   2b494:	290f      	cmp	r1, #15
   2b496:	dd28      	ble.n	2b4ea <qspi_nor_write+0xda>
   2b498:	2510      	movs	r5, #16
   2b49a:	b13a      	cbz	r2, 2b4ac <qspi_nor_write+0x9c>
   2b49c:	2104      	movs	r1, #4
   2b49e:	7139      	strb	r1, [r7, #4]
   2b4a0:	2100      	movs	r1, #0
   2b4a2:	7179      	strb	r1, [r7, #5]
   2b4a4:	71b9      	strb	r1, [r7, #6]
   2b4a6:	71f9      	strb	r1, [r7, #7]
   2b4a8:	6878      	ldr	r0, [r7, #4]
   2b4aa:	6118      	str	r0, [r3, #16]
   2b4ac:	2100      	movs	r1, #0
   2b4ae:	f36f 0100 	bfc	r1, #0, #1
   2b4b2:	f36f 0141 	bfc	r1, #1, #1
   2b4b6:	f36f 0182 	bfc	r1, #2, #1
   2b4ba:	f36f 01c5 	bfc	r1, #3, #3
   2b4be:	2301      	movs	r3, #1
   2b4c0:	f363 1188 	bfi	r1, r3, #6, #3
   2b4c4:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   2b4c8:	f363 2152 	bfi	r1, r3, #9, #10
   2b4cc:	f36f 41de 	bfc	r1, #19, #12
   2b4d0:	f36f 71df 	bfc	r1, #31, #1
   2b4d4:	2300      	movs	r3, #0
   2b4d6:	482f      	ldr	r0, [pc, #188]	; (2b594 <qspi_nor_write+0x184>)
   2b4d8:	f7eb fa38 	bl	1694c <z_impl_z_log_msg_static_create>
   2b4dc:	46a5      	mov	sp, r4
		return -EINVAL;
   2b4de:	f06f 0815 	mvn.w	r8, #21
   2b4e2:	e7bd      	b.n	2b460 <qspi_nor_write+0x50>
		LOG_ERR("write error: address or size "
   2b4e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b4e8:	e7c6      	b.n	2b478 <qspi_nor_write+0x68>
   2b4ea:	f06f 051b 	mvn.w	r5, #27
   2b4ee:	e7d4      	b.n	2b49a <qspi_nor_write+0x8a>
	qspi_trans_lock(dev);
   2b4f0:	4620      	mov	r0, r4
   2b4f2:	f010 ffbb 	bl	3c46c <qspi_trans_lock>
	res = qspi_nor_write_protection_set(dev, false);
   2b4f6:	2100      	movs	r1, #0
   2b4f8:	4620      	mov	r0, r4
   2b4fa:	f010 ffca 	bl	3c492 <qspi_nor_write_protection_set>
   2b4fe:	4680      	mov	r8, r0
	qspi_lock(dev);
   2b500:	4620      	mov	r0, r4
   2b502:	f010 ffbc 	bl	3c47e <qspi_lock>
	if (!res) {
   2b506:	f1b8 0f00 	cmp.w	r8, #0
   2b50a:	d10d      	bne.n	2b528 <qspi_nor_write+0x118>
		if (size < 4U) {
   2b50c:	2d03      	cmp	r5, #3
   2b50e:	d920      	bls.n	2b552 <qspi_nor_write+0x142>
   2b510:	f009 4360 	and.w	r3, r9, #3758096384	; 0xe0000000
		} else if (!nrfx_is_in_ram(src)) {
   2b514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2b518:	d023      	beq.n	2b562 <qspi_nor_write+0x152>
			res = write_from_nvmc(dev, addr, src, size);
   2b51a:	462b      	mov	r3, r5
   2b51c:	464a      	mov	r2, r9
   2b51e:	4631      	mov	r1, r6
   2b520:	4620      	mov	r0, r4
   2b522:	f7ff ff47 	bl	2b3b4 <write_from_nvmc>
   2b526:	4680      	mov	r8, r0
	struct qspi_nor_data *dev_data = dev->data;
   2b528:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   2b52a:	3018      	adds	r0, #24
   2b52c:	f006 fc58 	bl	31de0 <z_impl_k_sem_give>
	int res2 = qspi_nor_write_protection_set(dev, true);
   2b530:	2101      	movs	r1, #1
   2b532:	4620      	mov	r0, r4
   2b534:	f010 ffad 	bl	3c492 <qspi_nor_write_protection_set>
   2b538:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   2b53a:	6920      	ldr	r0, [r4, #16]
   2b53c:	f006 fc50 	bl	31de0 <z_impl_k_sem_give>
	if (!res) {
   2b540:	f1b8 0f00 	cmp.w	r8, #0
   2b544:	d100      	bne.n	2b548 <qspi_nor_write+0x138>
		res = res2;
   2b546:	46a8      	mov	r8, r5
	rc = qspi_get_zephyr_ret_code(res);
   2b548:	4640      	mov	r0, r8
   2b54a:	f010 ff6e 	bl	3c42a <qspi_get_zephyr_ret_code>
   2b54e:	4680      	mov	r8, r0
   2b550:	e783      	b.n	2b45a <qspi_nor_write+0x4a>
			res = write_sub_word(dev, addr, src, size);
   2b552:	462b      	mov	r3, r5
   2b554:	464a      	mov	r2, r9
   2b556:	4631      	mov	r1, r6
   2b558:	4620      	mov	r0, r4
   2b55a:	f7ff feff 	bl	2b35c <write_sub_word>
   2b55e:	4680      	mov	r8, r0
   2b560:	e7e2      	b.n	2b528 <qspi_nor_write+0x118>
			res = nrfx_qspi_write(src, size, addr);
   2b562:	4632      	mov	r2, r6
   2b564:	4629      	mov	r1, r5
   2b566:	4648      	mov	r0, r9
   2b568:	f012 f9eb 	bl	3d942 <nrfx_qspi_write>
   2b56c:	4680      	mov	r8, r0
			qspi_wait_for_completion(dev, res);
   2b56e:	4601      	mov	r1, r0
   2b570:	4620      	mov	r0, r4
   2b572:	f7ff fb97 	bl	2aca4 <qspi_wait_for_completion>
   2b576:	e7d7      	b.n	2b528 <qspi_nor_write+0x118>
		return -EINVAL;
   2b578:	f06f 0815 	mvn.w	r8, #21
   2b57c:	e770      	b.n	2b460 <qspi_nor_write+0x50>
		return -EINVAL;
   2b57e:	f06f 0815 	mvn.w	r8, #21
   2b582:	e76d      	b.n	2b460 <qspi_nor_write+0x50>
   2b584:	f06f 0815 	mvn.w	r8, #21
   2b588:	e76a      	b.n	2b460 <qspi_nor_write+0x50>
		return -EINVAL;
   2b58a:	f06f 0815 	mvn.w	r8, #21
   2b58e:	e767      	b.n	2b460 <qspi_nor_write+0x50>
   2b590:	00044d58 	.word	0x00044d58
   2b594:	0003f4a0 	.word	0x0003f4a0

0002b598 <read_non_aligned>:
{
   2b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b59c:	b087      	sub	sp, #28
   2b59e:	4682      	mov	sl, r0
   2b5a0:	460e      	mov	r6, r1
   2b5a2:	4617      	mov	r7, r2
	off_t flash_prefix = (WORD_SIZE - (addr % WORD_SIZE)) % WORD_SIZE;
   2b5a4:	424a      	negs	r2, r1
   2b5a6:	f001 0403 	and.w	r4, r1, #3
   2b5aa:	f002 0203 	and.w	r2, r2, #3
   2b5ae:	bf58      	it	pl
   2b5b0:	4254      	negpl	r4, r2
   2b5b2:	f1c4 0404 	rsb	r4, r4, #4
   2b5b6:	4262      	negs	r2, r4
   2b5b8:	f004 0403 	and.w	r4, r4, #3
   2b5bc:	f002 0203 	and.w	r2, r2, #3
   2b5c0:	bf58      	it	pl
   2b5c2:	4254      	negpl	r4, r2
	if (flash_prefix > size) {
   2b5c4:	429c      	cmp	r4, r3
   2b5c6:	d900      	bls.n	2b5ca <read_non_aligned+0x32>
		flash_prefix = size;
   2b5c8:	461c      	mov	r4, r3
	off_t dest_prefix = (WORD_SIZE - (off_t)dptr % WORD_SIZE) % WORD_SIZE;
   2b5ca:	427a      	negs	r2, r7
   2b5cc:	f007 0503 	and.w	r5, r7, #3
   2b5d0:	f002 0203 	and.w	r2, r2, #3
   2b5d4:	bf58      	it	pl
   2b5d6:	4255      	negpl	r5, r2
   2b5d8:	f1c5 0504 	rsb	r5, r5, #4
   2b5dc:	426a      	negs	r2, r5
   2b5de:	f005 0503 	and.w	r5, r5, #3
   2b5e2:	f002 0203 	and.w	r2, r2, #3
   2b5e6:	bf58      	it	pl
   2b5e8:	4255      	negpl	r5, r2
	if (dest_prefix > size) {
   2b5ea:	429d      	cmp	r5, r3
   2b5ec:	d900      	bls.n	2b5f0 <read_non_aligned+0x58>
		dest_prefix = size;
   2b5ee:	461d      	mov	r5, r3
	off_t flash_suffix = (size - flash_prefix) % WORD_SIZE;
   2b5f0:	9401      	str	r4, [sp, #4]
   2b5f2:	1b1a      	subs	r2, r3, r4
   2b5f4:	f002 0b03 	and.w	fp, r2, #3
	off_t flash_middle = size - flash_prefix - flash_suffix;
   2b5f8:	f022 0903 	bic.w	r9, r2, #3
			    (size - dest_prefix) % WORD_SIZE;
   2b5fc:	4629      	mov	r1, r5
   2b5fe:	1b5b      	subs	r3, r3, r5
   2b600:	f023 0303 	bic.w	r3, r3, #3
	if (flash_middle > dest_middle) {
   2b604:	4599      	cmp	r9, r3
   2b606:	dd02      	ble.n	2b60e <read_non_aligned+0x76>
		flash_suffix = size - flash_prefix - flash_middle;
   2b608:	eba2 0b03 	sub.w	fp, r2, r3
		flash_middle = dest_middle;
   2b60c:	4699      	mov	r9, r3
	if (flash_middle != 0) {
   2b60e:	f1b9 0f00 	cmp.w	r9, #0
   2b612:	d109      	bne.n	2b628 <read_non_aligned+0x90>
	nrfx_err_t res = NRFX_SUCCESS;
   2b614:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2b6b8 <read_non_aligned+0x120>
	if (flash_prefix != 0) {
   2b618:	bb04      	cbnz	r4, 2b65c <read_non_aligned+0xc4>
	if (flash_suffix != 0) {
   2b61a:	f1bb 0f00 	cmp.w	fp, #0
   2b61e:	d135      	bne.n	2b68c <read_non_aligned+0xf4>
}
   2b620:	4640      	mov	r0, r8
   2b622:	b007      	add	sp, #28
   2b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = nrfx_qspi_read(dptr + dest_prefix, flash_middle,
   2b628:	187b      	adds	r3, r7, r1
   2b62a:	f8cd 900c 	str.w	r9, [sp, #12]
   2b62e:	19a2      	adds	r2, r4, r6
   2b630:	4649      	mov	r1, r9
   2b632:	9302      	str	r3, [sp, #8]
   2b634:	4618      	mov	r0, r3
   2b636:	f012 f989 	bl	3d94c <nrfx_qspi_read>
   2b63a:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   2b63c:	4601      	mov	r1, r0
   2b63e:	4650      	mov	r0, sl
   2b640:	f7ff fb30 	bl	2aca4 <qspi_wait_for_completion>
		if (res != NRFX_SUCCESS) {
   2b644:	4b1c      	ldr	r3, [pc, #112]	; (2b6b8 <read_non_aligned+0x120>)
   2b646:	4598      	cmp	r8, r3
   2b648:	d1ea      	bne.n	2b620 <read_non_aligned+0x88>
		if (flash_prefix != dest_prefix) {
   2b64a:	42ac      	cmp	r4, r5
   2b64c:	d0e4      	beq.n	2b618 <read_non_aligned+0x80>
			memmove(dptr + flash_prefix, dptr + dest_prefix, flash_middle);
   2b64e:	9a03      	ldr	r2, [sp, #12]
   2b650:	9902      	ldr	r1, [sp, #8]
   2b652:	9b01      	ldr	r3, [sp, #4]
   2b654:	18f8      	adds	r0, r7, r3
   2b656:	f00c febd 	bl	383d4 <memmove>
   2b65a:	e7dd      	b.n	2b618 <read_non_aligned+0x80>
				     (WORD_SIZE - flash_prefix));
   2b65c:	f1c4 0204 	rsb	r2, r4, #4
		res = nrfx_qspi_read(buf, WORD_SIZE, addr -
   2b660:	1ab2      	subs	r2, r6, r2
   2b662:	2104      	movs	r1, #4
   2b664:	a804      	add	r0, sp, #16
   2b666:	f012 f971 	bl	3d94c <nrfx_qspi_read>
   2b66a:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   2b66c:	4601      	mov	r1, r0
   2b66e:	4650      	mov	r0, sl
   2b670:	f7ff fb18 	bl	2aca4 <qspi_wait_for_completion>
		if (res != NRFX_SUCCESS) {
   2b674:	4b10      	ldr	r3, [pc, #64]	; (2b6b8 <read_non_aligned+0x120>)
   2b676:	4598      	cmp	r8, r3
   2b678:	d1d2      	bne.n	2b620 <read_non_aligned+0x88>
		memcpy(dptr, buf + WORD_SIZE - flash_prefix, flash_prefix);
   2b67a:	9a01      	ldr	r2, [sp, #4]
   2b67c:	f1c2 0104 	rsb	r1, r2, #4
   2b680:	ab04      	add	r3, sp, #16
   2b682:	4419      	add	r1, r3
   2b684:	4638      	mov	r0, r7
   2b686:	f00c feb8 	bl	383fa <memcpy>
   2b68a:	e7c6      	b.n	2b61a <read_non_aligned+0x82>
				     addr + flash_prefix + flash_middle);
   2b68c:	19a2      	adds	r2, r4, r6
		res = nrfx_qspi_read(buf, WORD_SIZE * 2,
   2b68e:	444a      	add	r2, r9
   2b690:	2108      	movs	r1, #8
   2b692:	a804      	add	r0, sp, #16
   2b694:	f012 f95a 	bl	3d94c <nrfx_qspi_read>
   2b698:	4680      	mov	r8, r0
		qspi_wait_for_completion(dev, res);
   2b69a:	4601      	mov	r1, r0
   2b69c:	4650      	mov	r0, sl
   2b69e:	f7ff fb01 	bl	2aca4 <qspi_wait_for_completion>
		if (res != NRFX_SUCCESS) {
   2b6a2:	4b05      	ldr	r3, [pc, #20]	; (2b6b8 <read_non_aligned+0x120>)
   2b6a4:	4598      	cmp	r8, r3
   2b6a6:	d1bb      	bne.n	2b620 <read_non_aligned+0x88>
		memcpy(dptr + flash_prefix + flash_middle, buf, flash_suffix);
   2b6a8:	9801      	ldr	r0, [sp, #4]
   2b6aa:	4448      	add	r0, r9
   2b6ac:	465a      	mov	r2, fp
   2b6ae:	a904      	add	r1, sp, #16
   2b6b0:	4438      	add	r0, r7
   2b6b2:	f00c fea2 	bl	383fa <memcpy>
   2b6b6:	e7b3      	b.n	2b620 <read_non_aligned+0x88>
   2b6b8:	0bad0000 	.word	0x0bad0000

0002b6bc <qspi_nor_read>:
{
   2b6bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2b6c0:	b083      	sub	sp, #12
   2b6c2:	af00      	add	r7, sp, #0
	if (!dest) {
   2b6c4:	2a00      	cmp	r2, #0
   2b6c6:	d06d      	beq.n	2b7a4 <qspi_nor_read+0xe8>
   2b6c8:	4604      	mov	r4, r0
   2b6ca:	460e      	mov	r6, r1
   2b6cc:	461d      	mov	r5, r3
   2b6ce:	4691      	mov	r9, r2
	if (!size) {
   2b6d0:	2b00      	cmp	r3, #0
   2b6d2:	d06a      	beq.n	2b7aa <qspi_nor_read+0xee>
	const struct qspi_nor_config *params = dev->config;
   2b6d4:	6842      	ldr	r2, [r0, #4]
	if (addr < 0 ||
   2b6d6:	2900      	cmp	r1, #0
   2b6d8:	db10      	blt.n	2b6fc <qspi_nor_read+0x40>
	    (addr + size) > params->size) {
   2b6da:	18cb      	adds	r3, r1, r3
   2b6dc:	6992      	ldr	r2, [r2, #24]
	if (addr < 0 ||
   2b6de:	4293      	cmp	r3, r2
   2b6e0:	d80c      	bhi.n	2b6fc <qspi_nor_read+0x40>
	int rc = qspi_device_init(dev);
   2b6e2:	f7ff fab9 	bl	2ac58 <qspi_device_init>
	if (rc != 0) {
   2b6e6:	4680      	mov	r8, r0
   2b6e8:	2800      	cmp	r0, #0
   2b6ea:	d048      	beq.n	2b77e <qspi_nor_read+0xc2>
	qspi_device_uninit(dev);
   2b6ec:	4620      	mov	r0, r4
   2b6ee:	f7ff fca1 	bl	2b034 <qspi_device_uninit>
}
   2b6f2:	4640      	mov	r0, r8
   2b6f4:	370c      	adds	r7, #12
   2b6f6:	46bd      	mov	sp, r7
   2b6f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("read error: address or size "
   2b6fc:	46e8      	mov	r8, sp
   2b6fe:	b088      	sub	sp, #32
   2b700:	466b      	mov	r3, sp
   2b702:	f113 0210 	adds.w	r2, r3, #16
   2b706:	d034      	beq.n	2b772 <qspi_nor_read+0xb6>
   2b708:	2110      	movs	r1, #16
   2b70a:	b152      	cbz	r2, 2b722 <qspi_nor_read+0x66>
   2b70c:	4608      	mov	r0, r1
   2b70e:	2904      	cmp	r1, #4
   2b710:	dd01      	ble.n	2b716 <qspi_nor_read+0x5a>
   2b712:	4c27      	ldr	r4, [pc, #156]	; (2b7b0 <qspi_nor_read+0xf4>)
   2b714:	615c      	str	r4, [r3, #20]
   2b716:	2808      	cmp	r0, #8
   2b718:	dd00      	ble.n	2b71c <qspi_nor_read+0x60>
   2b71a:	619e      	str	r6, [r3, #24]
   2b71c:	280c      	cmp	r0, #12
   2b71e:	dd00      	ble.n	2b722 <qspi_nor_read+0x66>
   2b720:	61dd      	str	r5, [r3, #28]
   2b722:	290f      	cmp	r1, #15
   2b724:	dd28      	ble.n	2b778 <qspi_nor_read+0xbc>
   2b726:	2410      	movs	r4, #16
   2b728:	b13a      	cbz	r2, 2b73a <qspi_nor_read+0x7e>
   2b72a:	2104      	movs	r1, #4
   2b72c:	7139      	strb	r1, [r7, #4]
   2b72e:	2100      	movs	r1, #0
   2b730:	7179      	strb	r1, [r7, #5]
   2b732:	71b9      	strb	r1, [r7, #6]
   2b734:	71f9      	strb	r1, [r7, #7]
   2b736:	6878      	ldr	r0, [r7, #4]
   2b738:	6118      	str	r0, [r3, #16]
   2b73a:	2100      	movs	r1, #0
   2b73c:	f36f 0100 	bfc	r1, #0, #1
   2b740:	f36f 0141 	bfc	r1, #1, #1
   2b744:	f36f 0182 	bfc	r1, #2, #1
   2b748:	f36f 01c5 	bfc	r1, #3, #3
   2b74c:	2301      	movs	r3, #1
   2b74e:	f363 1188 	bfi	r1, r3, #6, #3
   2b752:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2b756:	f364 2152 	bfi	r1, r4, #9, #10
   2b75a:	f36f 41de 	bfc	r1, #19, #12
   2b75e:	f36f 71df 	bfc	r1, #31, #1
   2b762:	2300      	movs	r3, #0
   2b764:	4813      	ldr	r0, [pc, #76]	; (2b7b4 <qspi_nor_read+0xf8>)
   2b766:	f7eb f8f1 	bl	1694c <z_impl_z_log_msg_static_create>
   2b76a:	46c5      	mov	sp, r8
		return -EINVAL;
   2b76c:	f06f 0815 	mvn.w	r8, #21
   2b770:	e7bf      	b.n	2b6f2 <qspi_nor_read+0x36>
		LOG_ERR("read error: address or size "
   2b772:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b776:	e7c8      	b.n	2b70a <qspi_nor_read+0x4e>
   2b778:	f06f 041b 	mvn.w	r4, #27
   2b77c:	e7d4      	b.n	2b728 <qspi_nor_read+0x6c>
	qspi_lock(dev);
   2b77e:	4620      	mov	r0, r4
   2b780:	f010 fe7d 	bl	3c47e <qspi_lock>
	nrfx_err_t res = read_non_aligned(dev, addr, dest, size);
   2b784:	462b      	mov	r3, r5
   2b786:	464a      	mov	r2, r9
   2b788:	4631      	mov	r1, r6
   2b78a:	4620      	mov	r0, r4
   2b78c:	f7ff ff04 	bl	2b598 <read_non_aligned>
   2b790:	4605      	mov	r5, r0
	struct qspi_nor_data *dev_data = dev->data;
   2b792:	6920      	ldr	r0, [r4, #16]
	k_sem_give(&dev_data->sem);
   2b794:	3018      	adds	r0, #24
   2b796:	f006 fb23 	bl	31de0 <z_impl_k_sem_give>
	rc = qspi_get_zephyr_ret_code(res);
   2b79a:	4628      	mov	r0, r5
   2b79c:	f010 fe45 	bl	3c42a <qspi_get_zephyr_ret_code>
   2b7a0:	4680      	mov	r8, r0
   2b7a2:	e7a3      	b.n	2b6ec <qspi_nor_read+0x30>
		return -EINVAL;
   2b7a4:	f06f 0815 	mvn.w	r8, #21
   2b7a8:	e7a3      	b.n	2b6f2 <qspi_nor_read+0x36>
		return 0;
   2b7aa:	f04f 0800 	mov.w	r8, #0
   2b7ae:	e7a0      	b.n	2b6f2 <qspi_nor_read+0x36>
   2b7b0:	00044da4 	.word	0x00044da4
   2b7b4:	0003f4a0 	.word	0x0003f4a0

0002b7b8 <qspi_nor_read_id>:
{
   2b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b7bc:	b082      	sub	sp, #8
   2b7be:	af00      	add	r7, sp, #0
   2b7c0:	4604      	mov	r4, r0
	int ret = qspi_read_jedec_id(dev, id);
   2b7c2:	1d39      	adds	r1, r7, #4
   2b7c4:	f010 fec8 	bl	3c558 <qspi_read_jedec_id>
	if (ret != 0) {
   2b7c8:	2800      	cmp	r0, #0
   2b7ca:	d168      	bne.n	2b89e <qspi_nor_read_id+0xe6>
	const struct qspi_nor_config *qnc = dev->config;
   2b7cc:	6864      	ldr	r4, [r4, #4]
	if (memcmp(qnc->id, id, SPI_NOR_MAX_ID_LEN) != 0) {
   2b7ce:	2203      	movs	r2, #3
   2b7d0:	1d39      	adds	r1, r7, #4
   2b7d2:	f104 001c 	add.w	r0, r4, #28
   2b7d6:	f00c fdeb 	bl	383b0 <memcmp>
   2b7da:	b918      	cbnz	r0, 2b7e4 <qspi_nor_read_id+0x2c>
}
   2b7dc:	3708      	adds	r7, #8
   2b7de:	46bd      	mov	sp, r7
   2b7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   2b7e4:	f897 9004 	ldrb.w	r9, [r7, #4]
   2b7e8:	f897 8005 	ldrb.w	r8, [r7, #5]
   2b7ec:	79be      	ldrb	r6, [r7, #6]
   2b7ee:	f894 e01c 	ldrb.w	lr, [r4, #28]
   2b7f2:	f894 c01d 	ldrb.w	ip, [r4, #29]
   2b7f6:	7fa4      	ldrb	r4, [r4, #30]
   2b7f8:	466d      	mov	r5, sp
   2b7fa:	b08c      	sub	sp, #48	; 0x30
   2b7fc:	466b      	mov	r3, sp
   2b7fe:	f113 0210 	adds.w	r2, r3, #16
   2b802:	d046      	beq.n	2b892 <qspi_nor_read_id+0xda>
   2b804:	2020      	movs	r0, #32
   2b806:	b1e2      	cbz	r2, 2b842 <qspi_nor_read_id+0x8a>
   2b808:	4601      	mov	r1, r0
   2b80a:	2804      	cmp	r0, #4
   2b80c:	dd03      	ble.n	2b816 <qspi_nor_read_id+0x5e>
   2b80e:	f8df a094 	ldr.w	sl, [pc, #148]	; 2b8a4 <qspi_nor_read_id+0xec>
   2b812:	f8c3 a014 	str.w	sl, [r3, #20]
   2b816:	2908      	cmp	r1, #8
   2b818:	dd01      	ble.n	2b81e <qspi_nor_read_id+0x66>
   2b81a:	f8c3 9018 	str.w	r9, [r3, #24]
   2b81e:	290c      	cmp	r1, #12
   2b820:	dd01      	ble.n	2b826 <qspi_nor_read_id+0x6e>
   2b822:	f8c3 801c 	str.w	r8, [r3, #28]
   2b826:	2910      	cmp	r1, #16
   2b828:	dd00      	ble.n	2b82c <qspi_nor_read_id+0x74>
   2b82a:	621e      	str	r6, [r3, #32]
   2b82c:	2914      	cmp	r1, #20
   2b82e:	dd01      	ble.n	2b834 <qspi_nor_read_id+0x7c>
   2b830:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
   2b834:	2918      	cmp	r1, #24
   2b836:	dd01      	ble.n	2b83c <qspi_nor_read_id+0x84>
   2b838:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
   2b83c:	291c      	cmp	r1, #28
   2b83e:	dd00      	ble.n	2b842 <qspi_nor_read_id+0x8a>
   2b840:	62dc      	str	r4, [r3, #44]	; 0x2c
   2b842:	281f      	cmp	r0, #31
   2b844:	dd28      	ble.n	2b898 <qspi_nor_read_id+0xe0>
   2b846:	2420      	movs	r4, #32
   2b848:	b13a      	cbz	r2, 2b85a <qspi_nor_read_id+0xa2>
   2b84a:	2108      	movs	r1, #8
   2b84c:	7039      	strb	r1, [r7, #0]
   2b84e:	2100      	movs	r1, #0
   2b850:	7079      	strb	r1, [r7, #1]
   2b852:	70b9      	strb	r1, [r7, #2]
   2b854:	70f9      	strb	r1, [r7, #3]
   2b856:	6838      	ldr	r0, [r7, #0]
   2b858:	6118      	str	r0, [r3, #16]
   2b85a:	2100      	movs	r1, #0
   2b85c:	f36f 0100 	bfc	r1, #0, #1
   2b860:	f36f 0141 	bfc	r1, #1, #1
   2b864:	f36f 0182 	bfc	r1, #2, #1
   2b868:	f36f 01c5 	bfc	r1, #3, #3
   2b86c:	2301      	movs	r3, #1
   2b86e:	f363 1188 	bfi	r1, r3, #6, #3
   2b872:	f404 7479 	and.w	r4, r4, #996	; 0x3e4
   2b876:	f364 2152 	bfi	r1, r4, #9, #10
   2b87a:	f36f 41de 	bfc	r1, #19, #12
   2b87e:	f36f 71df 	bfc	r1, #31, #1
   2b882:	2300      	movs	r3, #0
   2b884:	4808      	ldr	r0, [pc, #32]	; (2b8a8 <qspi_nor_read_id+0xf0>)
   2b886:	f7eb f861 	bl	1694c <z_impl_z_log_msg_static_create>
   2b88a:	46ad      	mov	sp, r5
		return -ENODEV;
   2b88c:	f06f 0012 	mvn.w	r0, #18
   2b890:	e7a4      	b.n	2b7dc <qspi_nor_read_id+0x24>
		LOG_ERR("JEDEC id [%02x %02x %02x] expect [%02x %02x %02x]",
   2b892:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2b896:	e7b6      	b.n	2b806 <qspi_nor_read_id+0x4e>
   2b898:	f06f 041b 	mvn.w	r4, #27
   2b89c:	e7d4      	b.n	2b848 <qspi_nor_read_id+0x90>
		return -EIO;
   2b89e:	f06f 0004 	mvn.w	r0, #4
   2b8a2:	e79b      	b.n	2b7dc <qspi_nor_read_id+0x24>
   2b8a4:	00044df0 	.word	0x00044df0
   2b8a8:	0003f4a0 	.word	0x0003f4a0

0002b8ac <qspi_nor_init>:
{
   2b8ac:	b510      	push	{r4, lr}
   2b8ae:	4604      	mov	r4, r0

#if NRF_CLOCK_HAS_HFCLK192M
NRF_STATIC_INLINE
void nrf_clock_hfclk192m_div_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_div_t divider)
{
    p_reg->HFCLK192MCTRL = (((uint8_t)(divider) << CLOCK_HFCLK192MCTRL_HCLK192M_Pos) &
   2b8b0:	4b09      	ldr	r3, [pc, #36]	; (2b8d8 <qspi_nor_init+0x2c>)
   2b8b2:	2202      	movs	r2, #2
   2b8b4:	f8c3 25b8 	str.w	r2, [r3, #1464]	; 0x5b8
	const struct qspi_nor_config *dev_config = dev->config;
   2b8b8:	6843      	ldr	r3, [r0, #4]
	int ret = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   2b8ba:	2100      	movs	r1, #0
   2b8bc:	6a18      	ldr	r0, [r3, #32]
   2b8be:	f010 fe6b 	bl	3c598 <pinctrl_apply_state>
	if (ret < 0) {
   2b8c2:	2800      	cmp	r0, #0
   2b8c4:	db07      	blt.n	2b8d6 <qspi_nor_init+0x2a>
	IRQ_CONNECT(DT_IRQN(QSPI_NODE), DT_IRQ(QSPI_NODE, priority),
   2b8c6:	2200      	movs	r2, #0
   2b8c8:	2101      	movs	r1, #1
   2b8ca:	202b      	movs	r0, #43	; 0x2b
   2b8cc:	f7ed fd80 	bl	193d0 <z_arm_irq_priority_set>
	return qspi_nor_configure(dev);
   2b8d0:	4620      	mov	r0, r4
   2b8d2:	f010 fe71 	bl	3c5b8 <qspi_nor_configure>
}
   2b8d6:	bd10      	pop	{r4, pc}
   2b8d8:	40005000 	.word	0x40005000

0002b8dc <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2b8dc:	4b03      	ldr	r3, [pc, #12]	; (2b8ec <nvmc_wait_ready+0x10>)
   2b8de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
   2b8e2:	f013 0f01 	tst.w	r3, #1
   2b8e6:	d0f9      	beq.n	2b8dc <nvmc_wait_ready>
	}
}
   2b8e8:	4770      	bx	lr
   2b8ea:	bf00      	nop
   2b8ec:	40039000 	.word	0x40039000

0002b8f0 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   2b8f0:	4b02      	ldr	r3, [pc, #8]	; (2b8fc <flash_nrf_pages_layout+0xc>)
   2b8f2:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   2b8f4:	2301      	movs	r3, #1
   2b8f6:	6013      	str	r3, [r2, #0]
}
   2b8f8:	4770      	bx	lr
   2b8fa:	bf00      	nop
   2b8fc:	2000c3f8 	.word	0x2000c3f8

0002b900 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   2b900:	4800      	ldr	r0, [pc, #0]	; (2b904 <flash_nrf_get_parameters+0x4>)
   2b902:	4770      	bx	lr
   2b904:	00044f4c 	.word	0x00044f4c

0002b908 <flash_nrf_erase>:
{
   2b908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b90c:	b082      	sub	sp, #8
   2b90e:	af00      	add	r7, sp, #0
   2b910:	460e      	mov	r6, r1
   2b912:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   2b914:	f011 ff2a 	bl	3d76c <nrfx_nvmc_flash_page_size_get>
   2b918:	4604      	mov	r4, r0
	if (is_regular_addr_valid(addr, size)) {
   2b91a:	4629      	mov	r1, r5
   2b91c:	4630      	mov	r0, r6
   2b91e:	f010 fe66 	bl	3c5ee <is_regular_addr_valid>
   2b922:	2800      	cmp	r0, #0
   2b924:	d064      	beq.n	2b9f0 <flash_nrf_erase+0xe8>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   2b926:	fbb6 f3f4 	udiv	r3, r6, r4
   2b92a:	fb04 6313 	mls	r3, r4, r3, r6
   2b92e:	b963      	cbnz	r3, 2b94a <flash_nrf_erase+0x42>
   2b930:	fbb5 f3f4 	udiv	r3, r5, r4
   2b934:	fb04 5313 	mls	r3, r4, r3, r5
   2b938:	b93b      	cbnz	r3, 2b94a <flash_nrf_erase+0x42>
		if (!n_pages) {
   2b93a:	42ac      	cmp	r4, r5
   2b93c:	d946      	bls.n	2b9cc <flash_nrf_erase+0xc4>
			return 0;
   2b93e:	2400      	movs	r4, #0
}
   2b940:	4620      	mov	r0, r4
   2b942:	3708      	adds	r7, #8
   2b944:	46bd      	mov	sp, r7
   2b946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2b94a:	46e8      	mov	r8, sp
   2b94c:	b088      	sub	sp, #32
   2b94e:	466b      	mov	r3, sp
   2b950:	f113 0210 	adds.w	r2, r3, #16
   2b954:	d034      	beq.n	2b9c0 <flash_nrf_erase+0xb8>
   2b956:	2110      	movs	r1, #16
   2b958:	b152      	cbz	r2, 2b970 <flash_nrf_erase+0x68>
   2b95a:	4608      	mov	r0, r1
   2b95c:	2904      	cmp	r1, #4
   2b95e:	dd01      	ble.n	2b964 <flash_nrf_erase+0x5c>
   2b960:	4c44      	ldr	r4, [pc, #272]	; (2ba74 <flash_nrf_erase+0x16c>)
   2b962:	615c      	str	r4, [r3, #20]
   2b964:	2808      	cmp	r0, #8
   2b966:	dd00      	ble.n	2b96a <flash_nrf_erase+0x62>
   2b968:	619e      	str	r6, [r3, #24]
   2b96a:	280c      	cmp	r0, #12
   2b96c:	dd00      	ble.n	2b970 <flash_nrf_erase+0x68>
   2b96e:	61dd      	str	r5, [r3, #28]
   2b970:	290f      	cmp	r1, #15
   2b972:	dd28      	ble.n	2b9c6 <flash_nrf_erase+0xbe>
   2b974:	2410      	movs	r4, #16
   2b976:	b13a      	cbz	r2, 2b988 <flash_nrf_erase+0x80>
   2b978:	2104      	movs	r1, #4
   2b97a:	7139      	strb	r1, [r7, #4]
   2b97c:	2100      	movs	r1, #0
   2b97e:	7179      	strb	r1, [r7, #5]
   2b980:	71b9      	strb	r1, [r7, #6]
   2b982:	71f9      	strb	r1, [r7, #7]
   2b984:	6878      	ldr	r0, [r7, #4]
   2b986:	6118      	str	r0, [r3, #16]
   2b988:	2100      	movs	r1, #0
   2b98a:	f36f 0100 	bfc	r1, #0, #1
   2b98e:	f36f 0141 	bfc	r1, #1, #1
   2b992:	f36f 0182 	bfc	r1, #2, #1
   2b996:	f36f 01c5 	bfc	r1, #3, #3
   2b99a:	2301      	movs	r3, #1
   2b99c:	f363 1188 	bfi	r1, r3, #6, #3
   2b9a0:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2b9a4:	f364 2152 	bfi	r1, r4, #9, #10
   2b9a8:	f36f 41de 	bfc	r1, #19, #12
   2b9ac:	f36f 71df 	bfc	r1, #31, #1
   2b9b0:	2300      	movs	r3, #0
   2b9b2:	4831      	ldr	r0, [pc, #196]	; (2ba78 <flash_nrf_erase+0x170>)
   2b9b4:	f7ea ffca 	bl	1694c <z_impl_z_log_msg_static_create>
   2b9b8:	46c5      	mov	sp, r8
			return -EINVAL;
   2b9ba:	f06f 0415 	mvn.w	r4, #21
   2b9be:	e7bf      	b.n	2b940 <flash_nrf_erase+0x38>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   2b9c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2b9c4:	e7c8      	b.n	2b958 <flash_nrf_erase+0x50>
   2b9c6:	f06f 041b 	mvn.w	r4, #27
   2b9ca:	e7d4      	b.n	2b976 <flash_nrf_erase+0x6e>
	return z_impl_k_sem_take(sem, timeout);
   2b9cc:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 2ba7c <flash_nrf_erase+0x174>
   2b9d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2b9d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b9d8:	4640      	mov	r0, r8
   2b9da:	f006 fa49 	bl	31e70 <z_impl_k_sem_take>
		ret = erase(addr, size);
   2b9de:	4629      	mov	r1, r5
   2b9e0:	4630      	mov	r0, r6
   2b9e2:	f010 fe2a 	bl	3c63a <erase>
   2b9e6:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   2b9e8:	4640      	mov	r0, r8
   2b9ea:	f006 f9f9 	bl	31de0 <z_impl_k_sem_give>
	return ret;
   2b9ee:	e7a7      	b.n	2b940 <flash_nrf_erase+0x38>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2b9f0:	46e8      	mov	r8, sp
   2b9f2:	b088      	sub	sp, #32
   2b9f4:	466b      	mov	r3, sp
   2b9f6:	f113 0210 	adds.w	r2, r3, #16
   2b9fa:	d034      	beq.n	2ba66 <flash_nrf_erase+0x15e>
   2b9fc:	2110      	movs	r1, #16
   2b9fe:	b152      	cbz	r2, 2ba16 <flash_nrf_erase+0x10e>
   2ba00:	4608      	mov	r0, r1
   2ba02:	2904      	cmp	r1, #4
   2ba04:	dd01      	ble.n	2ba0a <flash_nrf_erase+0x102>
   2ba06:	4c1e      	ldr	r4, [pc, #120]	; (2ba80 <flash_nrf_erase+0x178>)
   2ba08:	615c      	str	r4, [r3, #20]
   2ba0a:	2808      	cmp	r0, #8
   2ba0c:	dd00      	ble.n	2ba10 <flash_nrf_erase+0x108>
   2ba0e:	619e      	str	r6, [r3, #24]
   2ba10:	280c      	cmp	r0, #12
   2ba12:	dd00      	ble.n	2ba16 <flash_nrf_erase+0x10e>
   2ba14:	61dd      	str	r5, [r3, #28]
   2ba16:	290f      	cmp	r1, #15
   2ba18:	dd28      	ble.n	2ba6c <flash_nrf_erase+0x164>
   2ba1a:	2410      	movs	r4, #16
   2ba1c:	b13a      	cbz	r2, 2ba2e <flash_nrf_erase+0x126>
   2ba1e:	2104      	movs	r1, #4
   2ba20:	7139      	strb	r1, [r7, #4]
   2ba22:	2100      	movs	r1, #0
   2ba24:	7179      	strb	r1, [r7, #5]
   2ba26:	71b9      	strb	r1, [r7, #6]
   2ba28:	71f9      	strb	r1, [r7, #7]
   2ba2a:	6878      	ldr	r0, [r7, #4]
   2ba2c:	6118      	str	r0, [r3, #16]
   2ba2e:	2100      	movs	r1, #0
   2ba30:	f36f 0100 	bfc	r1, #0, #1
   2ba34:	f36f 0141 	bfc	r1, #1, #1
   2ba38:	f36f 0182 	bfc	r1, #2, #1
   2ba3c:	f36f 01c5 	bfc	r1, #3, #3
   2ba40:	2301      	movs	r3, #1
   2ba42:	f363 1188 	bfi	r1, r3, #6, #3
   2ba46:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2ba4a:	f364 2152 	bfi	r1, r4, #9, #10
   2ba4e:	f36f 41de 	bfc	r1, #19, #12
   2ba52:	f36f 71df 	bfc	r1, #31, #1
   2ba56:	2300      	movs	r3, #0
   2ba58:	4807      	ldr	r0, [pc, #28]	; (2ba78 <flash_nrf_erase+0x170>)
   2ba5a:	f7ea ff77 	bl	1694c <z_impl_z_log_msg_static_create>
   2ba5e:	46c5      	mov	sp, r8
		return -EINVAL;
   2ba60:	f06f 0415 	mvn.w	r4, #21
   2ba64:	e76c      	b.n	2b940 <flash_nrf_erase+0x38>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2ba66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2ba6a:	e7c8      	b.n	2b9fe <flash_nrf_erase+0xf6>
   2ba6c:	f06f 041b 	mvn.w	r4, #27
   2ba70:	e7d4      	b.n	2ba1c <flash_nrf_erase+0x114>
   2ba72:	bf00      	nop
   2ba74:	00044eb4 	.word	0x00044eb4
   2ba78:	0003f438 	.word	0x0003f438
   2ba7c:	2000c400 	.word	0x2000c400
   2ba80:	00044ed4 	.word	0x00044ed4

0002ba84 <flash_nrf_write>:
{
   2ba84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ba88:	b083      	sub	sp, #12
   2ba8a:	af00      	add	r7, sp, #0
   2ba8c:	460c      	mov	r4, r1
   2ba8e:	4616      	mov	r6, r2
   2ba90:	461d      	mov	r5, r3
	if (is_regular_addr_valid(addr, len)) {
   2ba92:	4619      	mov	r1, r3
   2ba94:	4620      	mov	r0, r4
   2ba96:	f010 fdaa 	bl	3c5ee <is_regular_addr_valid>
   2ba9a:	b168      	cbz	r0, 2bab8 <flash_nrf_write+0x34>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   2ba9c:	f014 0803 	ands.w	r8, r4, #3
   2baa0:	d14d      	bne.n	2bb3e <flash_nrf_write+0xba>
   2baa2:	f015 0f03 	tst.w	r5, #3
   2baa6:	d14a      	bne.n	2bb3e <flash_nrf_write+0xba>
	if (!len) {
   2baa8:	2d00      	cmp	r5, #0
   2baaa:	f040 808b 	bne.w	2bbc4 <flash_nrf_write+0x140>
}
   2baae:	4640      	mov	r0, r8
   2bab0:	370c      	adds	r7, #12
   2bab2:	46bd      	mov	sp, r7
   2bab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2bab8:	466e      	mov	r6, sp
   2baba:	b088      	sub	sp, #32
   2babc:	466b      	mov	r3, sp
   2babe:	f113 0210 	adds.w	r2, r3, #16
   2bac2:	d036      	beq.n	2bb32 <flash_nrf_write+0xae>
   2bac4:	2110      	movs	r1, #16
   2bac6:	b162      	cbz	r2, 2bae2 <flash_nrf_write+0x5e>
   2bac8:	4608      	mov	r0, r1
   2baca:	2904      	cmp	r1, #4
   2bacc:	dd03      	ble.n	2bad6 <flash_nrf_write+0x52>
   2bace:	f8df c11c 	ldr.w	ip, [pc, #284]	; 2bbec <flash_nrf_write+0x168>
   2bad2:	f8c3 c014 	str.w	ip, [r3, #20]
   2bad6:	2808      	cmp	r0, #8
   2bad8:	dd00      	ble.n	2badc <flash_nrf_write+0x58>
   2bada:	619c      	str	r4, [r3, #24]
   2badc:	280c      	cmp	r0, #12
   2bade:	dd00      	ble.n	2bae2 <flash_nrf_write+0x5e>
   2bae0:	61dd      	str	r5, [r3, #28]
   2bae2:	290f      	cmp	r1, #15
   2bae4:	dd28      	ble.n	2bb38 <flash_nrf_write+0xb4>
   2bae6:	2410      	movs	r4, #16
   2bae8:	b13a      	cbz	r2, 2bafa <flash_nrf_write+0x76>
   2baea:	2104      	movs	r1, #4
   2baec:	7139      	strb	r1, [r7, #4]
   2baee:	2100      	movs	r1, #0
   2baf0:	7179      	strb	r1, [r7, #5]
   2baf2:	71b9      	strb	r1, [r7, #6]
   2baf4:	71f9      	strb	r1, [r7, #7]
   2baf6:	6878      	ldr	r0, [r7, #4]
   2baf8:	6118      	str	r0, [r3, #16]
   2bafa:	2100      	movs	r1, #0
   2bafc:	f36f 0100 	bfc	r1, #0, #1
   2bb00:	f36f 0141 	bfc	r1, #1, #1
   2bb04:	f36f 0182 	bfc	r1, #2, #1
   2bb08:	f36f 01c5 	bfc	r1, #3, #3
   2bb0c:	2301      	movs	r3, #1
   2bb0e:	f363 1188 	bfi	r1, r3, #6, #3
   2bb12:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2bb16:	f364 2152 	bfi	r1, r4, #9, #10
   2bb1a:	f36f 41de 	bfc	r1, #19, #12
   2bb1e:	f36f 71df 	bfc	r1, #31, #1
   2bb22:	2300      	movs	r3, #0
   2bb24:	4832      	ldr	r0, [pc, #200]	; (2bbf0 <flash_nrf_write+0x16c>)
   2bb26:	f7ea ff11 	bl	1694c <z_impl_z_log_msg_static_create>
   2bb2a:	46b5      	mov	sp, r6
		return -EINVAL;
   2bb2c:	f06f 0815 	mvn.w	r8, #21
   2bb30:	e7bd      	b.n	2baae <flash_nrf_write+0x2a>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2bb32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2bb36:	e7c6      	b.n	2bac6 <flash_nrf_write+0x42>
   2bb38:	f06f 041b 	mvn.w	r4, #27
   2bb3c:	e7d4      	b.n	2bae8 <flash_nrf_write+0x64>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2bb3e:	466e      	mov	r6, sp
   2bb40:	b088      	sub	sp, #32
   2bb42:	466b      	mov	r3, sp
   2bb44:	f113 0210 	adds.w	r2, r3, #16
   2bb48:	d036      	beq.n	2bbb8 <flash_nrf_write+0x134>
   2bb4a:	2110      	movs	r1, #16
   2bb4c:	b162      	cbz	r2, 2bb68 <flash_nrf_write+0xe4>
   2bb4e:	4608      	mov	r0, r1
   2bb50:	2904      	cmp	r1, #4
   2bb52:	dd03      	ble.n	2bb5c <flash_nrf_write+0xd8>
   2bb54:	f8df c09c 	ldr.w	ip, [pc, #156]	; 2bbf4 <flash_nrf_write+0x170>
   2bb58:	f8c3 c014 	str.w	ip, [r3, #20]
   2bb5c:	2808      	cmp	r0, #8
   2bb5e:	dd00      	ble.n	2bb62 <flash_nrf_write+0xde>
   2bb60:	619c      	str	r4, [r3, #24]
   2bb62:	280c      	cmp	r0, #12
   2bb64:	dd00      	ble.n	2bb68 <flash_nrf_write+0xe4>
   2bb66:	61dd      	str	r5, [r3, #28]
   2bb68:	290f      	cmp	r1, #15
   2bb6a:	dd28      	ble.n	2bbbe <flash_nrf_write+0x13a>
   2bb6c:	2410      	movs	r4, #16
   2bb6e:	b13a      	cbz	r2, 2bb80 <flash_nrf_write+0xfc>
   2bb70:	2104      	movs	r1, #4
   2bb72:	7139      	strb	r1, [r7, #4]
   2bb74:	2100      	movs	r1, #0
   2bb76:	7179      	strb	r1, [r7, #5]
   2bb78:	71b9      	strb	r1, [r7, #6]
   2bb7a:	71f9      	strb	r1, [r7, #7]
   2bb7c:	6878      	ldr	r0, [r7, #4]
   2bb7e:	6118      	str	r0, [r3, #16]
   2bb80:	2100      	movs	r1, #0
   2bb82:	f36f 0100 	bfc	r1, #0, #1
   2bb86:	f36f 0141 	bfc	r1, #1, #1
   2bb8a:	f36f 0182 	bfc	r1, #2, #1
   2bb8e:	f36f 01c5 	bfc	r1, #3, #3
   2bb92:	2301      	movs	r3, #1
   2bb94:	f363 1188 	bfi	r1, r3, #6, #3
   2bb98:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2bb9c:	f364 2152 	bfi	r1, r4, #9, #10
   2bba0:	f36f 41de 	bfc	r1, #19, #12
   2bba4:	f36f 71df 	bfc	r1, #31, #1
   2bba8:	2300      	movs	r3, #0
   2bbaa:	4811      	ldr	r0, [pc, #68]	; (2bbf0 <flash_nrf_write+0x16c>)
   2bbac:	f7ea fece 	bl	1694c <z_impl_z_log_msg_static_create>
   2bbb0:	46b5      	mov	sp, r6
		return -EINVAL;
   2bbb2:	f06f 0815 	mvn.w	r8, #21
   2bbb6:	e77a      	b.n	2baae <flash_nrf_write+0x2a>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   2bbb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2bbbc:	e7c6      	b.n	2bb4c <flash_nrf_write+0xc8>
   2bbbe:	f06f 041b 	mvn.w	r4, #27
   2bbc2:	e7d4      	b.n	2bb6e <flash_nrf_write+0xea>
	return z_impl_k_sem_take(sem, timeout);
   2bbc4:	f8df 9030 	ldr.w	r9, [pc, #48]	; 2bbf8 <flash_nrf_write+0x174>
   2bbc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bbcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2bbd0:	4648      	mov	r0, r9
   2bbd2:	f006 f94d 	bl	31e70 <z_impl_k_sem_take>
		ret = write(addr, data, len);
   2bbd6:	462a      	mov	r2, r5
   2bbd8:	4631      	mov	r1, r6
   2bbda:	4620      	mov	r0, r4
   2bbdc:	f010 fd4e 	bl	3c67c <write>
   2bbe0:	4680      	mov	r8, r0
	z_impl_k_sem_give(sem);
   2bbe2:	4648      	mov	r0, r9
   2bbe4:	f006 f8fc 	bl	31de0 <z_impl_k_sem_give>
	return ret;
   2bbe8:	e761      	b.n	2baae <flash_nrf_write+0x2a>
   2bbea:	bf00      	nop
   2bbec:	00044ed4 	.word	0x00044ed4
   2bbf0:	0003f438 	.word	0x0003f438
   2bbf4:	00044ef4 	.word	0x00044ef4
   2bbf8:	2000c400 	.word	0x2000c400

0002bbfc <flash_nrf_read>:
{
   2bbfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bbfe:	b083      	sub	sp, #12
   2bc00:	af00      	add	r7, sp, #0
   2bc02:	460e      	mov	r6, r1
   2bc04:	4615      	mov	r5, r2
   2bc06:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   2bc08:	4619      	mov	r1, r3
   2bc0a:	4630      	mov	r0, r6
   2bc0c:	f010 fcef 	bl	3c5ee <is_regular_addr_valid>
   2bc10:	b168      	cbz	r0, 2bc2e <flash_nrf_read+0x32>
	if (!len) {
   2bc12:	2c00      	cmp	r4, #0
   2bc14:	d054      	beq.n	2bcc0 <flash_nrf_read+0xc4>
	if (addr < PM_APP_ADDRESS) {
   2bc16:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   2bc1a:	db4b      	blt.n	2bcb4 <flash_nrf_read+0xb8>
	memcpy(data, (void *)addr, len);
   2bc1c:	4622      	mov	r2, r4
   2bc1e:	4631      	mov	r1, r6
   2bc20:	4628      	mov	r0, r5
   2bc22:	f00c fbea 	bl	383fa <memcpy>
	return 0;
   2bc26:	2000      	movs	r0, #0
}
   2bc28:	370c      	adds	r7, #12
   2bc2a:	46bd      	mov	sp, r7
   2bc2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2bc2e:	466d      	mov	r5, sp
   2bc30:	b088      	sub	sp, #32
   2bc32:	466b      	mov	r3, sp
   2bc34:	f113 0210 	adds.w	r2, r3, #16
   2bc38:	d036      	beq.n	2bca8 <flash_nrf_read+0xac>
   2bc3a:	2110      	movs	r1, #16
   2bc3c:	b162      	cbz	r2, 2bc58 <flash_nrf_read+0x5c>
   2bc3e:	4608      	mov	r0, r1
   2bc40:	2904      	cmp	r1, #4
   2bc42:	dd03      	ble.n	2bc4c <flash_nrf_read+0x50>
   2bc44:	f8df c07c 	ldr.w	ip, [pc, #124]	; 2bcc4 <flash_nrf_read+0xc8>
   2bc48:	f8c3 c014 	str.w	ip, [r3, #20]
   2bc4c:	2808      	cmp	r0, #8
   2bc4e:	dd00      	ble.n	2bc52 <flash_nrf_read+0x56>
   2bc50:	619e      	str	r6, [r3, #24]
   2bc52:	280c      	cmp	r0, #12
   2bc54:	dd00      	ble.n	2bc58 <flash_nrf_read+0x5c>
   2bc56:	61dc      	str	r4, [r3, #28]
   2bc58:	290f      	cmp	r1, #15
   2bc5a:	dd28      	ble.n	2bcae <flash_nrf_read+0xb2>
   2bc5c:	2410      	movs	r4, #16
   2bc5e:	b13a      	cbz	r2, 2bc70 <flash_nrf_read+0x74>
   2bc60:	2104      	movs	r1, #4
   2bc62:	7139      	strb	r1, [r7, #4]
   2bc64:	2100      	movs	r1, #0
   2bc66:	7179      	strb	r1, [r7, #5]
   2bc68:	71b9      	strb	r1, [r7, #6]
   2bc6a:	71f9      	strb	r1, [r7, #7]
   2bc6c:	6878      	ldr	r0, [r7, #4]
   2bc6e:	6118      	str	r0, [r3, #16]
   2bc70:	2100      	movs	r1, #0
   2bc72:	f36f 0100 	bfc	r1, #0, #1
   2bc76:	f36f 0141 	bfc	r1, #1, #1
   2bc7a:	f36f 0182 	bfc	r1, #2, #1
   2bc7e:	f36f 01c5 	bfc	r1, #3, #3
   2bc82:	2301      	movs	r3, #1
   2bc84:	f363 1188 	bfi	r1, r3, #6, #3
   2bc88:	f404 747d 	and.w	r4, r4, #1012	; 0x3f4
   2bc8c:	f364 2152 	bfi	r1, r4, #9, #10
   2bc90:	f36f 41de 	bfc	r1, #19, #12
   2bc94:	f36f 71df 	bfc	r1, #31, #1
   2bc98:	2300      	movs	r3, #0
   2bc9a:	480b      	ldr	r0, [pc, #44]	; (2bcc8 <flash_nrf_read+0xcc>)
   2bc9c:	f7ea fe56 	bl	1694c <z_impl_z_log_msg_static_create>
   2bca0:	46ad      	mov	sp, r5
		return -EINVAL;
   2bca2:	f06f 0015 	mvn.w	r0, #21
   2bca6:	e7bf      	b.n	2bc28 <flash_nrf_read+0x2c>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   2bca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2bcac:	e7c6      	b.n	2bc3c <flash_nrf_read+0x40>
   2bcae:	f06f 041b 	mvn.w	r4, #27
   2bcb2:	e7d4      	b.n	2bc5e <flash_nrf_read+0x62>
		return soc_secure_mem_read(data, (void *)addr, len);
   2bcb4:	4622      	mov	r2, r4
   2bcb6:	4631      	mov	r1, r6
   2bcb8:	4628      	mov	r0, r5
   2bcba:	f00a fc32 	bl	36522 <soc_secure_mem_read>
   2bcbe:	e7b3      	b.n	2bc28 <flash_nrf_read+0x2c>
		return 0;
   2bcc0:	2000      	movs	r0, #0
   2bcc2:	e7b1      	b.n	2bc28 <flash_nrf_read+0x2c>
   2bcc4:	00044ed4 	.word	0x00044ed4
   2bcc8:	0003f438 	.word	0x0003f438

0002bccc <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   2bccc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2bcce:	2201      	movs	r2, #1
   2bcd0:	4611      	mov	r1, r2
   2bcd2:	4806      	ldr	r0, [pc, #24]	; (2bcec <nrf_flash_init+0x20>)
   2bcd4:	f012 fe99 	bl	3ea0a <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   2bcd8:	f011 fd4c 	bl	3d774 <nrfx_nvmc_flash_page_count_get>
   2bcdc:	4c04      	ldr	r4, [pc, #16]	; (2bcf0 <nrf_flash_init+0x24>)
   2bcde:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   2bce0:	f011 fd44 	bl	3d76c <nrfx_nvmc_flash_page_size_get>
   2bce4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   2bce6:	2000      	movs	r0, #0
   2bce8:	bd10      	pop	{r4, pc}
   2bcea:	bf00      	nop
   2bcec:	2000c400 	.word	0x2000c400
   2bcf0:	2000c3f8 	.word	0x2000c3f8

0002bcf4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
   2bcf4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
   2bcf6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   2bcf8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   2bcfc:	d06f      	beq.n	2bdde <baudrate_set+0xea>
   2bcfe:	d83a      	bhi.n	2bd76 <baudrate_set+0x82>
   2bd00:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   2bd04:	d06e      	beq.n	2bde4 <baudrate_set+0xf0>
   2bd06:	d90a      	bls.n	2bd1e <baudrate_set+0x2a>
   2bd08:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   2bd0c:	d075      	beq.n	2bdfa <baudrate_set+0x106>
   2bd0e:	d924      	bls.n	2bd5a <baudrate_set+0x66>
   2bd10:	f647 2312 	movw	r3, #31250	; 0x7a12
   2bd14:	4299      	cmp	r1, r3
   2bd16:	d12b      	bne.n	2bd70 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   2bd18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2bd1c:	e013      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bd1e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   2bd22:	d061      	beq.n	2bde8 <baudrate_set+0xf4>
   2bd24:	d907      	bls.n	2bd36 <baudrate_set+0x42>
   2bd26:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   2bd2a:	d063      	beq.n	2bdf4 <baudrate_set+0x100>
   2bd2c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   2bd30:	d110      	bne.n	2bd54 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2bd32:	4b3c      	ldr	r3, [pc, #240]	; (2be24 <baudrate_set+0x130>)
   2bd34:	e007      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bd36:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   2bd3a:	d058      	beq.n	2bdee <baudrate_set+0xfa>
   2bd3c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   2bd40:	d105      	bne.n	2bd4e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   2bd42:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   2bd46:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   2bd4a:	2000      	movs	r0, #0
   2bd4c:	4770      	bx	lr
	switch (baudrate) {
   2bd4e:	f06f 0015 	mvn.w	r0, #21
   2bd52:	4770      	bx	lr
   2bd54:	f06f 0015 	mvn.w	r0, #21
   2bd58:	4770      	bx	lr
   2bd5a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   2bd5e:	d04e      	beq.n	2bdfe <baudrate_set+0x10a>
   2bd60:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   2bd64:	d101      	bne.n	2bd6a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2bd66:	4b30      	ldr	r3, [pc, #192]	; (2be28 <baudrate_set+0x134>)
   2bd68:	e7ed      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bd6a:	f06f 0015 	mvn.w	r0, #21
   2bd6e:	4770      	bx	lr
   2bd70:	f06f 0015 	mvn.w	r0, #21
   2bd74:	4770      	bx	lr
   2bd76:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   2bd7a:	d042      	beq.n	2be02 <baudrate_set+0x10e>
   2bd7c:	d909      	bls.n	2bd92 <baudrate_set+0x9e>
   2bd7e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   2bd82:	d046      	beq.n	2be12 <baudrate_set+0x11e>
   2bd84:	d91f      	bls.n	2bdc6 <baudrate_set+0xd2>
   2bd86:	4b29      	ldr	r3, [pc, #164]	; (2be2c <baudrate_set+0x138>)
   2bd88:	4299      	cmp	r1, r3
   2bd8a:	d148      	bne.n	2be1e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   2bd8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2bd90:	e7d9      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bd92:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   2bd96:	d037      	beq.n	2be08 <baudrate_set+0x114>
   2bd98:	d905      	bls.n	2bda6 <baudrate_set+0xb2>
   2bd9a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   2bd9e:	d10f      	bne.n	2bdc0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   2bda0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   2bda4:	e7cf      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bda6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   2bdaa:	4299      	cmp	r1, r3
   2bdac:	d02e      	beq.n	2be0c <baudrate_set+0x118>
   2bdae:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   2bdb2:	d102      	bne.n	2bdba <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2bdb4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2bdb8:	e7c5      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bdba:	f06f 0015 	mvn.w	r0, #21
   2bdbe:	4770      	bx	lr
   2bdc0:	f06f 0015 	mvn.w	r0, #21
   2bdc4:	4770      	bx	lr
   2bdc6:	4b1a      	ldr	r3, [pc, #104]	; (2be30 <baudrate_set+0x13c>)
   2bdc8:	4299      	cmp	r1, r3
   2bdca:	d025      	beq.n	2be18 <baudrate_set+0x124>
   2bdcc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   2bdd0:	d102      	bne.n	2bdd8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   2bdd2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   2bdd6:	e7b6      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bdd8:	f06f 0015 	mvn.w	r0, #21
   2bddc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2bdde:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   2bde2:	e7b0      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   2bde4:	4b13      	ldr	r3, [pc, #76]	; (2be34 <baudrate_set+0x140>)
   2bde6:	e7ae      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   2bde8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2bdec:	e7ab      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2bdee:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   2bdf2:	e7a8      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2bdf4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2bdf8:	e7a5      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2bdfa:	4b0f      	ldr	r3, [pc, #60]	; (2be38 <baudrate_set+0x144>)
   2bdfc:	e7a3      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   2bdfe:	4b0f      	ldr	r3, [pc, #60]	; (2be3c <baudrate_set+0x148>)
   2be00:	e7a1      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2be02:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2be06:	e79e      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2be08:	4b0d      	ldr	r3, [pc, #52]	; (2be40 <baudrate_set+0x14c>)
   2be0a:	e79c      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2be0c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2be10:	e799      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2be12:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2be16:	e796      	b.n	2bd46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2be18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2be1c:	e793      	b.n	2bd46 <baudrate_set+0x52>
	switch (baudrate) {
   2be1e:	f06f 0015 	mvn.w	r0, #21
}
   2be22:	4770      	bx	lr
   2be24:	0013b000 	.word	0x0013b000
   2be28:	004ea000 	.word	0x004ea000
   2be2c:	000f4240 	.word	0x000f4240
   2be30:	0003d090 	.word	0x0003d090
   2be34:	00275000 	.word	0x00275000
   2be38:	0075c000 	.word	0x0075c000
   2be3c:	003af000 	.word	0x003af000
   2be40:	013a9000 	.word	0x013a9000

0002be44 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   2be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2be46:	4605      	mov	r5, r0
   2be48:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
   2be4a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   2be4c:	f012 fd33 	bl	3e8b6 <k_is_in_isr>
   2be50:	b910      	cbnz	r0, 2be58 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2be52:	4b1a      	ldr	r3, [pc, #104]	; (2bebc <uarte_nrfx_poll_out+0x78>)
   2be54:	781b      	ldrb	r3, [r3, #0]
   2be56:	b983      	cbnz	r3, 2be7a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   2be58:	f04f 0320 	mov.w	r3, #32
   2be5c:	f3ef 8411 	mrs	r4, BASEPRI
   2be60:	f383 8812 	msr	BASEPRI_MAX, r3
   2be64:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   2be68:	4628      	mov	r0, r5
   2be6a:	f010 fd03 	bl	3c874 <is_tx_ready>
   2be6e:	b948      	cbnz	r0, 2be84 <uarte_nrfx_poll_out+0x40>
	__asm__ volatile(
   2be70:	f384 8811 	msr	BASEPRI, r4
   2be74:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   2be78:	e7ee      	b.n	2be58 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   2be7a:	4628      	mov	r0, r5
   2be7c:	f010 fe10 	bl	3caa0 <wait_tx_ready>
   2be80:	4604      	mov	r4, r0
   2be82:	e007      	b.n	2be94 <uarte_nrfx_poll_out+0x50>
				if (data->async && data->async->tx_size &&
   2be84:	68fb      	ldr	r3, [r7, #12]
   2be86:	b12b      	cbz	r3, 2be94 <uarte_nrfx_poll_out+0x50>
   2be88:	68da      	ldr	r2, [r3, #12]
   2be8a:	b11a      	cbz	r2, 2be94 <uarte_nrfx_poll_out+0x50>
					data->async->tx_amount < 0) {
   2be8c:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   2be90:	2a00      	cmp	r2, #0
   2be92:	db0b      	blt.n	2beac <uarte_nrfx_poll_out+0x68>
	}

	*data->char_out = c;
   2be94:	697b      	ldr	r3, [r7, #20]
   2be96:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   2be98:	2201      	movs	r2, #1
   2be9a:	6979      	ldr	r1, [r7, #20]
   2be9c:	4628      	mov	r0, r5
   2be9e:	f010 fd0b 	bl	3c8b8 <tx_start>
	__asm__ volatile(
   2bea2:	f384 8811 	msr	BASEPRI, r4
   2bea6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   2beaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	const struct uarte_nrfx_config *config = dev->config;
   2beac:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2beae:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
   2beb0:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   2beb4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
   2beb8:	e7ec      	b.n	2be94 <uarte_nrfx_poll_out+0x50>
   2beba:	bf00      	nop
   2bebc:	2000cabb 	.word	0x2000cabb

0002bec0 <nrfx_gppi_event_endpoint_setup>:
    NRFX_ASSERT(eep);
   2bec0:	b121      	cbz	r1, 2becc <nrfx_gppi_event_endpoint_setup+0xc>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   2bec2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   2bec6:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   2beca:	4770      	bx	lr
{
   2becc:	b510      	push	{r4, lr}
    NRFX_ASSERT(eep);
   2bece:	4c06      	ldr	r4, [pc, #24]	; (2bee8 <nrfx_gppi_event_endpoint_setup+0x28>)
   2bed0:	f44f 7312 	mov.w	r3, #584	; 0x248
   2bed4:	4622      	mov	r2, r4
   2bed6:	4905      	ldr	r1, [pc, #20]	; (2beec <nrfx_gppi_event_endpoint_setup+0x2c>)
   2bed8:	4805      	ldr	r0, [pc, #20]	; (2bef0 <nrfx_gppi_event_endpoint_setup+0x30>)
   2beda:	f00a f9db 	bl	36294 <assert_print>
   2bede:	f44f 7112 	mov.w	r1, #584	; 0x248
   2bee2:	4620      	mov	r0, r4
   2bee4:	f00a f9cf 	bl	36286 <assert_post_action>
   2bee8:	00040c9c 	.word	0x00040c9c
   2beec:	00040cd4 	.word	0x00040cd4
   2bef0:	0003f72c 	.word	0x0003f72c

0002bef4 <nrfx_gppi_task_endpoint_setup>:
    NRFX_ASSERT(tep);
   2bef4:	b121      	cbz	r1, 2bf00 <nrfx_gppi_task_endpoint_setup+0xc>
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   2bef6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   2befa:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
   2befe:	4770      	bx	lr
{
   2bf00:	b510      	push	{r4, lr}
    NRFX_ASSERT(tep);
   2bf02:	4c06      	ldr	r4, [pc, #24]	; (2bf1c <nrfx_gppi_task_endpoint_setup+0x28>)
   2bf04:	f240 234e 	movw	r3, #590	; 0x24e
   2bf08:	4622      	mov	r2, r4
   2bf0a:	4905      	ldr	r1, [pc, #20]	; (2bf20 <nrfx_gppi_task_endpoint_setup+0x2c>)
   2bf0c:	4805      	ldr	r0, [pc, #20]	; (2bf24 <nrfx_gppi_task_endpoint_setup+0x30>)
   2bf0e:	f00a f9c1 	bl	36294 <assert_print>
   2bf12:	f240 214e 	movw	r1, #590	; 0x24e
   2bf16:	4620      	mov	r0, r4
   2bf18:	f00a f9b5 	bl	36286 <assert_post_action>
   2bf1c:	00040c9c 	.word	0x00040c9c
   2bf20:	00040cd8 	.word	0x00040cd8
   2bf24:	0003f72c 	.word	0x0003f72c

0002bf28 <uarte_nrfx_rx_enable>:
{
   2bf28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bf2c:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
   2bf2e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
   2bf30:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
   2bf34:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
   2bf38:	f899 2008 	ldrb.w	r2, [r9, #8]
   2bf3c:	2a00      	cmp	r2, #0
   2bf3e:	d141      	bne.n	2bfc4 <uarte_nrfx_rx_enable+0x9c>
   2bf40:	4680      	mov	r8, r0
   2bf42:	460f      	mov	r7, r1
	if (data->async->rx_enabled) {
   2bf44:	68e2      	ldr	r2, [r4, #12]
   2bf46:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   2bf4a:	2900      	cmp	r1, #0
   2bf4c:	d17e      	bne.n	2c04c <uarte_nrfx_rx_enable+0x124>
	data->async->rx_timeout = timeout;
   2bf4e:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   2bf50:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   2bf54:	dd46      	ble.n	2bfe4 <uarte_nrfx_rx_enable+0xbc>
   2bf56:	4a3f      	ldr	r2, [pc, #252]	; (2c054 <uarte_nrfx_rx_enable+0x12c>)
   2bf58:	fb82 1203 	smull	r1, r2, r2, r3
   2bf5c:	17db      	asrs	r3, r3, #31
   2bf5e:	ebc3 0362 	rsb	r3, r3, r2, asr #1
	data->async->rx_timeout_slab =
   2bf62:	68e2      	ldr	r2, [r4, #12]
   2bf64:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   2bf66:	68e3      	ldr	r3, [r4, #12]
   2bf68:	659f      	str	r7, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   2bf6a:	68e3      	ldr	r3, [r4, #12]
   2bf6c:	65de      	str	r6, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   2bf6e:	68e2      	ldr	r2, [r4, #12]
   2bf70:	2300      	movs	r3, #0
   2bf72:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   2bf74:	68e2      	ldr	r2, [r4, #12]
   2bf76:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   2bf78:	68e2      	ldr	r2, [r4, #12]
   2bf7a:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2bf7c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2bf80:	f013 0f10 	tst.w	r3, #16
   2bf84:	d003      	beq.n	2bf8e <uarte_nrfx_rx_enable+0x66>
		if (data->async->rx_flush_cnt) {
   2bf86:	68e1      	ldr	r1, [r4, #12]
   2bf88:	f891 20c9 	ldrb.w	r2, [r1, #201]	; 0xc9
   2bf8c:	bb62      	cbnz	r2, 2bfe8 <uarte_nrfx_rx_enable+0xc0>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2bf8e:	f8c5 7534 	str.w	r7, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2bf92:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2bf96:	2300      	movs	r3, #0
   2bf98:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   2bf9c:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   2bfa0:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
   2bfa4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
   2bfa8:	68e3      	ldr	r3, [r4, #12]
   2bfaa:	2201      	movs	r2, #1
   2bfac:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2bfb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2bfb4:	f013 0f10 	tst.w	r3, #16
   2bfb8:	d137      	bne.n	2c02a <uarte_nrfx_rx_enable+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2bfba:	2301      	movs	r3, #1
   2bfbc:	602b      	str	r3, [r5, #0]
	return 0;
   2bfbe:	2000      	movs	r0, #0
}
   2bfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		__ASSERT(false, "TX only UARTE instance");
   2bfc4:	4c24      	ldr	r4, [pc, #144]	; (2c058 <uarte_nrfx_rx_enable+0x130>)
   2bfc6:	f240 337d 	movw	r3, #893	; 0x37d
   2bfca:	4622      	mov	r2, r4
   2bfcc:	4923      	ldr	r1, [pc, #140]	; (2c05c <uarte_nrfx_rx_enable+0x134>)
   2bfce:	4824      	ldr	r0, [pc, #144]	; (2c060 <uarte_nrfx_rx_enable+0x138>)
   2bfd0:	f00a f960 	bl	36294 <assert_print>
   2bfd4:	4823      	ldr	r0, [pc, #140]	; (2c064 <uarte_nrfx_rx_enable+0x13c>)
   2bfd6:	f00a f95d 	bl	36294 <assert_print>
   2bfda:	f240 317d 	movw	r1, #893	; 0x37d
   2bfde:	4620      	mov	r0, r4
   2bfe0:	f00a f951 	bl	36286 <assert_post_action>
		MAX(timeout / RX_TIMEOUT_DIV,
   2bfe4:	235c      	movs	r3, #92	; 0x5c
   2bfe6:	e7bc      	b.n	2bf62 <uarte_nrfx_rx_enable+0x3a>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   2bfe8:	42b2      	cmp	r2, r6
   2bfea:	bf28      	it	cs
   2bfec:	4632      	movcs	r2, r6
   2bfee:	4692      	mov	sl, r2
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   2bff0:	31c4      	adds	r1, #196	; 0xc4
   2bff2:	4638      	mov	r0, r7
   2bff4:	f00c fa01 	bl	383fa <memcpy>
			buf += cpy_len;
   2bff8:	4457      	add	r7, sl
			if (!len) {
   2bffa:	ebb6 060a 	subs.w	r6, r6, sl
   2bffe:	d1c6      	bne.n	2bf8e <uarte_nrfx_rx_enable+0x66>
				data->async->rx_flush_cnt -= cpy_len;
   2c000:	68e2      	ldr	r2, [r4, #12]
   2c002:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   2c006:	eba3 030a 	sub.w	r3, r3, sl
   2c00a:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   2c00e:	4651      	mov	r1, sl
   2c010:	4640      	mov	r0, r8
   2c012:	f010 fca0 	bl	3c956 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   2c016:	68e1      	ldr	r1, [r4, #12]
   2c018:	3158      	adds	r1, #88	; 0x58
   2c01a:	4640      	mov	r0, r8
   2c01c:	f010 fcb3 	bl	3c986 <rx_buf_release>
				notify_rx_disable(dev);
   2c020:	4640      	mov	r0, r8
   2c022:	f010 fcc7 	bl	3c9b4 <notify_rx_disable>
				return 0;
   2c026:	2000      	movs	r0, #0
   2c028:	e7ca      	b.n	2bfc0 <uarte_nrfx_rx_enable+0x98>
	__asm__ volatile(
   2c02a:	f04f 0320 	mov.w	r3, #32
   2c02e:	f3ef 8411 	mrs	r4, BASEPRI
   2c032:	f383 8812 	msr	BASEPRI_MAX, r3
   2c036:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
   2c03a:	2102      	movs	r1, #2
   2c03c:	4640      	mov	r0, r8
   2c03e:	f010 fc2d 	bl	3c89c <uarte_enable>
	__asm__ volatile(
   2c042:	f384 8811 	msr	BASEPRI, r4
   2c046:	f3bf 8f6f 	isb	sy
}
   2c04a:	e7b6      	b.n	2bfba <uarte_nrfx_rx_enable+0x92>
		return -EBUSY;
   2c04c:	f06f 000f 	mvn.w	r0, #15
   2c050:	e7b6      	b.n	2bfc0 <uarte_nrfx_rx_enable+0x98>
   2c052:	bf00      	nop
   2c054:	66666667 	.word	0x66666667
   2c058:	00044f54 	.word	0x00044f54
   2c05c:	0003f964 	.word	0x0003f964
   2c060:	0003f72c 	.word	0x0003f72c
   2c064:	00044f88 	.word	0x00044f88

0002c068 <uarte_nrfx_tx>:
{
   2c068:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c06a:	b083      	sub	sp, #12
   2c06c:	4605      	mov	r5, r0
   2c06e:	461e      	mov	r6, r3
	struct uarte_nrfx_data *data = dev->data;
   2c070:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2c072:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c074:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   2c078:	f04f 0020 	mov.w	r0, #32
   2c07c:	f3ef 8311 	mrs	r3, BASEPRI
   2c080:	f380 8812 	msr	BASEPRI_MAX, r0
   2c084:	f3bf 8f6f 	isb	sy
   2c088:	461f      	mov	r7, r3
	if (data->async->tx_size) {
   2c08a:	68e3      	ldr	r3, [r4, #12]
   2c08c:	68d8      	ldr	r0, [r3, #12]
   2c08e:	b9e8      	cbnz	r0, 2c0cc <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
   2c090:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   2c092:	68e3      	ldr	r3, [r4, #12]
   2c094:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   2c096:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2c09a:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
   2c09e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   2c0a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2c0a6:	d118      	bne.n	2c0da <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   2c0a8:	68e3      	ldr	r3, [r4, #12]
   2c0aa:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   2c0ac:	68e3      	ldr	r3, [r4, #12]
   2c0ae:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   2c0b0:	4621      	mov	r1, r4
   2c0b2:	4628      	mov	r0, r5
   2c0b4:	f010 fc2c 	bl	3c910 <start_tx_locked>
	__asm__ volatile(
   2c0b8:	f387 8811 	msr	BASEPRI, r7
   2c0bc:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   2c0c0:	7ae3      	ldrb	r3, [r4, #11]
   2c0c2:	2b01      	cmp	r3, #1
   2c0c4:	d010      	beq.n	2c0e8 <uarte_nrfx_tx+0x80>
	return 0;
   2c0c6:	2000      	movs	r0, #0
}
   2c0c8:	b003      	add	sp, #12
   2c0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c0cc:	f387 8811 	msr	BASEPRI, r7
   2c0d0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   2c0d4:	f06f 000f 	mvn.w	r0, #15
   2c0d8:	e7f6      	b.n	2c0c8 <uarte_nrfx_tx+0x60>
		data->async->tx_cache_offset = 0;
   2c0da:	68e3      	ldr	r3, [r4, #12]
   2c0dc:	2200      	movs	r2, #0
   2c0de:	61da      	str	r2, [r3, #28]
		(void)setup_tx_cache(data);
   2c0e0:	4620      	mov	r0, r4
   2c0e2:	f010 fe17 	bl	3cd14 <setup_tx_cache>
   2c0e6:	e7e3      	b.n	2c0b0 <uarte_nrfx_tx+0x48>
	    && timeout != SYS_FOREVER_US) {
   2c0e8:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   2c0ec:	d101      	bne.n	2c0f2 <uarte_nrfx_tx+0x8a>
	return 0;
   2c0ee:	2000      	movs	r0, #0
   2c0f0:	e7ea      	b.n	2c0c8 <uarte_nrfx_tx+0x60>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   2c0f2:	68e4      	ldr	r4, [r4, #12]
   2c0f4:	3420      	adds	r4, #32
   2c0f6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   2c0fa:	17f1      	asrs	r1, r6, #31
   2c0fc:	03c9      	lsls	r1, r1, #15
   2c0fe:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
   2c102:	03f6      	lsls	r6, r6, #15
   2c104:	4809      	ldr	r0, [pc, #36]	; (2c12c <uarte_nrfx_tx+0xc4>)
   2c106:	1830      	adds	r0, r6, r0
   2c108:	4a09      	ldr	r2, [pc, #36]	; (2c130 <uarte_nrfx_tx+0xc8>)
   2c10a:	f04f 0300 	mov.w	r3, #0
   2c10e:	f141 0100 	adc.w	r1, r1, #0
   2c112:	f7e4 f821 	bl	10158 <__aeabi_uldivmod>
   2c116:	4602      	mov	r2, r0
   2c118:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   2c11a:	2000      	movs	r0, #0
   2c11c:	2100      	movs	r1, #0
   2c11e:	e9cd 0100 	strd	r0, r1, [sp]
   2c122:	4620      	mov	r0, r4
   2c124:	f008 fd64 	bl	34bf0 <z_impl_k_timer_start>
	return 0;
   2c128:	2000      	movs	r0, #0
   2c12a:	e7cd      	b.n	2c0c8 <uarte_nrfx_tx+0x60>
   2c12c:	000f423f 	.word	0x000f423f
   2c130:	000f4240 	.word	0x000f4240

0002c134 <rxstarted_isr>:
{
   2c134:	b510      	push	{r4, lr}
   2c136:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
   2c138:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
   2c13a:	2300      	movs	r3, #0
   2c13c:	9303      	str	r3, [sp, #12]
   2c13e:	9304      	str	r3, [sp, #16]
   2c140:	9305      	str	r3, [sp, #20]
   2c142:	9306      	str	r3, [sp, #24]
   2c144:	9307      	str	r3, [sp, #28]
   2c146:	2303      	movs	r3, #3
   2c148:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   2c14c:	a903      	add	r1, sp, #12
   2c14e:	f010 fbfa 	bl	3c946 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   2c152:	68e3      	ldr	r3, [r4, #12]
   2c154:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   2c156:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2c15a:	d101      	bne.n	2c160 <rxstarted_isr+0x2c>
}
   2c15c:	b008      	add	sp, #32
   2c15e:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
   2c160:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   2c162:	68e3      	ldr	r3, [r4, #12]
   2c164:	f103 0480 	add.w	r4, r3, #128	; 0x80
			      K_USEC(data->async->rx_timeout_slab),
   2c168:	6f98      	ldr	r0, [r3, #120]	; 0x78
   2c16a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   2c16e:	17c1      	asrs	r1, r0, #31
   2c170:	03c9      	lsls	r1, r1, #15
   2c172:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   2c176:	03c0      	lsls	r0, r0, #15
   2c178:	4b08      	ldr	r3, [pc, #32]	; (2c19c <rxstarted_isr+0x68>)
   2c17a:	18c0      	adds	r0, r0, r3
   2c17c:	4a08      	ldr	r2, [pc, #32]	; (2c1a0 <rxstarted_isr+0x6c>)
   2c17e:	f04f 0300 	mov.w	r3, #0
   2c182:	f141 0100 	adc.w	r1, r1, #0
   2c186:	f7e3 ffe7 	bl	10158 <__aeabi_uldivmod>
   2c18a:	4602      	mov	r2, r0
   2c18c:	460b      	mov	r3, r1
   2c18e:	9000      	str	r0, [sp, #0]
   2c190:	9101      	str	r1, [sp, #4]
   2c192:	4620      	mov	r0, r4
   2c194:	f008 fd2c 	bl	34bf0 <z_impl_k_timer_start>
}
   2c198:	e7e0      	b.n	2c15c <rxstarted_isr+0x28>
   2c19a:	bf00      	nop
   2c19c:	000f423f 	.word	0x000f423f
   2c1a0:	000f4240 	.word	0x000f4240

0002c1a4 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   2c1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c1a6:	b089      	sub	sp, #36	; 0x24
   2c1a8:	4605      	mov	r5, r0
   2c1aa:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2c1ac:	f101 001c 	add.w	r0, r1, #28
   2c1b0:	f002 f978 	bl	2e4a4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2c1b4:	4b1f      	ldr	r3, [pc, #124]	; (2c234 <endtx_stoptx_ppi_init+0x90>)
   2c1b6:	4298      	cmp	r0, r3
   2c1b8:	d114      	bne.n	2c1e4 <endtx_stoptx_ppi_init+0x40>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   2c1ba:	7f26      	ldrb	r6, [r4, #28]
    return (uint32_t)p_reg + (uint32_t)task;
   2c1bc:	f105 070c 	add.w	r7, r5, #12
    nrfx_gppi_event_endpoint_setup(channel, eep);
   2c1c0:	f505 7190 	add.w	r1, r5, #288	; 0x120
   2c1c4:	4630      	mov	r0, r6
   2c1c6:	f7ff fe7b 	bl	2bec0 <nrfx_gppi_event_endpoint_setup>
    nrfx_gppi_task_endpoint_setup(channel, tep);
   2c1ca:	4639      	mov	r1, r7
   2c1cc:	4630      	mov	r0, r6
   2c1ce:	f7ff fe91 	bl	2bef4 <nrfx_gppi_task_endpoint_setup>
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2c1d2:	7f22      	ldrb	r2, [r4, #28]
   2c1d4:	2301      	movs	r3, #1
   2c1d6:	4093      	lsls	r3, r2
   2c1d8:	4a17      	ldr	r2, [pc, #92]	; (2c238 <endtx_stoptx_ppi_init+0x94>)
   2c1da:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   2c1de:	2000      	movs	r0, #0
}
   2c1e0:	b009      	add	sp, #36	; 0x24
   2c1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   2c1e4:	4b15      	ldr	r3, [pc, #84]	; (2c23c <endtx_stoptx_ppi_init+0x98>)
   2c1e6:	9307      	str	r3, [sp, #28]
   2c1e8:	2302      	movs	r3, #2
   2c1ea:	f88d 3004 	strb.w	r3, [sp, #4]
   2c1ee:	2300      	movs	r3, #0
   2c1f0:	f88d 3005 	strb.w	r3, [sp, #5]
   2c1f4:	f88d 3006 	strb.w	r3, [sp, #6]
   2c1f8:	f88d 3007 	strb.w	r3, [sp, #7]
   2c1fc:	9a01      	ldr	r2, [sp, #4]
   2c1fe:	9206      	str	r2, [sp, #24]
   2c200:	4619      	mov	r1, r3
   2c202:	f363 0100 	bfi	r1, r3, #0, #1
   2c206:	f363 0141 	bfi	r1, r3, #1, #1
   2c20a:	f363 0182 	bfi	r1, r3, #2, #1
   2c20e:	f363 01c5 	bfi	r1, r3, #3, #3
   2c212:	2201      	movs	r2, #1
   2c214:	f362 1188 	bfi	r1, r2, #6, #3
   2c218:	2208      	movs	r2, #8
   2c21a:	f362 2152 	bfi	r1, r2, #9, #10
   2c21e:	f363 41de 	bfi	r1, r3, #19, #12
   2c222:	f363 71df 	bfi	r1, r3, #31, #1
   2c226:	aa06      	add	r2, sp, #24
   2c228:	4805      	ldr	r0, [pc, #20]	; (2c240 <endtx_stoptx_ppi_init+0x9c>)
   2c22a:	f7ea fb8f 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EIO;
   2c22e:	f06f 0004 	mvn.w	r0, #4
   2c232:	e7d5      	b.n	2c1e0 <endtx_stoptx_ppi_init+0x3c>
   2c234:	0bad0000 	.word	0x0bad0000
   2c238:	40017000 	.word	0x40017000
   2c23c:	00044fa4 	.word	0x00044fa4
   2c240:	0003f4c8 	.word	0x0003f4c8

0002c244 <uarte_nrfx_init>:
{
   2c244:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
   2c246:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   2c248:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2c24a:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
   2c24c:	f010 fb59 	bl	3c902 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
   2c250:	4606      	mov	r6, r0
   2c252:	bb90      	cbnz	r0, 2c2ba <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   2c254:	68eb      	ldr	r3, [r5, #12]
   2c256:	2201      	movs	r2, #1
   2c258:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    p_reg->INTENSET = mask;
   2c25c:	4b18      	ldr	r3, [pc, #96]	; (2c2c0 <uarte_nrfx_init+0x7c>)
   2c25e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2c262:	2308      	movs	r3, #8
   2c264:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c268:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   2c26c:	b1a3      	cbz	r3, 2c298 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c26e:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c270:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   2c274:	b91b      	cbnz	r3, 2c27e <uarte_nrfx_init+0x3a>
   2c276:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   2c27a:	2b00      	cmp	r3, #0
   2c27c:	d0f8      	beq.n	2c270 <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c27e:	2300      	movs	r3, #0
   2c280:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2c284:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
   2c288:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2c28c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   2c290:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   2c294:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2c298:	68e8      	ldr	r0, [r5, #12]
   2c29a:	2200      	movs	r2, #0
   2c29c:	4909      	ldr	r1, [pc, #36]	; (2c2c4 <uarte_nrfx_init+0x80>)
   2c29e:	3080      	adds	r0, #128	; 0x80
   2c2a0:	f012 fd1f 	bl	3ece2 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   2c2a4:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
   2c2a6:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   2c2aa:	68e8      	ldr	r0, [r5, #12]
   2c2ac:	2200      	movs	r2, #0
   2c2ae:	4906      	ldr	r1, [pc, #24]	; (2c2c8 <uarte_nrfx_init+0x84>)
   2c2b0:	3020      	adds	r0, #32
   2c2b2:	f012 fd16 	bl	3ece2 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   2c2b6:	68eb      	ldr	r3, [r5, #12]
   2c2b8:	655d      	str	r5, [r3, #84]	; 0x54
}
   2c2ba:	4630      	mov	r0, r6
   2c2bc:	bd70      	pop	{r4, r5, r6, pc}
   2c2be:	bf00      	nop
   2c2c0:	000a0210 	.word	0x000a0210
   2c2c4:	0003cbc3 	.word	0x0003cbc3
   2c2c8:	0003cbb7 	.word	0x0003cbb7

0002c2cc <hci_ept_bound>:
	net_buf_unref(buf);
	return 0;
}

static void hci_ept_bound(void *priv)
{
   2c2cc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   2c2ce:	4802      	ldr	r0, [pc, #8]	; (2c2d8 <hci_ept_bound+0xc>)
   2c2d0:	f005 fd86 	bl	31de0 <z_impl_k_sem_give>
	k_sem_give(&ipc_bound_sem);
}
   2c2d4:	bd08      	pop	{r3, pc}
   2c2d6:	bf00      	nop
   2c2d8:	2000897c 	.word	0x2000897c

0002c2dc <bt_rpmsg_init>:
	.quirks         = BT_QUIRK_NO_AUTO_DLE,
#endif
};

static int bt_rpmsg_init(const struct device *unused)
{
   2c2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c2de:	b083      	sub	sp, #12
   2c2e0:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused);

	int err;

	err = bt_hci_driver_register(&drv);
   2c2e2:	4823      	ldr	r0, [pc, #140]	; (2c370 <bt_rpmsg_init+0x94>)
   2c2e4:	f7f1 fd8c 	bl	1de00 <bt_hci_driver_register>
	if (err < 0) {
   2c2e8:	1e04      	subs	r4, r0, #0
   2c2ea:	db03      	blt.n	2c2f4 <bt_rpmsg_init+0x18>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
	}

	return err;
}
   2c2ec:	4620      	mov	r0, r4
   2c2ee:	370c      	adds	r7, #12
   2c2f0:	46bd      	mov	sp, r7
   2c2f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   2c2f4:	466d      	mov	r5, sp
   2c2f6:	b088      	sub	sp, #32
   2c2f8:	466b      	mov	r3, sp
   2c2fa:	f113 0210 	adds.w	r2, r3, #16
   2c2fe:	d030      	beq.n	2c362 <bt_rpmsg_init+0x86>
   2c300:	210c      	movs	r1, #12
   2c302:	b13a      	cbz	r2, 2c314 <bt_rpmsg_init+0x38>
   2c304:	4608      	mov	r0, r1
   2c306:	2904      	cmp	r1, #4
   2c308:	dd01      	ble.n	2c30e <bt_rpmsg_init+0x32>
   2c30a:	4e1a      	ldr	r6, [pc, #104]	; (2c374 <bt_rpmsg_init+0x98>)
   2c30c:	615e      	str	r6, [r3, #20]
   2c30e:	2808      	cmp	r0, #8
   2c310:	dd00      	ble.n	2c314 <bt_rpmsg_init+0x38>
   2c312:	619c      	str	r4, [r3, #24]
   2c314:	290b      	cmp	r1, #11
   2c316:	dd27      	ble.n	2c368 <bt_rpmsg_init+0x8c>
   2c318:	f04f 0c0c 	mov.w	ip, #12
   2c31c:	b13a      	cbz	r2, 2c32e <bt_rpmsg_init+0x52>
   2c31e:	2103      	movs	r1, #3
   2c320:	7139      	strb	r1, [r7, #4]
   2c322:	2100      	movs	r1, #0
   2c324:	7179      	strb	r1, [r7, #5]
   2c326:	71b9      	strb	r1, [r7, #6]
   2c328:	71f9      	strb	r1, [r7, #7]
   2c32a:	6878      	ldr	r0, [r7, #4]
   2c32c:	6118      	str	r0, [r3, #16]
   2c32e:	2100      	movs	r1, #0
   2c330:	f36f 0100 	bfc	r1, #0, #1
   2c334:	f36f 0141 	bfc	r1, #1, #1
   2c338:	f36f 0182 	bfc	r1, #2, #1
   2c33c:	f36f 01c5 	bfc	r1, #3, #3
   2c340:	2301      	movs	r3, #1
   2c342:	f363 1188 	bfi	r1, r3, #6, #3
   2c346:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   2c34a:	f36c 2152 	bfi	r1, ip, #9, #10
   2c34e:	f36f 41de 	bfc	r1, #19, #12
   2c352:	f36f 71df 	bfc	r1, #31, #1
   2c356:	2300      	movs	r3, #0
   2c358:	4807      	ldr	r0, [pc, #28]	; (2c378 <bt_rpmsg_init+0x9c>)
   2c35a:	f7ea faf7 	bl	1694c <z_impl_z_log_msg_static_create>
   2c35e:	46ad      	mov	sp, r5
	return err;
   2c360:	e7c4      	b.n	2c2ec <bt_rpmsg_init+0x10>
		LOG_ERR("Failed to register BT HIC driver (err %d)", err);
   2c362:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c366:	e7cc      	b.n	2c302 <bt_rpmsg_init+0x26>
   2c368:	f06f 0c1b 	mvn.w	ip, #27
   2c36c:	e7d6      	b.n	2c31c <bt_rpmsg_init+0x40>
   2c36e:	bf00      	nop
   2c370:	000452ac 	.word	0x000452ac
   2c374:	00045048 	.word	0x00045048
   2c378:	0003f3d8 	.word	0x0003f3d8

0002c37c <bt_rpmsg_send>:
{
   2c37c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c37e:	b083      	sub	sp, #12
   2c380:	af00      	add	r7, sp, #0
   2c382:	4604      	mov	r4, r0
   2c384:	7e01      	ldrb	r1, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   2c386:	2902      	cmp	r1, #2
   2c388:	d043      	beq.n	2c412 <bt_rpmsg_send+0x96>
   2c38a:	4608      	mov	r0, r1
   2c38c:	2904      	cmp	r1, #4
   2c38e:	d03f      	beq.n	2c410 <bt_rpmsg_send+0x94>
   2c390:	2900      	cmp	r1, #0
   2c392:	d050      	beq.n	2c436 <bt_rpmsg_send+0xba>
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   2c394:	466e      	mov	r6, sp
   2c396:	b088      	sub	sp, #32
   2c398:	466b      	mov	r3, sp
   2c39a:	f113 0210 	adds.w	r2, r3, #16
   2c39e:	d031      	beq.n	2c404 <bt_rpmsg_send+0x88>
   2c3a0:	210c      	movs	r1, #12
   2c3a2:	b14a      	cbz	r2, 2c3b8 <bt_rpmsg_send+0x3c>
   2c3a4:	460d      	mov	r5, r1
   2c3a6:	2904      	cmp	r1, #4
   2c3a8:	dd03      	ble.n	2c3b2 <bt_rpmsg_send+0x36>
   2c3aa:	f8df c10c 	ldr.w	ip, [pc, #268]	; 2c4b8 <bt_rpmsg_send+0x13c>
   2c3ae:	f8c3 c014 	str.w	ip, [r3, #20]
   2c3b2:	2d08      	cmp	r5, #8
   2c3b4:	dd00      	ble.n	2c3b8 <bt_rpmsg_send+0x3c>
   2c3b6:	6198      	str	r0, [r3, #24]
   2c3b8:	290b      	cmp	r1, #11
   2c3ba:	dd26      	ble.n	2c40a <bt_rpmsg_send+0x8e>
   2c3bc:	250c      	movs	r5, #12
   2c3be:	b13a      	cbz	r2, 2c3d0 <bt_rpmsg_send+0x54>
   2c3c0:	2103      	movs	r1, #3
   2c3c2:	7139      	strb	r1, [r7, #4]
   2c3c4:	2100      	movs	r1, #0
   2c3c6:	7179      	strb	r1, [r7, #5]
   2c3c8:	71b9      	strb	r1, [r7, #6]
   2c3ca:	71f9      	strb	r1, [r7, #7]
   2c3cc:	6878      	ldr	r0, [r7, #4]
   2c3ce:	6118      	str	r0, [r3, #16]
   2c3d0:	2100      	movs	r1, #0
   2c3d2:	f36f 0100 	bfc	r1, #0, #1
   2c3d6:	f36f 0141 	bfc	r1, #1, #1
   2c3da:	f36f 0182 	bfc	r1, #2, #1
   2c3de:	f36f 01c5 	bfc	r1, #3, #3
   2c3e2:	2301      	movs	r3, #1
   2c3e4:	f363 1188 	bfi	r1, r3, #6, #3
   2c3e8:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   2c3ec:	f365 2152 	bfi	r1, r5, #9, #10
   2c3f0:	f36f 41de 	bfc	r1, #19, #12
   2c3f4:	f36f 71df 	bfc	r1, #31, #1
   2c3f8:	2300      	movs	r3, #0
   2c3fa:	4830      	ldr	r0, [pc, #192]	; (2c4bc <bt_rpmsg_send+0x140>)
   2c3fc:	f7ea faa6 	bl	1694c <z_impl_z_log_msg_static_create>
   2c400:	46b5      	mov	sp, r6
		goto done;
   2c402:	e011      	b.n	2c428 <bt_rpmsg_send+0xac>
		LOG_ERR("Unknown type %u", bt_buf_get_type(buf));
   2c404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c408:	e7cb      	b.n	2c3a2 <bt_rpmsg_send+0x26>
   2c40a:	f06f 051b 	mvn.w	r5, #27
   2c40e:	e7d6      	b.n	2c3be <bt_rpmsg_send+0x42>
		pkt_indicator = RPMSG_ISO;
   2c410:	2105      	movs	r1, #5
	net_buf_simple_push_u8(&buf->b, val);
   2c412:	f104 000c 	add.w	r0, r4, #12
   2c416:	f00f fce9 	bl	3bdec <net_buf_simple_push_u8>
	err = ipc_service_send(&hci_ept, buf->data, buf->len);
   2c41a:	8a22      	ldrh	r2, [r4, #16]
   2c41c:	68e1      	ldr	r1, [r4, #12]
   2c41e:	4828      	ldr	r0, [pc, #160]	; (2c4c0 <bt_rpmsg_send+0x144>)
   2c420:	f7eb fc4e 	bl	17cc0 <ipc_service_send>
	if (err < 0) {
   2c424:	2800      	cmp	r0, #0
   2c426:	db08      	blt.n	2c43a <bt_rpmsg_send+0xbe>
	net_buf_unref(buf);
   2c428:	4620      	mov	r0, r4
   2c42a:	f7fd f93b 	bl	296a4 <net_buf_unref>
}
   2c42e:	2000      	movs	r0, #0
   2c430:	370c      	adds	r7, #12
   2c432:	46bd      	mov	sp, r7
   2c434:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pkt_indicator = RPMSG_CMD;
   2c436:	2101      	movs	r1, #1
   2c438:	e7eb      	b.n	2c412 <bt_rpmsg_send+0x96>
		LOG_ERR("Failed to send (err %d)", err);
   2c43a:	466d      	mov	r5, sp
   2c43c:	b088      	sub	sp, #32
   2c43e:	466b      	mov	r3, sp
   2c440:	f113 0210 	adds.w	r2, r3, #16
   2c444:	d032      	beq.n	2c4ac <bt_rpmsg_send+0x130>
   2c446:	210c      	movs	r1, #12
   2c448:	b14a      	cbz	r2, 2c45e <bt_rpmsg_send+0xe2>
   2c44a:	460e      	mov	r6, r1
   2c44c:	2904      	cmp	r1, #4
   2c44e:	dd03      	ble.n	2c458 <bt_rpmsg_send+0xdc>
   2c450:	f8df c070 	ldr.w	ip, [pc, #112]	; 2c4c4 <bt_rpmsg_send+0x148>
   2c454:	f8c3 c014 	str.w	ip, [r3, #20]
   2c458:	2e08      	cmp	r6, #8
   2c45a:	dd00      	ble.n	2c45e <bt_rpmsg_send+0xe2>
   2c45c:	6198      	str	r0, [r3, #24]
   2c45e:	290b      	cmp	r1, #11
   2c460:	dd27      	ble.n	2c4b2 <bt_rpmsg_send+0x136>
   2c462:	f04f 0c0c 	mov.w	ip, #12
   2c466:	b13a      	cbz	r2, 2c478 <bt_rpmsg_send+0xfc>
   2c468:	2103      	movs	r1, #3
   2c46a:	7139      	strb	r1, [r7, #4]
   2c46c:	2100      	movs	r1, #0
   2c46e:	7179      	strb	r1, [r7, #5]
   2c470:	71b9      	strb	r1, [r7, #6]
   2c472:	71f9      	strb	r1, [r7, #7]
   2c474:	6878      	ldr	r0, [r7, #4]
   2c476:	6118      	str	r0, [r3, #16]
   2c478:	2100      	movs	r1, #0
   2c47a:	f36f 0100 	bfc	r1, #0, #1
   2c47e:	f36f 0141 	bfc	r1, #1, #1
   2c482:	f36f 0182 	bfc	r1, #2, #1
   2c486:	f36f 01c5 	bfc	r1, #3, #3
   2c48a:	2301      	movs	r3, #1
   2c48c:	f363 1188 	bfi	r1, r3, #6, #3
   2c490:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   2c494:	f363 2152 	bfi	r1, r3, #9, #10
   2c498:	f36f 41de 	bfc	r1, #19, #12
   2c49c:	f36f 71df 	bfc	r1, #31, #1
   2c4a0:	2300      	movs	r3, #0
   2c4a2:	4806      	ldr	r0, [pc, #24]	; (2c4bc <bt_rpmsg_send+0x140>)
   2c4a4:	f7ea fa52 	bl	1694c <z_impl_z_log_msg_static_create>
   2c4a8:	46ad      	mov	sp, r5
   2c4aa:	e7bd      	b.n	2c428 <bt_rpmsg_send+0xac>
   2c4ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c4b0:	e7ca      	b.n	2c448 <bt_rpmsg_send+0xcc>
   2c4b2:	f06f 0c1b 	mvn.w	ip, #27
   2c4b6:	e7d6      	b.n	2c466 <bt_rpmsg_send+0xea>
   2c4b8:	00045074 	.word	0x00045074
   2c4bc:	0003f3d8 	.word	0x0003f3d8
   2c4c0:	2000c420 	.word	0x2000c420
   2c4c4:	00045084 	.word	0x00045084

0002c4c8 <bt_rpmsg_open>:
{
   2c4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c4ca:	b083      	sub	sp, #12
   2c4cc:	af00      	add	r7, sp, #0
	err = ipc_service_open_instance(hci_ipc_instance);
   2c4ce:	4869      	ldr	r0, [pc, #420]	; (2c674 <bt_rpmsg_open+0x1ac>)
   2c4d0:	f7eb fb2a 	bl	17b28 <ipc_service_open_instance>
	if (err && (err != -EALREADY)) {
   2c4d4:	2800      	cmp	r0, #0
   2c4d6:	d040      	beq.n	2c55a <bt_rpmsg_open+0x92>
   2c4d8:	4604      	mov	r4, r0
   2c4da:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2c4de:	d03c      	beq.n	2c55a <bt_rpmsg_open+0x92>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   2c4e0:	466d      	mov	r5, sp
   2c4e2:	b088      	sub	sp, #32
   2c4e4:	466b      	mov	r3, sp
   2c4e6:	f113 0210 	adds.w	r2, r3, #16
   2c4ea:	d030      	beq.n	2c54e <bt_rpmsg_open+0x86>
   2c4ec:	210c      	movs	r1, #12
   2c4ee:	b13a      	cbz	r2, 2c500 <bt_rpmsg_open+0x38>
   2c4f0:	4608      	mov	r0, r1
   2c4f2:	2904      	cmp	r1, #4
   2c4f4:	dd01      	ble.n	2c4fa <bt_rpmsg_open+0x32>
   2c4f6:	4e60      	ldr	r6, [pc, #384]	; (2c678 <bt_rpmsg_open+0x1b0>)
   2c4f8:	615e      	str	r6, [r3, #20]
   2c4fa:	2808      	cmp	r0, #8
   2c4fc:	dd00      	ble.n	2c500 <bt_rpmsg_open+0x38>
   2c4fe:	619c      	str	r4, [r3, #24]
   2c500:	290b      	cmp	r1, #11
   2c502:	dd27      	ble.n	2c554 <bt_rpmsg_open+0x8c>
   2c504:	f04f 0c0c 	mov.w	ip, #12
   2c508:	b13a      	cbz	r2, 2c51a <bt_rpmsg_open+0x52>
   2c50a:	2103      	movs	r1, #3
   2c50c:	7139      	strb	r1, [r7, #4]
   2c50e:	2100      	movs	r1, #0
   2c510:	7179      	strb	r1, [r7, #5]
   2c512:	71b9      	strb	r1, [r7, #6]
   2c514:	71f9      	strb	r1, [r7, #7]
   2c516:	6878      	ldr	r0, [r7, #4]
   2c518:	6118      	str	r0, [r3, #16]
   2c51a:	2100      	movs	r1, #0
   2c51c:	f36f 0100 	bfc	r1, #0, #1
   2c520:	f36f 0141 	bfc	r1, #1, #1
   2c524:	f36f 0182 	bfc	r1, #2, #1
   2c528:	f36f 01c5 	bfc	r1, #3, #3
   2c52c:	2301      	movs	r3, #1
   2c52e:	f363 1188 	bfi	r1, r3, #6, #3
   2c532:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
   2c536:	f363 2152 	bfi	r1, r3, #9, #10
   2c53a:	f36f 41de 	bfc	r1, #19, #12
   2c53e:	f36f 71df 	bfc	r1, #31, #1
   2c542:	2300      	movs	r3, #0
   2c544:	484d      	ldr	r0, [pc, #308]	; (2c67c <bt_rpmsg_open+0x1b4>)
   2c546:	f7ea fa01 	bl	1694c <z_impl_z_log_msg_static_create>
   2c54a:	46ad      	mov	sp, r5
		return err;
   2c54c:	e043      	b.n	2c5d6 <bt_rpmsg_open+0x10e>
		LOG_ERR("IPC service instance initialization failed: %d\n", err);
   2c54e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c552:	e7cc      	b.n	2c4ee <bt_rpmsg_open+0x26>
   2c554:	f06f 0c1b 	mvn.w	ip, #27
   2c558:	e7d6      	b.n	2c508 <bt_rpmsg_open+0x40>
	err = ipc_service_register_endpoint(hci_ipc_instance, &hci_ept, &hci_ept_cfg);
   2c55a:	4a49      	ldr	r2, [pc, #292]	; (2c680 <bt_rpmsg_open+0x1b8>)
   2c55c:	4949      	ldr	r1, [pc, #292]	; (2c684 <bt_rpmsg_open+0x1bc>)
   2c55e:	4845      	ldr	r0, [pc, #276]	; (2c674 <bt_rpmsg_open+0x1ac>)
   2c560:	f7eb fb46 	bl	17bf0 <ipc_service_register_endpoint>
	if (err) {
   2c564:	4604      	mov	r4, r0
   2c566:	2800      	cmp	r0, #0
   2c568:	d03f      	beq.n	2c5ea <bt_rpmsg_open+0x122>
		LOG_ERR("Registering endpoint failed with %d", err);
   2c56a:	466d      	mov	r5, sp
   2c56c:	b088      	sub	sp, #32
   2c56e:	466b      	mov	r3, sp
   2c570:	f113 0210 	adds.w	r2, r3, #16
   2c574:	d033      	beq.n	2c5de <bt_rpmsg_open+0x116>
   2c576:	210c      	movs	r1, #12
   2c578:	b13a      	cbz	r2, 2c58a <bt_rpmsg_open+0xc2>
   2c57a:	4608      	mov	r0, r1
   2c57c:	2904      	cmp	r1, #4
   2c57e:	dd01      	ble.n	2c584 <bt_rpmsg_open+0xbc>
   2c580:	4e41      	ldr	r6, [pc, #260]	; (2c688 <bt_rpmsg_open+0x1c0>)
   2c582:	615e      	str	r6, [r3, #20]
   2c584:	2808      	cmp	r0, #8
   2c586:	dd00      	ble.n	2c58a <bt_rpmsg_open+0xc2>
   2c588:	619c      	str	r4, [r3, #24]
   2c58a:	290b      	cmp	r1, #11
   2c58c:	dd2a      	ble.n	2c5e4 <bt_rpmsg_open+0x11c>
   2c58e:	f04f 0c0c 	mov.w	ip, #12
   2c592:	b13a      	cbz	r2, 2c5a4 <bt_rpmsg_open+0xdc>
   2c594:	2103      	movs	r1, #3
   2c596:	7139      	strb	r1, [r7, #4]
   2c598:	2100      	movs	r1, #0
   2c59a:	7179      	strb	r1, [r7, #5]
   2c59c:	71b9      	strb	r1, [r7, #6]
   2c59e:	71f9      	strb	r1, [r7, #7]
   2c5a0:	6878      	ldr	r0, [r7, #4]
   2c5a2:	6118      	str	r0, [r3, #16]
   2c5a4:	2100      	movs	r1, #0
   2c5a6:	f36f 0100 	bfc	r1, #0, #1
   2c5aa:	f36f 0141 	bfc	r1, #1, #1
   2c5ae:	f36f 0182 	bfc	r1, #2, #1
   2c5b2:	f36f 01c5 	bfc	r1, #3, #3
   2c5b6:	2301      	movs	r3, #1
   2c5b8:	f363 1188 	bfi	r1, r3, #6, #3
   2c5bc:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
   2c5c0:	f36c 2152 	bfi	r1, ip, #9, #10
   2c5c4:	f36f 41de 	bfc	r1, #19, #12
   2c5c8:	f36f 71df 	bfc	r1, #31, #1
   2c5cc:	2300      	movs	r3, #0
   2c5ce:	482b      	ldr	r0, [pc, #172]	; (2c67c <bt_rpmsg_open+0x1b4>)
   2c5d0:	f7ea f9bc 	bl	1694c <z_impl_z_log_msg_static_create>
   2c5d4:	46ad      	mov	sp, r5
}
   2c5d6:	4620      	mov	r0, r4
   2c5d8:	370c      	adds	r7, #12
   2c5da:	46bd      	mov	sp, r7
   2c5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Registering endpoint failed with %d", err);
   2c5de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c5e2:	e7c9      	b.n	2c578 <bt_rpmsg_open+0xb0>
   2c5e4:	f06f 0c1b 	mvn.w	ip, #27
   2c5e8:	e7d3      	b.n	2c592 <bt_rpmsg_open+0xca>
	return z_impl_k_sem_take(sem, timeout);
   2c5ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   2c5ee:	2300      	movs	r3, #0
   2c5f0:	4826      	ldr	r0, [pc, #152]	; (2c68c <bt_rpmsg_open+0x1c4>)
   2c5f2:	f005 fc3d 	bl	31e70 <z_impl_k_sem_take>
	if (err) {
   2c5f6:	4604      	mov	r4, r0
   2c5f8:	2800      	cmp	r0, #0
   2c5fa:	d0ec      	beq.n	2c5d6 <bt_rpmsg_open+0x10e>
		LOG_ERR("Endpoint binding failed with %d", err);
   2c5fc:	466e      	mov	r6, sp
   2c5fe:	b088      	sub	sp, #32
   2c600:	466b      	mov	r3, sp
   2c602:	f113 0210 	adds.w	r2, r3, #16
   2c606:	d02f      	beq.n	2c668 <bt_rpmsg_open+0x1a0>
   2c608:	210c      	movs	r1, #12
   2c60a:	b13a      	cbz	r2, 2c61c <bt_rpmsg_open+0x154>
   2c60c:	4608      	mov	r0, r1
   2c60e:	2904      	cmp	r1, #4
   2c610:	dd01      	ble.n	2c616 <bt_rpmsg_open+0x14e>
   2c612:	4d1f      	ldr	r5, [pc, #124]	; (2c690 <bt_rpmsg_open+0x1c8>)
   2c614:	615d      	str	r5, [r3, #20]
   2c616:	2808      	cmp	r0, #8
   2c618:	dd00      	ble.n	2c61c <bt_rpmsg_open+0x154>
   2c61a:	619c      	str	r4, [r3, #24]
   2c61c:	290b      	cmp	r1, #11
   2c61e:	dd26      	ble.n	2c66e <bt_rpmsg_open+0x1a6>
   2c620:	250c      	movs	r5, #12
   2c622:	b13a      	cbz	r2, 2c634 <bt_rpmsg_open+0x16c>
   2c624:	2103      	movs	r1, #3
   2c626:	7139      	strb	r1, [r7, #4]
   2c628:	2100      	movs	r1, #0
   2c62a:	7179      	strb	r1, [r7, #5]
   2c62c:	71b9      	strb	r1, [r7, #6]
   2c62e:	71f9      	strb	r1, [r7, #7]
   2c630:	6878      	ldr	r0, [r7, #4]
   2c632:	6118      	str	r0, [r3, #16]
   2c634:	2100      	movs	r1, #0
   2c636:	f36f 0100 	bfc	r1, #0, #1
   2c63a:	f36f 0141 	bfc	r1, #1, #1
   2c63e:	f36f 0182 	bfc	r1, #2, #1
   2c642:	f36f 01c5 	bfc	r1, #3, #3
   2c646:	2301      	movs	r3, #1
   2c648:	f363 1188 	bfi	r1, r3, #6, #3
   2c64c:	f405 757b 	and.w	r5, r5, #1004	; 0x3ec
   2c650:	f365 2152 	bfi	r1, r5, #9, #10
   2c654:	f36f 41de 	bfc	r1, #19, #12
   2c658:	f36f 71df 	bfc	r1, #31, #1
   2c65c:	2300      	movs	r3, #0
   2c65e:	4807      	ldr	r0, [pc, #28]	; (2c67c <bt_rpmsg_open+0x1b4>)
   2c660:	f7ea f974 	bl	1694c <z_impl_z_log_msg_static_create>
   2c664:	46b5      	mov	sp, r6
		return err;
   2c666:	e7b6      	b.n	2c5d6 <bt_rpmsg_open+0x10e>
		LOG_ERR("Endpoint binding failed with %d", err);
   2c668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c66c:	e7cd      	b.n	2c60a <bt_rpmsg_open+0x142>
   2c66e:	f06f 051b 	mvn.w	r5, #27
   2c672:	e7d6      	b.n	2c622 <bt_rpmsg_open+0x15a>
   2c674:	0003efe4 	.word	0x0003efe4
   2c678:	0004509c 	.word	0x0004509c
   2c67c:	0003f3d8 	.word	0x0003f3d8
   2c680:	20008754 	.word	0x20008754
   2c684:	2000c420 	.word	0x2000c420
   2c688:	000450cc 	.word	0x000450cc
   2c68c:	2000897c 	.word	0x2000897c
   2c690:	000450f0 	.word	0x000450f0

0002c694 <bt_rpmsg_evt_recv>:
{
   2c694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c698:	b095      	sub	sp, #84	; 0x54
   2c69a:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   2c69c:	2901      	cmp	r1, #1
   2c69e:	d934      	bls.n	2c70a <bt_rpmsg_evt_recv+0x76>
   2c6a0:	4681      	mov	r9, r0
   2c6a2:	4688      	mov	r8, r1
	discardable = is_hci_event_discardable(data);
   2c6a4:	f010 fd49 	bl	3d13a <is_hci_event_discardable>
   2c6a8:	4604      	mov	r4, r0
	memcpy((void *)&hdr, data, sizeof(hdr));
   2c6aa:	2202      	movs	r2, #2
   2c6ac:	4649      	mov	r1, r9
   2c6ae:	1d38      	adds	r0, r7, #4
   2c6b0:	f00b fea3 	bl	383fa <memcpy>
	data += sizeof(hdr);
   2c6b4:	f109 0902 	add.w	r9, r9, #2
	remaining -= sizeof(hdr);
   2c6b8:	f1a8 0802 	sub.w	r8, r8, #2
	if (remaining != hdr.len) {
   2c6bc:	797b      	ldrb	r3, [r7, #5]
   2c6be:	4543      	cmp	r3, r8
   2c6c0:	d04f      	beq.n	2c762 <bt_rpmsg_evt_recv+0xce>
		LOG_ERR("Event payload length is not correct");
   2c6c2:	4b6c      	ldr	r3, [pc, #432]	; (2c874 <bt_rpmsg_evt_recv+0x1e0>)
   2c6c4:	637b      	str	r3, [r7, #52]	; 0x34
   2c6c6:	2302      	movs	r3, #2
   2c6c8:	703b      	strb	r3, [r7, #0]
   2c6ca:	2600      	movs	r6, #0
   2c6cc:	707e      	strb	r6, [r7, #1]
   2c6ce:	70be      	strb	r6, [r7, #2]
   2c6d0:	70fe      	strb	r6, [r7, #3]
   2c6d2:	683b      	ldr	r3, [r7, #0]
   2c6d4:	633b      	str	r3, [r7, #48]	; 0x30
   2c6d6:	4631      	mov	r1, r6
   2c6d8:	f366 0100 	bfi	r1, r6, #0, #1
   2c6dc:	f366 0141 	bfi	r1, r6, #1, #1
   2c6e0:	f366 0182 	bfi	r1, r6, #2, #1
   2c6e4:	f366 01c5 	bfi	r1, r6, #3, #3
   2c6e8:	2301      	movs	r3, #1
   2c6ea:	f363 1188 	bfi	r1, r3, #6, #3
   2c6ee:	2308      	movs	r3, #8
   2c6f0:	f363 2152 	bfi	r1, r3, #9, #10
   2c6f4:	f366 41de 	bfi	r1, r6, #19, #12
   2c6f8:	f366 71df 	bfi	r1, r6, #31, #1
   2c6fc:	4633      	mov	r3, r6
   2c6fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2c702:	485d      	ldr	r0, [pc, #372]	; (2c878 <bt_rpmsg_evt_recv+0x1e4>)
   2c704:	f7ea f922 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2c708:	e066      	b.n	2c7d8 <bt_rpmsg_evt_recv+0x144>
		LOG_ERR("Not enough data for event header");
   2c70a:	4b5c      	ldr	r3, [pc, #368]	; (2c87c <bt_rpmsg_evt_recv+0x1e8>)
   2c70c:	64fb      	str	r3, [r7, #76]	; 0x4c
   2c70e:	2302      	movs	r3, #2
   2c710:	703b      	strb	r3, [r7, #0]
   2c712:	2600      	movs	r6, #0
   2c714:	707e      	strb	r6, [r7, #1]
   2c716:	70be      	strb	r6, [r7, #2]
   2c718:	70fe      	strb	r6, [r7, #3]
   2c71a:	683b      	ldr	r3, [r7, #0]
   2c71c:	64bb      	str	r3, [r7, #72]	; 0x48
   2c71e:	4631      	mov	r1, r6
   2c720:	f366 0100 	bfi	r1, r6, #0, #1
   2c724:	f366 0141 	bfi	r1, r6, #1, #1
   2c728:	f366 0182 	bfi	r1, r6, #2, #1
   2c72c:	f366 01c5 	bfi	r1, r6, #3, #3
   2c730:	2301      	movs	r3, #1
   2c732:	f363 1188 	bfi	r1, r3, #6, #3
   2c736:	2308      	movs	r3, #8
   2c738:	f363 2152 	bfi	r1, r3, #9, #10
   2c73c:	f366 41de 	bfi	r1, r6, #19, #12
   2c740:	f366 71df 	bfi	r1, r6, #31, #1
   2c744:	4633      	mov	r3, r6
   2c746:	f107 0248 	add.w	r2, r7, #72	; 0x48
   2c74a:	484b      	ldr	r0, [pc, #300]	; (2c878 <bt_rpmsg_evt_recv+0x1e4>)
   2c74c:	f7ea f8fe 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2c750:	e042      	b.n	2c7d8 <bt_rpmsg_evt_recv+0x144>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   2c752:	2200      	movs	r2, #0
   2c754:	2300      	movs	r3, #0
   2c756:	4621      	mov	r1, r4
   2c758:	f7ee fdf2 	bl	1b340 <bt_buf_get_evt>
		if (!buf) {
   2c75c:	4606      	mov	r6, r0
   2c75e:	b138      	cbz	r0, 2c770 <bt_rpmsg_evt_recv+0xdc>
	} while (!buf);
   2c760:	bb4e      	cbnz	r6, 2c7b6 <bt_rpmsg_evt_recv+0x122>
		buf = bt_buf_get_evt(hdr.evt, discardable, discardable ? K_NO_WAIT : K_SECONDS(10));
   2c762:	7938      	ldrb	r0, [r7, #4]
   2c764:	2c00      	cmp	r4, #0
   2c766:	d1f4      	bne.n	2c752 <bt_rpmsg_evt_recv+0xbe>
   2c768:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   2c76c:	2300      	movs	r3, #0
   2c76e:	e7f2      	b.n	2c756 <bt_rpmsg_evt_recv+0xc2>
			if (discardable) {
   2c770:	bb94      	cbnz	r4, 2c7d8 <bt_rpmsg_evt_recv+0x144>
			LOG_WRN("Couldn't allocate a buffer after waiting 10 seconds.");
   2c772:	4b43      	ldr	r3, [pc, #268]	; (2c880 <bt_rpmsg_evt_recv+0x1ec>)
   2c774:	61fb      	str	r3, [r7, #28]
   2c776:	2202      	movs	r2, #2
   2c778:	703a      	strb	r2, [r7, #0]
   2c77a:	2300      	movs	r3, #0
   2c77c:	707b      	strb	r3, [r7, #1]
   2c77e:	70bb      	strb	r3, [r7, #2]
   2c780:	70fb      	strb	r3, [r7, #3]
   2c782:	6839      	ldr	r1, [r7, #0]
   2c784:	61b9      	str	r1, [r7, #24]
   2c786:	f363 0500 	bfi	r5, r3, #0, #1
   2c78a:	f363 0541 	bfi	r5, r3, #1, #1
   2c78e:	f363 0582 	bfi	r5, r3, #2, #1
   2c792:	f363 05c5 	bfi	r5, r3, #3, #3
   2c796:	f362 1588 	bfi	r5, r2, #6, #3
   2c79a:	2208      	movs	r2, #8
   2c79c:	f362 2552 	bfi	r5, r2, #9, #10
   2c7a0:	f363 45de 	bfi	r5, r3, #19, #12
   2c7a4:	f363 75df 	bfi	r5, r3, #31, #1
   2c7a8:	f107 0218 	add.w	r2, r7, #24
   2c7ac:	4629      	mov	r1, r5
   2c7ae:	4832      	ldr	r0, [pc, #200]	; (2c878 <bt_rpmsg_evt_recv+0x1e4>)
   2c7b0:	f7ea f8cc 	bl	1694c <z_impl_z_log_msg_static_create>
   2c7b4:	e7d4      	b.n	2c760 <bt_rpmsg_evt_recv+0xcc>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c7b6:	f106 040c 	add.w	r4, r6, #12
   2c7ba:	2202      	movs	r2, #2
   2c7bc:	1d39      	adds	r1, r7, #4
   2c7be:	4620      	mov	r0, r4
   2c7c0:	f00f fb24 	bl	3be0c <net_buf_simple_add_mem>
	return net_buf_simple_tailroom(&buf->b);
   2c7c4:	4620      	mov	r0, r4
   2c7c6:	f00f fb18 	bl	3bdfa <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   2c7ca:	4540      	cmp	r0, r8
   2c7cc:	d309      	bcc.n	2c7e2 <bt_rpmsg_evt_recv+0x14e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c7ce:	4642      	mov	r2, r8
   2c7d0:	4649      	mov	r1, r9
   2c7d2:	4620      	mov	r0, r4
   2c7d4:	f00f fb1a 	bl	3be0c <net_buf_simple_add_mem>
}
   2c7d8:	4630      	mov	r0, r6
   2c7da:	3754      	adds	r7, #84	; 0x54
   2c7dc:	46bd      	mov	sp, r7
   2c7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   2c7e2:	466c      	mov	r4, sp
   2c7e4:	b088      	sub	sp, #32
   2c7e6:	466b      	mov	r3, sp
   2c7e8:	f113 0210 	adds.w	r2, r3, #16
   2c7ec:	d013      	beq.n	2c816 <bt_rpmsg_evt_recv+0x182>
   2c7ee:	2110      	movs	r1, #16
   2c7f0:	b16a      	cbz	r2, 2c80e <bt_rpmsg_evt_recv+0x17a>
   2c7f2:	460d      	mov	r5, r1
   2c7f4:	2904      	cmp	r1, #4
   2c7f6:	dd03      	ble.n	2c800 <bt_rpmsg_evt_recv+0x16c>
   2c7f8:	f8df c088 	ldr.w	ip, [pc, #136]	; 2c884 <bt_rpmsg_evt_recv+0x1f0>
   2c7fc:	f8c3 c014 	str.w	ip, [r3, #20]
   2c800:	2d08      	cmp	r5, #8
   2c802:	dd01      	ble.n	2c808 <bt_rpmsg_evt_recv+0x174>
   2c804:	f8c3 8018 	str.w	r8, [r3, #24]
   2c808:	2d0c      	cmp	r5, #12
   2c80a:	dd07      	ble.n	2c81c <bt_rpmsg_evt_recv+0x188>
   2c80c:	61d8      	str	r0, [r3, #28]
   2c80e:	290f      	cmp	r1, #15
   2c810:	dd2d      	ble.n	2c86e <bt_rpmsg_evt_recv+0x1da>
   2c812:	2510      	movs	r5, #16
   2c814:	e004      	b.n	2c820 <bt_rpmsg_evt_recv+0x18c>
   2c816:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2c81a:	e7e9      	b.n	2c7f0 <bt_rpmsg_evt_recv+0x15c>
   2c81c:	f06f 051b 	mvn.w	r5, #27
   2c820:	b13a      	cbz	r2, 2c832 <bt_rpmsg_evt_recv+0x19e>
   2c822:	2104      	movs	r1, #4
   2c824:	7039      	strb	r1, [r7, #0]
   2c826:	2100      	movs	r1, #0
   2c828:	7079      	strb	r1, [r7, #1]
   2c82a:	70b9      	strb	r1, [r7, #2]
   2c82c:	70f9      	strb	r1, [r7, #3]
   2c82e:	6838      	ldr	r0, [r7, #0]
   2c830:	6118      	str	r0, [r3, #16]
   2c832:	2100      	movs	r1, #0
   2c834:	f36f 0100 	bfc	r1, #0, #1
   2c838:	f36f 0141 	bfc	r1, #1, #1
   2c83c:	f36f 0182 	bfc	r1, #2, #1
   2c840:	f36f 01c5 	bfc	r1, #3, #3
   2c844:	2301      	movs	r3, #1
   2c846:	f363 1188 	bfi	r1, r3, #6, #3
   2c84a:	f405 737d 	and.w	r3, r5, #1012	; 0x3f4
   2c84e:	f363 2152 	bfi	r1, r3, #9, #10
   2c852:	f36f 41de 	bfc	r1, #19, #12
   2c856:	f36f 71df 	bfc	r1, #31, #1
   2c85a:	2300      	movs	r3, #0
   2c85c:	4806      	ldr	r0, [pc, #24]	; (2c878 <bt_rpmsg_evt_recv+0x1e4>)
   2c85e:	f7ea f875 	bl	1694c <z_impl_z_log_msg_static_create>
   2c862:	46a5      	mov	sp, r4
		net_buf_unref(buf);
   2c864:	4630      	mov	r0, r6
   2c866:	f7fc ff1d 	bl	296a4 <net_buf_unref>
		return NULL;
   2c86a:	2600      	movs	r6, #0
   2c86c:	e7b4      	b.n	2c7d8 <bt_rpmsg_evt_recv+0x144>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   2c86e:	f06f 051b 	mvn.w	r5, #27
   2c872:	e7d5      	b.n	2c820 <bt_rpmsg_evt_recv+0x18c>
   2c874:	00045134 	.word	0x00045134
   2c878:	0003f3d8 	.word	0x0003f3d8
   2c87c:	00045110 	.word	0x00045110
   2c880:	00045158 	.word	0x00045158
   2c884:	00045190 	.word	0x00045190

0002c888 <bt_rpmsg_acl_recv>:
{
   2c888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c88c:	b094      	sub	sp, #80	; 0x50
   2c88e:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   2c890:	2903      	cmp	r1, #3
   2c892:	d929      	bls.n	2c8e8 <bt_rpmsg_acl_recv+0x60>
   2c894:	4605      	mov	r5, r0
   2c896:	460c      	mov	r4, r1
	buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_NO_WAIT);
   2c898:	2200      	movs	r2, #0
   2c89a:	2300      	movs	r3, #0
   2c89c:	2003      	movs	r0, #3
   2c89e:	f7ee fd01 	bl	1b2a4 <bt_buf_get_rx>
	if (buf) {
   2c8a2:	4606      	mov	r6, r0
   2c8a4:	2800      	cmp	r0, #0
   2c8a6:	d043      	beq.n	2c930 <bt_rpmsg_acl_recv+0xa8>
		memcpy((void *)&hdr, data, sizeof(hdr));
   2c8a8:	2204      	movs	r2, #4
   2c8aa:	4629      	mov	r1, r5
   2c8ac:	18b8      	adds	r0, r7, r2
   2c8ae:	f00b fda4 	bl	383fa <memcpy>
		data += sizeof(hdr);
   2c8b2:	3504      	adds	r5, #4
		remaining -= sizeof(hdr);
   2c8b4:	3c04      	subs	r4, #4
   2c8b6:	f106 080c 	add.w	r8, r6, #12
   2c8ba:	2204      	movs	r2, #4
   2c8bc:	18b9      	adds	r1, r7, r2
   2c8be:	4640      	mov	r0, r8
   2c8c0:	f00f faa4 	bl	3be0c <net_buf_simple_add_mem>
	if (remaining != sys_le16_to_cpu(hdr.len)) {
   2c8c4:	88fb      	ldrh	r3, [r7, #6]
   2c8c6:	42a3      	cmp	r3, r4
   2c8c8:	d155      	bne.n	2c976 <bt_rpmsg_acl_recv+0xee>
	return net_buf_simple_tailroom(&buf->b);
   2c8ca:	4640      	mov	r0, r8
   2c8cc:	f00f fa95 	bl	3bdfa <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   2c8d0:	4284      	cmp	r4, r0
   2c8d2:	d878      	bhi.n	2c9c6 <bt_rpmsg_acl_recv+0x13e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2c8d4:	4622      	mov	r2, r4
   2c8d6:	4629      	mov	r1, r5
   2c8d8:	4640      	mov	r0, r8
   2c8da:	f00f fa97 	bl	3be0c <net_buf_simple_add_mem>
}
   2c8de:	4630      	mov	r0, r6
   2c8e0:	3750      	adds	r7, #80	; 0x50
   2c8e2:	46bd      	mov	sp, r7
   2c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Not enough data for ACL header");
   2c8e8:	4b5c      	ldr	r3, [pc, #368]	; (2ca5c <bt_rpmsg_acl_recv+0x1d4>)
   2c8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   2c8ec:	2302      	movs	r3, #2
   2c8ee:	703b      	strb	r3, [r7, #0]
   2c8f0:	2600      	movs	r6, #0
   2c8f2:	707e      	strb	r6, [r7, #1]
   2c8f4:	70be      	strb	r6, [r7, #2]
   2c8f6:	70fe      	strb	r6, [r7, #3]
   2c8f8:	683b      	ldr	r3, [r7, #0]
   2c8fa:	64bb      	str	r3, [r7, #72]	; 0x48
   2c8fc:	4631      	mov	r1, r6
   2c8fe:	f366 0100 	bfi	r1, r6, #0, #1
   2c902:	f366 0141 	bfi	r1, r6, #1, #1
   2c906:	f366 0182 	bfi	r1, r6, #2, #1
   2c90a:	f366 01c5 	bfi	r1, r6, #3, #3
   2c90e:	2301      	movs	r3, #1
   2c910:	f363 1188 	bfi	r1, r3, #6, #3
   2c914:	2308      	movs	r3, #8
   2c916:	f363 2152 	bfi	r1, r3, #9, #10
   2c91a:	f366 41de 	bfi	r1, r6, #19, #12
   2c91e:	f366 71df 	bfi	r1, r6, #31, #1
   2c922:	4633      	mov	r3, r6
   2c924:	f107 0248 	add.w	r2, r7, #72	; 0x48
   2c928:	484d      	ldr	r0, [pc, #308]	; (2ca60 <bt_rpmsg_acl_recv+0x1d8>)
   2c92a:	f7ea f80f 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2c92e:	e7d6      	b.n	2c8de <bt_rpmsg_acl_recv+0x56>
		LOG_ERR("No available ACL buffers!");
   2c930:	4b4c      	ldr	r3, [pc, #304]	; (2ca64 <bt_rpmsg_acl_recv+0x1dc>)
   2c932:	61fb      	str	r3, [r7, #28]
   2c934:	2302      	movs	r3, #2
   2c936:	703b      	strb	r3, [r7, #0]
   2c938:	2300      	movs	r3, #0
   2c93a:	707b      	strb	r3, [r7, #1]
   2c93c:	70bb      	strb	r3, [r7, #2]
   2c93e:	70fb      	strb	r3, [r7, #3]
   2c940:	683a      	ldr	r2, [r7, #0]
   2c942:	61ba      	str	r2, [r7, #24]
   2c944:	4619      	mov	r1, r3
   2c946:	f363 0100 	bfi	r1, r3, #0, #1
   2c94a:	f363 0141 	bfi	r1, r3, #1, #1
   2c94e:	f363 0182 	bfi	r1, r3, #2, #1
   2c952:	f363 01c5 	bfi	r1, r3, #3, #3
   2c956:	2201      	movs	r2, #1
   2c958:	f362 1188 	bfi	r1, r2, #6, #3
   2c95c:	2208      	movs	r2, #8
   2c95e:	f362 2152 	bfi	r1, r2, #9, #10
   2c962:	f363 41de 	bfi	r1, r3, #19, #12
   2c966:	f363 71df 	bfi	r1, r3, #31, #1
   2c96a:	f107 0218 	add.w	r2, r7, #24
   2c96e:	483c      	ldr	r0, [pc, #240]	; (2ca60 <bt_rpmsg_acl_recv+0x1d8>)
   2c970:	f7e9 ffec 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2c974:	e7b3      	b.n	2c8de <bt_rpmsg_acl_recv+0x56>
		LOG_ERR("ACL payload length is not correct");
   2c976:	4b3c      	ldr	r3, [pc, #240]	; (2ca68 <bt_rpmsg_acl_recv+0x1e0>)
   2c978:	637b      	str	r3, [r7, #52]	; 0x34
   2c97a:	2302      	movs	r3, #2
   2c97c:	703b      	strb	r3, [r7, #0]
   2c97e:	2400      	movs	r4, #0
   2c980:	707c      	strb	r4, [r7, #1]
   2c982:	70bc      	strb	r4, [r7, #2]
   2c984:	70fc      	strb	r4, [r7, #3]
   2c986:	683b      	ldr	r3, [r7, #0]
   2c988:	633b      	str	r3, [r7, #48]	; 0x30
   2c98a:	4621      	mov	r1, r4
   2c98c:	f364 0100 	bfi	r1, r4, #0, #1
   2c990:	f364 0141 	bfi	r1, r4, #1, #1
   2c994:	f364 0182 	bfi	r1, r4, #2, #1
   2c998:	f364 01c5 	bfi	r1, r4, #3, #3
   2c99c:	2301      	movs	r3, #1
   2c99e:	f363 1188 	bfi	r1, r3, #6, #3
   2c9a2:	2308      	movs	r3, #8
   2c9a4:	f363 2152 	bfi	r1, r3, #9, #10
   2c9a8:	f364 41de 	bfi	r1, r4, #19, #12
   2c9ac:	f364 71df 	bfi	r1, r4, #31, #1
   2c9b0:	4623      	mov	r3, r4
   2c9b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2c9b6:	482a      	ldr	r0, [pc, #168]	; (2ca60 <bt_rpmsg_acl_recv+0x1d8>)
   2c9b8:	f7e9 ffc8 	bl	1694c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   2c9bc:	4630      	mov	r0, r6
   2c9be:	f7fc fe71 	bl	296a4 <net_buf_unref>
		return NULL;
   2c9c2:	4626      	mov	r6, r4
   2c9c4:	e78b      	b.n	2c8de <bt_rpmsg_acl_recv+0x56>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   2c9c6:	466d      	mov	r5, sp
   2c9c8:	b088      	sub	sp, #32
   2c9ca:	466b      	mov	r3, sp
   2c9cc:	f113 0210 	adds.w	r2, r3, #16
   2c9d0:	d014      	beq.n	2c9fc <bt_rpmsg_acl_recv+0x174>
   2c9d2:	2110      	movs	r1, #16
   2c9d4:	b172      	cbz	r2, 2c9f4 <bt_rpmsg_acl_recv+0x16c>
   2c9d6:	468c      	mov	ip, r1
   2c9d8:	2904      	cmp	r1, #4
   2c9da:	dd03      	ble.n	2c9e4 <bt_rpmsg_acl_recv+0x15c>
   2c9dc:	f8df e08c 	ldr.w	lr, [pc, #140]	; 2ca6c <bt_rpmsg_acl_recv+0x1e4>
   2c9e0:	f8c3 e014 	str.w	lr, [r3, #20]
   2c9e4:	f1bc 0f08 	cmp.w	ip, #8
   2c9e8:	dd00      	ble.n	2c9ec <bt_rpmsg_acl_recv+0x164>
   2c9ea:	619c      	str	r4, [r3, #24]
   2c9ec:	f1bc 0f0c 	cmp.w	ip, #12
   2c9f0:	dd07      	ble.n	2ca02 <bt_rpmsg_acl_recv+0x17a>
   2c9f2:	61d8      	str	r0, [r3, #28]
   2c9f4:	290f      	cmp	r1, #15
   2c9f6:	dd2d      	ble.n	2ca54 <bt_rpmsg_acl_recv+0x1cc>
   2c9f8:	2410      	movs	r4, #16
   2c9fa:	e004      	b.n	2ca06 <bt_rpmsg_acl_recv+0x17e>
   2c9fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2ca00:	e7e8      	b.n	2c9d4 <bt_rpmsg_acl_recv+0x14c>
   2ca02:	f06f 041b 	mvn.w	r4, #27
   2ca06:	b13a      	cbz	r2, 2ca18 <bt_rpmsg_acl_recv+0x190>
   2ca08:	2104      	movs	r1, #4
   2ca0a:	7039      	strb	r1, [r7, #0]
   2ca0c:	2100      	movs	r1, #0
   2ca0e:	7079      	strb	r1, [r7, #1]
   2ca10:	70b9      	strb	r1, [r7, #2]
   2ca12:	70f9      	strb	r1, [r7, #3]
   2ca14:	6838      	ldr	r0, [r7, #0]
   2ca16:	6118      	str	r0, [r3, #16]
   2ca18:	2100      	movs	r1, #0
   2ca1a:	f36f 0100 	bfc	r1, #0, #1
   2ca1e:	f36f 0141 	bfc	r1, #1, #1
   2ca22:	f36f 0182 	bfc	r1, #2, #1
   2ca26:	f36f 01c5 	bfc	r1, #3, #3
   2ca2a:	2301      	movs	r3, #1
   2ca2c:	f363 1188 	bfi	r1, r3, #6, #3
   2ca30:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   2ca34:	f363 2152 	bfi	r1, r3, #9, #10
   2ca38:	f36f 41de 	bfc	r1, #19, #12
   2ca3c:	f36f 71df 	bfc	r1, #31, #1
   2ca40:	2300      	movs	r3, #0
   2ca42:	4807      	ldr	r0, [pc, #28]	; (2ca60 <bt_rpmsg_acl_recv+0x1d8>)
   2ca44:	f7e9 ff82 	bl	1694c <z_impl_z_log_msg_static_create>
   2ca48:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   2ca4a:	4630      	mov	r0, r6
   2ca4c:	f7fc fe2a 	bl	296a4 <net_buf_unref>
		return NULL;
   2ca50:	2600      	movs	r6, #0
   2ca52:	e744      	b.n	2c8de <bt_rpmsg_acl_recv+0x56>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   2ca54:	f06f 041b 	mvn.w	r4, #27
   2ca58:	e7d5      	b.n	2ca06 <bt_rpmsg_acl_recv+0x17e>
   2ca5a:	bf00      	nop
   2ca5c:	000451b4 	.word	0x000451b4
   2ca60:	0003f3d8 	.word	0x0003f3d8
   2ca64:	000451d4 	.word	0x000451d4
   2ca68:	000451f0 	.word	0x000451f0
   2ca6c:	00045190 	.word	0x00045190

0002ca70 <bt_rpmsg_iso_recv>:
{
   2ca70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca74:	b094      	sub	sp, #80	; 0x50
   2ca76:	af00      	add	r7, sp, #0
	if (remaining < sizeof(hdr)) {
   2ca78:	2903      	cmp	r1, #3
   2ca7a:	d92b      	bls.n	2cad4 <bt_rpmsg_iso_recv+0x64>
   2ca7c:	4605      	mov	r5, r0
   2ca7e:	460c      	mov	r4, r1
	buf = bt_buf_get_rx(BT_BUF_ISO_IN, K_NO_WAIT);
   2ca80:	2200      	movs	r2, #0
   2ca82:	2300      	movs	r3, #0
   2ca84:	2005      	movs	r0, #5
   2ca86:	f7ee fc0d 	bl	1b2a4 <bt_buf_get_rx>
	if (buf) {
   2ca8a:	4606      	mov	r6, r0
   2ca8c:	2800      	cmp	r0, #0
   2ca8e:	d045      	beq.n	2cb1c <bt_rpmsg_iso_recv+0xac>
		memcpy((void *)&hdr, data, sizeof(hdr));
   2ca90:	2204      	movs	r2, #4
   2ca92:	4629      	mov	r1, r5
   2ca94:	18b8      	adds	r0, r7, r2
   2ca96:	f00b fcb0 	bl	383fa <memcpy>
		data += sizeof(hdr);
   2ca9a:	3504      	adds	r5, #4
		remaining -= sizeof(hdr);
   2ca9c:	3c04      	subs	r4, #4
   2ca9e:	f106 080c 	add.w	r8, r6, #12
   2caa2:	2204      	movs	r2, #4
   2caa4:	18b9      	adds	r1, r7, r2
   2caa6:	4640      	mov	r0, r8
   2caa8:	f00f f9b0 	bl	3be0c <net_buf_simple_add_mem>
	if (remaining != bt_iso_hdr_len(sys_le16_to_cpu(hdr.len))) {
   2caac:	88fb      	ldrh	r3, [r7, #6]
   2caae:	f3c3 030d 	ubfx	r3, r3, #0, #14
   2cab2:	42a3      	cmp	r3, r4
   2cab4:	d155      	bne.n	2cb62 <bt_rpmsg_iso_recv+0xf2>
	return net_buf_simple_tailroom(&buf->b);
   2cab6:	4640      	mov	r0, r8
   2cab8:	f00f f99f 	bl	3bdfa <net_buf_simple_tailroom>
	if (buf_tailroom < remaining) {
   2cabc:	4284      	cmp	r4, r0
   2cabe:	d878      	bhi.n	2cbb2 <bt_rpmsg_iso_recv+0x142>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2cac0:	4622      	mov	r2, r4
   2cac2:	4629      	mov	r1, r5
   2cac4:	4640      	mov	r0, r8
   2cac6:	f00f f9a1 	bl	3be0c <net_buf_simple_add_mem>
}
   2caca:	4630      	mov	r0, r6
   2cacc:	3750      	adds	r7, #80	; 0x50
   2cace:	46bd      	mov	sp, r7
   2cad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERR("Not enough data for ISO header");
   2cad4:	4b5c      	ldr	r3, [pc, #368]	; (2cc48 <bt_rpmsg_iso_recv+0x1d8>)
   2cad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   2cad8:	2302      	movs	r3, #2
   2cada:	703b      	strb	r3, [r7, #0]
   2cadc:	2600      	movs	r6, #0
   2cade:	707e      	strb	r6, [r7, #1]
   2cae0:	70be      	strb	r6, [r7, #2]
   2cae2:	70fe      	strb	r6, [r7, #3]
   2cae4:	683b      	ldr	r3, [r7, #0]
   2cae6:	64bb      	str	r3, [r7, #72]	; 0x48
   2cae8:	4631      	mov	r1, r6
   2caea:	f366 0100 	bfi	r1, r6, #0, #1
   2caee:	f366 0141 	bfi	r1, r6, #1, #1
   2caf2:	f366 0182 	bfi	r1, r6, #2, #1
   2caf6:	f366 01c5 	bfi	r1, r6, #3, #3
   2cafa:	2301      	movs	r3, #1
   2cafc:	f363 1188 	bfi	r1, r3, #6, #3
   2cb00:	2308      	movs	r3, #8
   2cb02:	f363 2152 	bfi	r1, r3, #9, #10
   2cb06:	f366 41de 	bfi	r1, r6, #19, #12
   2cb0a:	f366 71df 	bfi	r1, r6, #31, #1
   2cb0e:	4633      	mov	r3, r6
   2cb10:	f107 0248 	add.w	r2, r7, #72	; 0x48
   2cb14:	484d      	ldr	r0, [pc, #308]	; (2cc4c <bt_rpmsg_iso_recv+0x1dc>)
   2cb16:	f7e9 ff19 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2cb1a:	e7d6      	b.n	2caca <bt_rpmsg_iso_recv+0x5a>
		LOG_ERR("No available ISO buffers!");
   2cb1c:	4b4c      	ldr	r3, [pc, #304]	; (2cc50 <bt_rpmsg_iso_recv+0x1e0>)
   2cb1e:	61fb      	str	r3, [r7, #28]
   2cb20:	2302      	movs	r3, #2
   2cb22:	703b      	strb	r3, [r7, #0]
   2cb24:	2300      	movs	r3, #0
   2cb26:	707b      	strb	r3, [r7, #1]
   2cb28:	70bb      	strb	r3, [r7, #2]
   2cb2a:	70fb      	strb	r3, [r7, #3]
   2cb2c:	683a      	ldr	r2, [r7, #0]
   2cb2e:	61ba      	str	r2, [r7, #24]
   2cb30:	4619      	mov	r1, r3
   2cb32:	f363 0100 	bfi	r1, r3, #0, #1
   2cb36:	f363 0141 	bfi	r1, r3, #1, #1
   2cb3a:	f363 0182 	bfi	r1, r3, #2, #1
   2cb3e:	f363 01c5 	bfi	r1, r3, #3, #3
   2cb42:	2201      	movs	r2, #1
   2cb44:	f362 1188 	bfi	r1, r2, #6, #3
   2cb48:	2208      	movs	r2, #8
   2cb4a:	f362 2152 	bfi	r1, r2, #9, #10
   2cb4e:	f363 41de 	bfi	r1, r3, #19, #12
   2cb52:	f363 71df 	bfi	r1, r3, #31, #1
   2cb56:	f107 0218 	add.w	r2, r7, #24
   2cb5a:	483c      	ldr	r0, [pc, #240]	; (2cc4c <bt_rpmsg_iso_recv+0x1dc>)
   2cb5c:	f7e9 fef6 	bl	1694c <z_impl_z_log_msg_static_create>
		return NULL;
   2cb60:	e7b3      	b.n	2caca <bt_rpmsg_iso_recv+0x5a>
		LOG_ERR("ISO payload length is not correct");
   2cb62:	4b3c      	ldr	r3, [pc, #240]	; (2cc54 <bt_rpmsg_iso_recv+0x1e4>)
   2cb64:	637b      	str	r3, [r7, #52]	; 0x34
   2cb66:	2302      	movs	r3, #2
   2cb68:	703b      	strb	r3, [r7, #0]
   2cb6a:	2400      	movs	r4, #0
   2cb6c:	707c      	strb	r4, [r7, #1]
   2cb6e:	70bc      	strb	r4, [r7, #2]
   2cb70:	70fc      	strb	r4, [r7, #3]
   2cb72:	683b      	ldr	r3, [r7, #0]
   2cb74:	633b      	str	r3, [r7, #48]	; 0x30
   2cb76:	4621      	mov	r1, r4
   2cb78:	f364 0100 	bfi	r1, r4, #0, #1
   2cb7c:	f364 0141 	bfi	r1, r4, #1, #1
   2cb80:	f364 0182 	bfi	r1, r4, #2, #1
   2cb84:	f364 01c5 	bfi	r1, r4, #3, #3
   2cb88:	2301      	movs	r3, #1
   2cb8a:	f363 1188 	bfi	r1, r3, #6, #3
   2cb8e:	2308      	movs	r3, #8
   2cb90:	f363 2152 	bfi	r1, r3, #9, #10
   2cb94:	f364 41de 	bfi	r1, r4, #19, #12
   2cb98:	f364 71df 	bfi	r1, r4, #31, #1
   2cb9c:	4623      	mov	r3, r4
   2cb9e:	f107 0230 	add.w	r2, r7, #48	; 0x30
   2cba2:	482a      	ldr	r0, [pc, #168]	; (2cc4c <bt_rpmsg_iso_recv+0x1dc>)
   2cba4:	f7e9 fed2 	bl	1694c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   2cba8:	4630      	mov	r0, r6
   2cbaa:	f7fc fd7b 	bl	296a4 <net_buf_unref>
		return NULL;
   2cbae:	4626      	mov	r6, r4
   2cbb0:	e78b      	b.n	2caca <bt_rpmsg_iso_recv+0x5a>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   2cbb2:	466d      	mov	r5, sp
   2cbb4:	b088      	sub	sp, #32
   2cbb6:	466b      	mov	r3, sp
   2cbb8:	f113 0210 	adds.w	r2, r3, #16
   2cbbc:	d014      	beq.n	2cbe8 <bt_rpmsg_iso_recv+0x178>
   2cbbe:	2110      	movs	r1, #16
   2cbc0:	b172      	cbz	r2, 2cbe0 <bt_rpmsg_iso_recv+0x170>
   2cbc2:	468c      	mov	ip, r1
   2cbc4:	2904      	cmp	r1, #4
   2cbc6:	dd03      	ble.n	2cbd0 <bt_rpmsg_iso_recv+0x160>
   2cbc8:	f8df e08c 	ldr.w	lr, [pc, #140]	; 2cc58 <bt_rpmsg_iso_recv+0x1e8>
   2cbcc:	f8c3 e014 	str.w	lr, [r3, #20]
   2cbd0:	f1bc 0f08 	cmp.w	ip, #8
   2cbd4:	dd00      	ble.n	2cbd8 <bt_rpmsg_iso_recv+0x168>
   2cbd6:	619c      	str	r4, [r3, #24]
   2cbd8:	f1bc 0f0c 	cmp.w	ip, #12
   2cbdc:	dd07      	ble.n	2cbee <bt_rpmsg_iso_recv+0x17e>
   2cbde:	61d8      	str	r0, [r3, #28]
   2cbe0:	290f      	cmp	r1, #15
   2cbe2:	dd2d      	ble.n	2cc40 <bt_rpmsg_iso_recv+0x1d0>
   2cbe4:	2410      	movs	r4, #16
   2cbe6:	e004      	b.n	2cbf2 <bt_rpmsg_iso_recv+0x182>
   2cbe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2cbec:	e7e8      	b.n	2cbc0 <bt_rpmsg_iso_recv+0x150>
   2cbee:	f06f 041b 	mvn.w	r4, #27
   2cbf2:	b13a      	cbz	r2, 2cc04 <bt_rpmsg_iso_recv+0x194>
   2cbf4:	2104      	movs	r1, #4
   2cbf6:	7039      	strb	r1, [r7, #0]
   2cbf8:	2100      	movs	r1, #0
   2cbfa:	7079      	strb	r1, [r7, #1]
   2cbfc:	70b9      	strb	r1, [r7, #2]
   2cbfe:	70f9      	strb	r1, [r7, #3]
   2cc00:	6838      	ldr	r0, [r7, #0]
   2cc02:	6118      	str	r0, [r3, #16]
   2cc04:	2100      	movs	r1, #0
   2cc06:	f36f 0100 	bfc	r1, #0, #1
   2cc0a:	f36f 0141 	bfc	r1, #1, #1
   2cc0e:	f36f 0182 	bfc	r1, #2, #1
   2cc12:	f36f 01c5 	bfc	r1, #3, #3
   2cc16:	2301      	movs	r3, #1
   2cc18:	f363 1188 	bfi	r1, r3, #6, #3
   2cc1c:	f404 737d 	and.w	r3, r4, #1012	; 0x3f4
   2cc20:	f363 2152 	bfi	r1, r3, #9, #10
   2cc24:	f36f 41de 	bfc	r1, #19, #12
   2cc28:	f36f 71df 	bfc	r1, #31, #1
   2cc2c:	2300      	movs	r3, #0
   2cc2e:	4807      	ldr	r0, [pc, #28]	; (2cc4c <bt_rpmsg_iso_recv+0x1dc>)
   2cc30:	f7e9 fe8c 	bl	1694c <z_impl_z_log_msg_static_create>
   2cc34:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   2cc36:	4630      	mov	r0, r6
   2cc38:	f7fc fd34 	bl	296a4 <net_buf_unref>
		return NULL;
   2cc3c:	2600      	movs	r6, #0
   2cc3e:	e744      	b.n	2caca <bt_rpmsg_iso_recv+0x5a>
		LOG_ERR("Not enough space in buffer %zu/%zu", remaining, buf_tailroom);
   2cc40:	f06f 041b 	mvn.w	r4, #27
   2cc44:	e7d5      	b.n	2cbf2 <bt_rpmsg_iso_recv+0x182>
   2cc46:	bf00      	nop
   2cc48:	00045214 	.word	0x00045214
   2cc4c:	0003f3d8 	.word	0x0003f3d8
   2cc50:	00045234 	.word	0x00045234
   2cc54:	00045250 	.word	0x00045250
   2cc58:	00045190 	.word	0x00045190

0002cc5c <bt_rpmsg_rx>:
{
   2cc5c:	b5b0      	push	{r4, r5, r7, lr}
   2cc5e:	b082      	sub	sp, #8
   2cc60:	af00      	add	r7, sp, #0
	pkt_indicator = *data++;
   2cc62:	f810 3b01 	ldrb.w	r3, [r0], #1
	remaining -= sizeof(pkt_indicator);
   2cc66:	3901      	subs	r1, #1
	switch (pkt_indicator) {
   2cc68:	2b04      	cmp	r3, #4
   2cc6a:	d03a      	beq.n	2cce2 <bt_rpmsg_rx+0x86>
   2cc6c:	2b05      	cmp	r3, #5
   2cc6e:	d043      	beq.n	2ccf8 <bt_rpmsg_rx+0x9c>
   2cc70:	2b02      	cmp	r3, #2
   2cc72:	d03e      	beq.n	2ccf2 <bt_rpmsg_rx+0x96>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   2cc74:	466c      	mov	r4, sp
   2cc76:	b088      	sub	sp, #32
   2cc78:	4669      	mov	r1, sp
   2cc7a:	f111 0210 	adds.w	r2, r1, #16
   2cc7e:	d03e      	beq.n	2ccfe <bt_rpmsg_rx+0xa2>
   2cc80:	200c      	movs	r0, #12
   2cc82:	b142      	cbz	r2, 2cc96 <bt_rpmsg_rx+0x3a>
   2cc84:	4684      	mov	ip, r0
   2cc86:	2804      	cmp	r0, #4
   2cc88:	dd01      	ble.n	2cc8e <bt_rpmsg_rx+0x32>
   2cc8a:	4d20      	ldr	r5, [pc, #128]	; (2cd0c <bt_rpmsg_rx+0xb0>)
   2cc8c:	614d      	str	r5, [r1, #20]
   2cc8e:	f1bc 0f08 	cmp.w	ip, #8
   2cc92:	dd00      	ble.n	2cc96 <bt_rpmsg_rx+0x3a>
   2cc94:	618b      	str	r3, [r1, #24]
   2cc96:	280b      	cmp	r0, #11
   2cc98:	dd34      	ble.n	2cd04 <bt_rpmsg_rx+0xa8>
   2cc9a:	230c      	movs	r3, #12
   2cc9c:	b13a      	cbz	r2, 2ccae <bt_rpmsg_rx+0x52>
   2cc9e:	2003      	movs	r0, #3
   2cca0:	7138      	strb	r0, [r7, #4]
   2cca2:	2000      	movs	r0, #0
   2cca4:	7178      	strb	r0, [r7, #5]
   2cca6:	71b8      	strb	r0, [r7, #6]
   2cca8:	71f8      	strb	r0, [r7, #7]
   2ccaa:	6878      	ldr	r0, [r7, #4]
   2ccac:	6108      	str	r0, [r1, #16]
   2ccae:	2100      	movs	r1, #0
   2ccb0:	f36f 0100 	bfc	r1, #0, #1
   2ccb4:	f36f 0141 	bfc	r1, #1, #1
   2ccb8:	f36f 0182 	bfc	r1, #2, #1
   2ccbc:	f36f 01c5 	bfc	r1, #3, #3
   2ccc0:	2001      	movs	r0, #1
   2ccc2:	f360 1188 	bfi	r1, r0, #6, #3
   2ccc6:	f403 737b 	and.w	r3, r3, #1004	; 0x3ec
   2ccca:	f363 2152 	bfi	r1, r3, #9, #10
   2ccce:	f36f 41de 	bfc	r1, #19, #12
   2ccd2:	f36f 71df 	bfc	r1, #31, #1
   2ccd6:	2300      	movs	r3, #0
   2ccd8:	480d      	ldr	r0, [pc, #52]	; (2cd10 <bt_rpmsg_rx+0xb4>)
   2ccda:	f7e9 fe37 	bl	1694c <z_impl_z_log_msg_static_create>
   2ccde:	46a5      	mov	sp, r4
   2cce0:	e004      	b.n	2ccec <bt_rpmsg_rx+0x90>
		buf = bt_rpmsg_evt_recv(data, remaining);
   2cce2:	f7ff fcd7 	bl	2c694 <bt_rpmsg_evt_recv>
	if (buf) {
   2cce6:	b108      	cbz	r0, 2ccec <bt_rpmsg_rx+0x90>
		bt_recv(buf);
   2cce8:	f7f1 f81e 	bl	1dd28 <bt_recv>
}
   2ccec:	3708      	adds	r7, #8
   2ccee:	46bd      	mov	sp, r7
   2ccf0:	bdb0      	pop	{r4, r5, r7, pc}
		buf = bt_rpmsg_acl_recv(data, remaining);
   2ccf2:	f7ff fdc9 	bl	2c888 <bt_rpmsg_acl_recv>
		break;
   2ccf6:	e7f6      	b.n	2cce6 <bt_rpmsg_rx+0x8a>
		buf = bt_rpmsg_iso_recv(data, remaining);
   2ccf8:	f7ff feba 	bl	2ca70 <bt_rpmsg_iso_recv>
		break;
   2ccfc:	e7f3      	b.n	2cce6 <bt_rpmsg_rx+0x8a>
		LOG_ERR("Unknown HCI type %u", pkt_indicator);
   2ccfe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2cd02:	e7be      	b.n	2cc82 <bt_rpmsg_rx+0x26>
   2cd04:	f06f 031b 	mvn.w	r3, #27
   2cd08:	e7c8      	b.n	2cc9c <bt_rpmsg_rx+0x40>
   2cd0a:	bf00      	nop
   2cd0c:	00045274 	.word	0x00045274
   2cd10:	0003f3d8 	.word	0x0003f3d8

0002cd14 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   2cd14:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   2cd18:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2cd1c:	4b01      	ldr	r3, [pc, #4]	; (2cd24 <set_comparator+0x10>)
   2cd1e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   2cd22:	4770      	bx	lr
   2cd24:	40015000 	.word	0x40015000

0002cd28 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2cd28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2cd2c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2cd2e:	4a02      	ldr	r2, [pc, #8]	; (2cd38 <event_enable+0x10>)
   2cd30:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   2cd34:	4770      	bx	lr
   2cd36:	bf00      	nop
   2cd38:	40015000 	.word	0x40015000

0002cd3c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2cd3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2cd40:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2cd42:	4a02      	ldr	r2, [pc, #8]	; (2cd4c <event_disable+0x10>)
   2cd44:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   2cd48:	4770      	bx	lr
   2cd4a:	bf00      	nop
   2cd4c:	40015000 	.word	0x40015000

0002cd50 <counter>:
     return p_reg->COUNTER;
   2cd50:	4b01      	ldr	r3, [pc, #4]	; (2cd58 <counter+0x8>)
   2cd52:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   2cd56:	4770      	bx	lr
   2cd58:	40015000 	.word	0x40015000

0002cd5c <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
   2cd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd60:	4606      	mov	r6, r0
   2cd62:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
   2cd64:	f7ff ffea 	bl	2cd3c <event_disable>
	event_clear(chan);
   2cd68:	4630      	mov	r0, r6
   2cd6a:	f010 fa2a 	bl	3d1c2 <event_clear>
	uint32_t cc_val = req_cc;
   2cd6e:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   2cd70:	2703      	movs	r7, #3
   2cd72:	e001      	b.n	2cd78 <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
   2cd74:	193d      	adds	r5, r7, r4
			cc_inc++;
   2cd76:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
   2cd78:	4629      	mov	r1, r5
   2cd7a:	4630      	mov	r0, r6
   2cd7c:	f7ff ffca 	bl	2cd14 <set_comparator>
		event_enable(chan);
   2cd80:	4630      	mov	r0, r6
   2cd82:	f7ff ffd1 	bl	2cd28 <event_enable>
		now = counter();
   2cd86:	f7ff ffe3 	bl	2cd50 <counter>
   2cd8a:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   2cd8c:	1cc1      	adds	r1, r0, #3
   2cd8e:	4628      	mov	r0, r5
   2cd90:	f010 fa06 	bl	3d1a0 <counter_sub>
   2cd94:	4b0b      	ldr	r3, [pc, #44]	; (2cdc4 <set_alarm+0x68>)
   2cd96:	4298      	cmp	r0, r3
   2cd98:	d911      	bls.n	2cdbe <set_alarm+0x62>
			if (event_check(chan)) {
   2cd9a:	4630      	mov	r0, r6
   2cd9c:	f010 fa04 	bl	3d1a8 <event_check>
   2cda0:	2800      	cmp	r0, #0
   2cda2:	d0e7      	beq.n	2cd74 <set_alarm+0x18>
				now = counter();
   2cda4:	f7ff ffd4 	bl	2cd50 <counter>
   2cda8:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   2cdaa:	4641      	mov	r1, r8
   2cdac:	f010 f9f8 	bl	3d1a0 <counter_sub>
   2cdb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2cdb4:	d903      	bls.n	2cdbe <set_alarm+0x62>
					event_clear(chan);
   2cdb6:	4630      	mov	r0, r6
   2cdb8:	f010 fa03 	bl	3d1c2 <event_clear>
   2cdbc:	e7da      	b.n	2cd74 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
   2cdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cdc2:	bf00      	nop
   2cdc4:	007ffffd 	.word	0x007ffffd

0002cdc8 <compare_int_lock>:
{
   2cdc8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   2cdca:	2301      	movs	r3, #1
   2cdcc:	4083      	lsls	r3, r0
   2cdce:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2cdd2:	4a0c      	ldr	r2, [pc, #48]	; (2ce04 <compare_int_lock+0x3c>)
   2cdd4:	e8d2 1fef 	ldaex	r1, [r2]
   2cdd8:	ea01 0e0c 	and.w	lr, r1, ip
   2cddc:	e8c2 efe4 	stlex	r4, lr, [r2]
   2cde0:	2c00      	cmp	r4, #0
   2cde2:	d1f7      	bne.n	2cdd4 <compare_int_lock+0xc>
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2cde4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2cde8:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   2cdea:	4807      	ldr	r0, [pc, #28]	; (2ce08 <compare_int_lock+0x40>)
   2cdec:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
   2cdf0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2cdf4:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   2cdf8:	420b      	tst	r3, r1
}
   2cdfa:	bf14      	ite	ne
   2cdfc:	2001      	movne	r0, #1
   2cdfe:	2000      	moveq	r0, #0
   2ce00:	bd10      	pop	{r4, pc}
   2ce02:	bf00      	nop
   2ce04:	2000c430 	.word	0x2000c430
   2ce08:	40015000 	.word	0x40015000

0002ce0c <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   2ce0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2ce10:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
   2ce12:	4a12      	ldr	r2, [pc, #72]	; (2ce5c <channel_processing_check_and_clear+0x50>)
   2ce14:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   2ce18:	4213      	tst	r3, r2
   2ce1a:	d101      	bne.n	2ce20 <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
   2ce1c:	2000      	movs	r0, #0
}
   2ce1e:	4770      	bx	lr
{
   2ce20:	b510      	push	{r4, lr}
   2ce22:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2ce24:	2301      	movs	r3, #1
   2ce26:	4083      	lsls	r3, r0
   2ce28:	43db      	mvns	r3, r3
   2ce2a:	490d      	ldr	r1, [pc, #52]	; (2ce60 <channel_processing_check_and_clear+0x54>)
   2ce2c:	e8d1 2fef 	ldaex	r2, [r1]
   2ce30:	ea02 0003 	and.w	r0, r2, r3
   2ce34:	e8c1 0fec 	stlex	ip, r0, [r1]
   2ce38:	f1bc 0f00 	cmp.w	ip, #0
   2ce3c:	d1f6      	bne.n	2ce2c <channel_processing_check_and_clear+0x20>
   2ce3e:	fa22 f304 	lsr.w	r3, r2, r4
   2ce42:	f013 0f01 	tst.w	r3, #1
   2ce46:	d103      	bne.n	2ce50 <channel_processing_check_and_clear+0x44>
		    event_check(chan)) {
   2ce48:	4620      	mov	r0, r4
   2ce4a:	f010 f9ad 	bl	3d1a8 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   2ce4e:	b118      	cbz	r0, 2ce58 <channel_processing_check_and_clear+0x4c>
			event_clear(chan);
   2ce50:	4620      	mov	r0, r4
   2ce52:	f010 f9b6 	bl	3d1c2 <event_clear>
			return true;
   2ce56:	2001      	movs	r0, #1
}
   2ce58:	bd10      	pop	{r4, pc}
   2ce5a:	bf00      	nop
   2ce5c:	40015000 	.word	0x40015000
   2ce60:	2000c428 	.word	0x2000c428

0002ce64 <compare_int_unlock>:
	if (key) {
   2ce64:	b901      	cbnz	r1, 2ce68 <compare_int_unlock+0x4>
}
   2ce66:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   2ce68:	2301      	movs	r3, #1
   2ce6a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2ce6c:	4a0d      	ldr	r2, [pc, #52]	; (2cea4 <compare_int_unlock+0x40>)
   2ce6e:	e8d2 cfef 	ldaex	ip, [r2]
   2ce72:	ea4c 0c03 	orr.w	ip, ip, r3
   2ce76:	e8c2 cfe1 	stlex	r1, ip, [r2]
   2ce7a:	2900      	cmp	r1, #0
   2ce7c:	d1f7      	bne.n	2ce6e <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2ce7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2ce82:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   2ce84:	4a08      	ldr	r2, [pc, #32]	; (2cea8 <compare_int_unlock+0x44>)
   2ce86:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ce8a:	4b08      	ldr	r3, [pc, #32]	; (2ceac <compare_int_unlock+0x48>)
   2ce8c:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2ce90:	40c3      	lsrs	r3, r0
   2ce92:	f013 0f01 	tst.w	r3, #1
   2ce96:	d0e6      	beq.n	2ce66 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2ce98:	4b05      	ldr	r3, [pc, #20]	; (2ceb0 <compare_int_unlock+0x4c>)
   2ce9a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2ce9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2cea2:	e7e0      	b.n	2ce66 <compare_int_unlock+0x2>
   2cea4:	2000c430 	.word	0x2000c430
   2cea8:	40015000 	.word	0x40015000
   2ceac:	2000c428 	.word	0x2000c428
   2ceb0:	e000e100 	.word	0xe000e100

0002ceb4 <sys_clock_timeout_handler>:
{
   2ceb4:	b538      	push	{r3, r4, r5, lr}
   2ceb6:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   2ceb8:	4610      	mov	r0, r2
   2ceba:	4619      	mov	r1, r3
   2cebc:	f010 f98d 	bl	3d1da <absolute_time_to_cc>
   2cec0:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   2cec2:	490d      	ldr	r1, [pc, #52]	; (2cef8 <sys_clock_timeout_handler+0x44>)
   2cec4:	680b      	ldr	r3, [r1, #0]
   2cec6:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
   2cec8:	181b      	adds	r3, r3, r0
   2ceca:	684c      	ldr	r4, [r1, #4]
   2cecc:	f144 0400 	adc.w	r4, r4, #0
   2ced0:	600b      	str	r3, [r1, #0]
   2ced2:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   2ced4:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   2ced8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   2cedc:	d209      	bcs.n	2cef2 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2cede:	4b07      	ldr	r3, [pc, #28]	; (2cefc <sys_clock_timeout_handler+0x48>)
   2cee0:	681b      	ldr	r3, [r3, #0]
   2cee2:	0a19      	lsrs	r1, r3, #8
   2cee4:	061b      	lsls	r3, r3, #24
   2cee6:	18d4      	adds	r4, r2, r3
   2cee8:	f141 0500 	adc.w	r5, r1, #0
   2ceec:	4b04      	ldr	r3, [pc, #16]	; (2cf00 <sys_clock_timeout_handler+0x4c>)
   2ceee:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
   2cef2:	f007 fc7b 	bl	347ec <sys_clock_announce>
}
   2cef6:	bd38      	pop	{r3, r4, r5, pc}
   2cef8:	2000b970 	.word	0x2000b970
   2cefc:	2000c434 	.word	0x2000c434
   2cf00:	2000b978 	.word	0x2000b978

0002cf04 <z_nrf_rtc_timer_compare_evt_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   2cf04:	2801      	cmp	r0, #1
   2cf06:	d804      	bhi.n	2cf12 <z_nrf_rtc_timer_compare_evt_address_get+0xe>
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
   2cf08:	b2c0      	uxtb	r0, r0
   2cf0a:	0083      	lsls	r3, r0, #2
}
   2cf0c:	4807      	ldr	r0, [pc, #28]	; (2cf2c <z_nrf_rtc_timer_compare_evt_address_get+0x28>)
   2cf0e:	4418      	add	r0, r3
   2cf10:	4770      	bx	lr
{
   2cf12:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   2cf14:	4c06      	ldr	r4, [pc, #24]	; (2cf30 <z_nrf_rtc_timer_compare_evt_address_get+0x2c>)
   2cf16:	237d      	movs	r3, #125	; 0x7d
   2cf18:	4622      	mov	r2, r4
   2cf1a:	4906      	ldr	r1, [pc, #24]	; (2cf34 <z_nrf_rtc_timer_compare_evt_address_get+0x30>)
   2cf1c:	4806      	ldr	r0, [pc, #24]	; (2cf38 <z_nrf_rtc_timer_compare_evt_address_get+0x34>)
   2cf1e:	f009 f9b9 	bl	36294 <assert_print>
   2cf22:	217d      	movs	r1, #125	; 0x7d
   2cf24:	4620      	mov	r0, r4
   2cf26:	f009 f9ae 	bl	36286 <assert_post_action>
   2cf2a:	bf00      	nop
   2cf2c:	40015140 	.word	0x40015140
   2cf30:	000452ec 	.word	0x000452ec
   2cf34:	00045320 	.word	0x00045320
   2cf38:	0003f72c 	.word	0x0003f72c

0002cf3c <z_nrf_rtc_timer_capture_task_address_get>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   2cf3c:	2801      	cmp	r0, #1
   2cf3e:	d808      	bhi.n	2cf52 <z_nrf_rtc_timer_capture_task_address_get+0x16>
	if (chan == 0) {
   2cf40:	b198      	cbz	r0, 2cf6a <z_nrf_rtc_timer_capture_task_address_get+0x2e>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
   2cf42:	3010      	adds	r0, #16
   2cf44:	0080      	lsls	r0, r0, #2
   2cf46:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
   2cf48:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2cf4c:	f500 30a8 	add.w	r0, r0, #86016	; 0x15000
	return nrf_rtc_task_address_get(RTC, task);
   2cf50:	4770      	bx	lr
{
   2cf52:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   2cf54:	4c06      	ldr	r4, [pc, #24]	; (2cf70 <z_nrf_rtc_timer_capture_task_address_get+0x34>)
   2cf56:	2384      	movs	r3, #132	; 0x84
   2cf58:	4622      	mov	r2, r4
   2cf5a:	4906      	ldr	r1, [pc, #24]	; (2cf74 <z_nrf_rtc_timer_capture_task_address_get+0x38>)
   2cf5c:	4806      	ldr	r0, [pc, #24]	; (2cf78 <z_nrf_rtc_timer_capture_task_address_get+0x3c>)
   2cf5e:	f009 f999 	bl	36294 <assert_print>
   2cf62:	2184      	movs	r1, #132	; 0x84
   2cf64:	4620      	mov	r0, r4
   2cf66:	f009 f98e 	bl	36286 <assert_post_action>
		return 0;
   2cf6a:	2000      	movs	r0, #0
}
   2cf6c:	4770      	bx	lr
   2cf6e:	bf00      	nop
   2cf70:	000452ec 	.word	0x000452ec
   2cf74:	00045320 	.word	0x00045320
   2cf78:	0003f72c 	.word	0x0003f72c

0002cf7c <z_nrf_rtc_timer_compare_read>:
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   2cf7c:	2801      	cmp	r0, #1
   2cf7e:	d805      	bhi.n	2cf8c <z_nrf_rtc_timer_compare_read+0x10>
    return p_reg->CC[ch];
   2cf80:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   2cf84:	4b07      	ldr	r3, [pc, #28]	; (2cfa4 <z_nrf_rtc_timer_compare_read+0x28>)
   2cf86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   2cf8a:	4770      	bx	lr
{
   2cf8c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan >= 0 && chan < CHAN_COUNT);
   2cf8e:	4c06      	ldr	r4, [pc, #24]	; (2cfa8 <z_nrf_rtc_timer_compare_read+0x2c>)
   2cf90:	23ba      	movs	r3, #186	; 0xba
   2cf92:	4622      	mov	r2, r4
   2cf94:	4905      	ldr	r1, [pc, #20]	; (2cfac <z_nrf_rtc_timer_compare_read+0x30>)
   2cf96:	4806      	ldr	r0, [pc, #24]	; (2cfb0 <z_nrf_rtc_timer_compare_read+0x34>)
   2cf98:	f009 f97c 	bl	36294 <assert_print>
   2cf9c:	21ba      	movs	r1, #186	; 0xba
   2cf9e:	4620      	mov	r0, r4
   2cfa0:	f009 f971 	bl	36286 <assert_post_action>
   2cfa4:	40015000 	.word	0x40015000
   2cfa8:	000452ec 	.word	0x000452ec
   2cfac:	00045320 	.word	0x00045320
   2cfb0:	0003f72c 	.word	0x0003f72c

0002cfb4 <z_nrf_rtc_timer_read>:
{
   2cfb4:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   2cfb6:	4b0d      	ldr	r3, [pc, #52]	; (2cfec <z_nrf_rtc_timer_read+0x38>)
   2cfb8:	681c      	ldr	r4, [r3, #0]
   2cfba:	0a25      	lsrs	r5, r4, #8
   2cfbc:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2cfbe:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   2cfc2:	f7ff fec5 	bl	2cd50 <counter>
   2cfc6:	4603      	mov	r3, r0
	val += cntr;
   2cfc8:	1900      	adds	r0, r0, r4
   2cfca:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2cfce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2cfd2:	d20a      	bcs.n	2cfea <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   2cfd4:	4b06      	ldr	r3, [pc, #24]	; (2cff0 <z_nrf_rtc_timer_read+0x3c>)
   2cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cfda:	4290      	cmp	r0, r2
   2cfdc:	eb71 0303 	sbcs.w	r3, r1, r3
   2cfe0:	d203      	bcs.n	2cfea <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   2cfe2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   2cfe6:	f141 0100 	adc.w	r1, r1, #0
}
   2cfea:	bd38      	pop	{r3, r4, r5, pc}
   2cfec:	2000c434 	.word	0x2000c434
   2cff0:	2000b978 	.word	0x2000b978

0002cff4 <compare_set_nolocks>:
{
   2cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cff6:	4606      	mov	r6, r0
   2cff8:	4614      	mov	r4, r2
   2cffa:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   2cffc:	4610      	mov	r0, r2
   2cffe:	4619      	mov	r1, r3
   2d000:	f010 f8eb 	bl	3d1da <absolute_time_to_cc>
   2d004:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   2d006:	f7ff ffd5 	bl	2cfb4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2d00a:	42a0      	cmp	r0, r4
   2d00c:	eb71 0305 	sbcs.w	r3, r1, r5
   2d010:	d215      	bcs.n	2d03e <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   2d012:	1a20      	subs	r0, r4, r0
   2d014:	eb65 0101 	sbc.w	r1, r5, r1
   2d018:	4b15      	ldr	r3, [pc, #84]	; (2d070 <compare_set_nolocks+0x7c>)
   2d01a:	4298      	cmp	r0, r3
   2d01c:	f171 0100 	sbcs.w	r1, r1, #0
   2d020:	d223      	bcs.n	2d06a <compare_set_nolocks+0x76>
		if (target_time != cc_data[chan].target_time) {
   2d022:	4b14      	ldr	r3, [pc, #80]	; (2d074 <compare_set_nolocks+0x80>)
   2d024:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   2d028:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   2d02c:	42ab      	cmp	r3, r5
   2d02e:	bf08      	it	eq
   2d030:	42a2      	cmpeq	r2, r4
   2d032:	d00e      	beq.n	2d052 <compare_set_nolocks+0x5e>
			set_alarm(chan, cc_value);
   2d034:	4639      	mov	r1, r7
   2d036:	4630      	mov	r0, r6
   2d038:	f7ff fe90 	bl	2cd5c <set_alarm>
   2d03c:	e009      	b.n	2d052 <compare_set_nolocks+0x5e>
		atomic_or(&force_isr_mask, BIT(chan));
   2d03e:	2301      	movs	r3, #1
   2d040:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d042:	4a0d      	ldr	r2, [pc, #52]	; (2d078 <compare_set_nolocks+0x84>)
   2d044:	e8d2 0fef 	ldaex	r0, [r2]
   2d048:	4318      	orrs	r0, r3
   2d04a:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2d04e:	2900      	cmp	r1, #0
   2d050:	d1f8      	bne.n	2d044 <compare_set_nolocks+0x50>
	cc_data[chan].target_time = target_time;
   2d052:	4b08      	ldr	r3, [pc, #32]	; (2d074 <compare_set_nolocks+0x80>)
   2d054:	0132      	lsls	r2, r6, #4
   2d056:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   2d05a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   2d05e:	9906      	ldr	r1, [sp, #24]
   2d060:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   2d062:	9b07      	ldr	r3, [sp, #28]
   2d064:	6073      	str	r3, [r6, #4]
	return ret;
   2d066:	2000      	movs	r0, #0
}
   2d068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
   2d06a:	f06f 0015 	mvn.w	r0, #21
   2d06e:	e7fb      	b.n	2d068 <compare_set_nolocks+0x74>
   2d070:	00800001 	.word	0x00800001
   2d074:	2000b950 	.word	0x2000b950
   2d078:	2000c428 	.word	0x2000c428

0002d07c <z_nrf_rtc_timer_set>:
{
   2d07c:	b510      	push	{r4, lr}
   2d07e:	b082      	sub	sp, #8
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   2d080:	2801      	cmp	r0, #1
   2d082:	d107      	bne.n	2d094 <z_nrf_rtc_timer_set+0x18>
	return compare_set(chan, target_time, handler, user_data);
   2d084:	9905      	ldr	r1, [sp, #20]
   2d086:	9101      	str	r1, [sp, #4]
   2d088:	9904      	ldr	r1, [sp, #16]
   2d08a:	9100      	str	r1, [sp, #0]
   2d08c:	f010 f8b6 	bl	3d1fc <compare_set>
}
   2d090:	b002      	add	sp, #8
   2d092:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   2d094:	4c06      	ldr	r4, [pc, #24]	; (2d0b0 <z_nrf_rtc_timer_set+0x34>)
   2d096:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   2d09a:	4622      	mov	r2, r4
   2d09c:	4905      	ldr	r1, [pc, #20]	; (2d0b4 <z_nrf_rtc_timer_set+0x38>)
   2d09e:	4806      	ldr	r0, [pc, #24]	; (2d0b8 <z_nrf_rtc_timer_set+0x3c>)
   2d0a0:	f009 f8f8 	bl	36294 <assert_print>
   2d0a4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
   2d0a8:	4620      	mov	r0, r4
   2d0aa:	f009 f8ec 	bl	36286 <assert_post_action>
   2d0ae:	bf00      	nop
   2d0b0:	000452ec 	.word	0x000452ec
   2d0b4:	0004533c 	.word	0x0004533c
   2d0b8:	0003f72c 	.word	0x0003f72c

0002d0bc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   2d0bc:	b530      	push	{r4, r5, lr}
   2d0be:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   2d0c0:	2300      	movs	r3, #0
   2d0c2:	4a1f      	ldr	r2, [pc, #124]	; (2d140 <sys_clock_driver_init+0x84>)
   2d0c4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2d0c8:	e00f      	b.n	2d0ea <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   2d0ca:	4a1e      	ldr	r2, [pc, #120]	; (2d144 <sys_clock_driver_init+0x88>)
   2d0cc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   2d0d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d0d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d0d8:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2d0dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2d0e0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   2d0e2:	4917      	ldr	r1, [pc, #92]	; (2d140 <sys_clock_driver_init+0x84>)
   2d0e4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2d0e8:	3301      	adds	r3, #1
   2d0ea:	2b01      	cmp	r3, #1
   2d0ec:	dded      	ble.n	2d0ca <sys_clock_driver_init+0xe>
   2d0ee:	4c14      	ldr	r4, [pc, #80]	; (2d140 <sys_clock_driver_init+0x84>)
   2d0f0:	2502      	movs	r5, #2
   2d0f2:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2d0f6:	4b14      	ldr	r3, [pc, #80]	; (2d148 <sys_clock_driver_init+0x8c>)
   2d0f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2d0fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2d100:	2200      	movs	r2, #0
   2d102:	2101      	movs	r1, #1
   2d104:	2015      	movs	r0, #21
   2d106:	f7ec f963 	bl	193d0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2d10a:	2015      	movs	r0, #21
   2d10c:	f00a ffce 	bl	380ac <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   2d110:	2301      	movs	r3, #1
   2d112:	60a3      	str	r3, [r4, #8]
   2d114:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   2d116:	4b0d      	ldr	r3, [pc, #52]	; (2d14c <sys_clock_driver_init+0x90>)
   2d118:	2203      	movs	r2, #3
   2d11a:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
   2d11c:	4b0c      	ldr	r3, [pc, #48]	; (2d150 <sys_clock_driver_init+0x94>)
   2d11e:	601d      	str	r5, [r3, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2d120:	2400      	movs	r4, #0
   2d122:	9401      	str	r4, [sp, #4]
   2d124:	4b0b      	ldr	r3, [pc, #44]	; (2d154 <sys_clock_driver_init+0x98>)
   2d126:	9300      	str	r3, [sp, #0]
   2d128:	4a0b      	ldr	r2, [pc, #44]	; (2d158 <sys_clock_driver_init+0x9c>)
   2d12a:	2300      	movs	r3, #0
   2d12c:	4620      	mov	r0, r4
   2d12e:	f010 f865 	bl	3d1fc <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2d132:	4628      	mov	r0, r5
   2d134:	f7fc fe36 	bl	29da4 <z_nrf_clock_control_lf_on>

	return 0;
}
   2d138:	4620      	mov	r0, r4
   2d13a:	b003      	add	sp, #12
   2d13c:	bd30      	pop	{r4, r5, pc}
   2d13e:	bf00      	nop
   2d140:	40015000 	.word	0x40015000
   2d144:	2000b950 	.word	0x2000b950
   2d148:	e000e100 	.word	0xe000e100
   2d14c:	2000c430 	.word	0x2000c430
   2d150:	2000c42c 	.word	0x2000c42c
   2d154:	0002ceb5 	.word	0x0002ceb5
   2d158:	007fffff 	.word	0x007fffff

0002d15c <process_channel>:
{
   2d15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d160:	b082      	sub	sp, #8
   2d162:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   2d164:	f7ff fe52 	bl	2ce0c <channel_processing_check_and_clear>
   2d168:	b910      	cbnz	r0, 2d170 <process_channel+0x14>
}
   2d16a:	b002      	add	sp, #8
   2d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   2d170:	f7ff ff20 	bl	2cfb4 <z_nrf_rtc_timer_read>
   2d174:	4682      	mov	sl, r0
   2d176:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
   2d178:	f010 f832 	bl	3d1e0 <full_int_lock>
   2d17c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
   2d17e:	4b15      	ldr	r3, [pc, #84]	; (2d1d4 <process_channel+0x78>)
   2d180:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   2d184:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   2d188:	45c2      	cmp	sl, r8
   2d18a:	eb75 0509 	sbcs.w	r5, r5, r9
   2d18e:	d20b      	bcs.n	2d1a8 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   2d190:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
   2d192:	4630      	mov	r0, r6
   2d194:	f010 f82d 	bl	3d1f2 <full_int_unlock>
		if (handler) {
   2d198:	2d00      	cmp	r5, #0
   2d19a:	d0e6      	beq.n	2d16a <process_channel+0xe>
			handler(chan, expire_time, user_context);
   2d19c:	9700      	str	r7, [sp, #0]
   2d19e:	4642      	mov	r2, r8
   2d1a0:	464b      	mov	r3, r9
   2d1a2:	4620      	mov	r0, r4
   2d1a4:	47a8      	blx	r5
}
   2d1a6:	e7e0      	b.n	2d16a <process_channel+0xe>
			handler = cc_data[chan].callback;
   2d1a8:	4a0a      	ldr	r2, [pc, #40]	; (2d1d4 <process_channel+0x78>)
   2d1aa:	0123      	lsls	r3, r4, #4
   2d1ac:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   2d1b0:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
   2d1b2:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
   2d1b4:	2000      	movs	r0, #0
   2d1b6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   2d1b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d1bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d1c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   2d1c4:	4620      	mov	r0, r4
   2d1c6:	f7ff fdb9 	bl	2cd3c <event_disable>
			event_clear(chan);
   2d1ca:	4620      	mov	r0, r4
   2d1cc:	f00f fff9 	bl	3d1c2 <event_clear>
   2d1d0:	e7df      	b.n	2d192 <process_channel+0x36>
   2d1d2:	bf00      	nop
   2d1d4:	2000b950 	.word	0x2000b950

0002d1d8 <rtc_nrf_isr>:
{
   2d1d8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   2d1da:	4b0e      	ldr	r3, [pc, #56]	; (2d214 <rtc_nrf_isr+0x3c>)
   2d1dc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2d1e0:	f013 0f02 	tst.w	r3, #2
   2d1e4:	d00d      	beq.n	2d202 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d1e6:	4b0b      	ldr	r3, [pc, #44]	; (2d214 <rtc_nrf_isr+0x3c>)
   2d1e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   2d1ec:	b14b      	cbz	r3, 2d202 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2d1ee:	4b09      	ldr	r3, [pc, #36]	; (2d214 <rtc_nrf_isr+0x3c>)
   2d1f0:	2200      	movs	r2, #0
   2d1f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2d1f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
   2d1fa:	4a07      	ldr	r2, [pc, #28]	; (2d218 <rtc_nrf_isr+0x40>)
   2d1fc:	6813      	ldr	r3, [r2, #0]
   2d1fe:	3301      	adds	r3, #1
   2d200:	6013      	str	r3, [r2, #0]
{
   2d202:	2400      	movs	r4, #0
   2d204:	e003      	b.n	2d20e <rtc_nrf_isr+0x36>
		process_channel(chan);
   2d206:	4620      	mov	r0, r4
   2d208:	f7ff ffa8 	bl	2d15c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2d20c:	3401      	adds	r4, #1
   2d20e:	2c01      	cmp	r4, #1
   2d210:	ddf9      	ble.n	2d206 <rtc_nrf_isr+0x2e>
}
   2d212:	bd10      	pop	{r4, pc}
   2d214:	40015000 	.word	0x40015000
   2d218:	2000c434 	.word	0x2000c434

0002d21c <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   2d21c:	4b12      	ldr	r3, [pc, #72]	; (2d268 <z_nrf_rtc_timer_chan_alloc+0x4c>)
   2d21e:	6818      	ldr	r0, [r3, #0]
   2d220:	b1f0      	cbz	r0, 2d260 <z_nrf_rtc_timer_chan_alloc+0x44>
{
   2d222:	b500      	push	{lr}
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   2d224:	fab0 f080 	clz	r0, r0
   2d228:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
   2d22c:	2301      	movs	r3, #1
   2d22e:	4083      	lsls	r3, r0
   2d230:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2d232:	490d      	ldr	r1, [pc, #52]	; (2d268 <z_nrf_rtc_timer_chan_alloc+0x4c>)
   2d234:	e8d1 2fef 	ldaex	r2, [r1]
   2d238:	ea02 0c03 	and.w	ip, r2, r3
   2d23c:	e8c1 cfee 	stlex	lr, ip, [r1]
   2d240:	f1be 0f00 	cmp.w	lr, #0
   2d244:	d1f6      	bne.n	2d234 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
   2d246:	fa22 f300 	lsr.w	r3, r2, r0
   2d24a:	f013 0f01 	tst.w	r3, #1
   2d24e:	d105      	bne.n	2d25c <z_nrf_rtc_timer_chan_alloc+0x40>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
   2d250:	4b05      	ldr	r3, [pc, #20]	; (2d268 <z_nrf_rtc_timer_chan_alloc+0x4c>)
   2d252:	6818      	ldr	r0, [r3, #0]
   2d254:	2800      	cmp	r0, #0
   2d256:	d1e5      	bne.n	2d224 <z_nrf_rtc_timer_chan_alloc+0x8>
			return -ENOMEM;
   2d258:	f06f 000b 	mvn.w	r0, #11
}
   2d25c:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
   2d260:	f06f 000b 	mvn.w	r0, #11
}
   2d264:	4770      	bx	lr
   2d266:	bf00      	nop
   2d268:	2000c42c 	.word	0x2000c42c

0002d26c <z_nrf_rtc_timer_chan_free>:
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   2d26c:	2801      	cmp	r0, #1
   2d26e:	d10a      	bne.n	2d286 <z_nrf_rtc_timer_chan_free+0x1a>
	atomic_or(&alloc_mask, BIT(chan));
   2d270:	2301      	movs	r3, #1
   2d272:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2d274:	4a0b      	ldr	r2, [pc, #44]	; (2d2a4 <z_nrf_rtc_timer_chan_free+0x38>)
   2d276:	e8d2 0fef 	ldaex	r0, [r2]
   2d27a:	4318      	orrs	r0, r3
   2d27c:	e8c2 0fe1 	stlex	r1, r0, [r2]
   2d280:	2900      	cmp	r1, #0
   2d282:	d1f8      	bne.n	2d276 <z_nrf_rtc_timer_chan_free+0xa>
   2d284:	4770      	bx	lr
{
   2d286:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(chan > 0 && chan < CHAN_COUNT);
   2d288:	4c07      	ldr	r4, [pc, #28]	; (2d2a8 <z_nrf_rtc_timer_chan_free+0x3c>)
   2d28a:	f240 2329 	movw	r3, #553	; 0x229
   2d28e:	4622      	mov	r2, r4
   2d290:	4906      	ldr	r1, [pc, #24]	; (2d2ac <z_nrf_rtc_timer_chan_free+0x40>)
   2d292:	4807      	ldr	r0, [pc, #28]	; (2d2b0 <z_nrf_rtc_timer_chan_free+0x44>)
   2d294:	f008 fffe 	bl	36294 <assert_print>
   2d298:	f240 2129 	movw	r1, #553	; 0x229
   2d29c:	4620      	mov	r0, r4
   2d29e:	f008 fff2 	bl	36286 <assert_post_action>
   2d2a2:	bf00      	nop
   2d2a4:	2000c42c 	.word	0x2000c42c
   2d2a8:	000452ec 	.word	0x000452ec
   2d2ac:	0004533c 	.word	0x0004533c
   2d2b0:	0003f72c 	.word	0x0003f72c

0002d2b4 <sys_clock_set_timeout>:
{
   2d2b4:	b510      	push	{r4, lr}
   2d2b6:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
   2d2b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2d2bc:	d006      	beq.n	2d2cc <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2d2be:	2801      	cmp	r0, #1
   2d2c0:	dd09      	ble.n	2d2d6 <sys_clock_set_timeout+0x22>
   2d2c2:	4b15      	ldr	r3, [pc, #84]	; (2d318 <sys_clock_set_timeout+0x64>)
   2d2c4:	4298      	cmp	r0, r3
   2d2c6:	dc24      	bgt.n	2d312 <sys_clock_set_timeout+0x5e>
   2d2c8:	4604      	mov	r4, r0
   2d2ca:	e005      	b.n	2d2d8 <sys_clock_set_timeout+0x24>
		sys_busy = false;
   2d2cc:	4b13      	ldr	r3, [pc, #76]	; (2d31c <sys_clock_set_timeout+0x68>)
   2d2ce:	2200      	movs	r2, #0
   2d2d0:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
   2d2d2:	4c13      	ldr	r4, [pc, #76]	; (2d320 <sys_clock_set_timeout+0x6c>)
   2d2d4:	e003      	b.n	2d2de <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2d2d6:	2401      	movs	r4, #1
		sys_busy = true;
   2d2d8:	4b10      	ldr	r3, [pc, #64]	; (2d31c <sys_clock_set_timeout+0x68>)
   2d2da:	2201      	movs	r2, #1
   2d2dc:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2d2de:	f7ff fe69 	bl	2cfb4 <z_nrf_rtc_timer_read>
   2d2e2:	4b10      	ldr	r3, [pc, #64]	; (2d324 <sys_clock_set_timeout+0x70>)
   2d2e4:	681a      	ldr	r2, [r3, #0]
   2d2e6:	685b      	ldr	r3, [r3, #4]
   2d2e8:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   2d2ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2d2ee:	d300      	bcc.n	2d2f2 <sys_clock_set_timeout+0x3e>
		cyc = 0;
   2d2f0:	2400      	movs	r4, #0
	cyc += unannounced;
   2d2f2:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   2d2f4:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   2d2f8:	d300      	bcc.n	2d2fc <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
   2d2fa:	4c09      	ldr	r4, [pc, #36]	; (2d320 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
   2d2fc:	2000      	movs	r0, #0
   2d2fe:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2d300:	9001      	str	r0, [sp, #4]
   2d302:	4909      	ldr	r1, [pc, #36]	; (2d328 <sys_clock_set_timeout+0x74>)
   2d304:	9100      	str	r1, [sp, #0]
   2d306:	f143 0300 	adc.w	r3, r3, #0
   2d30a:	f00f ff77 	bl	3d1fc <compare_set>
}
   2d30e:	b002      	add	sp, #8
   2d310:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   2d312:	4c03      	ldr	r4, [pc, #12]	; (2d320 <sys_clock_set_timeout+0x6c>)
   2d314:	e7e0      	b.n	2d2d8 <sys_clock_set_timeout+0x24>
   2d316:	bf00      	nop
   2d318:	007ffffe 	.word	0x007ffffe
   2d31c:	2000caba 	.word	0x2000caba
   2d320:	007fffff 	.word	0x007fffff
   2d324:	2000b970 	.word	0x2000b970
   2d328:	0002ceb5 	.word	0x0002ceb5

0002d32c <sys_clock_elapsed>:
{
   2d32c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   2d32e:	f7ff fe41 	bl	2cfb4 <z_nrf_rtc_timer_read>
   2d332:	4b02      	ldr	r3, [pc, #8]	; (2d33c <sys_clock_elapsed+0x10>)
   2d334:	681b      	ldr	r3, [r3, #0]
}
   2d336:	1ac0      	subs	r0, r0, r3
   2d338:	bd08      	pop	{r3, pc}
   2d33a:	bf00      	nop
   2d33c:	2000b970 	.word	0x2000b970

0002d340 <nrf_gpio_pin_port_decode>:
{
   2d340:	b538      	push	{r3, r4, r5, lr}
   2d342:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2d344:	6804      	ldr	r4, [r0, #0]
   2d346:	4620      	mov	r0, r4
   2d348:	f00f ff8e 	bl	3d268 <nrf_gpio_pin_present_check>
   2d34c:	b140      	cbz	r0, 2d360 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2d34e:	f004 031f 	and.w	r3, r4, #31
   2d352:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d354:	0964      	lsrs	r4, r4, #5
   2d356:	d01d      	beq.n	2d394 <nrf_gpio_pin_port_decode+0x54>
   2d358:	2c01      	cmp	r4, #1
   2d35a:	d10e      	bne.n	2d37a <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   2d35c:	480e      	ldr	r0, [pc, #56]	; (2d398 <nrf_gpio_pin_port_decode+0x58>)
}
   2d35e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2d360:	4c0e      	ldr	r4, [pc, #56]	; (2d39c <nrf_gpio_pin_port_decode+0x5c>)
   2d362:	f240 2347 	movw	r3, #583	; 0x247
   2d366:	4622      	mov	r2, r4
   2d368:	490d      	ldr	r1, [pc, #52]	; (2d3a0 <nrf_gpio_pin_port_decode+0x60>)
   2d36a:	480e      	ldr	r0, [pc, #56]	; (2d3a4 <nrf_gpio_pin_port_decode+0x64>)
   2d36c:	f008 ff92 	bl	36294 <assert_print>
   2d370:	f240 2147 	movw	r1, #583	; 0x247
   2d374:	4620      	mov	r0, r4
   2d376:	f008 ff86 	bl	36286 <assert_post_action>
            NRFX_ASSERT(0);
   2d37a:	4c08      	ldr	r4, [pc, #32]	; (2d39c <nrf_gpio_pin_port_decode+0x5c>)
   2d37c:	f44f 7313 	mov.w	r3, #588	; 0x24c
   2d380:	4622      	mov	r2, r4
   2d382:	4909      	ldr	r1, [pc, #36]	; (2d3a8 <nrf_gpio_pin_port_decode+0x68>)
   2d384:	4807      	ldr	r0, [pc, #28]	; (2d3a4 <nrf_gpio_pin_port_decode+0x64>)
   2d386:	f008 ff85 	bl	36294 <assert_print>
   2d38a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2d38e:	4620      	mov	r0, r4
   2d390:	f008 ff79 	bl	36286 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2d394:	4805      	ldr	r0, [pc, #20]	; (2d3ac <nrf_gpio_pin_port_decode+0x6c>)
   2d396:	e7e2      	b.n	2d35e <nrf_gpio_pin_port_decode+0x1e>
   2d398:	40842800 	.word	0x40842800
   2d39c:	000448c8 	.word	0x000448c8
   2d3a0:	000448fc 	.word	0x000448fc
   2d3a4:	0003f72c 	.word	0x0003f72c
   2d3a8:	0003f964 	.word	0x0003f964
   2d3ac:	40842500 	.word	0x40842500

0002d3b0 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   2d3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d3b4:	b085      	sub	sp, #20
   2d3b6:	4607      	mov	r7, r0
   2d3b8:	468b      	mov	fp, r1
   2d3ba:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2d3bc:	2400      	movs	r4, #0
   2d3be:	e022      	b.n	2d406 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
   2d3c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2d3c4:	e02c      	b.n	2d420 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
   2d3c6:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d3ca:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d3cc:	9603      	str	r6, [sp, #12]
			write = 1U;
   2d3ce:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
   2d3d0:	2d7f      	cmp	r5, #127	; 0x7f
   2d3d2:	d016      	beq.n	2d402 <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
   2d3d4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2d3d8:	f040 810e 	bne.w	2d5f8 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   2d3dc:	f857 300a 	ldr.w	r3, [r7, sl]
   2d3e0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   2d3e4:	d002      	beq.n	2d3ec <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d3e6:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
   2d3e8:	2200      	movs	r2, #0
   2d3ea:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   2d3ec:	2200      	movs	r2, #0
   2d3ee:	9201      	str	r2, [sp, #4]
   2d3f0:	f8cd 9000 	str.w	r9, [sp]
   2d3f4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   2d3f8:	4632      	mov	r2, r6
   2d3fa:	9903      	ldr	r1, [sp, #12]
   2d3fc:	4628      	mov	r0, r5
   2d3fe:	f00f ff67 	bl	3d2d0 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2d402:	3401      	adds	r4, #1
   2d404:	b2e4      	uxtb	r4, r4
   2d406:	455c      	cmp	r4, fp
   2d408:	f080 80fa 	bcs.w	2d600 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2d40c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
   2d410:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   2d414:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
   2d418:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
   2d41c:	2d7f      	cmp	r5, #127	; 0x7f
   2d41e:	d0cf      	beq.n	2d3c0 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
   2d420:	0c1b      	lsrs	r3, r3, #16
   2d422:	2b22      	cmp	r3, #34	; 0x22
   2d424:	f200 80ee 	bhi.w	2d604 <pinctrl_configure_pins+0x254>
   2d428:	a201      	add	r2, pc, #4	; (adr r2, 2d430 <pinctrl_configure_pins+0x80>)
   2d42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2d42e:	bf00      	nop
   2d430:	0002d3c7 	.word	0x0002d3c7
   2d434:	0002d4bd 	.word	0x0002d4bd
   2d438:	0002d4cb 	.word	0x0002d4cb
   2d43c:	0002d4d7 	.word	0x0002d4d7
   2d440:	0002d4e5 	.word	0x0002d4e5
   2d444:	0002d4f3 	.word	0x0002d4f3
   2d448:	0002d4ff 	.word	0x0002d4ff
   2d44c:	0002d605 	.word	0x0002d605
   2d450:	0002d605 	.word	0x0002d605
   2d454:	0002d605 	.word	0x0002d605
   2d458:	0002d605 	.word	0x0002d605
   2d45c:	0002d50d 	.word	0x0002d50d
   2d460:	0002d521 	.word	0x0002d521
   2d464:	0002d605 	.word	0x0002d605
   2d468:	0002d605 	.word	0x0002d605
   2d46c:	0002d605 	.word	0x0002d605
   2d470:	0002d605 	.word	0x0002d605
   2d474:	0002d605 	.word	0x0002d605
   2d478:	0002d605 	.word	0x0002d605
   2d47c:	0002d605 	.word	0x0002d605
   2d480:	0002d605 	.word	0x0002d605
   2d484:	0002d605 	.word	0x0002d605
   2d488:	0002d535 	.word	0x0002d535
   2d48c:	0002d547 	.word	0x0002d547
   2d490:	0002d559 	.word	0x0002d559
   2d494:	0002d56b 	.word	0x0002d56b
   2d498:	0002d605 	.word	0x0002d605
   2d49c:	0002d605 	.word	0x0002d605
   2d4a0:	0002d605 	.word	0x0002d605
   2d4a4:	0002d57d 	.word	0x0002d57d
   2d4a8:	0002d58d 	.word	0x0002d58d
   2d4ac:	0002d599 	.word	0x0002d599
   2d4b0:	0002d5a9 	.word	0x0002d5a9
   2d4b4:	0002d5b9 	.word	0x0002d5b9
   2d4b8:	0002d5c9 	.word	0x0002d5c9
			NRF_PSEL_UART(reg, RXD) = pin;
   2d4bc:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d4c0:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d4c2:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   2d4c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d4c8:	e782      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
   2d4ca:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d4ce:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d4d0:	9603      	str	r6, [sp, #12]
			write = 1U;
   2d4d2:	4631      	mov	r1, r6
			break;
   2d4d4:	e77c      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
   2d4d6:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d4da:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d4dc:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   2d4de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d4e2:	e775      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2d4e4:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d4e8:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d4ea:	2301      	movs	r3, #1
   2d4ec:	9303      	str	r3, [sp, #12]
			write = 0U;
   2d4ee:	4631      	mov	r1, r6
			break;
   2d4f0:	e76e      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2d4f2:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d4f6:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d4f8:	9603      	str	r6, [sp, #12]
			write = 0U;
   2d4fa:	2100      	movs	r1, #0
			break;
   2d4fc:	e768      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   2d4fe:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d502:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d504:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   2d506:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d50a:	e761      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   2d50c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2d510:	f1b9 0f00 	cmp.w	r9, #0
   2d514:	d060      	beq.n	2d5d8 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d516:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d518:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   2d51a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d51e:	e757      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   2d520:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   2d524:	f1b9 0f00 	cmp.w	r9, #0
   2d528:	d05e      	beq.n	2d5e8 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d52a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d52c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
   2d52e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2d532:	e74d      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   2d534:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   2d538:	f857 100a 	ldr.w	r1, [r7, sl]
   2d53c:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d540:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d542:	9603      	str	r6, [sp, #12]
			break;
   2d544:	e744      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   2d546:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2d54a:	f857 100a 	ldr.w	r1, [r7, sl]
   2d54e:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d552:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d554:	9603      	str	r6, [sp, #12]
			break;
   2d556:	e73b      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   2d558:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   2d55c:	f857 100a 	ldr.w	r1, [r7, sl]
   2d560:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d564:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d566:	9603      	str	r6, [sp, #12]
			break;
   2d568:	e732      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   2d56a:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
   2d56e:	f857 100a 	ldr.w	r1, [r7, sl]
   2d572:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d576:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d578:	9603      	str	r6, [sp, #12]
			break;
   2d57a:	e729      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   2d57c:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d580:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d582:	2300      	movs	r3, #0
   2d584:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   2d586:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d58a:	e721      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   2d58c:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d590:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2d592:	9603      	str	r6, [sp, #12]
			write = 1U;
   2d594:	4631      	mov	r1, r6
			break;
   2d596:	e71b      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2d598:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d59c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d59e:	2300      	movs	r3, #0
   2d5a0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   2d5a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d5a6:	e713      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   2d5a8:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d5ac:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d5ae:	2300      	movs	r3, #0
   2d5b0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   2d5b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d5b6:	e70b      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2d5b8:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d5bc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d5be:	2300      	movs	r3, #0
   2d5c0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   2d5c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d5c6:	e703      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   2d5c8:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   2d5cc:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d5ce:	2300      	movs	r3, #0
   2d5d0:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
   2d5d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
   2d5d6:	e6fb      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d5d8:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d5da:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   2d5de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   2d5e2:	f04f 0906 	mov.w	r9, #6
   2d5e6:	e6f3      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2d5e8:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
   2d5ea:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
   2d5ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
   2d5f2:	f04f 0906 	mov.w	r9, #6
   2d5f6:	e6eb      	b.n	2d3d0 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
   2d5f8:	4628      	mov	r0, r5
   2d5fa:	f00f fe61 	bl	3d2c0 <nrf_gpio_pin_write>
   2d5fe:	e6ed      	b.n	2d3dc <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   2d600:	2000      	movs	r0, #0
   2d602:	e001      	b.n	2d608 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
   2d604:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2d608:	b005      	add	sp, #20
   2d60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d60e:	bf00      	nop

0002d610 <nrf_ipc_send_task_get>:
    NRFX_ASSERT(index < IPC_CH_NUM);
   2d610:	280f      	cmp	r0, #15
   2d612:	d803      	bhi.n	2d61c <nrf_ipc_send_task_get+0xc>
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
   2d614:	0080      	lsls	r0, r0, #2
}
   2d616:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
   2d61a:	4770      	bx	lr
{
   2d61c:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   2d61e:	4c06      	ldr	r4, [pc, #24]	; (2d638 <nrf_ipc_send_task_get+0x28>)
   2d620:	f240 13e1 	movw	r3, #481	; 0x1e1
   2d624:	4622      	mov	r2, r4
   2d626:	4905      	ldr	r1, [pc, #20]	; (2d63c <nrf_ipc_send_task_get+0x2c>)
   2d628:	4805      	ldr	r0, [pc, #20]	; (2d640 <nrf_ipc_send_task_get+0x30>)
   2d62a:	f008 fe33 	bl	36294 <assert_print>
   2d62e:	f240 11e1 	movw	r1, #481	; 0x1e1
   2d632:	4620      	mov	r0, r4
   2d634:	f008 fe27 	bl	36286 <assert_post_action>
   2d638:	00040c5c 	.word	0x00040c5c
   2d63c:	00040c90 	.word	0x00040c90
   2d640:	0003f72c 	.word	0x0003f72c

0002d644 <nrfx_ipc_signal>:
    NRFX_ASSERT(mem_index < NRFX_ARRAY_SIZE(NRF_IPC->GPMEM));
    return nrf_ipc_gpmem_get(NRF_IPC, mem_index);
}

NRFX_STATIC_INLINE void nrfx_ipc_signal(uint8_t send_index)
{
   2d644:	b510      	push	{r4, lr}
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
   2d646:	280f      	cmp	r0, #15
   2d648:	d808      	bhi.n	2d65c <nrfx_ipc_signal+0x18>
    nrf_ipc_task_trigger(NRF_IPC, nrf_ipc_send_task_get(send_index));
   2d64a:	f7ff ffe1 	bl	2d610 <nrf_ipc_send_task_get>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d64e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2d652:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
   2d656:	2301      	movs	r3, #1
   2d658:	6003      	str	r3, [r0, #0]
}
   2d65a:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(send_index < IPC_CONF_NUM);
   2d65c:	4c05      	ldr	r4, [pc, #20]	; (2d674 <nrfx_ipc_signal+0x30>)
   2d65e:	23df      	movs	r3, #223	; 0xdf
   2d660:	4622      	mov	r2, r4
   2d662:	4905      	ldr	r1, [pc, #20]	; (2d678 <nrfx_ipc_signal+0x34>)
   2d664:	4805      	ldr	r0, [pc, #20]	; (2d67c <nrfx_ipc_signal+0x38>)
   2d666:	f008 fe15 	bl	36294 <assert_print>
   2d66a:	21df      	movs	r1, #223	; 0xdf
   2d66c:	4620      	mov	r0, r4
   2d66e:	f008 fe0a 	bl	36286 <assert_post_action>
   2d672:	bf00      	nop
   2d674:	00045358 	.word	0x00045358
   2d678:	00045398 	.word	0x00045398
   2d67c:	0003f72c 	.word	0x0003f72c

0002d680 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
   2d680:	b530      	push	{r4, r5, lr}
   2d682:	b089      	sub	sp, #36	; 0x24
   2d684:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
   2d686:	6905      	ldr	r5, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
   2d688:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2d68a:	290f      	cmp	r1, #15
   2d68c:	d806      	bhi.n	2d69c <mbox_nrf_set_enabled+0x1c>
   2d68e:	681b      	ldr	r3, [r3, #0]
   2d690:	40cb      	lsrs	r3, r1
   2d692:	f013 0f01 	tst.w	r3, #1
   2d696:	d11d      	bne.n	2d6d4 <mbox_nrf_set_enabled+0x54>
   2d698:	2300      	movs	r3, #0
   2d69a:	e000      	b.n	2d69e <mbox_nrf_set_enabled+0x1e>
   2d69c:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
   2d69e:	2b00      	cmp	r3, #0
   2d6a0:	d061      	beq.n	2d766 <mbox_nrf_set_enabled+0xe6>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
   2d6a2:	b9ca      	cbnz	r2, 2d6d8 <mbox_nrf_set_enabled+0x58>
   2d6a4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d6a8:	40e3      	lsrs	r3, r4
   2d6aa:	f013 0f01 	tst.w	r3, #1
   2d6ae:	d05d      	beq.n	2d76c <mbox_nrf_set_enabled+0xec>
	if (enable) {
		data->enabled_mask |= BIT(channel);
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
	} else {
		nrfx_ipc_receive_event_disable(channel);
   2d6b0:	b2e0      	uxtb	r0, r4
   2d6b2:	f001 fbef 	bl	2ee94 <nrfx_ipc_receive_event_disable>
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
   2d6b6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d6ba:	2201      	movs	r2, #1
   2d6bc:	40a2      	lsls	r2, r4
   2d6be:	ea23 0302 	bic.w	r3, r3, r2
   2d6c2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	}

	if (data->enabled_mask == 0) {
   2d6c6:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d6ca:	2b00      	cmp	r3, #0
   2d6cc:	d046      	beq.n	2d75c <mbox_nrf_set_enabled+0xdc>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
   2d6ce:	2000      	movs	r0, #0
}
   2d6d0:	b009      	add	sp, #36	; 0x24
   2d6d2:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2d6d4:	2301      	movs	r3, #1
   2d6d6:	e7e2      	b.n	2d69e <mbox_nrf_set_enabled+0x1e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
   2d6d8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d6dc:	40e3      	lsrs	r3, r4
   2d6de:	f013 0f01 	tst.w	r3, #1
   2d6e2:	d146      	bne.n	2d772 <mbox_nrf_set_enabled+0xf2>
	if (enable && (data->cb[channel] == NULL)) {
   2d6e4:	2a00      	cmp	r2, #0
   2d6e6:	d0e3      	beq.n	2d6b0 <mbox_nrf_set_enabled+0x30>
   2d6e8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2d6ec:	b16b      	cbz	r3, 2d70a <mbox_nrf_set_enabled+0x8a>
	if (enable && data->enabled_mask == 0) {
   2d6ee:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d6f2:	b37b      	cbz	r3, 2d754 <mbox_nrf_set_enabled+0xd4>
		data->enabled_mask |= BIT(channel);
   2d6f4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d6f8:	2201      	movs	r2, #1
   2d6fa:	40a2      	lsls	r2, r4
   2d6fc:	4313      	orrs	r3, r2
   2d6fe:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
   2d702:	b2e0      	uxtb	r0, r4
   2d704:	f001 fba6 	bl	2ee54 <nrfx_ipc_receive_event_enable>
   2d708:	e7dd      	b.n	2d6c6 <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
   2d70a:	4b1b      	ldr	r3, [pc, #108]	; (2d778 <mbox_nrf_set_enabled+0xf8>)
   2d70c:	9307      	str	r3, [sp, #28]
   2d70e:	2202      	movs	r2, #2
   2d710:	f88d 2004 	strb.w	r2, [sp, #4]
   2d714:	2300      	movs	r3, #0
   2d716:	f88d 3005 	strb.w	r3, [sp, #5]
   2d71a:	f88d 3006 	strb.w	r3, [sp, #6]
   2d71e:	f88d 3007 	strb.w	r3, [sp, #7]
   2d722:	9901      	ldr	r1, [sp, #4]
   2d724:	9106      	str	r1, [sp, #24]
   2d726:	4619      	mov	r1, r3
   2d728:	f363 0100 	bfi	r1, r3, #0, #1
   2d72c:	f363 0141 	bfi	r1, r3, #1, #1
   2d730:	f363 0182 	bfi	r1, r3, #2, #1
   2d734:	f363 01c5 	bfi	r1, r3, #3, #3
   2d738:	f362 1188 	bfi	r1, r2, #6, #3
   2d73c:	2208      	movs	r2, #8
   2d73e:	f362 2152 	bfi	r1, r2, #9, #10
   2d742:	f363 41de 	bfi	r1, r3, #19, #12
   2d746:	f363 71df 	bfi	r1, r3, #31, #1
   2d74a:	aa06      	add	r2, sp, #24
   2d74c:	480b      	ldr	r0, [pc, #44]	; (2d77c <mbox_nrf_set_enabled+0xfc>)
   2d74e:	f7e9 f8fd 	bl	1694c <z_impl_z_log_msg_static_create>
   2d752:	e7cc      	b.n	2d6ee <mbox_nrf_set_enabled+0x6e>
		irq_enable(DT_INST_IRQN(0));
   2d754:	202a      	movs	r0, #42	; 0x2a
   2d756:	f00a fca9 	bl	380ac <arch_irq_enable>
   2d75a:	e7cb      	b.n	2d6f4 <mbox_nrf_set_enabled+0x74>
		irq_disable(DT_INST_IRQN(0));
   2d75c:	202a      	movs	r0, #42	; 0x2a
   2d75e:	f00a fcaa 	bl	380b6 <arch_irq_disable>
	return 0;
   2d762:	2000      	movs	r0, #0
   2d764:	e7b4      	b.n	2d6d0 <mbox_nrf_set_enabled+0x50>
		return -EINVAL;
   2d766:	f06f 0015 	mvn.w	r0, #21
   2d76a:	e7b1      	b.n	2d6d0 <mbox_nrf_set_enabled+0x50>
		return -EALREADY;
   2d76c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2d770:	e7ae      	b.n	2d6d0 <mbox_nrf_set_enabled+0x50>
   2d772:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2d776:	e7ab      	b.n	2d6d0 <mbox_nrf_set_enabled+0x50>
   2d778:	000453a8 	.word	0x000453a8
   2d77c:	0003f468 	.word	0x0003f468

0002d780 <mbox_nrf_send>:
{
   2d780:	b530      	push	{r4, r5, lr}
   2d782:	b089      	sub	sp, #36	; 0x24
   2d784:	4605      	mov	r5, r0
   2d786:	460c      	mov	r4, r1
	if (msg) {
   2d788:	b31a      	cbz	r2, 2d7d2 <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
   2d78a:	4b1d      	ldr	r3, [pc, #116]	; (2d800 <mbox_nrf_send+0x80>)
   2d78c:	9307      	str	r3, [sp, #28]
   2d78e:	2202      	movs	r2, #2
   2d790:	f88d 2004 	strb.w	r2, [sp, #4]
   2d794:	2300      	movs	r3, #0
   2d796:	f88d 3005 	strb.w	r3, [sp, #5]
   2d79a:	f88d 3006 	strb.w	r3, [sp, #6]
   2d79e:	f88d 3007 	strb.w	r3, [sp, #7]
   2d7a2:	9901      	ldr	r1, [sp, #4]
   2d7a4:	9106      	str	r1, [sp, #24]
   2d7a6:	4619      	mov	r1, r3
   2d7a8:	f363 0100 	bfi	r1, r3, #0, #1
   2d7ac:	f363 0141 	bfi	r1, r3, #1, #1
   2d7b0:	f363 0182 	bfi	r1, r3, #2, #1
   2d7b4:	f363 01c5 	bfi	r1, r3, #3, #3
   2d7b8:	f362 1188 	bfi	r1, r2, #6, #3
   2d7bc:	2208      	movs	r2, #8
   2d7be:	f362 2152 	bfi	r1, r2, #9, #10
   2d7c2:	f363 41de 	bfi	r1, r3, #19, #12
   2d7c6:	f363 71df 	bfi	r1, r3, #31, #1
   2d7ca:	aa06      	add	r2, sp, #24
   2d7cc:	480d      	ldr	r0, [pc, #52]	; (2d804 <mbox_nrf_send+0x84>)
   2d7ce:	f7e9 f8bd 	bl	1694c <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
   2d7d2:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   2d7d4:	2c0f      	cmp	r4, #15
   2d7d6:	d806      	bhi.n	2d7e6 <mbox_nrf_send+0x66>
   2d7d8:	685b      	ldr	r3, [r3, #4]
   2d7da:	40e3      	lsrs	r3, r4
   2d7dc:	f013 0f01 	tst.w	r3, #1
   2d7e0:	d109      	bne.n	2d7f6 <mbox_nrf_send+0x76>
   2d7e2:	2300      	movs	r3, #0
   2d7e4:	e000      	b.n	2d7e8 <mbox_nrf_send+0x68>
   2d7e6:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
   2d7e8:	b13b      	cbz	r3, 2d7fa <mbox_nrf_send+0x7a>
	nrfx_ipc_signal(channel);
   2d7ea:	b2e0      	uxtb	r0, r4
   2d7ec:	f7ff ff2a 	bl	2d644 <nrfx_ipc_signal>
	return 0;
   2d7f0:	2000      	movs	r0, #0
}
   2d7f2:	b009      	add	sp, #36	; 0x24
   2d7f4:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
   2d7f6:	2301      	movs	r3, #1
   2d7f8:	e7f6      	b.n	2d7e8 <mbox_nrf_send+0x68>
		return -EINVAL;
   2d7fa:	f06f 0015 	mvn.w	r0, #21
   2d7fe:	e7f8      	b.n	2d7f2 <mbox_nrf_send+0x72>
   2d800:	000453d8 	.word	0x000453d8
   2d804:	0003f468 	.word	0x0003f468

0002d808 <mbox_dispatcher>:
{
   2d808:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d80a:	b08f      	sub	sp, #60	; 0x3c
   2d80c:	4604      	mov	r4, r0
   2d80e:	460d      	mov	r5, r1
	const struct device *dev = data->dev;
   2d810:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	const struct mbox_nrf_conf *conf = dev->config;
   2d814:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2d816:	280f      	cmp	r0, #15
   2d818:	d806      	bhi.n	2d828 <mbox_dispatcher+0x20>
   2d81a:	681b      	ldr	r3, [r3, #0]
   2d81c:	40c3      	lsrs	r3, r0
   2d81e:	f013 0f01 	tst.w	r3, #1
   2d822:	d116      	bne.n	2d852 <mbox_dispatcher+0x4a>
   2d824:	2300      	movs	r3, #0
   2d826:	e000      	b.n	2d82a <mbox_dispatcher+0x22>
   2d828:	2300      	movs	r3, #0
	if (!is_rx_channel_valid(dev, channel)) {
   2d82a:	b1a3      	cbz	r3, 2d856 <mbox_dispatcher+0x4e>
	if (!(data->enabled_mask & BIT(channel))) {
   2d82c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
   2d830:	40e3      	lsrs	r3, r4
   2d832:	f013 0f01 	tst.w	r3, #1
   2d836:	d033      	beq.n	2d8a0 <mbox_dispatcher+0x98>
	if (data->cb[channel] != NULL) {
   2d838:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
   2d83c:	b13f      	cbz	r7, 2d84e <mbox_dispatcher+0x46>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
   2d83e:	f104 0210 	add.w	r2, r4, #16
   2d842:	2300      	movs	r3, #0
   2d844:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2d848:	4621      	mov	r1, r4
   2d84a:	4630      	mov	r0, r6
   2d84c:	47b8      	blx	r7
}
   2d84e:	b00f      	add	sp, #60	; 0x3c
   2d850:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
   2d852:	2301      	movs	r3, #1
   2d854:	e7e9      	b.n	2d82a <mbox_dispatcher+0x22>
		LOG_WRN("RX event on illegal channel");
   2d856:	4b25      	ldr	r3, [pc, #148]	; (2d8ec <mbox_dispatcher+0xe4>)
   2d858:	9307      	str	r3, [sp, #28]
   2d85a:	2202      	movs	r2, #2
   2d85c:	f88d 2004 	strb.w	r2, [sp, #4]
   2d860:	2300      	movs	r3, #0
   2d862:	f88d 3005 	strb.w	r3, [sp, #5]
   2d866:	f88d 3006 	strb.w	r3, [sp, #6]
   2d86a:	f88d 3007 	strb.w	r3, [sp, #7]
   2d86e:	9901      	ldr	r1, [sp, #4]
   2d870:	9106      	str	r1, [sp, #24]
   2d872:	4619      	mov	r1, r3
   2d874:	f363 0100 	bfi	r1, r3, #0, #1
   2d878:	f363 0141 	bfi	r1, r3, #1, #1
   2d87c:	f363 0182 	bfi	r1, r3, #2, #1
   2d880:	f363 01c5 	bfi	r1, r3, #3, #3
   2d884:	f362 1188 	bfi	r1, r2, #6, #3
   2d888:	2208      	movs	r2, #8
   2d88a:	f362 2152 	bfi	r1, r2, #9, #10
   2d88e:	f363 41de 	bfi	r1, r3, #19, #12
   2d892:	f363 71df 	bfi	r1, r3, #31, #1
   2d896:	aa06      	add	r2, sp, #24
   2d898:	4815      	ldr	r0, [pc, #84]	; (2d8f0 <mbox_dispatcher+0xe8>)
   2d89a:	f7e9 f857 	bl	1694c <z_impl_z_log_msg_static_create>
   2d89e:	e7c5      	b.n	2d82c <mbox_dispatcher+0x24>
		LOG_WRN("RX event on disabled channel");
   2d8a0:	4b14      	ldr	r3, [pc, #80]	; (2d8f4 <mbox_dispatcher+0xec>)
   2d8a2:	930d      	str	r3, [sp, #52]	; 0x34
   2d8a4:	2202      	movs	r2, #2
   2d8a6:	f88d 2004 	strb.w	r2, [sp, #4]
   2d8aa:	2300      	movs	r3, #0
   2d8ac:	f88d 3005 	strb.w	r3, [sp, #5]
   2d8b0:	f88d 3006 	strb.w	r3, [sp, #6]
   2d8b4:	f88d 3007 	strb.w	r3, [sp, #7]
   2d8b8:	9901      	ldr	r1, [sp, #4]
   2d8ba:	910c      	str	r1, [sp, #48]	; 0x30
   2d8bc:	4619      	mov	r1, r3
   2d8be:	f363 0100 	bfi	r1, r3, #0, #1
   2d8c2:	f363 0141 	bfi	r1, r3, #1, #1
   2d8c6:	f363 0182 	bfi	r1, r3, #2, #1
   2d8ca:	f363 01c5 	bfi	r1, r3, #3, #3
   2d8ce:	f362 1188 	bfi	r1, r2, #6, #3
   2d8d2:	2208      	movs	r2, #8
   2d8d4:	f362 2152 	bfi	r1, r2, #9, #10
   2d8d8:	f363 41de 	bfi	r1, r3, #19, #12
   2d8dc:	f363 71df 	bfi	r1, r3, #31, #1
   2d8e0:	aa0c      	add	r2, sp, #48	; 0x30
   2d8e2:	4803      	ldr	r0, [pc, #12]	; (2d8f0 <mbox_dispatcher+0xe8>)
   2d8e4:	f7e9 f832 	bl	1694c <z_impl_z_log_msg_static_create>
   2d8e8:	e7a6      	b.n	2d838 <mbox_dispatcher+0x30>
   2d8ea:	bf00      	nop
   2d8ec:	000453f4 	.word	0x000453f4
   2d8f0:	0003f468 	.word	0x0003f468
   2d8f4:	00045410 	.word	0x00045410

0002d8f8 <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
   2d8f8:	b510      	push	{r4, lr}
   2d8fa:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
   2d8fc:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
   2d8fe:	2284      	movs	r2, #132	; 0x84
   2d900:	2100      	movs	r1, #0
   2d902:	a801      	add	r0, sp, #4
   2d904:	f00a fda8 	bl	38458 <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
   2d908:	6863      	ldr	r3, [r4, #4]
   2d90a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2d90e:	d206      	bcs.n	2d91e <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
   2d910:	6823      	ldr	r3, [r4, #0]
   2d912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2d916:	d227      	bcs.n	2d968 <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
   2d918:	2300      	movs	r3, #0
   2d91a:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   2d91c:	e04a      	b.n	2d9b4 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
   2d91e:	4b36      	ldr	r3, [pc, #216]	; (2d9f8 <enable_dt_channels+0x100>)
   2d920:	9327      	str	r3, [sp, #156]	; 0x9c
   2d922:	2202      	movs	r2, #2
   2d924:	f88d 2000 	strb.w	r2, [sp]
   2d928:	2300      	movs	r3, #0
   2d92a:	f88d 3001 	strb.w	r3, [sp, #1]
   2d92e:	f88d 3002 	strb.w	r3, [sp, #2]
   2d932:	f88d 3003 	strb.w	r3, [sp, #3]
   2d936:	9900      	ldr	r1, [sp, #0]
   2d938:	9126      	str	r1, [sp, #152]	; 0x98
   2d93a:	4619      	mov	r1, r3
   2d93c:	f363 0100 	bfi	r1, r3, #0, #1
   2d940:	f363 0141 	bfi	r1, r3, #1, #1
   2d944:	f363 0182 	bfi	r1, r3, #2, #1
   2d948:	f363 01c5 	bfi	r1, r3, #3, #3
   2d94c:	f362 1188 	bfi	r1, r2, #6, #3
   2d950:	2208      	movs	r2, #8
   2d952:	f362 2152 	bfi	r1, r2, #9, #10
   2d956:	f363 41de 	bfi	r1, r3, #19, #12
   2d95a:	f363 71df 	bfi	r1, r3, #31, #1
   2d95e:	aa26      	add	r2, sp, #152	; 0x98
   2d960:	4826      	ldr	r0, [pc, #152]	; (2d9fc <enable_dt_channels+0x104>)
   2d962:	f7e8 fff3 	bl	1694c <z_impl_z_log_msg_static_create>
   2d966:	e7d3      	b.n	2d910 <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
   2d968:	4b25      	ldr	r3, [pc, #148]	; (2da00 <enable_dt_channels+0x108>)
   2d96a:	932d      	str	r3, [sp, #180]	; 0xb4
   2d96c:	2202      	movs	r2, #2
   2d96e:	f88d 2000 	strb.w	r2, [sp]
   2d972:	2300      	movs	r3, #0
   2d974:	f88d 3001 	strb.w	r3, [sp, #1]
   2d978:	f88d 3002 	strb.w	r3, [sp, #2]
   2d97c:	f88d 3003 	strb.w	r3, [sp, #3]
   2d980:	9900      	ldr	r1, [sp, #0]
   2d982:	912c      	str	r1, [sp, #176]	; 0xb0
   2d984:	4619      	mov	r1, r3
   2d986:	f363 0100 	bfi	r1, r3, #0, #1
   2d98a:	f363 0141 	bfi	r1, r3, #1, #1
   2d98e:	f363 0182 	bfi	r1, r3, #2, #1
   2d992:	f363 01c5 	bfi	r1, r3, #3, #3
   2d996:	f362 1188 	bfi	r1, r2, #6, #3
   2d99a:	2208      	movs	r2, #8
   2d99c:	f362 2152 	bfi	r1, r2, #9, #10
   2d9a0:	f363 41de 	bfi	r1, r3, #19, #12
   2d9a4:	f363 71df 	bfi	r1, r3, #31, #1
   2d9a8:	aa2c      	add	r2, sp, #176	; 0xb0
   2d9aa:	4814      	ldr	r0, [pc, #80]	; (2d9fc <enable_dt_channels+0x104>)
   2d9ac:	f7e8 ffce 	bl	1694c <z_impl_z_log_msg_static_create>
   2d9b0:	e7b2      	b.n	2d918 <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
   2d9b2:	3301      	adds	r3, #1
   2d9b4:	2b0f      	cmp	r3, #15
   2d9b6:	d81a      	bhi.n	2d9ee <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
   2d9b8:	6862      	ldr	r2, [r4, #4]
   2d9ba:	40da      	lsrs	r2, r3
   2d9bc:	f012 0f01 	tst.w	r2, #1
   2d9c0:	d006      	beq.n	2d9d0 <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
   2d9c2:	2201      	movs	r2, #1
   2d9c4:	409a      	lsls	r2, r3
   2d9c6:	a92e      	add	r1, sp, #184	; 0xb8
   2d9c8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2d9cc:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
   2d9d0:	6822      	ldr	r2, [r4, #0]
   2d9d2:	40da      	lsrs	r2, r3
   2d9d4:	f012 0f01 	tst.w	r2, #1
   2d9d8:	d0eb      	beq.n	2d9b2 <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
   2d9da:	2101      	movs	r1, #1
   2d9dc:	4099      	lsls	r1, r3
   2d9de:	f103 0210 	add.w	r2, r3, #16
   2d9e2:	a82e      	add	r0, sp, #184	; 0xb8
   2d9e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   2d9e8:	f842 1cb4 	str.w	r1, [r2, #-180]
   2d9ec:	e7e1      	b.n	2d9b2 <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
   2d9ee:	a801      	add	r0, sp, #4
   2d9f0:	f001 f9e4 	bl	2edbc <nrfx_ipc_config_load>
}
   2d9f4:	b02e      	add	sp, #184	; 0xb8
   2d9f6:	bd10      	pop	{r4, pc}
   2d9f8:	00045430 	.word	0x00045430
   2d9fc:	0003f468 	.word	0x0003f468
   2da00:	0004545c 	.word	0x0004545c

0002da04 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
   2da04:	b510      	push	{r4, lr}
   2da06:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
   2da08:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
   2da0a:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
   2da0e:	4907      	ldr	r1, [pc, #28]	; (2da2c <mbox_nrf_init+0x28>)
   2da10:	2000      	movs	r0, #0
   2da12:	f001 f9bb 	bl	2ed8c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2da16:	2200      	movs	r2, #0
   2da18:	2101      	movs	r1, #1
   2da1a:	202a      	movs	r0, #42	; 0x2a
   2da1c:	f7eb fcd8 	bl	193d0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
   2da20:	4620      	mov	r0, r4
   2da22:	f7ff ff69 	bl	2d8f8 <enable_dt_channels>

	return 0;
}
   2da26:	2000      	movs	r0, #0
   2da28:	bd10      	pop	{r4, pc}
   2da2a:	bf00      	nop
   2da2c:	0002d809 	.word	0x0002d809

0002da30 <z_impl_gpio_pin_configure>:
{
   2da30:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_api *api =
   2da32:	6885      	ldr	r5, [r0, #8]
	__unused const struct gpio_driver_config *const cfg =
   2da34:	6846      	ldr	r6, [r0, #4]
	struct gpio_driver_data *data =
   2da36:	6904      	ldr	r4, [r0, #16]
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   2da38:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
   2da3c:	d132      	bne.n	2daa4 <z_impl_gpio_pin_configure+0x74>
   2da3e:	4613      	mov	r3, r2
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2da40:	f002 0230 	and.w	r2, r2, #48	; 0x30
   2da44:	2a30      	cmp	r2, #48	; 0x30
   2da46:	d03d      	beq.n	2dac4 <z_impl_gpio_pin_configure+0x94>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   2da48:	f003 1202 	and.w	r2, r3, #131074	; 0x20002
   2da4c:	2a02      	cmp	r2, #2
   2da4e:	d049      	beq.n	2dae4 <z_impl_gpio_pin_configure+0xb4>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   2da50:	f003 0206 	and.w	r2, r3, #6
   2da54:	2a04      	cmp	r2, #4
   2da56:	d055      	beq.n	2db04 <z_impl_gpio_pin_configure+0xd4>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2da58:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   2da5c:	d002      	beq.n	2da64 <z_impl_gpio_pin_configure+0x34>
   2da5e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   2da62:	d05c      	beq.n	2db1e <z_impl_gpio_pin_configure+0xee>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2da64:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   2da68:	d069      	beq.n	2db3e <z_impl_gpio_pin_configure+0x10e>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   2da6a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   2da6e:	d005      	beq.n	2da7c <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   2da70:	b122      	cbz	r2, 2da7c <z_impl_gpio_pin_configure+0x4c>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   2da72:	f013 0f01 	tst.w	r3, #1
   2da76:	d001      	beq.n	2da7c <z_impl_gpio_pin_configure+0x4c>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   2da78:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   2da7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2da80:	6836      	ldr	r6, [r6, #0]
   2da82:	f04f 0c01 	mov.w	ip, #1
   2da86:	fa0c fc01 	lsl.w	ip, ip, r1
   2da8a:	ea16 0f0c 	tst.w	r6, ip
   2da8e:	d066      	beq.n	2db5e <z_impl_gpio_pin_configure+0x12e>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   2da90:	f013 0f01 	tst.w	r3, #1
   2da94:	d073      	beq.n	2db7e <z_impl_gpio_pin_configure+0x14e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2da96:	6823      	ldr	r3, [r4, #0]
   2da98:	ea4c 0303 	orr.w	r3, ip, r3
   2da9c:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
   2da9e:	682b      	ldr	r3, [r5, #0]
   2daa0:	4798      	blx	r3
}
   2daa2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   2daa4:	4c38      	ldr	r4, [pc, #224]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2daa6:	f44f 732d 	mov.w	r3, #692	; 0x2b4
   2daaa:	4622      	mov	r2, r4
   2daac:	4937      	ldr	r1, [pc, #220]	; (2db8c <z_impl_gpio_pin_configure+0x15c>)
   2daae:	4838      	ldr	r0, [pc, #224]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2dab0:	f008 fbf0 	bl	36294 <assert_print>
   2dab4:	4837      	ldr	r0, [pc, #220]	; (2db94 <z_impl_gpio_pin_configure+0x164>)
   2dab6:	f008 fbed 	bl	36294 <assert_print>
   2daba:	f44f 712d 	mov.w	r1, #692	; 0x2b4
   2dabe:	4620      	mov	r0, r4
   2dac0:	f008 fbe1 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   2dac4:	4c30      	ldr	r4, [pc, #192]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2dac6:	f240 23b7 	movw	r3, #695	; 0x2b7
   2daca:	4622      	mov	r2, r4
   2dacc:	4932      	ldr	r1, [pc, #200]	; (2db98 <z_impl_gpio_pin_configure+0x168>)
   2dace:	4830      	ldr	r0, [pc, #192]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2dad0:	f008 fbe0 	bl	36294 <assert_print>
   2dad4:	4831      	ldr	r0, [pc, #196]	; (2db9c <z_impl_gpio_pin_configure+0x16c>)
   2dad6:	f008 fbdd 	bl	36294 <assert_print>
   2dada:	f240 21b7 	movw	r1, #695	; 0x2b7
   2dade:	4620      	mov	r0, r4
   2dae0:	f008 fbd1 	bl	36286 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
   2dae4:	4c28      	ldr	r4, [pc, #160]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2dae6:	f240 23bb 	movw	r3, #699	; 0x2bb
   2daea:	4622      	mov	r2, r4
   2daec:	492c      	ldr	r1, [pc, #176]	; (2dba0 <z_impl_gpio_pin_configure+0x170>)
   2daee:	4828      	ldr	r0, [pc, #160]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2daf0:	f008 fbd0 	bl	36294 <assert_print>
   2daf4:	482b      	ldr	r0, [pc, #172]	; (2dba4 <z_impl_gpio_pin_configure+0x174>)
   2daf6:	f008 fbcd 	bl	36294 <assert_print>
   2dafa:	f240 21bb 	movw	r1, #699	; 0x2bb
   2dafe:	4620      	mov	r0, r4
   2db00:	f008 fbc1 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   2db04:	4c20      	ldr	r4, [pc, #128]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2db06:	f240 23bf 	movw	r3, #703	; 0x2bf
   2db0a:	4622      	mov	r2, r4
   2db0c:	4926      	ldr	r1, [pc, #152]	; (2dba8 <z_impl_gpio_pin_configure+0x178>)
   2db0e:	4820      	ldr	r0, [pc, #128]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2db10:	f008 fbc0 	bl	36294 <assert_print>
   2db14:	f240 21bf 	movw	r1, #703	; 0x2bf
   2db18:	4620      	mov	r0, r4
   2db1a:	f008 fbb4 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   2db1e:	4c1a      	ldr	r4, [pc, #104]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2db20:	f240 23c2 	movw	r3, #706	; 0x2c2
   2db24:	4622      	mov	r2, r4
   2db26:	4921      	ldr	r1, [pc, #132]	; (2dbac <z_impl_gpio_pin_configure+0x17c>)
   2db28:	4819      	ldr	r0, [pc, #100]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2db2a:	f008 fbb3 	bl	36294 <assert_print>
   2db2e:	4820      	ldr	r0, [pc, #128]	; (2dbb0 <z_impl_gpio_pin_configure+0x180>)
   2db30:	f008 fbb0 	bl	36294 <assert_print>
   2db34:	f240 21c2 	movw	r1, #706	; 0x2c2
   2db38:	4620      	mov	r0, r4
   2db3a:	f008 fba4 	bl	36286 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   2db3e:	4c12      	ldr	r4, [pc, #72]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2db40:	f240 23c6 	movw	r3, #710	; 0x2c6
   2db44:	4622      	mov	r2, r4
   2db46:	491b      	ldr	r1, [pc, #108]	; (2dbb4 <z_impl_gpio_pin_configure+0x184>)
   2db48:	4811      	ldr	r0, [pc, #68]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2db4a:	f008 fba3 	bl	36294 <assert_print>
   2db4e:	481a      	ldr	r0, [pc, #104]	; (2dbb8 <z_impl_gpio_pin_configure+0x188>)
   2db50:	f008 fba0 	bl	36294 <assert_print>
   2db54:	f240 21c6 	movw	r1, #710	; 0x2c6
   2db58:	4620      	mov	r0, r4
   2db5a:	f008 fb94 	bl	36286 <assert_post_action>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2db5e:	4c0a      	ldr	r4, [pc, #40]	; (2db88 <z_impl_gpio_pin_configure+0x158>)
   2db60:	f240 23d2 	movw	r3, #722	; 0x2d2
   2db64:	4622      	mov	r2, r4
   2db66:	4915      	ldr	r1, [pc, #84]	; (2dbbc <z_impl_gpio_pin_configure+0x18c>)
   2db68:	4809      	ldr	r0, [pc, #36]	; (2db90 <z_impl_gpio_pin_configure+0x160>)
   2db6a:	f008 fb93 	bl	36294 <assert_print>
   2db6e:	4814      	ldr	r0, [pc, #80]	; (2dbc0 <z_impl_gpio_pin_configure+0x190>)
   2db70:	f008 fb90 	bl	36294 <assert_print>
   2db74:	f240 21d2 	movw	r1, #722	; 0x2d2
   2db78:	4620      	mov	r0, r4
   2db7a:	f008 fb84 	bl	36286 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   2db7e:	6823      	ldr	r3, [r4, #0]
   2db80:	ea23 030c 	bic.w	r3, r3, ip
   2db84:	6023      	str	r3, [r4, #0]
   2db86:	e78a      	b.n	2da9e <z_impl_gpio_pin_configure+0x6e>
   2db88:	0003f6b8 	.word	0x0003f6b8
   2db8c:	0003f760 	.word	0x0003f760
   2db90:	0003f72c 	.word	0x0003f72c
   2db94:	0003f7c0 	.word	0x0003f7c0
   2db98:	0003f7e4 	.word	0x0003f7e4
   2db9c:	0003f820 	.word	0x0003f820
   2dba0:	0003f860 	.word	0x0003f860
   2dba4:	0003f898 	.word	0x0003f898
   2dba8:	0003f8ec 	.word	0x0003f8ec
   2dbac:	0003f920 	.word	0x0003f920
   2dbb0:	0003f968 	.word	0x0003f968
   2dbb4:	0003f9a4 	.word	0x0003f9a4
   2dbb8:	0003f9e8 	.word	0x0003f9e8
   2dbbc:	0003f6ec 	.word	0x0003f6ec
   2dbc0:	0003f74c 	.word	0x0003f74c

0002dbc4 <gpio_pin_set_raw>:
{
   2dbc4:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
   2dbc6:	6843      	ldr	r3, [r0, #4]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2dbc8:	681c      	ldr	r4, [r3, #0]
   2dbca:	2301      	movs	r3, #1
   2dbcc:	fa03 f101 	lsl.w	r1, r3, r1
   2dbd0:	420c      	tst	r4, r1
   2dbd2:	d004      	beq.n	2dbde <gpio_pin_set_raw+0x1a>
	if (value != 0)	{
   2dbd4:	b19a      	cbz	r2, 2dbfe <gpio_pin_set_raw+0x3a>
	const struct gpio_driver_api *api =
   2dbd6:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
   2dbd8:	68db      	ldr	r3, [r3, #12]
   2dbda:	4798      	blx	r3
}
   2dbdc:	bd10      	pop	{r4, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2dbde:	4c0a      	ldr	r4, [pc, #40]	; (2dc08 <gpio_pin_set_raw+0x44>)
   2dbe0:	f240 5314 	movw	r3, #1300	; 0x514
   2dbe4:	4622      	mov	r2, r4
   2dbe6:	4909      	ldr	r1, [pc, #36]	; (2dc0c <gpio_pin_set_raw+0x48>)
   2dbe8:	4809      	ldr	r0, [pc, #36]	; (2dc10 <gpio_pin_set_raw+0x4c>)
   2dbea:	f008 fb53 	bl	36294 <assert_print>
   2dbee:	4809      	ldr	r0, [pc, #36]	; (2dc14 <gpio_pin_set_raw+0x50>)
   2dbf0:	f008 fb50 	bl	36294 <assert_print>
   2dbf4:	f240 5114 	movw	r1, #1300	; 0x514
   2dbf8:	4620      	mov	r0, r4
   2dbfa:	f008 fb44 	bl	36286 <assert_post_action>
	const struct gpio_driver_api *api =
   2dbfe:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
   2dc00:	691b      	ldr	r3, [r3, #16]
   2dc02:	4798      	blx	r3
	return ret;
   2dc04:	e7ea      	b.n	2dbdc <gpio_pin_set_raw+0x18>
   2dc06:	bf00      	nop
   2dc08:	0003f6b8 	.word	0x0003f6b8
   2dc0c:	0003f6ec 	.word	0x0003f6ec
   2dc10:	0003f72c 	.word	0x0003f72c
   2dc14:	0003f74c 	.word	0x0003f74c

0002dc18 <gpio_pin_set>:
{
   2dc18:	b538      	push	{r3, r4, r5, lr}
	__unused const struct gpio_driver_config *const cfg =
   2dc1a:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   2dc1c:	6905      	ldr	r5, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2dc1e:	681c      	ldr	r4, [r3, #0]
   2dc20:	2301      	movs	r3, #1
   2dc22:	408b      	lsls	r3, r1
   2dc24:	421c      	tst	r4, r3
   2dc26:	d008      	beq.n	2dc3a <gpio_pin_set+0x22>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2dc28:	682c      	ldr	r4, [r5, #0]
   2dc2a:	4223      	tst	r3, r4
   2dc2c:	d002      	beq.n	2dc34 <gpio_pin_set+0x1c>
		value = (value != 0) ? 0 : 1;
   2dc2e:	fab2 f282 	clz	r2, r2
   2dc32:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
   2dc34:	f7ff ffc6 	bl	2dbc4 <gpio_pin_set_raw>
}
   2dc38:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2dc3a:	4c08      	ldr	r4, [pc, #32]	; (2dc5c <gpio_pin_set+0x44>)
   2dc3c:	f240 533d 	movw	r3, #1341	; 0x53d
   2dc40:	4622      	mov	r2, r4
   2dc42:	4907      	ldr	r1, [pc, #28]	; (2dc60 <gpio_pin_set+0x48>)
   2dc44:	4807      	ldr	r0, [pc, #28]	; (2dc64 <gpio_pin_set+0x4c>)
   2dc46:	f008 fb25 	bl	36294 <assert_print>
   2dc4a:	4807      	ldr	r0, [pc, #28]	; (2dc68 <gpio_pin_set+0x50>)
   2dc4c:	f008 fb22 	bl	36294 <assert_print>
   2dc50:	f240 513d 	movw	r1, #1341	; 0x53d
   2dc54:	4620      	mov	r0, r4
   2dc56:	f008 fb16 	bl	36286 <assert_post_action>
   2dc5a:	bf00      	nop
   2dc5c:	0003f6b8 	.word	0x0003f6b8
   2dc60:	0003f6ec 	.word	0x0003f6ec
   2dc64:	0003f72c 	.word	0x0003f72c
   2dc68:	0003f74c 	.word	0x0003f74c

0002dc6c <dk_set_leds_state>:
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
{
   2dc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dc6e:	b089      	sub	sp, #36	; 0x24
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2dc70:	280f      	cmp	r0, #15
   2dc72:	d84a      	bhi.n	2dd0a <dk_set_leds_state+0x9e>
   2dc74:	4605      	mov	r5, r0
   2dc76:	460e      	mov	r6, r1
   2dc78:	290f      	cmp	r1, #15
   2dc7a:	d849      	bhi.n	2dd10 <dk_set_leds_state+0xa4>
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2dc7c:	2400      	movs	r4, #0
   2dc7e:	e00c      	b.n	2dc9a <dk_set_leds_state+0x2e>
		int val, err;

		if (BIT(i) & leds_on_mask) {
			val = 1;
   2dc80:	2201      	movs	r2, #1
	return gpio_pin_set(spec->port, spec->pin, value);
   2dc82:	4b25      	ldr	r3, [pc, #148]	; (2dd18 <dk_set_leds_state+0xac>)
   2dc84:	eb03 0cc4 	add.w	ip, r3, r4, lsl #3
   2dc88:	f89c 1004 	ldrb.w	r1, [ip, #4]
   2dc8c:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   2dc90:	f7ff ffc2 	bl	2dc18 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   2dc94:	4607      	mov	r7, r0
   2dc96:	b970      	cbnz	r0, 2dcb6 <dk_set_leds_state+0x4a>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2dc98:	3401      	adds	r4, #1
   2dc9a:	2c0a      	cmp	r4, #10
   2dc9c:	d831      	bhi.n	2dd02 <dk_set_leds_state+0x96>
		if (BIT(i) & leds_on_mask) {
   2dc9e:	fa25 f304 	lsr.w	r3, r5, r4
   2dca2:	f013 0f01 	tst.w	r3, #1
   2dca6:	d1eb      	bne.n	2dc80 <dk_set_leds_state+0x14>
		} else if (BIT(i) & leds_off_mask) {
   2dca8:	fa26 f304 	lsr.w	r3, r6, r4
   2dcac:	f013 0f01 	tst.w	r3, #1
   2dcb0:	d0f2      	beq.n	2dc98 <dk_set_leds_state+0x2c>
			val = 0;
   2dcb2:	2200      	movs	r2, #0
   2dcb4:	e7e5      	b.n	2dc82 <dk_set_leds_state+0x16>
			LOG_ERR("Cannot write LED gpio");
   2dcb6:	4b19      	ldr	r3, [pc, #100]	; (2dd1c <dk_set_leds_state+0xb0>)
   2dcb8:	9307      	str	r3, [sp, #28]
   2dcba:	2302      	movs	r3, #2
   2dcbc:	f88d 3004 	strb.w	r3, [sp, #4]
   2dcc0:	2300      	movs	r3, #0
   2dcc2:	f88d 3005 	strb.w	r3, [sp, #5]
   2dcc6:	f88d 3006 	strb.w	r3, [sp, #6]
   2dcca:	f88d 3007 	strb.w	r3, [sp, #7]
   2dcce:	9a01      	ldr	r2, [sp, #4]
   2dcd0:	9206      	str	r2, [sp, #24]
   2dcd2:	4619      	mov	r1, r3
   2dcd4:	f363 0100 	bfi	r1, r3, #0, #1
   2dcd8:	f363 0141 	bfi	r1, r3, #1, #1
   2dcdc:	f363 0182 	bfi	r1, r3, #2, #1
   2dce0:	f363 01c5 	bfi	r1, r3, #3, #3
   2dce4:	2201      	movs	r2, #1
   2dce6:	f362 1188 	bfi	r1, r2, #6, #3
   2dcea:	2208      	movs	r2, #8
   2dcec:	f362 2152 	bfi	r1, r2, #9, #10
   2dcf0:	f363 41de 	bfi	r1, r3, #19, #12
   2dcf4:	f363 71df 	bfi	r1, r3, #31, #1
   2dcf8:	aa06      	add	r2, sp, #24
   2dcfa:	4809      	ldr	r0, [pc, #36]	; (2dd20 <dk_set_leds_state+0xb4>)
   2dcfc:	f7e8 fe26 	bl	1694c <z_impl_z_log_msg_static_create>
			return err;
   2dd00:	e000      	b.n	2dd04 <dk_set_leds_state+0x98>
		}
	}

	return 0;
   2dd02:	2700      	movs	r7, #0
}
   2dd04:	4638      	mov	r0, r7
   2dd06:	b009      	add	sp, #36	; 0x24
   2dd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   2dd0a:	f06f 0715 	mvn.w	r7, #21
   2dd0e:	e7f9      	b.n	2dd04 <dk_set_leds_state+0x98>
   2dd10:	f06f 0715 	mvn.w	r7, #21
   2dd14:	e7f6      	b.n	2dd04 <dk_set_leds_state+0x98>
   2dd16:	bf00      	nop
   2dd18:	00045508 	.word	0x00045508
   2dd1c:	000454b8 	.word	0x000454b8
   2dd20:	0003f430 	.word	0x0003f430

0002dd24 <dk_leds_init>:
{
   2dd24:	b530      	push	{r4, r5, lr}
   2dd26:	b089      	sub	sp, #36	; 0x24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2dd28:	2400      	movs	r4, #0
   2dd2a:	2c0a      	cmp	r4, #10
   2dd2c:	d830      	bhi.n	2dd90 <dk_leds_init+0x6c>
		err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT);
   2dd2e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   2dd32:	481b      	ldr	r0, [pc, #108]	; (2dda0 <dk_leds_init+0x7c>)
   2dd34:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   2dd38:	f00f fafc 	bl	3d334 <gpio_pin_configure_dt>
		if (err) {
   2dd3c:	4605      	mov	r5, r0
   2dd3e:	b908      	cbnz	r0, 2dd44 <dk_leds_init+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   2dd40:	3401      	adds	r4, #1
   2dd42:	e7f2      	b.n	2dd2a <dk_leds_init+0x6>
			LOG_ERR("Cannot configure LED gpio");
   2dd44:	4b17      	ldr	r3, [pc, #92]	; (2dda4 <dk_leds_init+0x80>)
   2dd46:	9307      	str	r3, [sp, #28]
   2dd48:	2302      	movs	r3, #2
   2dd4a:	f88d 3004 	strb.w	r3, [sp, #4]
   2dd4e:	2300      	movs	r3, #0
   2dd50:	f88d 3005 	strb.w	r3, [sp, #5]
   2dd54:	f88d 3006 	strb.w	r3, [sp, #6]
   2dd58:	f88d 3007 	strb.w	r3, [sp, #7]
   2dd5c:	9a01      	ldr	r2, [sp, #4]
   2dd5e:	9206      	str	r2, [sp, #24]
   2dd60:	4619      	mov	r1, r3
   2dd62:	f363 0100 	bfi	r1, r3, #0, #1
   2dd66:	f363 0141 	bfi	r1, r3, #1, #1
   2dd6a:	f363 0182 	bfi	r1, r3, #2, #1
   2dd6e:	f363 01c5 	bfi	r1, r3, #3, #3
   2dd72:	2201      	movs	r2, #1
   2dd74:	f362 1188 	bfi	r1, r2, #6, #3
   2dd78:	2208      	movs	r2, #8
   2dd7a:	f362 2152 	bfi	r1, r2, #9, #10
   2dd7e:	f363 41de 	bfi	r1, r3, #19, #12
   2dd82:	f363 71df 	bfi	r1, r3, #31, #1
   2dd86:	aa06      	add	r2, sp, #24
   2dd88:	4807      	ldr	r0, [pc, #28]	; (2dda8 <dk_leds_init+0x84>)
   2dd8a:	f7e8 fddf 	bl	1694c <z_impl_z_log_msg_static_create>
			return err;
   2dd8e:	e004      	b.n	2dd9a <dk_leds_init+0x76>
	return dk_set_leds_state(DK_NO_LEDS_MSK, DK_ALL_LEDS_MSK);
   2dd90:	210f      	movs	r1, #15
   2dd92:	2000      	movs	r0, #0
   2dd94:	f7ff ff6a 	bl	2dc6c <dk_set_leds_state>
   2dd98:	4605      	mov	r5, r0
}
   2dd9a:	4628      	mov	r0, r5
   2dd9c:	b009      	add	sp, #36	; 0x24
   2dd9e:	bd30      	pop	{r4, r5, pc}
   2dda0:	00045508 	.word	0x00045508
   2dda4:	000454d0 	.word	0x000454d0
   2dda8:	0003f430 	.word	0x0003f430

0002ddac <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   2ddac:	b510      	push	{r4, lr}
   2ddae:	b08e      	sub	sp, #56	; 0x38
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   2ddb0:	280a      	cmp	r0, #10
   2ddb2:	d80d      	bhi.n	2ddd0 <dk_set_led+0x24>
   2ddb4:	460a      	mov	r2, r1
   2ddb6:	4b2d      	ldr	r3, [pc, #180]	; (2de6c <dk_set_led+0xc0>)
   2ddb8:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   2ddbc:	7909      	ldrb	r1, [r1, #4]
   2ddbe:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   2ddc2:	f7ff ff29 	bl	2dc18 <gpio_pin_set>
		LOG_ERR("LED index out of the range");
		return -EINVAL;
	}
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
   2ddc6:	4604      	mov	r4, r0
   2ddc8:	bb50      	cbnz	r0, 2de20 <dk_set_led+0x74>
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   2ddca:	4620      	mov	r0, r4
   2ddcc:	b00e      	add	sp, #56	; 0x38
   2ddce:	bd10      	pop	{r4, pc}
		LOG_ERR("LED index out of the range");
   2ddd0:	4b27      	ldr	r3, [pc, #156]	; (2de70 <dk_set_led+0xc4>)
   2ddd2:	930d      	str	r3, [sp, #52]	; 0x34
   2ddd4:	2302      	movs	r3, #2
   2ddd6:	f88d 3004 	strb.w	r3, [sp, #4]
   2ddda:	2300      	movs	r3, #0
   2dddc:	f88d 3005 	strb.w	r3, [sp, #5]
   2dde0:	f88d 3006 	strb.w	r3, [sp, #6]
   2dde4:	f88d 3007 	strb.w	r3, [sp, #7]
   2dde8:	9a01      	ldr	r2, [sp, #4]
   2ddea:	920c      	str	r2, [sp, #48]	; 0x30
   2ddec:	4619      	mov	r1, r3
   2ddee:	f363 0100 	bfi	r1, r3, #0, #1
   2ddf2:	f363 0141 	bfi	r1, r3, #1, #1
   2ddf6:	f363 0182 	bfi	r1, r3, #2, #1
   2ddfa:	f363 01c5 	bfi	r1, r3, #3, #3
   2ddfe:	2201      	movs	r2, #1
   2de00:	f362 1188 	bfi	r1, r2, #6, #3
   2de04:	2208      	movs	r2, #8
   2de06:	f362 2152 	bfi	r1, r2, #9, #10
   2de0a:	f363 41de 	bfi	r1, r3, #19, #12
   2de0e:	f363 71df 	bfi	r1, r3, #31, #1
   2de12:	aa0c      	add	r2, sp, #48	; 0x30
   2de14:	4817      	ldr	r0, [pc, #92]	; (2de74 <dk_set_led+0xc8>)
   2de16:	f7e8 fd99 	bl	1694c <z_impl_z_log_msg_static_create>
		return -EINVAL;
   2de1a:	f06f 0415 	mvn.w	r4, #21
   2de1e:	e7d4      	b.n	2ddca <dk_set_led+0x1e>
		LOG_ERR("Cannot write LED gpio");
   2de20:	4b15      	ldr	r3, [pc, #84]	; (2de78 <dk_set_led+0xcc>)
   2de22:	9307      	str	r3, [sp, #28]
   2de24:	2302      	movs	r3, #2
   2de26:	f88d 3004 	strb.w	r3, [sp, #4]
   2de2a:	2300      	movs	r3, #0
   2de2c:	f88d 3005 	strb.w	r3, [sp, #5]
   2de30:	f88d 3006 	strb.w	r3, [sp, #6]
   2de34:	f88d 3007 	strb.w	r3, [sp, #7]
   2de38:	9a01      	ldr	r2, [sp, #4]
   2de3a:	9206      	str	r2, [sp, #24]
   2de3c:	4619      	mov	r1, r3
   2de3e:	f363 0100 	bfi	r1, r3, #0, #1
   2de42:	f363 0141 	bfi	r1, r3, #1, #1
   2de46:	f363 0182 	bfi	r1, r3, #2, #1
   2de4a:	f363 01c5 	bfi	r1, r3, #3, #3
   2de4e:	2201      	movs	r2, #1
   2de50:	f362 1188 	bfi	r1, r2, #6, #3
   2de54:	2208      	movs	r2, #8
   2de56:	f362 2152 	bfi	r1, r2, #9, #10
   2de5a:	f363 41de 	bfi	r1, r3, #19, #12
   2de5e:	f363 71df 	bfi	r1, r3, #31, #1
   2de62:	aa06      	add	r2, sp, #24
   2de64:	4803      	ldr	r0, [pc, #12]	; (2de74 <dk_set_led+0xc8>)
   2de66:	f7e8 fd71 	bl	1694c <z_impl_z_log_msg_static_create>
   2de6a:	e7ae      	b.n	2ddca <dk_set_led+0x1e>
   2de6c:	00045508 	.word	0x00045508
   2de70:	000454ec 	.word	0x000454ec
   2de74:	0003f430 	.word	0x0003f430
   2de78:	000454b8 	.word	0x000454b8

0002de7c <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   2de7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2de80:	b0a2      	sub	sp, #136	; 0x88
   2de82:	4604      	mov	r4, r0
   2de84:	4688      	mov	r8, r1
   2de86:	4615      	mov	r5, r2
   2de88:	461e      	mov	r6, r3
	return !z_sys_post_kernel;
   2de8a:	4b11      	ldr	r3, [pc, #68]	; (2ded0 <tfm_ns_interface_dispatch+0x54>)
   2de8c:	781f      	ldrb	r7, [r3, #0]
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   2de8e:	b13f      	cbz	r7, 2dea0 <tfm_ns_interface_dispatch+0x24>
	return z_impl_k_mutex_lock(mutex, timeout);
   2de90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2de94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2de98:	480e      	ldr	r0, [pc, #56]	; (2ded4 <tfm_ns_interface_dispatch+0x58>)
   2de9a:	f003 fcdf 	bl	3185c <z_impl_k_mutex_lock>
		/* TF-M request protected by NS lock */
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   2de9e:	b980      	cbnz	r0, 2dec2 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   2dea0:	4668      	mov	r0, sp
   2dea2:	f00a f945 	bl	38130 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   2dea6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2dea8:	4632      	mov	r2, r6
   2deaa:	4629      	mov	r1, r5
   2deac:	4640      	mov	r0, r8
   2deae:	47a0      	blx	r4
   2deb0:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   2deb2:	4668      	mov	r0, sp
   2deb4:	f00a f93d 	bl	38132 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   2deb8:	b92f      	cbnz	r7, 2dec6 <tfm_ns_interface_dispatch+0x4a>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   2deba:	4620      	mov	r0, r4
   2debc:	b022      	add	sp, #136	; 0x88
   2debe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return (int32_t)TFM_ERROR_GENERIC;
   2dec2:	241f      	movs	r4, #31
   2dec4:	e7f9      	b.n	2deba <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   2dec6:	4803      	ldr	r0, [pc, #12]	; (2ded4 <tfm_ns_interface_dispatch+0x58>)
   2dec8:	f003 fdde 	bl	31a88 <z_impl_k_mutex_unlock>
   2decc:	e7f5      	b.n	2deba <tfm_ns_interface_dispatch+0x3e>
   2dece:	bf00      	nop
   2ded0:	2000cabb 	.word	0x2000cabb
   2ded4:	20008950 	.word	0x20008950

0002ded8 <ns_interface_init>:
#if defined(TFM_PSA_API)
#include "psa_manifest/sid.h"
#endif /* TFM_PSA_API */

static int ns_interface_init(const struct device *arg)
{
   2ded8:	b510      	push	{r4, lr}
	ARG_UNUSED(arg);

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
   2deda:	f00f fa40 	bl	3d35e <tfm_ns_interface_init>
   2dede:	b908      	cbnz	r0, 2dee4 <ns_interface_init+0xc>
		"TF-M NS interface init failed");

	return 0;
}
   2dee0:	2000      	movs	r0, #0
   2dee2:	bd10      	pop	{r4, pc}
	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
   2dee4:	4c06      	ldr	r4, [pc, #24]	; (2df00 <ns_interface_init+0x28>)
   2dee6:	2359      	movs	r3, #89	; 0x59
   2dee8:	4622      	mov	r2, r4
   2deea:	4906      	ldr	r1, [pc, #24]	; (2df04 <ns_interface_init+0x2c>)
   2deec:	4806      	ldr	r0, [pc, #24]	; (2df08 <ns_interface_init+0x30>)
   2deee:	f008 f9d1 	bl	36294 <assert_print>
   2def2:	4806      	ldr	r0, [pc, #24]	; (2df0c <ns_interface_init+0x34>)
   2def4:	f008 f9ce 	bl	36294 <assert_print>
   2def8:	2159      	movs	r1, #89	; 0x59
   2defa:	4620      	mov	r0, r4
   2defc:	f008 f9c3 	bl	36286 <assert_post_action>
   2df00:	00045574 	.word	0x00045574
   2df04:	000455b8 	.word	0x000455b8
   2df08:	0003f72c 	.word	0x0003f72c
   2df0c:	000455e0 	.word	0x000455e0

0002df10 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   2df10:	b5f0      	push	{r4, r5, r6, r7, lr}
   2df12:	b095      	sub	sp, #84	; 0x54
   2df14:	4605      	mov	r5, r0
   2df16:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   2df18:	af07      	add	r7, sp, #28
   2df1a:	2634      	movs	r6, #52	; 0x34
   2df1c:	4632      	mov	r2, r6
   2df1e:	2100      	movs	r1, #0
   2df20:	4638      	mov	r0, r7
   2df22:	f00a fa99 	bl	38458 <memset>
   2df26:	233f      	movs	r3, #63	; 0x3f
   2df28:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   2df2a:	9705      	str	r7, [sp, #20]
   2df2c:	9606      	str	r6, [sp, #24]
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   2df2e:	9503      	str	r5, [sp, #12]
   2df30:	9404      	str	r4, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   2df32:	b914      	cbnz	r4, 2df3a <psa_generate_random+0x2a>
        return PSA_SUCCESS;
   2df34:	2000      	movs	r0, #0

    status = API_DISPATCH(tfm_crypto_generate_random,
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   2df36:	b015      	add	sp, #84	; 0x54
   2df38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = API_DISPATCH(tfm_crypto_generate_random,
   2df3a:	2301      	movs	r3, #1
   2df3c:	9301      	str	r3, [sp, #4]
   2df3e:	aa03      	add	r2, sp, #12
   2df40:	9200      	str	r2, [sp, #0]
   2df42:	aa05      	add	r2, sp, #20
   2df44:	2100      	movs	r1, #0
   2df46:	4802      	ldr	r0, [pc, #8]	; (2df50 <psa_generate_random+0x40>)
   2df48:	f000 f804 	bl	2df54 <psa_call>
    return status;
   2df4c:	e7f3      	b.n	2df36 <psa_generate_random+0x26>
   2df4e:	bf00      	nop
   2df50:	40000100 	.word	0x40000100

0002df54 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   2df54:	b510      	push	{r4, lr}
   2df56:	b082      	sub	sp, #8
   2df58:	9c05      	ldr	r4, [sp, #20]
    if ((type > INT16_MAX) ||
   2df5a:	f501 4c00 	add.w	ip, r1, #32768	; 0x8000
   2df5e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   2df62:	d214      	bcs.n	2df8e <psa_call+0x3a>
        (type < INT16_MIN) ||
   2df64:	2bff      	cmp	r3, #255	; 0xff
   2df66:	d815      	bhi.n	2df94 <psa_call+0x40>
        (in_len > UINT8_MAX) ||
   2df68:	2cff      	cmp	r4, #255	; 0xff
   2df6a:	d816      	bhi.n	2df9a <psa_call+0x46>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   2df6c:	021b      	lsls	r3, r3, #8
   2df6e:	fa1f fc83 	uxth.w	ip, r3
   2df72:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   2df76:	b2e4      	uxtb	r4, r4
    return tfm_ns_interface_dispatch(
   2df78:	9b04      	ldr	r3, [sp, #16]
   2df7a:	9300      	str	r3, [sp, #0]
   2df7c:	4613      	mov	r3, r2
   2df7e:	ea41 0204 	orr.w	r2, r1, r4
   2df82:	4601      	mov	r1, r0
   2df84:	4806      	ldr	r0, [pc, #24]	; (2dfa0 <psa_call+0x4c>)
   2df86:	f7ff ff79 	bl	2de7c <tfm_ns_interface_dispatch>
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   2df8a:	b002      	add	sp, #8
   2df8c:	bd10      	pop	{r4, pc}
        return PSA_ERROR_PROGRAMMER_ERROR;
   2df8e:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2df92:	e7fa      	b.n	2df8a <psa_call+0x36>
   2df94:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2df98:	e7f7      	b.n	2df8a <psa_call+0x36>
   2df9a:	f06f 0080 	mvn.w	r0, #128	; 0x80
   2df9e:	e7f4      	b.n	2df8a <psa_call+0x36>
   2dfa0:	0000bc21 	.word	0x0000bc21

0002dfa4 <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
   2dfa4:	b500      	push	{lr}
   2dfa6:	b083      	sub	sp, #12
   2dfa8:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   2dfaa:	2300      	movs	r3, #0
   2dfac:	9300      	str	r3, [sp, #0]
   2dfae:	4601      	mov	r1, r0
   2dfb0:	4802      	ldr	r0, [pc, #8]	; (2dfbc <psa_connect+0x18>)
   2dfb2:	f7ff ff63 	bl	2de7c <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   2dfb6:	b003      	add	sp, #12
   2dfb8:	f85d fb04 	ldr.w	pc, [sp], #4
   2dfbc:	0000bc19 	.word	0x0000bc19

0002dfc0 <psa_close>:

void psa_close(psa_handle_t handle)
{
   2dfc0:	b500      	push	{lr}
   2dfc2:	b083      	sub	sp, #12
   2dfc4:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   2dfc6:	2200      	movs	r2, #0
   2dfc8:	9200      	str	r2, [sp, #0]
   2dfca:	4613      	mov	r3, r2
   2dfcc:	4802      	ldr	r0, [pc, #8]	; (2dfd8 <psa_close+0x18>)
   2dfce:	f7ff ff55 	bl	2de7c <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   2dfd2:	b003      	add	sp, #12
   2dfd4:	f85d fb04 	ldr.w	pc, [sp], #4
   2dfd8:	0000bc11 	.word	0x0000bc11

0002dfdc <SystemCoreClockUpdate>:
#endif

void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
   2dfdc:	4b04      	ldr	r3, [pc, #16]	; (2dff0 <SystemCoreClockUpdate+0x14>)
   2dfde:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
   2dfe2:	f002 0203 	and.w	r2, r2, #3
   2dfe6:	4b03      	ldr	r3, [pc, #12]	; (2dff4 <SystemCoreClockUpdate+0x18>)
   2dfe8:	40d3      	lsrs	r3, r2
   2dfea:	4a03      	ldr	r2, [pc, #12]	; (2dff8 <SystemCoreClockUpdate+0x1c>)
   2dfec:	6013      	str	r3, [r2, #0]
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}
   2dfee:	4770      	bx	lr
   2dff0:	40005000 	.word	0x40005000
   2dff4:	07a12000 	.word	0x07a12000
   2dff8:	20008774 	.word	0x20008774

0002dffc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   2dffc:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   2dffe:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2e000:	fab4 f384 	clz	r3, r4
   2e004:	f1c3 031f 	rsb	r3, r3, #31
   2e008:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
   2e00c:	2b00      	cmp	r3, #0
   2e00e:	db12      	blt.n	2e036 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   2e010:	2201      	movs	r2, #1
   2e012:	fa02 f303 	lsl.w	r3, r2, r3
   2e016:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e01a:	e8d0 2fef 	ldaex	r2, [r0]
   2e01e:	42a2      	cmp	r2, r4
   2e020:	d104      	bne.n	2e02c <nrfx_flag32_alloc+0x30>
   2e022:	e8c0 3fee 	stlex	lr, r3, [r0]
   2e026:	f1be 0f00 	cmp.w	lr, #0
   2e02a:	d1f6      	bne.n	2e01a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2e02c:	d1e7      	bne.n	2dffe <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   2e02e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
   2e032:	4802      	ldr	r0, [pc, #8]	; (2e03c <nrfx_flag32_alloc+0x40>)
}
   2e034:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
   2e036:	4802      	ldr	r0, [pc, #8]	; (2e040 <nrfx_flag32_alloc+0x44>)
   2e038:	e7fc      	b.n	2e034 <nrfx_flag32_alloc+0x38>
   2e03a:	bf00      	nop
   2e03c:	0bad0000 	.word	0x0bad0000
   2e040:	0bad0002 	.word	0x0bad0002

0002e044 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   2e044:	6803      	ldr	r3, [r0, #0]
   2e046:	40cb      	lsrs	r3, r1
   2e048:	f013 0f01 	tst.w	r3, #1
   2e04c:	d111      	bne.n	2e072 <nrfx_flag32_free+0x2e>
{
   2e04e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   2e050:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   2e052:	2301      	movs	r3, #1
   2e054:	408b      	lsls	r3, r1
   2e056:	4313      	orrs	r3, r2
   2e058:	e8d0 cfef 	ldaex	ip, [r0]
   2e05c:	4594      	cmp	ip, r2
   2e05e:	d104      	bne.n	2e06a <nrfx_flag32_free+0x26>
   2e060:	e8c0 3fee 	stlex	lr, r3, [r0]
   2e064:	f1be 0f00 	cmp.w	lr, #0
   2e068:	d1f6      	bne.n	2e058 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2e06a:	d1f1      	bne.n	2e050 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
   2e06c:	4802      	ldr	r0, [pc, #8]	; (2e078 <nrfx_flag32_free+0x34>)
}
   2e06e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
   2e072:	4802      	ldr	r0, [pc, #8]	; (2e07c <nrfx_flag32_free+0x38>)
}
   2e074:	4770      	bx	lr
   2e076:	bf00      	nop
   2e078:	0bad0000 	.word	0x0bad0000
   2e07c:	0bad0004 	.word	0x0bad0004

0002e080 <nrf_clock_is_running>:
    switch (domain)
   2e080:	2903      	cmp	r1, #3
   2e082:	d82f      	bhi.n	2e0e4 <nrf_clock_is_running+0x64>
   2e084:	e8df f001 	tbb	[pc, r1]
   2e088:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
   2e08c:	b122      	cbz	r2, 2e098 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2e08e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2e092:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2e096:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2e098:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
   2e09c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2e0a0:	d12e      	bne.n	2e100 <nrf_clock_is_running+0x80>
    return false;
   2e0a2:	2000      	movs	r0, #0
   2e0a4:	4770      	bx	lr
            if (p_clk_src != NULL)
   2e0a6:	b122      	cbz	r2, 2e0b2 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2e0a8:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2e0ac:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2e0b0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2e0b2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
   2e0b6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2e0ba:	d123      	bne.n	2e104 <nrf_clock_is_running+0x84>
    return false;
   2e0bc:	2000      	movs	r0, #0
   2e0be:	4770      	bx	lr
            if (p_clk_src != NULL)
   2e0c0:	b122      	cbz	r2, 2e0cc <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
   2e0c2:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   2e0c6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2e0ca:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
   2e0cc:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
   2e0d0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2e0d4:	d118      	bne.n	2e108 <nrf_clock_is_running+0x88>
    return false;
   2e0d6:	2000      	movs	r0, #0
   2e0d8:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
   2e0da:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
   2e0de:	f3c0 4000 	ubfx	r0, r0, #16, #1
   2e0e2:	4770      	bx	lr
{
   2e0e4:	b510      	push	{r4, lr}
            NRFX_ASSERT(0);
   2e0e6:	4c09      	ldr	r4, [pc, #36]	; (2e10c <nrf_clock_is_running+0x8c>)
   2e0e8:	f240 3347 	movw	r3, #839	; 0x347
   2e0ec:	4622      	mov	r2, r4
   2e0ee:	4908      	ldr	r1, [pc, #32]	; (2e110 <nrf_clock_is_running+0x90>)
   2e0f0:	4808      	ldr	r0, [pc, #32]	; (2e114 <nrf_clock_is_running+0x94>)
   2e0f2:	f008 f8cf 	bl	36294 <assert_print>
   2e0f6:	f240 3147 	movw	r1, #839	; 0x347
   2e0fa:	4620      	mov	r0, r4
   2e0fc:	f008 f8c3 	bl	36286 <assert_post_action>
                return true;
   2e100:	2001      	movs	r0, #1
   2e102:	4770      	bx	lr
                return true;
   2e104:	2001      	movs	r0, #1
   2e106:	4770      	bx	lr
                return true;
   2e108:	2001      	movs	r0, #1
}
   2e10a:	4770      	bx	lr
   2e10c:	0004471c 	.word	0x0004471c
   2e110:	0003f964 	.word	0x0003f964
   2e114:	0003f72c 	.word	0x0003f72c

0002e118 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   2e118:	b570      	push	{r4, r5, r6, lr}
   2e11a:	b082      	sub	sp, #8
   2e11c:	4606      	mov	r6, r0
    switch (domain)
   2e11e:	2803      	cmp	r0, #3
   2e120:	d83c      	bhi.n	2e19c <clock_stop+0x84>
   2e122:	e8df f000 	tbb	[pc, r0]
   2e126:	1602      	.short	0x1602
   2e128:	2e21      	.short	0x2e21
    p_reg->INTENCLR = mask;
   2e12a:	4b2d      	ldr	r3, [pc, #180]	; (2e1e0 <clock_stop+0xc8>)
   2e12c:	2202      	movs	r2, #2
   2e12e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e132:	2200      	movs	r2, #0
   2e134:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2e138:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e13c:	2201      	movs	r2, #1
   2e13e:	60da      	str	r2, [r3, #12]
            NRFX_ASSERT(0);
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   2e140:	2301      	movs	r3, #1
   2e142:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2e146:	429e      	cmp	r6, r3
   2e148:	d033      	beq.n	2e1b2 <clock_stop+0x9a>
   2e14a:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2e14c:	f242 7410 	movw	r4, #10000	; 0x2710
   2e150:	e037      	b.n	2e1c2 <clock_stop+0xaa>
    p_reg->INTENCLR = mask;
   2e152:	4b23      	ldr	r3, [pc, #140]	; (2e1e0 <clock_stop+0xc8>)
   2e154:	2201      	movs	r2, #1
   2e156:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e15a:	2100      	movs	r1, #0
   2e15c:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   2e160:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e164:	605a      	str	r2, [r3, #4]
}
   2e166:	e7eb      	b.n	2e140 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   2e168:	4b1d      	ldr	r3, [pc, #116]	; (2e1e0 <clock_stop+0xc8>)
   2e16a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2e16e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e172:	2200      	movs	r2, #0
   2e174:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   2e178:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e17c:	2201      	movs	r2, #1
   2e17e:	625a      	str	r2, [r3, #36]	; 0x24
}
   2e180:	e7de      	b.n	2e140 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
   2e182:	4b17      	ldr	r3, [pc, #92]	; (2e1e0 <clock_stop+0xc8>)
   2e184:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e188:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e18c:	2200      	movs	r2, #0
   2e18e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e192:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e196:	2201      	movs	r2, #1
   2e198:	61da      	str	r2, [r3, #28]
}
   2e19a:	e7d1      	b.n	2e140 <clock_stop+0x28>
            NRFX_ASSERT(0);
   2e19c:	4c11      	ldr	r4, [pc, #68]	; (2e1e4 <clock_stop+0xcc>)
   2e19e:	23d8      	movs	r3, #216	; 0xd8
   2e1a0:	4622      	mov	r2, r4
   2e1a2:	4911      	ldr	r1, [pc, #68]	; (2e1e8 <clock_stop+0xd0>)
   2e1a4:	4811      	ldr	r0, [pc, #68]	; (2e1ec <clock_stop+0xd4>)
   2e1a6:	f008 f875 	bl	36294 <assert_print>
   2e1aa:	21d8      	movs	r1, #216	; 0xd8
   2e1ac:	4620      	mov	r0, r4
   2e1ae:	f008 f86a 	bl	36286 <assert_post_action>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   2e1b2:	f10d 0507 	add.w	r5, sp, #7
   2e1b6:	e7c9      	b.n	2e14c <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2e1b8:	2001      	movs	r0, #1
   2e1ba:	f00f f93e 	bl	3d43a <nrfx_busy_wait>
   2e1be:	3c01      	subs	r4, #1
   2e1c0:	d00b      	beq.n	2e1da <clock_stop+0xc2>
   2e1c2:	462a      	mov	r2, r5
   2e1c4:	4631      	mov	r1, r6
   2e1c6:	4806      	ldr	r0, [pc, #24]	; (2e1e0 <clock_stop+0xc8>)
   2e1c8:	f7ff ff5a 	bl	2e080 <nrf_clock_is_running>
   2e1cc:	b128      	cbz	r0, 2e1da <clock_stop+0xc2>
   2e1ce:	2d00      	cmp	r5, #0
   2e1d0:	d0f2      	beq.n	2e1b8 <clock_stop+0xa0>
   2e1d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2e1d6:	2b01      	cmp	r3, #1
   2e1d8:	d0ee      	beq.n	2e1b8 <clock_stop+0xa0>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2e1da:	b002      	add	sp, #8
   2e1dc:	bd70      	pop	{r4, r5, r6, pc}
   2e1de:	bf00      	nop
   2e1e0:	40005000 	.word	0x40005000
   2e1e4:	00045600 	.word	0x00045600
   2e1e8:	0003f964 	.word	0x0003f964
   2e1ec:	0003f72c 	.word	0x0003f72c

0002e1f0 <nrfx_clock_init>:
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);
   2e1f0:	b140      	cbz	r0, 2e204 <nrfx_clock_init+0x14>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2e1f2:	4b0c      	ldr	r3, [pc, #48]	; (2e224 <nrfx_clock_init+0x34>)
   2e1f4:	791b      	ldrb	r3, [r3, #4]
   2e1f6:	b99b      	cbnz	r3, 2e220 <nrfx_clock_init+0x30>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
   2e1f8:	4b0a      	ldr	r3, [pc, #40]	; (2e224 <nrfx_clock_init+0x34>)
   2e1fa:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2e1fc:	2201      	movs	r2, #1
   2e1fe:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   2e200:	4809      	ldr	r0, [pc, #36]	; (2e228 <nrfx_clock_init+0x38>)
   2e202:	4770      	bx	lr
{
   2e204:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   2e206:	4c09      	ldr	r4, [pc, #36]	; (2e22c <nrfx_clock_init+0x3c>)
   2e208:	f240 1315 	movw	r3, #277	; 0x115
   2e20c:	4622      	mov	r2, r4
   2e20e:	4908      	ldr	r1, [pc, #32]	; (2e230 <nrfx_clock_init+0x40>)
   2e210:	4808      	ldr	r0, [pc, #32]	; (2e234 <nrfx_clock_init+0x44>)
   2e212:	f008 f83f 	bl	36294 <assert_print>
   2e216:	f240 1115 	movw	r1, #277	; 0x115
   2e21a:	4620      	mov	r0, r4
   2e21c:	f008 f833 	bl	36286 <assert_post_action>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2e220:	4805      	ldr	r0, [pc, #20]	; (2e238 <nrfx_clock_init+0x48>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2e222:	4770      	bx	lr
   2e224:	2000c4c0 	.word	0x2000c4c0
   2e228:	0bad0000 	.word	0x0bad0000
   2e22c:	00045600 	.word	0x00045600
   2e230:	00045640 	.word	0x00045640
   2e234:	0003f72c 	.word	0x0003f72c
   2e238:	0bad000c 	.word	0x0bad000c

0002e23c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   2e23c:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2e23e:	4b0e      	ldr	r3, [pc, #56]	; (2e278 <nrfx_clock_enable+0x3c>)
   2e240:	791b      	ldrb	r3, [r3, #4]
   2e242:	b163      	cbz	r3, 2e25e <nrfx_clock_enable+0x22>
    nrfx_power_clock_irq_init();
   2e244:	f00f f8ff 	bl	3d446 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
   2e248:	f00f f8fb 	bl	3d442 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2e24c:	4b0b      	ldr	r3, [pc, #44]	; (2e27c <nrfx_clock_enable+0x40>)
   2e24e:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
    p_reg->HFCLKSRC = (uint32_t)(source);
   2e252:	2201      	movs	r2, #1
   2e254:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
   2e258:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   2e25c:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2e25e:	4c08      	ldr	r4, [pc, #32]	; (2e280 <nrfx_clock_enable+0x44>)
   2e260:	f44f 7397 	mov.w	r3, #302	; 0x12e
   2e264:	4622      	mov	r2, r4
   2e266:	4907      	ldr	r1, [pc, #28]	; (2e284 <nrfx_clock_enable+0x48>)
   2e268:	4807      	ldr	r0, [pc, #28]	; (2e288 <nrfx_clock_enable+0x4c>)
   2e26a:	f008 f813 	bl	36294 <assert_print>
   2e26e:	f44f 7197 	mov.w	r1, #302	; 0x12e
   2e272:	4620      	mov	r0, r4
   2e274:	f008 f807 	bl	36286 <assert_post_action>
   2e278:	2000c4c0 	.word	0x2000c4c0
   2e27c:	40005000 	.word	0x40005000
   2e280:	00045600 	.word	0x00045600
   2e284:	00045650 	.word	0x00045650
   2e288:	0003f72c 	.word	0x0003f72c

0002e28c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2e28c:	b510      	push	{r4, lr}
   2e28e:	b082      	sub	sp, #8
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2e290:	4b42      	ldr	r3, [pc, #264]	; (2e39c <nrfx_clock_start+0x110>)
   2e292:	791b      	ldrb	r3, [r3, #4]
   2e294:	b12b      	cbz	r3, 2e2a2 <nrfx_clock_start+0x16>
    switch (domain)
   2e296:	2803      	cmp	r0, #3
   2e298:	d872      	bhi.n	2e380 <nrfx_clock_start+0xf4>
   2e29a:	e8df f000 	tbb	[pc, r0]
   2e29e:	4b0f      	.short	0x4b0f
   2e2a0:	6457      	.short	0x6457
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2e2a2:	4c3f      	ldr	r4, [pc, #252]	; (2e3a0 <nrfx_clock_start+0x114>)
   2e2a4:	f44f 73b4 	mov.w	r3, #360	; 0x168
   2e2a8:	4622      	mov	r2, r4
   2e2aa:	493e      	ldr	r1, [pc, #248]	; (2e3a4 <nrfx_clock_start+0x118>)
   2e2ac:	483e      	ldr	r0, [pc, #248]	; (2e3a8 <nrfx_clock_start+0x11c>)
   2e2ae:	f007 fff1 	bl	36294 <assert_print>
   2e2b2:	f44f 71b4 	mov.w	r1, #360	; 0x168
   2e2b6:	4620      	mov	r0, r4
   2e2b8:	f007 ffe5 	bl	36286 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2e2bc:	4a3b      	ldr	r2, [pc, #236]	; (2e3ac <nrfx_clock_start+0x120>)
   2e2be:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   2e2c2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   2e2c6:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2e2ca:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   2e2ce:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   2e2d2:	d118      	bne.n	2e306 <nrfx_clock_start+0x7a>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   2e2d4:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                    // LF clock is already running. Inspect its source.
                    // If LF clock source is inappropriate then it will be stopped and modified.
                    // Ignore return value as LF clock will be started again regardless of the result.
                    (void)clock_lfclksrc_tweak(&lfclksrc);
                }
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   2e2d8:	f013 0f01 	tst.w	r3, #1
   2e2dc:	d118      	bne.n	2e310 <nrfx_clock_start+0x84>
                    // LF clock was stopped and modified. Now it will be restarted.
                }
                else
                {
                    // LF clock not active and not started.
                    lfclksrc = clock_initial_lfclksrc_get();
   2e2de:	f00f f8b0 	bl	3d442 <clock_initial_lfclksrc_get>
   2e2e2:	f88d 0007 	strb.w	r0, [sp, #7]
                }
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
   2e2e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2e2ea:	4b30      	ldr	r3, [pc, #192]	; (2e3ac <nrfx_clock_start+0x120>)
   2e2ec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e2f0:	2200      	movs	r2, #0
   2e2f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2e2f6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2e2fa:	2202      	movs	r2, #2
   2e2fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e300:	2201      	movs	r2, #1
   2e302:	609a      	str	r2, [r3, #8]
}
   2e304:	e020      	b.n	2e348 <nrfx_clock_start+0xbc>
                    (void)clock_lfclksrc_tweak(&lfclksrc);
   2e306:	f10d 0007 	add.w	r0, sp, #7
   2e30a:	f00f f8a6 	bl	3d45a <clock_lfclksrc_tweak>
   2e30e:	e7ea      	b.n	2e2e6 <nrfx_clock_start+0x5a>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2e310:	4b26      	ldr	r3, [pc, #152]	; (2e3ac <nrfx_clock_start+0x120>)
   2e312:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2e316:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
   2e31a:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
   2e31e:	f10d 0007 	add.w	r0, sp, #7
   2e322:	f00f f89a 	bl	3d45a <clock_lfclksrc_tweak>
   2e326:	2800      	cmp	r0, #0
   2e328:	d0dd      	beq.n	2e2e6 <nrfx_clock_start+0x5a>
    p_reg->INTENSET = mask;
   2e32a:	4b20      	ldr	r3, [pc, #128]	; (2e3ac <nrfx_clock_start+0x120>)
   2e32c:	2202      	movs	r2, #2
   2e32e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
   2e332:	e009      	b.n	2e348 <nrfx_clock_start+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e334:	4b1d      	ldr	r3, [pc, #116]	; (2e3ac <nrfx_clock_start+0x120>)
   2e336:	2200      	movs	r2, #0
   2e338:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2e33c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2e340:	2201      	movs	r2, #1
   2e342:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e346:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   2e348:	b002      	add	sp, #8
   2e34a:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e34c:	4b17      	ldr	r3, [pc, #92]	; (2e3ac <nrfx_clock_start+0x120>)
   2e34e:	2200      	movs	r2, #0
   2e350:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   2e354:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
   2e358:	f44f 7200 	mov.w	r2, #512	; 0x200
   2e35c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e360:	2201      	movs	r2, #1
   2e362:	621a      	str	r2, [r3, #32]
}
   2e364:	e7f0      	b.n	2e348 <nrfx_clock_start+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e366:	4b11      	ldr	r3, [pc, #68]	; (2e3ac <nrfx_clock_start+0x120>)
   2e368:	2200      	movs	r2, #0
   2e36a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e36e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
   2e372:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e376:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e37a:	2201      	movs	r2, #1
   2e37c:	619a      	str	r2, [r3, #24]
}
   2e37e:	e7e3      	b.n	2e348 <nrfx_clock_start+0xbc>
            NRFX_ASSERT(0);
   2e380:	4c07      	ldr	r4, [pc, #28]	; (2e3a0 <nrfx_clock_start+0x114>)
   2e382:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
   2e386:	4622      	mov	r2, r4
   2e388:	4909      	ldr	r1, [pc, #36]	; (2e3b0 <nrfx_clock_start+0x124>)
   2e38a:	4807      	ldr	r0, [pc, #28]	; (2e3a8 <nrfx_clock_start+0x11c>)
   2e38c:	f007 ff82 	bl	36294 <assert_print>
   2e390:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
   2e394:	4620      	mov	r0, r4
   2e396:	f007 ff76 	bl	36286 <assert_post_action>
   2e39a:	bf00      	nop
   2e39c:	2000c4c0 	.word	0x2000c4c0
   2e3a0:	00045600 	.word	0x00045600
   2e3a4:	00045650 	.word	0x00045650
   2e3a8:	0003f72c 	.word	0x0003f72c
   2e3ac:	40005000 	.word	0x40005000
   2e3b0:	0003f964 	.word	0x0003f964

0002e3b4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   2e3b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2e3b6:	4b09      	ldr	r3, [pc, #36]	; (2e3dc <nrfx_clock_stop+0x28>)
   2e3b8:	791b      	ldrb	r3, [r3, #4]
   2e3ba:	b113      	cbz	r3, 2e3c2 <nrfx_clock_stop+0xe>
    clock_stop(domain);
   2e3bc:	f7ff feac 	bl	2e118 <clock_stop>
}
   2e3c0:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   2e3c2:	4c07      	ldr	r4, [pc, #28]	; (2e3e0 <nrfx_clock_stop+0x2c>)
   2e3c4:	f240 13ad 	movw	r3, #429	; 0x1ad
   2e3c8:	4622      	mov	r2, r4
   2e3ca:	4906      	ldr	r1, [pc, #24]	; (2e3e4 <nrfx_clock_stop+0x30>)
   2e3cc:	4806      	ldr	r0, [pc, #24]	; (2e3e8 <nrfx_clock_stop+0x34>)
   2e3ce:	f007 ff61 	bl	36294 <assert_print>
   2e3d2:	f240 11ad 	movw	r1, #429	; 0x1ad
   2e3d6:	4620      	mov	r0, r4
   2e3d8:	f007 ff55 	bl	36286 <assert_post_action>
   2e3dc:	2000c4c0 	.word	0x2000c4c0
   2e3e0:	00045600 	.word	0x00045600
   2e3e4:	00045650 	.word	0x00045650
   2e3e8:	0003f72c 	.word	0x0003f72c

0002e3ec <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2e3ec:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2e3ee:	4b2b      	ldr	r3, [pc, #172]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e3f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2e3f4:	b15b      	cbz	r3, 2e40e <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e3f6:	4b29      	ldr	r3, [pc, #164]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e3f8:	2000      	movs	r0, #0
   2e3fa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   2e3fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2e402:	2201      	movs	r2, #1
   2e404:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   2e408:	4b25      	ldr	r3, [pc, #148]	; (2e4a0 <nrfx_power_clock_irq_handler+0xb4>)
   2e40a:	681b      	ldr	r3, [r3, #0]
   2e40c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2e40e:	4b23      	ldr	r3, [pc, #140]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e410:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2e414:	b1ab      	cbz	r3, 2e442 <nrfx_power_clock_irq_handler+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e416:	4b21      	ldr	r3, [pc, #132]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e418:	2200      	movs	r2, #0
   2e41a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2e41e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2e422:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
   2e426:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2e42a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   2e42e:	2a01      	cmp	r2, #1
   2e430:	d02c      	beq.n	2e48c <nrfx_power_clock_irq_handler+0xa0>
    p_reg->INTENCLR = mask;
   2e432:	4b1a      	ldr	r3, [pc, #104]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e434:	2202      	movs	r2, #2
   2e436:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2e43a:	4b19      	ldr	r3, [pc, #100]	; (2e4a0 <nrfx_power_clock_irq_handler+0xb4>)
   2e43c:	681b      	ldr	r3, [r3, #0]
   2e43e:	2001      	movs	r0, #1
   2e440:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2e442:	4b16      	ldr	r3, [pc, #88]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e444:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
   2e448:	b16b      	cbz	r3, 2e466 <nrfx_power_clock_irq_handler+0x7a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e44a:	4b14      	ldr	r3, [pc, #80]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e44c:	2200      	movs	r2, #0
   2e44e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2e452:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
   2e456:	f44f 7280 	mov.w	r2, #256	; 0x100
   2e45a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
   2e45e:	4b10      	ldr	r3, [pc, #64]	; (2e4a0 <nrfx_power_clock_irq_handler+0xb4>)
   2e460:	681b      	ldr	r3, [r3, #0]
   2e462:	2004      	movs	r0, #4
   2e464:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2e466:	4b0d      	ldr	r3, [pc, #52]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e468:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
   2e46c:	b16b      	cbz	r3, 2e48a <nrfx_power_clock_irq_handler+0x9e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2e46e:	4b0b      	ldr	r3, [pc, #44]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e470:	2200      	movs	r2, #0
   2e472:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   2e476:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
   2e47a:	f44f 7200 	mov.w	r2, #512	; 0x200
   2e47e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
   2e482:	4b07      	ldr	r3, [pc, #28]	; (2e4a0 <nrfx_power_clock_irq_handler+0xb4>)
   2e484:	681b      	ldr	r3, [r3, #0]
   2e486:	2005      	movs	r0, #5
   2e488:	4798      	blx	r3
    }
#endif
}
   2e48a:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   2e48c:	4b03      	ldr	r3, [pc, #12]	; (2e49c <nrfx_power_clock_irq_handler+0xb0>)
   2e48e:	2202      	movs	r2, #2
   2e490:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2e494:	2201      	movs	r2, #1
   2e496:	609a      	str	r2, [r3, #8]
}
   2e498:	e7d3      	b.n	2e442 <nrfx_power_clock_irq_handler+0x56>
   2e49a:	bf00      	nop
   2e49c:	40005000 	.word	0x40005000
   2e4a0:	2000c4c0 	.word	0x2000c4c0

0002e4a4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   2e4a4:	b508      	push	{r3, lr}
   2e4a6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   2e4a8:	4801      	ldr	r0, [pc, #4]	; (2e4b0 <nrfx_dppi_channel_alloc+0xc>)
   2e4aa:	f7ff fda7 	bl	2dffc <nrfx_flag32_alloc>
}
   2e4ae:	bd08      	pop	{r3, pc}
   2e4b0:	20008778 	.word	0x20008778

0002e4b4 <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
   2e4b4:	b508      	push	{r3, lr}
   2e4b6:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
   2e4b8:	2301      	movs	r3, #1
   2e4ba:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
   2e4bc:	4a03      	ldr	r2, [pc, #12]	; (2e4cc <nrfx_dppi_channel_free+0x18>)
   2e4be:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
   2e4c2:	4803      	ldr	r0, [pc, #12]	; (2e4d0 <nrfx_dppi_channel_free+0x1c>)
   2e4c4:	f7ff fdbe 	bl	2e044 <nrfx_flag32_free>
}
   2e4c8:	bd08      	pop	{r3, pc}
   2e4ca:	bf00      	nop
   2e4cc:	40017000 	.word	0x40017000
   2e4d0:	20008778 	.word	0x20008778

0002e4d4 <nrf_gpio_latches_read_and_clear>:
{
   2e4d4:	b500      	push	{lr}
   2e4d6:	b083      	sub	sp, #12
   2e4d8:	4684      	mov	ip, r0
   2e4da:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   2e4dc:	4b0c      	ldr	r3, [pc, #48]	; (2e510 <nrf_gpio_latches_read_and_clear+0x3c>)
   2e4de:	e893 0003 	ldmia.w	r3, {r0, r1}
   2e4e2:	ab02      	add	r3, sp, #8
   2e4e4:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   2e4e8:	4663      	mov	r3, ip
   2e4ea:	e009      	b.n	2e500 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
   2e4ec:	a902      	add	r1, sp, #8
   2e4ee:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2e4f2:	f851 1c08 	ldr.w	r1, [r1, #-8]
   2e4f6:	6a08      	ldr	r0, [r1, #32]
   2e4f8:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
   2e4fc:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
   2e4fe:	3301      	adds	r3, #1
   2e500:	eb0c 000e 	add.w	r0, ip, lr
   2e504:	4298      	cmp	r0, r3
   2e506:	d8f1      	bhi.n	2e4ec <nrf_gpio_latches_read_and_clear+0x18>
}
   2e508:	b003      	add	sp, #12
   2e50a:	f85d fb04 	ldr.w	pc, [sp], #4
   2e50e:	bf00      	nop
   2e510:	0003f69c 	.word	0x0003f69c

0002e514 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2e514:	3008      	adds	r0, #8
   2e516:	4b03      	ldr	r3, [pc, #12]	; (2e524 <pin_in_use+0x10>)
   2e518:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2e51c:	f000 0001 	and.w	r0, r0, #1
   2e520:	4770      	bx	lr
   2e522:	bf00      	nop
   2e524:	2000877c 	.word	0x2000877c

0002e528 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   2e528:	3008      	adds	r0, #8
   2e52a:	4b03      	ldr	r3, [pc, #12]	; (2e538 <pin_in_use_by_te+0x10>)
   2e52c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2e530:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2e534:	4770      	bx	lr
   2e536:	bf00      	nop
   2e538:	2000877c 	.word	0x2000877c

0002e53c <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2e53c:	3008      	adds	r0, #8
   2e53e:	4b04      	ldr	r3, [pc, #16]	; (2e550 <pin_has_trigger+0x14>)
   2e540:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2e544:	f010 001c 	ands.w	r0, r0, #28
   2e548:	bf18      	it	ne
   2e54a:	2001      	movne	r0, #1
   2e54c:	4770      	bx	lr
   2e54e:	bf00      	nop
   2e550:	2000877c 	.word	0x2000877c

0002e554 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2e554:	3008      	adds	r0, #8
   2e556:	4b03      	ldr	r3, [pc, #12]	; (2e564 <pin_is_output+0x10>)
   2e558:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2e55c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2e560:	4770      	bx	lr
   2e562:	bf00      	nop
   2e564:	2000877c 	.word	0x2000877c

0002e568 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2e568:	3008      	adds	r0, #8
   2e56a:	4b02      	ldr	r3, [pc, #8]	; (2e574 <pin_te_get+0xc>)
   2e56c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   2e570:	0b40      	lsrs	r0, r0, #13
   2e572:	4770      	bx	lr
   2e574:	2000877c 	.word	0x2000877c

0002e578 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2e578:	2200      	movs	r2, #0
   2e57a:	e004      	b.n	2e586 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2e57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e580:	4283      	cmp	r3, r0
   2e582:	d00f      	beq.n	2e5a4 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2e584:	3201      	adds	r2, #1
   2e586:	2a2f      	cmp	r2, #47	; 0x2f
   2e588:	d80a      	bhi.n	2e5a0 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2e58a:	f102 0308 	add.w	r3, r2, #8
   2e58e:	4906      	ldr	r1, [pc, #24]	; (2e5a8 <handler_in_use+0x30>)
   2e590:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   2e594:	f413 7f80 	tst.w	r3, #256	; 0x100
   2e598:	d0f0      	beq.n	2e57c <handler_in_use+0x4>
   2e59a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2e59e:	e7ef      	b.n	2e580 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   2e5a0:	2000      	movs	r0, #0
   2e5a2:	4770      	bx	lr
            return true;
   2e5a4:	2001      	movs	r0, #1
}
   2e5a6:	4770      	bx	lr
   2e5a8:	2000877c 	.word	0x2000877c

0002e5ac <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   2e5ac:	2300      	movs	r3, #0
   2e5ae:	b113      	cbz	r3, 2e5b6 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   2e5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2e5b4:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2e5b6:	4a07      	ldr	r2, [pc, #28]	; (2e5d4 <find_handler+0x28>)
   2e5b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   2e5bc:	4282      	cmp	r2, r0
   2e5be:	d001      	beq.n	2e5c4 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   2e5c0:	3301      	adds	r3, #1
   2e5c2:	e7f4      	b.n	2e5ae <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2e5c4:	4a03      	ldr	r2, [pc, #12]	; (2e5d4 <find_handler+0x28>)
   2e5c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2e5ca:	6852      	ldr	r2, [r2, #4]
   2e5cc:	428a      	cmp	r2, r1
   2e5ce:	d1f7      	bne.n	2e5c0 <find_handler+0x14>
            return i;
   2e5d0:	4618      	mov	r0, r3
   2e5d2:	4770      	bx	lr
   2e5d4:	2000877c 	.word	0x2000877c

0002e5d8 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e5d8:	3008      	adds	r0, #8
   2e5da:	4b06      	ldr	r3, [pc, #24]	; (2e5f4 <channel_handler_get+0x1c>)
   2e5dc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   2e5e0:	f410 7f80 	tst.w	r0, #256	; 0x100
   2e5e4:	d004      	beq.n	2e5f0 <channel_handler_get+0x18>
   2e5e6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   2e5ea:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2e5ee:	4770      	bx	lr
        return NULL;
   2e5f0:	2000      	movs	r0, #0
}
   2e5f2:	4770      	bx	lr
   2e5f4:	2000877c 	.word	0x2000877c

0002e5f8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   2e5f8:	b570      	push	{r4, r5, r6, lr}
   2e5fa:	4604      	mov	r4, r0
   2e5fc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   2e5fe:	f7ff ffeb 	bl	2e5d8 <channel_handler_get>

    if (handler)
   2e602:	b120      	cbz	r0, 2e60e <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   2e604:	6806      	ldr	r6, [r0, #0]
   2e606:	6842      	ldr	r2, [r0, #4]
   2e608:	4629      	mov	r1, r5
   2e60a:	4620      	mov	r0, r4
   2e60c:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   2e60e:	4b04      	ldr	r3, [pc, #16]	; (2e620 <call_handler+0x28>)
   2e610:	689b      	ldr	r3, [r3, #8]
   2e612:	b123      	cbz	r3, 2e61e <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2e614:	4a02      	ldr	r2, [pc, #8]	; (2e620 <call_handler+0x28>)
   2e616:	68d2      	ldr	r2, [r2, #12]
   2e618:	4629      	mov	r1, r5
   2e61a:	4620      	mov	r0, r4
   2e61c:	4798      	blx	r3
    }
}
   2e61e:	bd70      	pop	{r4, r5, r6, pc}
   2e620:	2000877c 	.word	0x2000877c

0002e624 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e624:	f100 0208 	add.w	r2, r0, #8
   2e628:	4b16      	ldr	r3, [pc, #88]	; (2e684 <release_handler+0x60>)
   2e62a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2e62e:	f413 7f80 	tst.w	r3, #256	; 0x100
   2e632:	d025      	beq.n	2e680 <release_handler+0x5c>
{
   2e634:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2e636:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2e63a:	4610      	mov	r0, r2
   2e63c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2e640:	4a10      	ldr	r2, [pc, #64]	; (2e684 <release_handler+0x60>)
   2e642:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   2e646:	4620      	mov	r0, r4
   2e648:	f7ff ff96 	bl	2e578 <handler_in_use>
   2e64c:	b100      	cbz	r0, 2e650 <release_handler+0x2c>
}
   2e64e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   2e650:	480c      	ldr	r0, [pc, #48]	; (2e684 <release_handler+0x60>)
   2e652:	2300      	movs	r3, #0
   2e654:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2e658:	4621      	mov	r1, r4
   2e65a:	3074      	adds	r0, #116	; 0x74
   2e65c:	f7ff fcf2 	bl	2e044 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   2e660:	4b09      	ldr	r3, [pc, #36]	; (2e688 <release_handler+0x64>)
   2e662:	4298      	cmp	r0, r3
   2e664:	d0f3      	beq.n	2e64e <release_handler+0x2a>
   2e666:	4c09      	ldr	r4, [pc, #36]	; (2e68c <release_handler+0x68>)
   2e668:	f44f 7399 	mov.w	r3, #306	; 0x132
   2e66c:	4622      	mov	r2, r4
   2e66e:	4908      	ldr	r1, [pc, #32]	; (2e690 <release_handler+0x6c>)
   2e670:	4808      	ldr	r0, [pc, #32]	; (2e694 <release_handler+0x70>)
   2e672:	f007 fe0f 	bl	36294 <assert_print>
   2e676:	f44f 7199 	mov.w	r1, #306	; 0x132
   2e67a:	4620      	mov	r0, r4
   2e67c:	f007 fe03 	bl	36286 <assert_post_action>
   2e680:	4770      	bx	lr
   2e682:	bf00      	nop
   2e684:	2000877c 	.word	0x2000877c
   2e688:	0bad0000 	.word	0x0bad0000
   2e68c:	00045688 	.word	0x00045688
   2e690:	00040d14 	.word	0x00040d14
   2e694:	0003f72c 	.word	0x0003f72c

0002e698 <pin_handler_trigger_uninit>:
{
   2e698:	b510      	push	{r4, lr}
   2e69a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   2e69c:	f7ff ff44 	bl	2e528 <pin_in_use_by_te>
   2e6a0:	b150      	cbz	r0, 2e6b8 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2e6a2:	4620      	mov	r0, r4
   2e6a4:	f7ff ff60 	bl	2e568 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   2e6a8:	4b08      	ldr	r3, [pc, #32]	; (2e6cc <pin_handler_trigger_uninit+0x34>)
   2e6aa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2e6ae:	2200      	movs	r2, #0
   2e6b0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   2e6b4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   2e6b8:	4620      	mov	r0, r4
   2e6ba:	f7ff ffb3 	bl	2e624 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2e6be:	3408      	adds	r4, #8
   2e6c0:	4b03      	ldr	r3, [pc, #12]	; (2e6d0 <pin_handler_trigger_uninit+0x38>)
   2e6c2:	2200      	movs	r2, #0
   2e6c4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   2e6c8:	bd10      	pop	{r4, pc}
   2e6ca:	bf00      	nop
   2e6cc:	4002f000 	.word	0x4002f000
   2e6d0:	2000877c 	.word	0x2000877c

0002e6d4 <nrf_gpio_pin_port_decode>:
{
   2e6d4:	b538      	push	{r3, r4, r5, lr}
   2e6d6:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e6d8:	6804      	ldr	r4, [r0, #0]
   2e6da:	4620      	mov	r0, r4
   2e6dc:	f00e ff0a 	bl	3d4f4 <nrf_gpio_pin_present_check>
   2e6e0:	b140      	cbz	r0, 2e6f4 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2e6e2:	f004 031f 	and.w	r3, r4, #31
   2e6e6:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e6e8:	0964      	lsrs	r4, r4, #5
   2e6ea:	d01d      	beq.n	2e728 <nrf_gpio_pin_port_decode+0x54>
   2e6ec:	2c01      	cmp	r4, #1
   2e6ee:	d10e      	bne.n	2e70e <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   2e6f0:	480e      	ldr	r0, [pc, #56]	; (2e72c <nrf_gpio_pin_port_decode+0x58>)
}
   2e6f2:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2e6f4:	4c0e      	ldr	r4, [pc, #56]	; (2e730 <nrf_gpio_pin_port_decode+0x5c>)
   2e6f6:	f240 2347 	movw	r3, #583	; 0x247
   2e6fa:	4622      	mov	r2, r4
   2e6fc:	490d      	ldr	r1, [pc, #52]	; (2e734 <nrf_gpio_pin_port_decode+0x60>)
   2e6fe:	480e      	ldr	r0, [pc, #56]	; (2e738 <nrf_gpio_pin_port_decode+0x64>)
   2e700:	f007 fdc8 	bl	36294 <assert_print>
   2e704:	f240 2147 	movw	r1, #583	; 0x247
   2e708:	4620      	mov	r0, r4
   2e70a:	f007 fdbc 	bl	36286 <assert_post_action>
            NRFX_ASSERT(0);
   2e70e:	4c08      	ldr	r4, [pc, #32]	; (2e730 <nrf_gpio_pin_port_decode+0x5c>)
   2e710:	f44f 7313 	mov.w	r3, #588	; 0x24c
   2e714:	4622      	mov	r2, r4
   2e716:	4909      	ldr	r1, [pc, #36]	; (2e73c <nrf_gpio_pin_port_decode+0x68>)
   2e718:	4807      	ldr	r0, [pc, #28]	; (2e738 <nrf_gpio_pin_port_decode+0x64>)
   2e71a:	f007 fdbb 	bl	36294 <assert_print>
   2e71e:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2e722:	4620      	mov	r0, r4
   2e724:	f007 fdaf 	bl	36286 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2e728:	4805      	ldr	r0, [pc, #20]	; (2e740 <nrf_gpio_pin_port_decode+0x6c>)
   2e72a:	e7e2      	b.n	2e6f2 <nrf_gpio_pin_port_decode+0x1e>
   2e72c:	40842800 	.word	0x40842800
   2e730:	000448c8 	.word	0x000448c8
   2e734:	000448fc 	.word	0x000448fc
   2e738:	0003f72c 	.word	0x0003f72c
   2e73c:	0003f964 	.word	0x0003f964
   2e740:	40842500 	.word	0x40842500

0002e744 <get_initial_sense>:
{
   2e744:	b508      	push	{r3, lr}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2e746:	f100 0208 	add.w	r2, r0, #8
   2e74a:	4b0a      	ldr	r3, [pc, #40]	; (2e774 <get_initial_sense+0x30>)
   2e74c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2e750:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2e754:	2b04      	cmp	r3, #4
   2e756:	d008      	beq.n	2e76a <get_initial_sense+0x26>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   2e758:	2b05      	cmp	r3, #5
   2e75a:	d101      	bne.n	2e760 <get_initial_sense+0x1c>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2e75c:	2002      	movs	r0, #2
   2e75e:	e005      	b.n	2e76c <get_initial_sense+0x28>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e760:	f00e ff88 	bl	3d674 <nrf_gpio_pin_read>
   2e764:	b118      	cbz	r0, 2e76e <get_initial_sense+0x2a>
   2e766:	2003      	movs	r0, #3
   2e768:	e000      	b.n	2e76c <get_initial_sense+0x28>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2e76a:	2003      	movs	r0, #3
}
   2e76c:	bd08      	pop	{r3, pc}
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2e76e:	2002      	movs	r0, #2
   2e770:	e7fc      	b.n	2e76c <get_initial_sense+0x28>
   2e772:	bf00      	nop
   2e774:	2000877c 	.word	0x2000877c

0002e778 <nrf_gpiote_in_event_get>:
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   2e778:	2807      	cmp	r0, #7
   2e77a:	d803      	bhi.n	2e784 <nrf_gpiote_in_event_get+0xc>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2e77c:	0080      	lsls	r0, r0, #2
}
   2e77e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2e782:	4770      	bx	lr
{
   2e784:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   2e786:	4c06      	ldr	r4, [pc, #24]	; (2e7a0 <nrf_gpiote_in_event_get+0x28>)
   2e788:	f44f 7323 	mov.w	r3, #652	; 0x28c
   2e78c:	4622      	mov	r2, r4
   2e78e:	4905      	ldr	r1, [pc, #20]	; (2e7a4 <nrf_gpiote_in_event_get+0x2c>)
   2e790:	4805      	ldr	r0, [pc, #20]	; (2e7a8 <nrf_gpiote_in_event_get+0x30>)
   2e792:	f007 fd7f 	bl	36294 <assert_print>
   2e796:	f44f 7123 	mov.w	r1, #652	; 0x28c
   2e79a:	4620      	mov	r0, r4
   2e79c:	f007 fd73 	bl	36286 <assert_post_action>
   2e7a0:	000456c8 	.word	0x000456c8
   2e7a4:	00045700 	.word	0x00045700
   2e7a8:	0003f72c 	.word	0x0003f72c

0002e7ac <pin_handler_set>:
{
   2e7ac:	b570      	push	{r4, r5, r6, lr}
   2e7ae:	b082      	sub	sp, #8
   2e7b0:	4605      	mov	r5, r0
   2e7b2:	460e      	mov	r6, r1
   2e7b4:	4614      	mov	r4, r2
    release_handler(pin);
   2e7b6:	f7ff ff35 	bl	2e624 <release_handler>
    if (!handler)
   2e7ba:	b326      	cbz	r6, 2e806 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   2e7bc:	4621      	mov	r1, r4
   2e7be:	4630      	mov	r0, r6
   2e7c0:	f7ff fef4 	bl	2e5ac <find_handler>
    if (handler_id < 0)
   2e7c4:	1e03      	subs	r3, r0, #0
   2e7c6:	db13      	blt.n	2e7f0 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   2e7c8:	4910      	ldr	r1, [pc, #64]	; (2e80c <pin_handler_set+0x60>)
   2e7ca:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2e7ce:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   2e7d2:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2e7d4:	f105 0008 	add.w	r0, r5, #8
   2e7d8:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
   2e7dc:	025b      	lsls	r3, r3, #9
   2e7de:	b29b      	uxth	r3, r3
   2e7e0:	4313      	orrs	r3, r2
   2e7e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   2e7e6:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
   2e7ea:	4809      	ldr	r0, [pc, #36]	; (2e810 <pin_handler_set+0x64>)
}
   2e7ec:	b002      	add	sp, #8
   2e7ee:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   2e7f0:	f10d 0107 	add.w	r1, sp, #7
   2e7f4:	4807      	ldr	r0, [pc, #28]	; (2e814 <pin_handler_set+0x68>)
   2e7f6:	f7ff fc01 	bl	2dffc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2e7fa:	4b05      	ldr	r3, [pc, #20]	; (2e810 <pin_handler_set+0x64>)
   2e7fc:	4298      	cmp	r0, r3
   2e7fe:	d1f5      	bne.n	2e7ec <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   2e800:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2e804:	e7e0      	b.n	2e7c8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   2e806:	4802      	ldr	r0, [pc, #8]	; (2e810 <pin_handler_set+0x64>)
   2e808:	e7f0      	b.n	2e7ec <pin_handler_set+0x40>
   2e80a:	bf00      	nop
   2e80c:	2000877c 	.word	0x2000877c
   2e810:	0bad0000 	.word	0x0bad0000
   2e814:	200087f0 	.word	0x200087f0

0002e818 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
   2e818:	b570      	push	{r4, r5, r6, lr}
   2e81a:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   2e81c:	466a      	mov	r2, sp
   2e81e:	2102      	movs	r1, #2
   2e820:	2000      	movs	r0, #0
   2e822:	f7ff fe57 	bl	2e4d4 <nrf_gpio_latches_read_and_clear>
   2e826:	e037      	b.n	2e898 <port_event_handle+0x80>
    do {
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
        {
            while (latch[i])
            {
                uint32_t pin = NRF_CTZ(latch[i]);
   2e828:	fa94 f4a4 	rbit	r4, r4
   2e82c:	fab4 f484 	clz	r4, r4

                /* Convert to absolute value. */
                pin += 32 * i;
   2e830:	eb04 1445 	add.w	r4, r4, r5, lsl #5
                nrf_gpio_pin_sense_t sense;
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2e834:	f104 0208 	add.w	r2, r4, #8
   2e838:	4b19      	ldr	r3, [pc, #100]	; (2e8a0 <port_event_handle+0x88>)
   2e83a:	f833 6012 	ldrh.w	r6, [r3, r2, lsl #1]
   2e83e:	f3c6 0682 	ubfx	r6, r6, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   2e842:	08e1      	lsrs	r1, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
   2e844:	f004 0007 	and.w	r0, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2e848:	f81d 2001 	ldrb.w	r2, [sp, r1]
   2e84c:	2301      	movs	r3, #1
   2e84e:	4083      	lsls	r3, r0
   2e850:	43db      	mvns	r3, r3
   2e852:	b25b      	sxtb	r3, r3
   2e854:	4013      	ands	r3, r2
   2e856:	f80d 3001 	strb.w	r3, [sp, r1]

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);
   2e85a:	4620      	mov	r0, r4
   2e85c:	f00e ff18 	bl	3d690 <nrf_gpio_pin_sense_get>
   2e860:	4602      	mov	r2, r0

                next_sense_cond_call_handler(pin, trigger, sense);
   2e862:	4631      	mov	r1, r6
   2e864:	4620      	mov	r0, r4
   2e866:	f00e ff22 	bl	3d6ae <next_sense_cond_call_handler>
                /* Try to clear LATCH bit corresponding to currently processed pin.
                 * This may not succeed if the pin's state changed during the interrupt processing
                 * and now it matches the new sense configuration. In such case,
                 * the pin will be processed again in another iteration of the outer loop. */
                nrf_gpio_pin_latch_clear(pin);
   2e86a:	4620      	mov	r0, r4
   2e86c:	f00e ff52 	bl	3d714 <nrf_gpio_pin_latch_clear>
            while (latch[i])
   2e870:	ab02      	add	r3, sp, #8
   2e872:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   2e876:	f853 4c08 	ldr.w	r4, [r3, #-8]
   2e87a:	2c00      	cmp	r4, #0
   2e87c:	d1d4      	bne.n	2e828 <port_event_handle+0x10>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2e87e:	3501      	adds	r5, #1
   2e880:	2d01      	cmp	r5, #1
   2e882:	d9f5      	bls.n	2e870 <port_event_handle+0x58>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2e884:	4b07      	ldr	r3, [pc, #28]	; (2e8a4 <port_event_handle+0x8c>)
   2e886:	2200      	movs	r2, #0
   2e888:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   2e88c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   2e890:	4668      	mov	r0, sp
   2e892:	f00e fe5e 	bl	3d552 <latch_pending_read_and_check>
   2e896:	b108      	cbz	r0, 2e89c <port_event_handle+0x84>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   2e898:	2500      	movs	r5, #0
   2e89a:	e7f1      	b.n	2e880 <port_event_handle+0x68>
}
   2e89c:	b002      	add	sp, #8
   2e89e:	bd70      	pop	{r4, r5, r6, pc}
   2e8a0:	2000877c 	.word	0x2000877c
   2e8a4:	4002f000 	.word	0x4002f000

0002e8a8 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   2e8a8:	b538      	push	{r3, r4, r5, lr}
   2e8aa:	4604      	mov	r4, r0
    while (mask)
   2e8ac:	e018      	b.n	2e8e0 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
   2e8ae:	fa94 f3a4 	rbit	r3, r4
   2e8b2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   2e8b6:	2201      	movs	r2, #1
   2e8b8:	409a      	lsls	r2, r3
   2e8ba:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2e8be:	4a0a      	ldr	r2, [pc, #40]	; (2e8e8 <gpiote_evt_handle+0x40>)
   2e8c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2e8c4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   2e8c8:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2e8cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   2e8d0:	f3c0 4001 	ubfx	r0, r0, #16, #2
   2e8d4:	f00e fe36 	bl	3d544 <gpiote_polarity_to_trigger>
   2e8d8:	4601      	mov	r1, r0
   2e8da:	4628      	mov	r0, r5
   2e8dc:	f7ff fe8c 	bl	2e5f8 <call_handler>
    while (mask)
   2e8e0:	2c00      	cmp	r4, #0
   2e8e2:	d1e4      	bne.n	2e8ae <gpiote_evt_handle+0x6>
    }
}
   2e8e4:	bd38      	pop	{r3, r4, r5, pc}
   2e8e6:	bf00      	nop
   2e8e8:	4002f000 	.word	0x4002f000

0002e8ec <nrfx_gpiote_input_configure>:
{
   2e8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e8f0:	b084      	sub	sp, #16
   2e8f2:	4604      	mov	r4, r0
   2e8f4:	4615      	mov	r5, r2
   2e8f6:	461e      	mov	r6, r3
    if (p_input_config)
   2e8f8:	b309      	cbz	r1, 2e93e <nrfx_gpiote_input_configure+0x52>
   2e8fa:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   2e8fc:	f00e fe0c 	bl	3d518 <pin_is_task_output>
   2e900:	2800      	cmp	r0, #0
   2e902:	d13f      	bne.n	2e984 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2e904:	2300      	movs	r3, #0
   2e906:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2e90a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   2e90e:	9301      	str	r3, [sp, #4]
   2e910:	9300      	str	r3, [sp, #0]
   2e912:	463b      	mov	r3, r7
   2e914:	f10d 020f 	add.w	r2, sp, #15
   2e918:	f10d 010e 	add.w	r1, sp, #14
   2e91c:	4620      	mov	r0, r4
   2e91e:	f00e fe3e 	bl	3d59e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   2e922:	4a39      	ldr	r2, [pc, #228]	; (2ea08 <nrfx_gpiote_input_configure+0x11c>)
   2e924:	f104 0108 	add.w	r1, r4, #8
   2e928:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2e92c:	f023 0302 	bic.w	r3, r3, #2
   2e930:	b29b      	uxth	r3, r3
   2e932:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   2e936:	f043 0301 	orr.w	r3, r3, #1
   2e93a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   2e93e:	b1bd      	cbz	r5, 2e970 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2e940:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2e942:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
   2e946:	4620      	mov	r0, r4
   2e948:	f7ff fe04 	bl	2e554 <pin_is_output>
   2e94c:	b1e0      	cbz	r0, 2e988 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
   2e94e:	f1b8 0f00 	cmp.w	r8, #0
   2e952:	d153      	bne.n	2e9fc <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2e954:	4a2c      	ldr	r2, [pc, #176]	; (2ea08 <nrfx_gpiote_input_configure+0x11c>)
   2e956:	f104 0108 	add.w	r1, r4, #8
   2e95a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2e95e:	f023 031c 	bic.w	r3, r3, #28
   2e962:	b29b      	uxth	r3, r3
   2e964:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   2e968:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
   2e96c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   2e970:	2e00      	cmp	r6, #0
   2e972:	d047      	beq.n	2ea04 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   2e974:	6872      	ldr	r2, [r6, #4]
   2e976:	6831      	ldr	r1, [r6, #0]
   2e978:	4620      	mov	r0, r4
   2e97a:	f7ff ff17 	bl	2e7ac <pin_handler_set>
}
   2e97e:	b004      	add	sp, #16
   2e980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
   2e984:	4821      	ldr	r0, [pc, #132]	; (2ea0c <nrfx_gpiote_input_configure+0x120>)
   2e986:	e7fa      	b.n	2e97e <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   2e988:	4a1f      	ldr	r2, [pc, #124]	; (2ea08 <nrfx_gpiote_input_configure+0x11c>)
   2e98a:	f104 0108 	add.w	r1, r4, #8
   2e98e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2e992:	f023 0320 	bic.w	r3, r3, #32
   2e996:	04db      	lsls	r3, r3, #19
   2e998:	0cdb      	lsrs	r3, r3, #19
   2e99a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
   2e99e:	f1b8 0f00 	cmp.w	r8, #0
   2e9a2:	d0d7      	beq.n	2e954 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
   2e9a4:	2f03      	cmp	r7, #3
   2e9a6:	d82b      	bhi.n	2ea00 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2e9a8:	686b      	ldr	r3, [r5, #4]
   2e9aa:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2e9ac:	b947      	cbnz	r7, 2e9c0 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
   2e9ae:	4b18      	ldr	r3, [pc, #96]	; (2ea10 <nrfx_gpiote_input_configure+0x124>)
   2e9b0:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   2e9b4:	2200      	movs	r2, #0
   2e9b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
   2e9ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
}
   2e9be:	e7c9      	b.n	2e954 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   2e9c0:	4638      	mov	r0, r7
   2e9c2:	f00e fdc0 	bl	3d546 <gpiote_trigger_to_polarity>
   2e9c6:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2e9c8:	4811      	ldr	r0, [pc, #68]	; (2ea10 <nrfx_gpiote_input_configure+0x124>)
   2e9ca:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   2e9ce:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   2e9d2:	f022 0203 	bic.w	r2, r2, #3
   2e9d6:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
   2e9da:	4622      	mov	r2, r4
   2e9dc:	4629      	mov	r1, r5
   2e9de:	f00e fd51 	bl	3d484 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2e9e2:	4a09      	ldr	r2, [pc, #36]	; (2ea08 <nrfx_gpiote_input_configure+0x11c>)
   2e9e4:	f104 0108 	add.w	r1, r4, #8
   2e9e8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2e9ec:	036d      	lsls	r5, r5, #13
   2e9ee:	b2ad      	uxth	r5, r5
   2e9f0:	432b      	orrs	r3, r5
   2e9f2:	f043 0320 	orr.w	r3, r3, #32
   2e9f6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   2e9fa:	e7ab      	b.n	2e954 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
   2e9fc:	4803      	ldr	r0, [pc, #12]	; (2ea0c <nrfx_gpiote_input_configure+0x120>)
   2e9fe:	e7be      	b.n	2e97e <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
   2ea00:	4802      	ldr	r0, [pc, #8]	; (2ea0c <nrfx_gpiote_input_configure+0x120>)
   2ea02:	e7bc      	b.n	2e97e <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
   2ea04:	4803      	ldr	r0, [pc, #12]	; (2ea14 <nrfx_gpiote_input_configure+0x128>)
   2ea06:	e7ba      	b.n	2e97e <nrfx_gpiote_input_configure+0x92>
   2ea08:	2000877c 	.word	0x2000877c
   2ea0c:	0bad0004 	.word	0x0bad0004
   2ea10:	4002f000 	.word	0x4002f000
   2ea14:	0bad0000 	.word	0x0bad0000

0002ea18 <nrfx_gpiote_output_configure>:
{
   2ea18:	b570      	push	{r4, r5, r6, lr}
   2ea1a:	b084      	sub	sp, #16
   2ea1c:	4604      	mov	r4, r0
   2ea1e:	4615      	mov	r5, r2
    if (p_config)
   2ea20:	b329      	cbz	r1, 2ea6e <nrfx_gpiote_output_configure+0x56>
   2ea22:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2ea24:	f00e fd87 	bl	3d536 <pin_is_input>
   2ea28:	b120      	cbz	r0, 2ea34 <nrfx_gpiote_output_configure+0x1c>
   2ea2a:	4620      	mov	r0, r4
   2ea2c:	f7ff fd7c 	bl	2e528 <pin_in_use_by_te>
   2ea30:	2800      	cmp	r0, #0
   2ea32:	d13a      	bne.n	2eaaa <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2ea34:	4620      	mov	r0, r4
   2ea36:	f7ff fd81 	bl	2e53c <pin_has_trigger>
   2ea3a:	b110      	cbz	r0, 2ea42 <nrfx_gpiote_output_configure+0x2a>
   2ea3c:	7873      	ldrb	r3, [r6, #1]
   2ea3e:	2b01      	cmp	r3, #1
   2ea40:	d033      	beq.n	2eaaa <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   2ea42:	2301      	movs	r3, #1
   2ea44:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2ea48:	2300      	movs	r3, #0
   2ea4a:	9301      	str	r3, [sp, #4]
   2ea4c:	9600      	str	r6, [sp, #0]
   2ea4e:	1cb3      	adds	r3, r6, #2
   2ea50:	1c72      	adds	r2, r6, #1
   2ea52:	f10d 010f 	add.w	r1, sp, #15
   2ea56:	4620      	mov	r0, r4
   2ea58:	f00e fda1 	bl	3d59e <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2ea5c:	4a20      	ldr	r2, [pc, #128]	; (2eae0 <nrfx_gpiote_output_configure+0xc8>)
   2ea5e:	f104 0108 	add.w	r1, r4, #8
   2ea62:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2ea66:	f043 0303 	orr.w	r3, r3, #3
   2ea6a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   2ea6e:	b395      	cbz	r5, 2ead6 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
   2ea70:	4620      	mov	r0, r4
   2ea72:	f00e fd60 	bl	3d536 <pin_is_input>
   2ea76:	bb80      	cbnz	r0, 2eada <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
   2ea78:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   2ea7a:	4b1a      	ldr	r3, [pc, #104]	; (2eae4 <nrfx_gpiote_output_configure+0xcc>)
   2ea7c:	f506 72a2 	add.w	r2, r6, #324	; 0x144
   2ea80:	2100      	movs	r1, #0
   2ea82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
   2ea86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2ea8a:	4a15      	ldr	r2, [pc, #84]	; (2eae0 <nrfx_gpiote_output_configure+0xc8>)
   2ea8c:	f104 0108 	add.w	r1, r4, #8
   2ea90:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   2ea94:	f023 0320 	bic.w	r3, r3, #32
   2ea98:	04db      	lsls	r3, r3, #19
   2ea9a:	0cdb      	lsrs	r3, r3, #19
   2ea9c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   2eaa0:	786b      	ldrb	r3, [r5, #1]
   2eaa2:	b923      	cbnz	r3, 2eaae <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
   2eaa4:	4810      	ldr	r0, [pc, #64]	; (2eae8 <nrfx_gpiote_output_configure+0xd0>)
}
   2eaa6:	b004      	add	sp, #16
   2eaa8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
   2eaaa:	4810      	ldr	r0, [pc, #64]	; (2eaec <nrfx_gpiote_output_configure+0xd4>)
   2eaac:	e7fb      	b.n	2eaa6 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
   2eaae:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   2eab0:	9200      	str	r2, [sp, #0]
   2eab2:	4622      	mov	r2, r4
   2eab4:	4631      	mov	r1, r6
   2eab6:	480b      	ldr	r0, [pc, #44]	; (2eae4 <nrfx_gpiote_output_configure+0xcc>)
   2eab8:	f00e fcfd 	bl	3d4b6 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2eabc:	4a08      	ldr	r2, [pc, #32]	; (2eae0 <nrfx_gpiote_output_configure+0xc8>)
   2eabe:	3408      	adds	r4, #8
   2eac0:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
   2eac4:	0376      	lsls	r6, r6, #13
   2eac6:	b2b6      	uxth	r6, r6
   2eac8:	4333      	orrs	r3, r6
   2eaca:	f043 0320 	orr.w	r3, r3, #32
   2eace:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
   2ead2:	4805      	ldr	r0, [pc, #20]	; (2eae8 <nrfx_gpiote_output_configure+0xd0>)
   2ead4:	e7e7      	b.n	2eaa6 <nrfx_gpiote_output_configure+0x8e>
   2ead6:	4804      	ldr	r0, [pc, #16]	; (2eae8 <nrfx_gpiote_output_configure+0xd0>)
   2ead8:	e7e5      	b.n	2eaa6 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
   2eada:	4804      	ldr	r0, [pc, #16]	; (2eaec <nrfx_gpiote_output_configure+0xd4>)
   2eadc:	e7e3      	b.n	2eaa6 <nrfx_gpiote_output_configure+0x8e>
   2eade:	bf00      	nop
   2eae0:	2000877c 	.word	0x2000877c
   2eae4:	4002f000 	.word	0x4002f000
   2eae8:	0bad0000 	.word	0x0bad0000
   2eaec:	0bad0004 	.word	0x0bad0004

0002eaf0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2eaf0:	4b01      	ldr	r3, [pc, #4]	; (2eaf8 <nrfx_gpiote_global_callback_set+0x8>)
   2eaf2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   2eaf4:	60d9      	str	r1, [r3, #12]
}
   2eaf6:	4770      	bx	lr
   2eaf8:	2000877c 	.word	0x2000877c

0002eafc <nrfx_gpiote_channel_get>:
{
   2eafc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_channel);
   2eafe:	b161      	cbz	r1, 2eb1a <nrfx_gpiote_channel_get+0x1e>
   2eb00:	4604      	mov	r4, r0
   2eb02:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   2eb04:	f7ff fd10 	bl	2e528 <pin_in_use_by_te>
   2eb08:	b1a0      	cbz	r0, 2eb34 <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2eb0a:	3408      	adds	r4, #8
   2eb0c:	4b0a      	ldr	r3, [pc, #40]	; (2eb38 <nrfx_gpiote_channel_get+0x3c>)
   2eb0e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   2eb12:	0b5b      	lsrs	r3, r3, #13
   2eb14:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   2eb16:	4809      	ldr	r0, [pc, #36]	; (2eb3c <nrfx_gpiote_channel_get+0x40>)
   2eb18:	e00d      	b.n	2eb36 <nrfx_gpiote_channel_get+0x3a>
    NRFX_ASSERT(p_channel);
   2eb1a:	4c09      	ldr	r4, [pc, #36]	; (2eb40 <nrfx_gpiote_channel_get+0x44>)
   2eb1c:	f240 2335 	movw	r3, #565	; 0x235
   2eb20:	4622      	mov	r2, r4
   2eb22:	4908      	ldr	r1, [pc, #32]	; (2eb44 <nrfx_gpiote_channel_get+0x48>)
   2eb24:	4808      	ldr	r0, [pc, #32]	; (2eb48 <nrfx_gpiote_channel_get+0x4c>)
   2eb26:	f007 fbb5 	bl	36294 <assert_print>
   2eb2a:	f240 2135 	movw	r1, #565	; 0x235
   2eb2e:	4620      	mov	r0, r4
   2eb30:	f007 fba9 	bl	36286 <assert_post_action>
        return NRFX_ERROR_INVALID_PARAM;
   2eb34:	4805      	ldr	r0, [pc, #20]	; (2eb4c <nrfx_gpiote_channel_get+0x50>)
}
   2eb36:	bd38      	pop	{r3, r4, r5, pc}
   2eb38:	2000877c 	.word	0x2000877c
   2eb3c:	0bad0000 	.word	0x0bad0000
   2eb40:	00045688 	.word	0x00045688
   2eb44:	0004570c 	.word	0x0004570c
   2eb48:	0003f72c 	.word	0x0003f72c
   2eb4c:	0bad0004 	.word	0x0bad0004

0002eb50 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2eb50:	4b0f      	ldr	r3, [pc, #60]	; (2eb90 <nrfx_gpiote_init+0x40>)
   2eb52:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
   2eb56:	b10b      	cbz	r3, 2eb5c <nrfx_gpiote_init+0xc>
        return err_code;
   2eb58:	480e      	ldr	r0, [pc, #56]	; (2eb94 <nrfx_gpiote_init+0x44>)
}
   2eb5a:	4770      	bx	lr
{
   2eb5c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2eb5e:	4c0e      	ldr	r4, [pc, #56]	; (2eb98 <nrfx_gpiote_init+0x48>)
   2eb60:	2260      	movs	r2, #96	; 0x60
   2eb62:	2100      	movs	r1, #0
   2eb64:	4620      	mov	r0, r4
   2eb66:	f009 fc77 	bl	38458 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2eb6a:	202f      	movs	r0, #47	; 0x2f
   2eb6c:	f009 fa9e 	bl	380ac <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2eb70:	4b0a      	ldr	r3, [pc, #40]	; (2eb9c <nrfx_gpiote_init+0x4c>)
   2eb72:	2200      	movs	r2, #0
   2eb74:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   2eb78:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2eb7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2eb80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2eb84:	2301      	movs	r3, #1
   2eb86:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2eb8a:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
   2eb8c:	4804      	ldr	r0, [pc, #16]	; (2eba0 <nrfx_gpiote_init+0x50>)
}
   2eb8e:	bd10      	pop	{r4, pc}
   2eb90:	2000877c 	.word	0x2000877c
   2eb94:	0bad0005 	.word	0x0bad0005
   2eb98:	2000878c 	.word	0x2000878c
   2eb9c:	4002f000 	.word	0x4002f000
   2eba0:	0bad0000 	.word	0x0bad0000

0002eba4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2eba4:	4b03      	ldr	r3, [pc, #12]	; (2ebb4 <nrfx_gpiote_is_init+0x10>)
   2eba6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2ebaa:	3800      	subs	r0, #0
   2ebac:	bf18      	it	ne
   2ebae:	2001      	movne	r0, #1
   2ebb0:	4770      	bx	lr
   2ebb2:	bf00      	nop
   2ebb4:	2000877c 	.word	0x2000877c

0002ebb8 <nrfx_gpiote_channel_free>:
{
   2ebb8:	b508      	push	{r3, lr}
   2ebba:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2ebbc:	4801      	ldr	r0, [pc, #4]	; (2ebc4 <nrfx_gpiote_channel_free+0xc>)
   2ebbe:	f7ff fa41 	bl	2e044 <nrfx_flag32_free>
}
   2ebc2:	bd08      	pop	{r3, pc}
   2ebc4:	200087ec 	.word	0x200087ec

0002ebc8 <nrfx_gpiote_channel_alloc>:
{
   2ebc8:	b508      	push	{r3, lr}
   2ebca:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2ebcc:	4801      	ldr	r0, [pc, #4]	; (2ebd4 <nrfx_gpiote_channel_alloc+0xc>)
   2ebce:	f7ff fa15 	bl	2dffc <nrfx_flag32_alloc>
}
   2ebd2:	bd08      	pop	{r3, pc}
   2ebd4:	200087ec 	.word	0x200087ec

0002ebd8 <nrfx_gpiote_trigger_enable>:
{
   2ebd8:	b538      	push	{r3, r4, r5, lr}
   2ebda:	4604      	mov	r4, r0
   2ebdc:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2ebde:	f7ff fcad 	bl	2e53c <pin_has_trigger>
   2ebe2:	b180      	cbz	r0, 2ec06 <nrfx_gpiote_trigger_enable+0x2e>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2ebe4:	4620      	mov	r0, r4
   2ebe6:	f7ff fc9f 	bl	2e528 <pin_in_use_by_te>
   2ebea:	b118      	cbz	r0, 2ebf4 <nrfx_gpiote_trigger_enable+0x1c>
   2ebec:	4620      	mov	r0, r4
   2ebee:	f00e fca2 	bl	3d536 <pin_is_input>
   2ebf2:	b9a8      	cbnz	r0, 2ec20 <nrfx_gpiote_trigger_enable+0x48>
        NRFX_ASSERT(int_enable);
   2ebf4:	b38d      	cbz	r5, 2ec5a <nrfx_gpiote_trigger_enable+0x82>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2ebf6:	4620      	mov	r0, r4
   2ebf8:	f7ff fda4 	bl	2e744 <get_initial_sense>
   2ebfc:	4601      	mov	r1, r0
   2ebfe:	4620      	mov	r0, r4
   2ec00:	f00e fd28 	bl	3d654 <nrf_gpio_cfg_sense_set>
}
   2ec04:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(pin_has_trigger(pin));
   2ec06:	4c1b      	ldr	r4, [pc, #108]	; (2ec74 <nrfx_gpiote_trigger_enable+0x9c>)
   2ec08:	f240 33df 	movw	r3, #991	; 0x3df
   2ec0c:	4622      	mov	r2, r4
   2ec0e:	491a      	ldr	r1, [pc, #104]	; (2ec78 <nrfx_gpiote_trigger_enable+0xa0>)
   2ec10:	481a      	ldr	r0, [pc, #104]	; (2ec7c <nrfx_gpiote_trigger_enable+0xa4>)
   2ec12:	f007 fb3f 	bl	36294 <assert_print>
   2ec16:	f240 31df 	movw	r1, #991	; 0x3df
   2ec1a:	4620      	mov	r0, r4
   2ec1c:	f007 fb33 	bl	36286 <assert_post_action>
        uint8_t ch = pin_te_get(pin);
   2ec20:	4620      	mov	r0, r4
   2ec22:	f7ff fca1 	bl	2e568 <pin_te_get>
   2ec26:	4604      	mov	r4, r0
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   2ec28:	f7ff fda6 	bl	2e778 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   2ec2c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2ec30:	f503 333c 	add.w	r3, r3, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2ec34:	2200      	movs	r2, #0
   2ec36:	601a      	str	r2, [r3, #0]
   2ec38:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   2ec3a:	4a11      	ldr	r2, [pc, #68]	; (2ec80 <nrfx_gpiote_trigger_enable+0xa8>)
   2ec3c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   2ec40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2ec44:	f043 0301 	orr.w	r3, r3, #1
   2ec48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   2ec4c:	2d00      	cmp	r5, #0
   2ec4e:	d0d9      	beq.n	2ec04 <nrfx_gpiote_trigger_enable+0x2c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   2ec50:	2301      	movs	r3, #1
   2ec52:	40a3      	lsls	r3, r4
    p_reg->INTENSET = mask;
   2ec54:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2ec58:	e7d4      	b.n	2ec04 <nrfx_gpiote_trigger_enable+0x2c>
        NRFX_ASSERT(int_enable);
   2ec5a:	4c06      	ldr	r4, [pc, #24]	; (2ec74 <nrfx_gpiote_trigger_enable+0x9c>)
   2ec5c:	f240 33ee 	movw	r3, #1006	; 0x3ee
   2ec60:	4622      	mov	r2, r4
   2ec62:	4908      	ldr	r1, [pc, #32]	; (2ec84 <nrfx_gpiote_trigger_enable+0xac>)
   2ec64:	4805      	ldr	r0, [pc, #20]	; (2ec7c <nrfx_gpiote_trigger_enable+0xa4>)
   2ec66:	f007 fb15 	bl	36294 <assert_print>
   2ec6a:	f240 31ee 	movw	r1, #1006	; 0x3ee
   2ec6e:	4620      	mov	r0, r4
   2ec70:	f007 fb09 	bl	36286 <assert_post_action>
   2ec74:	00045688 	.word	0x00045688
   2ec78:	00045718 	.word	0x00045718
   2ec7c:	0003f72c 	.word	0x0003f72c
   2ec80:	4002f000 	.word	0x4002f000
   2ec84:	00045730 	.word	0x00045730

0002ec88 <nrfx_gpiote_trigger_disable>:
{
   2ec88:	b510      	push	{r4, lr}
   2ec8a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2ec8c:	f7ff fc4c 	bl	2e528 <pin_in_use_by_te>
   2ec90:	b1a0      	cbz	r0, 2ecbc <nrfx_gpiote_trigger_disable+0x34>
   2ec92:	4620      	mov	r0, r4
   2ec94:	f00e fc4f 	bl	3d536 <pin_is_input>
   2ec98:	b180      	cbz	r0, 2ecbc <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   2ec9a:	4620      	mov	r0, r4
   2ec9c:	f7ff fc64 	bl	2e568 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2eca0:	2201      	movs	r2, #1
   2eca2:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   2eca4:	4b08      	ldr	r3, [pc, #32]	; (2ecc8 <nrfx_gpiote_trigger_disable+0x40>)
   2eca6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2ecaa:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   2ecae:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   2ecb2:	f022 0203 	bic.w	r2, r2, #3
   2ecb6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   2ecba:	e003      	b.n	2ecc4 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2ecbc:	2100      	movs	r1, #0
   2ecbe:	4620      	mov	r0, r4
   2ecc0:	f00e fcc8 	bl	3d654 <nrf_gpio_cfg_sense_set>
}
   2ecc4:	bd10      	pop	{r4, pc}
   2ecc6:	bf00      	nop
   2ecc8:	4002f000 	.word	0x4002f000

0002eccc <nrfx_gpiote_pin_uninit>:
{
   2eccc:	b510      	push	{r4, lr}
   2ecce:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   2ecd0:	f7ff fc20 	bl	2e514 <pin_in_use>
   2ecd4:	b908      	cbnz	r0, 2ecda <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   2ecd6:	4806      	ldr	r0, [pc, #24]	; (2ecf0 <nrfx_gpiote_pin_uninit+0x24>)
}
   2ecd8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   2ecda:	4620      	mov	r0, r4
   2ecdc:	f7ff ffd4 	bl	2ec88 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2ece0:	4620      	mov	r0, r4
   2ece2:	f7ff fcd9 	bl	2e698 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
   2ece6:	4620      	mov	r0, r4
   2ece8:	f00e fc46 	bl	3d578 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
   2ecec:	4801      	ldr	r0, [pc, #4]	; (2ecf4 <nrfx_gpiote_pin_uninit+0x28>)
   2ecee:	e7f3      	b.n	2ecd8 <nrfx_gpiote_pin_uninit+0xc>
   2ecf0:	0bad0004 	.word	0x0bad0004
   2ecf4:	0bad0000 	.word	0x0bad0000

0002ecf8 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   2ecf8:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   2ecfa:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   2ecfc:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2ed00:	2100      	movs	r1, #0
    uint32_t status = 0;
   2ed02:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2ed04:	e003      	b.n	2ed0e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   2ed06:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   2ed08:	3304      	adds	r3, #4
   2ed0a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2ed0c:	3101      	adds	r1, #1
   2ed0e:	2907      	cmp	r1, #7
   2ed10:	d814      	bhi.n	2ed3c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ed12:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2ed16:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
   2ed1a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2ed1c:	2a00      	cmp	r2, #0
   2ed1e:	d0f2      	beq.n	2ed06 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   2ed20:	4a0c      	ldr	r2, [pc, #48]	; (2ed54 <nrfx_gpiote_irq_handler+0x5c>)
   2ed22:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   2ed26:	4210      	tst	r0, r2
   2ed28:	d0ed      	beq.n	2ed06 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   2ed2a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2ed2e:	f502 323c 	add.w	r2, r2, #192512	; 0x2f000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2ed32:	2500      	movs	r5, #0
   2ed34:	6015      	str	r5, [r2, #0]
   2ed36:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   2ed38:	4304      	orrs	r4, r0
   2ed3a:	e7e4      	b.n	2ed06 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2ed3c:	4b05      	ldr	r3, [pc, #20]	; (2ed54 <nrfx_gpiote_irq_handler+0x5c>)
   2ed3e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2ed42:	b91b      	cbnz	r3, 2ed4c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   2ed44:	4620      	mov	r0, r4
   2ed46:	f7ff fdaf 	bl	2e8a8 <gpiote_evt_handle>
}
   2ed4a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   2ed4c:	f7ff fd64 	bl	2e818 <port_event_handle>
   2ed50:	e7f8      	b.n	2ed44 <nrfx_gpiote_irq_handler+0x4c>
   2ed52:	bf00      	nop
   2ed54:	4002f000 	.word	0x4002f000

0002ed58 <nrf_ipc_receive_event_get>:
    NRFX_ASSERT(index < IPC_CH_NUM);
   2ed58:	280f      	cmp	r0, #15
   2ed5a:	d803      	bhi.n	2ed64 <nrf_ipc_receive_event_get+0xc>
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   2ed5c:	0080      	lsls	r0, r0, #2
}
   2ed5e:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2ed62:	4770      	bx	lr
{
   2ed64:	b510      	push	{r4, lr}
    NRFX_ASSERT(index < IPC_CH_NUM);
   2ed66:	4c06      	ldr	r4, [pc, #24]	; (2ed80 <nrf_ipc_receive_event_get+0x28>)
   2ed68:	f240 13e7 	movw	r3, #487	; 0x1e7
   2ed6c:	4622      	mov	r2, r4
   2ed6e:	4905      	ldr	r1, [pc, #20]	; (2ed84 <nrf_ipc_receive_event_get+0x2c>)
   2ed70:	4805      	ldr	r0, [pc, #20]	; (2ed88 <nrf_ipc_receive_event_get+0x30>)
   2ed72:	f007 fa8f 	bl	36294 <assert_print>
   2ed76:	f240 11e7 	movw	r1, #487	; 0x1e7
   2ed7a:	4620      	mov	r0, r4
   2ed7c:	f007 fa83 	bl	36286 <assert_post_action>
   2ed80:	00040c5c 	.word	0x00040c5c
   2ed84:	00040c90 	.word	0x00040c90
   2ed88:	0003f72c 	.word	0x0003f72c

0002ed8c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   2ed8c:	b538      	push	{r3, r4, r5, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2ed8e:	4b08      	ldr	r3, [pc, #32]	; (2edb0 <nrfx_ipc_init+0x24>)
   2ed90:	791b      	ldrb	r3, [r3, #4]
   2ed92:	b10b      	cbz	r3, 2ed98 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
   2ed94:	4807      	ldr	r0, [pc, #28]	; (2edb4 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
   2ed96:	bd38      	pop	{r3, r4, r5, pc}
   2ed98:	460d      	mov	r5, r1
   2ed9a:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
   2ed9c:	202a      	movs	r0, #42	; 0x2a
   2ed9e:	f009 f985 	bl	380ac <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2eda2:	4b03      	ldr	r3, [pc, #12]	; (2edb0 <nrfx_ipc_init+0x24>)
   2eda4:	2201      	movs	r2, #1
   2eda6:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
   2eda8:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
   2edaa:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
   2edac:	4802      	ldr	r0, [pc, #8]	; (2edb8 <nrfx_ipc_init+0x2c>)
   2edae:	e7f2      	b.n	2ed96 <nrfx_ipc_init+0xa>
   2edb0:	2000c4c8 	.word	0x2000c4c8
   2edb4:	0bad000c 	.word	0x0bad000c
   2edb8:	0bad0000 	.word	0x0bad0000

0002edbc <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   2edbc:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
   2edbe:	b130      	cbz	r0, 2edce <nrfx_ipc_config_load+0x12>
   2edc0:	4601      	mov	r1, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2edc2:	4b1e      	ldr	r3, [pc, #120]	; (2ee3c <nrfx_ipc_config_load+0x80>)
   2edc4:	791b      	ldrb	r3, [r3, #4]
   2edc6:	2b01      	cmp	r3, #1
   2edc8:	d10c      	bne.n	2ede4 <nrfx_ipc_config_load+0x28>

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2edca:	2300      	movs	r3, #0
   2edcc:	e01e      	b.n	2ee0c <nrfx_ipc_config_load+0x50>
    NRFX_ASSERT(p_config);
   2edce:	4c1c      	ldr	r4, [pc, #112]	; (2ee40 <nrfx_ipc_config_load+0x84>)
   2edd0:	2345      	movs	r3, #69	; 0x45
   2edd2:	4622      	mov	r2, r4
   2edd4:	491b      	ldr	r1, [pc, #108]	; (2ee44 <nrfx_ipc_config_load+0x88>)
   2edd6:	481c      	ldr	r0, [pc, #112]	; (2ee48 <nrfx_ipc_config_load+0x8c>)
   2edd8:	f007 fa5c 	bl	36294 <assert_print>
   2eddc:	2145      	movs	r1, #69	; 0x45
   2edde:	4620      	mov	r0, r4
   2ede0:	f007 fa51 	bl	36286 <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2ede4:	4c16      	ldr	r4, [pc, #88]	; (2ee40 <nrfx_ipc_config_load+0x84>)
   2ede6:	2346      	movs	r3, #70	; 0x46
   2ede8:	4622      	mov	r2, r4
   2edea:	4918      	ldr	r1, [pc, #96]	; (2ee4c <nrfx_ipc_config_load+0x90>)
   2edec:	4816      	ldr	r0, [pc, #88]	; (2ee48 <nrfx_ipc_config_load+0x8c>)
   2edee:	f007 fa51 	bl	36294 <assert_print>
   2edf2:	2146      	movs	r1, #70	; 0x46
   2edf4:	4620      	mov	r0, r4
   2edf6:	f007 fa46 	bl	36286 <assert_post_action>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   2edfa:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
   2edfe:	b2da      	uxtb	r2, r3
   2ee00:	f502 72a2 	add.w	r2, r2, #324	; 0x144
   2ee04:	4812      	ldr	r0, [pc, #72]	; (2ee50 <nrfx_ipc_config_load+0x94>)
   2ee06:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2ee0a:	3301      	adds	r3, #1
   2ee0c:	2b0f      	cmp	r3, #15
   2ee0e:	d9f4      	bls.n	2edfa <nrfx_ipc_config_load+0x3e>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   2ee10:	2300      	movs	r3, #0
   2ee12:	e00a      	b.n	2ee2a <nrfx_ipc_config_load+0x6e>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   2ee14:	f103 0210 	add.w	r2, r3, #16
   2ee18:	f851 4022 	ldr.w	r4, [r1, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
   2ee1c:	b2da      	uxtb	r2, r3
   2ee1e:	f502 72b2 	add.w	r2, r2, #356	; 0x164
   2ee22:	480b      	ldr	r0, [pc, #44]	; (2ee50 <nrfx_ipc_config_load+0x94>)
   2ee24:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
   2ee28:	3301      	adds	r3, #1
   2ee2a:	2b0f      	cmp	r3, #15
   2ee2c:	d9f2      	bls.n	2ee14 <nrfx_ipc_config_load+0x58>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   2ee2e:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
    p_reg->INTENSET = mask;
   2ee32:	4b07      	ldr	r3, [pc, #28]	; (2ee50 <nrfx_ipc_config_load+0x94>)
   2ee34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2ee38:	bd10      	pop	{r4, pc}
   2ee3a:	bf00      	nop
   2ee3c:	2000c4c8 	.word	0x2000c4c8
   2ee40:	00045748 	.word	0x00045748
   2ee44:	00045784 	.word	0x00045784
   2ee48:	0003f72c 	.word	0x0003f72c
   2ee4c:	00045790 	.word	0x00045790
   2ee50:	4002a000 	.word	0x4002a000

0002ee54 <nrfx_ipc_receive_event_enable>:
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2ee54:	4b0a      	ldr	r3, [pc, #40]	; (2ee80 <nrfx_ipc_receive_event_enable+0x2c>)
   2ee56:	791b      	ldrb	r3, [r3, #4]
   2ee58:	2b01      	cmp	r3, #1
   2ee5a:	d105      	bne.n	2ee68 <nrfx_ipc_receive_event_enable+0x14>
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   2ee5c:	2301      	movs	r3, #1
   2ee5e:	4083      	lsls	r3, r0
   2ee60:	4a08      	ldr	r2, [pc, #32]	; (2ee84 <nrfx_ipc_receive_event_enable+0x30>)
   2ee62:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
   2ee66:	4770      	bx	lr
{
   2ee68:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2ee6a:	4c07      	ldr	r4, [pc, #28]	; (2ee88 <nrfx_ipc_receive_event_enable+0x34>)
   2ee6c:	236b      	movs	r3, #107	; 0x6b
   2ee6e:	4622      	mov	r2, r4
   2ee70:	4906      	ldr	r1, [pc, #24]	; (2ee8c <nrfx_ipc_receive_event_enable+0x38>)
   2ee72:	4807      	ldr	r0, [pc, #28]	; (2ee90 <nrfx_ipc_receive_event_enable+0x3c>)
   2ee74:	f007 fa0e 	bl	36294 <assert_print>
   2ee78:	216b      	movs	r1, #107	; 0x6b
   2ee7a:	4620      	mov	r0, r4
   2ee7c:	f007 fa03 	bl	36286 <assert_post_action>
   2ee80:	2000c4c8 	.word	0x2000c4c8
   2ee84:	4002a000 	.word	0x4002a000
   2ee88:	00045748 	.word	0x00045748
   2ee8c:	00045790 	.word	0x00045790
   2ee90:	0003f72c 	.word	0x0003f72c

0002ee94 <nrfx_ipc_receive_event_disable>:
}

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2ee94:	4b0a      	ldr	r3, [pc, #40]	; (2eec0 <nrfx_ipc_receive_event_disable+0x2c>)
   2ee96:	791b      	ldrb	r3, [r3, #4]
   2ee98:	2b01      	cmp	r3, #1
   2ee9a:	d105      	bne.n	2eea8 <nrfx_ipc_receive_event_disable+0x14>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   2ee9c:	2301      	movs	r3, #1
   2ee9e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   2eea0:	4a08      	ldr	r2, [pc, #32]	; (2eec4 <nrfx_ipc_receive_event_disable+0x30>)
   2eea2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   2eea6:	4770      	bx	lr
{
   2eea8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   2eeaa:	4c07      	ldr	r4, [pc, #28]	; (2eec8 <nrfx_ipc_receive_event_disable+0x34>)
   2eeac:	2371      	movs	r3, #113	; 0x71
   2eeae:	4622      	mov	r2, r4
   2eeb0:	4906      	ldr	r1, [pc, #24]	; (2eecc <nrfx_ipc_receive_event_disable+0x38>)
   2eeb2:	4807      	ldr	r0, [pc, #28]	; (2eed0 <nrfx_ipc_receive_event_disable+0x3c>)
   2eeb4:	f007 f9ee 	bl	36294 <assert_print>
   2eeb8:	2171      	movs	r1, #113	; 0x71
   2eeba:	4620      	mov	r0, r4
   2eebc:	f007 f9e3 	bl	36286 <assert_post_action>
   2eec0:	2000c4c8 	.word	0x2000c4c8
   2eec4:	4002a000 	.word	0x4002a000
   2eec8:	00045748 	.word	0x00045748
   2eecc:	00045790 	.word	0x00045790
   2eed0:	0003f72c 	.word	0x0003f72c

0002eed4 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   2eed4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->INTPEND;
   2eed6:	4b10      	ldr	r3, [pc, #64]	; (2ef18 <nrfx_ipc_irq_handler+0x44>)
   2eed8:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
    // Clear these events
    uint32_t bitmask = events_map;

    while (bitmask)
   2eedc:	e003      	b.n	2eee6 <nrfx_ipc_irq_handler+0x12>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
        {
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
   2eede:	4a0f      	ldr	r2, [pc, #60]	; (2ef1c <nrfx_ipc_irq_handler+0x48>)
   2eee0:	6891      	ldr	r1, [r2, #8]
   2eee2:	4628      	mov	r0, r5
   2eee4:	4798      	blx	r3
    while (bitmask)
   2eee6:	b1ac      	cbz	r4, 2ef14 <nrfx_ipc_irq_handler+0x40>
        uint8_t event_idx = NRF_CTZ(bitmask);
   2eee8:	fa94 f5a4 	rbit	r5, r4
   2eeec:	fab5 f585 	clz	r5, r5
        bitmask &= ~(1UL << event_idx);
   2eef0:	2301      	movs	r3, #1
   2eef2:	40ab      	lsls	r3, r5
   2eef4:	ea24 0403 	bic.w	r4, r4, r3
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
   2eef8:	4628      	mov	r0, r5
   2eefa:	f7ff ff2d 	bl	2ed58 <nrf_ipc_receive_event_get>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2eefe:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   2ef02:	f500 3028 	add.w	r0, r0, #172032	; 0x2a000
   2ef06:	2300      	movs	r3, #0
   2ef08:	6003      	str	r3, [r0, #0]
        if (m_ipc_cb.handler)
   2ef0a:	4b04      	ldr	r3, [pc, #16]	; (2ef1c <nrfx_ipc_irq_handler+0x48>)
   2ef0c:	681b      	ldr	r3, [r3, #0]
   2ef0e:	2b00      	cmp	r3, #0
   2ef10:	d1e5      	bne.n	2eede <nrfx_ipc_irq_handler+0xa>
   2ef12:	e7e8      	b.n	2eee6 <nrfx_ipc_irq_handler+0x12>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
   2ef14:	bd38      	pop	{r3, r4, r5, pc}
   2ef16:	bf00      	nop
   2ef18:	4002a000 	.word	0x4002a000
   2ef1c:	2000c4c8 	.word	0x2000c4c8

0002ef20 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   2ef20:	4b02      	ldr	r3, [pc, #8]	; (2ef2c <nvmc_readonly_mode_set+0xc>)
   2ef22:	2200      	movs	r2, #0
   2ef24:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
   2ef28:	4770      	bx	lr
   2ef2a:	bf00      	nop
   2ef2c:	40039000 	.word	0x40039000

0002ef30 <nvmc_write_mode_set>:
   2ef30:	4b02      	ldr	r3, [pc, #8]	; (2ef3c <nvmc_write_mode_set+0xc>)
   2ef32:	2201      	movs	r2, #1
   2ef34:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
   2ef38:	4770      	bx	lr
   2ef3a:	bf00      	nop
   2ef3c:	40039000 	.word	0x40039000

0002ef40 <nvmc_erase_mode_set>:
   2ef40:	4b02      	ldr	r3, [pc, #8]	; (2ef4c <nvmc_erase_mode_set+0xc>)
   2ef42:	2202      	movs	r2, #2
   2ef44:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
   2ef48:	4770      	bx	lr
   2ef4a:	bf00      	nop
   2ef4c:	40039000 	.word	0x40039000

0002ef50 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2ef50:	4b04      	ldr	r3, [pc, #16]	; (2ef64 <nvmc_word_write+0x14>)
   2ef52:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2ef56:	f013 0f01 	tst.w	r3, #1
   2ef5a:	d0f9      	beq.n	2ef50 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   2ef5c:	6001      	str	r1, [r0, #0]
   2ef5e:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   2ef62:	4770      	bx	lr
   2ef64:	40039000 	.word	0x40039000

0002ef68 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   2ef68:	b510      	push	{r4, lr}
   2ef6a:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2ef6c:	f00e fbe5 	bl	3d73a <flash_total_size_get>
   2ef70:	4284      	cmp	r4, r0
   2ef72:	d30c      	bcc.n	2ef8e <nrfx_nvmc_page_erase+0x26>
    NRFX_ASSERT(is_valid_address(addr, false));
   2ef74:	4c10      	ldr	r4, [pc, #64]	; (2efb8 <nrfx_nvmc_page_erase+0x50>)
   2ef76:	f44f 7383 	mov.w	r3, #262	; 0x106
   2ef7a:	4622      	mov	r2, r4
   2ef7c:	490f      	ldr	r1, [pc, #60]	; (2efbc <nrfx_nvmc_page_erase+0x54>)
   2ef7e:	4810      	ldr	r0, [pc, #64]	; (2efc0 <nrfx_nvmc_page_erase+0x58>)
   2ef80:	f007 f988 	bl	36294 <assert_print>
   2ef84:	f44f 7183 	mov.w	r1, #262	; 0x106
   2ef88:	4620      	mov	r0, r4
   2ef8a:	f007 f97c 	bl	36286 <assert_post_action>

    if (!is_page_aligned_check(addr))
   2ef8e:	4620      	mov	r0, r4
   2ef90:	f00e fbdc 	bl	3d74c <is_page_aligned_check>
   2ef94:	b908      	cbnz	r0, 2ef9a <nrfx_nvmc_page_erase+0x32>
    {
        return NRFX_ERROR_INVALID_ADDR;
   2ef96:	480b      	ldr	r0, [pc, #44]	; (2efc4 <nrfx_nvmc_page_erase+0x5c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
   2ef98:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
   2ef9a:	f7ff ffd1 	bl	2ef40 <nvmc_erase_mode_set>
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   2ef9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2efa2:	6023      	str	r3, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   2efa4:	4b08      	ldr	r3, [pc, #32]	; (2efc8 <nrfx_nvmc_page_erase+0x60>)
   2efa6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   2efaa:	f013 0f01 	tst.w	r3, #1
   2efae:	d0f9      	beq.n	2efa4 <nrfx_nvmc_page_erase+0x3c>
    nvmc_readonly_mode_set();
   2efb0:	f7ff ffb6 	bl	2ef20 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
   2efb4:	4805      	ldr	r0, [pc, #20]	; (2efcc <nrfx_nvmc_page_erase+0x64>)
   2efb6:	e7ef      	b.n	2ef98 <nrfx_nvmc_page_erase+0x30>
   2efb8:	000457c0 	.word	0x000457c0
   2efbc:	0004581c 	.word	0x0004581c
   2efc0:	0003f72c 	.word	0x0003f72c
   2efc4:	0bad000a 	.word	0x0bad000a
   2efc8:	40039000 	.word	0x40039000
   2efcc:	0bad0000 	.word	0x0bad0000

0002efd0 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   2efd0:	b538      	push	{r3, r4, r5, lr}
   2efd2:	4604      	mov	r4, r0
   2efd4:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   2efd6:	f00e fbb0 	bl	3d73a <flash_total_size_get>
   2efda:	4284      	cmp	r4, r0
   2efdc:	d30c      	bcc.n	2eff8 <nrfx_nvmc_word_write+0x28>
    NRFX_ASSERT(is_valid_address(addr, true));
   2efde:	4c13      	ldr	r4, [pc, #76]	; (2f02c <nrfx_nvmc_word_write+0x5c>)
   2efe0:	f44f 73ca 	mov.w	r3, #404	; 0x194
   2efe4:	4622      	mov	r2, r4
   2efe6:	4912      	ldr	r1, [pc, #72]	; (2f030 <nrfx_nvmc_word_write+0x60>)
   2efe8:	4812      	ldr	r0, [pc, #72]	; (2f034 <nrfx_nvmc_word_write+0x64>)
   2efea:	f007 f953 	bl	36294 <assert_print>
   2efee:	f44f 71ca 	mov.w	r1, #404	; 0x194
   2eff2:	4620      	mov	r0, r4
   2eff4:	f007 f947 	bl	36286 <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2eff8:	f014 0f03 	tst.w	r4, #3
   2effc:	d108      	bne.n	2f010 <nrfx_nvmc_word_write+0x40>

    nvmc_write_mode_set();
   2effe:	f7ff ff97 	bl	2ef30 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   2f002:	4629      	mov	r1, r5
   2f004:	4620      	mov	r0, r4
   2f006:	f7ff ffa3 	bl	2ef50 <nvmc_word_write>

    nvmc_readonly_mode_set();
   2f00a:	f7ff ff89 	bl	2ef20 <nvmc_readonly_mode_set>
}
   2f00e:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   2f010:	4c06      	ldr	r4, [pc, #24]	; (2f02c <nrfx_nvmc_word_write+0x5c>)
   2f012:	f240 1395 	movw	r3, #405	; 0x195
   2f016:	4622      	mov	r2, r4
   2f018:	4907      	ldr	r1, [pc, #28]	; (2f038 <nrfx_nvmc_word_write+0x68>)
   2f01a:	4806      	ldr	r0, [pc, #24]	; (2f034 <nrfx_nvmc_word_write+0x64>)
   2f01c:	f007 f93a 	bl	36294 <assert_print>
   2f020:	f240 1195 	movw	r1, #405	; 0x195
   2f024:	4620      	mov	r0, r4
   2f026:	f007 f92e 	bl	36286 <assert_post_action>
   2f02a:	bf00      	nop
   2f02c:	000457c0 	.word	0x000457c0
   2f030:	00045838 	.word	0x00045838
   2f034:	0003f72c 	.word	0x0003f72c
   2f038:	00045854 	.word	0x00045854

0002f03c <qspi_event_xfer_handle>:
}
#endif

static void qspi_event_xfer_handle(nrfx_qspi_evt_ext_xfer_t * p_xfer)
{
    p_xfer->p_buffer = (uint8_t *)m_cb.p_buffer_primary;
   2f03c:	4b0a      	ldr	r3, [pc, #40]	; (2f068 <qspi_event_xfer_handle+0x2c>)
   2f03e:	689a      	ldr	r2, [r3, #8]
   2f040:	6002      	str	r2, [r0, #0]
    p_xfer->size     = m_cb.size_primary;
   2f042:	691a      	ldr	r2, [r3, #16]
   2f044:	6042      	str	r2, [r0, #4]
    p_xfer->addr     = m_cb.addr_primary;
   2f046:	699a      	ldr	r2, [r3, #24]
   2f048:	6082      	str	r2, [r0, #8]
    if (m_cb.p_buffer_secondary)
   2f04a:	68da      	ldr	r2, [r3, #12]
   2f04c:	b13a      	cbz	r2, 2f05e <qspi_event_xfer_handle+0x22>
    {
        m_cb.p_buffer_primary = m_cb.p_buffer_secondary;
   2f04e:	609a      	str	r2, [r3, #8]
        m_cb.size_primary     = m_cb.size_secondary;
   2f050:	695a      	ldr	r2, [r3, #20]
   2f052:	611a      	str	r2, [r3, #16]
        m_cb.addr_primary     = m_cb.addr_secondary;
   2f054:	69da      	ldr	r2, [r3, #28]
   2f056:	619a      	str	r2, [r3, #24]

        m_cb.p_buffer_secondary = NULL;
   2f058:	2200      	movs	r2, #0
   2f05a:	60da      	str	r2, [r3, #12]
   2f05c:	4770      	bx	lr
    }
    else
    {
        m_cb.p_buffer_primary = NULL;
   2f05e:	4b02      	ldr	r3, [pc, #8]	; (2f068 <qspi_event_xfer_handle+0x2c>)
   2f060:	2200      	movs	r2, #0
   2f062:	609a      	str	r2, [r3, #8]
    }
}
   2f064:	4770      	bx	lr
   2f066:	bf00      	nop
   2f068:	2000c4d4 	.word	0x2000c4d4

0002f06c <qspi_event_erase_handle>:
    p_reg->ERASE.LEN = len;
}

NRF_STATIC_INLINE uint32_t nrf_qspi_erase_ptr_get(NRF_QSPI_Type const * p_reg)
{
    return p_reg->ERASE.PTR;
   2f06c:	4b03      	ldr	r3, [pc, #12]	; (2f07c <qspi_event_erase_handle+0x10>)
   2f06e:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c

static void qspi_event_erase_handle(nrfx_qspi_evt_ext_erase_t * p_erase)
{
    p_erase->addr = nrf_qspi_erase_ptr_get(NRF_QSPI);
   2f072:	6002      	str	r2, [r0, #0]
}

NRF_STATIC_INLINE nrf_qspi_erase_len_t nrf_qspi_erase_len_get(NRF_QSPI_Type const * p_reg)
{
    return (nrf_qspi_erase_len_t)p_reg->ERASE.LEN;
   2f074:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    p_erase->len  = nrf_qspi_erase_len_get(NRF_QSPI);
   2f078:	7103      	strb	r3, [r0, #4]
}
   2f07a:	4770      	bx	lr
   2f07c:	4002b000 	.word	0x4002b000

0002f080 <qspi_extended_event_process>:

static void qspi_extended_event_process(nrfx_qspi_evt_ext_t * p_event)
{
   2f080:	b508      	push	{r3, lr}
    switch (m_cb.state)
   2f082:	4b0e      	ldr	r3, [pc, #56]	; (2f0bc <qspi_extended_event_process+0x3c>)
   2f084:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2f088:	2b03      	cmp	r3, #3
   2f08a:	d00a      	beq.n	2f0a2 <qspi_extended_event_process+0x22>
   2f08c:	2b04      	cmp	r3, #4
   2f08e:	d00e      	beq.n	2f0ae <qspi_extended_event_process+0x2e>
   2f090:	2b02      	cmp	r3, #2
   2f092:	d000      	beq.n	2f096 <qspi_extended_event_process+0x16>
            break;

        default:
            break;
    }
}
   2f094:	bd08      	pop	{r3, pc}
            p_event->type = NRFX_QSPI_EVENT_WRITE_DONE;
   2f096:	2301      	movs	r3, #1
   2f098:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_xfer_handle(&p_event->data.xfer);
   2f09c:	f7ff ffce 	bl	2f03c <qspi_event_xfer_handle>
            break;
   2f0a0:	e7f8      	b.n	2f094 <qspi_extended_event_process+0x14>
            p_event->type = NRFX_QSPI_EVENT_READ_DONE;
   2f0a2:	2302      	movs	r3, #2
   2f0a4:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_xfer_handle(&p_event->data.xfer);
   2f0a8:	f7ff ffc8 	bl	2f03c <qspi_event_xfer_handle>
            break;
   2f0ac:	e7f2      	b.n	2f094 <qspi_extended_event_process+0x14>
            p_event->type = NRFX_QSPI_EVENT_ERASE_DONE;
   2f0ae:	2303      	movs	r3, #3
   2f0b0:	f800 3b04 	strb.w	r3, [r0], #4
            qspi_event_erase_handle(&p_event->data.erase);
   2f0b4:	f7ff ffda 	bl	2f06c <qspi_event_erase_handle>
}
   2f0b8:	e7ec      	b.n	2f094 <qspi_extended_event_process+0x14>
   2f0ba:	bf00      	nop
   2f0bc:	2000c4d4 	.word	0x2000c4d4

0002f0c0 <nrf_gpio_pin_port_decode>:
{
   2f0c0:	b538      	push	{r3, r4, r5, lr}
   2f0c2:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f0c4:	6804      	ldr	r4, [r0, #0]
   2f0c6:	4620      	mov	r0, r4
   2f0c8:	f00e fc16 	bl	3d8f8 <nrf_gpio_pin_present_check>
   2f0cc:	b140      	cbz	r0, 2f0e0 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2f0ce:	f004 031f 	and.w	r3, r4, #31
   2f0d2:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f0d4:	0964      	lsrs	r4, r4, #5
   2f0d6:	d01d      	beq.n	2f114 <nrf_gpio_pin_port_decode+0x54>
   2f0d8:	2c01      	cmp	r4, #1
   2f0da:	d10e      	bne.n	2f0fa <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   2f0dc:	480e      	ldr	r0, [pc, #56]	; (2f118 <nrf_gpio_pin_port_decode+0x58>)
}
   2f0de:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f0e0:	4c0e      	ldr	r4, [pc, #56]	; (2f11c <nrf_gpio_pin_port_decode+0x5c>)
   2f0e2:	f240 2347 	movw	r3, #583	; 0x247
   2f0e6:	4622      	mov	r2, r4
   2f0e8:	490d      	ldr	r1, [pc, #52]	; (2f120 <nrf_gpio_pin_port_decode+0x60>)
   2f0ea:	480e      	ldr	r0, [pc, #56]	; (2f124 <nrf_gpio_pin_port_decode+0x64>)
   2f0ec:	f007 f8d2 	bl	36294 <assert_print>
   2f0f0:	f240 2147 	movw	r1, #583	; 0x247
   2f0f4:	4620      	mov	r0, r4
   2f0f6:	f007 f8c6 	bl	36286 <assert_post_action>
            NRFX_ASSERT(0);
   2f0fa:	4c08      	ldr	r4, [pc, #32]	; (2f11c <nrf_gpio_pin_port_decode+0x5c>)
   2f0fc:	f44f 7313 	mov.w	r3, #588	; 0x24c
   2f100:	4622      	mov	r2, r4
   2f102:	4909      	ldr	r1, [pc, #36]	; (2f128 <nrf_gpio_pin_port_decode+0x68>)
   2f104:	4807      	ldr	r0, [pc, #28]	; (2f124 <nrf_gpio_pin_port_decode+0x64>)
   2f106:	f007 f8c5 	bl	36294 <assert_print>
   2f10a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2f10e:	4620      	mov	r0, r4
   2f110:	f007 f8b9 	bl	36286 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f114:	4805      	ldr	r0, [pc, #20]	; (2f12c <nrf_gpio_pin_port_decode+0x6c>)
   2f116:	e7e2      	b.n	2f0de <nrf_gpio_pin_port_decode+0x1e>
   2f118:	40842800 	.word	0x40842800
   2f11c:	000448c8 	.word	0x000448c8
   2f120:	000448fc 	.word	0x000448fc
   2f124:	0003f72c 	.word	0x0003f72c
   2f128:	0003f964 	.word	0x0003f964
   2f12c:	40842500 	.word	0x40842500

0002f130 <qspi_pins_configure>:
{
   2f130:	b530      	push	{r4, r5, lr}
   2f132:	b083      	sub	sp, #12
   2f134:	4604      	mov	r4, r0
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   2f136:	7cc3      	ldrb	r3, [r0, #19]
   2f138:	b11b      	cbz	r3, 2f142 <qspi_pins_configure+0x12>
   2f13a:	7d00      	ldrb	r0, [r0, #20]
   2f13c:	2800      	cmp	r0, #0
   2f13e:	f040 808e 	bne.w	2f25e <qspi_pins_configure+0x12e>
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2f142:	7922      	ldrb	r2, [r4, #4]
   2f144:	2aff      	cmp	r2, #255	; 0xff
   2f146:	f000 8089 	beq.w	2f25c <qspi_pins_configure+0x12c>
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2f14a:	7961      	ldrb	r1, [r4, #5]
    if ((p_config->pins.sck_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2f14c:	29ff      	cmp	r1, #255	; 0xff
   2f14e:	f000 8088 	beq.w	2f262 <qspi_pins_configure+0x132>
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2f152:	79a1      	ldrb	r1, [r4, #6]
        (p_config->pins.csn_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2f154:	29ff      	cmp	r1, #255	; 0xff
   2f156:	f000 8086 	beq.w	2f266 <qspi_pins_configure+0x136>
        (p_config->pins.io1_pin == NRF_QSPI_PIN_NOT_CONNECTED))
   2f15a:	79e0      	ldrb	r0, [r4, #7]
        (p_config->pins.io0_pin == NRF_QSPI_PIN_NOT_CONNECTED) ||
   2f15c:	28ff      	cmp	r0, #255	; 0xff
   2f15e:	f000 8084 	beq.w	2f26a <qspi_pins_configure+0x13a>
        (p_config->pins.csn_pin != QSPI_CSN_DEDICATED) ||
   2f162:	6861      	ldr	r1, [r4, #4]
   2f164:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    if ((p_config->pins.sck_pin != QSPI_SCK_DEDICATED) ||
   2f168:	4d45      	ldr	r5, [pc, #276]	; (2f280 <qspi_pins_configure+0x150>)
   2f16a:	42a9      	cmp	r1, r5
   2f16c:	d17f      	bne.n	2f26e <qspi_pins_configure+0x13e>
        (p_config->pins.io0_pin != QSPI_IO0_DEDICATED) ||
   2f16e:	280e      	cmp	r0, #14
   2f170:	d17f      	bne.n	2f272 <qspi_pins_configure+0x142>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   2f172:	7a21      	ldrb	r1, [r4, #8]
        (p_config->pins.io1_pin != QSPI_IO1_DEDICATED) ||
   2f174:	29ff      	cmp	r1, #255	; 0xff
   2f176:	d001      	beq.n	2f17c <qspi_pins_configure+0x4c>
        (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   2f178:	290f      	cmp	r1, #15
   2f17a:	d17c      	bne.n	2f276 <qspi_pins_configure+0x146>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   2f17c:	7a61      	ldrb	r1, [r4, #9]
         p_config->pins.io2_pin != QSPI_IO2_DEDICATED) ||
   2f17e:	29ff      	cmp	r1, #255	; 0xff
   2f180:	d001      	beq.n	2f186 <qspi_pins_configure+0x56>
        (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED &&
   2f182:	2910      	cmp	r1, #16
   2f184:	d179      	bne.n	2f27a <qspi_pins_configure+0x14a>
    if (!p_config->skip_gpio_cfg)
   2f186:	b143      	cbz	r3, 2f19a <qspi_pins_configure+0x6a>
    if (!p_config->skip_psel_cfg)
   2f188:	7d20      	ldrb	r0, [r4, #20]
   2f18a:	2800      	cmp	r0, #0
   2f18c:	d167      	bne.n	2f25e <qspi_pins_configure+0x12e>
        nrf_qspi_pins_set(NRF_QSPI, &p_config->pins);
   2f18e:	1d21      	adds	r1, r4, #4
   2f190:	483c      	ldr	r0, [pc, #240]	; (2f284 <qspi_pins_configure+0x154>)
   2f192:	f00e faf5 	bl	3d780 <nrf_qspi_pins_set>
    return true;
   2f196:	2001      	movs	r0, #1
   2f198:	e061      	b.n	2f25e <qspi_pins_configure+0x12e>
        QSPI_PIN_INIT(p_config->pins.sck_pin);
   2f19a:	9201      	str	r2, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f19c:	a801      	add	r0, sp, #4
   2f19e:	f7ff ff8f 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2f1a2:	9a01      	ldr	r2, [sp, #4]
   2f1a4:	3280      	adds	r2, #128	; 0x80
   2f1a6:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2f1aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2f1ae:	f240 3502 	movw	r5, #770	; 0x302
   2f1b2:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   2f1b4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        QSPI_PIN_INIT(p_config->pins.csn_pin);
   2f1b8:	7963      	ldrb	r3, [r4, #5]
   2f1ba:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f1bc:	a801      	add	r0, sp, #4
   2f1be:	f7ff ff7f 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2f1c2:	9a01      	ldr	r2, [sp, #4]
   2f1c4:	3280      	adds	r2, #128	; 0x80
   2f1c6:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2f1ca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2f1ce:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   2f1d0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        QSPI_PIN_INIT(p_config->pins.io0_pin);
   2f1d4:	79a3      	ldrb	r3, [r4, #6]
   2f1d6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f1d8:	a801      	add	r0, sp, #4
   2f1da:	f7ff ff71 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2f1de:	9a01      	ldr	r2, [sp, #4]
   2f1e0:	3280      	adds	r2, #128	; 0x80
   2f1e2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2f1e6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2f1ea:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   2f1ec:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        QSPI_PIN_INIT(p_config->pins.io1_pin);
   2f1f0:	79e3      	ldrb	r3, [r4, #7]
   2f1f2:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f1f4:	a801      	add	r0, sp, #4
   2f1f6:	f7ff ff63 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2f1fa:	9a01      	ldr	r2, [sp, #4]
   2f1fc:	3280      	adds	r2, #128	; 0x80
   2f1fe:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2f202:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2f206:	432b      	orrs	r3, r5
    reg->PIN_CNF[pin_number] = cnf;
   2f208:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        if (p_config->pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2f20c:	7a23      	ldrb	r3, [r4, #8]
   2f20e:	2bff      	cmp	r3, #255	; 0xff
   2f210:	d113      	bne.n	2f23a <qspi_pins_configure+0x10a>
        if (p_config->pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2f212:	7a63      	ldrb	r3, [r4, #9]
   2f214:	2bff      	cmp	r3, #255	; 0xff
   2f216:	d0b7      	beq.n	2f188 <qspi_pins_configure+0x58>
            QSPI_PIN_INIT(p_config->pins.io3_pin);
   2f218:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f21a:	a801      	add	r0, sp, #4
   2f21c:	f7ff ff50 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2f220:	9a01      	ldr	r2, [sp, #4]
   2f222:	3280      	adds	r2, #128	; 0x80
   2f224:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2f228:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2f22c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   2f230:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   2f234:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   2f238:	e7a6      	b.n	2f188 <qspi_pins_configure+0x58>
            QSPI_PIN_INIT(p_config->pins.io2_pin);
   2f23a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2f23c:	a801      	add	r0, sp, #4
   2f23e:	f7ff ff3f 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   2f242:	9a01      	ldr	r2, [sp, #4]
   2f244:	3280      	adds	r2, #128	; 0x80
   2f246:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   2f24a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   2f24e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   2f252:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   2f256:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   2f25a:	e7da      	b.n	2f212 <qspi_pins_configure+0xe2>
        return false;
   2f25c:	2000      	movs	r0, #0
}
   2f25e:	b003      	add	sp, #12
   2f260:	bd30      	pop	{r4, r5, pc}
        return false;
   2f262:	2000      	movs	r0, #0
   2f264:	e7fb      	b.n	2f25e <qspi_pins_configure+0x12e>
   2f266:	2000      	movs	r0, #0
   2f268:	e7f9      	b.n	2f25e <qspi_pins_configure+0x12e>
   2f26a:	2000      	movs	r0, #0
   2f26c:	e7f7      	b.n	2f25e <qspi_pins_configure+0x12e>
        return false;
   2f26e:	2000      	movs	r0, #0
   2f270:	e7f5      	b.n	2f25e <qspi_pins_configure+0x12e>
   2f272:	2000      	movs	r0, #0
   2f274:	e7f3      	b.n	2f25e <qspi_pins_configure+0x12e>
   2f276:	2000      	movs	r0, #0
   2f278:	e7f1      	b.n	2f25e <qspi_pins_configure+0x12e>
   2f27a:	2000      	movs	r0, #0
   2f27c:	e7ef      	b.n	2f25e <qspi_pins_configure+0x12e>
   2f27e:	bf00      	nop
   2f280:	000d1211 	.word	0x000d1211
   2f284:	4002b000 	.word	0x4002b000

0002f288 <qspi_pins_deconfigure>:
{
   2f288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f28c:	b082      	sub	sp, #8
    p_pins->sck_pin = (uint8_t)p_reg->PSEL.SCK;
   2f28e:	4b1e      	ldr	r3, [pc, #120]	; (2f308 <qspi_pins_deconfigure+0x80>)
   2f290:	f8d3 0524 	ldr.w	r0, [r3, #1316]	; 0x524
   2f294:	b2c0      	uxtb	r0, r0
   2f296:	f88d 0000 	strb.w	r0, [sp]
    p_pins->csn_pin = (uint8_t)p_reg->PSEL.CSN;
   2f29a:	f8d3 6528 	ldr.w	r6, [r3, #1320]	; 0x528
   2f29e:	b2f6      	uxtb	r6, r6
   2f2a0:	f88d 6001 	strb.w	r6, [sp, #1]
    p_pins->io0_pin = (uint8_t)p_reg->PSEL.IO0;
   2f2a4:	f8d3 5530 	ldr.w	r5, [r3, #1328]	; 0x530
   2f2a8:	b2ed      	uxtb	r5, r5
   2f2aa:	f88d 5002 	strb.w	r5, [sp, #2]
    p_pins->io1_pin = (uint8_t)p_reg->PSEL.IO1;
   2f2ae:	f8d3 4534 	ldr.w	r4, [r3, #1332]	; 0x534
   2f2b2:	b2e4      	uxtb	r4, r4
   2f2b4:	f88d 4003 	strb.w	r4, [sp, #3]
    p_pins->io2_pin = (uint8_t)p_reg->PSEL.IO2;
   2f2b8:	f8d3 9538 	ldr.w	r9, [r3, #1336]	; 0x538
   2f2bc:	fa5f f889 	uxtb.w	r8, r9
   2f2c0:	f88d 8004 	strb.w	r8, [sp, #4]
    p_pins->io3_pin = (uint8_t)p_reg->PSEL.IO3;
   2f2c4:	f8d3 a53c 	ldr.w	sl, [r3, #1340]	; 0x53c
   2f2c8:	fa5f f78a 	uxtb.w	r7, sl
   2f2cc:	f88d 7005 	strb.w	r7, [sp, #5]
    nrf_gpio_cfg_default(pins.sck_pin);
   2f2d0:	f00e fb24 	bl	3d91c <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.csn_pin);
   2f2d4:	4630      	mov	r0, r6
   2f2d6:	f00e fb21 	bl	3d91c <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io0_pin);
   2f2da:	4628      	mov	r0, r5
   2f2dc:	f00e fb1e 	bl	3d91c <nrf_gpio_cfg_default>
    nrf_gpio_cfg_default(pins.io1_pin);
   2f2e0:	4620      	mov	r0, r4
   2f2e2:	f00e fb1b 	bl	3d91c <nrf_gpio_cfg_default>
    if (pins.io2_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2f2e6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   2f2ea:	d104      	bne.n	2f2f6 <qspi_pins_deconfigure+0x6e>
    if (pins.io3_pin != NRF_QSPI_PIN_NOT_CONNECTED)
   2f2ec:	2fff      	cmp	r7, #255	; 0xff
   2f2ee:	d106      	bne.n	2f2fe <qspi_pins_deconfigure+0x76>
}
   2f2f0:	b002      	add	sp, #8
   2f2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        nrf_gpio_cfg_default(pins.io2_pin);
   2f2f6:	4640      	mov	r0, r8
   2f2f8:	f00e fb10 	bl	3d91c <nrf_gpio_cfg_default>
   2f2fc:	e7f6      	b.n	2f2ec <qspi_pins_deconfigure+0x64>
        nrf_gpio_cfg_default(pins.io3_pin);
   2f2fe:	fa5f f08a 	uxtb.w	r0, sl
   2f302:	f00e fb0b 	bl	3d91c <nrf_gpio_cfg_default>
}
   2f306:	e7f3      	b.n	2f2f0 <qspi_pins_deconfigure+0x68>
   2f308:	4002b000 	.word	0x4002b000

0002f30c <qspi_xfer>:
{
   2f30c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f30e:	4c3f      	ldr	r4, [pc, #252]	; (2f40c <qspi_xfer+0x100>)
   2f310:	f894 4030 	ldrb.w	r4, [r4, #48]	; 0x30
   2f314:	2c00      	cmp	r4, #0
   2f316:	d036      	beq.n	2f386 <qspi_xfer+0x7a>
    NRFX_ASSERT(p_buffer != NULL);
   2f318:	2800      	cmp	r0, #0
   2f31a:	d03f      	beq.n	2f39c <qspi_xfer+0x90>
   2f31c:	f000 4c60 	and.w	ip, r0, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_buffer) || !nrfx_is_word_aligned(p_buffer))
   2f320:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   2f324:	d169      	bne.n	2f3fa <qspi_xfer+0xee>
   2f326:	f010 0f03 	tst.w	r0, #3
   2f32a:	d168      	bne.n	2f3fe <qspi_xfer+0xf2>
    if ((m_cb.state != NRFX_QSPI_STATE_IDLE) &&
   2f32c:	2c01      	cmp	r4, #1
   2f32e:	d001      	beq.n	2f334 <qspi_xfer+0x28>
   2f330:	429c      	cmp	r4, r3
   2f332:	d166      	bne.n	2f402 <qspi_xfer+0xf6>
    if (m_cb.handler)
   2f334:	4c35      	ldr	r4, [pc, #212]	; (2f40c <qspi_xfer+0x100>)
   2f336:	6824      	ldr	r4, [r4, #0]
   2f338:	2c00      	cmp	r4, #0
   2f33a:	d042      	beq.n	2f3c2 <qspi_xfer+0xb6>
        if (m_cb.p_buffer_primary)
   2f33c:	4d33      	ldr	r5, [pc, #204]	; (2f40c <qspi_xfer+0x100>)
   2f33e:	68ad      	ldr	r5, [r5, #8]
   2f340:	2d00      	cmp	r5, #0
   2f342:	d036      	beq.n	2f3b2 <qspi_xfer+0xa6>
            m_cb.p_buffer_secondary = p_buffer;
   2f344:	4d31      	ldr	r5, [pc, #196]	; (2f40c <qspi_xfer+0x100>)
   2f346:	60e8      	str	r0, [r5, #12]
            m_cb.size_secondary     = length;
   2f348:	6169      	str	r1, [r5, #20]
            m_cb.addr_secondary     = address;
   2f34a:	61ea      	str	r2, [r5, #28]
    bool is_first_buffer = false;
   2f34c:	2500      	movs	r5, #0
    if (desired_state == NRFX_QSPI_STATE_WRITE)
   2f34e:	2b02      	cmp	r3, #2
   2f350:	d039      	beq.n	2f3c6 <qspi_xfer+0xba>
    p_reg->READ.SRC = src_addr;
   2f352:	4b2f      	ldr	r3, [pc, #188]	; (2f410 <qspi_xfer+0x104>)
   2f354:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->READ.DST = (uint32_t) p_buffer;
   2f358:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->READ.CNT = length;
   2f35c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
        task = NRF_QSPI_TASK_READSTART;
   2f360:	2304      	movs	r3, #4
    if (!m_cb.handler)
   2f362:	2c00      	cmp	r4, #0
   2f364:	d038      	beq.n	2f3d8 <qspi_xfer+0xcc>
    else if (is_first_buffer)
   2f366:	2d00      	cmp	r5, #0
   2f368:	d04d      	beq.n	2f406 <qspi_xfer+0xfa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f36a:	4929      	ldr	r1, [pc, #164]	; (2f410 <qspi_xfer+0x104>)
   2f36c:	2200      	movs	r2, #0
   2f36e:	f8c1 2100 	str.w	r2, [r1, #256]	; 0x100
    p_reg->INTENSET = mask;
   2f372:	2201      	movs	r2, #1
   2f374:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f378:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2f37c:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   2f380:	601a      	str	r2, [r3, #0]
    return NRFX_SUCCESS;
   2f382:	4824      	ldr	r0, [pc, #144]	; (2f414 <qspi_xfer+0x108>)
}
   2f384:	e03a      	b.n	2f3fc <qspi_xfer+0xf0>
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f386:	4c24      	ldr	r4, [pc, #144]	; (2f418 <qspi_xfer+0x10c>)
   2f388:	2368      	movs	r3, #104	; 0x68
   2f38a:	4622      	mov	r2, r4
   2f38c:	4923      	ldr	r1, [pc, #140]	; (2f41c <qspi_xfer+0x110>)
   2f38e:	4824      	ldr	r0, [pc, #144]	; (2f420 <qspi_xfer+0x114>)
   2f390:	f006 ff80 	bl	36294 <assert_print>
   2f394:	2168      	movs	r1, #104	; 0x68
   2f396:	4620      	mov	r0, r4
   2f398:	f006 ff75 	bl	36286 <assert_post_action>
    NRFX_ASSERT(p_buffer != NULL);
   2f39c:	4c1e      	ldr	r4, [pc, #120]	; (2f418 <qspi_xfer+0x10c>)
   2f39e:	2369      	movs	r3, #105	; 0x69
   2f3a0:	4622      	mov	r2, r4
   2f3a2:	4920      	ldr	r1, [pc, #128]	; (2f424 <qspi_xfer+0x118>)
   2f3a4:	481e      	ldr	r0, [pc, #120]	; (2f420 <qspi_xfer+0x114>)
   2f3a6:	f006 ff75 	bl	36294 <assert_print>
   2f3aa:	2169      	movs	r1, #105	; 0x69
   2f3ac:	4620      	mov	r0, r4
   2f3ae:	f006 ff6a 	bl	36286 <assert_post_action>
            m_cb.p_buffer_primary = p_buffer;
   2f3b2:	4d16      	ldr	r5, [pc, #88]	; (2f40c <qspi_xfer+0x100>)
   2f3b4:	60a8      	str	r0, [r5, #8]
            m_cb.size_primary     = length;
   2f3b6:	6129      	str	r1, [r5, #16]
            m_cb.addr_primary     = address;
   2f3b8:	61aa      	str	r2, [r5, #24]
            m_cb.state = desired_state;
   2f3ba:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
            is_first_buffer = true;
   2f3be:	2501      	movs	r5, #1
   2f3c0:	e7c5      	b.n	2f34e <qspi_xfer+0x42>
    bool is_first_buffer = false;
   2f3c2:	2500      	movs	r5, #0
   2f3c4:	e7c3      	b.n	2f34e <qspi_xfer+0x42>
    p_reg->WRITE.DST = dest_addr;
   2f3c6:	4b12      	ldr	r3, [pc, #72]	; (2f410 <qspi_xfer+0x104>)
   2f3c8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->WRITE.SRC = (uint32_t) p_buffer;
   2f3cc:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
    p_reg->WRITE.CNT = length;
   2f3d0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
        task = NRF_QSPI_TASK_WRITESTART;
   2f3d4:	2308      	movs	r3, #8
   2f3d6:	e7c4      	b.n	2f362 <qspi_xfer+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f3d8:	4a0d      	ldr	r2, [pc, #52]	; (2f410 <qspi_xfer+0x104>)
   2f3da:	2100      	movs	r1, #0
   2f3dc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f3e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2f3e4:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
   2f3e8:	2201      	movs	r2, #1
   2f3ea:	601a      	str	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f3ec:	4b08      	ldr	r3, [pc, #32]	; (2f410 <qspi_xfer+0x104>)
   2f3ee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2f3f2:	2b00      	cmp	r3, #0
   2f3f4:	d0fa      	beq.n	2f3ec <qspi_xfer+0xe0>
    return NRFX_SUCCESS;
   2f3f6:	4807      	ldr	r0, [pc, #28]	; (2f414 <qspi_xfer+0x108>)
   2f3f8:	e000      	b.n	2f3fc <qspi_xfer+0xf0>
        return NRFX_ERROR_INVALID_ADDR;
   2f3fa:	480b      	ldr	r0, [pc, #44]	; (2f428 <qspi_xfer+0x11c>)
}
   2f3fc:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_ADDR;
   2f3fe:	480a      	ldr	r0, [pc, #40]	; (2f428 <qspi_xfer+0x11c>)
   2f400:	e7fc      	b.n	2f3fc <qspi_xfer+0xf0>
        return NRFX_ERROR_BUSY;
   2f402:	480a      	ldr	r0, [pc, #40]	; (2f42c <qspi_xfer+0x120>)
   2f404:	e7fa      	b.n	2f3fc <qspi_xfer+0xf0>
    return NRFX_SUCCESS;
   2f406:	4803      	ldr	r0, [pc, #12]	; (2f414 <qspi_xfer+0x108>)
   2f408:	e7f8      	b.n	2f3fc <qspi_xfer+0xf0>
   2f40a:	bf00      	nop
   2f40c:	2000c4d4 	.word	0x2000c4d4
   2f410:	4002b000 	.word	0x4002b000
   2f414:	0bad0000 	.word	0x0bad0000
   2f418:	00045880 	.word	0x00045880
   2f41c:	000458bc 	.word	0x000458bc
   2f420:	0003f72c 	.word	0x0003f72c
   2f424:	000458e8 	.word	0x000458e8
   2f428:	0bad000a 	.word	0x0bad000a
   2f42c:	0bad000b 	.word	0x0bad000b

0002f430 <qspi_ready_wait>:
{
   2f430:	b510      	push	{r4, lr}
    NRFX_WAIT_FOR(nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY),
   2f432:	2464      	movs	r4, #100	; 0x64
   2f434:	4b08      	ldr	r3, [pc, #32]	; (2f458 <qspi_ready_wait+0x28>)
   2f436:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   2f43a:	b933      	cbnz	r3, 2f44a <qspi_ready_wait+0x1a>
   2f43c:	200a      	movs	r0, #10
   2f43e:	f00d fffc 	bl	3d43a <nrfx_busy_wait>
   2f442:	3c01      	subs	r4, #1
   2f444:	d1f6      	bne.n	2f434 <qspi_ready_wait+0x4>
   2f446:	2300      	movs	r3, #0
   2f448:	e000      	b.n	2f44c <qspi_ready_wait+0x1c>
   2f44a:	2301      	movs	r3, #1
    if (!result)
   2f44c:	b10b      	cbz	r3, 2f452 <qspi_ready_wait+0x22>
    return NRFX_SUCCESS;
   2f44e:	4803      	ldr	r0, [pc, #12]	; (2f45c <qspi_ready_wait+0x2c>)
}
   2f450:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_TIMEOUT;
   2f452:	4803      	ldr	r0, [pc, #12]	; (2f460 <qspi_ready_wait+0x30>)
   2f454:	e7fc      	b.n	2f450 <qspi_ready_wait+0x20>
   2f456:	bf00      	nop
   2f458:	4002b000 	.word	0x4002b000
   2f45c:	0bad0000 	.word	0x0bad0000
   2f460:	0bad0007 	.word	0x0bad0007

0002f464 <nrfx_qspi_init>:
{
   2f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
   2f466:	2800      	cmp	r0, #0
   2f468:	d044      	beq.n	2f4f4 <nrfx_qspi_init+0x90>
   2f46a:	460c      	mov	r4, r1
   2f46c:	4617      	mov	r7, r2
   2f46e:	4605      	mov	r5, r0
    if (m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED)
   2f470:	4b2b      	ldr	r3, [pc, #172]	; (2f520 <nrfx_qspi_init+0xbc>)
   2f472:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2f476:	2b00      	cmp	r3, #0
   2f478:	d14e      	bne.n	2f518 <nrfx_qspi_init+0xb4>
    if (!qspi_pins_configure(p_config))
   2f47a:	f7ff fe59 	bl	2f130 <qspi_pins_configure>
   2f47e:	2800      	cmp	r0, #0
   2f480:	d04c      	beq.n	2f51c <nrfx_qspi_init+0xb8>
    nrf_qspi_xip_offset_set(NRF_QSPI, p_config->xip_offset);
   2f482:	4629      	mov	r1, r5
   2f484:	f851 3b0a 	ldr.w	r3, [r1], #10
    p_reg->XIPOFFSET = xip_offset;
   2f488:	4e26      	ldr	r6, [pc, #152]	; (2f524 <nrfx_qspi_init+0xc0>)
   2f48a:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    nrf_qspi_ifconfig0_set(NRF_QSPI, &p_config->prot_if);
   2f48e:	4630      	mov	r0, r6
   2f490:	f00e f9a7 	bl	3d7e2 <nrf_qspi_ifconfig0_set>
    return p_reg->IFCONFIG0;
   2f494:	f8d6 3544 	ldr.w	r3, [r6, #1348]	; 0x544
    if (p_config->phy_if.sck_freq == NRF_QSPI_FREQ_DIV1)
   2f498:	7c6a      	ldrb	r2, [r5, #17]
   2f49a:	2a00      	cmp	r2, #0
   2f49c:	d137      	bne.n	2f50e <nrfx_qspi_init+0xaa>
        regval |= ((1 << 16) | (1 << 17));
   2f49e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    p_reg->IFCONFIG0 = regval;
   2f4a2:	4e20      	ldr	r6, [pc, #128]	; (2f524 <nrfx_qspi_init+0xc0>)
   2f4a4:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
}
#endif

NRF_STATIC_INLINE void nrf_qspi_iftiming_set(NRF_QSPI_Type * p_reg, uint8_t rxdelay)
{
    p_reg->IFTIMING = ((uint32_t)rxdelay << QSPI_IFTIMING_RXDELAY_Pos) & QSPI_IFTIMING_RXDELAY_Msk;
   2f4a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   2f4ac:	f8c6 3640 	str.w	r3, [r6, #1600]	; 0x640
    nrf_qspi_ifconfig1_set(NRF_QSPI, &p_config->phy_if);
   2f4b0:	f105 010e 	add.w	r1, r5, #14
   2f4b4:	4630      	mov	r0, r6
   2f4b6:	f00e f9a4 	bl	3d802 <nrf_qspi_ifconfig1_set>
    m_cb.handler = handler;
   2f4ba:	4b19      	ldr	r3, [pc, #100]	; (2f520 <nrfx_qspi_init+0xbc>)
   2f4bc:	601c      	str	r4, [r3, #0]
    m_cb.p_context = p_context;
   2f4be:	605f      	str	r7, [r3, #4]
    m_cb.skip_gpio_cfg = p_config->skip_gpio_cfg;
   2f4c0:	7cea      	ldrb	r2, [r5, #19]
   2f4c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    p_reg->INTENCLR = mask;
   2f4c6:	2301      	movs	r3, #1
   2f4c8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
    if (handler)
   2f4cc:	b114      	cbz	r4, 2f4d4 <nrfx_qspi_init+0x70>
        NRFX_IRQ_ENABLE(QSPI_IRQn);
   2f4ce:	202b      	movs	r0, #43	; 0x2b
   2f4d0:	f008 fdec 	bl	380ac <arch_irq_enable>
    m_cb.p_buffer_primary = NULL;
   2f4d4:	4b12      	ldr	r3, [pc, #72]	; (2f520 <nrfx_qspi_init+0xbc>)
   2f4d6:	2100      	movs	r1, #0
   2f4d8:	6099      	str	r1, [r3, #8]
    m_cb.p_buffer_secondary = NULL;
   2f4da:	60d9      	str	r1, [r3, #12]
    m_cb.state = NRFX_QSPI_STATE_IDLE;
   2f4dc:	2201      	movs	r2, #1
   2f4de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Enabled << QSPI_ENABLE_ENABLE_Pos);
   2f4e2:	4b10      	ldr	r3, [pc, #64]	; (2f524 <nrfx_qspi_init+0xc0>)
   2f4e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f4e8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f4ec:	601a      	str	r2, [r3, #0]
    return qspi_ready_wait();
   2f4ee:	f7ff ff9f 	bl	2f430 <qspi_ready_wait>
}
   2f4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_config);
   2f4f4:	4c0c      	ldr	r4, [pc, #48]	; (2f528 <nrfx_qspi_init+0xc4>)
   2f4f6:	f44f 7388 	mov.w	r3, #272	; 0x110
   2f4fa:	4622      	mov	r2, r4
   2f4fc:	490b      	ldr	r1, [pc, #44]	; (2f52c <nrfx_qspi_init+0xc8>)
   2f4fe:	480c      	ldr	r0, [pc, #48]	; (2f530 <nrfx_qspi_init+0xcc>)
   2f500:	f006 fec8 	bl	36294 <assert_print>
   2f504:	f44f 7188 	mov.w	r1, #272	; 0x110
   2f508:	4620      	mov	r0, r4
   2f50a:	f006 febc 	bl	36286 <assert_post_action>
        regval &= ~(1 << 17);
   2f50e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        regval |=  (1 << 16);
   2f512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   2f516:	e7c4      	b.n	2f4a2 <nrfx_qspi_init+0x3e>
        return NRFX_ERROR_INVALID_STATE;
   2f518:	4806      	ldr	r0, [pc, #24]	; (2f534 <nrfx_qspi_init+0xd0>)
   2f51a:	e7ea      	b.n	2f4f2 <nrfx_qspi_init+0x8e>
        return NRFX_ERROR_INVALID_PARAM;
   2f51c:	4806      	ldr	r0, [pc, #24]	; (2f538 <nrfx_qspi_init+0xd4>)
   2f51e:	e7e8      	b.n	2f4f2 <nrfx_qspi_init+0x8e>
   2f520:	2000c4d4 	.word	0x2000c4d4
   2f524:	4002b000 	.word	0x4002b000
   2f528:	00045880 	.word	0x00045880
   2f52c:	00045784 	.word	0x00045784
   2f530:	0003f72c 	.word	0x0003f72c
   2f534:	0bad0005 	.word	0x0bad0005
   2f538:	0bad0004 	.word	0x0bad0004

0002f53c <nrfx_qspi_cinstr_xfer>:
{
   2f53c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f53e:	4b25      	ldr	r3, [pc, #148]	; (2f5d4 <nrfx_qspi_cinstr_xfer+0x98>)
   2f540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2f544:	b32b      	cbz	r3, 2f592 <nrfx_qspi_cinstr_xfer+0x56>
   2f546:	4604      	mov	r4, r0
   2f548:	4615      	mov	r5, r2
    if (m_cb.state != NRFX_QSPI_STATE_IDLE)
   2f54a:	2b01      	cmp	r3, #1
   2f54c:	d13d      	bne.n	2f5ca <nrfx_qspi_cinstr_xfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f54e:	4b22      	ldr	r3, [pc, #136]	; (2f5d8 <nrfx_qspi_cinstr_xfer+0x9c>)
   2f550:	2200      	movs	r2, #0
   2f552:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (p_tx_buffer)
   2f556:	b121      	cbz	r1, 2f562 <nrfx_qspi_cinstr_xfer+0x26>
        nrf_qspi_cinstrdata_set(NRF_QSPI, p_config->length, p_tx_buffer);
   2f558:	460a      	mov	r2, r1
   2f55a:	7841      	ldrb	r1, [r0, #1]
   2f55c:	4618      	mov	r0, r3
   2f55e:	f00e f968 	bl	3d832 <nrf_qspi_cinstrdata_set>
    p_reg->INTENCLR = mask;
   2f562:	481d      	ldr	r0, [pc, #116]	; (2f5d8 <nrfx_qspi_cinstr_xfer+0x9c>)
   2f564:	2301      	movs	r3, #1
   2f566:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    nrf_qspi_cinstr_transfer_start(NRF_QSPI, p_config);
   2f56a:	4621      	mov	r1, r4
   2f56c:	f00e f9b1 	bl	3d8d2 <nrf_qspi_cinstr_transfer_start>
    if (qspi_ready_wait() == NRFX_ERROR_TIMEOUT)
   2f570:	f7ff ff5e 	bl	2f430 <qspi_ready_wait>
   2f574:	4b19      	ldr	r3, [pc, #100]	; (2f5dc <nrfx_qspi_cinstr_xfer+0xa0>)
   2f576:	4298      	cmp	r0, r3
   2f578:	d018      	beq.n	2f5ac <nrfx_qspi_cinstr_xfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f57a:	4b17      	ldr	r3, [pc, #92]	; (2f5d8 <nrfx_qspi_cinstr_xfer+0x9c>)
   2f57c:	2200      	movs	r2, #0
   2f57e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (p_rx_buffer)
   2f582:	b325      	cbz	r5, 2f5ce <nrfx_qspi_cinstr_xfer+0x92>
        nrf_qspi_cinstrdata_get(NRF_QSPI, p_config->length, p_rx_buffer);
   2f584:	462a      	mov	r2, r5
   2f586:	7861      	ldrb	r1, [r4, #1]
   2f588:	4618      	mov	r0, r3
   2f58a:	f00e f980 	bl	3d88e <nrf_qspi_cinstrdata_get>
    return NRFX_SUCCESS;
   2f58e:	4814      	ldr	r0, [pc, #80]	; (2f5e0 <nrfx_qspi_cinstr_xfer+0xa4>)
   2f590:	e01c      	b.n	2f5cc <nrfx_qspi_cinstr_xfer+0x90>
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f592:	4c14      	ldr	r4, [pc, #80]	; (2f5e4 <nrfx_qspi_cinstr_xfer+0xa8>)
   2f594:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2f598:	4622      	mov	r2, r4
   2f59a:	4913      	ldr	r1, [pc, #76]	; (2f5e8 <nrfx_qspi_cinstr_xfer+0xac>)
   2f59c:	4813      	ldr	r0, [pc, #76]	; (2f5ec <nrfx_qspi_cinstr_xfer+0xb0>)
   2f59e:	f006 fe79 	bl	36294 <assert_print>
   2f5a2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2f5a6:	4620      	mov	r0, r4
   2f5a8:	f006 fe6d 	bl	36286 <assert_post_action>
        NRFX_ASSERT(p_config->wipwait);
   2f5ac:	7923      	ldrb	r3, [r4, #4]
   2f5ae:	b96b      	cbnz	r3, 2f5cc <nrfx_qspi_cinstr_xfer+0x90>
   2f5b0:	4c0c      	ldr	r4, [pc, #48]	; (2f5e4 <nrfx_qspi_cinstr_xfer+0xa8>)
   2f5b2:	f240 136b 	movw	r3, #363	; 0x16b
   2f5b6:	4622      	mov	r2, r4
   2f5b8:	490d      	ldr	r1, [pc, #52]	; (2f5f0 <nrfx_qspi_cinstr_xfer+0xb4>)
   2f5ba:	480c      	ldr	r0, [pc, #48]	; (2f5ec <nrfx_qspi_cinstr_xfer+0xb0>)
   2f5bc:	f006 fe6a 	bl	36294 <assert_print>
   2f5c0:	f240 116b 	movw	r1, #363	; 0x16b
   2f5c4:	4620      	mov	r0, r4
   2f5c6:	f006 fe5e 	bl	36286 <assert_post_action>
        return NRFX_ERROR_BUSY;
   2f5ca:	480a      	ldr	r0, [pc, #40]	; (2f5f4 <nrfx_qspi_cinstr_xfer+0xb8>)
}
   2f5cc:	bd38      	pop	{r3, r4, r5, pc}
    return NRFX_SUCCESS;
   2f5ce:	4804      	ldr	r0, [pc, #16]	; (2f5e0 <nrfx_qspi_cinstr_xfer+0xa4>)
   2f5d0:	e7fc      	b.n	2f5cc <nrfx_qspi_cinstr_xfer+0x90>
   2f5d2:	bf00      	nop
   2f5d4:	2000c4d4 	.word	0x2000c4d4
   2f5d8:	4002b000 	.word	0x4002b000
   2f5dc:	0bad0007 	.word	0x0bad0007
   2f5e0:	0bad0000 	.word	0x0bad0000
   2f5e4:	00045880 	.word	0x00045880
   2f5e8:	000458bc 	.word	0x000458bc
   2f5ec:	0003f72c 	.word	0x0003f72c
   2f5f0:	00045900 	.word	0x00045900
   2f5f4:	0bad000b 	.word	0x0bad000b

0002f5f8 <nrfx_qspi_mem_busy_check>:
{
   2f5f8:	b500      	push	{lr}
   2f5fa:	b083      	sub	sp, #12
    uint8_t status_value = 0;
   2f5fc:	2300      	movs	r3, #0
   2f5fe:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_qspi_cinstr_conf_t const config = {
   2f602:	9300      	str	r3, [sp, #0]
   2f604:	f8ad 3004 	strh.w	r3, [sp, #4]
   2f608:	2305      	movs	r3, #5
   2f60a:	f88d 3000 	strb.w	r3, [sp]
   2f60e:	2302      	movs	r3, #2
   2f610:	f88d 3001 	strb.w	r3, [sp, #1]
   2f614:	2301      	movs	r3, #1
   2f616:	f88d 3003 	strb.w	r3, [sp, #3]
    ret_code = nrfx_qspi_cinstr_xfer(&config, &status_value, &status_value);
   2f61a:	f10d 0207 	add.w	r2, sp, #7
   2f61e:	4611      	mov	r1, r2
   2f620:	4668      	mov	r0, sp
   2f622:	f7ff ff8b 	bl	2f53c <nrfx_qspi_cinstr_xfer>
    if (ret_code != NRFX_SUCCESS)
   2f626:	4b06      	ldr	r3, [pc, #24]	; (2f640 <nrfx_qspi_mem_busy_check+0x48>)
   2f628:	4298      	cmp	r0, r3
   2f62a:	d104      	bne.n	2f636 <nrfx_qspi_mem_busy_check+0x3e>
    if ((status_value & QSPI_MEM_STATUSREG_WIP_Pos) != 0x00)
   2f62c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2f630:	f013 0f01 	tst.w	r3, #1
   2f634:	d102      	bne.n	2f63c <nrfx_qspi_mem_busy_check+0x44>
}
   2f636:	b003      	add	sp, #12
   2f638:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_BUSY;
   2f63c:	4801      	ldr	r0, [pc, #4]	; (2f644 <nrfx_qspi_mem_busy_check+0x4c>)
   2f63e:	e7fa      	b.n	2f636 <nrfx_qspi_mem_busy_check+0x3e>
   2f640:	0bad0000 	.word	0x0bad0000
   2f644:	0bad000b 	.word	0x0bad000b

0002f648 <nrfx_qspi_uninit>:
{
   2f648:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f64a:	4b1f      	ldr	r3, [pc, #124]	; (2f6c8 <nrfx_qspi_uninit+0x80>)
   2f64c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2f650:	b323      	cbz	r3, 2f69c <nrfx_qspi_uninit+0x54>
    NRFX_IRQ_DISABLE(QSPI_IRQn);
   2f652:	202b      	movs	r0, #43	; 0x2b
   2f654:	f008 fd2f 	bl	380b6 <arch_irq_disable>
    return (bool)((p_reg->CINSTRCONF & (QSPI_CINSTRCONF_LFEN_Msk | QSPI_CINSTRCONF_LFSTOP_Msk))
   2f658:	4b1c      	ldr	r3, [pc, #112]	; (2f6cc <nrfx_qspi_uninit+0x84>)
   2f65a:	f8d3 3634 	ldr.w	r3, [r3, #1588]	; 0x634
   2f65e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    if (nrf_qspi_cinstr_long_transfer_is_ongoing(NRF_QSPI))
   2f662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2f666:	d026      	beq.n	2f6b6 <nrfx_qspi_uninit+0x6e>
    p_reg->INTENCLR = mask;
   2f668:	4b18      	ldr	r3, [pc, #96]	; (2f6cc <nrfx_qspi_uninit+0x84>)
   2f66a:	2201      	movs	r2, #1
   2f66c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f670:	611a      	str	r2, [r3, #16]
    if (nrf52_errata_122())
   2f672:	f00e f883 	bl	3d77c <nrf52_errata_122>
   2f676:	b110      	cbz	r0, 2f67e <nrfx_qspi_uninit+0x36>
        *(volatile uint32_t *)0x40029054ul = 1ul;
   2f678:	4b15      	ldr	r3, [pc, #84]	; (2f6d0 <nrfx_qspi_uninit+0x88>)
   2f67a:	2201      	movs	r2, #1
   2f67c:	655a      	str	r2, [r3, #84]	; 0x54
    p_reg->ENABLE = (QSPI_ENABLE_ENABLE_Disabled << QSPI_ENABLE_ENABLE_Pos);
   2f67e:	4b13      	ldr	r3, [pc, #76]	; (2f6cc <nrfx_qspi_uninit+0x84>)
   2f680:	2200      	movs	r2, #0
   2f682:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f686:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (!m_cb.skip_gpio_cfg)
   2f68a:	4b0f      	ldr	r3, [pc, #60]	; (2f6c8 <nrfx_qspi_uninit+0x80>)
   2f68c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   2f690:	b1b3      	cbz	r3, 2f6c0 <nrfx_qspi_uninit+0x78>
    m_cb.state = NRFX_QSPI_STATE_UNINITIALIZED;
   2f692:	4b0d      	ldr	r3, [pc, #52]	; (2f6c8 <nrfx_qspi_uninit+0x80>)
   2f694:	2200      	movs	r2, #0
   2f696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   2f69a:	bd10      	pop	{r4, pc}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f69c:	4c0d      	ldr	r4, [pc, #52]	; (2f6d4 <nrfx_qspi_uninit+0x8c>)
   2f69e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   2f6a2:	4622      	mov	r2, r4
   2f6a4:	490c      	ldr	r1, [pc, #48]	; (2f6d8 <nrfx_qspi_uninit+0x90>)
   2f6a6:	480d      	ldr	r0, [pc, #52]	; (2f6dc <nrfx_qspi_uninit+0x94>)
   2f6a8:	f006 fdf4 	bl	36294 <assert_print>
   2f6ac:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   2f6b0:	4620      	mov	r0, r4
   2f6b2:	f006 fde8 	bl	36286 <assert_post_action>
    p_reg->CINSTRCONF = mask;
   2f6b6:	4b05      	ldr	r3, [pc, #20]	; (2f6cc <nrfx_qspi_uninit+0x84>)
   2f6b8:	4a09      	ldr	r2, [pc, #36]	; (2f6e0 <nrfx_qspi_uninit+0x98>)
   2f6ba:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
}
   2f6be:	e7d3      	b.n	2f668 <nrfx_qspi_uninit+0x20>
        qspi_pins_deconfigure();
   2f6c0:	f7ff fde2 	bl	2f288 <qspi_pins_deconfigure>
   2f6c4:	e7e5      	b.n	2f692 <nrfx_qspi_uninit+0x4a>
   2f6c6:	bf00      	nop
   2f6c8:	2000c4d4 	.word	0x2000c4d4
   2f6cc:	4002b000 	.word	0x4002b000
   2f6d0:	40029000 	.word	0x40029000
   2f6d4:	00045880 	.word	0x00045880
   2f6d8:	000458bc 	.word	0x000458bc
   2f6dc:	0003f72c 	.word	0x0003f72c
   2f6e0:	00030100 	.word	0x00030100

0002f6e4 <nrfx_qspi_erase>:
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f6e4:	4b1f      	ldr	r3, [pc, #124]	; (2f764 <nrfx_qspi_erase+0x80>)
   2f6e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
   2f6ea:	b1eb      	cbz	r3, 2f728 <nrfx_qspi_erase+0x44>
    if (!nrfx_is_word_aligned((void const *)start_address))
   2f6ec:	f011 0f03 	tst.w	r1, #3
   2f6f0:	d133      	bne.n	2f75a <nrfx_qspi_erase+0x76>
    if (m_cb.handler && m_cb.state != NRFX_QSPI_STATE_IDLE)
   2f6f2:	4a1c      	ldr	r2, [pc, #112]	; (2f764 <nrfx_qspi_erase+0x80>)
   2f6f4:	6812      	ldr	r2, [r2, #0]
   2f6f6:	b10a      	cbz	r2, 2f6fc <nrfx_qspi_erase+0x18>
   2f6f8:	2b01      	cmp	r3, #1
   2f6fa:	d130      	bne.n	2f75e <nrfx_qspi_erase+0x7a>
    m_cb.state = NRFX_QSPI_STATE_ERASE;
   2f6fc:	4a19      	ldr	r2, [pc, #100]	; (2f764 <nrfx_qspi_erase+0x80>)
   2f6fe:	2304      	movs	r3, #4
   2f700:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    p_reg->ERASE.PTR = erase_addr;
   2f704:	4b18      	ldr	r3, [pc, #96]	; (2f768 <nrfx_qspi_erase+0x84>)
   2f706:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
    p_reg->ERASE.LEN = len;
   2f70a:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f70e:	2100      	movs	r1, #0
   2f710:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f714:	2101      	movs	r1, #1
   2f716:	60d9      	str	r1, [r3, #12]
    if (!m_cb.handler)
   2f718:	6813      	ldr	r3, [r2, #0]
   2f71a:	b19b      	cbz	r3, 2f744 <nrfx_qspi_erase+0x60>
    p_reg->INTENSET = mask;
   2f71c:	4b12      	ldr	r3, [pc, #72]	; (2f768 <nrfx_qspi_erase+0x84>)
   2f71e:	2201      	movs	r2, #1
   2f720:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return NRFX_SUCCESS;
   2f724:	4811      	ldr	r0, [pc, #68]	; (2f76c <nrfx_qspi_erase+0x88>)
}
   2f726:	4770      	bx	lr
{
   2f728:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_cb.state != NRFX_QSPI_STATE_UNINITIALIZED);
   2f72a:	4c11      	ldr	r4, [pc, #68]	; (2f770 <nrfx_qspi_erase+0x8c>)
   2f72c:	f44f 730a 	mov.w	r3, #552	; 0x228
   2f730:	4622      	mov	r2, r4
   2f732:	4910      	ldr	r1, [pc, #64]	; (2f774 <nrfx_qspi_erase+0x90>)
   2f734:	4810      	ldr	r0, [pc, #64]	; (2f778 <nrfx_qspi_erase+0x94>)
   2f736:	f006 fdad 	bl	36294 <assert_print>
   2f73a:	f44f 710a 	mov.w	r1, #552	; 0x228
   2f73e:	4620      	mov	r0, r4
   2f740:	f006 fda1 	bl	36286 <assert_post_action>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f744:	4b08      	ldr	r3, [pc, #32]	; (2f768 <nrfx_qspi_erase+0x84>)
   2f746:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
        while (!nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2f74a:	2b00      	cmp	r3, #0
   2f74c:	d0fa      	beq.n	2f744 <nrfx_qspi_erase+0x60>
        m_cb.state = NRFX_QSPI_STATE_IDLE;
   2f74e:	4b05      	ldr	r3, [pc, #20]	; (2f764 <nrfx_qspi_erase+0x80>)
   2f750:	2201      	movs	r2, #1
   2f752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return NRFX_SUCCESS;
   2f756:	4805      	ldr	r0, [pc, #20]	; (2f76c <nrfx_qspi_erase+0x88>)
   2f758:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   2f75a:	4808      	ldr	r0, [pc, #32]	; (2f77c <nrfx_qspi_erase+0x98>)
   2f75c:	4770      	bx	lr
        return NRFX_ERROR_BUSY;
   2f75e:	4808      	ldr	r0, [pc, #32]	; (2f780 <nrfx_qspi_erase+0x9c>)
}
   2f760:	4770      	bx	lr
   2f762:	bf00      	nop
   2f764:	2000c4d4 	.word	0x2000c4d4
   2f768:	4002b000 	.word	0x4002b000
   2f76c:	0bad0000 	.word	0x0bad0000
   2f770:	00045880 	.word	0x00045880
   2f774:	000458bc 	.word	0x000458bc
   2f778:	0003f72c 	.word	0x0003f72c
   2f77c:	0bad000a 	.word	0x0bad000a
   2f780:	0bad000b 	.word	0x0bad000b

0002f784 <nrfx_qspi_irq_handler>:
   2f784:	4b0f      	ldr	r3, [pc, #60]	; (2f7c4 <nrfx_qspi_irq_handler+0x40>)
   2f786:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100

void nrfx_qspi_irq_handler(void)
{
    // Catch Event ready interrupts
    if (nrf_qspi_event_check(NRF_QSPI, NRF_QSPI_EVENT_READY))
   2f78a:	b903      	cbnz	r3, 2f78e <nrfx_qspi_irq_handler+0xa>
   2f78c:	4770      	bx	lr
{
   2f78e:	b510      	push	{r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f790:	4b0c      	ldr	r3, [pc, #48]	; (2f7c4 <nrfx_qspi_irq_handler+0x40>)
   2f792:	2200      	movs	r2, #0
   2f794:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    {
        nrf_qspi_event_clear(NRF_QSPI, NRF_QSPI_EVENT_READY);

        qspi_extended_event_process(&m_cb.evt_ext);
   2f798:	4c0b      	ldr	r4, [pc, #44]	; (2f7c8 <nrfx_qspi_irq_handler+0x44>)
   2f79a:	4620      	mov	r0, r4
   2f79c:	f7ff fc70 	bl	2f080 <qspi_extended_event_process>
        if (!m_cb.p_buffer_primary)
   2f7a0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2f7a4:	b143      	cbz	r3, 2f7b8 <nrfx_qspi_irq_handler+0x34>
        {
            m_cb.state = NRFX_QSPI_STATE_IDLE;
        }

        m_cb.handler(NRFX_QSPI_EVENT_DONE, m_cb.p_context);
   2f7a6:	4c09      	ldr	r4, [pc, #36]	; (2f7cc <nrfx_qspi_irq_handler+0x48>)
   2f7a8:	6823      	ldr	r3, [r4, #0]
   2f7aa:	6861      	ldr	r1, [r4, #4]
   2f7ac:	2000      	movs	r0, #0
   2f7ae:	4798      	blx	r3
        m_cb.evt_ext.type = NRFX_QSPI_EVENT_NONE;
   2f7b0:	2300      	movs	r3, #0
   2f7b2:	f884 3020 	strb.w	r3, [r4, #32]
    }
}
   2f7b6:	bd10      	pop	{r4, pc}
            m_cb.state = NRFX_QSPI_STATE_IDLE;
   2f7b8:	f1a4 0320 	sub.w	r3, r4, #32
   2f7bc:	2201      	movs	r2, #1
   2f7be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
   2f7c2:	e7f0      	b.n	2f7a6 <nrfx_qspi_irq_handler+0x22>
   2f7c4:	4002b000 	.word	0x4002b000
   2f7c8:	2000c4f4 	.word	0x2000c4f4
   2f7cc:	2000c4d4 	.word	0x2000c4d4

0002f7d0 <nrf_gpio_pin_port_decode>:
{
   2f7d0:	b538      	push	{r3, r4, r5, lr}
   2f7d2:	4605      	mov	r5, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f7d4:	6804      	ldr	r4, [r0, #0]
   2f7d6:	4620      	mov	r0, r4
   2f7d8:	f00e f8d8 	bl	3d98c <nrf_gpio_pin_present_check>
   2f7dc:	b140      	cbz	r0, 2f7f0 <nrf_gpio_pin_port_decode+0x20>
    *p_pin = pin_number & 0x1F;
   2f7de:	f004 031f 	and.w	r3, r4, #31
   2f7e2:	602b      	str	r3, [r5, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f7e4:	0964      	lsrs	r4, r4, #5
   2f7e6:	d01d      	beq.n	2f824 <nrf_gpio_pin_port_decode+0x54>
   2f7e8:	2c01      	cmp	r4, #1
   2f7ea:	d10e      	bne.n	2f80a <nrf_gpio_pin_port_decode+0x3a>
        case 1: return NRF_P1;
   2f7ec:	480e      	ldr	r0, [pc, #56]	; (2f828 <nrf_gpio_pin_port_decode+0x58>)
}
   2f7ee:	bd38      	pop	{r3, r4, r5, pc}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2f7f0:	4c0e      	ldr	r4, [pc, #56]	; (2f82c <nrf_gpio_pin_port_decode+0x5c>)
   2f7f2:	f240 2347 	movw	r3, #583	; 0x247
   2f7f6:	4622      	mov	r2, r4
   2f7f8:	490d      	ldr	r1, [pc, #52]	; (2f830 <nrf_gpio_pin_port_decode+0x60>)
   2f7fa:	480e      	ldr	r0, [pc, #56]	; (2f834 <nrf_gpio_pin_port_decode+0x64>)
   2f7fc:	f006 fd4a 	bl	36294 <assert_print>
   2f800:	f240 2147 	movw	r1, #583	; 0x247
   2f804:	4620      	mov	r0, r4
   2f806:	f006 fd3e 	bl	36286 <assert_post_action>
            NRFX_ASSERT(0);
   2f80a:	4c08      	ldr	r4, [pc, #32]	; (2f82c <nrf_gpio_pin_port_decode+0x5c>)
   2f80c:	f44f 7313 	mov.w	r3, #588	; 0x24c
   2f810:	4622      	mov	r2, r4
   2f812:	4909      	ldr	r1, [pc, #36]	; (2f838 <nrf_gpio_pin_port_decode+0x68>)
   2f814:	4807      	ldr	r0, [pc, #28]	; (2f834 <nrf_gpio_pin_port_decode+0x64>)
   2f816:	f006 fd3d 	bl	36294 <assert_print>
   2f81a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   2f81e:	4620      	mov	r0, r4
   2f820:	f006 fd31 	bl	36286 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2f824:	4805      	ldr	r0, [pc, #20]	; (2f83c <nrf_gpio_pin_port_decode+0x6c>)
   2f826:	e7e2      	b.n	2f7ee <nrf_gpio_pin_port_decode+0x1e>
   2f828:	40842800 	.word	0x40842800
   2f82c:	000448c8 	.word	0x000448c8
   2f830:	000448fc 	.word	0x000448fc
   2f834:	0003f72c 	.word	0x0003f72c
   2f838:	0003f964 	.word	0x0003f964
   2f83c:	40842500 	.word	0x40842500

0002f840 <spim_xfer>:

static nrfx_err_t spim_xfer(NRF_SPIM_Type               * p_spim,
                            spim_control_block_t        * p_cb,
                            nrfx_spim_xfer_desc_t const * p_xfer_desc,
                            uint32_t                      flags)
{
   2f840:	b570      	push	{r4, r5, r6, lr}
   2f842:	4604      	mov	r4, r0
   2f844:	460e      	mov	r6, r1
   2f846:	461d      	mov	r5, r3
    nrfx_err_t err_code;
    // EasyDMA requires that transfer buffers are placed in Data RAM region;
    // signal error if they are not.
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2f848:	6813      	ldr	r3, [r2, #0]
   2f84a:	b123      	cbz	r3, 2f856 <spim_xfer+0x16>
   2f84c:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
   2f850:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   2f854:	d106      	bne.n	2f864 <spim_xfer+0x24>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2f856:	6891      	ldr	r1, [r2, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
   2f858:	b141      	cbz	r1, 2f86c <spim_xfer+0x2c>
   2f85a:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
   2f85e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   2f862:	d003      	beq.n	2f86c <spim_xfer+0x2c>
    {
        p_cb->transfer_in_progress = false;
   2f864:	2300      	movs	r3, #0
   2f866:	7773      	strb	r3, [r6, #29]
        err_code = NRFX_ERROR_INVALID_ADDR;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
   2f868:	4818      	ldr	r0, [pc, #96]	; (2f8cc <spim_xfer+0x8c>)
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
    }
    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2f86a:	bd70      	pop	{r4, r5, r6, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
   2f86c:	6851      	ldr	r1, [r2, #4]

NRF_STATIC_INLINE void nrf_spim_tx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t const * p_buffer,
                                              size_t          length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2f86e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2f872:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
   2f876:	6891      	ldr	r1, [r2, #8]
   2f878:	68d3      	ldr	r3, [r2, #12]

NRF_STATIC_INLINE void nrf_spim_rx_buffer_set(NRF_SPIM_Type * p_reg,
                                              uint8_t * p_buffer,
                                              size_t    length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2f87a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2f87e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f882:	2300      	movs	r3, #0
   2f884:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   2f888:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    spim_list_enable_handle(p_spim, flags);
   2f88c:	4629      	mov	r1, r5
   2f88e:	4620      	mov	r0, r4
   2f890:	f00e f897 	bl	3d9c2 <spim_list_enable_handle>
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2f894:	f015 0208 	ands.w	r2, r5, #8
   2f898:	d101      	bne.n	2f89e <spim_xfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2f89a:	2301      	movs	r3, #1
   2f89c:	6123      	str	r3, [r4, #16]
    if (!p_cb->handler)
   2f89e:	6833      	ldr	r3, [r6, #0]
   2f8a0:	b14b      	cbz	r3, 2f8b6 <spim_xfer+0x76>
        spim_int_enable(p_spim, !(flags & NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER));
   2f8a2:	f015 0f04 	tst.w	r5, #4
   2f8a6:	bf0c      	ite	eq
   2f8a8:	2101      	moveq	r1, #1
   2f8aa:	2100      	movne	r1, #0
   2f8ac:	4620      	mov	r0, r4
   2f8ae:	f00e f87f 	bl	3d9b0 <spim_int_enable>
    return err_code;
   2f8b2:	4807      	ldr	r0, [pc, #28]	; (2f8d0 <spim_xfer+0x90>)
   2f8b4:	e7d9      	b.n	2f86a <spim_xfer+0x2a>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
   2f8b6:	b91a      	cbnz	r2, 2f8c0 <spim_xfer+0x80>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2f8b8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2f8bc:	2b00      	cmp	r3, #0
   2f8be:	d0fb      	beq.n	2f8b8 <spim_xfer+0x78>
        set_ss_pin_state(p_cb, false);
   2f8c0:	2100      	movs	r1, #0
   2f8c2:	4630      	mov	r0, r6
   2f8c4:	f00e f8b4 	bl	3da30 <set_ss_pin_state>
    return err_code;
   2f8c8:	4801      	ldr	r0, [pc, #4]	; (2f8d0 <spim_xfer+0x90>)
   2f8ca:	e7ce      	b.n	2f86a <spim_xfer+0x2a>
   2f8cc:	0bad000a 	.word	0x0bad000a
   2f8d0:	0bad0000 	.word	0x0bad0000

0002f8d4 <irq_handler>:
   2f8d4:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
        nrf_spim_task_trigger(p_spim, NRF_SPIM_TASK_START);
        return;
    }
#endif

    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
   2f8d8:	b1ca      	cbz	r2, 2f90e <irq_handler+0x3a>
{
   2f8da:	b510      	push	{r4, lr}
   2f8dc:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2f8de:	2200      	movs	r2, #0
   2f8e0:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   2f8e4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
        {
            anomaly_198_disable();
        }
#endif
        nrf_spim_event_clear(p_spim, NRF_SPIM_EVENT_END);
        NRFX_ASSERT(p_cb->handler);
   2f8e8:	680b      	ldr	r3, [r1, #0]
   2f8ea:	b11b      	cbz	r3, 2f8f4 <irq_handler+0x20>
        NRFX_LOG_DEBUG("Event: NRF_SPIM_EVENT_END.");
        finish_transfer(p_cb);
   2f8ec:	4608      	mov	r0, r1
   2f8ee:	f00e f8af 	bl	3da50 <finish_transfer>
    }
}
   2f8f2:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(p_cb->handler);
   2f8f4:	4c06      	ldr	r4, [pc, #24]	; (2f910 <irq_handler+0x3c>)
   2f8f6:	f240 333b 	movw	r3, #827	; 0x33b
   2f8fa:	4622      	mov	r2, r4
   2f8fc:	4905      	ldr	r1, [pc, #20]	; (2f914 <irq_handler+0x40>)
   2f8fe:	4806      	ldr	r0, [pc, #24]	; (2f918 <irq_handler+0x44>)
   2f900:	f006 fcc8 	bl	36294 <assert_print>
   2f904:	f240 313b 	movw	r1, #827	; 0x33b
   2f908:	4620      	mov	r0, r4
   2f90a:	f006 fcbc 	bl	36286 <assert_post_action>
   2f90e:	4770      	bx	lr
   2f910:	00045914 	.word	0x00045914
   2f914:	00045950 	.word	0x00045950
   2f918:	0003f72c 	.word	0x0003f72c

0002f91c <nrfx_spim_init>:
{
   2f91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
   2f920:	2900      	cmp	r1, #0
   2f922:	d068      	beq.n	2f9f6 <nrfx_spim_init+0xda>
   2f924:	4604      	mov	r4, r0
   2f926:	460d      	mov	r5, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2f928:	7906      	ldrb	r6, [r0, #4]
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   2f92a:	6807      	ldr	r7, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2f92c:	4958      	ldr	r1, [pc, #352]	; (2fa90 <nrfx_spim_init+0x174>)
   2f92e:	eb01 1146 	add.w	r1, r1, r6, lsl #5
   2f932:	7f09      	ldrb	r1, [r1, #28]
   2f934:	2900      	cmp	r1, #0
   2f936:	f040 8099 	bne.w	2fa6c <nrfx_spim_init+0x150>
    if (
   2f93a:	2e01      	cmp	r6, #1
   2f93c:	d968      	bls.n	2fa10 <nrfx_spim_init+0xf4>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   2f93e:	2e02      	cmp	r6, #2
   2f940:	f040 8097 	bne.w	2fa72 <nrfx_spim_init+0x156>
   2f944:	68a9      	ldr	r1, [r5, #8]
   2f946:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   2f94a:	d069      	beq.n	2fa20 <nrfx_spim_init+0x104>
   2f94c:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   2f950:	d066      	beq.n	2fa20 <nrfx_spim_init+0x104>
        ((p_config->use_hw_ss) &&
   2f952:	7c69      	ldrb	r1, [r5, #17]
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   2f954:	b111      	cbz	r1, 2f95c <nrfx_spim_init+0x40>
        ((p_config->use_hw_ss) &&
   2f956:	2e02      	cmp	r6, #2
   2f958:	f040 808d 	bne.w	2fa76 <nrfx_spim_init+0x15a>
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   2f95c:	7be9      	ldrb	r1, [r5, #15]
         !SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx)) ||
   2f95e:	29ff      	cmp	r1, #255	; 0xff
   2f960:	d002      	beq.n	2f968 <nrfx_spim_init+0x4c>
        ((p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED) &&
   2f962:	2e02      	cmp	r6, #2
   2f964:	f040 8089 	bne.w	2fa7a <nrfx_spim_init+0x15e>
    if (!(p_config->skip_gpio_cfg && p_config->skip_psel_cfg) &&
   2f968:	7ce8      	ldrb	r0, [r5, #19]
   2f96a:	b108      	cbz	r0, 2f970 <nrfx_spim_init+0x54>
   2f96c:	7d28      	ldrb	r0, [r5, #20]
   2f96e:	b910      	cbnz	r0, 2f976 <nrfx_spim_init+0x5a>
   2f970:	4848      	ldr	r0, [pc, #288]	; (2fa94 <nrfx_spim_init+0x178>)
   2f972:	4287      	cmp	r7, r0
   2f974:	d05c      	beq.n	2fa30 <nrfx_spim_init+0x114>
    p_cb->handler = handler;
   2f976:	f8df 9118 	ldr.w	r9, [pc, #280]	; 2fa90 <nrfx_spim_init+0x174>
   2f97a:	ea4f 1846 	mov.w	r8, r6, lsl #5
   2f97e:	eb09 1146 	add.w	r1, r9, r6, lsl #5
   2f982:	f849 2008 	str.w	r2, [r9, r8]
    p_cb->p_context = p_context;
   2f986:	604b      	str	r3, [r1, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   2f988:	7ce8      	ldrb	r0, [r5, #19]
   2f98a:	7f8a      	ldrb	r2, [r1, #30]
   2f98c:	f360 0200 	bfi	r2, r0, #0, #1
   2f990:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
   2f992:	7928      	ldrb	r0, [r5, #4]
   2f994:	b2d2      	uxtb	r2, r2
   2f996:	f360 0241 	bfi	r2, r0, #1, #1
   2f99a:	778a      	strb	r2, [r1, #30]
    p_cb->use_hw_ss = p_config->use_hw_ss;
   2f99c:	7c68      	ldrb	r0, [r5, #17]
   2f99e:	b2d2      	uxtb	r2, r2
   2f9a0:	f360 0282 	bfi	r2, r0, #2, #1
   2f9a4:	778a      	strb	r2, [r1, #30]
    p_cb->ss_pin = p_config->ss_pin;
   2f9a6:	78eb      	ldrb	r3, [r5, #3]
   2f9a8:	77cb      	strb	r3, [r1, #31]
    configure_pins(p_instance, p_config);
   2f9aa:	4629      	mov	r1, r5
   2f9ac:	4620      	mov	r0, r4
   2f9ae:	f00e f87e 	bl	3daae <configure_pins>
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
   2f9b2:	7c2b      	ldrb	r3, [r5, #16]
    p_reg->IFTIMING.RXDELAY = rxdelay;
   2f9b4:	f8c7 3560 	str.w	r3, [r7, #1376]	; 0x560
    nrf_spim_frequency_set(p_spim, p_config->frequency);
   2f9b8:	68ab      	ldr	r3, [r5, #8]
    p_reg->FREQUENCY = (uint32_t)frequency;
   2f9ba:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
   2f9be:	7b6a      	ldrb	r2, [r5, #13]
   2f9c0:	7b29      	ldrb	r1, [r5, #12]
   2f9c2:	4638      	mov	r0, r7
   2f9c4:	f00d ffcd 	bl	3d962 <nrf_spim_configure>
    nrf_spim_orc_set(p_spim, p_config->orc);
   2f9c8:	79ab      	ldrb	r3, [r5, #6]
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
   2f9ca:	f8c7 35c0 	str.w	r3, [r7, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   2f9ce:	2307      	movs	r3, #7
   2f9d0:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
    if (p_cb->handler)
   2f9d4:	f859 3008 	ldr.w	r3, [r9, r8]
   2f9d8:	b123      	cbz	r3, 2f9e4 <nrfx_spim_init+0xc8>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   2f9da:	6820      	ldr	r0, [r4, #0]
   2f9dc:	f340 3007 	sbfx	r0, r0, #12, #8
   2f9e0:	f008 fb64 	bl	380ac <arch_irq_enable>
    p_cb->transfer_in_progress = false;
   2f9e4:	4b2a      	ldr	r3, [pc, #168]	; (2fa90 <nrfx_spim_init+0x174>)
   2f9e6:	eb03 1346 	add.w	r3, r3, r6, lsl #5
   2f9ea:	2200      	movs	r2, #0
   2f9ec:	775a      	strb	r2, [r3, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   2f9ee:	2201      	movs	r2, #1
   2f9f0:	771a      	strb	r2, [r3, #28]
    return err_code;
   2f9f2:	4829      	ldr	r0, [pc, #164]	; (2fa98 <nrfx_spim_init+0x17c>)
   2f9f4:	e03b      	b.n	2fa6e <nrfx_spim_init+0x152>
    NRFX_ASSERT(p_config);
   2f9f6:	4c29      	ldr	r4, [pc, #164]	; (2fa9c <nrfx_spim_init+0x180>)
   2f9f8:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   2f9fc:	4622      	mov	r2, r4
   2f9fe:	4928      	ldr	r1, [pc, #160]	; (2faa0 <nrfx_spim_init+0x184>)
   2fa00:	4828      	ldr	r0, [pc, #160]	; (2faa4 <nrfx_spim_init+0x188>)
   2fa02:	f006 fc47 	bl	36294 <assert_print>
   2fa06:	f44f 71bf 	mov.w	r1, #382	; 0x17e
   2fa0a:	4620      	mov	r0, r4
   2fa0c:	f006 fc3b 	bl	36286 <assert_post_action>
        (!SPIM_SUPPORTED_FREQ_VALIDATE(p_instance->drv_inst_idx, p_config->frequency)) ||
   2fa10:	68a9      	ldr	r1, [r5, #8]
   2fa12:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   2fa16:	d092      	beq.n	2f93e <nrfx_spim_init+0x22>
   2fa18:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   2fa1c:	d199      	bne.n	2f952 <nrfx_spim_init+0x36>
   2fa1e:	e78e      	b.n	2f93e <nrfx_spim_init+0x22>
   2fa20:	f1b1 6f20 	cmp.w	r1, #167772160	; 0xa000000
   2fa24:	d095      	beq.n	2f952 <nrfx_spim_init+0x36>
   2fa26:	f1b1 5fa0 	cmp.w	r1, #335544320	; 0x14000000
   2fa2a:	d092      	beq.n	2f952 <nrfx_spim_init+0x36>
        return err_code;
   2fa2c:	481e      	ldr	r0, [pc, #120]	; (2faa8 <nrfx_spim_init+0x18c>)
   2fa2e:	e01e      	b.n	2fa6e <nrfx_spim_init+0x152>
        (p_spim == NRF_SPIM4) && (p_config->frequency == NRF_SPIM_FREQ_32M))
   2fa30:	68a8      	ldr	r0, [r5, #8]
   2fa32:	f1b0 5fa0 	cmp.w	r0, #335544320	; 0x14000000
   2fa36:	d19e      	bne.n	2f976 <nrfx_spim_init+0x5a>
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   2fa38:	7828      	ldrb	r0, [r5, #0]
   2fa3a:	28ff      	cmp	r0, #255	; 0xff
   2fa3c:	d001      	beq.n	2fa42 <nrfx_spim_init+0x126>
   2fa3e:	2808      	cmp	r0, #8
   2fa40:	d11d      	bne.n	2fa7e <nrfx_spim_init+0x162>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   2fa42:	78e8      	ldrb	r0, [r5, #3]
        if (!SPIM_DEDICATED_PIN_VALIDATE(p_config->sck_pin, SPIM_SCK_DEDICATED) ||
   2fa44:	28ff      	cmp	r0, #255	; 0xff
   2fa46:	d001      	beq.n	2fa4c <nrfx_spim_init+0x130>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->ss_pin,  SPIM_CSN_DEDICATED) ||
   2fa48:	280b      	cmp	r0, #11
   2fa4a:	d11a      	bne.n	2fa82 <nrfx_spim_init+0x166>
   2fa4c:	29ff      	cmp	r1, #255	; 0xff
   2fa4e:	d001      	beq.n	2fa54 <nrfx_spim_init+0x138>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   2fa50:	290c      	cmp	r1, #12
   2fa52:	d118      	bne.n	2fa86 <nrfx_spim_init+0x16a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2fa54:	7869      	ldrb	r1, [r5, #1]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->dcx_pin, SPIM_DCX_DEDICATED) ||
   2fa56:	29ff      	cmp	r1, #255	; 0xff
   2fa58:	d001      	beq.n	2fa5e <nrfx_spim_init+0x142>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2fa5a:	2909      	cmp	r1, #9
   2fa5c:	d115      	bne.n	2fa8a <nrfx_spim_init+0x16e>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   2fa5e:	78a9      	ldrb	r1, [r5, #2]
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->mosi_pin, SPIM_MOSI_DEDICATED) ||
   2fa60:	29ff      	cmp	r1, #255	; 0xff
   2fa62:	d088      	beq.n	2f976 <nrfx_spim_init+0x5a>
            !SPIM_DEDICATED_PIN_VALIDATE(p_config->miso_pin, SPIM_MISO_DEDICATED))
   2fa64:	290a      	cmp	r1, #10
   2fa66:	d086      	beq.n	2f976 <nrfx_spim_init+0x5a>
            return err_code;
   2fa68:	4810      	ldr	r0, [pc, #64]	; (2faac <nrfx_spim_init+0x190>)
   2fa6a:	e000      	b.n	2fa6e <nrfx_spim_init+0x152>
        return err_code;
   2fa6c:	4810      	ldr	r0, [pc, #64]	; (2fab0 <nrfx_spim_init+0x194>)
}
   2fa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return err_code;
   2fa72:	480d      	ldr	r0, [pc, #52]	; (2faa8 <nrfx_spim_init+0x18c>)
   2fa74:	e7fb      	b.n	2fa6e <nrfx_spim_init+0x152>
   2fa76:	480c      	ldr	r0, [pc, #48]	; (2faa8 <nrfx_spim_init+0x18c>)
   2fa78:	e7f9      	b.n	2fa6e <nrfx_spim_init+0x152>
   2fa7a:	480b      	ldr	r0, [pc, #44]	; (2faa8 <nrfx_spim_init+0x18c>)
   2fa7c:	e7f7      	b.n	2fa6e <nrfx_spim_init+0x152>
            return err_code;
   2fa7e:	480b      	ldr	r0, [pc, #44]	; (2faac <nrfx_spim_init+0x190>)
   2fa80:	e7f5      	b.n	2fa6e <nrfx_spim_init+0x152>
   2fa82:	480a      	ldr	r0, [pc, #40]	; (2faac <nrfx_spim_init+0x190>)
   2fa84:	e7f3      	b.n	2fa6e <nrfx_spim_init+0x152>
   2fa86:	4809      	ldr	r0, [pc, #36]	; (2faac <nrfx_spim_init+0x190>)
   2fa88:	e7f1      	b.n	2fa6e <nrfx_spim_init+0x152>
   2fa8a:	4808      	ldr	r0, [pc, #32]	; (2faac <nrfx_spim_init+0x190>)
   2fa8c:	e7ef      	b.n	2fa6e <nrfx_spim_init+0x152>
   2fa8e:	bf00      	nop
   2fa90:	2000c508 	.word	0x2000c508
   2fa94:	4000a000 	.word	0x4000a000
   2fa98:	0bad0000 	.word	0x0bad0000
   2fa9c:	00045914 	.word	0x00045914
   2faa0:	00045784 	.word	0x00045784
   2faa4:	0003f72c 	.word	0x0003f72c
   2faa8:	0bad0003 	.word	0x0bad0003
   2faac:	0bad0004 	.word	0x0bad0004
   2fab0:	0bad0005 	.word	0x0bad0005

0002fab4 <nrfx_spim_uninit>:
{
   2fab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2fab6:	7904      	ldrb	r4, [r0, #4]
   2fab8:	4f2a      	ldr	r7, [pc, #168]	; (2fb64 <nrfx_spim_uninit+0xb0>)
   2faba:	eb07 1744 	add.w	r7, r7, r4, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2fabe:	7f3b      	ldrb	r3, [r7, #28]
   2fac0:	b30b      	cbz	r3, 2fb06 <nrfx_spim_uninit+0x52>
   2fac2:	4605      	mov	r5, r0
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
   2fac4:	6806      	ldr	r6, [r0, #0]
    if (p_cb->handler)
   2fac6:	0163      	lsls	r3, r4, #5
   2fac8:	4a26      	ldr	r2, [pc, #152]	; (2fb64 <nrfx_spim_uninit+0xb0>)
   2faca:	58d3      	ldr	r3, [r2, r3]
   2facc:	b15b      	cbz	r3, 2fae6 <nrfx_spim_uninit+0x32>
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   2face:	f346 3007 	sbfx	r0, r6, #12, #8
   2fad2:	f008 faf0 	bl	380b6 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2fad6:	4b24      	ldr	r3, [pc, #144]	; (2fb68 <nrfx_spim_uninit+0xb4>)
   2fad8:	f8c6 3308 	str.w	r3, [r6, #776]	; 0x308
        if (p_cb->transfer_in_progress)
   2fadc:	4b21      	ldr	r3, [pc, #132]	; (2fb64 <nrfx_spim_uninit+0xb0>)
   2fade:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   2fae2:	7f5b      	ldrb	r3, [r3, #29]
   2fae4:	b9e3      	cbnz	r3, 2fb20 <nrfx_spim_uninit+0x6c>
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
   2fae6:	2300      	movs	r3, #0
   2fae8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    if (!p_cb->skip_gpio_cfg)
   2faec:	4b1d      	ldr	r3, [pc, #116]	; (2fb64 <nrfx_spim_uninit+0xb0>)
   2faee:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   2faf2:	7f9b      	ldrb	r3, [r3, #30]
   2faf4:	f013 0f01 	tst.w	r3, #1
   2faf8:	d017      	beq.n	2fb2a <nrfx_spim_uninit+0x76>
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   2fafa:	4b1a      	ldr	r3, [pc, #104]	; (2fb64 <nrfx_spim_uninit+0xb0>)
   2fafc:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   2fb00:	2200      	movs	r2, #0
   2fb02:	771a      	strb	r2, [r3, #28]
}
   2fb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2fb06:	4c19      	ldr	r4, [pc, #100]	; (2fb6c <nrfx_spim_uninit+0xb8>)
   2fb08:	f240 230f 	movw	r3, #527	; 0x20f
   2fb0c:	4622      	mov	r2, r4
   2fb0e:	4918      	ldr	r1, [pc, #96]	; (2fb70 <nrfx_spim_uninit+0xbc>)
   2fb10:	4818      	ldr	r0, [pc, #96]	; (2fb74 <nrfx_spim_uninit+0xc0>)
   2fb12:	f006 fbbf 	bl	36294 <assert_print>
   2fb16:	f240 210f 	movw	r1, #527	; 0x20f
   2fb1a:	4620      	mov	r0, r4
   2fb1c:	f006 fbb3 	bl	36286 <assert_post_action>
            spim_abort(p_spim, p_cb);
   2fb20:	4639      	mov	r1, r7
   2fb22:	4630      	mov	r0, r6
   2fb24:	f00e f873 	bl	3dc0e <spim_abort>
   2fb28:	e7dd      	b.n	2fae6 <nrfx_spim_uninit+0x32>
    return p_reg->PSEL.SCK;
   2fb2a:	f8d6 0508 	ldr.w	r0, [r6, #1288]	; 0x508
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
   2fb2e:	f00e f866 	bl	3dbfe <spim_pin_uninit>
    return p_reg->PSEL.MISO;
   2fb32:	f8d6 0510 	ldr.w	r0, [r6, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
   2fb36:	f00e f862 	bl	3dbfe <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
   2fb3a:	f8d6 050c 	ldr.w	r0, [r6, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
   2fb3e:	f00e f85e 	bl	3dbfe <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   2fb42:	792b      	ldrb	r3, [r5, #4]
   2fb44:	2b02      	cmp	r3, #2
   2fb46:	d008      	beq.n	2fb5a <nrfx_spim_uninit+0xa6>
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   2fb48:	4b06      	ldr	r3, [pc, #24]	; (2fb64 <nrfx_spim_uninit+0xb0>)
   2fb4a:	eb03 1344 	add.w	r3, r3, r4, lsl #5
   2fb4e:	7fd8      	ldrb	r0, [r3, #31]
   2fb50:	28ff      	cmp	r0, #255	; 0xff
   2fb52:	d0d2      	beq.n	2fafa <nrfx_spim_uninit+0x46>
            nrf_gpio_cfg_default(p_cb->ss_pin);
   2fb54:	f00e f840 	bl	3dbd8 <nrf_gpio_cfg_default>
   2fb58:	e7cf      	b.n	2fafa <nrfx_spim_uninit+0x46>
    return p_reg->PSELDCX;
   2fb5a:	f8d6 056c 	ldr.w	r0, [r6, #1388]	; 0x56c
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
   2fb5e:	f00e f84e 	bl	3dbfe <spim_pin_uninit>
   2fb62:	e7f1      	b.n	2fb48 <nrfx_spim_uninit+0x94>
   2fb64:	2000c508 	.word	0x2000c508
   2fb68:	00080152 	.word	0x00080152
   2fb6c:	00045914 	.word	0x00045914
   2fb70:	00045960 	.word	0x00045960
   2fb74:	0003f72c 	.word	0x0003f72c

0002fb78 <nrfx_spim_xfer>:
{
   2fb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   2fb7a:	f890 c004 	ldrb.w	ip, [r0, #4]
   2fb7e:	4d4c      	ldr	r5, [pc, #304]	; (2fcb0 <nrfx_spim_xfer+0x138>)
   2fb80:	eb05 154c 	add.w	r5, r5, ip, lsl #5
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2fb84:	7f2b      	ldrb	r3, [r5, #28]
   2fb86:	2b00      	cmp	r3, #0
   2fb88:	d049      	beq.n	2fc1e <nrfx_spim_xfer+0xa6>
   2fb8a:	4607      	mov	r7, r0
   2fb8c:	460c      	mov	r4, r1
   2fb8e:	4616      	mov	r6, r2
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2fb90:	680b      	ldr	r3, [r1, #0]
   2fb92:	2b00      	cmp	r3, #0
   2fb94:	d050      	beq.n	2fc38 <nrfx_spim_xfer+0xc0>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   2fb96:	68a3      	ldr	r3, [r4, #8]
   2fb98:	2b00      	cmp	r3, #0
   2fb9a:	d05d      	beq.n	2fc58 <nrfx_spim_xfer+0xe0>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2fb9c:	f1bc 0f02 	cmp.w	ip, #2
   2fba0:	d86a      	bhi.n	2fc78 <nrfx_spim_xfer+0x100>
   2fba2:	68e3      	ldr	r3, [r4, #12]
   2fba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2fba8:	d266      	bcs.n	2fc78 <nrfx_spim_xfer+0x100>
   2fbaa:	6863      	ldr	r3, [r4, #4]
   2fbac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2fbb0:	d262      	bcs.n	2fc78 <nrfx_spim_xfer+0x100>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2fbb2:	f016 0f08 	tst.w	r6, #8
   2fbb6:	d00c      	beq.n	2fbd2 <nrfx_spim_xfer+0x5a>
   2fbb8:	4b3d      	ldr	r3, [pc, #244]	; (2fcb0 <nrfx_spim_xfer+0x138>)
   2fbba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   2fbbe:	7f9b      	ldrb	r3, [r3, #30]
   2fbc0:	f013 0f04 	tst.w	r3, #4
   2fbc4:	d105      	bne.n	2fbd2 <nrfx_spim_xfer+0x5a>
   2fbc6:	4b3a      	ldr	r3, [pc, #232]	; (2fcb0 <nrfx_spim_xfer+0x138>)
   2fbc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   2fbcc:	7fdb      	ldrb	r3, [r3, #31]
   2fbce:	2bff      	cmp	r3, #255	; 0xff
   2fbd0:	d15f      	bne.n	2fc92 <nrfx_spim_xfer+0x11a>
    if (p_cb->transfer_in_progress)
   2fbd2:	4b37      	ldr	r3, [pc, #220]	; (2fcb0 <nrfx_spim_xfer+0x138>)
   2fbd4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   2fbd8:	7f5b      	ldrb	r3, [r3, #29]
   2fbda:	2b00      	cmp	r3, #0
   2fbdc:	d166      	bne.n	2fcac <nrfx_spim_xfer+0x134>
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
   2fbde:	ea4f 134c 	mov.w	r3, ip, lsl #5
   2fbe2:	4a33      	ldr	r2, [pc, #204]	; (2fcb0 <nrfx_spim_xfer+0x138>)
   2fbe4:	58d3      	ldr	r3, [r2, r3]
   2fbe6:	b133      	cbz	r3, 2fbf6 <nrfx_spim_xfer+0x7e>
   2fbe8:	f016 0f14 	tst.w	r6, #20
   2fbec:	d103      	bne.n	2fbf6 <nrfx_spim_xfer+0x7e>
            p_cb->transfer_in_progress = true;
   2fbee:	eb02 134c 	add.w	r3, r2, ip, lsl #5
   2fbf2:	2201      	movs	r2, #1
   2fbf4:	775a      	strb	r2, [r3, #29]
    p_cb->evt.xfer_desc = *p_xfer_desc;
   2fbf6:	492e      	ldr	r1, [pc, #184]	; (2fcb0 <nrfx_spim_xfer+0x138>)
   2fbf8:	eb01 1c4c 	add.w	ip, r1, ip, lsl #5
   2fbfc:	f10c 0c0c 	add.w	ip, ip, #12
   2fc00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   2fc04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    set_ss_pin_state(p_cb, true);
   2fc08:	2101      	movs	r1, #1
   2fc0a:	4628      	mov	r0, r5
   2fc0c:	f00d ff10 	bl	3da30 <set_ss_pin_state>
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
   2fc10:	4633      	mov	r3, r6
   2fc12:	4622      	mov	r2, r4
   2fc14:	4629      	mov	r1, r5
   2fc16:	6838      	ldr	r0, [r7, #0]
   2fc18:	f7ff fe12 	bl	2f840 <spim_xfer>
}
   2fc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
   2fc1e:	4c25      	ldr	r4, [pc, #148]	; (2fcb4 <nrfx_spim_xfer+0x13c>)
   2fc20:	f240 23de 	movw	r3, #734	; 0x2de
   2fc24:	4622      	mov	r2, r4
   2fc26:	4924      	ldr	r1, [pc, #144]	; (2fcb8 <nrfx_spim_xfer+0x140>)
   2fc28:	4824      	ldr	r0, [pc, #144]	; (2fcbc <nrfx_spim_xfer+0x144>)
   2fc2a:	f006 fb33 	bl	36294 <assert_print>
   2fc2e:	f240 21de 	movw	r1, #734	; 0x2de
   2fc32:	4620      	mov	r0, r4
   2fc34:	f006 fb27 	bl	36286 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
   2fc38:	684b      	ldr	r3, [r1, #4]
   2fc3a:	2b00      	cmp	r3, #0
   2fc3c:	d0ab      	beq.n	2fb96 <nrfx_spim_xfer+0x1e>
   2fc3e:	4c1d      	ldr	r4, [pc, #116]	; (2fcb4 <nrfx_spim_xfer+0x13c>)
   2fc40:	f240 23df 	movw	r3, #735	; 0x2df
   2fc44:	4622      	mov	r2, r4
   2fc46:	491e      	ldr	r1, [pc, #120]	; (2fcc0 <nrfx_spim_xfer+0x148>)
   2fc48:	481c      	ldr	r0, [pc, #112]	; (2fcbc <nrfx_spim_xfer+0x144>)
   2fc4a:	f006 fb23 	bl	36294 <assert_print>
   2fc4e:	f240 21df 	movw	r1, #735	; 0x2df
   2fc52:	4620      	mov	r0, r4
   2fc54:	f006 fb17 	bl	36286 <assert_post_action>
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);
   2fc58:	68e3      	ldr	r3, [r4, #12]
   2fc5a:	2b00      	cmp	r3, #0
   2fc5c:	d09e      	beq.n	2fb9c <nrfx_spim_xfer+0x24>
   2fc5e:	4c15      	ldr	r4, [pc, #84]	; (2fcb4 <nrfx_spim_xfer+0x13c>)
   2fc60:	f44f 7338 	mov.w	r3, #736	; 0x2e0
   2fc64:	4622      	mov	r2, r4
   2fc66:	4917      	ldr	r1, [pc, #92]	; (2fcc4 <nrfx_spim_xfer+0x14c>)
   2fc68:	4814      	ldr	r0, [pc, #80]	; (2fcbc <nrfx_spim_xfer+0x144>)
   2fc6a:	f006 fb13 	bl	36294 <assert_print>
   2fc6e:	f44f 7138 	mov.w	r1, #736	; 0x2e0
   2fc72:	4620      	mov	r0, r4
   2fc74:	f006 fb07 	bl	36286 <assert_post_action>
    NRFX_ASSERT(SPIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
   2fc78:	4c0e      	ldr	r4, [pc, #56]	; (2fcb4 <nrfx_spim_xfer+0x13c>)
   2fc7a:	f240 23e1 	movw	r3, #737	; 0x2e1
   2fc7e:	4622      	mov	r2, r4
   2fc80:	4911      	ldr	r1, [pc, #68]	; (2fcc8 <nrfx_spim_xfer+0x150>)
   2fc82:	480e      	ldr	r0, [pc, #56]	; (2fcbc <nrfx_spim_xfer+0x144>)
   2fc84:	f006 fb06 	bl	36294 <assert_print>
   2fc88:	f240 21e1 	movw	r1, #737	; 0x2e1
   2fc8c:	4620      	mov	r0, r4
   2fc8e:	f006 fafa 	bl	36286 <assert_post_action>
    NRFX_ASSERT(!(flags & NRFX_SPIM_FLAG_HOLD_XFER) ||
   2fc92:	4c08      	ldr	r4, [pc, #32]	; (2fcb4 <nrfx_spim_xfer+0x13c>)
   2fc94:	f44f 7339 	mov.w	r3, #740	; 0x2e4
   2fc98:	4622      	mov	r2, r4
   2fc9a:	490c      	ldr	r1, [pc, #48]	; (2fccc <nrfx_spim_xfer+0x154>)
   2fc9c:	4807      	ldr	r0, [pc, #28]	; (2fcbc <nrfx_spim_xfer+0x144>)
   2fc9e:	f006 faf9 	bl	36294 <assert_print>
   2fca2:	f44f 7139 	mov.w	r1, #740	; 0x2e4
   2fca6:	4620      	mov	r0, r4
   2fca8:	f006 faed 	bl	36286 <assert_post_action>
        return err_code;
   2fcac:	4808      	ldr	r0, [pc, #32]	; (2fcd0 <nrfx_spim_xfer+0x158>)
   2fcae:	e7b5      	b.n	2fc1c <nrfx_spim_xfer+0xa4>
   2fcb0:	2000c508 	.word	0x2000c508
   2fcb4:	00045914 	.word	0x00045914
   2fcb8:	00045960 	.word	0x00045960
   2fcbc:	0003f72c 	.word	0x0003f72c
   2fcc0:	0004598c 	.word	0x0004598c
   2fcc4:	000459d4 	.word	0x000459d4
   2fcc8:	00045a1c 	.word	0x00045a1c
   2fccc:	00045bd8 	.word	0x00045bd8
   2fcd0:	0bad000b 	.word	0x0bad000b

0002fcd4 <nrfx_spim_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_SPIM2_ENABLED)
void nrfx_spim_2_irq_handler(void)
{
   2fcd4:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM2, &m_cb[NRFX_SPIM2_INST_IDX]);
   2fcd6:	4902      	ldr	r1, [pc, #8]	; (2fce0 <nrfx_spim_2_irq_handler+0xc>)
   2fcd8:	4802      	ldr	r0, [pc, #8]	; (2fce4 <nrfx_spim_2_irq_handler+0x10>)
   2fcda:	f7ff fdfb 	bl	2f8d4 <irq_handler>
}
   2fcde:	bd08      	pop	{r3, pc}
   2fce0:	2000c508 	.word	0x2000c508
   2fce4:	4000b000 	.word	0x4000b000

0002fce8 <nrfx_spim_3_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPIM3_ENABLED)
void nrfx_spim_3_irq_handler(void)
{
   2fce8:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM3, &m_cb[NRFX_SPIM3_INST_IDX]);
   2fcea:	4902      	ldr	r1, [pc, #8]	; (2fcf4 <nrfx_spim_3_irq_handler+0xc>)
   2fcec:	4802      	ldr	r0, [pc, #8]	; (2fcf8 <nrfx_spim_3_irq_handler+0x10>)
   2fcee:	f7ff fdf1 	bl	2f8d4 <irq_handler>
}
   2fcf2:	bd08      	pop	{r3, pc}
   2fcf4:	2000c528 	.word	0x2000c528
   2fcf8:	4000c000 	.word	0x4000c000

0002fcfc <nrfx_spim_4_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPIM4_ENABLED)
void nrfx_spim_4_irq_handler(void)
{
   2fcfc:	b508      	push	{r3, lr}
    irq_handler(NRF_SPIM4, &m_cb[NRFX_SPIM4_INST_IDX]);
   2fcfe:	4902      	ldr	r1, [pc, #8]	; (2fd08 <nrfx_spim_4_irq_handler+0xc>)
   2fd00:	4802      	ldr	r0, [pc, #8]	; (2fd0c <nrfx_spim_4_irq_handler+0x10>)
   2fd02:	f7ff fde7 	bl	2f8d4 <irq_handler>
}
   2fd06:	bd08      	pop	{r3, pc}
   2fd08:	2000c548 	.word	0x2000c548
   2fd0c:	4000a000 	.word	0x4000a000

0002fd10 <metal_generic_dev_open>:
	return 0;
}

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
   2fd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fd12:	460d      	mov	r5, r1
   2fd14:	4617      	mov	r7, r2
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
   2fd16:	4b0c      	ldr	r3, [pc, #48]	; (2fd48 <metal_generic_dev_open+0x38>)
   2fd18:	699c      	ldr	r4, [r3, #24]
   2fd1a:	e000      	b.n	2fd1e <metal_generic_dev_open+0xe>
   2fd1c:	6824      	ldr	r4, [r4, #0]
   2fd1e:	4b0b      	ldr	r3, [pc, #44]	; (2fd4c <metal_generic_dev_open+0x3c>)
   2fd20:	429c      	cmp	r4, r3
   2fd22:	d00d      	beq.n	2fd40 <metal_generic_dev_open+0x30>
		dev = metal_container_of(node, struct metal_device, node);
   2fd24:	f1a4 0644 	sub.w	r6, r4, #68	; 0x44
		if (strcmp(dev->name, dev_name) == 0) {
   2fd28:	4629      	mov	r1, r5
   2fd2a:	f854 0c44 	ldr.w	r0, [r4, #-68]
   2fd2e:	f008 fb21 	bl	38374 <strcmp>
   2fd32:	2800      	cmp	r0, #0
   2fd34:	d1f2      	bne.n	2fd1c <metal_generic_dev_open+0xc>
			*device = dev;
   2fd36:	603e      	str	r6, [r7, #0]
			return metal_generic_dev_sys_open(dev);
   2fd38:	4630      	mov	r0, r6
   2fd3a:	f00e f89a 	bl	3de72 <metal_generic_dev_sys_open>
   2fd3e:	e001      	b.n	2fd44 <metal_generic_dev_open+0x34>
		}
	}

	return -ENODEV;
   2fd40:	f06f 0012 	mvn.w	r0, #18
}
   2fd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fd46:	bf00      	nop
   2fd48:	2000c568 	.word	0x2000c568
   2fd4c:	2000c580 	.word	0x2000c580

0002fd50 <metal_bus_unregister>:
{
   2fd50:	b510      	push	{r4, lr}
   2fd52:	4604      	mov	r4, r0
	metal_list_del(&bus->node);
   2fd54:	f100 0324 	add.w	r3, r0, #36	; 0x24
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
	node->next->prev = node->prev;
   2fd58:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2fd5a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   2fd5c:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   2fd5e:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2fd60:	6011      	str	r1, [r2, #0]
	node->prev = node;
   2fd62:	6283      	str	r3, [r0, #40]	; 0x28
	node->next = node;
   2fd64:	6243      	str	r3, [r0, #36]	; 0x24
	if (bus->ops.bus_close)
   2fd66:	6843      	ldr	r3, [r0, #4]
   2fd68:	b103      	cbz	r3, 2fd6c <metal_bus_unregister+0x1c>
		bus->ops.bus_close(bus);
   2fd6a:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
   2fd6c:	4b06      	ldr	r3, [pc, #24]	; (2fd88 <metal_bus_unregister+0x38>)
   2fd6e:	781b      	ldrb	r3, [r3, #0]
   2fd70:	2b06      	cmp	r3, #6
   2fd72:	d906      	bls.n	2fd82 <metal_bus_unregister+0x32>
   2fd74:	4b04      	ldr	r3, [pc, #16]	; (2fd88 <metal_bus_unregister+0x38>)
   2fd76:	685b      	ldr	r3, [r3, #4]
   2fd78:	b11b      	cbz	r3, 2fd82 <metal_bus_unregister+0x32>
   2fd7a:	6822      	ldr	r2, [r4, #0]
   2fd7c:	4903      	ldr	r1, [pc, #12]	; (2fd8c <metal_bus_unregister+0x3c>)
   2fd7e:	2007      	movs	r0, #7
   2fd80:	4798      	blx	r3
}
   2fd82:	2000      	movs	r0, #0
   2fd84:	bd10      	pop	{r4, pc}
   2fd86:	bf00      	nop
   2fd88:	2000c568 	.word	0x2000c568
   2fd8c:	00045c34 	.word	0x00045c34

0002fd90 <metal_bus_find>:
{
   2fd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fd92:	4605      	mov	r5, r0
   2fd94:	460f      	mov	r7, r1
	metal_list_for_each(&_metal.common.bus_list, node) {
   2fd96:	4b0c      	ldr	r3, [pc, #48]	; (2fdc8 <metal_bus_find+0x38>)
   2fd98:	689c      	ldr	r4, [r3, #8]
   2fd9a:	e000      	b.n	2fd9e <metal_bus_find+0xe>
   2fd9c:	6824      	ldr	r4, [r4, #0]
   2fd9e:	4b0b      	ldr	r3, [pc, #44]	; (2fdcc <metal_bus_find+0x3c>)
   2fda0:	429c      	cmp	r4, r3
   2fda2:	d00d      	beq.n	2fdc0 <metal_bus_find+0x30>
		bus = metal_container_of(node, struct metal_bus, node);
   2fda4:	f1a4 0624 	sub.w	r6, r4, #36	; 0x24
		if (strcmp(bus->name, name) == 0 && result) {
   2fda8:	4629      	mov	r1, r5
   2fdaa:	f854 0c24 	ldr.w	r0, [r4, #-36]
   2fdae:	f008 fae1 	bl	38374 <strcmp>
   2fdb2:	4603      	mov	r3, r0
   2fdb4:	2800      	cmp	r0, #0
   2fdb6:	d1f1      	bne.n	2fd9c <metal_bus_find+0xc>
   2fdb8:	2f00      	cmp	r7, #0
   2fdba:	d0ef      	beq.n	2fd9c <metal_bus_find+0xc>
			*result = bus;
   2fdbc:	603e      	str	r6, [r7, #0]
			return 0;
   2fdbe:	e001      	b.n	2fdc4 <metal_bus_find+0x34>
	return -ENOENT;
   2fdc0:	f06f 0301 	mvn.w	r3, #1
}
   2fdc4:	4618      	mov	r0, r3
   2fdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2fdc8:	2000c568 	.word	0x2000c568
   2fdcc:	2000c570 	.word	0x2000c570

0002fdd0 <metal_bus_register>:
	if (!bus || !bus->name || !strlen(bus->name))
   2fdd0:	b380      	cbz	r0, 2fe34 <metal_bus_register+0x64>
{
   2fdd2:	b510      	push	{r4, lr}
   2fdd4:	4604      	mov	r4, r0
	if (!bus || !bus->name || !strlen(bus->name))
   2fdd6:	6800      	ldr	r0, [r0, #0]
   2fdd8:	b310      	cbz	r0, 2fe20 <metal_bus_register+0x50>
   2fdda:	f008 fab8 	bl	3834e <strlen>
   2fdde:	b1f8      	cbz	r0, 2fe20 <metal_bus_register+0x50>
	if (metal_bus_find(bus->name, NULL) == 0)
   2fde0:	2100      	movs	r1, #0
   2fde2:	6820      	ldr	r0, [r4, #0]
   2fde4:	f7ff ffd4 	bl	2fd90 <metal_bus_find>
   2fde8:	b1e8      	cbz	r0, 2fe26 <metal_bus_register+0x56>
	metal_list_init(&bus->devices);
   2fdea:	f104 031c 	add.w	r3, r4, #28
	list->prev = list;
   2fdee:	6223      	str	r3, [r4, #32]
	list->next = list;
   2fdf0:	61e3      	str	r3, [r4, #28]
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
   2fdf2:	f104 0224 	add.w	r2, r4, #36	; 0x24
	new_node->prev = node->prev;
   2fdf6:	4b11      	ldr	r3, [pc, #68]	; (2fe3c <metal_bus_register+0x6c>)
   2fdf8:	68d9      	ldr	r1, [r3, #12]
   2fdfa:	62a1      	str	r1, [r4, #40]	; 0x28
	new_node->next = node;
   2fdfc:	f103 0008 	add.w	r0, r3, #8
   2fe00:	6260      	str	r0, [r4, #36]	; 0x24
	new_node->next->prev = new_node;
   2fe02:	60da      	str	r2, [r3, #12]
	new_node->prev->next = new_node;
   2fe04:	600a      	str	r2, [r1, #0]
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
   2fe06:	781b      	ldrb	r3, [r3, #0]
   2fe08:	2b06      	cmp	r3, #6
   2fe0a:	d90f      	bls.n	2fe2c <metal_bus_register+0x5c>
   2fe0c:	f1a0 0308 	sub.w	r3, r0, #8
   2fe10:	685b      	ldr	r3, [r3, #4]
   2fe12:	b16b      	cbz	r3, 2fe30 <metal_bus_register+0x60>
   2fe14:	6822      	ldr	r2, [r4, #0]
   2fe16:	490a      	ldr	r1, [pc, #40]	; (2fe40 <metal_bus_register+0x70>)
   2fe18:	2007      	movs	r0, #7
   2fe1a:	4798      	blx	r3
	return 0;
   2fe1c:	2000      	movs	r0, #0
   2fe1e:	e006      	b.n	2fe2e <metal_bus_register+0x5e>
		return -EINVAL;
   2fe20:	f06f 0015 	mvn.w	r0, #21
   2fe24:	e003      	b.n	2fe2e <metal_bus_register+0x5e>
		return -EEXIST;
   2fe26:	f06f 0010 	mvn.w	r0, #16
   2fe2a:	e000      	b.n	2fe2e <metal_bus_register+0x5e>
	return 0;
   2fe2c:	2000      	movs	r0, #0
}
   2fe2e:	bd10      	pop	{r4, pc}
	return 0;
   2fe30:	2000      	movs	r0, #0
   2fe32:	e7fc      	b.n	2fe2e <metal_bus_register+0x5e>
		return -EINVAL;
   2fe34:	f06f 0015 	mvn.w	r0, #21
}
   2fe38:	4770      	bx	lr
   2fe3a:	bf00      	nop
   2fe3c:	2000c568 	.word	0x2000c568
   2fe40:	00045c4c 	.word	0x00045c4c

0002fe44 <metal_device_close>:
{
   2fe44:	b510      	push	{r4, lr}
	metal_assert(device && device->bus);
   2fe46:	b130      	cbz	r0, 2fe56 <metal_device_close+0x12>
   2fe48:	4601      	mov	r1, r0
   2fe4a:	6840      	ldr	r0, [r0, #4]
   2fe4c:	b118      	cbz	r0, 2fe56 <metal_device_close+0x12>
	if (device->bus->ops.dev_close)
   2fe4e:	68c3      	ldr	r3, [r0, #12]
   2fe50:	b103      	cbz	r3, 2fe54 <metal_device_close+0x10>
		device->bus->ops.dev_close(device->bus, device);
   2fe52:	4798      	blx	r3
}
   2fe54:	bd10      	pop	{r4, pc}
	metal_assert(device && device->bus);
   2fe56:	4c05      	ldr	r4, [pc, #20]	; (2fe6c <metal_device_close+0x28>)
   2fe58:	2351      	movs	r3, #81	; 0x51
   2fe5a:	4622      	mov	r2, r4
   2fe5c:	4904      	ldr	r1, [pc, #16]	; (2fe70 <metal_device_close+0x2c>)
   2fe5e:	4805      	ldr	r0, [pc, #20]	; (2fe74 <metal_device_close+0x30>)
   2fe60:	f006 fa18 	bl	36294 <assert_print>
   2fe64:	2151      	movs	r1, #81	; 0x51
   2fe66:	4620      	mov	r0, r4
   2fe68:	f006 fa0d 	bl	36286 <assert_post_action>
   2fe6c:	00045c60 	.word	0x00045c60
   2fe70:	00045c98 	.word	0x00045c98
   2fe74:	0003f72c 	.word	0x0003f72c

0002fe78 <metal_register_generic_device>:
{
   2fe78:	b510      	push	{r4, lr}
   2fe7a:	4604      	mov	r4, r0
	if (!device->name || !strlen(device->name) ||
   2fe7c:	6800      	ldr	r0, [r0, #0]
   2fe7e:	b198      	cbz	r0, 2fea8 <metal_register_generic_device+0x30>
   2fe80:	f008 fa65 	bl	3834e <strlen>
   2fe84:	b180      	cbz	r0, 2fea8 <metal_register_generic_device+0x30>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
   2fe86:	68a3      	ldr	r3, [r4, #8]
	if (!device->name || !strlen(device->name) ||
   2fe88:	2b01      	cmp	r3, #1
   2fe8a:	d80d      	bhi.n	2fea8 <metal_register_generic_device+0x30>
	device->bus = &metal_generic_bus;
   2fe8c:	4b08      	ldr	r3, [pc, #32]	; (2feb0 <metal_register_generic_device+0x38>)
   2fe8e:	6063      	str	r3, [r4, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
   2fe90:	f104 0144 	add.w	r1, r4, #68	; 0x44
	new_node->prev = node->prev;
   2fe94:	4b07      	ldr	r3, [pc, #28]	; (2feb4 <metal_register_generic_device+0x3c>)
   2fe96:	69da      	ldr	r2, [r3, #28]
   2fe98:	64a2      	str	r2, [r4, #72]	; 0x48
	new_node->next = node;
   2fe9a:	f103 0018 	add.w	r0, r3, #24
   2fe9e:	6460      	str	r0, [r4, #68]	; 0x44
	new_node->next->prev = new_node;
   2fea0:	61d9      	str	r1, [r3, #28]
	new_node->prev->next = new_node;
   2fea2:	6011      	str	r1, [r2, #0]
	return 0;
   2fea4:	2000      	movs	r0, #0
}
   2fea6:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2fea8:	f06f 0015 	mvn.w	r0, #21
   2feac:	e7fb      	b.n	2fea6 <metal_register_generic_device+0x2e>
   2feae:	bf00      	nop
   2feb0:	200087f8 	.word	0x200087f8
   2feb4:	2000c568 	.word	0x2000c568

0002feb8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
   2feb8:	b538      	push	{r3, r4, r5, lr}
   2feba:	4605      	mov	r5, r0
	int error = 0;

	memset(&_metal, 0, sizeof(_metal));
   2febc:	4c0c      	ldr	r4, [pc, #48]	; (2fef0 <metal_init+0x38>)
   2febe:	2220      	movs	r2, #32
   2fec0:	2100      	movs	r1, #0
   2fec2:	4620      	mov	r0, r4
   2fec4:	f008 fac8 	bl	38458 <memset>

	_metal.common.log_handler   = params->log_handler;
   2fec8:	682b      	ldr	r3, [r5, #0]
   2feca:	6063      	str	r3, [r4, #4]
	_metal.common.log_level     = params->log_level;
   2fecc:	792a      	ldrb	r2, [r5, #4]
   2fece:	4623      	mov	r3, r4
   2fed0:	f803 2b08 	strb.w	r2, [r3], #8
	list->prev = list;
   2fed4:	60e3      	str	r3, [r4, #12]
	list->next = list;
   2fed6:	60a3      	str	r3, [r4, #8]
	list->prev = list;
   2fed8:	f104 0310 	add.w	r3, r4, #16
   2fedc:	6163      	str	r3, [r4, #20]
	list->next = list;
   2fede:	6123      	str	r3, [r4, #16]
	list->prev = list;
   2fee0:	f104 0318 	add.w	r3, r4, #24
   2fee4:	61e3      	str	r3, [r4, #28]
	list->next = list;
   2fee6:	61a3      	str	r3, [r4, #24]

	metal_list_init(&_metal.common.bus_list);
	metal_list_init(&_metal.common.generic_shmem_list);
	metal_list_init(&_metal.common.generic_device_list);

	error = metal_sys_init(params);
   2fee8:	4628      	mov	r0, r5
   2feea:	f000 f80f 	bl	2ff0c <metal_sys_init>
	if (error)
		return error;

	return error;
}
   2feee:	bd38      	pop	{r3, r4, r5, pc}
   2fef0:	2000c568 	.word	0x2000c568

0002fef4 <metal_finish>:

void metal_finish(void)
{
   2fef4:	b508      	push	{r3, lr}
	metal_sys_finish();
   2fef6:	f000 f811 	bl	2ff1c <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
   2fefa:	2220      	movs	r2, #32
   2fefc:	2100      	movs	r1, #0
   2fefe:	4802      	ldr	r0, [pc, #8]	; (2ff08 <metal_finish+0x14>)
   2ff00:	f008 faaa 	bl	38458 <memset>
}
   2ff04:	bd08      	pop	{r3, pc}
   2ff06:	bf00      	nop
   2ff08:	2000c568 	.word	0x2000c568

0002ff0c <metal_sys_init>:
#include <metal/utilities.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
   2ff0c:	b508      	push	{r3, lr}
	metal_bus_register(&metal_generic_bus);
   2ff0e:	4802      	ldr	r0, [pc, #8]	; (2ff18 <metal_sys_init+0xc>)
   2ff10:	f7ff ff5e 	bl	2fdd0 <metal_bus_register>
	return 0;
}
   2ff14:	2000      	movs	r0, #0
   2ff16:	bd08      	pop	{r3, pc}
   2ff18:	200087f8 	.word	0x200087f8

0002ff1c <metal_sys_finish>:

void metal_sys_finish(void)
{
   2ff1c:	b508      	push	{r3, lr}
	metal_bus_unregister(&metal_generic_bus);
   2ff1e:	4802      	ldr	r0, [pc, #8]	; (2ff28 <metal_sys_finish+0xc>)
   2ff20:	f7ff ff16 	bl	2fd50 <metal_bus_unregister>
}
   2ff24:	bd08      	pop	{r3, pc}
   2ff26:	bf00      	nop
   2ff28:	200087f8 	.word	0x200087f8

0002ff2c <metal_zephyr_log_handler>:
	"metal: debug:     ",
};

void metal_zephyr_log_handler(enum metal_log_level level,
			      const char *format, ...)
{
   2ff2c:	b40e      	push	{r1, r2, r3}
   2ff2e:	b500      	push	{lr}
   2ff30:	b082      	sub	sp, #8
	va_list args;

	if (level <= METAL_LOG_EMERGENCY || level > METAL_LOG_DEBUG)
   2ff32:	1e43      	subs	r3, r0, #1
   2ff34:	b2db      	uxtb	r3, r3
   2ff36:	2b06      	cmp	r3, #6
   2ff38:	d900      	bls.n	2ff3c <metal_zephyr_log_handler+0x10>
		level = METAL_LOG_EMERGENCY;
   2ff3a:	2000      	movs	r0, #0
	printk("%s", level_strs[level]);
   2ff3c:	4b07      	ldr	r3, [pc, #28]	; (2ff5c <metal_zephyr_log_handler+0x30>)
   2ff3e:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   2ff42:	4807      	ldr	r0, [pc, #28]	; (2ff60 <metal_zephyr_log_handler+0x34>)
   2ff44:	f005 fd55 	bl	359f2 <printk>

	va_start(args, format);
   2ff48:	a904      	add	r1, sp, #16
   2ff4a:	9101      	str	r1, [sp, #4]
	vprintk(format, args);
   2ff4c:	9803      	ldr	r0, [sp, #12]
   2ff4e:	f005 fd4c 	bl	359ea <vprintk>
	va_end(args);
}
   2ff52:	b002      	add	sp, #8
   2ff54:	f85d eb04 	ldr.w	lr, [sp], #4
   2ff58:	b003      	add	sp, #12
   2ff5a:	4770      	bx	lr
   2ff5c:	00045d50 	.word	0x00045d50
   2ff60:	0003ff2c 	.word	0x0003ff2c

0002ff64 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback callbacks[])
{
   2ff64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff68:	b087      	sub	sp, #28
   2ff6a:	9204      	str	r2, [sp, #16]
   2ff6c:	9305      	str	r3, [sp, #20]
   2ff6e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
   2ff72:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (nvqs > num_vrings)
   2ff74:	4293      	cmp	r3, r2
   2ff76:	d341      	bcc.n	2fffc <virtio_create_virtqueues+0x98>
   2ff78:	4605      	mov	r5, r0
		return ERROR_VQUEUE_INVLD_PARAM;
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
   2ff7a:	2400      	movs	r4, #0
   2ff7c:	e01d      	b.n	2ffba <virtio_create_virtqueues+0x56>
			size_t offset;
			struct metal_io_region *io = vring_info->io;

			offset = metal_io_virt_to_offset(io,
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
   2ff7e:	6899      	ldr	r1, [r3, #8]
   2ff80:	8998      	ldrh	r0, [r3, #12]
   2ff82:	f00d ff78 	bl	3de76 <vring_size>
   2ff86:	4603      	mov	r3, r0
   2ff88:	2200      	movs	r2, #0
   2ff8a:	4639      	mov	r1, r7
   2ff8c:	4650      	mov	r0, sl
   2ff8e:	f00d ff2c 	bl	3ddea <metal_io_block_set>
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
				       callbacks[i], vdev->func->notify,
   2ff92:	6a2b      	ldr	r3, [r5, #32]
   2ff94:	6a1b      	ldr	r3, [r3, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
   2ff96:	f856 2009 	ldr.w	r2, [r6, r9]
   2ff9a:	9202      	str	r2, [sp, #8]
   2ff9c:	9301      	str	r3, [sp, #4]
   2ff9e:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
   2ffa2:	9300      	str	r3, [sp, #0]
   2ffa4:	4643      	mov	r3, r8
   2ffa6:	9a05      	ldr	r2, [sp, #20]
   2ffa8:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   2ffac:	b2a1      	uxth	r1, r4
   2ffae:	4628      	mov	r0, r5
   2ffb0:	f00e f8aa 	bl	3e108 <virtqueue_create>
				       vring_info->vq);
		if (ret)
   2ffb4:	4603      	mov	r3, r0
   2ffb6:	b9e8      	cbnz	r0, 2fff4 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
   2ffb8:	3401      	adds	r4, #1
   2ffba:	9b04      	ldr	r3, [sp, #16]
   2ffbc:	429c      	cmp	r4, r3
   2ffbe:	d218      	bcs.n	2fff2 <virtio_create_virtqueues+0x8e>
		vring_info = &vdev->vrings_info[i];
   2ffc0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
   2ffc2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   2ffc6:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   2ffca:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
		vring_alloc = &vring_info->info;
   2ffce:	f103 0804 	add.w	r8, r3, #4
		if (vdev->role == VIRTIO_DEV_DRIVER) {
   2ffd2:	69aa      	ldr	r2, [r5, #24]
   2ffd4:	2a00      	cmp	r2, #0
   2ffd6:	d1dc      	bne.n	2ff92 <virtio_create_virtqueues+0x2e>
			struct metal_io_region *io = vring_info->io;
   2ffd8:	f8d3 a014 	ldr.w	sl, [r3, #20]
			offset = metal_io_virt_to_offset(io,
   2ffdc:	685f      	ldr	r7, [r3, #4]
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   2ffde:	f8da 2000 	ldr.w	r2, [sl]
   2ffe2:	1abf      	subs	r7, r7, r2

	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   2ffe4:	f8da 2008 	ldr.w	r2, [sl, #8]
   2ffe8:	4297      	cmp	r7, r2
   2ffea:	d3c8      	bcc.n	2ff7e <virtio_create_virtqueues+0x1a>
   2ffec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2fff0:	e7c5      	b.n	2ff7e <virtio_create_virtqueues+0x1a>
			return ret;
	}
	return 0;
   2fff2:	2300      	movs	r3, #0
}
   2fff4:	4618      	mov	r0, r3
   2fff6:	b007      	add	sp, #28
   2fff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return ERROR_VQUEUE_INVLD_PARAM;
   2fffc:	4b00      	ldr	r3, [pc, #0]	; (30000 <CONFIG_FLASH_LOAD_SIZE>)
   2fffe:	e7f9      	b.n	2fff4 <virtio_create_virtqueues+0x90>
   30000:	fffff440 	.word	0xfffff440

00030004 <virtqueue_free>:
 * @param vq        - Pointer to VirtIO queue control block
 *
 */
void virtqueue_free(struct virtqueue *vq)
{
	if (vq) {
   30004:	b1a0      	cbz	r0, 30030 <virtqueue_free+0x2c>
{
   30006:	b510      	push	{r4, lr}
   30008:	4604      	mov	r4, r0
		if (vq->vq_free_cnt != vq->vq_nentries) {
   3000a:	8c82      	ldrh	r2, [r0, #36]	; 0x24
   3000c:	8943      	ldrh	r3, [r0, #10]
   3000e:	429a      	cmp	r2, r3
   30010:	d00a      	beq.n	30028 <virtqueue_free+0x24>
			metal_log(METAL_LOG_WARNING,
   30012:	4b08      	ldr	r3, [pc, #32]	; (30034 <virtqueue_free+0x30>)
   30014:	781b      	ldrb	r3, [r3, #0]
   30016:	2b03      	cmp	r3, #3
   30018:	d906      	bls.n	30028 <virtqueue_free+0x24>
   3001a:	4b06      	ldr	r3, [pc, #24]	; (30034 <virtqueue_free+0x30>)
   3001c:	685b      	ldr	r3, [r3, #4]
   3001e:	b11b      	cbz	r3, 30028 <virtqueue_free+0x24>
   30020:	6842      	ldr	r2, [r0, #4]
   30022:	4905      	ldr	r1, [pc, #20]	; (30038 <virtqueue_free+0x34>)
   30024:	2004      	movs	r0, #4
   30026:	4798      	blx	r3
	return k_malloc(size);
}

static inline void metal_free_memory(void *ptr)
{
	k_free(ptr);
   30028:	4620      	mov	r0, r4
   3002a:	f00e ff0e 	bl	3ee4a <k_free>
				  vq->vq_name);
		}

		metal_free_memory(vq);
	}
}
   3002e:	bd10      	pop	{r4, pc}
   30030:	4770      	bx	lr
   30032:	bf00      	nop
   30034:	2000c568 	.word	0x2000c568
   30038:	00045d70 	.word	0x00045d70

0003003c <virtqueue_add_consumed_buffer>:
				  uint32_t len)
{
	struct vring_used_elem *used_desc = NULL;
	uint16_t used_idx;

	if (head_idx >= vq->vq_nentries) {
   3003c:	8943      	ldrh	r3, [r0, #10]
   3003e:	428b      	cmp	r3, r1
   30040:	d916      	bls.n	30070 <virtqueue_add_consumed_buffer+0x34>
{
   30042:	b410      	push	{r4}
	}

	VQUEUE_BUSY(vq);

	/* CACHE: used is never written by driver, so it's safe to directly access it */
	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
   30044:	6a04      	ldr	r4, [r0, #32]
   30046:	f8b4 c002 	ldrh.w	ip, [r4, #2]
   3004a:	3b01      	subs	r3, #1
	used_desc = &vq->vq_ring.used->ring[used_idx];
   3004c:	ea03 030c 	and.w	r3, r3, ip
	used_desc->id = head_idx;
   30050:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   30054:	6059      	str	r1, [r3, #4]
	used_desc->len = len;
   30056:	609a      	str	r2, [r3, #8]

	/* We still need to flush it because this is read by driver */
	VRING_FLUSH(vq->vq_ring.used->ring[used_idx]);

	atomic_thread_fence(memory_order_seq_cst);
   30058:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
   3005c:	6a02      	ldr	r2, [r0, #32]
   3005e:	8853      	ldrh	r3, [r2, #2]
   30060:	3301      	adds	r3, #1
   30062:	8053      	strh	r3, [r2, #2]

	/* Used.idx is read by driver, so we need to flush it */
	VRING_FLUSH(vq->vq_ring.used->idx);

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
   30064:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   30066:	3301      	adds	r3, #1
   30068:	84c3      	strh	r3, [r0, #38]	; 0x26

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
   3006a:	2000      	movs	r0, #0
}
   3006c:	bc10      	pop	{r4}
   3006e:	4770      	bx	lr
		return ERROR_VRING_NO_BUFF;
   30070:	4800      	ldr	r0, [pc, #0]	; (30074 <virtqueue_add_consumed_buffer+0x38>)
}
   30072:	4770      	bx	lr
   30074:	fffff441 	.word	0xfffff441

00030078 <rpmsg_is_address_set>:
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size)
   30078:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   3007c:	d40a      	bmi.n	30094 <rpmsg_is_address_set+0x1c>
   3007e:	428a      	cmp	r2, r1
   30080:	da0a      	bge.n	30098 <rpmsg_is_address_set+0x20>
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
}

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   30082:	0953      	lsrs	r3, r2, #5
   30084:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   30088:	f002 021f 	and.w	r2, r2, #31
   3008c:	40d0      	lsrs	r0, r2
   3008e:	f000 0001 	and.w	r0, r0, #1
		return metal_bitmap_is_bit_set(bitmap, addr);
   30092:	4770      	bx	lr
	else
		return RPMSG_ERR_PARAM;
   30094:	4801      	ldr	r0, [pc, #4]	; (3009c <rpmsg_is_address_set+0x24>)
   30096:	4770      	bx	lr
   30098:	4800      	ldr	r0, [pc, #0]	; (3009c <rpmsg_is_address_set+0x24>)
}
   3009a:	4770      	bx	lr
   3009c:	fffff82d 	.word	0xfffff82d

000300a0 <rpmsg_set_address>:
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
	addr -= RPMSG_RESERVED_ADDRESSES;
	if (addr >= 0 && addr < size) {
   300a0:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   300a4:	d40f      	bmi.n	300c6 <rpmsg_set_address+0x26>
   300a6:	428a      	cmp	r2, r1
   300a8:	da0f      	bge.n	300ca <rpmsg_set_address+0x2a>
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   300aa:	ea4f 1c52 	mov.w	ip, r2, lsr #5
   300ae:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   300b2:	f002 021f 	and.w	r2, r2, #31
   300b6:	2101      	movs	r1, #1
   300b8:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   300bc:	4313      	orrs	r3, r2
   300be:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		metal_bitmap_set_bit(bitmap, addr);
		return RPMSG_SUCCESS;
   300c2:	2000      	movs	r0, #0
   300c4:	4770      	bx	lr
	} else {
		return RPMSG_ERR_PARAM;
   300c6:	4802      	ldr	r0, [pc, #8]	; (300d0 <rpmsg_set_address+0x30>)
   300c8:	4770      	bx	lr
   300ca:	4801      	ldr	r0, [pc, #4]	; (300d0 <rpmsg_set_address+0x30>)
	}
}
   300cc:	4770      	bx	lr
   300ce:	bf00      	nop
   300d0:	fffff82d 	.word	0xfffff82d

000300d4 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int len,
			      int wait)
{
   300d4:	b530      	push	{r4, r5, lr}
   300d6:	b083      	sub	sp, #12
   300d8:	9c06      	ldr	r4, [sp, #24]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   300da:	b188      	cbz	r0, 30100 <rpmsg_send_offchannel_raw+0x2c>
   300dc:	6a00      	ldr	r0, [r0, #32]
   300de:	b188      	cbz	r0, 30104 <rpmsg_send_offchannel_raw+0x30>
   300e0:	b193      	cbz	r3, 30108 <rpmsg_send_offchannel_raw+0x34>
   300e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   300e6:	d011      	beq.n	3010c <rpmsg_send_offchannel_raw+0x38>
   300e8:	2c00      	cmp	r4, #0
   300ea:	db11      	blt.n	30110 <rpmsg_send_offchannel_raw+0x3c>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_raw)
   300ec:	6f85      	ldr	r5, [r0, #120]	; 0x78
   300ee:	b18d      	cbz	r5, 30114 <rpmsg_send_offchannel_raw+0x40>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
   300f0:	f8dd c01c 	ldr.w	ip, [sp, #28]
   300f4:	f8cd c004 	str.w	ip, [sp, #4]
   300f8:	9400      	str	r4, [sp, #0]
   300fa:	47a8      	blx	r5
						     len, wait);

	return RPMSG_ERR_PARAM;
}
   300fc:	b003      	add	sp, #12
   300fe:	bd30      	pop	{r4, r5, pc}
		return RPMSG_ERR_PARAM;
   30100:	4805      	ldr	r0, [pc, #20]	; (30118 <rpmsg_send_offchannel_raw+0x44>)
   30102:	e7fb      	b.n	300fc <rpmsg_send_offchannel_raw+0x28>
   30104:	4804      	ldr	r0, [pc, #16]	; (30118 <rpmsg_send_offchannel_raw+0x44>)
   30106:	e7f9      	b.n	300fc <rpmsg_send_offchannel_raw+0x28>
   30108:	4803      	ldr	r0, [pc, #12]	; (30118 <rpmsg_send_offchannel_raw+0x44>)
   3010a:	e7f7      	b.n	300fc <rpmsg_send_offchannel_raw+0x28>
   3010c:	4802      	ldr	r0, [pc, #8]	; (30118 <rpmsg_send_offchannel_raw+0x44>)
   3010e:	e7f5      	b.n	300fc <rpmsg_send_offchannel_raw+0x28>
   30110:	4801      	ldr	r0, [pc, #4]	; (30118 <rpmsg_send_offchannel_raw+0x44>)
   30112:	e7f3      	b.n	300fc <rpmsg_send_offchannel_raw+0x28>
	return RPMSG_ERR_PARAM;
   30114:	4800      	ldr	r0, [pc, #0]	; (30118 <rpmsg_send_offchannel_raw+0x44>)
   30116:	e7f1      	b.n	300fc <rpmsg_send_offchannel_raw+0x28>
   30118:	fffff82d 	.word	0xfffff82d

0003011c <rpmsg_send_offchannel_nocopy>:
	return NULL;
}

int rpmsg_send_offchannel_nocopy(struct rpmsg_endpoint *ept, uint32_t src,
				 uint32_t dst, const void *data, int len)
{
   3011c:	b530      	push	{r4, r5, lr}
   3011e:	b083      	sub	sp, #12
   30120:	9c06      	ldr	r4, [sp, #24]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY || len < 0)
   30122:	b170      	cbz	r0, 30142 <rpmsg_send_offchannel_nocopy+0x26>
   30124:	6a00      	ldr	r0, [r0, #32]
   30126:	b170      	cbz	r0, 30146 <rpmsg_send_offchannel_nocopy+0x2a>
   30128:	b17b      	cbz	r3, 3014a <rpmsg_send_offchannel_nocopy+0x2e>
   3012a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3012e:	d00e      	beq.n	3014e <rpmsg_send_offchannel_nocopy+0x32>
   30130:	2c00      	cmp	r4, #0
   30132:	db0e      	blt.n	30152 <rpmsg_send_offchannel_nocopy+0x36>
		return RPMSG_ERR_PARAM;

	rdev = ept->rdev;

	if (rdev->ops.send_offchannel_nocopy)
   30134:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
   30138:	b16d      	cbz	r5, 30156 <rpmsg_send_offchannel_nocopy+0x3a>
		return rdev->ops.send_offchannel_nocopy(rdev, src, dst,
   3013a:	9400      	str	r4, [sp, #0]
   3013c:	47a8      	blx	r5
							data, len);

	return RPMSG_ERR_PARAM;
}
   3013e:	b003      	add	sp, #12
   30140:	bd30      	pop	{r4, r5, pc}
		return RPMSG_ERR_PARAM;
   30142:	4806      	ldr	r0, [pc, #24]	; (3015c <rpmsg_send_offchannel_nocopy+0x40>)
   30144:	e7fb      	b.n	3013e <rpmsg_send_offchannel_nocopy+0x22>
   30146:	4805      	ldr	r0, [pc, #20]	; (3015c <rpmsg_send_offchannel_nocopy+0x40>)
   30148:	e7f9      	b.n	3013e <rpmsg_send_offchannel_nocopy+0x22>
   3014a:	4804      	ldr	r0, [pc, #16]	; (3015c <rpmsg_send_offchannel_nocopy+0x40>)
   3014c:	e7f7      	b.n	3013e <rpmsg_send_offchannel_nocopy+0x22>
   3014e:	4803      	ldr	r0, [pc, #12]	; (3015c <rpmsg_send_offchannel_nocopy+0x40>)
   30150:	e7f5      	b.n	3013e <rpmsg_send_offchannel_nocopy+0x22>
   30152:	4802      	ldr	r0, [pc, #8]	; (3015c <rpmsg_send_offchannel_nocopy+0x40>)
   30154:	e7f3      	b.n	3013e <rpmsg_send_offchannel_nocopy+0x22>
	return RPMSG_ERR_PARAM;
   30156:	4801      	ldr	r0, [pc, #4]	; (3015c <rpmsg_send_offchannel_nocopy+0x40>)
   30158:	e7f1      	b.n	3013e <rpmsg_send_offchannel_nocopy+0x22>
   3015a:	bf00      	nop
   3015c:	fffff82d 	.word	0xfffff82d

00030160 <rpmsg_register_endpoint>:
			     struct rpmsg_endpoint *ept,
			     const char *name,
			     uint32_t src, uint32_t dest,
			     rpmsg_ept_cb cb,
			     rpmsg_ns_unbind_cb ns_unbind_cb)
{
   30160:	b570      	push	{r4, r5, r6, lr}
   30162:	4605      	mov	r5, r0
   30164:	460c      	mov	r4, r1
   30166:	461e      	mov	r6, r3
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   30168:	4611      	mov	r1, r2
   3016a:	b1a2      	cbz	r2, 30196 <rpmsg_register_endpoint+0x36>
   3016c:	2220      	movs	r2, #32
   3016e:	4620      	mov	r0, r4
   30170:	f008 f8d3 	bl	3831a <strncpy>
	ept->addr = src;
   30174:	6266      	str	r6, [r4, #36]	; 0x24
	ept->dest_addr = dest;
   30176:	9b04      	ldr	r3, [sp, #16]
   30178:	62a3      	str	r3, [r4, #40]	; 0x28
	ept->cb = cb;
   3017a:	9b05      	ldr	r3, [sp, #20]
   3017c:	62e3      	str	r3, [r4, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
   3017e:	9b06      	ldr	r3, [sp, #24]
   30180:	6323      	str	r3, [r4, #48]	; 0x30
	ept->rdev = rdev;
   30182:	6225      	str	r5, [r4, #32]
	metal_list_add_tail(&rdev->endpoints, &ept->node);
   30184:	f104 0334 	add.w	r3, r4, #52	; 0x34
	new_node->prev = node->prev;
   30188:	686a      	ldr	r2, [r5, #4]
   3018a:	63a2      	str	r2, [r4, #56]	; 0x38
	new_node->next = node;
   3018c:	6365      	str	r5, [r4, #52]	; 0x34
	new_node->next->prev = new_node;
   3018e:	606b      	str	r3, [r5, #4]
	new_node->prev->next = new_node;
   30190:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   30192:	6013      	str	r3, [r2, #0]
}
   30194:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(ept->name, name ? name : "", sizeof(ept->name));
   30196:	4901      	ldr	r1, [pc, #4]	; (3019c <rpmsg_register_endpoint+0x3c>)
   30198:	e7e8      	b.n	3016c <rpmsg_register_endpoint+0xc>
   3019a:	bf00      	nop
   3019c:	000466c0 	.word	0x000466c0

000301a0 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
   301a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301a4:	b085      	sub	sp, #20
   301a6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	int status = RPMSG_SUCCESS;
	uint32_t addr = src;

	if (!ept || !rdev || !cb)
   301a8:	2800      	cmp	r0, #0
   301aa:	d05e      	beq.n	3026a <rpmsg_create_ept+0xca>
   301ac:	4688      	mov	r8, r1
   301ae:	4691      	mov	r9, r2
   301b0:	461c      	mov	r4, r3
   301b2:	4682      	mov	sl, r0
   301b4:	2900      	cmp	r1, #0
   301b6:	d05a      	beq.n	3026e <rpmsg_create_ept+0xce>
   301b8:	2f00      	cmp	r7, #0
   301ba:	d05a      	beq.n	30272 <rpmsg_create_ept+0xd2>
		return RPMSG_ERR_PARAM;

	metal_mutex_acquire(&rdev->lock);
   301bc:	f101 0658 	add.w	r6, r1, #88	; 0x58
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
	__metal_mutex_acquire(mutex);
   301c0:	4630      	mov	r0, r6
   301c2:	f00e f8bf 	bl	3e344 <__metal_mutex_acquire>
	if (src == RPMSG_ADDR_ANY) {
   301c6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   301ca:	d012      	beq.n	301f2 <rpmsg_create_ept+0x52>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
		if (addr == RPMSG_ADDR_ANY) {
			status = RPMSG_ERR_ADDR;
			goto ret_status;
		}
	} else if (src >= RPMSG_RESERVED_ADDRESSES) {
   301cc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   301d0:	d320      	bcc.n	30214 <rpmsg_create_ept+0x74>
		status = rpmsg_is_address_set(rdev->bitmap,
   301d2:	f108 0b48 	add.w	fp, r8, #72	; 0x48
   301d6:	4622      	mov	r2, r4
   301d8:	2180      	movs	r1, #128	; 0x80
   301da:	4658      	mov	r0, fp
   301dc:	f7ff ff4c 	bl	30078 <rpmsg_is_address_set>
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
   301e0:	4605      	mov	r5, r0
   301e2:	b188      	cbz	r0, 30208 <rpmsg_create_ept+0x68>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
					  src);
		} else if (status > 0) {
   301e4:	2800      	cmp	r0, #0
   301e6:	dd00      	ble.n	301ea <rpmsg_create_ept+0x4a>
			status = RPMSG_ERR_ADDR;
   301e8:	4d23      	ldr	r5, [pc, #140]	; (30278 <rpmsg_create_ept+0xd8>)
	z_impl_k_sem_give(sem);
   301ea:	4630      	mov	r0, r6
   301ec:	f001 fdf8 	bl	31de0 <z_impl_k_sem_give>
		rpmsg_unregister_endpoint(ept);
	return status;

ret_status:
	metal_mutex_release(&rdev->lock);
	return status;
   301f0:	e02b      	b.n	3024a <rpmsg_create_ept+0xaa>
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
   301f2:	2180      	movs	r1, #128	; 0x80
   301f4:	f108 0048 	add.w	r0, r8, #72	; 0x48
   301f8:	f00e f876 	bl	3e2e8 <rpmsg_get_address>
   301fc:	4604      	mov	r4, r0
		if (addr == RPMSG_ADDR_ANY) {
   301fe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   30202:	d030      	beq.n	30266 <rpmsg_create_ept+0xc6>
	int status = RPMSG_SUCCESS;
   30204:	2500      	movs	r5, #0
   30206:	e006      	b.n	30216 <rpmsg_create_ept+0x76>
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   30208:	4622      	mov	r2, r4
   3020a:	2180      	movs	r1, #128	; 0x80
   3020c:	4658      	mov	r0, fp
   3020e:	f7ff ff47 	bl	300a0 <rpmsg_set_address>
   30212:	e000      	b.n	30216 <rpmsg_create_ept+0x76>
	int status = RPMSG_SUCCESS;
   30214:	2500      	movs	r5, #0
	rpmsg_register_endpoint(rdev, ept, name, addr, dest, cb, unbind_cb);
   30216:	9b10      	ldr	r3, [sp, #64]	; 0x40
   30218:	9302      	str	r3, [sp, #8]
   3021a:	9701      	str	r7, [sp, #4]
   3021c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3021e:	9300      	str	r3, [sp, #0]
   30220:	4623      	mov	r3, r4
   30222:	464a      	mov	r2, r9
   30224:	4651      	mov	r1, sl
   30226:	4640      	mov	r0, r8
   30228:	f7ff ff9a 	bl	30160 <rpmsg_register_endpoint>
   3022c:	4630      	mov	r0, r6
   3022e:	f001 fdd7 	bl	31de0 <z_impl_k_sem_give>
	if (ept->name[0] && rdev->support_ns &&
   30232:	f89a 3000 	ldrb.w	r3, [sl]
   30236:	b13b      	cbz	r3, 30248 <rpmsg_create_ept+0xa8>
   30238:	f898 3090 	ldrb.w	r3, [r8, #144]	; 0x90
   3023c:	b123      	cbz	r3, 30248 <rpmsg_create_ept+0xa8>
	    ept->dest_addr == RPMSG_ADDR_ANY)
   3023e:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
	if (ept->name[0] && rdev->support_ns &&
   30242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30246:	d004      	beq.n	30252 <rpmsg_create_ept+0xb2>
	if (status)
   30248:	b94d      	cbnz	r5, 3025e <rpmsg_create_ept+0xbe>
}
   3024a:	4628      	mov	r0, r5
   3024c:	b005      	add	sp, #20
   3024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
   30252:	2100      	movs	r1, #0
   30254:	4650      	mov	r0, sl
   30256:	f00e f89e 	bl	3e396 <rpmsg_send_ns_message>
   3025a:	4605      	mov	r5, r0
   3025c:	e7f4      	b.n	30248 <rpmsg_create_ept+0xa8>
		rpmsg_unregister_endpoint(ept);
   3025e:	4650      	mov	r0, sl
   30260:	f00e f878 	bl	3e354 <rpmsg_unregister_endpoint>
   30264:	e7f1      	b.n	3024a <rpmsg_create_ept+0xaa>
			status = RPMSG_ERR_ADDR;
   30266:	4d04      	ldr	r5, [pc, #16]	; (30278 <rpmsg_create_ept+0xd8>)
   30268:	e7bf      	b.n	301ea <rpmsg_create_ept+0x4a>
		return RPMSG_ERR_PARAM;
   3026a:	4d04      	ldr	r5, [pc, #16]	; (3027c <rpmsg_create_ept+0xdc>)
   3026c:	e7ed      	b.n	3024a <rpmsg_create_ept+0xaa>
   3026e:	4d03      	ldr	r5, [pc, #12]	; (3027c <rpmsg_create_ept+0xdc>)
   30270:	e7eb      	b.n	3024a <rpmsg_create_ept+0xaa>
   30272:	4d02      	ldr	r5, [pc, #8]	; (3027c <rpmsg_create_ept+0xdc>)
   30274:	e7e9      	b.n	3024a <rpmsg_create_ept+0xaa>
   30276:	bf00      	nop
   30278:	fffff829 	.word	0xfffff829
   3027c:	fffff82d 	.word	0xfffff82d

00030280 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
   30280:	b508      	push	{r3, lr}
   30282:	4603      	mov	r3, r0
	return rvdev->vdev->role;
   30284:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
   30288:	6992      	ldr	r2, [r2, #24]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
	int length = 0;

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   3028a:	b93a      	cbnz	r2, 3029c <_rpmsg_virtio_get_buffer_size+0x1c>
		/*
		 * If device role is host then buffers are provided by us,
		 * so just provide the macro.
		 */
		length = rvdev->config.h2r_buf_size - sizeof(struct rpmsg_hdr);
   3028c:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
   30290:	3810      	subs	r0, #16
	}
#endif /*!VIRTIO_DEVICE_ONLY*/

#ifndef VIRTIO_DRIVER_ONLY
	if (role == RPMSG_REMOTE) {
   30292:	2a01      	cmp	r2, #1
   30294:	d004      	beq.n	302a0 <_rpmsg_virtio_get_buffer_size+0x20>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/

	if (length <= 0) {
   30296:	2800      	cmp	r0, #0
   30298:	dd08      	ble.n	302ac <_rpmsg_virtio_get_buffer_size+0x2c>
		length = RPMSG_ERR_NO_BUFF;
	}

	return length;
}
   3029a:	bd08      	pop	{r3, pc}
	int length = 0;
   3029c:	2000      	movs	r0, #0
   3029e:	e7f8      	b.n	30292 <_rpmsg_virtio_get_buffer_size+0x12>
		    (int)virtqueue_get_desc_size(rvdev->svq) -
   302a0:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
   302a4:	f00d fff7 	bl	3e296 <virtqueue_get_desc_size>
   302a8:	3810      	subs	r0, #16
   302aa:	e7f4      	b.n	30296 <_rpmsg_virtio_get_buffer_size+0x16>
		length = RPMSG_ERR_NO_BUFF;
   302ac:	4800      	ldr	r0, [pc, #0]	; (302b0 <_rpmsg_virtio_get_buffer_size+0x30>)
	return length;
   302ae:	e7f4      	b.n	3029a <_rpmsg_virtio_get_buffer_size+0x1a>
   302b0:	fffff82e 	.word	0xfffff82e

000302b4 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
   302b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   302b8:	b084      	sub	sp, #16
	struct virtio_device *vdev = vq->vq_dev;
   302ba:	6803      	ldr	r3, [r0, #0]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
   302bc:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	struct rpmsg_hdr *rp_hdr;
	uint32_t len;
	uint16_t idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
   302be:	f107 0658 	add.w	r6, r7, #88	; 0x58
   302c2:	4630      	mov	r0, r6
   302c4:	f00e f908 	bl	3e4d8 <__metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   302c8:	f10d 020a 	add.w	r2, sp, #10
   302cc:	a903      	add	r1, sp, #12
   302ce:	4638      	mov	r0, r7
   302d0:	f00e f9b6 	bl	3e640 <rpmsg_virtio_get_rx_buffer>
   302d4:	4605      	mov	r5, r0
   302d6:	4630      	mov	r0, r6
   302d8:	f001 fd82 	bl	31de0 <z_impl_k_sem_give>
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
	__metal_mutex_release(mutex);
}
   302dc:	e01c      	b.n	30318 <rpmsg_virtio_rx_callback+0x64>
				 * First message received from the remote side,
				 * update channel destination address
				 */
				ept->dest_addr = rp_hdr->src;
			}
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   302de:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
					 rp_hdr->len, rp_hdr->src, ept->priv);
   302e2:	89aa      	ldrh	r2, [r5, #12]
			status = ept->cb(ept, RPMSG_LOCATE_DATA(rp_hdr),
   302e4:	4629      	mov	r1, r5
   302e6:	f851 3b10 	ldr.w	r3, [r1], #16
   302ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   302ec:	9000      	str	r0, [sp, #0]
   302ee:	4620      	mov	r0, r4
   302f0:	47c0      	blx	r8

			RPMSG_ASSERT(status >= 0,
   302f2:	2800      	cmp	r0, #0
   302f4:	db2b      	blt.n	3034e <rpmsg_virtio_rx_callback+0x9a>
	__metal_mutex_acquire(mutex);
   302f6:	4630      	mov	r0, r6
   302f8:	f00e f8ee 	bl	3e4d8 <__metal_mutex_acquire>
		}

		metal_mutex_acquire(&rdev->lock);

		/* Check whether callback wants to hold buffer */
		if (!(rp_hdr->reserved & RPMSG_BUF_HELD)) {
   302fc:	68ab      	ldr	r3, [r5, #8]
   302fe:	2b00      	cmp	r3, #0
   30300:	da32      	bge.n	30368 <rpmsg_virtio_rx_callback+0xb4>
			/* No, return used buffers. */
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
		}

		rp_hdr = rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
   30302:	f10d 020a 	add.w	r2, sp, #10
   30306:	a903      	add	r1, sp, #12
   30308:	4638      	mov	r0, r7
   3030a:	f00e f999 	bl	3e640 <rpmsg_virtio_get_rx_buffer>
		if (!rp_hdr) {
   3030e:	4605      	mov	r5, r0
   30310:	b390      	cbz	r0, 30378 <rpmsg_virtio_rx_callback+0xc4>
   30312:	4630      	mov	r0, r6
   30314:	f001 fd64 	bl	31de0 <z_impl_k_sem_give>
	while (rp_hdr) {
   30318:	b39d      	cbz	r5, 30382 <rpmsg_virtio_rx_callback+0xce>
		rp_hdr->reserved = idx;
   3031a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3031e:	60ab      	str	r3, [r5, #8]
   30320:	4630      	mov	r0, r6
   30322:	f00e f8d9 	bl	3e4d8 <__metal_mutex_acquire>
			     rpmsg_ns_unbind_cb ns_unbind_cb);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
   30326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3032a:	686a      	ldr	r2, [r5, #4]
   3032c:	2100      	movs	r1, #0
   3032e:	4638      	mov	r0, r7
   30330:	f00e f86e 	bl	3e410 <rpmsg_get_endpoint>
   30334:	4604      	mov	r4, r0
   30336:	4630      	mov	r0, r6
   30338:	f001 fd52 	bl	31de0 <z_impl_k_sem_give>
		if (ept) {
   3033c:	2c00      	cmp	r4, #0
   3033e:	d0da      	beq.n	302f6 <rpmsg_virtio_rx_callback+0x42>
			if (ept->dest_addr == RPMSG_ADDR_ANY) {
   30340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   30342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   30346:	d1ca      	bne.n	302de <rpmsg_virtio_rx_callback+0x2a>
				ept->dest_addr = rp_hdr->src;
   30348:	682b      	ldr	r3, [r5, #0]
   3034a:	62a3      	str	r3, [r4, #40]	; 0x28
   3034c:	e7c7      	b.n	302de <rpmsg_virtio_rx_callback+0x2a>
			RPMSG_ASSERT(status >= 0,
   3034e:	4c0e      	ldr	r4, [pc, #56]	; (30388 <rpmsg_virtio_rx_callback+0xd4>)
   30350:	f240 2343 	movw	r3, #579	; 0x243
   30354:	4622      	mov	r2, r4
   30356:	490d      	ldr	r1, [pc, #52]	; (3038c <rpmsg_virtio_rx_callback+0xd8>)
   30358:	480d      	ldr	r0, [pc, #52]	; (30390 <rpmsg_virtio_rx_callback+0xdc>)
   3035a:	f005 ff9b 	bl	36294 <assert_print>
   3035e:	f240 2143 	movw	r1, #579	; 0x243
   30362:	4620      	mov	r0, r4
   30364:	f005 ff8f 	bl	36286 <assert_post_action>
			rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   30368:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   3036c:	9a03      	ldr	r2, [sp, #12]
   3036e:	4629      	mov	r1, r5
   30370:	4638      	mov	r0, r7
   30372:	f00e f92a 	bl	3e5ca <rpmsg_virtio_return_buffer>
   30376:	e7c4      	b.n	30302 <rpmsg_virtio_rx_callback+0x4e>
			/* tell peer we return some rx buffer */
			virtqueue_kick(rvdev->rvq);
   30378:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
   3037c:	f00d ff7d 	bl	3e27a <virtqueue_kick>
   30380:	e7c7      	b.n	30312 <rpmsg_virtio_rx_callback+0x5e>
		}
		metal_mutex_release(&rdev->lock);
	}
}
   30382:	b004      	add	sp, #16
   30384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30388:	00045d94 	.word	0x00045d94
   3038c:	00045dd8 	.word	0x00045dd8
   30390:	0003f72c 	.word	0x0003f72c

00030394 <rpmsg_virtio_send_offchannel_nocopy>:
{
   30394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   30398:	b084      	sub	sp, #16
   3039a:	4604      	mov	r4, r0
   3039c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	hdr = RPMSG_LOCATE_HDR(data);
   3039e:	f1a3 0710 	sub.w	r7, r3, #16
	idx = hdr->reserved;
   303a2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   303a6:	b2ad      	uxth	r5, r5
	rp_hdr.dst = dst;
   303a8:	9201      	str	r2, [sp, #4]
	rp_hdr.src = src;
   303aa:	9100      	str	r1, [sp, #0]
	rp_hdr.len = len;
   303ac:	f8ad 600c 	strh.w	r6, [sp, #12]
	rp_hdr.reserved = 0;
   303b0:	2300      	movs	r3, #0
   303b2:	9302      	str	r3, [sp, #8]
	rp_hdr.flags = 0;
   303b4:	f8ad 300e 	strh.w	r3, [sp, #14]
	io = rvdev->shbuf_io;
   303b8:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   303bc:	6801      	ldr	r1, [r0, #0]
   303be:	1a79      	subs	r1, r7, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   303c0:	6883      	ldr	r3, [r0, #8]
   303c2:	4299      	cmp	r1, r3
   303c4:	d221      	bcs.n	3040a <rpmsg_virtio_send_offchannel_nocopy+0x76>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, hdr),
   303c6:	2310      	movs	r3, #16
   303c8:	466a      	mov	r2, sp
   303ca:	f00d fccd 	bl	3dd68 <metal_io_block_write>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   303ce:	2810      	cmp	r0, #16
   303d0:	d11e      	bne.n	30410 <rpmsg_virtio_send_offchannel_nocopy+0x7c>
	metal_mutex_acquire(&rdev->lock);
   303d2:	f104 0858 	add.w	r8, r4, #88	; 0x58
   303d6:	4640      	mov	r0, r8
   303d8:	f00e f87e 	bl	3e4d8 <__metal_mutex_acquire>
   303dc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   303e0:	699b      	ldr	r3, [r3, #24]
	if (rpmsg_virtio_get_role(rvdev) == RPMSG_HOST)
   303e2:	bb13      	cbnz	r3, 3042a <rpmsg_virtio_send_offchannel_nocopy+0x96>
		buff_len = rvdev->config.h2r_buf_size;
   303e4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
	status = rpmsg_virtio_enqueue_buffer(rvdev, hdr, buff_len, idx);
   303e8:	462b      	mov	r3, r5
   303ea:	4639      	mov	r1, r7
   303ec:	4620      	mov	r0, r4
   303ee:	f00e f90b 	bl	3e608 <rpmsg_virtio_enqueue_buffer>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   303f2:	bb08      	cbnz	r0, 30438 <rpmsg_virtio_send_offchannel_nocopy+0xa4>
	virtqueue_kick(rvdev->svq);
   303f4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   303f8:	f00d ff3f 	bl	3e27a <virtqueue_kick>
   303fc:	4640      	mov	r0, r8
   303fe:	f001 fcef 	bl	31de0 <z_impl_k_sem_give>
}
   30402:	4630      	mov	r0, r6
   30404:	b004      	add	sp, #16
   30406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3040a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3040e:	e7da      	b.n	303c6 <rpmsg_virtio_send_offchannel_nocopy+0x32>
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\r\n");
   30410:	4c10      	ldr	r4, [pc, #64]	; (30454 <rpmsg_virtio_send_offchannel_nocopy+0xc0>)
   30412:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   30416:	4622      	mov	r2, r4
   30418:	490f      	ldr	r1, [pc, #60]	; (30458 <rpmsg_virtio_send_offchannel_nocopy+0xc4>)
   3041a:	4810      	ldr	r0, [pc, #64]	; (3045c <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
   3041c:	f005 ff3a 	bl	36294 <assert_print>
   30420:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   30424:	4620      	mov	r0, r4
   30426:	f005 ff2e 	bl	36286 <assert_post_action>
		buff_len = virtqueue_get_buffer_length(rvdev->svq, idx);
   3042a:	4629      	mov	r1, r5
   3042c:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   30430:	f00d fec8 	bl	3e1c4 <virtqueue_get_buffer_length>
   30434:	4602      	mov	r2, r0
   30436:	e7d7      	b.n	303e8 <rpmsg_virtio_send_offchannel_nocopy+0x54>
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\r\n");
   30438:	4c06      	ldr	r4, [pc, #24]	; (30454 <rpmsg_virtio_send_offchannel_nocopy+0xc0>)
   3043a:	f240 13b9 	movw	r3, #441	; 0x1b9
   3043e:	4622      	mov	r2, r4
   30440:	4907      	ldr	r1, [pc, #28]	; (30460 <rpmsg_virtio_send_offchannel_nocopy+0xcc>)
   30442:	4806      	ldr	r0, [pc, #24]	; (3045c <rpmsg_virtio_send_offchannel_nocopy+0xc8>)
   30444:	f005 ff26 	bl	36294 <assert_print>
   30448:	f240 11b9 	movw	r1, #441	; 0x1b9
   3044c:	4620      	mov	r0, r4
   3044e:	f005 ff1a 	bl	36286 <assert_post_action>
   30452:	bf00      	nop
   30454:	00045d94 	.word	0x00045d94
   30458:	00045de4 	.word	0x00045de4
   3045c:	0003f72c 	.word	0x0003f72c
   30460:	00045e00 	.word	0x00045e00

00030464 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
   30464:	b508      	push	{r3, lr}
   30466:	0c41      	lsrs	r1, r0, #17
   30468:	03c0      	lsls	r0, r0, #15
   3046a:	4b06      	ldr	r3, [pc, #24]	; (30484 <__metal_sleep_usec+0x20>)
   3046c:	18c0      	adds	r0, r0, r3
   3046e:	4a06      	ldr	r2, [pc, #24]	; (30488 <__metal_sleep_usec+0x24>)
   30470:	f04f 0300 	mov.w	r3, #0
   30474:	f141 0100 	adc.w	r1, r1, #0
   30478:	f7df fe6e 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   3047c:	f003 fdaa 	bl	33fd4 <z_impl_k_sleep>
	k_sleep(K_USEC(usec));
	return 0;
}
   30480:	2000      	movs	r0, #0
   30482:	bd08      	pop	{r3, pc}
   30484:	000f423f 	.word	0x000f423f
   30488:	000f4240 	.word	0x000f4240

0003048c <rpmsg_virtio_send_offchannel_raw>:
{
   3048c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30490:	b084      	sub	sp, #16
   30492:	4605      	mov	r5, r0
   30494:	460e      	mov	r6, r1
   30496:	4690      	mov	r8, r2
   30498:	4699      	mov	r9, r3
   3049a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	buffer = rpmsg_virtio_get_tx_payload_buffer(rdev, &buff_len, wait);
   3049c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   3049e:	a903      	add	r1, sp, #12
   304a0:	f00e f965 	bl	3e76e <rpmsg_virtio_get_tx_payload_buffer>
	if (!buffer)
   304a4:	b360      	cbz	r0, 30500 <rpmsg_virtio_send_offchannel_raw+0x74>
   304a6:	4682      	mov	sl, r0
	if (len > (int)buff_len)
   304a8:	9c03      	ldr	r4, [sp, #12]
   304aa:	42bc      	cmp	r4, r7
   304ac:	db00      	blt.n	304b0 <rpmsg_virtio_send_offchannel_raw+0x24>
   304ae:	463c      	mov	r4, r7
	io = rvdev->shbuf_io;
   304b0:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   304b4:	6801      	ldr	r1, [r0, #0]
   304b6:	ebaa 0101 	sub.w	r1, sl, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   304ba:	6883      	ldr	r3, [r0, #8]
   304bc:	4299      	cmp	r1, r3
   304be:	d20f      	bcs.n	304e0 <rpmsg_virtio_send_offchannel_raw+0x54>
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
   304c0:	4623      	mov	r3, r4
   304c2:	464a      	mov	r2, r9
   304c4:	f00d fc50 	bl	3dd68 <metal_io_block_write>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   304c8:	4284      	cmp	r4, r0
   304ca:	d10c      	bne.n	304e6 <rpmsg_virtio_send_offchannel_raw+0x5a>
	return rpmsg_virtio_send_offchannel_nocopy(rdev, src, dst, buffer, len);
   304cc:	9400      	str	r4, [sp, #0]
   304ce:	4653      	mov	r3, sl
   304d0:	4642      	mov	r2, r8
   304d2:	4631      	mov	r1, r6
   304d4:	4628      	mov	r0, r5
   304d6:	f7ff ff5d 	bl	30394 <rpmsg_virtio_send_offchannel_nocopy>
}
   304da:	b004      	add	sp, #16
   304dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   304e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   304e4:	e7ec      	b.n	304c0 <rpmsg_virtio_send_offchannel_raw+0x34>
	RPMSG_ASSERT(status == len, "failed to write buffer\r\n");
   304e6:	4c07      	ldr	r4, [pc, #28]	; (30504 <rpmsg_virtio_send_offchannel_raw+0x78>)
   304e8:	f240 2303 	movw	r3, #515	; 0x203
   304ec:	4622      	mov	r2, r4
   304ee:	4906      	ldr	r1, [pc, #24]	; (30508 <rpmsg_virtio_send_offchannel_raw+0x7c>)
   304f0:	4806      	ldr	r0, [pc, #24]	; (3050c <rpmsg_virtio_send_offchannel_raw+0x80>)
   304f2:	f005 fecf 	bl	36294 <assert_print>
   304f6:	f240 2103 	movw	r1, #515	; 0x203
   304fa:	4620      	mov	r0, r4
   304fc:	f005 fec3 	bl	36286 <assert_post_action>
		return RPMSG_ERR_NO_BUFF;
   30500:	4803      	ldr	r0, [pc, #12]	; (30510 <rpmsg_virtio_send_offchannel_raw+0x84>)
   30502:	e7ea      	b.n	304da <rpmsg_virtio_send_offchannel_raw+0x4e>
   30504:	00045d94 	.word	0x00045d94
   30508:	00045e0c 	.word	0x00045e0c
   3050c:	0003f72c 	.word	0x0003f72c
   30510:	fffff82e 	.word	0xfffff82e

00030514 <rpmsg_virtio_get_buffer_size>:

	return RPMSG_SUCCESS;
}

int rpmsg_virtio_get_buffer_size(struct rpmsg_device *rdev)
{
   30514:	b538      	push	{r3, r4, r5, lr}
	int size;
	struct rpmsg_virtio_device *rvdev;

	if (!rdev)
   30516:	b170      	cbz	r0, 30536 <rpmsg_virtio_get_buffer_size+0x22>
   30518:	4604      	mov	r4, r0
		return RPMSG_ERR_PARAM;
	metal_mutex_acquire(&rdev->lock);
   3051a:	f100 0558 	add.w	r5, r0, #88	; 0x58
   3051e:	4628      	mov	r0, r5
   30520:	f00d ffda 	bl	3e4d8 <__metal_mutex_acquire>
	rvdev = (struct rpmsg_virtio_device *)rdev;
	size = _rpmsg_virtio_get_buffer_size(rvdev);
   30524:	4620      	mov	r0, r4
   30526:	f7ff feab 	bl	30280 <_rpmsg_virtio_get_buffer_size>
   3052a:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   3052c:	4628      	mov	r0, r5
   3052e:	f001 fc57 	bl	31de0 <z_impl_k_sem_give>
	metal_mutex_release(&rdev->lock);
	return size;
}
   30532:	4620      	mov	r0, r4
   30534:	bd38      	pop	{r3, r4, r5, pc}
		return RPMSG_ERR_PARAM;
   30536:	4c01      	ldr	r4, [pc, #4]	; (3053c <rpmsg_virtio_get_buffer_size+0x28>)
   30538:	e7fb      	b.n	30532 <rpmsg_virtio_get_buffer_size+0x1e>
   3053a:	bf00      	nop
   3053c:	fffff82d 	.word	0xfffff82d

00030540 <rpmsg_init_vdev_with_config>:
				struct virtio_device *vdev,
				rpmsg_ns_bind_cb ns_bind_cb,
				struct metal_io_region *shm_io,
				struct rpmsg_virtio_shm_pool *shpool,
				const struct rpmsg_virtio_config *config)
{
   30540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30544:	b08a      	sub	sp, #40	; 0x28
   30546:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   3054a:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
	const char *vq_names[RPMSG_NUM_VRINGS];
	vq_callback callback[RPMSG_NUM_VRINGS];
	int status;
	unsigned int i, role;

	if (!rvdev || !vdev || !shm_io)
   3054e:	2800      	cmp	r0, #0
   30550:	f000 80f5 	beq.w	3073e <rpmsg_init_vdev_with_config+0x1fe>
   30554:	460e      	mov	r6, r1
   30556:	4617      	mov	r7, r2
   30558:	461d      	mov	r5, r3
   3055a:	4604      	mov	r4, r0
   3055c:	2900      	cmp	r1, #0
   3055e:	f000 80f1 	beq.w	30744 <rpmsg_init_vdev_with_config+0x204>
   30562:	2b00      	cmp	r3, #0
   30564:	f000 80f1 	beq.w	3074a <rpmsg_init_vdev_with_config+0x20a>
		return RPMSG_ERR_PARAM;

	rdev = &rvdev->rdev;
	memset(rdev, 0, sizeof(*rdev));
   30568:	2294      	movs	r2, #148	; 0x94
   3056a:	2100      	movs	r1, #0
   3056c:	f007 ff74 	bl	38458 <memset>
	metal_mutex_init(&rdev->lock);
   30570:	f104 0058 	add.w	r0, r4, #88	; 0x58
	return z_impl_k_sem_init(sem, initial_count, limit);
   30574:	2201      	movs	r2, #1
   30576:	4611      	mov	r1, r2
   30578:	f00e fa47 	bl	3ea0a <z_impl_k_sem_init>
	rvdev->vdev = vdev;
   3057c:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
	rdev->ns_bind_cb = ns_bind_cb;
   30580:	6727      	str	r7, [r4, #112]	; 0x70
	vdev->priv = rvdev;
   30582:	6274      	str	r4, [r6, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
   30584:	4b78      	ldr	r3, [pc, #480]	; (30768 <rpmsg_init_vdev_with_config+0x228>)
   30586:	67a3      	str	r3, [r4, #120]	; 0x78
	rdev->ops.hold_rx_buffer = rpmsg_virtio_hold_rx_buffer;
   30588:	4b78      	ldr	r3, [pc, #480]	; (3076c <rpmsg_init_vdev_with_config+0x22c>)
   3058a:	67e3      	str	r3, [r4, #124]	; 0x7c
	rdev->ops.release_rx_buffer = rpmsg_virtio_release_rx_buffer;
   3058c:	4b78      	ldr	r3, [pc, #480]	; (30770 <rpmsg_init_vdev_with_config+0x230>)
   3058e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	rdev->ops.get_tx_payload_buffer = rpmsg_virtio_get_tx_payload_buffer;
   30592:	4b78      	ldr	r3, [pc, #480]	; (30774 <rpmsg_init_vdev_with_config+0x234>)
   30594:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	rdev->ops.send_offchannel_nocopy = rpmsg_virtio_send_offchannel_nocopy;
   30598:	4b77      	ldr	r3, [pc, #476]	; (30778 <rpmsg_init_vdev_with_config+0x238>)
   3059a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
	rdev->ops.release_tx_buffer = rpmsg_virtio_release_tx_buffer;
   3059e:	4b77      	ldr	r3, [pc, #476]	; (3077c <rpmsg_init_vdev_with_config+0x23c>)
   305a0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
   305a4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   305a8:	699f      	ldr	r7, [r3, #24]
	role = rpmsg_virtio_get_role(rvdev);

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   305aa:	b94f      	cbnz	r7, 305c0 <rpmsg_init_vdev_with_config+0x80>
		/*
		 * The virtio configuration contains only options applicable to
		 * a virtio driver, implying rpmsg host role.
		 */
		if (config == NULL) {
   305ac:	f1b9 0f00 	cmp.w	r9, #0
   305b0:	f000 80ce 	beq.w	30750 <rpmsg_init_vdev_with_config+0x210>
			return RPMSG_ERR_PARAM;
		}
		rvdev->config = *config;
   305b4:	f104 0394 	add.w	r3, r4, #148	; 0x94
   305b8:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
   305bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	(void)config;
#endif /*!VIRTIO_DEVICE_ONLY*/


#ifndef VIRTIO_DRIVER_ONLY
	if (role == RPMSG_REMOTE) {
   305c0:	2f01      	cmp	r7, #1
   305c2:	d04a      	beq.n	3065a <rpmsg_init_vdev_with_config+0x11a>
	return rvdev->vdev->func->get_features(rvdev->vdev);
   305c4:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   305c8:	6a03      	ldr	r3, [r0, #32]
   305ca:	689b      	ldr	r3, [r3, #8]
   305cc:	4798      	blx	r3
		/* wait synchro with the host */
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	vdev->features = rpmsg_virtio_get_features(rvdev);
   305ce:	6130      	str	r0, [r6, #16]
   305d0:	2300      	movs	r3, #0
   305d2:	6173      	str	r3, [r6, #20]
	rdev->support_ns = !!(vdev->features & (1 << VIRTIO_RPMSG_F_NS));
   305d4:	f000 0001 	and.w	r0, r0, #1
   305d8:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90

#ifndef VIRTIO_DEVICE_ONLY
	if (role == RPMSG_HOST) {
   305dc:	bb27      	cbnz	r7, 30628 <rpmsg_init_vdev_with_config+0xe8>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   305de:	f899 3008 	ldrb.w	r3, [r9, #8]
   305e2:	2b00      	cmp	r3, #0
   305e4:	d03d      	beq.n	30662 <rpmsg_init_vdev_with_config+0x122>
   305e6:	f108 030c 	add.w	r3, r8, #12
   305ea:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		if (!shpool)
   305ee:	f1b8 0f00 	cmp.w	r8, #0
   305f2:	f000 80b0 	beq.w	30756 <rpmsg_init_vdev_with_config+0x216>
			return RPMSG_ERR_PARAM;
		if (!shpool->size || !rvdev->shpool->size)
   305f6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   305fa:	2a00      	cmp	r2, #0
   305fc:	f000 80ae 	beq.w	3075c <rpmsg_init_vdev_with_config+0x21c>
   30600:	689b      	ldr	r3, [r3, #8]
   30602:	2b00      	cmp	r3, #0
   30604:	f000 80ad 	beq.w	30762 <rpmsg_init_vdev_with_config+0x222>
			return RPMSG_ERR_NO_BUFF;

		vq_names[0] = "rx_vq";
   30608:	4b5d      	ldr	r3, [pc, #372]	; (30780 <rpmsg_init_vdev_with_config+0x240>)
   3060a:	9308      	str	r3, [sp, #32]
		vq_names[1] = "tx_vq";
   3060c:	4b5d      	ldr	r3, [pc, #372]	; (30784 <rpmsg_init_vdev_with_config+0x244>)
   3060e:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
   30610:	4b5d      	ldr	r3, [pc, #372]	; (30788 <rpmsg_init_vdev_with_config+0x248>)
   30612:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_tx_callback;
   30614:	4b5d      	ldr	r3, [pc, #372]	; (3078c <rpmsg_init_vdev_with_config+0x24c>)
   30616:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
   30618:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   3061a:	681b      	ldr	r3, [r3, #0]
   3061c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[1].vq;
   30620:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   30622:	699b      	ldr	r3, [r3, #24]
   30624:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	}
#endif /*!VIRTIO_DEVICE_ONLY*/

#ifndef VIRTIO_DRIVER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
   30628:	2f01      	cmp	r7, #1
   3062a:	d01c      	beq.n	30666 <rpmsg_init_vdev_with_config+0x126>
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_DRIVER_ONLY*/
	rvdev->shbuf_io = shm_io;
   3062c:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
	metal_list_init(&rvdev->reclaimer);
   30630:	f104 03b4 	add.w	r3, r4, #180	; 0xb4
	list->prev = list;
   30634:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
	list->next = list;
   30638:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
   3063c:	ab06      	add	r3, sp, #24
   3063e:	9300      	str	r3, [sp, #0]
   30640:	ab08      	add	r3, sp, #32
   30642:	2202      	movs	r2, #2
   30644:	2100      	movs	r1, #0
   30646:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   3064a:	f7ff fc8b 	bl	2ff64 <virtio_create_virtqueues>

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
   3064e:	4682      	mov	sl, r0
   30650:	b1d0      	cbz	r0, 30688 <rpmsg_init_vdev_with_config+0x148>
	if (role == RPMSG_HOST)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_DEVICE_ONLY*/

	return status;
}
   30652:	4650      	mov	r0, sl
   30654:	b00a      	add	sp, #40	; 0x28
   30656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rpmsg_virtio_wait_remote_ready(rvdev);
   3065a:	4620      	mov	r0, r4
   3065c:	f00d ff1e 	bl	3e49c <rpmsg_virtio_wait_remote_ready>
   30660:	e7b0      	b.n	305c4 <rpmsg_init_vdev_with_config+0x84>
		rvdev->shpool = config->split_shpool ? shpool + 1 : shpool;
   30662:	4643      	mov	r3, r8
   30664:	e7c1      	b.n	305ea <rpmsg_init_vdev_with_config+0xaa>
		vq_names[0] = "tx_vq";
   30666:	4b47      	ldr	r3, [pc, #284]	; (30784 <rpmsg_init_vdev_with_config+0x244>)
   30668:	9308      	str	r3, [sp, #32]
		vq_names[1] = "rx_vq";
   3066a:	4b45      	ldr	r3, [pc, #276]	; (30780 <rpmsg_init_vdev_with_config+0x240>)
   3066c:	9309      	str	r3, [sp, #36]	; 0x24
		callback[0] = rpmsg_virtio_tx_callback;
   3066e:	4b47      	ldr	r3, [pc, #284]	; (3078c <rpmsg_init_vdev_with_config+0x24c>)
   30670:	9306      	str	r3, [sp, #24]
		callback[1] = rpmsg_virtio_rx_callback;
   30672:	4b45      	ldr	r3, [pc, #276]	; (30788 <rpmsg_init_vdev_with_config+0x248>)
   30674:	9307      	str	r3, [sp, #28]
		rvdev->rvq  = vdev->vrings_info[1].vq;
   30676:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   30678:	699b      	ldr	r3, [r3, #24]
   3067a:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq  = vdev->vrings_info[0].vq;
   3067e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   30680:	681b      	ldr	r3, [r3, #0]
   30682:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   30686:	e7d1      	b.n	3062c <rpmsg_init_vdev_with_config+0xec>
	virtqueue_disable_cb(rvdev->svq);
   30688:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
   3068c:	f00d fdc3 	bl	3e216 <virtqueue_disable_cb>
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
   30690:	2300      	movs	r3, #0
   30692:	2b01      	cmp	r3, #1
   30694:	d807      	bhi.n	306a6 <rpmsg_init_vdev_with_config+0x166>
		vq = vdev->vrings_info[i].vq;
   30696:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   30698:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   3069c:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
		vq->shm_io = shm_io;
   306a0:	6295      	str	r5, [r2, #40]	; 0x28
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
   306a2:	3301      	adds	r3, #1
   306a4:	e7f5      	b.n	30692 <rpmsg_init_vdev_with_config+0x152>
	if (role == RPMSG_HOST) {
   306a6:	bb7f      	cbnz	r7, 30708 <rpmsg_init_vdev_with_config+0x1c8>
		vqbuf.len = rvdev->config.r2h_buf_size;
   306a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   306ac:	9305      	str	r3, [sp, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   306ae:	46b9      	mov	r9, r7
   306b0:	e012      	b.n	306d8 <rpmsg_init_vdev_with_config+0x198>
			metal_io_block_set(shm_io,
   306b2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   306b6:	2200      	movs	r2, #0
   306b8:	4628      	mov	r0, r5
   306ba:	f00d fb96 	bl	3ddea <metal_io_block_set>
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
   306be:	9600      	str	r6, [sp, #0]
   306c0:	2301      	movs	r3, #1
   306c2:	2200      	movs	r2, #0
   306c4:	a904      	add	r1, sp, #16
   306c6:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   306ca:	f00d fd30 	bl	3e12e <virtqueue_add_buffer>
			if (status != RPMSG_SUCCESS) {
   306ce:	4682      	mov	sl, r0
   306d0:	2800      	cmp	r0, #0
   306d2:	d1be      	bne.n	30652 <rpmsg_init_vdev_with_config+0x112>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
   306d4:	f109 0901 	add.w	r9, r9, #1
   306d8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   306dc:	895b      	ldrh	r3, [r3, #10]
   306de:	454b      	cmp	r3, r9
   306e0:	d912      	bls.n	30708 <rpmsg_init_vdev_with_config+0x1c8>
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
   306e2:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   306e6:	4640      	mov	r0, r8
   306e8:	f00d ffe1 	bl	3e6ae <rpmsg_virtio_shm_pool_get_buffer>
			if (!buffer) {
   306ec:	4606      	mov	r6, r0
   306ee:	b140      	cbz	r0, 30702 <rpmsg_init_vdev_with_config+0x1c2>
			vqbuf.buf = buffer;
   306f0:	9004      	str	r0, [sp, #16]
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   306f2:	6829      	ldr	r1, [r5, #0]
   306f4:	1a41      	subs	r1, r0, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   306f6:	68ab      	ldr	r3, [r5, #8]
   306f8:	4299      	cmp	r1, r3
   306fa:	d3da      	bcc.n	306b2 <rpmsg_init_vdev_with_config+0x172>
   306fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30700:	e7d7      	b.n	306b2 <rpmsg_init_vdev_with_config+0x172>
				return RPMSG_ERR_NO_BUFF;
   30702:	f8df a08c 	ldr.w	sl, [pc, #140]	; 30790 <rpmsg_init_vdev_with_config+0x250>
   30706:	e7a4      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
	list->prev = list;
   30708:	6064      	str	r4, [r4, #4]
	list->next = list;
   3070a:	6024      	str	r4, [r4, #0]
	if (rdev->support_ns) {
   3070c:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
   30710:	b943      	cbnz	r3, 30724 <rpmsg_init_vdev_with_config+0x1e4>
	if (role == RPMSG_HOST)
   30712:	2f00      	cmp	r7, #0
   30714:	d19d      	bne.n	30652 <rpmsg_init_vdev_with_config+0x112>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   30716:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   3071a:	6a03      	ldr	r3, [r0, #32]
   3071c:	685b      	ldr	r3, [r3, #4]
   3071e:	2104      	movs	r1, #4
   30720:	4798      	blx	r3
}
   30722:	e796      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
		rpmsg_register_endpoint(rdev, &rdev->ns_ept, "NS",
   30724:	2300      	movs	r3, #0
   30726:	9302      	str	r3, [sp, #8]
   30728:	4b1a      	ldr	r3, [pc, #104]	; (30794 <rpmsg_init_vdev_with_config+0x254>)
   3072a:	9301      	str	r3, [sp, #4]
   3072c:	2335      	movs	r3, #53	; 0x35
   3072e:	9300      	str	r3, [sp, #0]
   30730:	4a19      	ldr	r2, [pc, #100]	; (30798 <rpmsg_init_vdev_with_config+0x258>)
   30732:	f104 0108 	add.w	r1, r4, #8
   30736:	4620      	mov	r0, r4
   30738:	f7ff fd12 	bl	30160 <rpmsg_register_endpoint>
   3073c:	e7e9      	b.n	30712 <rpmsg_init_vdev_with_config+0x1d2>
		return RPMSG_ERR_PARAM;
   3073e:	f8df a05c 	ldr.w	sl, [pc, #92]	; 3079c <rpmsg_init_vdev_with_config+0x25c>
   30742:	e786      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
   30744:	f8df a054 	ldr.w	sl, [pc, #84]	; 3079c <rpmsg_init_vdev_with_config+0x25c>
   30748:	e783      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
   3074a:	f8df a050 	ldr.w	sl, [pc, #80]	; 3079c <rpmsg_init_vdev_with_config+0x25c>
   3074e:	e780      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
			return RPMSG_ERR_PARAM;
   30750:	f8df a048 	ldr.w	sl, [pc, #72]	; 3079c <rpmsg_init_vdev_with_config+0x25c>
   30754:	e77d      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
			return RPMSG_ERR_PARAM;
   30756:	f8df a044 	ldr.w	sl, [pc, #68]	; 3079c <rpmsg_init_vdev_with_config+0x25c>
   3075a:	e77a      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
			return RPMSG_ERR_NO_BUFF;
   3075c:	f8df a030 	ldr.w	sl, [pc, #48]	; 30790 <rpmsg_init_vdev_with_config+0x250>
   30760:	e777      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
   30762:	f8df a02c 	ldr.w	sl, [pc, #44]	; 30790 <rpmsg_init_vdev_with_config+0x250>
   30766:	e774      	b.n	30652 <rpmsg_init_vdev_with_config+0x112>
   30768:	0003048d 	.word	0x0003048d
   3076c:	0003e4c9 	.word	0x0003e4c9
   30770:	0003e671 	.word	0x0003e671
   30774:	0003e76f 	.word	0x0003e76f
   30778:	00030395 	.word	0x00030395
   3077c:	0003e4e9 	.word	0x0003e4e9
   30780:	00045e1c 	.word	0x00045e1c
   30784:	00045e24 	.word	0x00045e24
   30788:	000302b5 	.word	0x000302b5
   3078c:	0003e4d7 	.word	0x0003e4d7
   30790:	fffff82e 	.word	0xfffff82e
   30794:	0003e52b 	.word	0x0003e52b
   30798:	00045e2c 	.word	0x00045e2c
   3079c:	fffff82d 	.word	0xfffff82d

000307a0 <rpmsg_init_vdev>:
{
   307a0:	b530      	push	{r4, r5, lr}
   307a2:	b087      	sub	sp, #28
   307a4:	4684      	mov	ip, r0
   307a6:	468e      	mov	lr, r1
   307a8:	4615      	mov	r5, r2
			   shpool, RPMSG_VIRTIO_DEFAULT_CONFIG);
   307aa:	4a07      	ldr	r2, [pc, #28]	; (307c8 <rpmsg_init_vdev+0x28>)
   307ac:	ac03      	add	r4, sp, #12
   307ae:	ca07      	ldmia	r2, {r0, r1, r2}
   307b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return rpmsg_init_vdev_with_config(rvdev, vdev, ns_bind_cb, shm_io,
   307b4:	9401      	str	r4, [sp, #4]
   307b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   307b8:	9200      	str	r2, [sp, #0]
   307ba:	462a      	mov	r2, r5
   307bc:	4671      	mov	r1, lr
   307be:	4660      	mov	r0, ip
   307c0:	f7ff febe 	bl	30540 <rpmsg_init_vdev_with_config>
}
   307c4:	b007      	add	sp, #28
   307c6:	bd30      	pop	{r4, r5, pc}
   307c8:	0003f6a4 	.word	0x0003f6a4

000307cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   307cc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   307ce:	4c11      	ldr	r4, [pc, #68]	; (30814 <_DoInit+0x48>)
   307d0:	2303      	movs	r3, #3
   307d2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   307d4:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   307d6:	4a10      	ldr	r2, [pc, #64]	; (30818 <_DoInit+0x4c>)
   307d8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   307da:	4b10      	ldr	r3, [pc, #64]	; (3081c <_DoInit+0x50>)
   307dc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   307de:	f44f 6380 	mov.w	r3, #1024	; 0x400
   307e2:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   307e4:	2300      	movs	r3, #0
   307e6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   307e8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   307ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   307ec:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   307ee:	4a0c      	ldr	r2, [pc, #48]	; (30820 <_DoInit+0x54>)
   307f0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   307f2:	2210      	movs	r2, #16
   307f4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   307f6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   307f8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   307fa:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   307fc:	4909      	ldr	r1, [pc, #36]	; (30824 <_DoInit+0x58>)
   307fe:	1de0      	adds	r0, r4, #7
   30800:	f007 fd81 	bl	38306 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   30804:	4908      	ldr	r1, [pc, #32]	; (30828 <_DoInit+0x5c>)
   30806:	4620      	mov	r0, r4
   30808:	f007 fd7d 	bl	38306 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   3080c:	2320      	movs	r3, #32
   3080e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   30810:	bd10      	pop	{r4, pc}
   30812:	bf00      	nop
   30814:	2000c998 	.word	0x2000c998
   30818:	00045e30 	.word	0x00045e30
   3081c:	2000c598 	.word	0x2000c598
   30820:	2000c588 	.word	0x2000c588
   30824:	00045e3c 	.word	0x00045e3c
   30828:	00045e40 	.word	0x00045e40

0003082c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   3082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30830:	4604      	mov	r4, r0
   30832:	460e      	mov	r6, r1
   30834:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   30836:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   3083a:	4a2d      	ldr	r2, [pc, #180]	; (308f0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   3083c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   30840:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   30842:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   30844:	42bb      	cmp	r3, r7
   30846:	d84c      	bhi.n	308e2 <SEGGER_RTT_WriteSkipNoLock+0xb6>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   30848:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   3084c:	4a28      	ldr	r2, [pc, #160]	; (308f0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   3084e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   30852:	f8d2 8020 	ldr.w	r8, [r2, #32]
   30856:	eba8 0907 	sub.w	r9, r8, r7
   3085a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   3085e:	4295      	cmp	r5, r2
   30860:	d904      	bls.n	3086c <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   30862:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   30864:	429d      	cmp	r5, r3
   30866:	d916      	bls.n	30896 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   30868:	2000      	movs	r0, #0
   3086a:	e03f      	b.n	308ec <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   3086c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 308f0 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   30870:	1c63      	adds	r3, r4, #1
   30872:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   30876:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   3087a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   3087c:	462a      	mov	r2, r5
   3087e:	4631      	mov	r1, r6
   30880:	4438      	add	r0, r7
   30882:	f007 fdba 	bl	383fa <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   30886:	442f      	add	r7, r5
   30888:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   3088c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   30890:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   30892:	2001      	movs	r0, #1
   30894:	e02a      	b.n	308ec <SEGGER_RTT_WriteSkipNoLock+0xc0>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   30896:	1c43      	adds	r3, r0, #1
   30898:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   3089c:	4a14      	ldr	r2, [pc, #80]	; (308f0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   3089e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   308a2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   308a4:	464a      	mov	r2, r9
   308a6:	4631      	mov	r1, r6
   308a8:	4438      	add	r0, r7
   308aa:	f007 fda6 	bl	383fa <memcpy>
      NumBytes -= Rem;
   308ae:	eba7 0808 	sub.w	r8, r7, r8
      if (NumBytes) {
   308b2:	eb18 0505 	adds.w	r5, r8, r5
   308b6:	d107      	bne.n	308c8 <SEGGER_RTT_WriteSkipNoLock+0x9c>
      pRing->WrOff = NumBytes;
   308b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   308bc:	4b0c      	ldr	r3, [pc, #48]	; (308f0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   308be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   308c2:	625d      	str	r5, [r3, #36]	; 0x24
      return 1;
   308c4:	2001      	movs	r0, #1
   308c6:	e011      	b.n	308ec <SEGGER_RTT_WriteSkipNoLock+0xc0>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   308c8:	1c63      	adds	r3, r4, #1
   308ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   308ce:	4a08      	ldr	r2, [pc, #32]	; (308f0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   308d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   308d4:	462a      	mov	r2, r5
   308d6:	eb06 0109 	add.w	r1, r6, r9
   308da:	6858      	ldr	r0, [r3, #4]
   308dc:	f007 fd8d 	bl	383fa <memcpy>
   308e0:	e7ea      	b.n	308b8 <SEGGER_RTT_WriteSkipNoLock+0x8c>
    Avail = RdOff - WrOff - 1u;
   308e2:	1bdb      	subs	r3, r3, r7
   308e4:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   308e6:	42ab      	cmp	r3, r5
   308e8:	d2c0      	bcs.n	3086c <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   308ea:	2000      	movs	r0, #0
}
   308ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   308f0:	2000c998 	.word	0x2000c998

000308f4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   308f4:	4b06      	ldr	r3, [pc, #24]	; (30910 <SEGGER_RTT_HasDataUp+0x1c>)
   308f6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   308fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   308fe:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   30900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   30904:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   30908:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   3090a:	1a80      	subs	r0, r0, r2
   3090c:	4770      	bx	lr
   3090e:	bf00      	nop
   30910:	2000c998 	.word	0x2000c998

00030914 <zephyr_rtt_mutex_lock>:
}

#ifdef CONFIG_MULTITHREADING

void zephyr_rtt_mutex_lock(void)
{
   30914:	b508      	push	{r3, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   30916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3091a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3091e:	4802      	ldr	r0, [pc, #8]	; (30928 <zephyr_rtt_mutex_lock+0x14>)
   30920:	f000 ff9c 	bl	3185c <z_impl_k_mutex_lock>
	k_mutex_lock(&rtt_term_mutex, K_FOREVER);
}
   30924:	bd08      	pop	{r3, pc}
   30926:	bf00      	nop
   30928:	20008928 	.word	0x20008928

0003092c <zephyr_rtt_mutex_unlock>:

void zephyr_rtt_mutex_unlock(void)
{
   3092c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   3092e:	4802      	ldr	r0, [pc, #8]	; (30938 <zephyr_rtt_mutex_unlock+0xc>)
   30930:	f001 f8aa 	bl	31a88 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&rtt_term_mutex);
}
   30934:	bd08      	pop	{r3, pc}
   30936:	bf00      	nop
   30938:	20008928 	.word	0x20008928

0003093c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   3093c:	4b03      	ldr	r3, [pc, #12]	; (3094c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   3093e:	e000      	b.n	30942 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
   30940:	3318      	adds	r3, #24
	while (dev < __device_end) {
   30942:	4a03      	ldr	r2, [pc, #12]	; (30950 <z_device_state_init+0x14>)
   30944:	4293      	cmp	r3, r2
   30946:	d3fb      	bcc.n	30940 <z_device_state_init+0x4>
	}
}
   30948:	4770      	bx	lr
   3094a:	bf00      	nop
   3094c:	0003ef54 	.word	0x0003ef54
   30950:	0003f08c 	.word	0x0003f08c

00030954 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   30954:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   30956:	4605      	mov	r5, r0
   30958:	b328      	cbz	r0, 309a6 <z_impl_device_get_binding+0x52>
   3095a:	7803      	ldrb	r3, [r0, #0]
   3095c:	b32b      	cbz	r3, 309aa <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   3095e:	4c14      	ldr	r4, [pc, #80]	; (309b0 <z_impl_device_get_binding+0x5c>)
   30960:	e000      	b.n	30964 <z_impl_device_get_binding+0x10>
   30962:	3418      	adds	r4, #24
   30964:	4b13      	ldr	r3, [pc, #76]	; (309b4 <z_impl_device_get_binding+0x60>)
   30966:	429c      	cmp	r4, r3
   30968:	d008      	beq.n	3097c <z_impl_device_get_binding+0x28>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   3096a:	4620      	mov	r0, r4
   3096c:	f00d ff57 	bl	3e81e <z_device_is_ready>
   30970:	2800      	cmp	r0, #0
   30972:	d0f6      	beq.n	30962 <z_impl_device_get_binding+0xe>
   30974:	6823      	ldr	r3, [r4, #0]
   30976:	42ab      	cmp	r3, r5
   30978:	d1f3      	bne.n	30962 <z_impl_device_get_binding+0xe>
   3097a:	e012      	b.n	309a2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   3097c:	4c0c      	ldr	r4, [pc, #48]	; (309b0 <z_impl_device_get_binding+0x5c>)
   3097e:	e000      	b.n	30982 <z_impl_device_get_binding+0x2e>
   30980:	3418      	adds	r4, #24
   30982:	4b0c      	ldr	r3, [pc, #48]	; (309b4 <z_impl_device_get_binding+0x60>)
   30984:	429c      	cmp	r4, r3
   30986:	d00b      	beq.n	309a0 <z_impl_device_get_binding+0x4c>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   30988:	4620      	mov	r0, r4
   3098a:	f00d ff48 	bl	3e81e <z_device_is_ready>
   3098e:	2800      	cmp	r0, #0
   30990:	d0f6      	beq.n	30980 <z_impl_device_get_binding+0x2c>
   30992:	6821      	ldr	r1, [r4, #0]
   30994:	4628      	mov	r0, r5
   30996:	f007 fced 	bl	38374 <strcmp>
   3099a:	2800      	cmp	r0, #0
   3099c:	d1f0      	bne.n	30980 <z_impl_device_get_binding+0x2c>
   3099e:	e000      	b.n	309a2 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   309a0:	2400      	movs	r4, #0
}
   309a2:	4620      	mov	r0, r4
   309a4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   309a6:	4604      	mov	r4, r0
   309a8:	e7fb      	b.n	309a2 <z_impl_device_get_binding+0x4e>
   309aa:	2400      	movs	r4, #0
   309ac:	e7f9      	b.n	309a2 <z_impl_device_get_binding+0x4e>
   309ae:	bf00      	nop
   309b0:	0003ef54 	.word	0x0003ef54
   309b4:	0003f08c 	.word	0x0003f08c

000309b8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   309b8:	4b01      	ldr	r3, [pc, #4]	; (309c0 <z_impl_z_errno+0x8>)
   309ba:	6898      	ldr	r0, [r3, #8]
}
   309bc:	3098      	adds	r0, #152	; 0x98
   309be:	4770      	bx	lr
   309c0:	2000ca40 	.word	0x2000ca40

000309c4 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   309c4:	2804      	cmp	r0, #4
   309c6:	d80c      	bhi.n	309e2 <reason_to_str+0x1e>
   309c8:	e8df f000 	tbb	[pc, r0]
   309cc:	07050d03 	.word	0x07050d03
   309d0:	09          	.byte	0x09
   309d1:	00          	.byte	0x00
   309d2:	4806      	ldr	r0, [pc, #24]	; (309ec <reason_to_str+0x28>)
   309d4:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
   309d6:	4806      	ldr	r0, [pc, #24]	; (309f0 <reason_to_str+0x2c>)
   309d8:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
   309da:	4806      	ldr	r0, [pc, #24]	; (309f4 <reason_to_str+0x30>)
   309dc:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   309de:	4806      	ldr	r0, [pc, #24]	; (309f8 <reason_to_str+0x34>)
   309e0:	4770      	bx	lr
	default:
		return "Unknown error";
   309e2:	4806      	ldr	r0, [pc, #24]	; (309fc <reason_to_str+0x38>)
   309e4:	4770      	bx	lr
		return "Unhandled interrupt";
   309e6:	4806      	ldr	r0, [pc, #24]	; (30a00 <reason_to_str+0x3c>)
	}
}
   309e8:	4770      	bx	lr
   309ea:	bf00      	nop
   309ec:	00045e4c 	.word	0x00045e4c
   309f0:	00045e70 	.word	0x00045e70
   309f4:	00045e80 	.word	0x00045e80
   309f8:	00045e8c 	.word	0x00045e8c
   309fc:	00045e9c 	.word	0x00045e9c
   30a00:	00045e5c 	.word	0x00045e5c

00030a04 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   30a04:	b130      	cbz	r0, 30a14 <thread_name_get+0x10>
{
   30a06:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   30a08:	f00d ff5b 	bl	3e8c2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   30a0c:	b120      	cbz	r0, 30a18 <thread_name_get+0x14>
   30a0e:	7803      	ldrb	r3, [r0, #0]
   30a10:	b123      	cbz	r3, 30a1c <thread_name_get+0x18>
}
   30a12:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   30a14:	4802      	ldr	r0, [pc, #8]	; (30a20 <thread_name_get+0x1c>)
}
   30a16:	4770      	bx	lr
		thread_name = "unknown";
   30a18:	4801      	ldr	r0, [pc, #4]	; (30a20 <thread_name_get+0x1c>)
   30a1a:	e7fa      	b.n	30a12 <thread_name_get+0xe>
   30a1c:	4800      	ldr	r0, [pc, #0]	; (30a20 <thread_name_get+0x1c>)
	return thread_name;
   30a1e:	e7f8      	b.n	30a12 <thread_name_get+0xe>
   30a20:	00045eac 	.word	0x00045eac

00030a24 <k_sys_fatal_error_handler>:
{
   30a24:	b510      	push	{r4, lr}
   30a26:	b088      	sub	sp, #32
   30a28:	4604      	mov	r4, r0
	z_impl_log_panic();
   30a2a:	f7e5 fdf9 	bl	16620 <z_impl_log_panic>
	LOG_ERR("Halting system");
   30a2e:	4b14      	ldr	r3, [pc, #80]	; (30a80 <k_sys_fatal_error_handler+0x5c>)
   30a30:	9307      	str	r3, [sp, #28]
   30a32:	2302      	movs	r3, #2
   30a34:	f88d 3004 	strb.w	r3, [sp, #4]
   30a38:	2300      	movs	r3, #0
   30a3a:	f88d 3005 	strb.w	r3, [sp, #5]
   30a3e:	f88d 3006 	strb.w	r3, [sp, #6]
   30a42:	f88d 3007 	strb.w	r3, [sp, #7]
   30a46:	9a01      	ldr	r2, [sp, #4]
   30a48:	9206      	str	r2, [sp, #24]
   30a4a:	4619      	mov	r1, r3
   30a4c:	f363 0100 	bfi	r1, r3, #0, #1
   30a50:	f363 0141 	bfi	r1, r3, #1, #1
   30a54:	f363 0182 	bfi	r1, r3, #2, #1
   30a58:	f363 01c5 	bfi	r1, r3, #3, #3
   30a5c:	2201      	movs	r2, #1
   30a5e:	f362 1188 	bfi	r1, r2, #6, #3
   30a62:	2208      	movs	r2, #8
   30a64:	f362 2152 	bfi	r1, r2, #9, #10
   30a68:	f363 41de 	bfi	r1, r3, #19, #12
   30a6c:	f363 71df 	bfi	r1, r3, #31, #1
   30a70:	aa06      	add	r2, sp, #24
   30a72:	4804      	ldr	r0, [pc, #16]	; (30a84 <k_sys_fatal_error_handler+0x60>)
   30a74:	f7e5 ff6a 	bl	1694c <z_impl_z_log_msg_static_create>
	arch_system_halt(reason);
   30a78:	4620      	mov	r0, r4
   30a7a:	f00d fee0 	bl	3e83e <arch_system_halt>
   30a7e:	bf00      	nop
   30a80:	00045eb4 	.word	0x00045eb4
   30a84:	0003f488 	.word	0x0003f488

00030a88 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   30a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   30a8c:	b089      	sub	sp, #36	; 0x24
   30a8e:	af00      	add	r7, sp, #0
   30a90:	4604      	mov	r4, r0
   30a92:	460d      	mov	r5, r1
	__asm__ volatile(
   30a94:	f04f 0320 	mov.w	r3, #32
   30a98:	f3ef 8811 	mrs	r8, BASEPRI
   30a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   30aa0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   30aa4:	f003 fb10 	bl	340c8 <z_impl_z_current_get>
   30aa8:	4606      	mov	r6, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   30aaa:	4620      	mov	r0, r4
   30aac:	f7ff ff8a 	bl	309c4 <reason_to_str>
   30ab0:	46e9      	mov	r9, sp
   30ab2:	2301      	movs	r3, #1
   30ab4:	713b      	strb	r3, [r7, #4]
   30ab6:	2303      	movs	r3, #3
   30ab8:	717b      	strb	r3, [r7, #5]
   30aba:	b08a      	sub	sp, #40	; 0x28
   30abc:	46ec      	mov	ip, sp
   30abe:	f11c 0210 	adds.w	r2, ip, #16
   30ac2:	d021      	beq.n	30b08 <z_fatal_error+0x80>
   30ac4:	f04f 0e16 	mov.w	lr, #22
   30ac8:	b152      	cbz	r2, 30ae0 <z_fatal_error+0x58>
   30aca:	4673      	mov	r3, lr
   30acc:	f1be 0f04 	cmp.w	lr, #4
   30ad0:	dd02      	ble.n	30ad8 <z_fatal_error+0x50>
   30ad2:	497e      	ldr	r1, [pc, #504]	; (30ccc <z_fatal_error+0x244>)
   30ad4:	f8cc 1014 	str.w	r1, [ip, #20]
   30ad8:	2b08      	cmp	r3, #8
   30ada:	dd01      	ble.n	30ae0 <z_fatal_error+0x58>
   30adc:	f8cc 4018 	str.w	r4, [ip, #24]
   30ae0:	2301      	movs	r3, #1
   30ae2:	703b      	strb	r3, [r7, #0]
   30ae4:	2303      	movs	r3, #3
   30ae6:	707b      	strb	r3, [r7, #1]
   30ae8:	b1da      	cbz	r2, 30b22 <z_fatal_error+0x9a>
   30aea:	4673      	mov	r3, lr
   30aec:	f1be 0f0c 	cmp.w	lr, #12
   30af0:	dd01      	ble.n	30af6 <z_fatal_error+0x6e>
   30af2:	f8cc 001c 	str.w	r0, [ip, #28]
   30af6:	2b10      	cmp	r3, #16
   30af8:	dd02      	ble.n	30b00 <z_fatal_error+0x78>
   30afa:	2300      	movs	r3, #0
   30afc:	f8cc 3020 	str.w	r3, [ip, #32]
   30b00:	f10c 0324 	add.w	r3, ip, #36	; 0x24
   30b04:	2100      	movs	r1, #0
   30b06:	e00a      	b.n	30b1e <z_fatal_error+0x96>
   30b08:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   30b0c:	e7dc      	b.n	30ac8 <z_fatal_error+0x40>
   30b0e:	f101 0020 	add.w	r0, r1, #32
   30b12:	4438      	add	r0, r7
   30b14:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   30b18:	f803 0b01 	strb.w	r0, [r3], #1
   30b1c:	3101      	adds	r1, #1
   30b1e:	2901      	cmp	r1, #1
   30b20:	d9f5      	bls.n	30b0e <z_fatal_error+0x86>
   30b22:	f1be 0f15 	cmp.w	lr, #21
   30b26:	dd53      	ble.n	30bd0 <z_fatal_error+0x148>
   30b28:	2316      	movs	r3, #22
   30b2a:	b14a      	cbz	r2, 30b40 <z_fatal_error+0xb8>
   30b2c:	2105      	movs	r1, #5
   30b2e:	7139      	strb	r1, [r7, #4]
   30b30:	2100      	movs	r1, #0
   30b32:	7179      	strb	r1, [r7, #5]
   30b34:	71b9      	strb	r1, [r7, #6]
   30b36:	2101      	movs	r1, #1
   30b38:	71f9      	strb	r1, [r7, #7]
   30b3a:	6878      	ldr	r0, [r7, #4]
   30b3c:	f8cc 0010 	str.w	r0, [ip, #16]
   30b40:	2100      	movs	r1, #0
   30b42:	f36f 0100 	bfc	r1, #0, #1
   30b46:	f36f 0141 	bfc	r1, #1, #1
   30b4a:	f36f 0182 	bfc	r1, #2, #1
   30b4e:	f36f 01c5 	bfc	r1, #3, #3
   30b52:	2001      	movs	r0, #1
   30b54:	f360 1188 	bfi	r1, r0, #6, #3
   30b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
   30b5c:	f363 2152 	bfi	r1, r3, #9, #10
   30b60:	f36f 41de 	bfc	r1, #19, #12
   30b64:	f36f 71df 	bfc	r1, #31, #1
   30b68:	2300      	movs	r3, #0
   30b6a:	4859      	ldr	r0, [pc, #356]	; (30cd0 <z_fatal_error+0x248>)
   30b6c:	f7e5 feee 	bl	1694c <z_impl_z_log_msg_static_create>
   30b70:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   30b72:	b11d      	cbz	r5, 30b7c <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   30b74:	69eb      	ldr	r3, [r5, #28]
   30b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
   30b7a:	bb63      	cbnz	r3, 30bd6 <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   30b7c:	4630      	mov	r0, r6
   30b7e:	f7ff ff41 	bl	30a04 <thread_name_get>
   30b82:	46e9      	mov	r9, sp
   30b84:	2301      	movs	r3, #1
   30b86:	713b      	strb	r3, [r7, #4]
   30b88:	2303      	movs	r3, #3
   30b8a:	717b      	strb	r3, [r7, #5]
   30b8c:	b08a      	sub	sp, #40	; 0x28
   30b8e:	46ec      	mov	ip, sp
   30b90:	f11c 0210 	adds.w	r2, ip, #16
   30b94:	d042      	beq.n	30c1c <z_fatal_error+0x194>
   30b96:	f04f 0e12 	mov.w	lr, #18
   30b9a:	b152      	cbz	r2, 30bb2 <z_fatal_error+0x12a>
   30b9c:	4673      	mov	r3, lr
   30b9e:	f1be 0f04 	cmp.w	lr, #4
   30ba2:	dd02      	ble.n	30baa <z_fatal_error+0x122>
   30ba4:	494b      	ldr	r1, [pc, #300]	; (30cd4 <z_fatal_error+0x24c>)
   30ba6:	f8cc 1014 	str.w	r1, [ip, #20]
   30baa:	2b08      	cmp	r3, #8
   30bac:	dd01      	ble.n	30bb2 <z_fatal_error+0x12a>
   30bae:	f8cc 6018 	str.w	r6, [ip, #24]
   30bb2:	2301      	movs	r3, #1
   30bb4:	703b      	strb	r3, [r7, #0]
   30bb6:	2303      	movs	r3, #3
   30bb8:	707b      	strb	r3, [r7, #1]
   30bba:	2a00      	cmp	r2, #0
   30bbc:	d03b      	beq.n	30c36 <z_fatal_error+0x1ae>
   30bbe:	f1be 0f0c 	cmp.w	lr, #12
   30bc2:	dd01      	ble.n	30bc8 <z_fatal_error+0x140>
   30bc4:	f8cc 001c 	str.w	r0, [ip, #28]
   30bc8:	f10c 0320 	add.w	r3, ip, #32
   30bcc:	2100      	movs	r1, #0
   30bce:	e030      	b.n	30c32 <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   30bd0:	f06f 031b 	mvn.w	r3, #27
   30bd4:	e7a9      	b.n	30b2a <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
   30bd6:	4b40      	ldr	r3, [pc, #256]	; (30cd8 <z_fatal_error+0x250>)
   30bd8:	61fb      	str	r3, [r7, #28]
   30bda:	2302      	movs	r3, #2
   30bdc:	713b      	strb	r3, [r7, #4]
   30bde:	2300      	movs	r3, #0
   30be0:	717b      	strb	r3, [r7, #5]
   30be2:	71bb      	strb	r3, [r7, #6]
   30be4:	71fb      	strb	r3, [r7, #7]
   30be6:	687a      	ldr	r2, [r7, #4]
   30be8:	61ba      	str	r2, [r7, #24]
   30bea:	4619      	mov	r1, r3
   30bec:	f363 0100 	bfi	r1, r3, #0, #1
   30bf0:	f363 0141 	bfi	r1, r3, #1, #1
   30bf4:	f363 0182 	bfi	r1, r3, #2, #1
   30bf8:	f363 01c5 	bfi	r1, r3, #3, #3
   30bfc:	2201      	movs	r2, #1
   30bfe:	f362 1188 	bfi	r1, r2, #6, #3
   30c02:	2208      	movs	r2, #8
   30c04:	f362 2152 	bfi	r1, r2, #9, #10
   30c08:	f363 41de 	bfi	r1, r3, #19, #12
   30c0c:	f363 71df 	bfi	r1, r3, #31, #1
   30c10:	f107 0218 	add.w	r2, r7, #24
   30c14:	482e      	ldr	r0, [pc, #184]	; (30cd0 <z_fatal_error+0x248>)
   30c16:	f7e5 fe99 	bl	1694c <z_impl_z_log_msg_static_create>
   30c1a:	e7af      	b.n	30b7c <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
   30c1c:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
   30c20:	e7bb      	b.n	30b9a <z_fatal_error+0x112>
   30c22:	f101 0020 	add.w	r0, r1, #32
   30c26:	4438      	add	r0, r7
   30c28:	f810 0c20 	ldrb.w	r0, [r0, #-32]
   30c2c:	f803 0b01 	strb.w	r0, [r3], #1
   30c30:	3101      	adds	r1, #1
   30c32:	2901      	cmp	r1, #1
   30c34:	d9f5      	bls.n	30c22 <z_fatal_error+0x19a>
   30c36:	f1be 0f11 	cmp.w	lr, #17
   30c3a:	dd35      	ble.n	30ca8 <z_fatal_error+0x220>
   30c3c:	2312      	movs	r3, #18
   30c3e:	b14a      	cbz	r2, 30c54 <z_fatal_error+0x1cc>
   30c40:	2104      	movs	r1, #4
   30c42:	7139      	strb	r1, [r7, #4]
   30c44:	2100      	movs	r1, #0
   30c46:	7179      	strb	r1, [r7, #5]
   30c48:	71b9      	strb	r1, [r7, #6]
   30c4a:	2101      	movs	r1, #1
   30c4c:	71f9      	strb	r1, [r7, #7]
   30c4e:	6878      	ldr	r0, [r7, #4]
   30c50:	f8cc 0010 	str.w	r0, [ip, #16]
   30c54:	2100      	movs	r1, #0
   30c56:	f36f 0100 	bfc	r1, #0, #1
   30c5a:	f36f 0141 	bfc	r1, #1, #1
   30c5e:	f36f 0182 	bfc	r1, #2, #1
   30c62:	f36f 01c5 	bfc	r1, #3, #3
   30c66:	2001      	movs	r0, #1
   30c68:	f360 1188 	bfi	r1, r0, #6, #3
   30c6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   30c70:	f363 2152 	bfi	r1, r3, #9, #10
   30c74:	f36f 41de 	bfc	r1, #19, #12
   30c78:	f36f 71df 	bfc	r1, #31, #1
   30c7c:	2300      	movs	r3, #0
   30c7e:	4814      	ldr	r0, [pc, #80]	; (30cd0 <z_fatal_error+0x248>)
   30c80:	f7e5 fe64 	bl	1694c <z_impl_z_log_msg_static_create>
   30c84:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   30c86:	4629      	mov	r1, r5
   30c88:	4620      	mov	r0, r4
   30c8a:	f7ff fecb 	bl	30a24 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   30c8e:	2c04      	cmp	r4, #4
   30c90:	d00d      	beq.n	30cae <z_fatal_error+0x226>
	__asm__ volatile(
   30c92:	f388 8811 	msr	BASEPRI, r8
   30c96:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   30c9a:	4630      	mov	r0, r6
   30c9c:	f7e9 fc98 	bl	1a5d0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   30ca0:	3724      	adds	r7, #36	; 0x24
   30ca2:	46bd      	mov	sp, r7
   30ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
   30ca8:	f06f 031b 	mvn.w	r3, #27
   30cac:	e7c7      	b.n	30c3e <z_fatal_error+0x1b6>
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   30cae:	4c0b      	ldr	r4, [pc, #44]	; (30cdc <z_fatal_error+0x254>)
   30cb0:	2393      	movs	r3, #147	; 0x93
   30cb2:	4622      	mov	r2, r4
   30cb4:	490a      	ldr	r1, [pc, #40]	; (30ce0 <z_fatal_error+0x258>)
   30cb6:	480b      	ldr	r0, [pc, #44]	; (30ce4 <z_fatal_error+0x25c>)
   30cb8:	f005 faec 	bl	36294 <assert_print>
   30cbc:	480a      	ldr	r0, [pc, #40]	; (30ce8 <z_fatal_error+0x260>)
   30cbe:	f005 fae9 	bl	36294 <assert_print>
   30cc2:	2193      	movs	r1, #147	; 0x93
   30cc4:	4620      	mov	r0, r4
   30cc6:	f005 fade 	bl	36286 <assert_post_action>
   30cca:	bf00      	nop
   30ccc:	00045ec4 	.word	0x00045ec4
   30cd0:	0003f488 	.word	0x0003f488
   30cd4:	00045f10 	.word	0x00045f10
   30cd8:	00045eec 	.word	0x00045eec
   30cdc:	00045f28 	.word	0x00045f28
   30ce0:	00045f4c 	.word	0x00045f4c
   30ce4:	0003f72c 	.word	0x0003f72c
   30ce8:	00045f6c 	.word	0x00045f6c

00030cec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
   30cec:	b570      	push	{r4, r5, r6, lr}
   30cee:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   30cf0:	4b11      	ldr	r3, [pc, #68]	; (30d38 <z_sys_init_run_level+0x4c>)
   30cf2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   30cf6:	e009      	b.n	30d0c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   30cf8:	4240      	negs	r0, r0
   30cfa:	e017      	b.n	30d2c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   30cfc:	68eb      	ldr	r3, [r5, #12]
   30cfe:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   30d00:	68ea      	ldr	r2, [r5, #12]
   30d02:	7853      	ldrb	r3, [r2, #1]
   30d04:	f043 0301 	orr.w	r3, r3, #1
   30d08:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   30d0a:	3408      	adds	r4, #8
   30d0c:	1c73      	adds	r3, r6, #1
   30d0e:	4a0a      	ldr	r2, [pc, #40]	; (30d38 <z_sys_init_run_level+0x4c>)
   30d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   30d14:	42a3      	cmp	r3, r4
   30d16:	d90d      	bls.n	30d34 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   30d18:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   30d1a:	6823      	ldr	r3, [r4, #0]
   30d1c:	4628      	mov	r0, r5
   30d1e:	4798      	blx	r3
		if (dev != NULL) {
   30d20:	2d00      	cmp	r5, #0
   30d22:	d0f2      	beq.n	30d0a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   30d24:	2800      	cmp	r0, #0
   30d26:	d0eb      	beq.n	30d00 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   30d28:	2800      	cmp	r0, #0
   30d2a:	dbe5      	blt.n	30cf8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   30d2c:	28ff      	cmp	r0, #255	; 0xff
   30d2e:	dde5      	ble.n	30cfc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   30d30:	20ff      	movs	r0, #255	; 0xff
   30d32:	e7e3      	b.n	30cfc <z_sys_init_run_level+0x10>
		}
	}
}
   30d34:	bd70      	pop	{r4, r5, r6, pc}
   30d36:	bf00      	nop
   30d38:	00045fb4 	.word	0x00045fb4

00030d3c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   30d3c:	b510      	push	{r4, lr}
   30d3e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   30d40:	23b8      	movs	r3, #184	; 0xb8
   30d42:	4c11      	ldr	r4, [pc, #68]	; (30d88 <init_idle_thread+0x4c>)
   30d44:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
   30d48:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   30d4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   30d50:	4b0e      	ldr	r3, [pc, #56]	; (30d8c <init_idle_thread+0x50>)
   30d52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
   30d56:	4a0e      	ldr	r2, [pc, #56]	; (30d90 <init_idle_thread+0x54>)
   30d58:	9205      	str	r2, [sp, #20]
   30d5a:	2201      	movs	r2, #1
   30d5c:	9204      	str	r2, [sp, #16]
   30d5e:	220f      	movs	r2, #15
   30d60:	9203      	str	r2, [sp, #12]
   30d62:	2200      	movs	r2, #0
   30d64:	9202      	str	r2, [sp, #8]
   30d66:	9201      	str	r2, [sp, #4]
   30d68:	9300      	str	r3, [sp, #0]
   30d6a:	4b0a      	ldr	r3, [pc, #40]	; (30d94 <init_idle_thread+0x58>)
   30d6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   30d70:	4909      	ldr	r1, [pc, #36]	; (30d98 <init_idle_thread+0x5c>)
   30d72:	eb01 118c 	add.w	r1, r1, ip, lsl #6
   30d76:	4620      	mov	r0, r4
   30d78:	f000 fbc0 	bl	314fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   30d7c:	7b63      	ldrb	r3, [r4, #13]
   30d7e:	f023 0304 	bic.w	r3, r3, #4
   30d82:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   30d84:	b006      	add	sp, #24
   30d86:	bd10      	pop	{r4, pc}
   30d88:	2000b980 	.word	0x2000b980
   30d8c:	2000ca40 	.word	0x2000ca40
   30d90:	00045fa4 	.word	0x00045fa4
   30d94:	000317f5 	.word	0x000317f5
   30d98:	20010168 	.word	0x20010168

00030d9c <bg_thread_main>:
{
   30d9c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   30d9e:	4b0a      	ldr	r3, [pc, #40]	; (30dc8 <bg_thread_main+0x2c>)
   30da0:	2201      	movs	r2, #1
   30da2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   30da4:	2003      	movs	r0, #3
   30da6:	f7ff ffa1 	bl	30cec <z_sys_init_run_level>
	boot_banner();
   30daa:	f004 fc51 	bl	35650 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   30dae:	2004      	movs	r0, #4
   30db0:	f7ff ff9c 	bl	30cec <z_sys_init_run_level>
	z_init_static_threads();
   30db4:	f000 fca6 	bl	31704 <z_init_static_threads>
	(void)main();
   30db8:	f7e2 fd60 	bl	1387c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   30dbc:	4a03      	ldr	r2, [pc, #12]	; (30dcc <bg_thread_main+0x30>)
   30dbe:	7b13      	ldrb	r3, [r2, #12]
   30dc0:	f023 0301 	bic.w	r3, r3, #1
   30dc4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   30dc6:	bd08      	pop	{r3, pc}
   30dc8:	2000cabb 	.word	0x2000cabb
   30dcc:	2000ba38 	.word	0x2000ba38

00030dd0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   30dd0:	b508      	push	{r3, lr}
   30dd2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   30dd4:	4a01      	ldr	r2, [pc, #4]	; (30ddc <switch_to_main_thread+0xc>)
   30dd6:	4802      	ldr	r0, [pc, #8]	; (30de0 <switch_to_main_thread+0x10>)
   30dd8:	f7e8 fbc2 	bl	19560 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   30ddc:	00030d9d 	.word	0x00030d9d
   30de0:	2000ba38 	.word	0x2000ba38

00030de4 <z_bss_zero>:
{
   30de4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   30de6:	4803      	ldr	r0, [pc, #12]	; (30df4 <z_bss_zero+0x10>)
   30de8:	4a03      	ldr	r2, [pc, #12]	; (30df8 <z_bss_zero+0x14>)
   30dea:	1a12      	subs	r2, r2, r0
   30dec:	2100      	movs	r1, #0
   30dee:	f00d fd2f 	bl	3e850 <z_early_memset>
}
   30df2:	bd08      	pop	{r3, pc}
   30df4:	20008ba0 	.word	0x20008ba0
   30df8:	2000cabc 	.word	0x2000cabc

00030dfc <z_init_cpu>:
{
   30dfc:	b510      	push	{r4, lr}
   30dfe:	4604      	mov	r4, r0
	init_idle_thread(id);
   30e00:	f7ff ff9c 	bl	30d3c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   30e04:	23b8      	movs	r3, #184	; 0xb8
   30e06:	490a      	ldr	r1, [pc, #40]	; (30e30 <z_init_cpu+0x34>)
   30e08:	fb03 1104 	mla	r1, r3, r4, r1
   30e0c:	4a09      	ldr	r2, [pc, #36]	; (30e34 <z_init_cpu+0x38>)
   30e0e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   30e12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   30e16:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
   30e18:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   30e1a:	4b07      	ldr	r3, [pc, #28]	; (30e38 <z_init_cpu+0x3c>)
   30e1c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
   30e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
   30e24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   30e28:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   30e2c:	6053      	str	r3, [r2, #4]
}
   30e2e:	bd10      	pop	{r4, pc}
   30e30:	2000b980 	.word	0x2000b980
   30e34:	2000ca40 	.word	0x2000ca40
   30e38:	2000f968 	.word	0x2000f968

00030e3c <prepare_multithreading>:
{
   30e3c:	b570      	push	{r4, r5, r6, lr}
   30e3e:	b086      	sub	sp, #24
	z_sched_init();
   30e40:	f002 ff5a 	bl	33cf8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
   30e44:	4d10      	ldr	r5, [pc, #64]	; (30e88 <prepare_multithreading+0x4c>)
   30e46:	4b11      	ldr	r3, [pc, #68]	; (30e8c <prepare_multithreading+0x50>)
   30e48:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   30e4a:	4b11      	ldr	r3, [pc, #68]	; (30e90 <prepare_multithreading+0x54>)
   30e4c:	9305      	str	r3, [sp, #20]
   30e4e:	2301      	movs	r3, #1
   30e50:	9304      	str	r3, [sp, #16]
   30e52:	2400      	movs	r4, #0
   30e54:	9403      	str	r4, [sp, #12]
   30e56:	9402      	str	r4, [sp, #8]
   30e58:	9401      	str	r4, [sp, #4]
   30e5a:	9400      	str	r4, [sp, #0]
   30e5c:	4b0d      	ldr	r3, [pc, #52]	; (30e94 <prepare_multithreading+0x58>)
   30e5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   30e62:	490d      	ldr	r1, [pc, #52]	; (30e98 <prepare_multithreading+0x5c>)
   30e64:	4628      	mov	r0, r5
   30e66:	f000 fb49 	bl	314fc <z_setup_new_thread>
   30e6a:	4606      	mov	r6, r0
   30e6c:	7b6b      	ldrb	r3, [r5, #13]
   30e6e:	f023 0304 	bic.w	r3, r3, #4
   30e72:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
   30e74:	4628      	mov	r0, r5
   30e76:	f002 fad3 	bl	33420 <z_ready_thread>
	z_init_cpu(0);
   30e7a:	4620      	mov	r0, r4
   30e7c:	f7ff ffbe 	bl	30dfc <z_init_cpu>
}
   30e80:	4630      	mov	r0, r6
   30e82:	b006      	add	sp, #24
   30e84:	bd70      	pop	{r4, r5, r6, pc}
   30e86:	bf00      	nop
   30e88:	2000ba38 	.word	0x2000ba38
   30e8c:	2000ca40 	.word	0x2000ca40
   30e90:	00045fac 	.word	0x00045fac
   30e94:	00030d9d 	.word	0x00030d9d
   30e98:	200102a8 	.word	0x200102a8

00030e9c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   30e9c:	b500      	push	{lr}
   30e9e:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   30ea0:	2000      	movs	r0, #0
   30ea2:	f7ff ff23 	bl	30cec <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   30ea6:	4b1f      	ldr	r3, [pc, #124]	; (30f24 <z_cstart+0x88>)
	uint32_t msp =
   30ea8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   30eac:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   30eb0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   30eb4:	4c1c      	ldr	r4, [pc, #112]	; (30f28 <z_cstart+0x8c>)
   30eb6:	23e0      	movs	r3, #224	; 0xe0
   30eb8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   30ebc:	2500      	movs	r5, #0
   30ebe:	77e5      	strb	r5, [r4, #31]
   30ec0:	7625      	strb	r5, [r4, #24]
   30ec2:	7665      	strb	r5, [r4, #25]
   30ec4:	76a5      	strb	r5, [r4, #26]
   30ec6:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   30eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30ecc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   30ed0:	6263      	str	r3, [r4, #36]	; 0x24
   30ed2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   30ed6:	f7e9 fad9 	bl	1a48c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   30eda:	f7e8 f8e5 	bl	190a8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   30ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30ee2:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   30ee4:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   30ee6:	f7e9 fe0b 	bl	1ab00 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   30eea:	f7e9 fb8b 	bl	1a604 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   30eee:	f7e5 fb07 	bl	16500 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   30ef2:	2401      	movs	r4, #1
   30ef4:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   30ef8:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   30efc:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   30efe:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
   30f00:	4668      	mov	r0, sp
   30f02:	f004 fb89 	bl	35618 <k_thread_system_pool_assign>

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   30f06:	4b09      	ldr	r3, [pc, #36]	; (30f2c <z_cstart+0x90>)
   30f08:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   30f0c:	f7ff fd16 	bl	3093c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   30f10:	4620      	mov	r0, r4
   30f12:	f7ff feeb 	bl	30cec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   30f16:	2002      	movs	r0, #2
   30f18:	f7ff fee8 	bl	30cec <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   30f1c:	f7ff ff8e 	bl	30e3c <prepare_multithreading>
   30f20:	f7ff ff56 	bl	30dd0 <switch_to_main_thread>
   30f24:	2000f968 	.word	0x2000f968
   30f28:	e000ed00 	.word	0xe000ed00
   30f2c:	2000ca40 	.word	0x2000ca40

00030f30 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   30f30:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   30f32:	4c0f      	ldr	r4, [pc, #60]	; (30f70 <statics_init+0x40>)
   30f34:	e005      	b.n	30f42 <statics_init+0x12>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   30f36:	68a2      	ldr	r2, [r4, #8]
   30f38:	6861      	ldr	r1, [r4, #4]
   30f3a:	4620      	mov	r0, r4
   30f3c:	f00d fc90 	bl	3e860 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   30f40:	3418      	adds	r4, #24
   30f42:	4b0c      	ldr	r3, [pc, #48]	; (30f74 <statics_init+0x44>)
   30f44:	429c      	cmp	r4, r3
   30f46:	d804      	bhi.n	30f52 <statics_init+0x22>
   30f48:	4b0a      	ldr	r3, [pc, #40]	; (30f74 <statics_init+0x44>)
   30f4a:	429c      	cmp	r4, r3
   30f4c:	d3f3      	bcc.n	30f36 <statics_init+0x6>
		}
	}
	return 0;
}
   30f4e:	2000      	movs	r0, #0
   30f50:	bd10      	pop	{r4, pc}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   30f52:	4c09      	ldr	r4, [pc, #36]	; (30f78 <statics_init+0x48>)
   30f54:	2318      	movs	r3, #24
   30f56:	4622      	mov	r2, r4
   30f58:	4908      	ldr	r1, [pc, #32]	; (30f7c <statics_init+0x4c>)
   30f5a:	4809      	ldr	r0, [pc, #36]	; (30f80 <statics_init+0x50>)
   30f5c:	f005 f99a 	bl	36294 <assert_print>
   30f60:	4808      	ldr	r0, [pc, #32]	; (30f84 <statics_init+0x54>)
   30f62:	f005 f997 	bl	36294 <assert_print>
   30f66:	2118      	movs	r1, #24
   30f68:	4620      	mov	r0, r4
   30f6a:	f005 f98c 	bl	36286 <assert_post_action>
   30f6e:	bf00      	nop
   30f70:	200088fc 	.word	0x200088fc
   30f74:	20008914 	.word	0x20008914
   30f78:	00045fd0 	.word	0x00045fd0
   30f7c:	00045ff4 	.word	0x00045ff4
   30f80:	0003f72c 	.word	0x0003f72c
   30f84:	00040eb4 	.word	0x00040eb4

00030f88 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   30f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30f8c:	b085      	sub	sp, #20
   30f8e:	4680      	mov	r8, r0
   30f90:	9102      	str	r1, [sp, #8]
   30f92:	4693      	mov	fp, r2
   30f94:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
   30f98:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   30f9a:	4648      	mov	r0, r9
   30f9c:	4621      	mov	r1, r4
   30f9e:	f00d fe67 	bl	3ec70 <sys_clock_timeout_end_calc>
   30fa2:	4607      	mov	r7, r0
   30fa4:	468a      	mov	sl, r1
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30fa6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   30faa:	bf08      	it	eq
   30fac:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   30fb0:	d01b      	beq.n	30fea <k_heap_aligned_alloc+0x62>

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   30fb2:	f108 0614 	add.w	r6, r8, #20
	__asm__ volatile(
   30fb6:	f04f 0320 	mov.w	r3, #32
   30fba:	f3ef 8511 	mrs	r5, BASEPRI
   30fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   30fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30fc6:	4630      	mov	r0, r6
   30fc8:	f000 fa18 	bl	313fc <z_spin_lock_valid>
   30fcc:	9003      	str	r0, [sp, #12]
   30fce:	b188      	cbz	r0, 30ff4 <k_heap_aligned_alloc+0x6c>
	z_spin_lock_set_owner(l);
   30fd0:	4630      	mov	r0, r6
   30fd2:	f000 fa33 	bl	3143c <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30fd6:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   30fda:	b113      	cbz	r3, 30fe2 <k_heap_aligned_alloc+0x5a>
   30fdc:	ea54 0409 	orrs.w	r4, r4, r9
   30fe0:	d117      	bne.n	31012 <k_heap_aligned_alloc+0x8a>

	bool blocked_alloc = false;
   30fe2:	f04f 0900 	mov.w	r9, #0
	void *ret = NULL;
   30fe6:	464c      	mov	r4, r9

	while (ret == NULL) {
   30fe8:	e038      	b.n	3105c <k_heap_aligned_alloc+0xd4>
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   30fea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   30fee:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   30ff2:	e7de      	b.n	30fb2 <k_heap_aligned_alloc+0x2a>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   30ff4:	4c3a      	ldr	r4, [pc, #232]	; (310e0 <k_heap_aligned_alloc+0x158>)
   30ff6:	2394      	movs	r3, #148	; 0x94
   30ff8:	4622      	mov	r2, r4
   30ffa:	493a      	ldr	r1, [pc, #232]	; (310e4 <k_heap_aligned_alloc+0x15c>)
   30ffc:	483a      	ldr	r0, [pc, #232]	; (310e8 <k_heap_aligned_alloc+0x160>)
   30ffe:	f005 f949 	bl	36294 <assert_print>
   31002:	4631      	mov	r1, r6
   31004:	4839      	ldr	r0, [pc, #228]	; (310ec <k_heap_aligned_alloc+0x164>)
   31006:	f005 f945 	bl	36294 <assert_print>
   3100a:	2194      	movs	r1, #148	; 0x94
   3100c:	4620      	mov	r0, r4
   3100e:	f005 f93a 	bl	36286 <assert_post_action>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   31012:	4c37      	ldr	r4, [pc, #220]	; (310f0 <k_heap_aligned_alloc+0x168>)
   31014:	234c      	movs	r3, #76	; 0x4c
   31016:	4622      	mov	r2, r4
   31018:	4936      	ldr	r1, [pc, #216]	; (310f4 <k_heap_aligned_alloc+0x16c>)
   3101a:	4833      	ldr	r0, [pc, #204]	; (310e8 <k_heap_aligned_alloc+0x160>)
   3101c:	f005 f93a 	bl	36294 <assert_print>
   31020:	4835      	ldr	r0, [pc, #212]	; (310f8 <k_heap_aligned_alloc+0x170>)
   31022:	f005 f937 	bl	36294 <assert_print>
   31026:	214c      	movs	r1, #76	; 0x4c
   31028:	4620      	mov	r0, r4
   3102a:	f005 f92c 	bl	36286 <assert_post_action>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3102e:	9000      	str	r0, [sp, #0]
   31030:	9101      	str	r1, [sp, #4]
   31032:	f108 020c 	add.w	r2, r8, #12
   31036:	4629      	mov	r1, r5
   31038:	4630      	mov	r0, r6
   3103a:	f002 fb5f 	bl	336fc <z_pend_curr>
   3103e:	f04f 0320 	mov.w	r3, #32
   31042:	f3ef 8511 	mrs	r5, BASEPRI
   31046:	f383 8812 	msr	BASEPRI_MAX, r3
   3104a:	f3bf 8f6f 	isb	sy
   3104e:	4630      	mov	r0, r6
   31050:	f000 f9d4 	bl	313fc <z_spin_lock_valid>
   31054:	b1c8      	cbz	r0, 3108a <k_heap_aligned_alloc+0x102>
	z_spin_lock_set_owner(l);
   31056:	4630      	mov	r0, r6
   31058:	f000 f9f0 	bl	3143c <z_spin_lock_set_owner>
	while (ret == NULL) {
   3105c:	bb24      	cbnz	r4, 310a8 <k_heap_aligned_alloc+0x120>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3105e:	465a      	mov	r2, fp
   31060:	9902      	ldr	r1, [sp, #8]
   31062:	4640      	mov	r0, r8
   31064:	f7e3 fa6a 	bl	1453c <sys_heap_aligned_alloc>
   31068:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   3106a:	f003 fc83 	bl	34974 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   3106e:	b9dc      	cbnz	r4, 310a8 <k_heap_aligned_alloc+0x120>
		    (ret != NULL) || ((end - now) <= 0)) {
   31070:	1a38      	subs	r0, r7, r0
   31072:	eb6a 0101 	sbc.w	r1, sl, r1
   31076:	2801      	cmp	r0, #1
   31078:	f171 0300 	sbcs.w	r3, r1, #0
   3107c:	db14      	blt.n	310a8 <k_heap_aligned_alloc+0x120>
		if (!blocked_alloc) {
   3107e:	f1b9 0f00 	cmp.w	r9, #0
   31082:	d1d4      	bne.n	3102e <k_heap_aligned_alloc+0xa6>
			blocked_alloc = true;
   31084:	f8dd 900c 	ldr.w	r9, [sp, #12]
   31088:	e7d1      	b.n	3102e <k_heap_aligned_alloc+0xa6>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3108a:	4c15      	ldr	r4, [pc, #84]	; (310e0 <k_heap_aligned_alloc+0x158>)
   3108c:	2394      	movs	r3, #148	; 0x94
   3108e:	4622      	mov	r2, r4
   31090:	4914      	ldr	r1, [pc, #80]	; (310e4 <k_heap_aligned_alloc+0x15c>)
   31092:	4815      	ldr	r0, [pc, #84]	; (310e8 <k_heap_aligned_alloc+0x160>)
   31094:	f005 f8fe 	bl	36294 <assert_print>
   31098:	4631      	mov	r1, r6
   3109a:	4814      	ldr	r0, [pc, #80]	; (310ec <k_heap_aligned_alloc+0x164>)
   3109c:	f005 f8fa 	bl	36294 <assert_print>
   310a0:	2194      	movs	r1, #148	; 0x94
   310a2:	4620      	mov	r0, r4
   310a4:	f005 f8ef 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   310a8:	4630      	mov	r0, r6
   310aa:	f000 f9b7 	bl	3141c <z_spin_unlock_valid>
   310ae:	b138      	cbz	r0, 310c0 <k_heap_aligned_alloc+0x138>
	__asm__ volatile(
   310b0:	f385 8811 	msr	BASEPRI, r5
   310b4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   310b8:	4620      	mov	r0, r4
   310ba:	b005      	add	sp, #20
   310bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310c0:	4c07      	ldr	r4, [pc, #28]	; (310e0 <k_heap_aligned_alloc+0x158>)
   310c2:	23c2      	movs	r3, #194	; 0xc2
   310c4:	4622      	mov	r2, r4
   310c6:	490d      	ldr	r1, [pc, #52]	; (310fc <k_heap_aligned_alloc+0x174>)
   310c8:	4807      	ldr	r0, [pc, #28]	; (310e8 <k_heap_aligned_alloc+0x160>)
   310ca:	f005 f8e3 	bl	36294 <assert_print>
   310ce:	4631      	mov	r1, r6
   310d0:	480b      	ldr	r0, [pc, #44]	; (31100 <k_heap_aligned_alloc+0x178>)
   310d2:	f005 f8df 	bl	36294 <assert_print>
   310d6:	21c2      	movs	r1, #194	; 0xc2
   310d8:	4620      	mov	r0, r4
   310da:	f005 f8d4 	bl	36286 <assert_post_action>
   310de:	bf00      	nop
   310e0:	00040b28 	.word	0x00040b28
   310e4:	00040b88 	.word	0x00040b88
   310e8:	0003f72c 	.word	0x0003f72c
   310ec:	00040ba0 	.word	0x00040ba0
   310f0:	00045fd0 	.word	0x00045fd0
   310f4:	0004600c 	.word	0x0004600c
   310f8:	00044634 	.word	0x00044634
   310fc:	00040b58 	.word	0x00040b58
   31100:	00040b70 	.word	0x00040b70

00031104 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   31104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31108:	4604      	mov	r4, r0
   3110a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   3110c:	f100 0514 	add.w	r5, r0, #20
	__asm__ volatile(
   31110:	f04f 0320 	mov.w	r3, #32
   31114:	f3ef 8711 	mrs	r7, BASEPRI
   31118:	f383 8812 	msr	BASEPRI_MAX, r3
   3111c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31120:	4628      	mov	r0, r5
   31122:	f000 f96b 	bl	313fc <z_spin_lock_valid>
   31126:	b188      	cbz	r0, 3114c <k_heap_free+0x48>
	z_spin_lock_set_owner(l);
   31128:	4628      	mov	r0, r5
   3112a:	f000 f987 	bl	3143c <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   3112e:	4631      	mov	r1, r6
   31130:	4620      	mov	r0, r4
   31132:	f7e3 f9b7 	bl	144a4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   31136:	f104 000c 	add.w	r0, r4, #12
   3113a:	f00d fd60 	bl	3ebfe <z_unpend_all>
   3113e:	b1a0      	cbz	r0, 3116a <k_heap_free+0x66>
		z_reschedule(&h->lock, key);
   31140:	4639      	mov	r1, r7
   31142:	4628      	mov	r0, r5
   31144:	f001 fee0 	bl	32f08 <z_reschedule>
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   31148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3114c:	4c13      	ldr	r4, [pc, #76]	; (3119c <k_heap_free+0x98>)
   3114e:	2394      	movs	r3, #148	; 0x94
   31150:	4622      	mov	r2, r4
   31152:	4913      	ldr	r1, [pc, #76]	; (311a0 <k_heap_free+0x9c>)
   31154:	4813      	ldr	r0, [pc, #76]	; (311a4 <k_heap_free+0xa0>)
   31156:	f005 f89d 	bl	36294 <assert_print>
   3115a:	4629      	mov	r1, r5
   3115c:	4812      	ldr	r0, [pc, #72]	; (311a8 <k_heap_free+0xa4>)
   3115e:	f005 f899 	bl	36294 <assert_print>
   31162:	2194      	movs	r1, #148	; 0x94
   31164:	4620      	mov	r0, r4
   31166:	f005 f88e 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3116a:	4628      	mov	r0, r5
   3116c:	f000 f956 	bl	3141c <z_spin_unlock_valid>
   31170:	b120      	cbz	r0, 3117c <k_heap_free+0x78>
	__asm__ volatile(
   31172:	f387 8811 	msr	BASEPRI, r7
   31176:	f3bf 8f6f 	isb	sy
   3117a:	e7e5      	b.n	31148 <k_heap_free+0x44>
   3117c:	4c07      	ldr	r4, [pc, #28]	; (3119c <k_heap_free+0x98>)
   3117e:	23c2      	movs	r3, #194	; 0xc2
   31180:	4622      	mov	r2, r4
   31182:	490a      	ldr	r1, [pc, #40]	; (311ac <k_heap_free+0xa8>)
   31184:	4807      	ldr	r0, [pc, #28]	; (311a4 <k_heap_free+0xa0>)
   31186:	f005 f885 	bl	36294 <assert_print>
   3118a:	4629      	mov	r1, r5
   3118c:	4808      	ldr	r0, [pc, #32]	; (311b0 <k_heap_free+0xac>)
   3118e:	f005 f881 	bl	36294 <assert_print>
   31192:	21c2      	movs	r1, #194	; 0xc2
   31194:	4620      	mov	r0, r4
   31196:	f005 f876 	bl	36286 <assert_post_action>
   3119a:	bf00      	nop
   3119c:	00040b28 	.word	0x00040b28
   311a0:	00040b88 	.word	0x00040b88
   311a4:	0003f72c 	.word	0x0003f72c
   311a8:	00040ba0 	.word	0x00040ba0
   311ac:	00040b58 	.word	0x00040b58
   311b0:	00040b70 	.word	0x00040b70

000311b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   311b4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   311b6:	4c0f      	ldr	r4, [pc, #60]	; (311f4 <init_mem_slab_module+0x40>)
	int rc = 0;
   311b8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   311ba:	4b0f      	ldr	r3, [pc, #60]	; (311f8 <init_mem_slab_module+0x44>)
   311bc:	429c      	cmp	r4, r3
   311be:	d809      	bhi.n	311d4 <init_mem_slab_module+0x20>
   311c0:	4b0d      	ldr	r3, [pc, #52]	; (311f8 <init_mem_slab_module+0x44>)
   311c2:	429c      	cmp	r4, r3
   311c4:	d214      	bcs.n	311f0 <init_mem_slab_module+0x3c>
		rc = create_free_list(slab);
   311c6:	4620      	mov	r0, r4
   311c8:	f00d fb52 	bl	3e870 <create_free_list>
		if (rc < 0) {
   311cc:	2800      	cmp	r0, #0
   311ce:	db0f      	blt.n	311f0 <init_mem_slab_module+0x3c>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   311d0:	3420      	adds	r4, #32
   311d2:	e7f2      	b.n	311ba <init_mem_slab_module+0x6>
   311d4:	4c09      	ldr	r4, [pc, #36]	; (311fc <init_mem_slab_module+0x48>)
   311d6:	233d      	movs	r3, #61	; 0x3d
   311d8:	4622      	mov	r2, r4
   311da:	4909      	ldr	r1, [pc, #36]	; (31200 <init_mem_slab_module+0x4c>)
   311dc:	4809      	ldr	r0, [pc, #36]	; (31204 <init_mem_slab_module+0x50>)
   311de:	f005 f859 	bl	36294 <assert_print>
   311e2:	4809      	ldr	r0, [pc, #36]	; (31208 <init_mem_slab_module+0x54>)
   311e4:	f005 f856 	bl	36294 <assert_print>
   311e8:	213d      	movs	r1, #61	; 0x3d
   311ea:	4620      	mov	r0, r4
   311ec:	f005 f84b 	bl	36286 <assert_post_action>
		z_object_init(slab);
	}

out:
	return rc;
}
   311f0:	bd10      	pop	{r4, pc}
   311f2:	bf00      	nop
   311f4:	2000889c 	.word	0x2000889c
   311f8:	200088fc 	.word	0x200088fc
   311fc:	00046054 	.word	0x00046054
   31200:	0004607c 	.word	0x0004607c
   31204:	0003f72c 	.word	0x0003f72c
   31208:	00040eb4 	.word	0x00040eb4

0003120c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   3120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   31210:	b082      	sub	sp, #8
   31212:	4604      	mov	r4, r0
   31214:	460e      	mov	r6, r1
   31216:	4690      	mov	r8, r2
   31218:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   3121a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   3121e:	f04f 0320 	mov.w	r3, #32
   31222:	f3ef 8a11 	mrs	sl, BASEPRI
   31226:	f383 8812 	msr	BASEPRI_MAX, r3
   3122a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3122e:	4628      	mov	r0, r5
   31230:	f000 f8e4 	bl	313fc <z_spin_lock_valid>
   31234:	b1c0      	cbz	r0, 31268 <k_mem_slab_alloc+0x5c>
   31236:	46d1      	mov	r9, sl
	z_spin_lock_set_owner(l);
   31238:	4628      	mov	r0, r5
   3123a:	f000 f8ff 	bl	3143c <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   3123e:	69a1      	ldr	r1, [r4, #24]
   31240:	b309      	cbz	r1, 31286 <k_mem_slab_alloc+0x7a>
		/* take a free block */
		*mem = slab->free_list;
   31242:	6031      	str	r1, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   31244:	680b      	ldr	r3, [r1, #0]
   31246:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   31248:	69e3      	ldr	r3, [r4, #28]
   3124a:	3301      	adds	r3, #1
   3124c:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   3124e:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31250:	4628      	mov	r0, r5
   31252:	f000 f8e3 	bl	3141c <z_spin_unlock_valid>
   31256:	b370      	cbz	r0, 312b6 <k_mem_slab_alloc+0xaa>
	__asm__ volatile(
   31258:	f389 8811 	msr	BASEPRI, r9
   3125c:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   31260:	4620      	mov	r0, r4
   31262:	b002      	add	sp, #8
   31264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31268:	4c1a      	ldr	r4, [pc, #104]	; (312d4 <k_mem_slab_alloc+0xc8>)
   3126a:	2394      	movs	r3, #148	; 0x94
   3126c:	4622      	mov	r2, r4
   3126e:	491a      	ldr	r1, [pc, #104]	; (312d8 <k_mem_slab_alloc+0xcc>)
   31270:	481a      	ldr	r0, [pc, #104]	; (312dc <k_mem_slab_alloc+0xd0>)
   31272:	f005 f80f 	bl	36294 <assert_print>
   31276:	4629      	mov	r1, r5
   31278:	4819      	ldr	r0, [pc, #100]	; (312e0 <k_mem_slab_alloc+0xd4>)
   3127a:	f005 f80b 	bl	36294 <assert_print>
   3127e:	2194      	movs	r1, #148	; 0x94
   31280:	4620      	mov	r0, r4
   31282:	f005 f800 	bl	36286 <assert_post_action>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   31286:	ea57 0308 	orrs.w	r3, r7, r8
   3128a:	d104      	bne.n	31296 <k_mem_slab_alloc+0x8a>
		*mem = NULL;
   3128c:	2300      	movs	r3, #0
   3128e:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   31290:	f06f 040b 	mvn.w	r4, #11
   31294:	e7dc      	b.n	31250 <k_mem_slab_alloc+0x44>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   31296:	f8cd 8000 	str.w	r8, [sp]
   3129a:	9701      	str	r7, [sp, #4]
   3129c:	4622      	mov	r2, r4
   3129e:	4651      	mov	r1, sl
   312a0:	4628      	mov	r0, r5
   312a2:	f002 fa2b 	bl	336fc <z_pend_curr>
		if (result == 0) {
   312a6:	4604      	mov	r4, r0
   312a8:	2800      	cmp	r0, #0
   312aa:	d1d9      	bne.n	31260 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   312ac:	4b0d      	ldr	r3, [pc, #52]	; (312e4 <k_mem_slab_alloc+0xd8>)
   312ae:	689b      	ldr	r3, [r3, #8]
   312b0:	695b      	ldr	r3, [r3, #20]
   312b2:	6033      	str	r3, [r6, #0]
		return result;
   312b4:	e7d4      	b.n	31260 <k_mem_slab_alloc+0x54>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   312b6:	4c07      	ldr	r4, [pc, #28]	; (312d4 <k_mem_slab_alloc+0xc8>)
   312b8:	23c2      	movs	r3, #194	; 0xc2
   312ba:	4622      	mov	r2, r4
   312bc:	490a      	ldr	r1, [pc, #40]	; (312e8 <k_mem_slab_alloc+0xdc>)
   312be:	4807      	ldr	r0, [pc, #28]	; (312dc <k_mem_slab_alloc+0xd0>)
   312c0:	f004 ffe8 	bl	36294 <assert_print>
   312c4:	4629      	mov	r1, r5
   312c6:	4809      	ldr	r0, [pc, #36]	; (312ec <k_mem_slab_alloc+0xe0>)
   312c8:	f004 ffe4 	bl	36294 <assert_print>
   312cc:	21c2      	movs	r1, #194	; 0xc2
   312ce:	4620      	mov	r0, r4
   312d0:	f004 ffd9 	bl	36286 <assert_post_action>
   312d4:	00040b28 	.word	0x00040b28
   312d8:	00040b88 	.word	0x00040b88
   312dc:	0003f72c 	.word	0x0003f72c
   312e0:	00040ba0 	.word	0x00040ba0
   312e4:	2000ca40 	.word	0x2000ca40
   312e8:	00040b58 	.word	0x00040b58
   312ec:	00040b70 	.word	0x00040b70

000312f0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   312f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   312f4:	4604      	mov	r4, r0
   312f6:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   312f8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   312fc:	f04f 0320 	mov.w	r3, #32
   31300:	f3ef 8611 	mrs	r6, BASEPRI
   31304:	f383 8812 	msr	BASEPRI_MAX, r3
   31308:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3130c:	4638      	mov	r0, r7
   3130e:	f000 f875 	bl	313fc <z_spin_lock_valid>
   31312:	b1b8      	cbz	r0, 31344 <k_mem_slab_free+0x54>
   31314:	46b0      	mov	r8, r6
	z_spin_lock_set_owner(l);
   31316:	4638      	mov	r0, r7
   31318:	f000 f890 	bl	3143c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   3131c:	69a3      	ldr	r3, [r4, #24]
   3131e:	b303      	cbz	r3, 31362 <k_mem_slab_free+0x72>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   31320:	682b      	ldr	r3, [r5, #0]
   31322:	69a2      	ldr	r2, [r4, #24]
   31324:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   31326:	682b      	ldr	r3, [r5, #0]
   31328:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   3132a:	69e3      	ldr	r3, [r4, #28]
   3132c:	3b01      	subs	r3, #1
   3132e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31330:	4638      	mov	r0, r7
   31332:	f000 f873 	bl	3141c <z_spin_unlock_valid>
   31336:	b328      	cbz	r0, 31384 <k_mem_slab_free+0x94>
	__asm__ volatile(
   31338:	f388 8811 	msr	BASEPRI, r8
   3133c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   31340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31344:	4c17      	ldr	r4, [pc, #92]	; (313a4 <k_mem_slab_free+0xb4>)
   31346:	2394      	movs	r3, #148	; 0x94
   31348:	4622      	mov	r2, r4
   3134a:	4917      	ldr	r1, [pc, #92]	; (313a8 <k_mem_slab_free+0xb8>)
   3134c:	4817      	ldr	r0, [pc, #92]	; (313ac <k_mem_slab_free+0xbc>)
   3134e:	f004 ffa1 	bl	36294 <assert_print>
   31352:	4639      	mov	r1, r7
   31354:	4816      	ldr	r0, [pc, #88]	; (313b0 <k_mem_slab_free+0xc0>)
   31356:	f004 ff9d 	bl	36294 <assert_print>
   3135a:	2194      	movs	r1, #148	; 0x94
   3135c:	4620      	mov	r0, r4
   3135e:	f004 ff92 	bl	36286 <assert_post_action>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   31362:	4620      	mov	r0, r4
   31364:	f002 fc6e 	bl	33c44 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   31368:	2800      	cmp	r0, #0
   3136a:	d0d9      	beq.n	31320 <k_mem_slab_free+0x30>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   3136c:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   3136e:	2100      	movs	r1, #0
   31370:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   31374:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   31376:	f002 f853 	bl	33420 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   3137a:	4631      	mov	r1, r6
   3137c:	4638      	mov	r0, r7
   3137e:	f001 fdc3 	bl	32f08 <z_reschedule>
			return;
   31382:	e7dd      	b.n	31340 <k_mem_slab_free+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31384:	4c07      	ldr	r4, [pc, #28]	; (313a4 <k_mem_slab_free+0xb4>)
   31386:	23c2      	movs	r3, #194	; 0xc2
   31388:	4622      	mov	r2, r4
   3138a:	490a      	ldr	r1, [pc, #40]	; (313b4 <k_mem_slab_free+0xc4>)
   3138c:	4807      	ldr	r0, [pc, #28]	; (313ac <k_mem_slab_free+0xbc>)
   3138e:	f004 ff81 	bl	36294 <assert_print>
   31392:	4639      	mov	r1, r7
   31394:	4808      	ldr	r0, [pc, #32]	; (313b8 <k_mem_slab_free+0xc8>)
   31396:	f004 ff7d 	bl	36294 <assert_print>
   3139a:	21c2      	movs	r1, #194	; 0xc2
   3139c:	4620      	mov	r0, r4
   3139e:	f004 ff72 	bl	36286 <assert_post_action>
   313a2:	bf00      	nop
   313a4:	00040b28 	.word	0x00040b28
   313a8:	00040b88 	.word	0x00040b88
   313ac:	0003f72c 	.word	0x0003f72c
   313b0:	00040ba0 	.word	0x00040ba0
   313b4:	00040b58 	.word	0x00040b58
   313b8:	00040b70 	.word	0x00040b70

000313bc <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   313bc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   313be:	4604      	mov	r4, r0
   313c0:	b140      	cbz	r0, 313d4 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
   313c2:	221f      	movs	r2, #31
   313c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   313c8:	f006 ffa7 	bl	3831a <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   313cc:	2000      	movs	r0, #0
   313ce:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   313d2:	bd10      	pop	{r4, pc}
		thread = _current;
   313d4:	4b01      	ldr	r3, [pc, #4]	; (313dc <z_impl_k_thread_name_set+0x20>)
   313d6:	689c      	ldr	r4, [r3, #8]
   313d8:	e7f3      	b.n	313c2 <z_impl_k_thread_name_set+0x6>
   313da:	bf00      	nop
   313dc:	2000ca40 	.word	0x2000ca40

000313e0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   313e0:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   313e2:	ea53 0102 	orrs.w	r1, r3, r2
   313e6:	d102      	bne.n	313ee <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
   313e8:	f00d fa6d 	bl	3e8c6 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   313ec:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   313ee:	4902      	ldr	r1, [pc, #8]	; (313f8 <schedule_new_thread+0x18>)
   313f0:	3018      	adds	r0, #24
   313f2:	f003 f819 	bl	34428 <z_add_timeout>
   313f6:	e7f9      	b.n	313ec <schedule_new_thread+0xc>
   313f8:	00033575 	.word	0x00033575

000313fc <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   313fc:	6803      	ldr	r3, [r0, #0]

	if (thread_cpu != 0U) {
   313fe:	b13b      	cbz	r3, 31410 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   31400:	f003 0303 	and.w	r3, r3, #3
   31404:	4a04      	ldr	r2, [pc, #16]	; (31418 <z_spin_lock_valid+0x1c>)
   31406:	7d12      	ldrb	r2, [r2, #20]
   31408:	4293      	cmp	r3, r2
   3140a:	d003      	beq.n	31414 <z_spin_lock_valid+0x18>
			return false;
		}
	}
	return true;
   3140c:	2001      	movs	r0, #1
   3140e:	4770      	bx	lr
   31410:	2001      	movs	r0, #1
   31412:	4770      	bx	lr
			return false;
   31414:	2000      	movs	r0, #0
}
   31416:	4770      	bx	lr
   31418:	2000ca40 	.word	0x2000ca40

0003141c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   3141c:	6801      	ldr	r1, [r0, #0]
   3141e:	4a06      	ldr	r2, [pc, #24]	; (31438 <z_spin_unlock_valid+0x1c>)
   31420:	7d13      	ldrb	r3, [r2, #20]
   31422:	6892      	ldr	r2, [r2, #8]
   31424:	4313      	orrs	r3, r2
   31426:	4299      	cmp	r1, r3
   31428:	d103      	bne.n	31432 <z_spin_unlock_valid+0x16>
		return false;
	}
	l->thread_cpu = 0;
   3142a:	2300      	movs	r3, #0
   3142c:	6003      	str	r3, [r0, #0]
	return true;
   3142e:	2001      	movs	r0, #1
   31430:	4770      	bx	lr
		return false;
   31432:	2000      	movs	r0, #0
}
   31434:	4770      	bx	lr
   31436:	bf00      	nop
   31438:	2000ca40 	.word	0x2000ca40

0003143c <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   3143c:	4a02      	ldr	r2, [pc, #8]	; (31448 <z_spin_lock_set_owner+0xc>)
   3143e:	7d13      	ldrb	r3, [r2, #20]
   31440:	6892      	ldr	r2, [r2, #8]
   31442:	4313      	orrs	r3, r2
   31444:	6003      	str	r3, [r0, #0]
}
   31446:	4770      	bx	lr
   31448:	2000ca40 	.word	0x2000ca40

0003144c <z_thread_monitor_exit>:
{
   3144c:	b538      	push	{r3, r4, r5, lr}
   3144e:	4604      	mov	r4, r0
	__asm__ volatile(
   31450:	f04f 0320 	mov.w	r3, #32
   31454:	f3ef 8511 	mrs	r5, BASEPRI
   31458:	f383 8812 	msr	BASEPRI_MAX, r3
   3145c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31460:	481e      	ldr	r0, [pc, #120]	; (314dc <z_thread_monitor_exit+0x90>)
   31462:	f7ff ffcb 	bl	313fc <z_spin_lock_valid>
   31466:	b150      	cbz	r0, 3147e <z_thread_monitor_exit+0x32>
	z_spin_lock_set_owner(l);
   31468:	481c      	ldr	r0, [pc, #112]	; (314dc <z_thread_monitor_exit+0x90>)
   3146a:	f7ff ffe7 	bl	3143c <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   3146e:	4b1c      	ldr	r3, [pc, #112]	; (314e0 <z_thread_monitor_exit+0x94>)
   31470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   31472:	42a3      	cmp	r3, r4
   31474:	d113      	bne.n	3149e <z_thread_monitor_exit+0x52>
		_kernel.threads = _kernel.threads->next_thread;
   31476:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   31478:	4b19      	ldr	r3, [pc, #100]	; (314e0 <z_thread_monitor_exit+0x94>)
   3147a:	629a      	str	r2, [r3, #40]	; 0x28
   3147c:	e016      	b.n	314ac <z_thread_monitor_exit+0x60>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3147e:	4c19      	ldr	r4, [pc, #100]	; (314e4 <z_thread_monitor_exit+0x98>)
   31480:	2394      	movs	r3, #148	; 0x94
   31482:	4622      	mov	r2, r4
   31484:	4918      	ldr	r1, [pc, #96]	; (314e8 <z_thread_monitor_exit+0x9c>)
   31486:	4819      	ldr	r0, [pc, #100]	; (314ec <z_thread_monitor_exit+0xa0>)
   31488:	f004 ff04 	bl	36294 <assert_print>
   3148c:	4913      	ldr	r1, [pc, #76]	; (314dc <z_thread_monitor_exit+0x90>)
   3148e:	4818      	ldr	r0, [pc, #96]	; (314f0 <z_thread_monitor_exit+0xa4>)
   31490:	f004 ff00 	bl	36294 <assert_print>
   31494:	2194      	movs	r1, #148	; 0x94
   31496:	4620      	mov	r0, r4
   31498:	f004 fef5 	bl	36286 <assert_post_action>
			prev_thread = prev_thread->next_thread;
   3149c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   3149e:	b113      	cbz	r3, 314a6 <z_thread_monitor_exit+0x5a>
			(thread != prev_thread->next_thread)) {
   314a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   314a2:	42a2      	cmp	r2, r4
   314a4:	d1fa      	bne.n	3149c <z_thread_monitor_exit+0x50>
		if (prev_thread != NULL) {
   314a6:	b10b      	cbz	r3, 314ac <z_thread_monitor_exit+0x60>
			prev_thread->next_thread = thread->next_thread;
   314a8:	6f62      	ldr	r2, [r4, #116]	; 0x74
   314aa:	675a      	str	r2, [r3, #116]	; 0x74
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   314ac:	480b      	ldr	r0, [pc, #44]	; (314dc <z_thread_monitor_exit+0x90>)
   314ae:	f7ff ffb5 	bl	3141c <z_spin_unlock_valid>
   314b2:	b120      	cbz	r0, 314be <z_thread_monitor_exit+0x72>
	__asm__ volatile(
   314b4:	f385 8811 	msr	BASEPRI, r5
   314b8:	f3bf 8f6f 	isb	sy
}
   314bc:	bd38      	pop	{r3, r4, r5, pc}
   314be:	4c09      	ldr	r4, [pc, #36]	; (314e4 <z_thread_monitor_exit+0x98>)
   314c0:	23c2      	movs	r3, #194	; 0xc2
   314c2:	4622      	mov	r2, r4
   314c4:	490b      	ldr	r1, [pc, #44]	; (314f4 <z_thread_monitor_exit+0xa8>)
   314c6:	4809      	ldr	r0, [pc, #36]	; (314ec <z_thread_monitor_exit+0xa0>)
   314c8:	f004 fee4 	bl	36294 <assert_print>
   314cc:	4903      	ldr	r1, [pc, #12]	; (314dc <z_thread_monitor_exit+0x90>)
   314ce:	480a      	ldr	r0, [pc, #40]	; (314f8 <z_thread_monitor_exit+0xac>)
   314d0:	f004 fee0 	bl	36294 <assert_print>
   314d4:	21c2      	movs	r1, #194	; 0xc2
   314d6:	4620      	mov	r0, r4
   314d8:	f004 fed5 	bl	36286 <assert_post_action>
   314dc:	2000ca6c 	.word	0x2000ca6c
   314e0:	2000ca40 	.word	0x2000ca40
   314e4:	00040b28 	.word	0x00040b28
   314e8:	00040b88 	.word	0x00040b88
   314ec:	0003f72c 	.word	0x0003f72c
   314f0:	00040ba0 	.word	0x00040ba0
   314f4:	00040b58 	.word	0x00040b58
   314f8:	00040b70 	.word	0x00040b70

000314fc <z_setup_new_thread>:
{
   314fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31500:	b085      	sub	sp, #20
   31502:	4604      	mov	r4, r0
   31504:	460e      	mov	r6, r1
   31506:	4617      	mov	r7, r2
   31508:	461d      	mov	r5, r3
   3150a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   3150e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
   31512:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   31516:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
	Z_ASSERT_VALID_PRIO(prio, entry);
   3151a:	f1b8 0f0f 	cmp.w	r8, #15
   3151e:	d05e      	beq.n	315de <z_setup_new_thread+0xe2>
   31520:	f108 0310 	add.w	r3, r8, #16
   31524:	2b1e      	cmp	r3, #30
   31526:	d85e      	bhi.n	315e6 <z_setup_new_thread+0xea>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   31528:	f104 0358 	add.w	r3, r4, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   3152c:	65a3      	str	r3, [r4, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   3152e:	65e3      	str	r3, [r4, #92]	; 0x5c
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   31530:	9b12      	ldr	r3, [sp, #72]	; 0x48
   31532:	2204      	movs	r2, #4
   31534:	4641      	mov	r1, r8
   31536:	4620      	mov	r0, r4
   31538:	f00d f9c9 	bl	3e8ce <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   3153c:	463a      	mov	r2, r7
   3153e:	4631      	mov	r1, r6
   31540:	4620      	mov	r0, r4
   31542:	f00d f9ac 	bl	3e89e <setup_thread_stack>
   31546:	4607      	mov	r7, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   31548:	f8cd 9008 	str.w	r9, [sp, #8]
   3154c:	f8cd a004 	str.w	sl, [sp, #4]
   31550:	f8cd b000 	str.w	fp, [sp]
   31554:	462b      	mov	r3, r5
   31556:	4602      	mov	r2, r0
   31558:	4631      	mov	r1, r6
   3155a:	4620      	mov	r0, r4
   3155c:	f7e7 ffda 	bl	19514 <arch_new_thread>
	new_thread->init_data = NULL;
   31560:	2300      	movs	r3, #0
   31562:	6563      	str	r3, [r4, #84]	; 0x54
	new_thread->entry.pEntry = entry;
   31564:	6665      	str	r5, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   31566:	f8c4 b068 	str.w	fp, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   3156a:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   3156e:	f8c4 9070 	str.w	r9, [r4, #112]	; 0x70
	__asm__ volatile(
   31572:	f04f 0320 	mov.w	r3, #32
   31576:	f3ef 8511 	mrs	r5, BASEPRI
   3157a:	f383 8812 	msr	BASEPRI_MAX, r3
   3157e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31582:	4835      	ldr	r0, [pc, #212]	; (31658 <z_setup_new_thread+0x15c>)
   31584:	f7ff ff3a 	bl	313fc <z_spin_lock_valid>
   31588:	2800      	cmp	r0, #0
   3158a:	d040      	beq.n	3160e <z_setup_new_thread+0x112>
	z_spin_lock_set_owner(l);
   3158c:	4e32      	ldr	r6, [pc, #200]	; (31658 <z_setup_new_thread+0x15c>)
   3158e:	4630      	mov	r0, r6
   31590:	f7ff ff54 	bl	3143c <z_spin_lock_set_owner>
	new_thread->next_thread = _kernel.threads;
   31594:	4b31      	ldr	r3, [pc, #196]	; (3165c <z_setup_new_thread+0x160>)
   31596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   31598:	6762      	str	r2, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   3159a:	629c      	str	r4, [r3, #40]	; 0x28
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3159c:	4630      	mov	r0, r6
   3159e:	f7ff ff3d 	bl	3141c <z_spin_unlock_valid>
   315a2:	2800      	cmp	r0, #0
   315a4:	d042      	beq.n	3162c <z_setup_new_thread+0x130>
	__asm__ volatile(
   315a6:	f385 8811 	msr	BASEPRI, r5
   315aa:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   315ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   315b0:	2b00      	cmp	r3, #0
   315b2:	d04a      	beq.n	3164a <z_setup_new_thread+0x14e>
		strncpy(new_thread->name, name,
   315b4:	221f      	movs	r2, #31
   315b6:	4619      	mov	r1, r3
   315b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
   315bc:	f006 fead 	bl	3831a <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   315c0:	2300      	movs	r3, #0
   315c2:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
	if (!_current) {
   315c6:	4b25      	ldr	r3, [pc, #148]	; (3165c <z_setup_new_thread+0x160>)
   315c8:	689b      	ldr	r3, [r3, #8]
   315ca:	2b00      	cmp	r3, #0
   315cc:	d041      	beq.n	31652 <z_setup_new_thread+0x156>
	new_thread->resource_pool = _current->resource_pool;
   315ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   315d2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
}
   315d6:	4638      	mov	r0, r7
   315d8:	b005      	add	sp, #20
   315da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   315de:	4b20      	ldr	r3, [pc, #128]	; (31660 <z_setup_new_thread+0x164>)
   315e0:	429d      	cmp	r5, r3
   315e2:	d19d      	bne.n	31520 <z_setup_new_thread+0x24>
   315e4:	e7a0      	b.n	31528 <z_setup_new_thread+0x2c>
   315e6:	4c1f      	ldr	r4, [pc, #124]	; (31664 <z_setup_new_thread+0x168>)
   315e8:	f44f 7306 	mov.w	r3, #536	; 0x218
   315ec:	4622      	mov	r2, r4
   315ee:	491e      	ldr	r1, [pc, #120]	; (31668 <z_setup_new_thread+0x16c>)
   315f0:	481e      	ldr	r0, [pc, #120]	; (3166c <z_setup_new_thread+0x170>)
   315f2:	f004 fe4f 	bl	36294 <assert_print>
   315f6:	f06f 030f 	mvn.w	r3, #15
   315fa:	220e      	movs	r2, #14
   315fc:	4641      	mov	r1, r8
   315fe:	481c      	ldr	r0, [pc, #112]	; (31670 <z_setup_new_thread+0x174>)
   31600:	f004 fe48 	bl	36294 <assert_print>
   31604:	f44f 7106 	mov.w	r1, #536	; 0x218
   31608:	4620      	mov	r0, r4
   3160a:	f004 fe3c 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3160e:	4c19      	ldr	r4, [pc, #100]	; (31674 <z_setup_new_thread+0x178>)
   31610:	2394      	movs	r3, #148	; 0x94
   31612:	4622      	mov	r2, r4
   31614:	4918      	ldr	r1, [pc, #96]	; (31678 <z_setup_new_thread+0x17c>)
   31616:	4815      	ldr	r0, [pc, #84]	; (3166c <z_setup_new_thread+0x170>)
   31618:	f004 fe3c 	bl	36294 <assert_print>
   3161c:	490e      	ldr	r1, [pc, #56]	; (31658 <z_setup_new_thread+0x15c>)
   3161e:	4817      	ldr	r0, [pc, #92]	; (3167c <z_setup_new_thread+0x180>)
   31620:	f004 fe38 	bl	36294 <assert_print>
   31624:	2194      	movs	r1, #148	; 0x94
   31626:	4620      	mov	r0, r4
   31628:	f004 fe2d 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3162c:	4c11      	ldr	r4, [pc, #68]	; (31674 <z_setup_new_thread+0x178>)
   3162e:	23c2      	movs	r3, #194	; 0xc2
   31630:	4622      	mov	r2, r4
   31632:	4913      	ldr	r1, [pc, #76]	; (31680 <z_setup_new_thread+0x184>)
   31634:	480d      	ldr	r0, [pc, #52]	; (3166c <z_setup_new_thread+0x170>)
   31636:	f004 fe2d 	bl	36294 <assert_print>
   3163a:	4631      	mov	r1, r6
   3163c:	4811      	ldr	r0, [pc, #68]	; (31684 <z_setup_new_thread+0x188>)
   3163e:	f004 fe29 	bl	36294 <assert_print>
   31642:	21c2      	movs	r1, #194	; 0xc2
   31644:	4620      	mov	r0, r4
   31646:	f004 fe1e 	bl	36286 <assert_post_action>
		new_thread->name[0] = '\0';
   3164a:	2300      	movs	r3, #0
   3164c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   31650:	e7b9      	b.n	315c6 <z_setup_new_thread+0xca>
		new_thread->resource_pool = NULL;
   31652:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   31656:	e7be      	b.n	315d6 <z_setup_new_thread+0xda>
   31658:	2000ca6c 	.word	0x2000ca6c
   3165c:	2000ca40 	.word	0x2000ca40
   31660:	000317f5 	.word	0x000317f5
   31664:	0004609c 	.word	0x0004609c
   31668:	000460f4 	.word	0x000460f4
   3166c:	0003f72c 	.word	0x0003f72c
   31670:	00046174 	.word	0x00046174
   31674:	00040b28 	.word	0x00040b28
   31678:	00040b88 	.word	0x00040b88
   3167c:	00040ba0 	.word	0x00040ba0
   31680:	00040b58 	.word	0x00040b58
   31684:	00040b70 	.word	0x00040b70

00031688 <z_impl_k_thread_create>:
{
   31688:	b570      	push	{r4, r5, r6, lr}
   3168a:	b086      	sub	sp, #24
   3168c:	4604      	mov	r4, r0
   3168e:	9e10      	ldr	r6, [sp, #64]	; 0x40
   31690:	9d11      	ldr	r5, [sp, #68]	; 0x44
   31692:	f3ef 8005 	mrs	r0, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   31696:	b9b8      	cbnz	r0, 316c8 <z_impl_k_thread_create+0x40>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   31698:	2000      	movs	r0, #0
   3169a:	9005      	str	r0, [sp, #20]
   3169c:	980e      	ldr	r0, [sp, #56]	; 0x38
   3169e:	9004      	str	r0, [sp, #16]
   316a0:	980d      	ldr	r0, [sp, #52]	; 0x34
   316a2:	9003      	str	r0, [sp, #12]
   316a4:	980c      	ldr	r0, [sp, #48]	; 0x30
   316a6:	9002      	str	r0, [sp, #8]
   316a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   316aa:	9001      	str	r0, [sp, #4]
   316ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   316ae:	9000      	str	r0, [sp, #0]
   316b0:	4620      	mov	r0, r4
   316b2:	f7ff ff23 	bl	314fc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   316b6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   316ba:	bf08      	it	eq
   316bc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   316c0:	d112      	bne.n	316e8 <z_impl_k_thread_create+0x60>
}
   316c2:	4620      	mov	r0, r4
   316c4:	b006      	add	sp, #24
   316c6:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   316c8:	4c0a      	ldr	r4, [pc, #40]	; (316f4 <z_impl_k_thread_create+0x6c>)
   316ca:	f240 2387 	movw	r3, #647	; 0x287
   316ce:	4622      	mov	r2, r4
   316d0:	4909      	ldr	r1, [pc, #36]	; (316f8 <z_impl_k_thread_create+0x70>)
   316d2:	480a      	ldr	r0, [pc, #40]	; (316fc <z_impl_k_thread_create+0x74>)
   316d4:	f004 fdde 	bl	36294 <assert_print>
   316d8:	4809      	ldr	r0, [pc, #36]	; (31700 <z_impl_k_thread_create+0x78>)
   316da:	f004 fddb 	bl	36294 <assert_print>
   316de:	f240 2187 	movw	r1, #647	; 0x287
   316e2:	4620      	mov	r0, r4
   316e4:	f004 fdcf 	bl	36286 <assert_post_action>
		schedule_new_thread(new_thread, delay);
   316e8:	4632      	mov	r2, r6
   316ea:	462b      	mov	r3, r5
   316ec:	4620      	mov	r0, r4
   316ee:	f7ff fe77 	bl	313e0 <schedule_new_thread>
   316f2:	e7e6      	b.n	316c2 <z_impl_k_thread_create+0x3a>
   316f4:	0004609c 	.word	0x0004609c
   316f8:	000461a8 	.word	0x000461a8
   316fc:	0003f72c 	.word	0x0003f72c
   31700:	000461bc 	.word	0x000461bc

00031704 <z_init_static_threads>:
{
   31704:	b530      	push	{r4, r5, lr}
   31706:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   31708:	4c34      	ldr	r4, [pc, #208]	; (317dc <z_init_static_threads+0xd8>)
   3170a:	e014      	b.n	31736 <z_init_static_threads+0x32>
		z_setup_new_thread(
   3170c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   3170e:	9305      	str	r3, [sp, #20]
   31710:	6a23      	ldr	r3, [r4, #32]
   31712:	9304      	str	r3, [sp, #16]
   31714:	69e3      	ldr	r3, [r4, #28]
   31716:	9303      	str	r3, [sp, #12]
   31718:	69a3      	ldr	r3, [r4, #24]
   3171a:	9302      	str	r3, [sp, #8]
   3171c:	6963      	ldr	r3, [r4, #20]
   3171e:	9301      	str	r3, [sp, #4]
   31720:	6923      	ldr	r3, [r4, #16]
   31722:	9300      	str	r3, [sp, #0]
   31724:	68e3      	ldr	r3, [r4, #12]
   31726:	68a2      	ldr	r2, [r4, #8]
   31728:	6861      	ldr	r1, [r4, #4]
   3172a:	6820      	ldr	r0, [r4, #0]
   3172c:	f7ff fee6 	bl	314fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   31730:	6823      	ldr	r3, [r4, #0]
   31732:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   31734:	3430      	adds	r4, #48	; 0x30
   31736:	4b2a      	ldr	r3, [pc, #168]	; (317e0 <z_init_static_threads+0xdc>)
   31738:	429c      	cmp	r4, r3
   3173a:	d806      	bhi.n	3174a <z_init_static_threads+0x46>
   3173c:	4b28      	ldr	r3, [pc, #160]	; (317e0 <z_init_static_threads+0xdc>)
   3173e:	429c      	cmp	r4, r3
   31740:	d3e4      	bcc.n	3170c <z_init_static_threads+0x8>
	k_sched_lock();
   31742:	f001 fc25 	bl	32f90 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   31746:	4c25      	ldr	r4, [pc, #148]	; (317dc <z_init_static_threads+0xd8>)
   31748:	e010      	b.n	3176c <z_init_static_threads+0x68>
	_FOREACH_STATIC_THREAD(thread_data) {
   3174a:	4c26      	ldr	r4, [pc, #152]	; (317e4 <z_init_static_threads+0xe0>)
   3174c:	f240 23ee 	movw	r3, #750	; 0x2ee
   31750:	4622      	mov	r2, r4
   31752:	4925      	ldr	r1, [pc, #148]	; (317e8 <z_init_static_threads+0xe4>)
   31754:	4825      	ldr	r0, [pc, #148]	; (317ec <z_init_static_threads+0xe8>)
   31756:	f004 fd9d 	bl	36294 <assert_print>
   3175a:	4825      	ldr	r0, [pc, #148]	; (317f0 <z_init_static_threads+0xec>)
   3175c:	f004 fd9a 	bl	36294 <assert_print>
   31760:	f240 21ee 	movw	r1, #750	; 0x2ee
   31764:	4620      	mov	r0, r4
   31766:	f004 fd8e 	bl	36286 <assert_post_action>
	_FOREACH_STATIC_THREAD(thread_data) {
   3176a:	3430      	adds	r4, #48	; 0x30
   3176c:	4b1c      	ldr	r3, [pc, #112]	; (317e0 <z_init_static_threads+0xdc>)
   3176e:	429c      	cmp	r4, r3
   31770:	d81f      	bhi.n	317b2 <z_init_static_threads+0xae>
   31772:	4b1b      	ldr	r3, [pc, #108]	; (317e0 <z_init_static_threads+0xdc>)
   31774:	429c      	cmp	r4, r3
   31776:	d22c      	bcs.n	317d2 <z_init_static_threads+0xce>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   31778:	6a60      	ldr	r0, [r4, #36]	; 0x24
   3177a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3177e:	d0f4      	beq.n	3176a <z_init_static_threads+0x66>
			schedule_new_thread(thread_data->init_thread,
   31780:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   31782:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   31786:	17c1      	asrs	r1, r0, #31
   31788:	03c9      	lsls	r1, r1, #15
   3178a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   3178e:	03c0      	lsls	r0, r0, #15
   31790:	f240 33e7 	movw	r3, #999	; 0x3e7
   31794:	18c0      	adds	r0, r0, r3
   31796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3179a:	f04f 0300 	mov.w	r3, #0
   3179e:	f141 0100 	adc.w	r1, r1, #0
   317a2:	f7de fcd9 	bl	10158 <__aeabi_uldivmod>
   317a6:	4602      	mov	r2, r0
   317a8:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   317aa:	4628      	mov	r0, r5
   317ac:	f7ff fe18 	bl	313e0 <schedule_new_thread>
   317b0:	e7db      	b.n	3176a <z_init_static_threads+0x66>
	_FOREACH_STATIC_THREAD(thread_data) {
   317b2:	4c0c      	ldr	r4, [pc, #48]	; (317e4 <z_init_static_threads+0xe0>)
   317b4:	f240 330d 	movw	r3, #781	; 0x30d
   317b8:	4622      	mov	r2, r4
   317ba:	490b      	ldr	r1, [pc, #44]	; (317e8 <z_init_static_threads+0xe4>)
   317bc:	480b      	ldr	r0, [pc, #44]	; (317ec <z_init_static_threads+0xe8>)
   317be:	f004 fd69 	bl	36294 <assert_print>
   317c2:	480b      	ldr	r0, [pc, #44]	; (317f0 <z_init_static_threads+0xec>)
   317c4:	f004 fd66 	bl	36294 <assert_print>
   317c8:	f240 310d 	movw	r1, #781	; 0x30d
   317cc:	4620      	mov	r0, r4
   317ce:	f004 fd5a 	bl	36286 <assert_post_action>
	k_sched_unlock();
   317d2:	f002 f92b 	bl	33a2c <k_sched_unlock>
}
   317d6:	b007      	add	sp, #28
   317d8:	bd30      	pop	{r4, r5, pc}
   317da:	bf00      	nop
   317dc:	0003f2b4 	.word	0x0003f2b4
   317e0:	0003f2b4 	.word	0x0003f2b4
   317e4:	0004609c 	.word	0x0004609c
   317e8:	000461e4 	.word	0x000461e4
   317ec:	0003f72c 	.word	0x0003f72c
   317f0:	00040eb4 	.word	0x00040eb4

000317f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   317f4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   317f6:	4b14      	ldr	r3, [pc, #80]	; (31848 <idle+0x54>)
   317f8:	689b      	ldr	r3, [r3, #8]
   317fa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   317fe:	2b00      	cmp	r3, #0
   31800:	da0c      	bge.n	3181c <idle+0x28>
   31802:	4c12      	ldr	r4, [pc, #72]	; (3184c <idle+0x58>)
   31804:	2327      	movs	r3, #39	; 0x27
   31806:	4622      	mov	r2, r4
   31808:	4911      	ldr	r1, [pc, #68]	; (31850 <idle+0x5c>)
   3180a:	4812      	ldr	r0, [pc, #72]	; (31854 <idle+0x60>)
   3180c:	f004 fd42 	bl	36294 <assert_print>
   31810:	2127      	movs	r1, #39	; 0x27
   31812:	4620      	mov	r0, r4
   31814:	f004 fd37 	bl	36286 <assert_post_action>
	arch_cpu_idle();
   31818:	f7e7 fc4c 	bl	190b4 <arch_cpu_idle>
	__asm__ volatile(
   3181c:	f04f 0220 	mov.w	r2, #32
   31820:	f3ef 8311 	mrs	r3, BASEPRI
   31824:	f382 8812 	msr	BASEPRI_MAX, r2
   31828:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   3182c:	f002 ff2a 	bl	34684 <z_get_next_timeout_expiry>
   31830:	4b05      	ldr	r3, [pc, #20]	; (31848 <idle+0x54>)
   31832:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
   31834:	4b08      	ldr	r3, [pc, #32]	; (31858 <idle+0x64>)
   31836:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   31838:	2b00      	cmp	r3, #0
   3183a:	d0ed      	beq.n	31818 <idle+0x24>
   3183c:	f7e7 f918 	bl	18a70 <pm_system_suspend>
   31840:	2800      	cmp	r0, #0
   31842:	d1eb      	bne.n	3181c <idle+0x28>
   31844:	e7e8      	b.n	31818 <idle+0x24>
   31846:	bf00      	nop
   31848:	2000ca40 	.word	0x2000ca40
   3184c:	00046214 	.word	0x00046214
   31850:	00046238 	.word	0x00046238
   31854:	0003f72c 	.word	0x0003f72c
   31858:	2000cabb 	.word	0x2000cabb

0003185c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   3185c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31860:	b082      	sub	sp, #8
   31862:	f3ef 8105 	mrs	r1, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   31866:	2900      	cmp	r1, #0
   31868:	d130      	bne.n	318cc <z_impl_k_mutex_lock+0x70>
   3186a:	4604      	mov	r4, r0
   3186c:	4617      	mov	r7, r2
   3186e:	461e      	mov	r6, r3
   31870:	f04f 0320 	mov.w	r3, #32
   31874:	f3ef 8511 	mrs	r5, BASEPRI
   31878:	f383 8812 	msr	BASEPRI_MAX, r3
   3187c:	f3bf 8f6f 	isb	sy
   31880:	46a8      	mov	r8, r5
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31882:	4876      	ldr	r0, [pc, #472]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   31884:	f7ff fdba 	bl	313fc <z_spin_lock_valid>
   31888:	2800      	cmp	r0, #0
   3188a:	d02d      	beq.n	318e8 <z_impl_k_mutex_lock+0x8c>
	z_spin_lock_set_owner(l);
   3188c:	4873      	ldr	r0, [pc, #460]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   3188e:	f7ff fdd5 	bl	3143c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   31892:	68e1      	ldr	r1, [r4, #12]
   31894:	2900      	cmp	r1, #0
   31896:	d136      	bne.n	31906 <z_impl_k_mutex_lock+0xaa>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   31898:	2900      	cmp	r1, #0
   3189a:	f040 8083 	bne.w	319a4 <z_impl_k_mutex_lock+0x148>
   3189e:	4b70      	ldr	r3, [pc, #448]	; (31a60 <z_impl_k_mutex_lock+0x204>)
   318a0:	689b      	ldr	r3, [r3, #8]
   318a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   318a6:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   318a8:	3101      	adds	r1, #1
   318aa:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   318ac:	4b6c      	ldr	r3, [pc, #432]	; (31a60 <z_impl_k_mutex_lock+0x204>)
   318ae:	689b      	ldr	r3, [r3, #8]
   318b0:	60a3      	str	r3, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   318b2:	486a      	ldr	r0, [pc, #424]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   318b4:	f7ff fdb2 	bl	3141c <z_spin_unlock_valid>
   318b8:	2800      	cmp	r0, #0
   318ba:	d075      	beq.n	319a8 <z_impl_k_mutex_lock+0x14c>
	__asm__ volatile(
   318bc:	f388 8811 	msr	BASEPRI, r8
   318c0:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   318c4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   318c6:	b002      	add	sp, #8
   318c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   318cc:	4c65      	ldr	r4, [pc, #404]	; (31a64 <z_impl_k_mutex_lock+0x208>)
   318ce:	2365      	movs	r3, #101	; 0x65
   318d0:	4622      	mov	r2, r4
   318d2:	4965      	ldr	r1, [pc, #404]	; (31a68 <z_impl_k_mutex_lock+0x20c>)
   318d4:	4865      	ldr	r0, [pc, #404]	; (31a6c <z_impl_k_mutex_lock+0x210>)
   318d6:	f004 fcdd 	bl	36294 <assert_print>
   318da:	4865      	ldr	r0, [pc, #404]	; (31a70 <z_impl_k_mutex_lock+0x214>)
   318dc:	f004 fcda 	bl	36294 <assert_print>
   318e0:	2165      	movs	r1, #101	; 0x65
   318e2:	4620      	mov	r0, r4
   318e4:	f004 fccf 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   318e8:	4c62      	ldr	r4, [pc, #392]	; (31a74 <z_impl_k_mutex_lock+0x218>)
   318ea:	2394      	movs	r3, #148	; 0x94
   318ec:	4622      	mov	r2, r4
   318ee:	4962      	ldr	r1, [pc, #392]	; (31a78 <z_impl_k_mutex_lock+0x21c>)
   318f0:	485e      	ldr	r0, [pc, #376]	; (31a6c <z_impl_k_mutex_lock+0x210>)
   318f2:	f004 fccf 	bl	36294 <assert_print>
   318f6:	4959      	ldr	r1, [pc, #356]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   318f8:	4860      	ldr	r0, [pc, #384]	; (31a7c <z_impl_k_mutex_lock+0x220>)
   318fa:	f004 fccb 	bl	36294 <assert_print>
   318fe:	2194      	movs	r1, #148	; 0x94
   31900:	4620      	mov	r0, r4
   31902:	f004 fcc0 	bl	36286 <assert_post_action>
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   31906:	68a2      	ldr	r2, [r4, #8]
   31908:	4b55      	ldr	r3, [pc, #340]	; (31a60 <z_impl_k_mutex_lock+0x204>)
   3190a:	689b      	ldr	r3, [r3, #8]
   3190c:	429a      	cmp	r2, r3
   3190e:	d0c3      	beq.n	31898 <z_impl_k_mutex_lock+0x3c>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   31910:	ea56 0107 	orrs.w	r1, r6, r7
   31914:	d057      	beq.n	319c6 <z_impl_k_mutex_lock+0x16a>
					    mutex->owner->base.prio);
   31916:	f992 800e 	ldrsb.w	r8, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   3191a:	4641      	mov	r1, r8
   3191c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   31920:	f00c ffe6 	bl	3e8f0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   31924:	4580      	cmp	r8, r0
   31926:	dc68      	bgt.n	319fa <z_impl_k_mutex_lock+0x19e>
	bool resched = false;
   31928:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   3192c:	9700      	str	r7, [sp, #0]
   3192e:	9601      	str	r6, [sp, #4]
   31930:	4622      	mov	r2, r4
   31932:	4629      	mov	r1, r5
   31934:	4849      	ldr	r0, [pc, #292]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   31936:	f001 fee1 	bl	336fc <z_pend_curr>
	if (got_mutex == 0) {
   3193a:	2800      	cmp	r0, #0
   3193c:	d0c3      	beq.n	318c6 <z_impl_k_mutex_lock+0x6a>
	__asm__ volatile(
   3193e:	f04f 0320 	mov.w	r3, #32
   31942:	f3ef 8511 	mrs	r5, BASEPRI
   31946:	f383 8812 	msr	BASEPRI_MAX, r3
   3194a:	f3bf 8f6f 	isb	sy
   3194e:	462e      	mov	r6, r5
   31950:	4842      	ldr	r0, [pc, #264]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   31952:	f7ff fd53 	bl	313fc <z_spin_lock_valid>
   31956:	2800      	cmp	r0, #0
   31958:	d055      	beq.n	31a06 <z_impl_k_mutex_lock+0x1aa>
	z_spin_lock_set_owner(l);
   3195a:	4840      	ldr	r0, [pc, #256]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   3195c:	f7ff fd6e 	bl	3143c <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   31960:	68a3      	ldr	r3, [r4, #8]
   31962:	2b00      	cmp	r3, #0
   31964:	d060      	beq.n	31a28 <z_impl_k_mutex_lock+0x1cc>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   31966:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   31968:	429c      	cmp	r4, r3
   3196a:	d05b      	beq.n	31a24 <z_impl_k_mutex_lock+0x1c8>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   3196c:	2b00      	cmp	r3, #0
   3196e:	d059      	beq.n	31a24 <z_impl_k_mutex_lock+0x1c8>
   31970:	6921      	ldr	r1, [r4, #16]
   31972:	f993 000e 	ldrsb.w	r0, [r3, #14]
   31976:	f00c ffbb 	bl	3e8f0 <new_prio_for_inheritance>
   3197a:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   3197c:	4620      	mov	r0, r4
   3197e:	f00c ffc2 	bl	3e906 <adjust_owner_prio>
   31982:	2800      	cmp	r0, #0
   31984:	d153      	bne.n	31a2e <z_impl_k_mutex_lock+0x1d2>
   31986:	f1b8 0f00 	cmp.w	r8, #0
   3198a:	d150      	bne.n	31a2e <z_impl_k_mutex_lock+0x1d2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3198c:	4833      	ldr	r0, [pc, #204]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   3198e:	f7ff fd45 	bl	3141c <z_spin_unlock_valid>
   31992:	2800      	cmp	r0, #0
   31994:	d052      	beq.n	31a3c <z_impl_k_mutex_lock+0x1e0>
	__asm__ volatile(
   31996:	f386 8811 	msr	BASEPRI, r6
   3199a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   3199e:	f06f 000a 	mvn.w	r0, #10
   319a2:	e790      	b.n	318c6 <z_impl_k_mutex_lock+0x6a>
					_current->base.prio :
   319a4:	6923      	ldr	r3, [r4, #16]
   319a6:	e77e      	b.n	318a6 <z_impl_k_mutex_lock+0x4a>
   319a8:	4c32      	ldr	r4, [pc, #200]	; (31a74 <z_impl_k_mutex_lock+0x218>)
   319aa:	23c2      	movs	r3, #194	; 0xc2
   319ac:	4622      	mov	r2, r4
   319ae:	4934      	ldr	r1, [pc, #208]	; (31a80 <z_impl_k_mutex_lock+0x224>)
   319b0:	482e      	ldr	r0, [pc, #184]	; (31a6c <z_impl_k_mutex_lock+0x210>)
   319b2:	f004 fc6f 	bl	36294 <assert_print>
   319b6:	4929      	ldr	r1, [pc, #164]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   319b8:	4832      	ldr	r0, [pc, #200]	; (31a84 <z_impl_k_mutex_lock+0x228>)
   319ba:	f004 fc6b 	bl	36294 <assert_print>
   319be:	21c2      	movs	r1, #194	; 0xc2
   319c0:	4620      	mov	r0, r4
   319c2:	f004 fc60 	bl	36286 <assert_post_action>
   319c6:	4825      	ldr	r0, [pc, #148]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   319c8:	f7ff fd28 	bl	3141c <z_spin_unlock_valid>
   319cc:	b130      	cbz	r0, 319dc <z_impl_k_mutex_lock+0x180>
   319ce:	f385 8811 	msr	BASEPRI, r5
   319d2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   319d6:	f06f 000f 	mvn.w	r0, #15
   319da:	e774      	b.n	318c6 <z_impl_k_mutex_lock+0x6a>
   319dc:	4c25      	ldr	r4, [pc, #148]	; (31a74 <z_impl_k_mutex_lock+0x218>)
   319de:	23c2      	movs	r3, #194	; 0xc2
   319e0:	4622      	mov	r2, r4
   319e2:	4927      	ldr	r1, [pc, #156]	; (31a80 <z_impl_k_mutex_lock+0x224>)
   319e4:	4821      	ldr	r0, [pc, #132]	; (31a6c <z_impl_k_mutex_lock+0x210>)
   319e6:	f004 fc55 	bl	36294 <assert_print>
   319ea:	491c      	ldr	r1, [pc, #112]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   319ec:	4825      	ldr	r0, [pc, #148]	; (31a84 <z_impl_k_mutex_lock+0x228>)
   319ee:	f004 fc51 	bl	36294 <assert_print>
   319f2:	21c2      	movs	r1, #194	; 0xc2
   319f4:	4620      	mov	r0, r4
   319f6:	f004 fc46 	bl	36286 <assert_post_action>
		resched = adjust_owner_prio(mutex, new_prio);
   319fa:	4601      	mov	r1, r0
   319fc:	4620      	mov	r0, r4
   319fe:	f00c ff82 	bl	3e906 <adjust_owner_prio>
   31a02:	4680      	mov	r8, r0
   31a04:	e792      	b.n	3192c <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31a06:	4c1b      	ldr	r4, [pc, #108]	; (31a74 <z_impl_k_mutex_lock+0x218>)
   31a08:	2394      	movs	r3, #148	; 0x94
   31a0a:	4622      	mov	r2, r4
   31a0c:	491a      	ldr	r1, [pc, #104]	; (31a78 <z_impl_k_mutex_lock+0x21c>)
   31a0e:	4817      	ldr	r0, [pc, #92]	; (31a6c <z_impl_k_mutex_lock+0x210>)
   31a10:	f004 fc40 	bl	36294 <assert_print>
   31a14:	4911      	ldr	r1, [pc, #68]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   31a16:	4819      	ldr	r0, [pc, #100]	; (31a7c <z_impl_k_mutex_lock+0x220>)
   31a18:	f004 fc3c 	bl	36294 <assert_print>
   31a1c:	2194      	movs	r1, #148	; 0x94
   31a1e:	4620      	mov	r0, r4
   31a20:	f004 fc31 	bl	36286 <assert_post_action>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   31a24:	6921      	ldr	r1, [r4, #16]
   31a26:	e7a9      	b.n	3197c <z_impl_k_mutex_lock+0x120>
	if (resched) {
   31a28:	f1b8 0f00 	cmp.w	r8, #0
   31a2c:	d0ae      	beq.n	3198c <z_impl_k_mutex_lock+0x130>
		z_reschedule(&lock, key);
   31a2e:	4629      	mov	r1, r5
   31a30:	480a      	ldr	r0, [pc, #40]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   31a32:	f001 fa69 	bl	32f08 <z_reschedule>
	return -EAGAIN;
   31a36:	f06f 000a 	mvn.w	r0, #10
   31a3a:	e744      	b.n	318c6 <z_impl_k_mutex_lock+0x6a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31a3c:	4c0d      	ldr	r4, [pc, #52]	; (31a74 <z_impl_k_mutex_lock+0x218>)
   31a3e:	23c2      	movs	r3, #194	; 0xc2
   31a40:	4622      	mov	r2, r4
   31a42:	490f      	ldr	r1, [pc, #60]	; (31a80 <z_impl_k_mutex_lock+0x224>)
   31a44:	4809      	ldr	r0, [pc, #36]	; (31a6c <z_impl_k_mutex_lock+0x210>)
   31a46:	f004 fc25 	bl	36294 <assert_print>
   31a4a:	4904      	ldr	r1, [pc, #16]	; (31a5c <z_impl_k_mutex_lock+0x200>)
   31a4c:	480d      	ldr	r0, [pc, #52]	; (31a84 <z_impl_k_mutex_lock+0x228>)
   31a4e:	f004 fc21 	bl	36294 <assert_print>
   31a52:	21c2      	movs	r1, #194	; 0xc2
   31a54:	4620      	mov	r0, r4
   31a56:	f004 fc16 	bl	36286 <assert_post_action>
   31a5a:	bf00      	nop
   31a5c:	2000ca70 	.word	0x2000ca70
   31a60:	2000ca40 	.word	0x2000ca40
   31a64:	00046260 	.word	0x00046260
   31a68:	000461a8 	.word	0x000461a8
   31a6c:	0003f72c 	.word	0x0003f72c
   31a70:	00046284 	.word	0x00046284
   31a74:	00040b28 	.word	0x00040b28
   31a78:	00040b88 	.word	0x00040b88
   31a7c:	00040ba0 	.word	0x00040ba0
   31a80:	00040b58 	.word	0x00040b58
   31a84:	00040b70 	.word	0x00040b70

00031a88 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   31a88:	b570      	push	{r4, r5, r6, lr}
   31a8a:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   31a8e:	b97b      	cbnz	r3, 31ab0 <z_impl_k_mutex_unlock+0x28>
   31a90:	4604      	mov	r4, r0

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   31a92:	6883      	ldr	r3, [r0, #8]
   31a94:	2b00      	cmp	r3, #0
   31a96:	d074      	beq.n	31b82 <z_impl_k_mutex_unlock+0xfa>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   31a98:	4a3d      	ldr	r2, [pc, #244]	; (31b90 <z_impl_k_mutex_unlock+0x108>)
   31a9a:	6892      	ldr	r2, [r2, #8]
   31a9c:	4293      	cmp	r3, r2
   31a9e:	d173      	bne.n	31b88 <z_impl_k_mutex_unlock+0x100>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   31aa0:	68c3      	ldr	r3, [r0, #12]
   31aa2:	b19b      	cbz	r3, 31acc <z_impl_k_mutex_unlock+0x44>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   31aa4:	2b01      	cmp	r3, #1
   31aa6:	d91c      	bls.n	31ae2 <z_impl_k_mutex_unlock+0x5a>
		mutex->lock_count--;
   31aa8:	3b01      	subs	r3, #1
   31aaa:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   31aac:	2000      	movs	r0, #0
}
   31aae:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   31ab0:	4c38      	ldr	r4, [pc, #224]	; (31b94 <z_impl_k_mutex_unlock+0x10c>)
   31ab2:	23cd      	movs	r3, #205	; 0xcd
   31ab4:	4622      	mov	r2, r4
   31ab6:	4938      	ldr	r1, [pc, #224]	; (31b98 <z_impl_k_mutex_unlock+0x110>)
   31ab8:	4838      	ldr	r0, [pc, #224]	; (31b9c <z_impl_k_mutex_unlock+0x114>)
   31aba:	f004 fbeb 	bl	36294 <assert_print>
   31abe:	4838      	ldr	r0, [pc, #224]	; (31ba0 <z_impl_k_mutex_unlock+0x118>)
   31ac0:	f004 fbe8 	bl	36294 <assert_print>
   31ac4:	21cd      	movs	r1, #205	; 0xcd
   31ac6:	4620      	mov	r0, r4
   31ac8:	f004 fbdd 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   31acc:	4c31      	ldr	r4, [pc, #196]	; (31b94 <z_impl_k_mutex_unlock+0x10c>)
   31ace:	23e5      	movs	r3, #229	; 0xe5
   31ad0:	4622      	mov	r2, r4
   31ad2:	4934      	ldr	r1, [pc, #208]	; (31ba4 <z_impl_k_mutex_unlock+0x11c>)
   31ad4:	4831      	ldr	r0, [pc, #196]	; (31b9c <z_impl_k_mutex_unlock+0x114>)
   31ad6:	f004 fbdd 	bl	36294 <assert_print>
   31ada:	21e5      	movs	r1, #229	; 0xe5
   31adc:	4620      	mov	r0, r4
   31ade:	f004 fbd2 	bl	36286 <assert_post_action>
	__asm__ volatile(
   31ae2:	f04f 0320 	mov.w	r3, #32
   31ae6:	f3ef 8511 	mrs	r5, BASEPRI
   31aea:	f383 8812 	msr	BASEPRI_MAX, r3
   31aee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31af2:	482d      	ldr	r0, [pc, #180]	; (31ba8 <z_impl_k_mutex_unlock+0x120>)
   31af4:	f7ff fc82 	bl	313fc <z_spin_lock_valid>
   31af8:	b1c8      	cbz	r0, 31b2e <z_impl_k_mutex_unlock+0xa6>
	z_spin_lock_set_owner(l);
   31afa:	482b      	ldr	r0, [pc, #172]	; (31ba8 <z_impl_k_mutex_unlock+0x120>)
   31afc:	f7ff fc9e 	bl	3143c <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   31b00:	6921      	ldr	r1, [r4, #16]
   31b02:	4620      	mov	r0, r4
   31b04:	f00c feff 	bl	3e906 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   31b08:	4620      	mov	r0, r4
   31b0a:	f002 f89b 	bl	33c44 <z_unpend_first_thread>
	mutex->owner = new_owner;
   31b0e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   31b10:	b1e0      	cbz	r0, 31b4c <z_impl_k_mutex_unlock+0xc4>
		mutex->owner_orig_prio = new_owner->base.prio;
   31b12:	f990 300e 	ldrsb.w	r3, [r0, #14]
   31b16:	6123      	str	r3, [r4, #16]
   31b18:	2400      	movs	r4, #0
   31b1a:	f8c0 40b0 	str.w	r4, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   31b1e:	f001 fc7f 	bl	33420 <z_ready_thread>
		z_reschedule(&lock, key);
   31b22:	4629      	mov	r1, r5
   31b24:	4820      	ldr	r0, [pc, #128]	; (31ba8 <z_impl_k_mutex_unlock+0x120>)
   31b26:	f001 f9ef 	bl	32f08 <z_reschedule>
	return 0;
   31b2a:	4620      	mov	r0, r4
   31b2c:	e7bf      	b.n	31aae <z_impl_k_mutex_unlock+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31b2e:	4c1f      	ldr	r4, [pc, #124]	; (31bac <z_impl_k_mutex_unlock+0x124>)
   31b30:	2394      	movs	r3, #148	; 0x94
   31b32:	4622      	mov	r2, r4
   31b34:	491e      	ldr	r1, [pc, #120]	; (31bb0 <z_impl_k_mutex_unlock+0x128>)
   31b36:	4819      	ldr	r0, [pc, #100]	; (31b9c <z_impl_k_mutex_unlock+0x114>)
   31b38:	f004 fbac 	bl	36294 <assert_print>
   31b3c:	491a      	ldr	r1, [pc, #104]	; (31ba8 <z_impl_k_mutex_unlock+0x120>)
   31b3e:	481d      	ldr	r0, [pc, #116]	; (31bb4 <z_impl_k_mutex_unlock+0x12c>)
   31b40:	f004 fba8 	bl	36294 <assert_print>
   31b44:	2194      	movs	r1, #148	; 0x94
   31b46:	4620      	mov	r0, r4
   31b48:	f004 fb9d 	bl	36286 <assert_post_action>
		mutex->lock_count = 0U;
   31b4c:	2300      	movs	r3, #0
   31b4e:	60e3      	str	r3, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31b50:	4815      	ldr	r0, [pc, #84]	; (31ba8 <z_impl_k_mutex_unlock+0x120>)
   31b52:	f7ff fc63 	bl	3141c <z_spin_unlock_valid>
   31b56:	b128      	cbz	r0, 31b64 <z_impl_k_mutex_unlock+0xdc>
	__asm__ volatile(
   31b58:	f385 8811 	msr	BASEPRI, r5
   31b5c:	f3bf 8f6f 	isb	sy
	return 0;
   31b60:	2000      	movs	r0, #0
   31b62:	e7a4      	b.n	31aae <z_impl_k_mutex_unlock+0x26>
   31b64:	4c11      	ldr	r4, [pc, #68]	; (31bac <z_impl_k_mutex_unlock+0x124>)
   31b66:	23c2      	movs	r3, #194	; 0xc2
   31b68:	4622      	mov	r2, r4
   31b6a:	4913      	ldr	r1, [pc, #76]	; (31bb8 <z_impl_k_mutex_unlock+0x130>)
   31b6c:	480b      	ldr	r0, [pc, #44]	; (31b9c <z_impl_k_mutex_unlock+0x114>)
   31b6e:	f004 fb91 	bl	36294 <assert_print>
   31b72:	490d      	ldr	r1, [pc, #52]	; (31ba8 <z_impl_k_mutex_unlock+0x120>)
   31b74:	4811      	ldr	r0, [pc, #68]	; (31bbc <z_impl_k_mutex_unlock+0x134>)
   31b76:	f004 fb8d 	bl	36294 <assert_print>
   31b7a:	21c2      	movs	r1, #194	; 0xc2
   31b7c:	4620      	mov	r0, r4
   31b7e:	f004 fb82 	bl	36286 <assert_post_action>
		return -EINVAL;
   31b82:	f06f 0015 	mvn.w	r0, #21
   31b86:	e792      	b.n	31aae <z_impl_k_mutex_unlock+0x26>
		return -EPERM;
   31b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31b8c:	e78f      	b.n	31aae <z_impl_k_mutex_unlock+0x26>
   31b8e:	bf00      	nop
   31b90:	2000ca40 	.word	0x2000ca40
   31b94:	00046260 	.word	0x00046260
   31b98:	000461a8 	.word	0x000461a8
   31b9c:	0003f72c 	.word	0x0003f72c
   31ba0:	00046284 	.word	0x00046284
   31ba4:	000462ac 	.word	0x000462ac
   31ba8:	2000ca70 	.word	0x2000ca70
   31bac:	00040b28 	.word	0x00040b28
   31bb0:	00040b88 	.word	0x00040b88
   31bb4:	00040ba0 	.word	0x00040ba0
   31bb8:	00040b58 	.word	0x00040b58
   31bbc:	00040b70 	.word	0x00040b70

00031bc0 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   31bc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31bc4:	4604      	mov	r4, r0
   31bc6:	460e      	mov	r6, r1
   31bc8:	4615      	mov	r5, r2
   31bca:	4698      	mov	r8, r3
   31bcc:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   31bd0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   31bd4:	f04f 0320 	mov.w	r3, #32
   31bd8:	f3ef 8911 	mrs	r9, BASEPRI
   31bdc:	f383 8812 	msr	BASEPRI_MAX, r3
   31be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31be4:	4638      	mov	r0, r7
   31be6:	f7ff fc09 	bl	313fc <z_spin_lock_valid>
   31bea:	b310      	cbz	r0, 31c32 <queue_insert+0x72>
   31bec:	46ca      	mov	sl, r9
	z_spin_lock_set_owner(l);
   31bee:	4638      	mov	r0, r7
   31bf0:	f7ff fc24 	bl	3143c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   31bf4:	f1bb 0f00 	cmp.w	fp, #0
   31bf8:	d000      	beq.n	31bfc <queue_insert+0x3c>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   31bfa:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   31bfc:	f104 000c 	add.w	r0, r4, #12
   31c00:	f002 f820 	bl	33c44 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   31c04:	bb20      	cbnz	r0, 31c50 <queue_insert+0x90>

		return 0;
	}

	/* Only need to actually allocate if no threads are pending */
	if (alloc) {
   31c06:	f1b8 0f00 	cmp.w	r8, #0
   31c0a:	d12a      	bne.n	31c62 <queue_insert+0xa2>
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   31c0c:	2300      	movs	r3, #0
   31c0e:	602b      	str	r3, [r5, #0]
		sys_sfnode_init(data, 0x0);
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
   31c10:	462a      	mov	r2, r5
   31c12:	4631      	mov	r1, r6
   31c14:	4620      	mov	r0, r4
   31c16:	f00c fe98 	bl	3e94a <sys_sflist_insert>
	z_handle_obj_poll_events(&queue->poll_events, state);
   31c1a:	2104      	movs	r1, #4
   31c1c:	f104 0014 	add.w	r0, r4, #20
   31c20:	f00d f8ff 	bl	3ee22 <z_handle_obj_poll_events>
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   31c24:	4649      	mov	r1, r9
   31c26:	4638      	mov	r0, r7
   31c28:	f001 f96e 	bl	32f08 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   31c2c:	2000      	movs	r0, #0
}
   31c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31c32:	4c1e      	ldr	r4, [pc, #120]	; (31cac <queue_insert+0xec>)
   31c34:	2394      	movs	r3, #148	; 0x94
   31c36:	4622      	mov	r2, r4
   31c38:	491d      	ldr	r1, [pc, #116]	; (31cb0 <queue_insert+0xf0>)
   31c3a:	481e      	ldr	r0, [pc, #120]	; (31cb4 <queue_insert+0xf4>)
   31c3c:	f004 fb2a 	bl	36294 <assert_print>
   31c40:	4639      	mov	r1, r7
   31c42:	481d      	ldr	r0, [pc, #116]	; (31cb8 <queue_insert+0xf8>)
   31c44:	f004 fb26 	bl	36294 <assert_print>
   31c48:	2194      	movs	r1, #148	; 0x94
   31c4a:	4620      	mov	r0, r4
   31c4c:	f004 fb1b 	bl	36286 <assert_post_action>
		prepare_thread_to_run(first_pending_thread, data);
   31c50:	4629      	mov	r1, r5
   31c52:	f00c fe9f 	bl	3e994 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   31c56:	4649      	mov	r1, r9
   31c58:	4638      	mov	r0, r7
   31c5a:	f001 f955 	bl	32f08 <z_reschedule>
		return 0;
   31c5e:	2000      	movs	r0, #0
   31c60:	e7e5      	b.n	31c2e <queue_insert+0x6e>
	return z_thread_aligned_alloc(0, size);
   31c62:	2108      	movs	r1, #8
   31c64:	2000      	movs	r0, #0
   31c66:	f003 fcdd 	bl	35624 <z_thread_aligned_alloc>
		if (anode == NULL) {
   31c6a:	b120      	cbz	r0, 31c76 <queue_insert+0xb6>
		anode->data = data;
   31c6c:	6045      	str	r5, [r0, #4]
   31c6e:	2201      	movs	r2, #1
   31c70:	6002      	str	r2, [r0, #0]
		data = anode;
   31c72:	4605      	mov	r5, r0
   31c74:	e7cc      	b.n	31c10 <queue_insert+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31c76:	4638      	mov	r0, r7
   31c78:	f7ff fbd0 	bl	3141c <z_spin_unlock_valid>
   31c7c:	b130      	cbz	r0, 31c8c <queue_insert+0xcc>
	__asm__ volatile(
   31c7e:	f38a 8811 	msr	BASEPRI, sl
   31c82:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   31c86:	f06f 000b 	mvn.w	r0, #11
   31c8a:	e7d0      	b.n	31c2e <queue_insert+0x6e>
   31c8c:	4c07      	ldr	r4, [pc, #28]	; (31cac <queue_insert+0xec>)
   31c8e:	23c2      	movs	r3, #194	; 0xc2
   31c90:	4622      	mov	r2, r4
   31c92:	490a      	ldr	r1, [pc, #40]	; (31cbc <queue_insert+0xfc>)
   31c94:	4807      	ldr	r0, [pc, #28]	; (31cb4 <queue_insert+0xf4>)
   31c96:	f004 fafd 	bl	36294 <assert_print>
   31c9a:	4639      	mov	r1, r7
   31c9c:	4808      	ldr	r0, [pc, #32]	; (31cc0 <queue_insert+0x100>)
   31c9e:	f004 faf9 	bl	36294 <assert_print>
   31ca2:	21c2      	movs	r1, #194	; 0xc2
   31ca4:	4620      	mov	r0, r4
   31ca6:	f004 faee 	bl	36286 <assert_post_action>
   31caa:	bf00      	nop
   31cac:	00040b28 	.word	0x00040b28
   31cb0:	00040b88 	.word	0x00040b88
   31cb4:	0003f72c 	.word	0x0003f72c
   31cb8:	00040ba0 	.word	0x00040ba0
   31cbc:	00040b58 	.word	0x00040b58
   31cc0:	00040b70 	.word	0x00040b70

00031cc4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   31cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31cc8:	b083      	sub	sp, #12
   31cca:	4604      	mov	r4, r0
   31ccc:	4690      	mov	r8, r2
   31cce:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   31cd0:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   31cd4:	f04f 0320 	mov.w	r3, #32
   31cd8:	f3ef 8711 	mrs	r7, BASEPRI
   31cdc:	f383 8812 	msr	BASEPRI_MAX, r3
   31ce0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31ce4:	4628      	mov	r0, r5
   31ce6:	f7ff fb89 	bl	313fc <z_spin_lock_valid>
   31cea:	b1e8      	cbz	r0, 31d28 <z_impl_k_queue_get+0x64>
   31cec:	463e      	mov	r6, r7
	z_spin_lock_set_owner(l);
   31cee:	4628      	mov	r0, r5
   31cf0:	f7ff fba4 	bl	3143c <z_spin_lock_set_owner>
	return list->head;
   31cf4:	6820      	ldr	r0, [r4, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   31cf6:	2800      	cmp	r0, #0
   31cf8:	d036      	beq.n	31d68 <z_impl_k_queue_get+0xa4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   31cfa:	6803      	ldr	r3, [r0, #0]
   31cfc:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   31d00:	6023      	str	r3, [r4, #0]
	return list->tail;
   31d02:	6862      	ldr	r2, [r4, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   31d04:	4290      	cmp	r0, r2
   31d06:	d01e      	beq.n	31d46 <z_impl_k_queue_get+0x82>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   31d08:	2101      	movs	r1, #1
   31d0a:	f00c fe4b 	bl	3e9a4 <z_queue_node_peek>
   31d0e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31d10:	4628      	mov	r0, r5
   31d12:	f7ff fb83 	bl	3141c <z_spin_unlock_valid>
   31d16:	b1c0      	cbz	r0, 31d4a <z_impl_k_queue_get+0x86>
	__asm__ volatile(
   31d18:	f386 8811 	msr	BASEPRI, r6
   31d1c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   31d20:	4620      	mov	r0, r4
   31d22:	b003      	add	sp, #12
   31d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31d28:	4c26      	ldr	r4, [pc, #152]	; (31dc4 <z_impl_k_queue_get+0x100>)
   31d2a:	2394      	movs	r3, #148	; 0x94
   31d2c:	4622      	mov	r2, r4
   31d2e:	4926      	ldr	r1, [pc, #152]	; (31dc8 <z_impl_k_queue_get+0x104>)
   31d30:	4826      	ldr	r0, [pc, #152]	; (31dcc <z_impl_k_queue_get+0x108>)
   31d32:	f004 faaf 	bl	36294 <assert_print>
   31d36:	4629      	mov	r1, r5
   31d38:	4825      	ldr	r0, [pc, #148]	; (31dd0 <z_impl_k_queue_get+0x10c>)
   31d3a:	f004 faab 	bl	36294 <assert_print>
   31d3e:	2194      	movs	r1, #148	; 0x94
   31d40:	4620      	mov	r0, r4
   31d42:	f004 faa0 	bl	36286 <assert_post_action>
	list->tail = node;
   31d46:	6063      	str	r3, [r4, #4]
}
   31d48:	e7de      	b.n	31d08 <z_impl_k_queue_get+0x44>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31d4a:	4c1e      	ldr	r4, [pc, #120]	; (31dc4 <z_impl_k_queue_get+0x100>)
   31d4c:	23c2      	movs	r3, #194	; 0xc2
   31d4e:	4622      	mov	r2, r4
   31d50:	4920      	ldr	r1, [pc, #128]	; (31dd4 <z_impl_k_queue_get+0x110>)
   31d52:	481e      	ldr	r0, [pc, #120]	; (31dcc <z_impl_k_queue_get+0x108>)
   31d54:	f004 fa9e 	bl	36294 <assert_print>
   31d58:	4629      	mov	r1, r5
   31d5a:	481f      	ldr	r0, [pc, #124]	; (31dd8 <z_impl_k_queue_get+0x114>)
   31d5c:	f004 fa9a 	bl	36294 <assert_print>
   31d60:	21c2      	movs	r1, #194	; 0xc2
   31d62:	4620      	mov	r0, r4
   31d64:	f004 fa8f 	bl	36286 <assert_post_action>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31d68:	ea59 0308 	orrs.w	r3, r9, r8
   31d6c:	d118      	bne.n	31da0 <z_impl_k_queue_get+0xdc>
   31d6e:	4628      	mov	r0, r5
   31d70:	f7ff fb54 	bl	3141c <z_spin_unlock_valid>
   31d74:	b128      	cbz	r0, 31d82 <z_impl_k_queue_get+0xbe>
   31d76:	f387 8811 	msr	BASEPRI, r7
   31d7a:	f3bf 8f6f 	isb	sy
		return NULL;
   31d7e:	2400      	movs	r4, #0
   31d80:	e7ce      	b.n	31d20 <z_impl_k_queue_get+0x5c>
   31d82:	4c10      	ldr	r4, [pc, #64]	; (31dc4 <z_impl_k_queue_get+0x100>)
   31d84:	23c2      	movs	r3, #194	; 0xc2
   31d86:	4622      	mov	r2, r4
   31d88:	4912      	ldr	r1, [pc, #72]	; (31dd4 <z_impl_k_queue_get+0x110>)
   31d8a:	4810      	ldr	r0, [pc, #64]	; (31dcc <z_impl_k_queue_get+0x108>)
   31d8c:	f004 fa82 	bl	36294 <assert_print>
   31d90:	4629      	mov	r1, r5
   31d92:	4811      	ldr	r0, [pc, #68]	; (31dd8 <z_impl_k_queue_get+0x114>)
   31d94:	f004 fa7e 	bl	36294 <assert_print>
   31d98:	21c2      	movs	r1, #194	; 0xc2
   31d9a:	4620      	mov	r0, r4
   31d9c:	f004 fa73 	bl	36286 <assert_post_action>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   31da0:	f8cd 8000 	str.w	r8, [sp]
   31da4:	f8cd 9004 	str.w	r9, [sp, #4]
   31da8:	f104 020c 	add.w	r2, r4, #12
   31dac:	4639      	mov	r1, r7
   31dae:	4628      	mov	r0, r5
   31db0:	f001 fca4 	bl	336fc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   31db4:	b918      	cbnz	r0, 31dbe <z_impl_k_queue_get+0xfa>
   31db6:	4b09      	ldr	r3, [pc, #36]	; (31ddc <z_impl_k_queue_get+0x118>)
   31db8:	689b      	ldr	r3, [r3, #8]
   31dba:	695c      	ldr	r4, [r3, #20]
   31dbc:	e7b0      	b.n	31d20 <z_impl_k_queue_get+0x5c>
   31dbe:	2400      	movs	r4, #0
   31dc0:	e7ae      	b.n	31d20 <z_impl_k_queue_get+0x5c>
   31dc2:	bf00      	nop
   31dc4:	00040b28 	.word	0x00040b28
   31dc8:	00040b88 	.word	0x00040b88
   31dcc:	0003f72c 	.word	0x0003f72c
   31dd0:	00040ba0 	.word	0x00040ba0
   31dd4:	00040b58 	.word	0x00040b58
   31dd8:	00040b70 	.word	0x00040b70
   31ddc:	2000ca40 	.word	0x2000ca40

00031de0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   31de0:	b538      	push	{r3, r4, r5, lr}
   31de2:	4604      	mov	r4, r0
	__asm__ volatile(
   31de4:	f04f 0320 	mov.w	r3, #32
   31de8:	f3ef 8511 	mrs	r5, BASEPRI
   31dec:	f383 8812 	msr	BASEPRI_MAX, r3
   31df0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31df4:	4819      	ldr	r0, [pc, #100]	; (31e5c <z_impl_k_sem_give+0x7c>)
   31df6:	f7ff fb01 	bl	313fc <z_spin_lock_valid>
   31dfa:	b180      	cbz	r0, 31e1e <z_impl_k_sem_give+0x3e>
	z_spin_lock_set_owner(l);
   31dfc:	4817      	ldr	r0, [pc, #92]	; (31e5c <z_impl_k_sem_give+0x7c>)
   31dfe:	f7ff fb1d 	bl	3143c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   31e02:	4620      	mov	r0, r4
   31e04:	f001 ff1e 	bl	33c44 <z_unpend_first_thread>

	if (thread != NULL) {
   31e08:	b1c0      	cbz	r0, 31e3c <z_impl_k_sem_give+0x5c>
   31e0a:	2200      	movs	r2, #0
   31e0c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   31e10:	f001 fb06 	bl	33420 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   31e14:	4629      	mov	r1, r5
   31e16:	4811      	ldr	r0, [pc, #68]	; (31e5c <z_impl_k_sem_give+0x7c>)
   31e18:	f001 f876 	bl	32f08 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   31e1c:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31e1e:	4c10      	ldr	r4, [pc, #64]	; (31e60 <z_impl_k_sem_give+0x80>)
   31e20:	2394      	movs	r3, #148	; 0x94
   31e22:	4622      	mov	r2, r4
   31e24:	490f      	ldr	r1, [pc, #60]	; (31e64 <z_impl_k_sem_give+0x84>)
   31e26:	4810      	ldr	r0, [pc, #64]	; (31e68 <z_impl_k_sem_give+0x88>)
   31e28:	f004 fa34 	bl	36294 <assert_print>
   31e2c:	490b      	ldr	r1, [pc, #44]	; (31e5c <z_impl_k_sem_give+0x7c>)
   31e2e:	480f      	ldr	r0, [pc, #60]	; (31e6c <z_impl_k_sem_give+0x8c>)
   31e30:	f004 fa30 	bl	36294 <assert_print>
   31e34:	2194      	movs	r1, #148	; 0x94
   31e36:	4620      	mov	r0, r4
   31e38:	f004 fa25 	bl	36286 <assert_post_action>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   31e3c:	68a3      	ldr	r3, [r4, #8]
   31e3e:	68e2      	ldr	r2, [r4, #12]
   31e40:	4293      	cmp	r3, r2
   31e42:	d008      	beq.n	31e56 <z_impl_k_sem_give+0x76>
   31e44:	2201      	movs	r2, #1
   31e46:	4413      	add	r3, r2
   31e48:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   31e4a:	2102      	movs	r1, #2
   31e4c:	f104 0010 	add.w	r0, r4, #16
   31e50:	f00c ffe7 	bl	3ee22 <z_handle_obj_poll_events>
}
   31e54:	e7de      	b.n	31e14 <z_impl_k_sem_give+0x34>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   31e56:	2200      	movs	r2, #0
   31e58:	e7f5      	b.n	31e46 <z_impl_k_sem_give+0x66>
   31e5a:	bf00      	nop
   31e5c:	2000ca74 	.word	0x2000ca74
   31e60:	00040b28 	.word	0x00040b28
   31e64:	00040b88 	.word	0x00040b88
   31e68:	0003f72c 	.word	0x0003f72c
   31e6c:	00040ba0 	.word	0x00040ba0

00031e70 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   31e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31e74:	b082      	sub	sp, #8
   31e76:	4604      	mov	r4, r0
   31e78:	4617      	mov	r7, r2
   31e7a:	461e      	mov	r6, r3
   31e7c:	f3ef 8105 	mrs	r1, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   31e80:	b111      	cbz	r1, 31e88 <z_impl_k_sem_take+0x18>
   31e82:	ea56 0302 	orrs.w	r3, r6, r2
   31e86:	d11f      	bne.n	31ec8 <z_impl_k_sem_take+0x58>
   31e88:	f04f 0320 	mov.w	r3, #32
   31e8c:	f3ef 8511 	mrs	r5, BASEPRI
   31e90:	f383 8812 	msr	BASEPRI_MAX, r3
   31e94:	f3bf 8f6f 	isb	sy
   31e98:	4834      	ldr	r0, [pc, #208]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31e9a:	f7ff faaf 	bl	313fc <z_spin_lock_valid>
   31e9e:	b308      	cbz	r0, 31ee4 <z_impl_k_sem_take+0x74>
	z_spin_lock_set_owner(l);
   31ea0:	4832      	ldr	r0, [pc, #200]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31ea2:	f7ff facb 	bl	3143c <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   31ea6:	68a1      	ldr	r1, [r4, #8]
   31ea8:	2900      	cmp	r1, #0
   31eaa:	d039      	beq.n	31f20 <z_impl_k_sem_take+0xb0>
		sem->count--;
   31eac:	3901      	subs	r1, #1
   31eae:	60a1      	str	r1, [r4, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31eb0:	482e      	ldr	r0, [pc, #184]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31eb2:	f7ff fab3 	bl	3141c <z_spin_unlock_valid>
   31eb6:	b320      	cbz	r0, 31f02 <z_impl_k_sem_take+0x92>
	__asm__ volatile(
   31eb8:	f385 8811 	msr	BASEPRI, r5
   31ebc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   31ec0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   31ec2:	b002      	add	sp, #8
   31ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT(((arch_is_in_isr() == false) ||
   31ec8:	4c29      	ldr	r4, [pc, #164]	; (31f70 <z_impl_k_sem_take+0x100>)
   31eca:	2379      	movs	r3, #121	; 0x79
   31ecc:	4622      	mov	r2, r4
   31ece:	4929      	ldr	r1, [pc, #164]	; (31f74 <z_impl_k_sem_take+0x104>)
   31ed0:	4829      	ldr	r0, [pc, #164]	; (31f78 <z_impl_k_sem_take+0x108>)
   31ed2:	f004 f9df 	bl	36294 <assert_print>
   31ed6:	4829      	ldr	r0, [pc, #164]	; (31f7c <z_impl_k_sem_take+0x10c>)
   31ed8:	f004 f9dc 	bl	36294 <assert_print>
   31edc:	2179      	movs	r1, #121	; 0x79
   31ede:	4620      	mov	r0, r4
   31ee0:	f004 f9d1 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   31ee4:	4c26      	ldr	r4, [pc, #152]	; (31f80 <z_impl_k_sem_take+0x110>)
   31ee6:	2394      	movs	r3, #148	; 0x94
   31ee8:	4622      	mov	r2, r4
   31eea:	4926      	ldr	r1, [pc, #152]	; (31f84 <z_impl_k_sem_take+0x114>)
   31eec:	4822      	ldr	r0, [pc, #136]	; (31f78 <z_impl_k_sem_take+0x108>)
   31eee:	f004 f9d1 	bl	36294 <assert_print>
   31ef2:	491e      	ldr	r1, [pc, #120]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31ef4:	4824      	ldr	r0, [pc, #144]	; (31f88 <z_impl_k_sem_take+0x118>)
   31ef6:	f004 f9cd 	bl	36294 <assert_print>
   31efa:	2194      	movs	r1, #148	; 0x94
   31efc:	4620      	mov	r0, r4
   31efe:	f004 f9c2 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   31f02:	4c1f      	ldr	r4, [pc, #124]	; (31f80 <z_impl_k_sem_take+0x110>)
   31f04:	23c2      	movs	r3, #194	; 0xc2
   31f06:	4622      	mov	r2, r4
   31f08:	4920      	ldr	r1, [pc, #128]	; (31f8c <z_impl_k_sem_take+0x11c>)
   31f0a:	481b      	ldr	r0, [pc, #108]	; (31f78 <z_impl_k_sem_take+0x108>)
   31f0c:	f004 f9c2 	bl	36294 <assert_print>
   31f10:	4916      	ldr	r1, [pc, #88]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31f12:	481f      	ldr	r0, [pc, #124]	; (31f90 <z_impl_k_sem_take+0x120>)
   31f14:	f004 f9be 	bl	36294 <assert_print>
   31f18:	21c2      	movs	r1, #194	; 0xc2
   31f1a:	4620      	mov	r0, r4
   31f1c:	f004 f9b3 	bl	36286 <assert_post_action>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   31f20:	ea56 0307 	orrs.w	r3, r6, r7
   31f24:	d119      	bne.n	31f5a <z_impl_k_sem_take+0xea>
   31f26:	4811      	ldr	r0, [pc, #68]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31f28:	f7ff fa78 	bl	3141c <z_spin_unlock_valid>
   31f2c:	b130      	cbz	r0, 31f3c <z_impl_k_sem_take+0xcc>
   31f2e:	f385 8811 	msr	BASEPRI, r5
   31f32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   31f36:	f06f 000f 	mvn.w	r0, #15
   31f3a:	e7c2      	b.n	31ec2 <z_impl_k_sem_take+0x52>
   31f3c:	4c10      	ldr	r4, [pc, #64]	; (31f80 <z_impl_k_sem_take+0x110>)
   31f3e:	23c2      	movs	r3, #194	; 0xc2
   31f40:	4622      	mov	r2, r4
   31f42:	4912      	ldr	r1, [pc, #72]	; (31f8c <z_impl_k_sem_take+0x11c>)
   31f44:	480c      	ldr	r0, [pc, #48]	; (31f78 <z_impl_k_sem_take+0x108>)
   31f46:	f004 f9a5 	bl	36294 <assert_print>
   31f4a:	4908      	ldr	r1, [pc, #32]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31f4c:	4810      	ldr	r0, [pc, #64]	; (31f90 <z_impl_k_sem_take+0x120>)
   31f4e:	f004 f9a1 	bl	36294 <assert_print>
   31f52:	21c2      	movs	r1, #194	; 0xc2
   31f54:	4620      	mov	r0, r4
   31f56:	f004 f996 	bl	36286 <assert_post_action>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   31f5a:	9700      	str	r7, [sp, #0]
   31f5c:	9601      	str	r6, [sp, #4]
   31f5e:	4622      	mov	r2, r4
   31f60:	4629      	mov	r1, r5
   31f62:	4802      	ldr	r0, [pc, #8]	; (31f6c <z_impl_k_sem_take+0xfc>)
   31f64:	f001 fbca 	bl	336fc <z_pend_curr>
	return ret;
   31f68:	e7ab      	b.n	31ec2 <z_impl_k_sem_take+0x52>
   31f6a:	bf00      	nop
   31f6c:	2000ca74 	.word	0x2000ca74
   31f70:	000462c4 	.word	0x000462c4
   31f74:	000462e4 	.word	0x000462e4
   31f78:	0003f72c 	.word	0x0003f72c
   31f7c:	00044634 	.word	0x00044634
   31f80:	00040b28 	.word	0x00040b28
   31f84:	00040b88 	.word	0x00040b88
   31f88:	00040ba0 	.word	0x00040ba0
   31f8c:	00040b58 	.word	0x00040b58
   31f90:	00040b70 	.word	0x00040b70

00031f94 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   31f94:	b510      	push	{r4, lr}
   31f96:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   31f98:	4b08      	ldr	r3, [pc, #32]	; (31fbc <k_sys_work_q_init+0x28>)
   31f9a:	9302      	str	r3, [sp, #8]
   31f9c:	2400      	movs	r4, #0
   31f9e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   31fa2:	ab02      	add	r3, sp, #8
   31fa4:	9300      	str	r3, [sp, #0]
   31fa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   31fae:	4904      	ldr	r1, [pc, #16]	; (31fc0 <k_sys_work_q_init+0x2c>)
   31fb0:	4804      	ldr	r0, [pc, #16]	; (31fc4 <k_sys_work_q_init+0x30>)
   31fb2:	f000 fae7 	bl	32584 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   31fb6:	4620      	mov	r0, r4
   31fb8:	b004      	add	sp, #16
   31fba:	bd10      	pop	{r4, pc}
   31fbc:	00046334 	.word	0x00046334
   31fc0:	200112a8 	.word	0x200112a8
   31fc4:	2000baf0 	.word	0x2000baf0

00031fc8 <queue_submit_locked>:
 * @retval -EBUSY if the submission was rejected (draining, plugged)
 */
static inline int queue_submit_locked(struct k_work_q *queue,
				      struct k_work *work)
{
	if (queue == NULL) {
   31fc8:	b370      	cbz	r0, 32028 <queue_submit_locked+0x60>
{
   31fca:	b538      	push	{r3, r4, r5, lr}
   31fcc:	460d      	mov	r5, r1
   31fce:	4604      	mov	r4, r0
		return -EINVAL;
	}

	int ret = -EBUSY;
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   31fd0:	4b1b      	ldr	r3, [pc, #108]	; (32040 <queue_submit_locked+0x78>)
   31fd2:	689b      	ldr	r3, [r3, #8]
   31fd4:	4283      	cmp	r3, r0
   31fd6:	d01b      	beq.n	32010 <queue_submit_locked+0x48>
   31fd8:	2300      	movs	r3, #0
   31fda:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   31fdc:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   31fe0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   31fe4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	 * * -ENODEV if the queue isn't running.
	 * * -EBUSY if draining and not chained
	 * * -EBUSY if plugged and not draining
	 * * otherwise OK
	 */
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   31fe8:	f013 0f01 	tst.w	r3, #1
   31fec:	d01f      	beq.n	3202e <queue_submit_locked+0x66>
		ret = -ENODEV;
	} else if (draining && !chained) {
   31fee:	b101      	cbz	r1, 31ff2 <queue_submit_locked+0x2a>
   31ff0:	b302      	cbz	r2, 32034 <queue_submit_locked+0x6c>
		ret = -EBUSY;
	} else if (plugged && !draining) {
   31ff2:	b100      	cbz	r0, 31ff6 <queue_submit_locked+0x2e>
   31ff4:	b309      	cbz	r1, 3203a <queue_submit_locked+0x72>
	parent->next = child;
   31ff6:	2300      	movs	r3, #0
   31ff8:	602b      	str	r3, [r5, #0]
	return list->tail;
   31ffa:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   31ffe:	b173      	cbz	r3, 3201e <queue_submit_locked+0x56>
	parent->next = child;
   32000:	601d      	str	r5, [r3, #0]
	list->tail = node;
   32002:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
		ret = -EBUSY;
	} else {
		sys_slist_append(&queue->pending, &work->node);
		ret = 1;
		(void)notify_queue_locked(queue);
   32006:	4620      	mov	r0, r4
   32008:	f00c fd57 	bl	3eaba <notify_queue_locked>
		ret = 1;
   3200c:	2001      	movs	r0, #1
	}

	return ret;
}
   3200e:	bd38      	pop	{r3, r4, r5, pc}
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   32010:	f00c fc51 	bl	3e8b6 <k_is_in_isr>
   32014:	b908      	cbnz	r0, 3201a <queue_submit_locked+0x52>
   32016:	2301      	movs	r3, #1
   32018:	e7df      	b.n	31fda <queue_submit_locked+0x12>
   3201a:	2300      	movs	r3, #0
   3201c:	e7dd      	b.n	31fda <queue_submit_locked+0x12>
   3201e:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
	list->head = node;
   32022:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
}
   32026:	e7ee      	b.n	32006 <queue_submit_locked+0x3e>
		return -EINVAL;
   32028:	f06f 0015 	mvn.w	r0, #21
}
   3202c:	4770      	bx	lr
		ret = -ENODEV;
   3202e:	f06f 0012 	mvn.w	r0, #18
   32032:	e7ec      	b.n	3200e <queue_submit_locked+0x46>
		ret = -EBUSY;
   32034:	f06f 000f 	mvn.w	r0, #15
   32038:	e7e9      	b.n	3200e <queue_submit_locked+0x46>
		ret = -EBUSY;
   3203a:	f06f 000f 	mvn.w	r0, #15
   3203e:	e7e6      	b.n	3200e <queue_submit_locked+0x46>
   32040:	2000ca40 	.word	0x2000ca40

00032044 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   32044:	b570      	push	{r4, r5, r6, lr}
   32046:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   32048:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3204a:	f013 0f02 	tst.w	r3, #2
   3204e:	d130      	bne.n	320b2 <submit_to_queue_locked+0x6e>
   32050:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   32052:	f013 0f04 	tst.w	r3, #4
   32056:	d131      	bne.n	320bc <submit_to_queue_locked+0x78>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   32058:	680b      	ldr	r3, [r1, #0]
   3205a:	b1b3      	cbz	r3, 3208a <submit_to_queue_locked+0x46>
	return (*flagp & BIT(bit)) != 0U;
   3205c:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   3205e:	f013 0f01 	tst.w	r3, #1
   32062:	d022      	beq.n	320aa <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   32064:	68a3      	ldr	r3, [r4, #8]
   32066:	b19b      	cbz	r3, 32090 <submit_to_queue_locked+0x4c>
			*queuep = work->queue;
   32068:	602b      	str	r3, [r5, #0]
			ret = 2;
   3206a:	2602      	movs	r6, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   3206c:	4621      	mov	r1, r4
   3206e:	6828      	ldr	r0, [r5, #0]
   32070:	f7ff ffaa 	bl	31fc8 <queue_submit_locked>

		if (rc < 0) {
   32074:	2800      	cmp	r0, #0
   32076:	db1e      	blt.n	320b6 <submit_to_queue_locked+0x72>
	*flagp |= BIT(bit);
   32078:	68e3      	ldr	r3, [r4, #12]
   3207a:	f043 0304 	orr.w	r3, r3, #4
   3207e:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   32080:	682b      	ldr	r3, [r5, #0]
   32082:	60a3      	str	r3, [r4, #8]
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   32084:	b19e      	cbz	r6, 320ae <submit_to_queue_locked+0x6a>
   32086:	4630      	mov	r0, r6
		*queuep = NULL;
	}

	return ret;
   32088:	e017      	b.n	320ba <submit_to_queue_locked+0x76>
			*queuep = work->queue;
   3208a:	6883      	ldr	r3, [r0, #8]
   3208c:	600b      	str	r3, [r1, #0]
   3208e:	e7e5      	b.n	3205c <submit_to_queue_locked+0x18>
			__ASSERT_NO_MSG(work->queue != NULL);
   32090:	4c0b      	ldr	r4, [pc, #44]	; (320c0 <submit_to_queue_locked+0x7c>)
   32092:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   32096:	4622      	mov	r2, r4
   32098:	490a      	ldr	r1, [pc, #40]	; (320c4 <submit_to_queue_locked+0x80>)
   3209a:	480b      	ldr	r0, [pc, #44]	; (320c8 <submit_to_queue_locked+0x84>)
   3209c:	f004 f8fa 	bl	36294 <assert_print>
   320a0:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   320a4:	4620      	mov	r0, r4
   320a6:	f004 f8ee 	bl	36286 <assert_post_action>
		ret = 1;
   320aa:	2601      	movs	r6, #1
   320ac:	e7de      	b.n	3206c <submit_to_queue_locked+0x28>
   320ae:	4630      	mov	r0, r6
   320b0:	e001      	b.n	320b6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   320b2:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   320b6:	2300      	movs	r3, #0
   320b8:	602b      	str	r3, [r5, #0]
}
   320ba:	bd70      	pop	{r4, r5, r6, pc}
	int ret = 0;
   320bc:	2000      	movs	r0, #0
   320be:	e7fa      	b.n	320b6 <submit_to_queue_locked+0x72>
   320c0:	00046340 	.word	0x00046340
   320c4:	00046364 	.word	0x00046364
   320c8:	0003f72c 	.word	0x0003f72c

000320cc <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   320cc:	b570      	push	{r4, r5, r6, lr}
   320ce:	b082      	sub	sp, #8
   320d0:	4604      	mov	r4, r0
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
   320d2:	f1a0 0610 	sub.w	r6, r0, #16
	__asm__ volatile(
   320d6:	f04f 0220 	mov.w	r2, #32
   320da:	f3ef 8311 	mrs	r3, BASEPRI
   320de:	f382 8812 	msr	BASEPRI_MAX, r2
   320e2:	f3bf 8f6f 	isb	sy
   320e6:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   320e8:	4820      	ldr	r0, [pc, #128]	; (3216c <work_timeout+0xa0>)
   320ea:	f7ff f987 	bl	313fc <z_spin_lock_valid>
   320ee:	b1b8      	cbz	r0, 32120 <work_timeout+0x54>
	z_spin_lock_set_owner(l);
   320f0:	481e      	ldr	r0, [pc, #120]	; (3216c <work_timeout+0xa0>)
   320f2:	f7ff f9a3 	bl	3143c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   320f6:	2300      	movs	r3, #0
   320f8:	9301      	str	r3, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   320fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   320fe:	f023 0208 	bic.w	r2, r3, #8
   32102:	f844 2c04 	str.w	r2, [r4, #-4]
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   32106:	f013 0f08 	tst.w	r3, #8
   3210a:	d118      	bne.n	3213e <work_timeout+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3210c:	4817      	ldr	r0, [pc, #92]	; (3216c <work_timeout+0xa0>)
   3210e:	f7ff f985 	bl	3141c <z_spin_unlock_valid>
   32112:	b1d8      	cbz	r0, 3214c <work_timeout+0x80>
	__asm__ volatile(
   32114:	f385 8811 	msr	BASEPRI, r5
   32118:	f3bf 8f6f 	isb	sy
		queue = dw->queue;
		(void)submit_to_queue_locked(wp, &queue);
	}

	k_spin_unlock(&lock, key);
}
   3211c:	b002      	add	sp, #8
   3211e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32120:	4c13      	ldr	r4, [pc, #76]	; (32170 <work_timeout+0xa4>)
   32122:	2394      	movs	r3, #148	; 0x94
   32124:	4622      	mov	r2, r4
   32126:	4913      	ldr	r1, [pc, #76]	; (32174 <work_timeout+0xa8>)
   32128:	4813      	ldr	r0, [pc, #76]	; (32178 <work_timeout+0xac>)
   3212a:	f004 f8b3 	bl	36294 <assert_print>
   3212e:	490f      	ldr	r1, [pc, #60]	; (3216c <work_timeout+0xa0>)
   32130:	4812      	ldr	r0, [pc, #72]	; (3217c <work_timeout+0xb0>)
   32132:	f004 f8af 	bl	36294 <assert_print>
   32136:	2194      	movs	r1, #148	; 0x94
   32138:	4620      	mov	r0, r4
   3213a:	f004 f8a4 	bl	36286 <assert_post_action>
		queue = dw->queue;
   3213e:	69a3      	ldr	r3, [r4, #24]
   32140:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   32142:	a901      	add	r1, sp, #4
   32144:	4630      	mov	r0, r6
   32146:	f7ff ff7d 	bl	32044 <submit_to_queue_locked>
   3214a:	e7df      	b.n	3210c <work_timeout+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3214c:	4c08      	ldr	r4, [pc, #32]	; (32170 <work_timeout+0xa4>)
   3214e:	23c2      	movs	r3, #194	; 0xc2
   32150:	4622      	mov	r2, r4
   32152:	490b      	ldr	r1, [pc, #44]	; (32180 <work_timeout+0xb4>)
   32154:	4808      	ldr	r0, [pc, #32]	; (32178 <work_timeout+0xac>)
   32156:	f004 f89d 	bl	36294 <assert_print>
   3215a:	4904      	ldr	r1, [pc, #16]	; (3216c <work_timeout+0xa0>)
   3215c:	4809      	ldr	r0, [pc, #36]	; (32184 <work_timeout+0xb8>)
   3215e:	f004 f899 	bl	36294 <assert_print>
   32162:	21c2      	movs	r1, #194	; 0xc2
   32164:	4620      	mov	r0, r4
   32166:	f004 f88e 	bl	36286 <assert_post_action>
   3216a:	bf00      	nop
   3216c:	2000ca80 	.word	0x2000ca80
   32170:	00040b28 	.word	0x00040b28
   32174:	00040b88 	.word	0x00040b88
   32178:	0003f72c 	.word	0x0003f72c
   3217c:	00040ba0 	.word	0x00040ba0
   32180:	00040b58 	.word	0x00040b58
   32184:	00040b70 	.word	0x00040b70

00032188 <finalize_cancel_locked>:
{
   32188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3218a:	4606      	mov	r6, r0
	*flagp &= ~BIT(bit);
   3218c:	68c3      	ldr	r3, [r0, #12]
   3218e:	f023 0302 	bic.w	r3, r3, #2
   32192:	60c3      	str	r3, [r0, #12]
	return list->head;
   32194:	4b13      	ldr	r3, [pc, #76]	; (321e4 <finalize_cancel_locked+0x5c>)
   32196:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   32198:	b185      	cbz	r5, 321bc <finalize_cancel_locked+0x34>
	return node->next;
   3219a:	682c      	ldr	r4, [r5, #0]
   3219c:	b104      	cbz	r4, 321a0 <finalize_cancel_locked+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3219e:	b10d      	cbz	r5, 321a4 <finalize_cancel_locked+0x1c>
   321a0:	2700      	movs	r7, #0
   321a2:	e010      	b.n	321c6 <finalize_cancel_locked+0x3e>
   321a4:	462c      	mov	r4, r5
   321a6:	e7fb      	b.n	321a0 <finalize_cancel_locked+0x18>
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   321a8:	462a      	mov	r2, r5
   321aa:	4639      	mov	r1, r7
   321ac:	480d      	ldr	r0, [pc, #52]	; (321e4 <finalize_cancel_locked+0x5c>)
   321ae:	f00c fc3f 	bl	3ea30 <sys_slist_remove>
			k_sem_give(&wc->sem);
   321b2:	f105 0008 	add.w	r0, r5, #8
	z_impl_k_sem_give(sem);
   321b6:	f7ff fe13 	bl	31de0 <z_impl_k_sem_give>
}
   321ba:	e009      	b.n	321d0 <finalize_cancel_locked+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   321bc:	462c      	mov	r4, r5
   321be:	e7ef      	b.n	321a0 <finalize_cancel_locked+0x18>
   321c0:	4623      	mov	r3, r4
   321c2:	4625      	mov	r5, r4
   321c4:	461c      	mov	r4, r3
   321c6:	b165      	cbz	r5, 321e2 <finalize_cancel_locked+0x5a>
		if (wc->work == work) {
   321c8:	686b      	ldr	r3, [r5, #4]
   321ca:	42b3      	cmp	r3, r6
   321cc:	d0ec      	beq.n	321a8 <finalize_cancel_locked+0x20>
			prev = &wc->node;
   321ce:	462f      	mov	r7, r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   321d0:	2c00      	cmp	r4, #0
   321d2:	d0f5      	beq.n	321c0 <finalize_cancel_locked+0x38>
	return node->next;
   321d4:	6823      	ldr	r3, [r4, #0]
   321d6:	2b00      	cmp	r3, #0
   321d8:	d0f3      	beq.n	321c2 <finalize_cancel_locked+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   321da:	2c00      	cmp	r4, #0
   321dc:	d1f1      	bne.n	321c2 <finalize_cancel_locked+0x3a>
   321de:	4623      	mov	r3, r4
   321e0:	e7ef      	b.n	321c2 <finalize_cancel_locked+0x3a>
}
   321e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   321e4:	2000ca78 	.word	0x2000ca78

000321e8 <init_work_cancel>:
{
   321e8:	b538      	push	{r3, r4, r5, lr}
   321ea:	4604      	mov	r4, r0
   321ec:	460d      	mov	r5, r1
	k_sem_init(&canceler->sem, 0, 1);
   321ee:	3008      	adds	r0, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   321f0:	2201      	movs	r2, #1
   321f2:	2100      	movs	r1, #0
   321f4:	f00c fc09 	bl	3ea0a <z_impl_k_sem_init>
	canceler->work = work;
   321f8:	6065      	str	r5, [r4, #4]
	parent->next = child;
   321fa:	2300      	movs	r3, #0
   321fc:	6023      	str	r3, [r4, #0]
	return list->tail;
   321fe:	4b05      	ldr	r3, [pc, #20]	; (32214 <init_work_cancel+0x2c>)
   32200:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   32202:	b11b      	cbz	r3, 3220c <init_work_cancel+0x24>
	parent->next = child;
   32204:	601c      	str	r4, [r3, #0]
	list->tail = node;
   32206:	4b03      	ldr	r3, [pc, #12]	; (32214 <init_work_cancel+0x2c>)
   32208:	605c      	str	r4, [r3, #4]
}
   3220a:	bd38      	pop	{r3, r4, r5, pc}
   3220c:	4b01      	ldr	r3, [pc, #4]	; (32214 <init_work_cancel+0x2c>)
   3220e:	605c      	str	r4, [r3, #4]
	list->head = node;
   32210:	601c      	str	r4, [r3, #0]
}
   32212:	e7fa      	b.n	3220a <init_work_cancel+0x22>
   32214:	2000ca78 	.word	0x2000ca78

00032218 <work_queue_main>:
{
   32218:	b5f0      	push	{r4, r5, r6, r7, lr}
   3221a:	b085      	sub	sp, #20
   3221c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   3221e:	e025      	b.n	3226c <work_queue_main+0x54>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32220:	4c6b      	ldr	r4, [pc, #428]	; (323d0 <work_queue_main+0x1b8>)
   32222:	2394      	movs	r3, #148	; 0x94
   32224:	4622      	mov	r2, r4
   32226:	496b      	ldr	r1, [pc, #428]	; (323d4 <work_queue_main+0x1bc>)
   32228:	486b      	ldr	r0, [pc, #428]	; (323d8 <work_queue_main+0x1c0>)
   3222a:	f004 f833 	bl	36294 <assert_print>
   3222e:	496b      	ldr	r1, [pc, #428]	; (323dc <work_queue_main+0x1c4>)
   32230:	486b      	ldr	r0, [pc, #428]	; (323e0 <work_queue_main+0x1c8>)
   32232:	f004 f82f 	bl	36294 <assert_print>
   32236:	2194      	movs	r1, #148	; 0x94
   32238:	4620      	mov	r0, r4
   3223a:	f004 f824 	bl	36286 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   3223e:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   32242:	f023 0204 	bic.w	r2, r3, #4
   32246:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
		} else if (flag_test_and_clear(&queue->flags,
   3224a:	f013 0f04 	tst.w	r3, #4
   3224e:	d176      	bne.n	3233e <work_queue_main+0x126>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   32250:	2300      	movs	r3, #0
   32252:	9302      	str	r3, [sp, #8]
   32254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3225c:	e9cd 2300 	strd	r2, r3, [sp]
   32260:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   32264:	4639      	mov	r1, r7
   32266:	485d      	ldr	r0, [pc, #372]	; (323dc <work_queue_main+0x1c4>)
   32268:	f002 f868 	bl	3433c <z_sched_wait>
	__asm__ volatile(
   3226c:	f04f 0320 	mov.w	r3, #32
   32270:	f3ef 8711 	mrs	r7, BASEPRI
   32274:	f383 8812 	msr	BASEPRI_MAX, r3
   32278:	f3bf 8f6f 	isb	sy
   3227c:	463e      	mov	r6, r7
   3227e:	4857      	ldr	r0, [pc, #348]	; (323dc <work_queue_main+0x1c4>)
   32280:	f7ff f8bc 	bl	313fc <z_spin_lock_valid>
   32284:	2800      	cmp	r0, #0
   32286:	d0cb      	beq.n	32220 <work_queue_main+0x8>
	z_spin_lock_set_owner(l);
   32288:	4854      	ldr	r0, [pc, #336]	; (323dc <work_queue_main+0x1c4>)
   3228a:	f7ff f8d7 	bl	3143c <z_spin_lock_set_owner>
	return list->head;
   3228e:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   32292:	2c00      	cmp	r4, #0
   32294:	d0d3      	beq.n	3223e <work_queue_main+0x26>
	return node->next;
   32296:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   32298:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   3229c:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   322a0:	4294      	cmp	r4, r2
   322a2:	d049      	beq.n	32338 <work_queue_main+0x120>
	*flagp |= BIT(bit);
   322a4:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   322a8:	f043 0302 	orr.w	r3, r3, #2
   322ac:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   322b0:	68e3      	ldr	r3, [r4, #12]
   322b2:	f043 0201 	orr.w	r2, r3, #1
   322b6:	60e2      	str	r2, [r4, #12]
	*flagp &= ~BIT(bit);
   322b8:	f023 0304 	bic.w	r3, r3, #4
   322bc:	f043 0301 	orr.w	r3, r3, #1
   322c0:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   322c2:	6867      	ldr	r7, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   322c4:	4845      	ldr	r0, [pc, #276]	; (323dc <work_queue_main+0x1c4>)
   322c6:	f7ff f8a9 	bl	3141c <z_spin_unlock_valid>
   322ca:	2800      	cmp	r0, #0
   322cc:	d041      	beq.n	32352 <work_queue_main+0x13a>
	__asm__ volatile(
   322ce:	f386 8811 	msr	BASEPRI, r6
   322d2:	f3bf 8f6f 	isb	sy
		__ASSERT_NO_MSG(handler != NULL);
   322d6:	2f00      	cmp	r7, #0
   322d8:	d04a      	beq.n	32370 <work_queue_main+0x158>
		handler(work);
   322da:	4620      	mov	r0, r4
   322dc:	47b8      	blx	r7
	__asm__ volatile(
   322de:	f04f 0320 	mov.w	r3, #32
   322e2:	f3ef 8611 	mrs	r6, BASEPRI
   322e6:	f383 8812 	msr	BASEPRI_MAX, r3
   322ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   322ee:	483b      	ldr	r0, [pc, #236]	; (323dc <work_queue_main+0x1c4>)
   322f0:	f7ff f884 	bl	313fc <z_spin_lock_valid>
   322f4:	2800      	cmp	r0, #0
   322f6:	d048      	beq.n	3238a <work_queue_main+0x172>
	z_spin_lock_set_owner(l);
   322f8:	4838      	ldr	r0, [pc, #224]	; (323dc <work_queue_main+0x1c4>)
   322fa:	f7ff f89f 	bl	3143c <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   322fe:	68e3      	ldr	r3, [r4, #12]
   32300:	f023 0301 	bic.w	r3, r3, #1
   32304:	60e3      	str	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   32306:	f013 0f02 	tst.w	r3, #2
   3230a:	d14d      	bne.n	323a8 <work_queue_main+0x190>
	*flagp &= ~BIT(bit);
   3230c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   32310:	f023 0302 	bic.w	r3, r3, #2
   32314:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   32318:	f3c3 2400 	ubfx	r4, r3, #8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3231c:	482f      	ldr	r0, [pc, #188]	; (323dc <work_queue_main+0x1c4>)
   3231e:	f7ff f87d 	bl	3141c <z_spin_unlock_valid>
   32322:	2800      	cmp	r0, #0
   32324:	d044      	beq.n	323b0 <work_queue_main+0x198>
	__asm__ volatile(
   32326:	f386 8811 	msr	BASEPRI, r6
   3232a:	f3bf 8f6f 	isb	sy
		if (yield) {
   3232e:	2c00      	cmp	r4, #0
   32330:	d19c      	bne.n	3226c <work_queue_main+0x54>
	z_impl_k_yield();
   32332:	f001 fced 	bl	33d10 <z_impl_k_yield>
}
   32336:	e799      	b.n	3226c <work_queue_main+0x54>
	list->tail = node;
   32338:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
		if (node != NULL) {
   3233c:	e7b2      	b.n	322a4 <work_queue_main+0x8c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   3233e:	f105 04c8 	add.w	r4, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   32342:	2200      	movs	r2, #0
   32344:	2101      	movs	r1, #1
   32346:	4620      	mov	r0, r4
   32348:	f001 ff90 	bl	3426c <z_sched_wake>
   3234c:	2800      	cmp	r0, #0
   3234e:	d1f8      	bne.n	32342 <work_queue_main+0x12a>
   32350:	e77e      	b.n	32250 <work_queue_main+0x38>
   32352:	4c1f      	ldr	r4, [pc, #124]	; (323d0 <work_queue_main+0x1b8>)
   32354:	23c2      	movs	r3, #194	; 0xc2
   32356:	4622      	mov	r2, r4
   32358:	4922      	ldr	r1, [pc, #136]	; (323e4 <work_queue_main+0x1cc>)
   3235a:	481f      	ldr	r0, [pc, #124]	; (323d8 <work_queue_main+0x1c0>)
   3235c:	f003 ff9a 	bl	36294 <assert_print>
   32360:	491e      	ldr	r1, [pc, #120]	; (323dc <work_queue_main+0x1c4>)
   32362:	4821      	ldr	r0, [pc, #132]	; (323e8 <work_queue_main+0x1d0>)
   32364:	f003 ff96 	bl	36294 <assert_print>
   32368:	21c2      	movs	r1, #194	; 0xc2
   3236a:	4620      	mov	r0, r4
   3236c:	f003 ff8b 	bl	36286 <assert_post_action>
		__ASSERT_NO_MSG(handler != NULL);
   32370:	4c1e      	ldr	r4, [pc, #120]	; (323ec <work_queue_main+0x1d4>)
   32372:	f240 239b 	movw	r3, #667	; 0x29b
   32376:	4622      	mov	r2, r4
   32378:	491d      	ldr	r1, [pc, #116]	; (323f0 <work_queue_main+0x1d8>)
   3237a:	4817      	ldr	r0, [pc, #92]	; (323d8 <work_queue_main+0x1c0>)
   3237c:	f003 ff8a 	bl	36294 <assert_print>
   32380:	f240 219b 	movw	r1, #667	; 0x29b
   32384:	4620      	mov	r0, r4
   32386:	f003 ff7e 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3238a:	4c11      	ldr	r4, [pc, #68]	; (323d0 <work_queue_main+0x1b8>)
   3238c:	2394      	movs	r3, #148	; 0x94
   3238e:	4622      	mov	r2, r4
   32390:	4910      	ldr	r1, [pc, #64]	; (323d4 <work_queue_main+0x1bc>)
   32392:	4811      	ldr	r0, [pc, #68]	; (323d8 <work_queue_main+0x1c0>)
   32394:	f003 ff7e 	bl	36294 <assert_print>
   32398:	4910      	ldr	r1, [pc, #64]	; (323dc <work_queue_main+0x1c4>)
   3239a:	4811      	ldr	r0, [pc, #68]	; (323e0 <work_queue_main+0x1c8>)
   3239c:	f003 ff7a 	bl	36294 <assert_print>
   323a0:	2194      	movs	r1, #148	; 0x94
   323a2:	4620      	mov	r0, r4
   323a4:	f003 ff6f 	bl	36286 <assert_post_action>
			finalize_cancel_locked(work);
   323a8:	4620      	mov	r0, r4
   323aa:	f7ff feed 	bl	32188 <finalize_cancel_locked>
   323ae:	e7ad      	b.n	3230c <work_queue_main+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   323b0:	4c07      	ldr	r4, [pc, #28]	; (323d0 <work_queue_main+0x1b8>)
   323b2:	23c2      	movs	r3, #194	; 0xc2
   323b4:	4622      	mov	r2, r4
   323b6:	490b      	ldr	r1, [pc, #44]	; (323e4 <work_queue_main+0x1cc>)
   323b8:	4807      	ldr	r0, [pc, #28]	; (323d8 <work_queue_main+0x1c0>)
   323ba:	f003 ff6b 	bl	36294 <assert_print>
   323be:	4907      	ldr	r1, [pc, #28]	; (323dc <work_queue_main+0x1c4>)
   323c0:	4809      	ldr	r0, [pc, #36]	; (323e8 <work_queue_main+0x1d0>)
   323c2:	f003 ff67 	bl	36294 <assert_print>
   323c6:	21c2      	movs	r1, #194	; 0xc2
   323c8:	4620      	mov	r0, r4
   323ca:	f003 ff5c 	bl	36286 <assert_post_action>
   323ce:	bf00      	nop
   323d0:	00040b28 	.word	0x00040b28
   323d4:	00040b88 	.word	0x00040b88
   323d8:	0003f72c 	.word	0x0003f72c
   323dc:	2000ca80 	.word	0x2000ca80
   323e0:	00040ba0 	.word	0x00040ba0
   323e4:	00040b58 	.word	0x00040b58
   323e8:	00040b70 	.word	0x00040b70
   323ec:	00046340 	.word	0x00046340
   323f0:	00046380 	.word	0x00046380

000323f4 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   323f4:	b508      	push	{r3, lr}
   323f6:	4684      	mov	ip, r0
   323f8:	4608      	mov	r0, r1
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   323fa:	ea53 0102 	orrs.w	r1, r3, r2
   323fe:	d00c      	beq.n	3241a <schedule_for_queue_locked+0x26>
	*flagp |= BIT(bit);
   32400:	68c1      	ldr	r1, [r0, #12]
   32402:	f041 0108 	orr.w	r1, r1, #8
   32406:	60c1      	str	r1, [r0, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   32408:	f8dc 1000 	ldr.w	r1, [ip]
   3240c:	6281      	str	r1, [r0, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   3240e:	4905      	ldr	r1, [pc, #20]	; (32424 <schedule_for_queue_locked+0x30>)
   32410:	3010      	adds	r0, #16
   32412:	f002 f809 	bl	34428 <z_add_timeout>

	return ret;
   32416:	2001      	movs	r0, #1
}
   32418:	bd08      	pop	{r3, pc}
		return submit_to_queue_locked(work, queuep);
   3241a:	4661      	mov	r1, ip
   3241c:	f7ff fe12 	bl	32044 <submit_to_queue_locked>
   32420:	e7fa      	b.n	32418 <schedule_for_queue_locked+0x24>
   32422:	bf00      	nop
   32424:	000320cd 	.word	0x000320cd

00032428 <k_work_init>:
{
   32428:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(work != NULL);
   3242a:	b138      	cbz	r0, 3243c <k_work_init+0x14>
	__ASSERT_NO_MSG(handler != NULL);
   3242c:	b189      	cbz	r1, 32452 <k_work_init+0x2a>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   3242e:	2200      	movs	r2, #0
   32430:	6002      	str	r2, [r0, #0]
   32432:	6042      	str	r2, [r0, #4]
   32434:	6082      	str	r2, [r0, #8]
   32436:	60c2      	str	r2, [r0, #12]
   32438:	6041      	str	r1, [r0, #4]
}
   3243a:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(work != NULL);
   3243c:	4c0a      	ldr	r4, [pc, #40]	; (32468 <k_work_init+0x40>)
   3243e:	2389      	movs	r3, #137	; 0x89
   32440:	4622      	mov	r2, r4
   32442:	490a      	ldr	r1, [pc, #40]	; (3246c <k_work_init+0x44>)
   32444:	480a      	ldr	r0, [pc, #40]	; (32470 <k_work_init+0x48>)
   32446:	f003 ff25 	bl	36294 <assert_print>
   3244a:	2189      	movs	r1, #137	; 0x89
   3244c:	4620      	mov	r0, r4
   3244e:	f003 ff1a 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   32452:	4c05      	ldr	r4, [pc, #20]	; (32468 <k_work_init+0x40>)
   32454:	238a      	movs	r3, #138	; 0x8a
   32456:	4622      	mov	r2, r4
   32458:	4906      	ldr	r1, [pc, #24]	; (32474 <k_work_init+0x4c>)
   3245a:	4805      	ldr	r0, [pc, #20]	; (32470 <k_work_init+0x48>)
   3245c:	f003 ff1a 	bl	36294 <assert_print>
   32460:	218a      	movs	r1, #138	; 0x8a
   32462:	4620      	mov	r0, r4
   32464:	f003 ff0f 	bl	36286 <assert_post_action>
   32468:	00046340 	.word	0x00046340
   3246c:	00046398 	.word	0x00046398
   32470:	0003f72c 	.word	0x0003f72c
   32474:	00046380 	.word	0x00046380

00032478 <z_work_submit_to_queue>:
{
   32478:	b570      	push	{r4, r5, r6, lr}
   3247a:	b082      	sub	sp, #8
   3247c:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   3247e:	b309      	cbz	r1, 324c4 <z_work_submit_to_queue+0x4c>
   32480:	460c      	mov	r4, r1
	__asm__ volatile(
   32482:	f04f 0220 	mov.w	r2, #32
   32486:	f3ef 8311 	mrs	r3, BASEPRI
   3248a:	f382 8812 	msr	BASEPRI_MAX, r2
   3248e:	f3bf 8f6f 	isb	sy
   32492:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32494:	4821      	ldr	r0, [pc, #132]	; (3251c <z_work_submit_to_queue+0xa4>)
   32496:	f7fe ffb1 	bl	313fc <z_spin_lock_valid>
   3249a:	b300      	cbz	r0, 324de <z_work_submit_to_queue+0x66>
	z_spin_lock_set_owner(l);
   3249c:	4e1f      	ldr	r6, [pc, #124]	; (3251c <z_work_submit_to_queue+0xa4>)
   3249e:	4630      	mov	r0, r6
   324a0:	f7fe ffcc 	bl	3143c <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   324a4:	a901      	add	r1, sp, #4
   324a6:	4620      	mov	r0, r4
   324a8:	f7ff fdcc 	bl	32044 <submit_to_queue_locked>
   324ac:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   324ae:	4630      	mov	r0, r6
   324b0:	f7fe ffb4 	bl	3141c <z_spin_unlock_valid>
   324b4:	b310      	cbz	r0, 324fc <z_work_submit_to_queue+0x84>
	__asm__ volatile(
   324b6:	f385 8811 	msr	BASEPRI, r5
   324ba:	f3bf 8f6f 	isb	sy
}
   324be:	4620      	mov	r0, r4
   324c0:	b002      	add	sp, #8
   324c2:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(work != NULL);
   324c4:	4c16      	ldr	r4, [pc, #88]	; (32520 <z_work_submit_to_queue+0xa8>)
   324c6:	f44f 73ba 	mov.w	r3, #372	; 0x174
   324ca:	4622      	mov	r2, r4
   324cc:	4915      	ldr	r1, [pc, #84]	; (32524 <z_work_submit_to_queue+0xac>)
   324ce:	4816      	ldr	r0, [pc, #88]	; (32528 <z_work_submit_to_queue+0xb0>)
   324d0:	f003 fee0 	bl	36294 <assert_print>
   324d4:	f44f 71ba 	mov.w	r1, #372	; 0x174
   324d8:	4620      	mov	r0, r4
   324da:	f003 fed4 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   324de:	4c13      	ldr	r4, [pc, #76]	; (3252c <z_work_submit_to_queue+0xb4>)
   324e0:	2394      	movs	r3, #148	; 0x94
   324e2:	4622      	mov	r2, r4
   324e4:	4912      	ldr	r1, [pc, #72]	; (32530 <z_work_submit_to_queue+0xb8>)
   324e6:	4810      	ldr	r0, [pc, #64]	; (32528 <z_work_submit_to_queue+0xb0>)
   324e8:	f003 fed4 	bl	36294 <assert_print>
   324ec:	490b      	ldr	r1, [pc, #44]	; (3251c <z_work_submit_to_queue+0xa4>)
   324ee:	4811      	ldr	r0, [pc, #68]	; (32534 <z_work_submit_to_queue+0xbc>)
   324f0:	f003 fed0 	bl	36294 <assert_print>
   324f4:	2194      	movs	r1, #148	; 0x94
   324f6:	4620      	mov	r0, r4
   324f8:	f003 fec5 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   324fc:	4c0b      	ldr	r4, [pc, #44]	; (3252c <z_work_submit_to_queue+0xb4>)
   324fe:	23c2      	movs	r3, #194	; 0xc2
   32500:	4622      	mov	r2, r4
   32502:	490d      	ldr	r1, [pc, #52]	; (32538 <z_work_submit_to_queue+0xc0>)
   32504:	4808      	ldr	r0, [pc, #32]	; (32528 <z_work_submit_to_queue+0xb0>)
   32506:	f003 fec5 	bl	36294 <assert_print>
   3250a:	4631      	mov	r1, r6
   3250c:	480b      	ldr	r0, [pc, #44]	; (3253c <z_work_submit_to_queue+0xc4>)
   3250e:	f003 fec1 	bl	36294 <assert_print>
   32512:	21c2      	movs	r1, #194	; 0xc2
   32514:	4620      	mov	r0, r4
   32516:	f003 feb6 	bl	36286 <assert_post_action>
   3251a:	bf00      	nop
   3251c:	2000ca80 	.word	0x2000ca80
   32520:	00046340 	.word	0x00046340
   32524:	00046398 	.word	0x00046398
   32528:	0003f72c 	.word	0x0003f72c
   3252c:	00040b28 	.word	0x00040b28
   32530:	00040b88 	.word	0x00040b88
   32534:	00040ba0 	.word	0x00040ba0
   32538:	00040b58 	.word	0x00040b58
   3253c:	00040b70 	.word	0x00040b70

00032540 <k_work_submit>:
{
   32540:	b508      	push	{r3, lr}
   32542:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   32544:	4801      	ldr	r0, [pc, #4]	; (3254c <k_work_submit+0xc>)
   32546:	f00c faf4 	bl	3eb32 <k_work_submit_to_queue>
}
   3254a:	bd08      	pop	{r3, pc}
   3254c:	2000baf0 	.word	0x2000baf0

00032550 <k_work_queue_init>:
{
   32550:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(queue != NULL);
   32552:	b120      	cbz	r0, 3255e <k_work_queue_init+0xe>
	*queue = (struct k_work_q) {
   32554:	22d8      	movs	r2, #216	; 0xd8
   32556:	2100      	movs	r1, #0
   32558:	f005 ff7e 	bl	38458 <memset>
}
   3255c:	bd10      	pop	{r4, pc}
	__ASSERT_NO_MSG(queue != NULL);
   3255e:	4c06      	ldr	r4, [pc, #24]	; (32578 <k_work_queue_init+0x28>)
   32560:	f240 23b9 	movw	r3, #697	; 0x2b9
   32564:	4622      	mov	r2, r4
   32566:	4905      	ldr	r1, [pc, #20]	; (3257c <k_work_queue_init+0x2c>)
   32568:	4805      	ldr	r0, [pc, #20]	; (32580 <k_work_queue_init+0x30>)
   3256a:	f003 fe93 	bl	36294 <assert_print>
   3256e:	f240 21b9 	movw	r1, #697	; 0x2b9
   32572:	4620      	mov	r0, r4
   32574:	f003 fe87 	bl	36286 <assert_post_action>
   32578:	00046340 	.word	0x00046340
   3257c:	000463ac 	.word	0x000463ac
   32580:	0003f72c 	.word	0x0003f72c

00032584 <k_work_queue_start>:
{
   32584:	b5f0      	push	{r4, r5, r6, r7, lr}
   32586:	b089      	sub	sp, #36	; 0x24
   32588:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   3258a:	2800      	cmp	r0, #0
   3258c:	d03b      	beq.n	32606 <k_work_queue_start+0x82>
   3258e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(stack);
   32590:	2900      	cmp	r1, #0
   32592:	d045      	beq.n	32620 <k_work_queue_start+0x9c>
	return (*flagp & BIT(bit)) != 0U;
   32594:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   32598:	f010 0f01 	tst.w	r0, #1
   3259c:	d14d      	bne.n	3263a <k_work_queue_start+0xb6>
	list->head = NULL;
   3259e:	2000      	movs	r0, #0
   325a0:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   325a4:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   325a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   325ac:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   325b0:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   325b4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   325b8:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   325bc:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   325c0:	2d00      	cmp	r5, #0
   325c2:	d047      	beq.n	32654 <k_work_queue_start+0xd0>
   325c4:	7928      	ldrb	r0, [r5, #4]
   325c6:	2800      	cmp	r0, #0
   325c8:	d146      	bne.n	32658 <k_work_queue_start+0xd4>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   325ca:	2001      	movs	r0, #1
	*flagp = flags;
   325cc:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   325d0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   325d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   325d8:	e9cd 6706 	strd	r6, r7, [sp, #24]
   325dc:	2000      	movs	r0, #0
   325de:	9004      	str	r0, [sp, #16]
   325e0:	9303      	str	r3, [sp, #12]
   325e2:	9002      	str	r0, [sp, #8]
   325e4:	9001      	str	r0, [sp, #4]
   325e6:	9400      	str	r4, [sp, #0]
   325e8:	4b1d      	ldr	r3, [pc, #116]	; (32660 <k_work_queue_start+0xdc>)
   325ea:	4620      	mov	r0, r4
   325ec:	f7ff f84c 	bl	31688 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   325f0:	b125      	cbz	r5, 325fc <k_work_queue_start+0x78>
   325f2:	6829      	ldr	r1, [r5, #0]
   325f4:	b111      	cbz	r1, 325fc <k_work_queue_start+0x78>
	return z_impl_k_thread_name_set(thread, str);
   325f6:	4620      	mov	r0, r4
   325f8:	f7fe fee0 	bl	313bc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   325fc:	4620      	mov	r0, r4
   325fe:	f00c f962 	bl	3e8c6 <z_impl_k_thread_start>
}
   32602:	b009      	add	sp, #36	; 0x24
   32604:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(queue);
   32606:	4c17      	ldr	r4, [pc, #92]	; (32664 <k_work_queue_start+0xe0>)
   32608:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   3260c:	4622      	mov	r2, r4
   3260e:	4916      	ldr	r1, [pc, #88]	; (32668 <k_work_queue_start+0xe4>)
   32610:	4816      	ldr	r0, [pc, #88]	; (3266c <k_work_queue_start+0xe8>)
   32612:	f003 fe3f 	bl	36294 <assert_print>
   32616:	f44f 7132 	mov.w	r1, #712	; 0x2c8
   3261a:	4620      	mov	r0, r4
   3261c:	f003 fe33 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(stack);
   32620:	4c10      	ldr	r4, [pc, #64]	; (32664 <k_work_queue_start+0xe0>)
   32622:	f240 23c9 	movw	r3, #713	; 0x2c9
   32626:	4622      	mov	r2, r4
   32628:	4911      	ldr	r1, [pc, #68]	; (32670 <k_work_queue_start+0xec>)
   3262a:	4810      	ldr	r0, [pc, #64]	; (3266c <k_work_queue_start+0xe8>)
   3262c:	f003 fe32 	bl	36294 <assert_print>
   32630:	f240 21c9 	movw	r1, #713	; 0x2c9
   32634:	4620      	mov	r0, r4
   32636:	f003 fe26 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   3263a:	4c0a      	ldr	r4, [pc, #40]	; (32664 <k_work_queue_start+0xe0>)
   3263c:	f240 23ca 	movw	r3, #714	; 0x2ca
   32640:	4622      	mov	r2, r4
   32642:	490c      	ldr	r1, [pc, #48]	; (32674 <k_work_queue_start+0xf0>)
   32644:	4809      	ldr	r0, [pc, #36]	; (3266c <k_work_queue_start+0xe8>)
   32646:	f003 fe25 	bl	36294 <assert_print>
   3264a:	f240 21ca 	movw	r1, #714	; 0x2ca
   3264e:	4620      	mov	r0, r4
   32650:	f003 fe19 	bl	36286 <assert_post_action>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   32654:	2001      	movs	r0, #1
   32656:	e7b9      	b.n	325cc <k_work_queue_start+0x48>
		flags |= K_WORK_QUEUE_NO_YIELD;
   32658:	f240 1001 	movw	r0, #257	; 0x101
   3265c:	e7b6      	b.n	325cc <k_work_queue_start+0x48>
   3265e:	bf00      	nop
   32660:	00032219 	.word	0x00032219
   32664:	00046340 	.word	0x00046340
   32668:	00046408 	.word	0x00046408
   3266c:	0003f72c 	.word	0x0003f72c
   32670:	00046410 	.word	0x00046410
   32674:	00046418 	.word	0x00046418

00032678 <k_work_queue_drain>:
{
   32678:	b5f0      	push	{r4, r5, r6, r7, lr}
   3267a:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(queue);
   3267c:	2800      	cmp	r0, #0
   3267e:	d03b      	beq.n	326f8 <k_work_queue_drain+0x80>
   32680:	460d      	mov	r5, r1
   32682:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(!k_is_in_isr());
   32684:	f00c f917 	bl	3e8b6 <k_is_in_isr>
   32688:	2800      	cmp	r0, #0
   3268a:	d142      	bne.n	32712 <k_work_queue_drain+0x9a>
	__asm__ volatile(
   3268c:	f04f 0320 	mov.w	r3, #32
   32690:	f3ef 8611 	mrs	r6, BASEPRI
   32694:	f383 8812 	msr	BASEPRI_MAX, r3
   32698:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3269c:	4837      	ldr	r0, [pc, #220]	; (3277c <k_work_queue_drain+0x104>)
   3269e:	f7fe fead 	bl	313fc <z_spin_lock_valid>
   326a2:	2800      	cmp	r0, #0
   326a4:	d042      	beq.n	3272c <k_work_queue_drain+0xb4>
	z_spin_lock_set_owner(l);
   326a6:	4835      	ldr	r0, [pc, #212]	; (3277c <k_work_queue_drain+0x104>)
   326a8:	f7fe fec8 	bl	3143c <z_spin_lock_set_owner>
	return *flagp;
   326ac:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
	if (((flags_get(&queue->flags)
   326b0:	f013 0f06 	tst.w	r3, #6
   326b4:	d104      	bne.n	326c0 <k_work_queue_drain+0x48>
	    || plug
   326b6:	b91d      	cbnz	r5, 326c0 <k_work_queue_drain+0x48>
	return list->head;
   326b8:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
	    || !sys_slist_is_empty(&queue->pending)) {
   326bc:	2a00      	cmp	r2, #0
   326be:	d044      	beq.n	3274a <k_work_queue_drain+0xd2>
	*flagp |= BIT(bit);
   326c0:	f043 0204 	orr.w	r2, r3, #4
   326c4:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
		if (plug) {
   326c8:	b11d      	cbz	r5, 326d2 <k_work_queue_drain+0x5a>
	*flagp |= BIT(bit);
   326ca:	f043 030c 	orr.w	r3, r3, #12
   326ce:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		notify_queue_locked(queue);
   326d2:	4620      	mov	r0, r4
   326d4:	f00c f9f1 	bl	3eaba <notify_queue_locked>
		ret = z_sched_wait(&lock, key, &queue->drainq,
   326d8:	2300      	movs	r3, #0
   326da:	9302      	str	r3, [sp, #8]
   326dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   326e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   326e4:	e9cd 2300 	strd	r2, r3, [sp]
   326e8:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
   326ec:	4631      	mov	r1, r6
   326ee:	4823      	ldr	r0, [pc, #140]	; (3277c <k_work_queue_drain+0x104>)
   326f0:	f001 fe24 	bl	3433c <z_sched_wait>
}
   326f4:	b005      	add	sp, #20
   326f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(queue);
   326f8:	4c21      	ldr	r4, [pc, #132]	; (32780 <k_work_queue_drain+0x108>)
   326fa:	f240 23ed 	movw	r3, #749	; 0x2ed
   326fe:	4622      	mov	r2, r4
   32700:	4920      	ldr	r1, [pc, #128]	; (32784 <k_work_queue_drain+0x10c>)
   32702:	4821      	ldr	r0, [pc, #132]	; (32788 <k_work_queue_drain+0x110>)
   32704:	f003 fdc6 	bl	36294 <assert_print>
   32708:	f240 21ed 	movw	r1, #749	; 0x2ed
   3270c:	4620      	mov	r0, r4
   3270e:	f003 fdba 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   32712:	4c1b      	ldr	r4, [pc, #108]	; (32780 <k_work_queue_drain+0x108>)
   32714:	f240 23ee 	movw	r3, #750	; 0x2ee
   32718:	4622      	mov	r2, r4
   3271a:	491c      	ldr	r1, [pc, #112]	; (3278c <k_work_queue_drain+0x114>)
   3271c:	481a      	ldr	r0, [pc, #104]	; (32788 <k_work_queue_drain+0x110>)
   3271e:	f003 fdb9 	bl	36294 <assert_print>
   32722:	f240 21ee 	movw	r1, #750	; 0x2ee
   32726:	4620      	mov	r0, r4
   32728:	f003 fdad 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3272c:	4c18      	ldr	r4, [pc, #96]	; (32790 <k_work_queue_drain+0x118>)
   3272e:	2394      	movs	r3, #148	; 0x94
   32730:	4622      	mov	r2, r4
   32732:	4918      	ldr	r1, [pc, #96]	; (32794 <k_work_queue_drain+0x11c>)
   32734:	4814      	ldr	r0, [pc, #80]	; (32788 <k_work_queue_drain+0x110>)
   32736:	f003 fdad 	bl	36294 <assert_print>
   3273a:	4910      	ldr	r1, [pc, #64]	; (3277c <k_work_queue_drain+0x104>)
   3273c:	4816      	ldr	r0, [pc, #88]	; (32798 <k_work_queue_drain+0x120>)
   3273e:	f003 fda9 	bl	36294 <assert_print>
   32742:	2194      	movs	r1, #148	; 0x94
   32744:	4620      	mov	r0, r4
   32746:	f003 fd9e 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3274a:	480c      	ldr	r0, [pc, #48]	; (3277c <k_work_queue_drain+0x104>)
   3274c:	f7fe fe66 	bl	3141c <z_spin_unlock_valid>
   32750:	b128      	cbz	r0, 3275e <k_work_queue_drain+0xe6>
	__asm__ volatile(
   32752:	f386 8811 	msr	BASEPRI, r6
   32756:	f3bf 8f6f 	isb	sy
	int ret = 0;
   3275a:	2000      	movs	r0, #0
	return ret;
   3275c:	e7ca      	b.n	326f4 <k_work_queue_drain+0x7c>
   3275e:	4c0c      	ldr	r4, [pc, #48]	; (32790 <k_work_queue_drain+0x118>)
   32760:	23c2      	movs	r3, #194	; 0xc2
   32762:	4622      	mov	r2, r4
   32764:	490d      	ldr	r1, [pc, #52]	; (3279c <k_work_queue_drain+0x124>)
   32766:	4808      	ldr	r0, [pc, #32]	; (32788 <k_work_queue_drain+0x110>)
   32768:	f003 fd94 	bl	36294 <assert_print>
   3276c:	4903      	ldr	r1, [pc, #12]	; (3277c <k_work_queue_drain+0x104>)
   3276e:	480c      	ldr	r0, [pc, #48]	; (327a0 <k_work_queue_drain+0x128>)
   32770:	f003 fd90 	bl	36294 <assert_print>
   32774:	21c2      	movs	r1, #194	; 0xc2
   32776:	4620      	mov	r0, r4
   32778:	f003 fd85 	bl	36286 <assert_post_action>
   3277c:	2000ca80 	.word	0x2000ca80
   32780:	00046340 	.word	0x00046340
   32784:	00046408 	.word	0x00046408
   32788:	0003f72c 	.word	0x0003f72c
   3278c:	0004327c 	.word	0x0004327c
   32790:	00040b28 	.word	0x00040b28
   32794:	00040b88 	.word	0x00040b88
   32798:	00040ba0 	.word	0x00040ba0
   3279c:	00040b58 	.word	0x00040b58
   327a0:	00040b70 	.word	0x00040b70

000327a4 <k_work_init_delayable>:
{
   327a4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   327a6:	b158      	cbz	r0, 327c0 <k_work_init_delayable+0x1c>
   327a8:	460c      	mov	r4, r1
   327aa:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(handler != NULL);
   327ac:	b1a9      	cbz	r1, 327da <k_work_init_delayable+0x36>
	*dwork = (struct k_work_delayable){
   327ae:	2230      	movs	r2, #48	; 0x30
   327b0:	2100      	movs	r1, #0
   327b2:	f005 fe51 	bl	38458 <memset>
   327b6:	606c      	str	r4, [r5, #4]
   327b8:	f44f 7380 	mov.w	r3, #256	; 0x100
   327bc:	60eb      	str	r3, [r5, #12]
}
   327be:	bd38      	pop	{r3, r4, r5, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   327c0:	4c0c      	ldr	r4, [pc, #48]	; (327f4 <k_work_init_delayable+0x50>)
   327c2:	f44f 7350 	mov.w	r3, #832	; 0x340
   327c6:	4622      	mov	r2, r4
   327c8:	490b      	ldr	r1, [pc, #44]	; (327f8 <k_work_init_delayable+0x54>)
   327ca:	480c      	ldr	r0, [pc, #48]	; (327fc <k_work_init_delayable+0x58>)
   327cc:	f003 fd62 	bl	36294 <assert_print>
   327d0:	f44f 7150 	mov.w	r1, #832	; 0x340
   327d4:	4620      	mov	r0, r4
   327d6:	f003 fd56 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   327da:	4c06      	ldr	r4, [pc, #24]	; (327f4 <k_work_init_delayable+0x50>)
   327dc:	f240 3341 	movw	r3, #833	; 0x341
   327e0:	4622      	mov	r2, r4
   327e2:	4907      	ldr	r1, [pc, #28]	; (32800 <k_work_init_delayable+0x5c>)
   327e4:	4805      	ldr	r0, [pc, #20]	; (327fc <k_work_init_delayable+0x58>)
   327e6:	f003 fd55 	bl	36294 <assert_print>
   327ea:	f240 3141 	movw	r1, #833	; 0x341
   327ee:	4620      	mov	r0, r4
   327f0:	f003 fd49 	bl	36286 <assert_post_action>
   327f4:	00046340 	.word	0x00046340
   327f8:	0004644c 	.word	0x0004644c
   327fc:	0003f72c 	.word	0x0003f72c
   32800:	00046380 	.word	0x00046380

00032804 <k_work_delayable_busy_get>:
{
   32804:	b570      	push	{r4, r5, r6, lr}
   32806:	4605      	mov	r5, r0
	__asm__ volatile(
   32808:	f04f 0220 	mov.w	r2, #32
   3280c:	f3ef 8311 	mrs	r3, BASEPRI
   32810:	f382 8812 	msr	BASEPRI_MAX, r2
   32814:	f3bf 8f6f 	isb	sy
   32818:	461c      	mov	r4, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3281a:	4819      	ldr	r0, [pc, #100]	; (32880 <k_work_delayable_busy_get+0x7c>)
   3281c:	f7fe fdee 	bl	313fc <z_spin_lock_valid>
   32820:	b180      	cbz	r0, 32844 <k_work_delayable_busy_get+0x40>
	z_spin_lock_set_owner(l);
   32822:	4e17      	ldr	r6, [pc, #92]	; (32880 <k_work_delayable_busy_get+0x7c>)
   32824:	4630      	mov	r0, r6
   32826:	f7fe fe09 	bl	3143c <z_spin_lock_set_owner>
	return *flagp;
   3282a:	68ed      	ldr	r5, [r5, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   3282c:	f005 050f 	and.w	r5, r5, #15
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32830:	4630      	mov	r0, r6
   32832:	f7fe fdf3 	bl	3141c <z_spin_unlock_valid>
   32836:	b1a0      	cbz	r0, 32862 <k_work_delayable_busy_get+0x5e>
	__asm__ volatile(
   32838:	f384 8811 	msr	BASEPRI, r4
   3283c:	f3bf 8f6f 	isb	sy
}
   32840:	4628      	mov	r0, r5
   32842:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32844:	4c0f      	ldr	r4, [pc, #60]	; (32884 <k_work_delayable_busy_get+0x80>)
   32846:	2394      	movs	r3, #148	; 0x94
   32848:	4622      	mov	r2, r4
   3284a:	490f      	ldr	r1, [pc, #60]	; (32888 <k_work_delayable_busy_get+0x84>)
   3284c:	480f      	ldr	r0, [pc, #60]	; (3288c <k_work_delayable_busy_get+0x88>)
   3284e:	f003 fd21 	bl	36294 <assert_print>
   32852:	490b      	ldr	r1, [pc, #44]	; (32880 <k_work_delayable_busy_get+0x7c>)
   32854:	480e      	ldr	r0, [pc, #56]	; (32890 <k_work_delayable_busy_get+0x8c>)
   32856:	f003 fd1d 	bl	36294 <assert_print>
   3285a:	2194      	movs	r1, #148	; 0x94
   3285c:	4620      	mov	r0, r4
   3285e:	f003 fd12 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32862:	4c08      	ldr	r4, [pc, #32]	; (32884 <k_work_delayable_busy_get+0x80>)
   32864:	23c2      	movs	r3, #194	; 0xc2
   32866:	4622      	mov	r2, r4
   32868:	490a      	ldr	r1, [pc, #40]	; (32894 <k_work_delayable_busy_get+0x90>)
   3286a:	4808      	ldr	r0, [pc, #32]	; (3288c <k_work_delayable_busy_get+0x88>)
   3286c:	f003 fd12 	bl	36294 <assert_print>
   32870:	4631      	mov	r1, r6
   32872:	4809      	ldr	r0, [pc, #36]	; (32898 <k_work_delayable_busy_get+0x94>)
   32874:	f003 fd0e 	bl	36294 <assert_print>
   32878:	21c2      	movs	r1, #194	; 0xc2
   3287a:	4620      	mov	r0, r4
   3287c:	f003 fd03 	bl	36286 <assert_post_action>
   32880:	2000ca80 	.word	0x2000ca80
   32884:	00040b28 	.word	0x00040b28
   32888:	00040b88 	.word	0x00040b88
   3288c:	0003f72c 	.word	0x0003f72c
   32890:	00040ba0 	.word	0x00040ba0
   32894:	00040b58 	.word	0x00040b58
   32898:	00040b70 	.word	0x00040b70

0003289c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   3289c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3289e:	b083      	sub	sp, #12
   328a0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   328a2:	b309      	cbz	r1, 328e8 <k_work_schedule_for_queue+0x4c>
   328a4:	4617      	mov	r7, r2
   328a6:	461e      	mov	r6, r3
   328a8:	460d      	mov	r5, r1
	__asm__ volatile(
   328aa:	f04f 0320 	mov.w	r3, #32
   328ae:	f3ef 8411 	mrs	r4, BASEPRI
   328b2:	f383 8812 	msr	BASEPRI_MAX, r3
   328b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   328ba:	4825      	ldr	r0, [pc, #148]	; (32950 <k_work_schedule_for_queue+0xb4>)
   328bc:	f7fe fd9e 	bl	313fc <z_spin_lock_valid>
   328c0:	b1f8      	cbz	r0, 32902 <k_work_schedule_for_queue+0x66>
	z_spin_lock_set_owner(l);
   328c2:	4823      	ldr	r0, [pc, #140]	; (32950 <k_work_schedule_for_queue+0xb4>)
   328c4:	f7fe fdba 	bl	3143c <z_spin_lock_set_owner>
	return *flagp;
   328c8:	68eb      	ldr	r3, [r5, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   328ca:	f013 0f0e 	tst.w	r3, #14
   328ce:	d027      	beq.n	32920 <k_work_schedule_for_queue+0x84>
	int ret = 0;
   328d0:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   328d2:	481f      	ldr	r0, [pc, #124]	; (32950 <k_work_schedule_for_queue+0xb4>)
   328d4:	f7fe fda2 	bl	3141c <z_spin_unlock_valid>
   328d8:	b350      	cbz	r0, 32930 <k_work_schedule_for_queue+0x94>
	__asm__ volatile(
   328da:	f384 8811 	msr	BASEPRI, r4
   328de:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   328e2:	4628      	mov	r0, r5
   328e4:	b003      	add	sp, #12
   328e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   328e8:	4c1a      	ldr	r4, [pc, #104]	; (32954 <k_work_schedule_for_queue+0xb8>)
   328ea:	f240 33b7 	movw	r3, #951	; 0x3b7
   328ee:	4622      	mov	r2, r4
   328f0:	4919      	ldr	r1, [pc, #100]	; (32958 <k_work_schedule_for_queue+0xbc>)
   328f2:	481a      	ldr	r0, [pc, #104]	; (3295c <k_work_schedule_for_queue+0xc0>)
   328f4:	f003 fcce 	bl	36294 <assert_print>
   328f8:	f240 31b7 	movw	r1, #951	; 0x3b7
   328fc:	4620      	mov	r0, r4
   328fe:	f003 fcc2 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32902:	4c17      	ldr	r4, [pc, #92]	; (32960 <k_work_schedule_for_queue+0xc4>)
   32904:	2394      	movs	r3, #148	; 0x94
   32906:	4622      	mov	r2, r4
   32908:	4916      	ldr	r1, [pc, #88]	; (32964 <k_work_schedule_for_queue+0xc8>)
   3290a:	4814      	ldr	r0, [pc, #80]	; (3295c <k_work_schedule_for_queue+0xc0>)
   3290c:	f003 fcc2 	bl	36294 <assert_print>
   32910:	490f      	ldr	r1, [pc, #60]	; (32950 <k_work_schedule_for_queue+0xb4>)
   32912:	4815      	ldr	r0, [pc, #84]	; (32968 <k_work_schedule_for_queue+0xcc>)
   32914:	f003 fcbe 	bl	36294 <assert_print>
   32918:	2194      	movs	r1, #148	; 0x94
   3291a:	4620      	mov	r0, r4
   3291c:	f003 fcb3 	bl	36286 <assert_post_action>
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   32920:	463a      	mov	r2, r7
   32922:	4633      	mov	r3, r6
   32924:	4629      	mov	r1, r5
   32926:	a801      	add	r0, sp, #4
   32928:	f7ff fd64 	bl	323f4 <schedule_for_queue_locked>
   3292c:	4605      	mov	r5, r0
   3292e:	e7d0      	b.n	328d2 <k_work_schedule_for_queue+0x36>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32930:	4c0b      	ldr	r4, [pc, #44]	; (32960 <k_work_schedule_for_queue+0xc4>)
   32932:	23c2      	movs	r3, #194	; 0xc2
   32934:	4622      	mov	r2, r4
   32936:	490d      	ldr	r1, [pc, #52]	; (3296c <k_work_schedule_for_queue+0xd0>)
   32938:	4808      	ldr	r0, [pc, #32]	; (3295c <k_work_schedule_for_queue+0xc0>)
   3293a:	f003 fcab 	bl	36294 <assert_print>
   3293e:	4904      	ldr	r1, [pc, #16]	; (32950 <k_work_schedule_for_queue+0xb4>)
   32940:	480b      	ldr	r0, [pc, #44]	; (32970 <k_work_schedule_for_queue+0xd4>)
   32942:	f003 fca7 	bl	36294 <assert_print>
   32946:	21c2      	movs	r1, #194	; 0xc2
   32948:	4620      	mov	r0, r4
   3294a:	f003 fc9c 	bl	36286 <assert_post_action>
   3294e:	bf00      	nop
   32950:	2000ca80 	.word	0x2000ca80
   32954:	00046340 	.word	0x00046340
   32958:	0004644c 	.word	0x0004644c
   3295c:	0003f72c 	.word	0x0003f72c
   32960:	00040b28 	.word	0x00040b28
   32964:	00040b88 	.word	0x00040b88
   32968:	00040ba0 	.word	0x00040ba0
   3296c:	00040b58 	.word	0x00040b58
   32970:	00040b70 	.word	0x00040b70

00032974 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   32974:	b508      	push	{r3, lr}
   32976:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   32978:	4801      	ldr	r0, [pc, #4]	; (32980 <k_work_schedule+0xc>)
   3297a:	f7ff ff8f 	bl	3289c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   3297e:	bd08      	pop	{r3, pc}
   32980:	2000baf0 	.word	0x2000baf0

00032984 <k_work_reschedule_for_queue>:

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   32984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32988:	b082      	sub	sp, #8
   3298a:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(dwork != NULL);
   3298c:	b341      	cbz	r1, 329e0 <k_work_reschedule_for_queue+0x5c>
   3298e:	4617      	mov	r7, r2
   32990:	461e      	mov	r6, r3
   32992:	460c      	mov	r4, r1
	__asm__ volatile(
   32994:	f04f 0320 	mov.w	r3, #32
   32998:	f3ef 8811 	mrs	r8, BASEPRI
   3299c:	f383 8812 	msr	BASEPRI_MAX, r3
   329a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   329a4:	4824      	ldr	r0, [pc, #144]	; (32a38 <k_work_reschedule_for_queue+0xb4>)
   329a6:	f7fe fd29 	bl	313fc <z_spin_lock_valid>
   329aa:	b330      	cbz	r0, 329fa <k_work_reschedule_for_queue+0x76>
	z_spin_lock_set_owner(l);
   329ac:	4d22      	ldr	r5, [pc, #136]	; (32a38 <k_work_reschedule_for_queue+0xb4>)
   329ae:	4628      	mov	r0, r5
   329b0:	f7fe fd44 	bl	3143c <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   329b4:	4620      	mov	r0, r4
   329b6:	f00c f8a5 	bl	3eb04 <unschedule_locked>

	/* Schedule the work item with the new parameters. */
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   329ba:	463a      	mov	r2, r7
   329bc:	4633      	mov	r3, r6
   329be:	4621      	mov	r1, r4
   329c0:	a801      	add	r0, sp, #4
   329c2:	f7ff fd17 	bl	323f4 <schedule_for_queue_locked>
   329c6:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   329c8:	4628      	mov	r0, r5
   329ca:	f7fe fd27 	bl	3141c <z_spin_unlock_valid>
   329ce:	b318      	cbz	r0, 32a18 <k_work_reschedule_for_queue+0x94>
	__asm__ volatile(
   329d0:	f388 8811 	msr	BASEPRI, r8
   329d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   329d8:	4620      	mov	r0, r4
   329da:	b002      	add	sp, #8
   329dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   329e0:	4c16      	ldr	r4, [pc, #88]	; (32a3c <k_work_reschedule_for_queue+0xb8>)
   329e2:	f240 33db 	movw	r3, #987	; 0x3db
   329e6:	4622      	mov	r2, r4
   329e8:	4915      	ldr	r1, [pc, #84]	; (32a40 <k_work_reschedule_for_queue+0xbc>)
   329ea:	4816      	ldr	r0, [pc, #88]	; (32a44 <k_work_reschedule_for_queue+0xc0>)
   329ec:	f003 fc52 	bl	36294 <assert_print>
   329f0:	f240 31db 	movw	r1, #987	; 0x3db
   329f4:	4620      	mov	r0, r4
   329f6:	f003 fc46 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   329fa:	4c13      	ldr	r4, [pc, #76]	; (32a48 <k_work_reschedule_for_queue+0xc4>)
   329fc:	2394      	movs	r3, #148	; 0x94
   329fe:	4622      	mov	r2, r4
   32a00:	4912      	ldr	r1, [pc, #72]	; (32a4c <k_work_reschedule_for_queue+0xc8>)
   32a02:	4810      	ldr	r0, [pc, #64]	; (32a44 <k_work_reschedule_for_queue+0xc0>)
   32a04:	f003 fc46 	bl	36294 <assert_print>
   32a08:	490b      	ldr	r1, [pc, #44]	; (32a38 <k_work_reschedule_for_queue+0xb4>)
   32a0a:	4811      	ldr	r0, [pc, #68]	; (32a50 <k_work_reschedule_for_queue+0xcc>)
   32a0c:	f003 fc42 	bl	36294 <assert_print>
   32a10:	2194      	movs	r1, #148	; 0x94
   32a12:	4620      	mov	r0, r4
   32a14:	f003 fc37 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32a18:	4c0b      	ldr	r4, [pc, #44]	; (32a48 <k_work_reschedule_for_queue+0xc4>)
   32a1a:	23c2      	movs	r3, #194	; 0xc2
   32a1c:	4622      	mov	r2, r4
   32a1e:	490d      	ldr	r1, [pc, #52]	; (32a54 <k_work_reschedule_for_queue+0xd0>)
   32a20:	4808      	ldr	r0, [pc, #32]	; (32a44 <k_work_reschedule_for_queue+0xc0>)
   32a22:	f003 fc37 	bl	36294 <assert_print>
   32a26:	4629      	mov	r1, r5
   32a28:	480b      	ldr	r0, [pc, #44]	; (32a58 <k_work_reschedule_for_queue+0xd4>)
   32a2a:	f003 fc33 	bl	36294 <assert_print>
   32a2e:	21c2      	movs	r1, #194	; 0xc2
   32a30:	4620      	mov	r0, r4
   32a32:	f003 fc28 	bl	36286 <assert_post_action>
   32a36:	bf00      	nop
   32a38:	2000ca80 	.word	0x2000ca80
   32a3c:	00046340 	.word	0x00046340
   32a40:	0004644c 	.word	0x0004644c
   32a44:	0003f72c 	.word	0x0003f72c
   32a48:	00040b28 	.word	0x00040b28
   32a4c:	00040b88 	.word	0x00040b88
   32a50:	00040ba0 	.word	0x00040ba0
   32a54:	00040b58 	.word	0x00040b58
   32a58:	00040b70 	.word	0x00040b70

00032a5c <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   32a5c:	b508      	push	{r3, lr}
   32a5e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   32a60:	4801      	ldr	r0, [pc, #4]	; (32a68 <k_work_reschedule+0xc>)
   32a62:	f7ff ff8f 	bl	32984 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   32a66:	bd08      	pop	{r3, pc}
   32a68:	2000baf0 	.word	0x2000baf0

00032a6c <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   32a6c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   32a6e:	b1f8      	cbz	r0, 32ab0 <k_work_cancel_delayable+0x44>
   32a70:	4604      	mov	r4, r0
	__asm__ volatile(
   32a72:	f04f 0220 	mov.w	r2, #32
   32a76:	f3ef 8311 	mrs	r3, BASEPRI
   32a7a:	f382 8812 	msr	BASEPRI_MAX, r2
   32a7e:	f3bf 8f6f 	isb	sy
   32a82:	461d      	mov	r5, r3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32a84:	4820      	ldr	r0, [pc, #128]	; (32b08 <k_work_cancel_delayable+0x9c>)
   32a86:	f7fe fcb9 	bl	313fc <z_spin_lock_valid>
   32a8a:	b1f0      	cbz	r0, 32aca <k_work_cancel_delayable+0x5e>
	z_spin_lock_set_owner(l);
   32a8c:	4e1e      	ldr	r6, [pc, #120]	; (32b08 <k_work_cancel_delayable+0x9c>)
   32a8e:	4630      	mov	r0, r6
   32a90:	f7fe fcd4 	bl	3143c <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   32a94:	4620      	mov	r0, r4
   32a96:	f00c f844 	bl	3eb22 <cancel_delayable_async_locked>
   32a9a:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32a9c:	4630      	mov	r0, r6
   32a9e:	f7fe fcbd 	bl	3141c <z_spin_unlock_valid>
   32aa2:	b308      	cbz	r0, 32ae8 <k_work_cancel_delayable+0x7c>
	__asm__ volatile(
   32aa4:	f385 8811 	msr	BASEPRI, r5
   32aa8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   32aac:	4620      	mov	r0, r4
   32aae:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   32ab0:	4c16      	ldr	r4, [pc, #88]	; (32b0c <k_work_cancel_delayable+0xa0>)
   32ab2:	f240 33fd 	movw	r3, #1021	; 0x3fd
   32ab6:	4622      	mov	r2, r4
   32ab8:	4915      	ldr	r1, [pc, #84]	; (32b10 <k_work_cancel_delayable+0xa4>)
   32aba:	4816      	ldr	r0, [pc, #88]	; (32b14 <k_work_cancel_delayable+0xa8>)
   32abc:	f003 fbea 	bl	36294 <assert_print>
   32ac0:	f240 31fd 	movw	r1, #1021	; 0x3fd
   32ac4:	4620      	mov	r0, r4
   32ac6:	f003 fbde 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32aca:	4c13      	ldr	r4, [pc, #76]	; (32b18 <k_work_cancel_delayable+0xac>)
   32acc:	2394      	movs	r3, #148	; 0x94
   32ace:	4622      	mov	r2, r4
   32ad0:	4912      	ldr	r1, [pc, #72]	; (32b1c <k_work_cancel_delayable+0xb0>)
   32ad2:	4810      	ldr	r0, [pc, #64]	; (32b14 <k_work_cancel_delayable+0xa8>)
   32ad4:	f003 fbde 	bl	36294 <assert_print>
   32ad8:	490b      	ldr	r1, [pc, #44]	; (32b08 <k_work_cancel_delayable+0x9c>)
   32ada:	4811      	ldr	r0, [pc, #68]	; (32b20 <k_work_cancel_delayable+0xb4>)
   32adc:	f003 fbda 	bl	36294 <assert_print>
   32ae0:	2194      	movs	r1, #148	; 0x94
   32ae2:	4620      	mov	r0, r4
   32ae4:	f003 fbcf 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32ae8:	4c0b      	ldr	r4, [pc, #44]	; (32b18 <k_work_cancel_delayable+0xac>)
   32aea:	23c2      	movs	r3, #194	; 0xc2
   32aec:	4622      	mov	r2, r4
   32aee:	490d      	ldr	r1, [pc, #52]	; (32b24 <k_work_cancel_delayable+0xb8>)
   32af0:	4808      	ldr	r0, [pc, #32]	; (32b14 <k_work_cancel_delayable+0xa8>)
   32af2:	f003 fbcf 	bl	36294 <assert_print>
   32af6:	4631      	mov	r1, r6
   32af8:	480b      	ldr	r0, [pc, #44]	; (32b28 <k_work_cancel_delayable+0xbc>)
   32afa:	f003 fbcb 	bl	36294 <assert_print>
   32afe:	21c2      	movs	r1, #194	; 0xc2
   32b00:	4620      	mov	r0, r4
   32b02:	f003 fbc0 	bl	36286 <assert_post_action>
   32b06:	bf00      	nop
   32b08:	2000ca80 	.word	0x2000ca80
   32b0c:	00046340 	.word	0x00046340
   32b10:	0004644c 	.word	0x0004644c
   32b14:	0003f72c 	.word	0x0003f72c
   32b18:	00040b28 	.word	0x00040b28
   32b1c:	00040b88 	.word	0x00040b88
   32b20:	00040ba0 	.word	0x00040ba0
   32b24:	00040b58 	.word	0x00040b58
   32b28:	00040b70 	.word	0x00040b70

00032b2c <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   32b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   32b30:	2800      	cmp	r0, #0
   32b32:	d030      	beq.n	32b96 <k_work_cancel_delayable_sync+0x6a>
   32b34:	460c      	mov	r4, r1
   32b36:	4607      	mov	r7, r0
	__ASSERT_NO_MSG(sync != NULL);
   32b38:	2900      	cmp	r1, #0
   32b3a:	d039      	beq.n	32bb0 <k_work_cancel_delayable_sync+0x84>
	__ASSERT_NO_MSG(!k_is_in_isr());
   32b3c:	f00b febb 	bl	3e8b6 <k_is_in_isr>
   32b40:	4606      	mov	r6, r0
   32b42:	2800      	cmp	r0, #0
   32b44:	d141      	bne.n	32bca <k_work_cancel_delayable_sync+0x9e>
	__asm__ volatile(
   32b46:	f04f 0320 	mov.w	r3, #32
   32b4a:	f3ef 8511 	mrs	r5, BASEPRI
   32b4e:	f383 8812 	msr	BASEPRI_MAX, r3
   32b52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32b56:	483b      	ldr	r0, [pc, #236]	; (32c44 <k_work_cancel_delayable_sync+0x118>)
   32b58:	f7fe fc50 	bl	313fc <z_spin_lock_valid>
   32b5c:	2800      	cmp	r0, #0
   32b5e:	d041      	beq.n	32be4 <k_work_cancel_delayable_sync+0xb8>
	z_spin_lock_set_owner(l);
   32b60:	4838      	ldr	r0, [pc, #224]	; (32c44 <k_work_cancel_delayable_sync+0x118>)
   32b62:	f7fe fc6b 	bl	3143c <z_spin_lock_set_owner>
	return *flagp;
   32b66:	68fb      	ldr	r3, [r7, #12]
   32b68:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   32b6c:	2b00      	cmp	r3, #0
   32b6e:	bf14      	ite	ne
   32b70:	f04f 0801 	movne.w	r8, #1
   32b74:	f04f 0800 	moveq.w	r8, #0
	bool need_wait = false;

	if (pending) {
   32b78:	d143      	bne.n	32c02 <k_work_cancel_delayable_sync+0xd6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32b7a:	4832      	ldr	r0, [pc, #200]	; (32c44 <k_work_cancel_delayable_sync+0x118>)
   32b7c:	f7fe fc4e 	bl	3141c <z_spin_unlock_valid>
   32b80:	2800      	cmp	r0, #0
   32b82:	d047      	beq.n	32c14 <k_work_cancel_delayable_sync+0xe8>
	__asm__ volatile(
   32b84:	f385 8811 	msr	BASEPRI, r5
   32b88:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   32b8c:	2e00      	cmp	r6, #0
   32b8e:	d150      	bne.n	32c32 <k_work_cancel_delayable_sync+0x106>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   32b90:	4640      	mov	r0, r8
   32b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(dwork != NULL);
   32b96:	4c2c      	ldr	r4, [pc, #176]	; (32c48 <k_work_cancel_delayable_sync+0x11c>)
   32b98:	f240 430e 	movw	r3, #1038	; 0x40e
   32b9c:	4622      	mov	r2, r4
   32b9e:	492b      	ldr	r1, [pc, #172]	; (32c4c <k_work_cancel_delayable_sync+0x120>)
   32ba0:	482b      	ldr	r0, [pc, #172]	; (32c50 <k_work_cancel_delayable_sync+0x124>)
   32ba2:	f003 fb77 	bl	36294 <assert_print>
   32ba6:	f240 410e 	movw	r1, #1038	; 0x40e
   32baa:	4620      	mov	r0, r4
   32bac:	f003 fb6b 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   32bb0:	4c25      	ldr	r4, [pc, #148]	; (32c48 <k_work_cancel_delayable_sync+0x11c>)
   32bb2:	f240 430f 	movw	r3, #1039	; 0x40f
   32bb6:	4622      	mov	r2, r4
   32bb8:	4926      	ldr	r1, [pc, #152]	; (32c54 <k_work_cancel_delayable_sync+0x128>)
   32bba:	4825      	ldr	r0, [pc, #148]	; (32c50 <k_work_cancel_delayable_sync+0x124>)
   32bbc:	f003 fb6a 	bl	36294 <assert_print>
   32bc0:	f240 410f 	movw	r1, #1039	; 0x40f
   32bc4:	4620      	mov	r0, r4
   32bc6:	f003 fb5e 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   32bca:	4c1f      	ldr	r4, [pc, #124]	; (32c48 <k_work_cancel_delayable_sync+0x11c>)
   32bcc:	f44f 6382 	mov.w	r3, #1040	; 0x410
   32bd0:	4622      	mov	r2, r4
   32bd2:	4921      	ldr	r1, [pc, #132]	; (32c58 <k_work_cancel_delayable_sync+0x12c>)
   32bd4:	481e      	ldr	r0, [pc, #120]	; (32c50 <k_work_cancel_delayable_sync+0x124>)
   32bd6:	f003 fb5d 	bl	36294 <assert_print>
   32bda:	f44f 6182 	mov.w	r1, #1040	; 0x410
   32bde:	4620      	mov	r0, r4
   32be0:	f003 fb51 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32be4:	4c1d      	ldr	r4, [pc, #116]	; (32c5c <k_work_cancel_delayable_sync+0x130>)
   32be6:	2394      	movs	r3, #148	; 0x94
   32be8:	4622      	mov	r2, r4
   32bea:	491d      	ldr	r1, [pc, #116]	; (32c60 <k_work_cancel_delayable_sync+0x134>)
   32bec:	4818      	ldr	r0, [pc, #96]	; (32c50 <k_work_cancel_delayable_sync+0x124>)
   32bee:	f003 fb51 	bl	36294 <assert_print>
   32bf2:	4914      	ldr	r1, [pc, #80]	; (32c44 <k_work_cancel_delayable_sync+0x118>)
   32bf4:	481b      	ldr	r0, [pc, #108]	; (32c64 <k_work_cancel_delayable_sync+0x138>)
   32bf6:	f003 fb4d 	bl	36294 <assert_print>
   32bfa:	2194      	movs	r1, #148	; 0x94
   32bfc:	4620      	mov	r0, r4
   32bfe:	f003 fb42 	bl	36286 <assert_post_action>
		(void)cancel_delayable_async_locked(dwork);
   32c02:	4638      	mov	r0, r7
   32c04:	f00b ff8d 	bl	3eb22 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   32c08:	4621      	mov	r1, r4
   32c0a:	4638      	mov	r0, r7
   32c0c:	f00b ff6b 	bl	3eae6 <cancel_sync_locked>
   32c10:	4606      	mov	r6, r0
   32c12:	e7b2      	b.n	32b7a <k_work_cancel_delayable_sync+0x4e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32c14:	4c11      	ldr	r4, [pc, #68]	; (32c5c <k_work_cancel_delayable_sync+0x130>)
   32c16:	23c2      	movs	r3, #194	; 0xc2
   32c18:	4622      	mov	r2, r4
   32c1a:	4913      	ldr	r1, [pc, #76]	; (32c68 <k_work_cancel_delayable_sync+0x13c>)
   32c1c:	480c      	ldr	r0, [pc, #48]	; (32c50 <k_work_cancel_delayable_sync+0x124>)
   32c1e:	f003 fb39 	bl	36294 <assert_print>
   32c22:	4908      	ldr	r1, [pc, #32]	; (32c44 <k_work_cancel_delayable_sync+0x118>)
   32c24:	4811      	ldr	r0, [pc, #68]	; (32c6c <k_work_cancel_delayable_sync+0x140>)
   32c26:	f003 fb35 	bl	36294 <assert_print>
   32c2a:	21c2      	movs	r1, #194	; 0xc2
   32c2c:	4620      	mov	r0, r4
   32c2e:	f003 fb2a 	bl	36286 <assert_post_action>
		k_sem_take(&canceller->sem, K_FOREVER);
   32c32:	f104 0008 	add.w	r0, r4, #8
	return z_impl_k_sem_take(sem, timeout);
   32c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   32c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32c3e:	f7ff f917 	bl	31e70 <z_impl_k_sem_take>
   32c42:	e7a5      	b.n	32b90 <k_work_cancel_delayable_sync+0x64>
   32c44:	2000ca80 	.word	0x2000ca80
   32c48:	00046340 	.word	0x00046340
   32c4c:	0004644c 	.word	0x0004644c
   32c50:	0003f72c 	.word	0x0003f72c
   32c54:	000463f4 	.word	0x000463f4
   32c58:	0004327c 	.word	0x0004327c
   32c5c:	00040b28 	.word	0x00040b28
   32c60:	00040b88 	.word	0x00040b88
   32c64:	00040ba0 	.word	0x00040ba0
   32c68:	00040b58 	.word	0x00040b58
   32c6c:	00040b70 	.word	0x00040b70

00032c70 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   32c70:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
   32c72:	2b7f      	cmp	r3, #127	; 0x7f
   32c74:	d80e      	bhi.n	32c94 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
   32c76:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
   32c78:	f013 0f1f 	tst.w	r3, #31
   32c7c:	d10c      	bne.n	32c98 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   32c7e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   32c82:	4b08      	ldr	r3, [pc, #32]	; (32ca4 <sliceable+0x34>)
   32c84:	681b      	ldr	r3, [r3, #0]
   32c86:	429a      	cmp	r2, r3
   32c88:	db08      	blt.n	32c9c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   32c8a:	4b07      	ldr	r3, [pc, #28]	; (32ca8 <sliceable+0x38>)
   32c8c:	4298      	cmp	r0, r3
   32c8e:	d007      	beq.n	32ca0 <sliceable+0x30>
   32c90:	2001      	movs	r0, #1
   32c92:	4770      	bx	lr
   32c94:	2000      	movs	r0, #0
   32c96:	4770      	bx	lr
   32c98:	2000      	movs	r0, #0
   32c9a:	4770      	bx	lr
   32c9c:	2000      	movs	r0, #0
   32c9e:	4770      	bx	lr
   32ca0:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   32ca2:	4770      	bx	lr
   32ca4:	2000ca88 	.word	0x2000ca88
   32ca8:	2000b980 	.word	0x2000b980

00032cac <pended_on_thread>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on_thread(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   32cac:	6880      	ldr	r0, [r0, #8]
   32cae:	b100      	cbz	r0, 32cb2 <pended_on_thread+0x6>

	return thread->base.pended_on;
}
   32cb0:	4770      	bx	lr
{
   32cb2:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(thread->base.pended_on);
   32cb4:	4c06      	ldr	r4, [pc, #24]	; (32cd0 <pended_on_thread+0x24>)
   32cb6:	f240 23d6 	movw	r3, #726	; 0x2d6
   32cba:	4622      	mov	r2, r4
   32cbc:	4905      	ldr	r1, [pc, #20]	; (32cd4 <pended_on_thread+0x28>)
   32cbe:	4806      	ldr	r0, [pc, #24]	; (32cd8 <pended_on_thread+0x2c>)
   32cc0:	f003 fae8 	bl	36294 <assert_print>
   32cc4:	f240 21d6 	movw	r1, #726	; 0x2d6
   32cc8:	4620      	mov	r0, r4
   32cca:	f003 fadc 	bl	36286 <assert_post_action>
   32cce:	bf00      	nop
   32cd0:	00046464 	.word	0x00046464
   32cd4:	00046488 	.word	0x00046488
   32cd8:	0003f72c 	.word	0x0003f72c

00032cdc <z_sched_lock>:
{
   32cdc:	b510      	push	{r4, lr}
   32cde:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   32ce2:	b93b      	cbnz	r3, 32cf4 <z_sched_lock+0x18>
	__ASSERT(_current->base.sched_locked != 1U, "");
   32ce4:	4b11      	ldr	r3, [pc, #68]	; (32d2c <z_sched_lock+0x50>)
   32ce6:	689a      	ldr	r2, [r3, #8]
   32ce8:	7bd3      	ldrb	r3, [r2, #15]
   32cea:	2b01      	cmp	r3, #1
   32cec:	d010      	beq.n	32d10 <z_sched_lock+0x34>
	--_current->base.sched_locked;
   32cee:	3b01      	subs	r3, #1
   32cf0:	73d3      	strb	r3, [r2, #15]
}
   32cf2:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
   32cf4:	4c0e      	ldr	r4, [pc, #56]	; (32d30 <z_sched_lock+0x54>)
   32cf6:	23fd      	movs	r3, #253	; 0xfd
   32cf8:	4622      	mov	r2, r4
   32cfa:	490e      	ldr	r1, [pc, #56]	; (32d34 <z_sched_lock+0x58>)
   32cfc:	480e      	ldr	r0, [pc, #56]	; (32d38 <z_sched_lock+0x5c>)
   32cfe:	f003 fac9 	bl	36294 <assert_print>
   32d02:	480e      	ldr	r0, [pc, #56]	; (32d3c <z_sched_lock+0x60>)
   32d04:	f003 fac6 	bl	36294 <assert_print>
   32d08:	21fd      	movs	r1, #253	; 0xfd
   32d0a:	4620      	mov	r0, r4
   32d0c:	f003 fabb 	bl	36286 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   32d10:	4c07      	ldr	r4, [pc, #28]	; (32d30 <z_sched_lock+0x54>)
   32d12:	23fe      	movs	r3, #254	; 0xfe
   32d14:	4622      	mov	r2, r4
   32d16:	490a      	ldr	r1, [pc, #40]	; (32d40 <z_sched_lock+0x64>)
   32d18:	4807      	ldr	r0, [pc, #28]	; (32d38 <z_sched_lock+0x5c>)
   32d1a:	f003 fabb 	bl	36294 <assert_print>
   32d1e:	4807      	ldr	r0, [pc, #28]	; (32d3c <z_sched_lock+0x60>)
   32d20:	f003 fab8 	bl	36294 <assert_print>
   32d24:	21fe      	movs	r1, #254	; 0xfe
   32d26:	4620      	mov	r0, r4
   32d28:	f003 faad 	bl	36286 <assert_post_action>
   32d2c:	2000ca40 	.word	0x2000ca40
   32d30:	000464a0 	.word	0x000464a0
   32d34:	000461a8 	.word	0x000461a8
   32d38:	0003f72c 	.word	0x0003f72c
   32d3c:	00044634 	.word	0x00044634
   32d40:	000464cc 	.word	0x000464cc

00032d44 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   32d44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   32d48:	bf08      	it	eq
   32d4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   32d4e:	d100      	bne.n	32d52 <add_thread_timeout+0xe>
   32d50:	4770      	bx	lr
{
   32d52:	b508      	push	{r3, lr}
   32d54:	4902      	ldr	r1, [pc, #8]	; (32d60 <add_thread_timeout+0x1c>)
   32d56:	3018      	adds	r0, #24
   32d58:	f001 fb66 	bl	34428 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
   32d5c:	bd08      	pop	{r3, pc}
   32d5e:	bf00      	nop
   32d60:	00033575 	.word	0x00033575

00032d64 <z_reset_time_slice>:
{
   32d64:	b510      	push	{r4, lr}
	int ret = slice_ticks;
   32d66:	4b07      	ldr	r3, [pc, #28]	; (32d84 <z_reset_time_slice+0x20>)
   32d68:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
   32d6a:	b904      	cbnz	r4, 32d6e <z_reset_time_slice+0xa>
}
   32d6c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   32d6e:	f7fa fadd 	bl	2d32c <sys_clock_elapsed>
   32d72:	4404      	add	r4, r0
   32d74:	4b04      	ldr	r3, [pc, #16]	; (32d88 <z_reset_time_slice+0x24>)
   32d76:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   32d78:	2100      	movs	r1, #0
   32d7a:	4b02      	ldr	r3, [pc, #8]	; (32d84 <z_reset_time_slice+0x20>)
   32d7c:	6818      	ldr	r0, [r3, #0]
   32d7e:	f001 fcd1 	bl	34724 <z_set_timeout_expiry>
}
   32d82:	e7f3      	b.n	32d6c <z_reset_time_slice+0x8>
   32d84:	2000ca8c 	.word	0x2000ca8c
   32d88:	2000ca40 	.word	0x2000ca40

00032d8c <k_sched_time_slice_set>:
{
   32d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   32d8e:	4604      	mov	r4, r0
   32d90:	460d      	mov	r5, r1
	__asm__ volatile(
   32d92:	f04f 0320 	mov.w	r3, #32
   32d96:	f3ef 8611 	mrs	r6, BASEPRI
   32d9a:	f383 8812 	msr	BASEPRI_MAX, r3
   32d9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32da2:	4828      	ldr	r0, [pc, #160]	; (32e44 <k_sched_time_slice_set+0xb8>)
   32da4:	f7fe fb2a 	bl	313fc <z_spin_lock_valid>
   32da8:	b120      	cbz	r0, 32db4 <k_sched_time_slice_set+0x28>
   32daa:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
   32dac:	4825      	ldr	r0, [pc, #148]	; (32e44 <k_sched_time_slice_set+0xb8>)
   32dae:	f7fe fb45 	bl	3143c <z_spin_lock_set_owner>
	return k;
   32db2:	e021      	b.n	32df8 <k_sched_time_slice_set+0x6c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32db4:	4c24      	ldr	r4, [pc, #144]	; (32e48 <k_sched_time_slice_set+0xbc>)
   32db6:	2394      	movs	r3, #148	; 0x94
   32db8:	4622      	mov	r2, r4
   32dba:	4924      	ldr	r1, [pc, #144]	; (32e4c <k_sched_time_slice_set+0xc0>)
   32dbc:	4824      	ldr	r0, [pc, #144]	; (32e50 <k_sched_time_slice_set+0xc4>)
   32dbe:	f003 fa69 	bl	36294 <assert_print>
   32dc2:	4920      	ldr	r1, [pc, #128]	; (32e44 <k_sched_time_slice_set+0xb8>)
   32dc4:	4823      	ldr	r0, [pc, #140]	; (32e54 <k_sched_time_slice_set+0xc8>)
   32dc6:	f003 fa65 	bl	36294 <assert_print>
   32dca:	2194      	movs	r1, #148	; 0x94
   32dcc:	4620      	mov	r0, r4
   32dce:	f003 fa5a 	bl	36286 <assert_post_action>
			slice_ticks = MAX(2, slice_ticks);
   32dd2:	2802      	cmp	r0, #2
   32dd4:	bfb8      	it	lt
   32dd6:	2002      	movlt	r0, #2
   32dd8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   32dda:	4b1f      	ldr	r3, [pc, #124]	; (32e58 <k_sched_time_slice_set+0xcc>)
   32ddc:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   32dde:	4b1f      	ldr	r3, [pc, #124]	; (32e5c <k_sched_time_slice_set+0xd0>)
   32de0:	6898      	ldr	r0, [r3, #8]
   32de2:	f7ff ffbf 	bl	32d64 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32de6:	4817      	ldr	r0, [pc, #92]	; (32e44 <k_sched_time_slice_set+0xb8>)
   32de8:	f7fe fb18 	bl	3141c <z_spin_unlock_valid>
   32dec:	b1d0      	cbz	r0, 32e24 <k_sched_time_slice_set+0x98>
	__asm__ volatile(
   32dee:	f386 8811 	msr	BASEPRI, r6
   32df2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   32df6:	2701      	movs	r7, #1
   32df8:	bb1f      	cbnz	r7, 32e42 <k_sched_time_slice_set+0xb6>
		_current_cpu->slice_ticks = 0;
   32dfa:	4b18      	ldr	r3, [pc, #96]	; (32e5c <k_sched_time_slice_set+0xd0>)
   32dfc:	2200      	movs	r2, #0
   32dfe:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   32e00:	0c61      	lsrs	r1, r4, #17
   32e02:	03e0      	lsls	r0, r4, #15
   32e04:	f240 33e7 	movw	r3, #999	; 0x3e7
   32e08:	18c0      	adds	r0, r0, r3
   32e0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   32e0e:	f04f 0300 	mov.w	r3, #0
   32e12:	f141 0100 	adc.w	r1, r1, #0
   32e16:	f7dd f99f 	bl	10158 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   32e1a:	4b11      	ldr	r3, [pc, #68]	; (32e60 <k_sched_time_slice_set+0xd4>)
   32e1c:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   32e1e:	2c00      	cmp	r4, #0
   32e20:	dcd7      	bgt.n	32dd2 <k_sched_time_slice_set+0x46>
   32e22:	e7da      	b.n	32dda <k_sched_time_slice_set+0x4e>
   32e24:	4c08      	ldr	r4, [pc, #32]	; (32e48 <k_sched_time_slice_set+0xbc>)
   32e26:	23c2      	movs	r3, #194	; 0xc2
   32e28:	4622      	mov	r2, r4
   32e2a:	490e      	ldr	r1, [pc, #56]	; (32e64 <k_sched_time_slice_set+0xd8>)
   32e2c:	4808      	ldr	r0, [pc, #32]	; (32e50 <k_sched_time_slice_set+0xc4>)
   32e2e:	f003 fa31 	bl	36294 <assert_print>
   32e32:	4904      	ldr	r1, [pc, #16]	; (32e44 <k_sched_time_slice_set+0xb8>)
   32e34:	480c      	ldr	r0, [pc, #48]	; (32e68 <k_sched_time_slice_set+0xdc>)
   32e36:	f003 fa2d 	bl	36294 <assert_print>
   32e3a:	21c2      	movs	r1, #194	; 0xc2
   32e3c:	4620      	mov	r0, r4
   32e3e:	f003 fa22 	bl	36286 <assert_post_action>
}
   32e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   32e44:	2000ca90 	.word	0x2000ca90
   32e48:	00040b28 	.word	0x00040b28
   32e4c:	00040b88 	.word	0x00040b88
   32e50:	0003f72c 	.word	0x0003f72c
   32e54:	00040ba0 	.word	0x00040ba0
   32e58:	2000ca88 	.word	0x2000ca88
   32e5c:	2000ca40 	.word	0x2000ca40
   32e60:	2000ca8c 	.word	0x2000ca8c
   32e64:	00040b58 	.word	0x00040b58
   32e68:	00040b70 	.word	0x00040b70

00032e6c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   32e6c:	b570      	push	{r4, r5, r6, lr}
   32e6e:	4605      	mov	r5, r0
	__asm__ volatile(
   32e70:	f04f 0320 	mov.w	r3, #32
   32e74:	f3ef 8611 	mrs	r6, BASEPRI
   32e78:	f383 8812 	msr	BASEPRI_MAX, r3
   32e7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32e80:	481a      	ldr	r0, [pc, #104]	; (32eec <z_unpend_thread_no_timeout+0x80>)
   32e82:	f7fe fabb 	bl	313fc <z_spin_lock_valid>
   32e86:	b188      	cbz	r0, 32eac <z_unpend_thread_no_timeout+0x40>
   32e88:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   32e8a:	4818      	ldr	r0, [pc, #96]	; (32eec <z_unpend_thread_no_timeout+0x80>)
   32e8c:	f7fe fad6 	bl	3143c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   32e90:	bb54      	cbnz	r4, 32ee8 <z_unpend_thread_no_timeout+0x7c>
		unpend_thread_no_timeout(thread);
   32e92:	4628      	mov	r0, r5
   32e94:	f00b fe7d 	bl	3eb92 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32e98:	4814      	ldr	r0, [pc, #80]	; (32eec <z_unpend_thread_no_timeout+0x80>)
   32e9a:	f7fe fabf 	bl	3141c <z_spin_unlock_valid>
   32e9e:	b1a0      	cbz	r0, 32eca <z_unpend_thread_no_timeout+0x5e>
	__asm__ volatile(
   32ea0:	f386 8811 	msr	BASEPRI, r6
   32ea4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   32ea8:	2401      	movs	r4, #1
   32eaa:	e7f1      	b.n	32e90 <z_unpend_thread_no_timeout+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32eac:	4c10      	ldr	r4, [pc, #64]	; (32ef0 <z_unpend_thread_no_timeout+0x84>)
   32eae:	2394      	movs	r3, #148	; 0x94
   32eb0:	4622      	mov	r2, r4
   32eb2:	4910      	ldr	r1, [pc, #64]	; (32ef4 <z_unpend_thread_no_timeout+0x88>)
   32eb4:	4810      	ldr	r0, [pc, #64]	; (32ef8 <z_unpend_thread_no_timeout+0x8c>)
   32eb6:	f003 f9ed 	bl	36294 <assert_print>
   32eba:	490c      	ldr	r1, [pc, #48]	; (32eec <z_unpend_thread_no_timeout+0x80>)
   32ebc:	480f      	ldr	r0, [pc, #60]	; (32efc <z_unpend_thread_no_timeout+0x90>)
   32ebe:	f003 f9e9 	bl	36294 <assert_print>
   32ec2:	2194      	movs	r1, #148	; 0x94
   32ec4:	4620      	mov	r0, r4
   32ec6:	f003 f9de 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32eca:	4c09      	ldr	r4, [pc, #36]	; (32ef0 <z_unpend_thread_no_timeout+0x84>)
   32ecc:	23c2      	movs	r3, #194	; 0xc2
   32ece:	4622      	mov	r2, r4
   32ed0:	490b      	ldr	r1, [pc, #44]	; (32f00 <z_unpend_thread_no_timeout+0x94>)
   32ed2:	4809      	ldr	r0, [pc, #36]	; (32ef8 <z_unpend_thread_no_timeout+0x8c>)
   32ed4:	f003 f9de 	bl	36294 <assert_print>
   32ed8:	4904      	ldr	r1, [pc, #16]	; (32eec <z_unpend_thread_no_timeout+0x80>)
   32eda:	480a      	ldr	r0, [pc, #40]	; (32f04 <z_unpend_thread_no_timeout+0x98>)
   32edc:	f003 f9da 	bl	36294 <assert_print>
   32ee0:	21c2      	movs	r1, #194	; 0xc2
   32ee2:	4620      	mov	r0, r4
   32ee4:	f003 f9cf 	bl	36286 <assert_post_action>
	}
}
   32ee8:	bd70      	pop	{r4, r5, r6, pc}
   32eea:	bf00      	nop
   32eec:	2000ca90 	.word	0x2000ca90
   32ef0:	00040b28 	.word	0x00040b28
   32ef4:	00040b88 	.word	0x00040b88
   32ef8:	0003f72c 	.word	0x0003f72c
   32efc:	00040ba0 	.word	0x00040ba0
   32f00:	00040b58 	.word	0x00040b58
   32f04:	00040b70 	.word	0x00040b70

00032f08 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   32f08:	b570      	push	{r4, r5, r6, lr}
   32f0a:	4605      	mov	r5, r0
	if (resched(key.key) && need_swap()) {
   32f0c:	460e      	mov	r6, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   32f0e:	b9e9      	cbnz	r1, 32f4c <z_reschedule+0x44>
   32f10:	f3ef 8305 	mrs	r3, IPSR
   32f14:	b9d3      	cbnz	r3, 32f4c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   32f16:	4b19      	ldr	r3, [pc, #100]	; (32f7c <z_reschedule+0x74>)
   32f18:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   32f1a:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   32f1c:	429a      	cmp	r2, r3
   32f1e:	d015      	beq.n	32f4c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32f20:	f7fe fa7c 	bl	3141c <z_spin_unlock_valid>
   32f24:	b118      	cbz	r0, 32f2e <z_reschedule+0x26>
	ret = arch_swap(key);
   32f26:	4630      	mov	r0, r6
   32f28:	f7e6 fa96 	bl	19458 <arch_swap>
		z_swap(lock, key);
   32f2c:	e016      	b.n	32f5c <z_reschedule+0x54>
   32f2e:	4c14      	ldr	r4, [pc, #80]	; (32f80 <z_reschedule+0x78>)
   32f30:	23e1      	movs	r3, #225	; 0xe1
   32f32:	4622      	mov	r2, r4
   32f34:	4913      	ldr	r1, [pc, #76]	; (32f84 <z_reschedule+0x7c>)
   32f36:	4814      	ldr	r0, [pc, #80]	; (32f88 <z_reschedule+0x80>)
   32f38:	f003 f9ac 	bl	36294 <assert_print>
   32f3c:	4629      	mov	r1, r5
   32f3e:	4813      	ldr	r0, [pc, #76]	; (32f8c <z_reschedule+0x84>)
   32f40:	f003 f9a8 	bl	36294 <assert_print>
   32f44:	21e1      	movs	r1, #225	; 0xe1
   32f46:	4620      	mov	r0, r4
   32f48:	f003 f99d 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32f4c:	4628      	mov	r0, r5
   32f4e:	f7fe fa65 	bl	3141c <z_spin_unlock_valid>
   32f52:	b120      	cbz	r0, 32f5e <z_reschedule+0x56>
   32f54:	f386 8811 	msr	BASEPRI, r6
   32f58:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   32f5c:	bd70      	pop	{r4, r5, r6, pc}
   32f5e:	4c08      	ldr	r4, [pc, #32]	; (32f80 <z_reschedule+0x78>)
   32f60:	23c2      	movs	r3, #194	; 0xc2
   32f62:	4622      	mov	r2, r4
   32f64:	4907      	ldr	r1, [pc, #28]	; (32f84 <z_reschedule+0x7c>)
   32f66:	4808      	ldr	r0, [pc, #32]	; (32f88 <z_reschedule+0x80>)
   32f68:	f003 f994 	bl	36294 <assert_print>
   32f6c:	4629      	mov	r1, r5
   32f6e:	4807      	ldr	r0, [pc, #28]	; (32f8c <z_reschedule+0x84>)
   32f70:	f003 f990 	bl	36294 <assert_print>
   32f74:	21c2      	movs	r1, #194	; 0xc2
   32f76:	4620      	mov	r0, r4
   32f78:	f003 f985 	bl	36286 <assert_post_action>
   32f7c:	2000ca40 	.word	0x2000ca40
   32f80:	00040b28 	.word	0x00040b28
   32f84:	00040b58 	.word	0x00040b58
   32f88:	0003f72c 	.word	0x0003f72c
   32f8c:	00040b70 	.word	0x00040b70

00032f90 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   32f90:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   32f92:	f04f 0320 	mov.w	r3, #32
   32f96:	f3ef 8511 	mrs	r5, BASEPRI
   32f9a:	f383 8812 	msr	BASEPRI_MAX, r3
   32f9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32fa2:	481a      	ldr	r0, [pc, #104]	; (3300c <k_sched_lock+0x7c>)
   32fa4:	f7fe fa2a 	bl	313fc <z_spin_lock_valid>
   32fa8:	b180      	cbz	r0, 32fcc <k_sched_lock+0x3c>
   32faa:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   32fac:	4817      	ldr	r0, [pc, #92]	; (3300c <k_sched_lock+0x7c>)
   32fae:	f7fe fa45 	bl	3143c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   32fb2:	bb4c      	cbnz	r4, 33008 <k_sched_lock+0x78>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
   32fb4:	f7ff fe92 	bl	32cdc <z_sched_lock>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32fb8:	4814      	ldr	r0, [pc, #80]	; (3300c <k_sched_lock+0x7c>)
   32fba:	f7fe fa2f 	bl	3141c <z_spin_unlock_valid>
   32fbe:	b1a0      	cbz	r0, 32fea <k_sched_lock+0x5a>
	__asm__ volatile(
   32fc0:	f385 8811 	msr	BASEPRI, r5
   32fc4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   32fc8:	2401      	movs	r4, #1
   32fca:	e7f2      	b.n	32fb2 <k_sched_lock+0x22>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   32fcc:	4c10      	ldr	r4, [pc, #64]	; (33010 <k_sched_lock+0x80>)
   32fce:	2394      	movs	r3, #148	; 0x94
   32fd0:	4622      	mov	r2, r4
   32fd2:	4910      	ldr	r1, [pc, #64]	; (33014 <k_sched_lock+0x84>)
   32fd4:	4810      	ldr	r0, [pc, #64]	; (33018 <k_sched_lock+0x88>)
   32fd6:	f003 f95d 	bl	36294 <assert_print>
   32fda:	490c      	ldr	r1, [pc, #48]	; (3300c <k_sched_lock+0x7c>)
   32fdc:	480f      	ldr	r0, [pc, #60]	; (3301c <k_sched_lock+0x8c>)
   32fde:	f003 f959 	bl	36294 <assert_print>
   32fe2:	2194      	movs	r1, #148	; 0x94
   32fe4:	4620      	mov	r0, r4
   32fe6:	f003 f94e 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   32fea:	4c09      	ldr	r4, [pc, #36]	; (33010 <k_sched_lock+0x80>)
   32fec:	23c2      	movs	r3, #194	; 0xc2
   32fee:	4622      	mov	r2, r4
   32ff0:	490b      	ldr	r1, [pc, #44]	; (33020 <k_sched_lock+0x90>)
   32ff2:	4809      	ldr	r0, [pc, #36]	; (33018 <k_sched_lock+0x88>)
   32ff4:	f003 f94e 	bl	36294 <assert_print>
   32ff8:	4904      	ldr	r1, [pc, #16]	; (3300c <k_sched_lock+0x7c>)
   32ffa:	480a      	ldr	r0, [pc, #40]	; (33024 <k_sched_lock+0x94>)
   32ffc:	f003 f94a 	bl	36294 <assert_print>
   33000:	21c2      	movs	r1, #194	; 0xc2
   33002:	4620      	mov	r0, r4
   33004:	f003 f93f 	bl	36286 <assert_post_action>
	}
}
   33008:	bd38      	pop	{r3, r4, r5, pc}
   3300a:	bf00      	nop
   3300c:	2000ca90 	.word	0x2000ca90
   33010:	00040b28 	.word	0x00040b28
   33014:	00040b88 	.word	0x00040b88
   33018:	0003f72c 	.word	0x0003f72c
   3301c:	00040ba0 	.word	0x00040ba0
   33020:	00040b58 	.word	0x00040b58
   33024:	00040b70 	.word	0x00040b70

00033028 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33028:	4b0c      	ldr	r3, [pc, #48]	; (3305c <z_priq_dumb_remove+0x34>)
   3302a:	4299      	cmp	r1, r3
   3302c:	d007      	beq.n	3303e <z_priq_dumb_remove+0x16>
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   3302e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   33030:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   33032:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   33034:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   33036:	2300      	movs	r3, #0
   33038:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   3303a:	604b      	str	r3, [r1, #4]
   3303c:	4770      	bx	lr
{
   3303e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33040:	4c07      	ldr	r4, [pc, #28]	; (33060 <z_priq_dumb_remove+0x38>)
   33042:	f240 4373 	movw	r3, #1139	; 0x473
   33046:	4622      	mov	r2, r4
   33048:	4906      	ldr	r1, [pc, #24]	; (33064 <z_priq_dumb_remove+0x3c>)
   3304a:	4807      	ldr	r0, [pc, #28]	; (33068 <z_priq_dumb_remove+0x40>)
   3304c:	f003 f922 	bl	36294 <assert_print>
   33050:	f240 4173 	movw	r1, #1139	; 0x473
   33054:	4620      	mov	r0, r4
   33056:	f003 f916 	bl	36286 <assert_post_action>
   3305a:	bf00      	nop
   3305c:	2000b980 	.word	0x2000b980
   33060:	00046464 	.word	0x00046464
   33064:	00046500 	.word	0x00046500
   33068:	0003f72c 	.word	0x0003f72c

0003306c <z_unpend_thread>:
{
   3306c:	b570      	push	{r4, r5, r6, lr}
   3306e:	4605      	mov	r5, r0
	__asm__ volatile(
   33070:	f04f 0320 	mov.w	r3, #32
   33074:	f3ef 8611 	mrs	r6, BASEPRI
   33078:	f383 8812 	msr	BASEPRI_MAX, r3
   3307c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33080:	481c      	ldr	r0, [pc, #112]	; (330f4 <z_unpend_thread+0x88>)
   33082:	f7fe f9bb 	bl	313fc <z_spin_lock_valid>
   33086:	b188      	cbz	r0, 330ac <z_unpend_thread+0x40>
   33088:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   3308a:	481a      	ldr	r0, [pc, #104]	; (330f4 <z_unpend_thread+0x88>)
   3308c:	f7fe f9d6 	bl	3143c <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
   33090:	bb54      	cbnz	r4, 330e8 <z_unpend_thread+0x7c>
		unpend_thread_no_timeout(thread);
   33092:	4628      	mov	r0, r5
   33094:	f00b fd7d 	bl	3eb92 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33098:	4816      	ldr	r0, [pc, #88]	; (330f4 <z_unpend_thread+0x88>)
   3309a:	f7fe f9bf 	bl	3141c <z_spin_unlock_valid>
   3309e:	b1a0      	cbz	r0, 330ca <z_unpend_thread+0x5e>
	__asm__ volatile(
   330a0:	f386 8811 	msr	BASEPRI, r6
   330a4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   330a8:	2401      	movs	r4, #1
   330aa:	e7f1      	b.n	33090 <z_unpend_thread+0x24>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   330ac:	4c12      	ldr	r4, [pc, #72]	; (330f8 <z_unpend_thread+0x8c>)
   330ae:	2394      	movs	r3, #148	; 0x94
   330b0:	4622      	mov	r2, r4
   330b2:	4912      	ldr	r1, [pc, #72]	; (330fc <z_unpend_thread+0x90>)
   330b4:	4812      	ldr	r0, [pc, #72]	; (33100 <z_unpend_thread+0x94>)
   330b6:	f003 f8ed 	bl	36294 <assert_print>
   330ba:	490e      	ldr	r1, [pc, #56]	; (330f4 <z_unpend_thread+0x88>)
   330bc:	4811      	ldr	r0, [pc, #68]	; (33104 <z_unpend_thread+0x98>)
   330be:	f003 f8e9 	bl	36294 <assert_print>
   330c2:	2194      	movs	r1, #148	; 0x94
   330c4:	4620      	mov	r0, r4
   330c6:	f003 f8de 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   330ca:	4c0b      	ldr	r4, [pc, #44]	; (330f8 <z_unpend_thread+0x8c>)
   330cc:	23c2      	movs	r3, #194	; 0xc2
   330ce:	4622      	mov	r2, r4
   330d0:	490d      	ldr	r1, [pc, #52]	; (33108 <z_unpend_thread+0x9c>)
   330d2:	480b      	ldr	r0, [pc, #44]	; (33100 <z_unpend_thread+0x94>)
   330d4:	f003 f8de 	bl	36294 <assert_print>
   330d8:	4906      	ldr	r1, [pc, #24]	; (330f4 <z_unpend_thread+0x88>)
   330da:	480c      	ldr	r0, [pc, #48]	; (3310c <z_unpend_thread+0xa0>)
   330dc:	f003 f8da 	bl	36294 <assert_print>
   330e0:	21c2      	movs	r1, #194	; 0xc2
   330e2:	4620      	mov	r0, r4
   330e4:	f003 f8cf 	bl	36286 <assert_post_action>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   330e8:	f105 0018 	add.w	r0, r5, #24
   330ec:	f001 fa72 	bl	345d4 <z_abort_timeout>
}
   330f0:	bd70      	pop	{r4, r5, r6, pc}
   330f2:	bf00      	nop
   330f4:	2000ca90 	.word	0x2000ca90
   330f8:	00040b28 	.word	0x00040b28
   330fc:	00040b88 	.word	0x00040b88
   33100:	0003f72c 	.word	0x0003f72c
   33104:	00040ba0 	.word	0x00040ba0
   33108:	00040b58 	.word	0x00040b58
   3310c:	00040b70 	.word	0x00040b70

00033110 <update_cache>:
{
   33110:	b538      	push	{r3, r4, r5, lr}
   33112:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   33114:	4817      	ldr	r0, [pc, #92]	; (33174 <update_cache+0x64>)
   33116:	f00b fd4a 	bl	3ebae <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3311a:	4605      	mov	r5, r0
   3311c:	b178      	cbz	r0, 3313e <update_cache+0x2e>
	if (preempt_ok != 0) {
   3311e:	b9fc      	cbnz	r4, 33160 <update_cache+0x50>
	__ASSERT(_current != NULL, "");
   33120:	4b15      	ldr	r3, [pc, #84]	; (33178 <update_cache+0x68>)
   33122:	689b      	ldr	r3, [r3, #8]
   33124:	b173      	cbz	r3, 33144 <update_cache+0x34>
	uint8_t state = thread->base.thread_state;
   33126:	7b5a      	ldrb	r2, [r3, #13]
	if (z_is_thread_prevented_from_running(_current)) {
   33128:	f012 0f1f 	tst.w	r2, #31
   3312c:	d118      	bne.n	33160 <update_cache+0x50>
	return node->next != NULL;
   3312e:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   33130:	b9b2      	cbnz	r2, 33160 <update_cache+0x50>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   33132:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   33134:	2a7f      	cmp	r2, #127	; 0x7f
   33136:	d913      	bls.n	33160 <update_cache+0x50>
		_kernel.ready_q.cache = _current;
   33138:	4a0f      	ldr	r2, [pc, #60]	; (33178 <update_cache+0x68>)
   3313a:	61d3      	str	r3, [r2, #28]
   3313c:	e019      	b.n	33172 <update_cache+0x62>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   3313e:	4b0e      	ldr	r3, [pc, #56]	; (33178 <update_cache+0x68>)
   33140:	68dd      	ldr	r5, [r3, #12]
   33142:	e7ec      	b.n	3311e <update_cache+0xe>
	__ASSERT(_current != NULL, "");
   33144:	4c0d      	ldr	r4, [pc, #52]	; (3317c <update_cache+0x6c>)
   33146:	2389      	movs	r3, #137	; 0x89
   33148:	4622      	mov	r2, r4
   3314a:	490d      	ldr	r1, [pc, #52]	; (33180 <update_cache+0x70>)
   3314c:	480d      	ldr	r0, [pc, #52]	; (33184 <update_cache+0x74>)
   3314e:	f003 f8a1 	bl	36294 <assert_print>
   33152:	480d      	ldr	r0, [pc, #52]	; (33188 <update_cache+0x78>)
   33154:	f003 f89e 	bl	36294 <assert_print>
   33158:	2189      	movs	r1, #137	; 0x89
   3315a:	4620      	mov	r0, r4
   3315c:	f003 f893 	bl	36286 <assert_post_action>
		if (thread != _current) {
   33160:	4b05      	ldr	r3, [pc, #20]	; (33178 <update_cache+0x68>)
   33162:	689b      	ldr	r3, [r3, #8]
   33164:	42ab      	cmp	r3, r5
   33166:	d002      	beq.n	3316e <update_cache+0x5e>
			z_reset_time_slice(thread);
   33168:	4628      	mov	r0, r5
   3316a:	f7ff fdfb 	bl	32d64 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   3316e:	4b02      	ldr	r3, [pc, #8]	; (33178 <update_cache+0x68>)
   33170:	61dd      	str	r5, [r3, #28]
}
   33172:	bd38      	pop	{r3, r4, r5, pc}
   33174:	2000ca60 	.word	0x2000ca60
   33178:	2000ca40 	.word	0x2000ca40
   3317c:	00046464 	.word	0x00046464
   33180:	00046524 	.word	0x00046524
   33184:	0003f72c 	.word	0x0003f72c
   33188:	00044634 	.word	0x00044634

0003318c <move_thread_to_end_of_prio_q>:
{
   3318c:	b538      	push	{r3, r4, r5, lr}
   3318e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   33190:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   33192:	f990 300d 	ldrsb.w	r3, [r0, #13]
   33196:	2b00      	cmp	r3, #0
   33198:	db0d      	blt.n	331b6 <move_thread_to_end_of_prio_q+0x2a>
	thread->base.thread_state |= _THREAD_QUEUED;
   3319a:	7b6b      	ldrb	r3, [r5, #13]
   3319c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   331a0:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   331a2:	4b22      	ldr	r3, [pc, #136]	; (3322c <move_thread_to_end_of_prio_q+0xa0>)
   331a4:	429d      	cmp	r5, r3
   331a6:	d00e      	beq.n	331c6 <move_thread_to_end_of_prio_q+0x3a>
	return list->head == list;
   331a8:	4b21      	ldr	r3, [pc, #132]	; (33230 <move_thread_to_end_of_prio_q+0xa4>)
   331aa:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   331ae:	429c      	cmp	r4, r3
   331b0:	d11b      	bne.n	331ea <move_thread_to_end_of_prio_q+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   331b2:	2400      	movs	r4, #0
   331b4:	e019      	b.n	331ea <move_thread_to_end_of_prio_q+0x5e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   331b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   331ba:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   331bc:	4601      	mov	r1, r0
   331be:	481d      	ldr	r0, [pc, #116]	; (33234 <move_thread_to_end_of_prio_q+0xa8>)
   331c0:	f7ff ff32 	bl	33028 <z_priq_dumb_remove>
}
   331c4:	e7e9      	b.n	3319a <move_thread_to_end_of_prio_q+0xe>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   331c6:	4c1c      	ldr	r4, [pc, #112]	; (33238 <move_thread_to_end_of_prio_q+0xac>)
   331c8:	23ba      	movs	r3, #186	; 0xba
   331ca:	4622      	mov	r2, r4
   331cc:	491b      	ldr	r1, [pc, #108]	; (3323c <move_thread_to_end_of_prio_q+0xb0>)
   331ce:	481c      	ldr	r0, [pc, #112]	; (33240 <move_thread_to_end_of_prio_q+0xb4>)
   331d0:	f003 f860 	bl	36294 <assert_print>
   331d4:	21ba      	movs	r1, #186	; 0xba
   331d6:	4620      	mov	r0, r4
   331d8:	f003 f855 	bl	36286 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   331dc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   331de:	606b      	str	r3, [r5, #4]
	node->next = successor;
   331e0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   331e2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   331e4:	6065      	str	r5, [r4, #4]
}
   331e6:	e017      	b.n	33218 <move_thread_to_end_of_prio_q+0x8c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   331e8:	2400      	movs	r4, #0
   331ea:	b16c      	cbz	r4, 33208 <move_thread_to_end_of_prio_q+0x7c>
		if (z_sched_prio_cmp(thread, t) > 0) {
   331ec:	4621      	mov	r1, r4
   331ee:	4628      	mov	r0, r5
   331f0:	f00b fcab 	bl	3eb4a <z_sched_prio_cmp>
   331f4:	2800      	cmp	r0, #0
   331f6:	dcf1      	bgt.n	331dc <move_thread_to_end_of_prio_q+0x50>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   331f8:	2c00      	cmp	r4, #0
   331fa:	d0f6      	beq.n	331ea <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   331fc:	4b0c      	ldr	r3, [pc, #48]	; (33230 <move_thread_to_end_of_prio_q+0xa4>)
   331fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   33200:	429c      	cmp	r4, r3
   33202:	d0f1      	beq.n	331e8 <move_thread_to_end_of_prio_q+0x5c>
   33204:	6824      	ldr	r4, [r4, #0]
   33206:	e7f0      	b.n	331ea <move_thread_to_end_of_prio_q+0x5e>
	sys_dnode_t *const tail = list->tail;
   33208:	4b09      	ldr	r3, [pc, #36]	; (33230 <move_thread_to_end_of_prio_q+0xa4>)
   3320a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   3320c:	f103 0120 	add.w	r1, r3, #32
   33210:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   33212:	606a      	str	r2, [r5, #4]
	tail->next = node;
   33214:	6015      	str	r5, [r2, #0]
	list->tail = node;
   33216:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   33218:	4b05      	ldr	r3, [pc, #20]	; (33230 <move_thread_to_end_of_prio_q+0xa4>)
   3321a:	6898      	ldr	r0, [r3, #8]
   3321c:	42a8      	cmp	r0, r5
   3321e:	bf14      	ite	ne
   33220:	2000      	movne	r0, #0
   33222:	2001      	moveq	r0, #1
   33224:	f7ff ff74 	bl	33110 <update_cache>
}
   33228:	bd38      	pop	{r3, r4, r5, pc}
   3322a:	bf00      	nop
   3322c:	2000b980 	.word	0x2000b980
   33230:	2000ca40 	.word	0x2000ca40
   33234:	2000ca60 	.word	0x2000ca60
   33238:	00046464 	.word	0x00046464
   3323c:	00046500 	.word	0x00046500
   33240:	0003f72c 	.word	0x0003f72c

00033244 <slice_expired_locked>:
{
   33244:	b538      	push	{r3, r4, r5, lr}
   33246:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
   33248:	4b07      	ldr	r3, [pc, #28]	; (33268 <slice_expired_locked+0x24>)
   3324a:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
   3324c:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
   3324e:	f013 0f1f 	tst.w	r3, #31
   33252:	d004      	beq.n	3325e <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
   33254:	4628      	mov	r0, r5
   33256:	f7ff fd85 	bl	32d64 <z_reset_time_slice>
}
   3325a:	4620      	mov	r0, r4
   3325c:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
   3325e:	4628      	mov	r0, r5
   33260:	f7ff ff94 	bl	3318c <move_thread_to_end_of_prio_q>
   33264:	e7f6      	b.n	33254 <slice_expired_locked+0x10>
   33266:	bf00      	nop
   33268:	2000ca40 	.word	0x2000ca40

0003326c <z_time_slice>:
{
   3326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3326e:	4605      	mov	r5, r0
	__asm__ volatile(
   33270:	f04f 0320 	mov.w	r3, #32
   33274:	f3ef 8611 	mrs	r6, BASEPRI
   33278:	f383 8812 	msr	BASEPRI_MAX, r3
   3327c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33280:	4834      	ldr	r0, [pc, #208]	; (33354 <z_time_slice+0xe8>)
   33282:	f7fe f8bb 	bl	313fc <z_spin_lock_valid>
   33286:	b1e0      	cbz	r0, 332c2 <z_time_slice+0x56>
	z_spin_lock_set_owner(l);
   33288:	4832      	ldr	r0, [pc, #200]	; (33354 <z_time_slice+0xe8>)
   3328a:	f7fe f8d7 	bl	3143c <z_spin_lock_set_owner>
	return k;
   3328e:	4634      	mov	r4, r6
	if (pending_current == _current) {
   33290:	4b31      	ldr	r3, [pc, #196]	; (33358 <z_time_slice+0xec>)
   33292:	6898      	ldr	r0, [r3, #8]
   33294:	4b31      	ldr	r3, [pc, #196]	; (3335c <z_time_slice+0xf0>)
   33296:	681b      	ldr	r3, [r3, #0]
   33298:	4298      	cmp	r0, r3
   3329a:	d021      	beq.n	332e0 <z_time_slice+0x74>
	pending_current = NULL;
   3329c:	4b2f      	ldr	r3, [pc, #188]	; (3335c <z_time_slice+0xf0>)
   3329e:	2200      	movs	r2, #0
   332a0:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
   332a2:	4b2f      	ldr	r3, [pc, #188]	; (33360 <z_time_slice+0xf4>)
   332a4:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
   332a6:	2b00      	cmp	r3, #0
   332a8:	d039      	beq.n	3331e <z_time_slice+0xb2>
   332aa:	f7ff fce1 	bl	32c70 <sliceable>
   332ae:	2800      	cmp	r0, #0
   332b0:	d035      	beq.n	3331e <z_time_slice+0xb2>
		if (ticks >= _current_cpu->slice_ticks) {
   332b2:	4b29      	ldr	r3, [pc, #164]	; (33358 <z_time_slice+0xec>)
   332b4:	691b      	ldr	r3, [r3, #16]
   332b6:	42ab      	cmp	r3, r5
   332b8:	dd2c      	ble.n	33314 <z_time_slice+0xa8>
			_current_cpu->slice_ticks -= ticks;
   332ba:	1b5b      	subs	r3, r3, r5
   332bc:	4a26      	ldr	r2, [pc, #152]	; (33358 <z_time_slice+0xec>)
   332be:	6113      	str	r3, [r2, #16]
   332c0:	e030      	b.n	33324 <z_time_slice+0xb8>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   332c2:	4c28      	ldr	r4, [pc, #160]	; (33364 <z_time_slice+0xf8>)
   332c4:	2394      	movs	r3, #148	; 0x94
   332c6:	4622      	mov	r2, r4
   332c8:	4927      	ldr	r1, [pc, #156]	; (33368 <z_time_slice+0xfc>)
   332ca:	4828      	ldr	r0, [pc, #160]	; (3336c <z_time_slice+0x100>)
   332cc:	f002 ffe2 	bl	36294 <assert_print>
   332d0:	4920      	ldr	r1, [pc, #128]	; (33354 <z_time_slice+0xe8>)
   332d2:	4827      	ldr	r0, [pc, #156]	; (33370 <z_time_slice+0x104>)
   332d4:	f002 ffde 	bl	36294 <assert_print>
   332d8:	2194      	movs	r1, #148	; 0x94
   332da:	4620      	mov	r0, r4
   332dc:	f002 ffd3 	bl	36286 <assert_post_action>
		z_reset_time_slice(_current);
   332e0:	f7ff fd40 	bl	32d64 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   332e4:	481b      	ldr	r0, [pc, #108]	; (33354 <z_time_slice+0xe8>)
   332e6:	f7fe f899 	bl	3141c <z_spin_unlock_valid>
   332ea:	b120      	cbz	r0, 332f6 <z_time_slice+0x8a>
	__asm__ volatile(
   332ec:	f386 8811 	msr	BASEPRI, r6
   332f0:	f3bf 8f6f 	isb	sy
		return;
   332f4:	e01e      	b.n	33334 <z_time_slice+0xc8>
   332f6:	4c1b      	ldr	r4, [pc, #108]	; (33364 <z_time_slice+0xf8>)
   332f8:	23c2      	movs	r3, #194	; 0xc2
   332fa:	4622      	mov	r2, r4
   332fc:	491d      	ldr	r1, [pc, #116]	; (33374 <z_time_slice+0x108>)
   332fe:	481b      	ldr	r0, [pc, #108]	; (3336c <z_time_slice+0x100>)
   33300:	f002 ffc8 	bl	36294 <assert_print>
   33304:	4913      	ldr	r1, [pc, #76]	; (33354 <z_time_slice+0xe8>)
   33306:	481c      	ldr	r0, [pc, #112]	; (33378 <z_time_slice+0x10c>)
   33308:	f002 ffc4 	bl	36294 <assert_print>
   3330c:	21c2      	movs	r1, #194	; 0xc2
   3330e:	4620      	mov	r0, r4
   33310:	f002 ffb9 	bl	36286 <assert_post_action>
			key = slice_expired_locked(key);
   33314:	4630      	mov	r0, r6
   33316:	f7ff ff95 	bl	33244 <slice_expired_locked>
   3331a:	4604      	mov	r4, r0
   3331c:	e002      	b.n	33324 <z_time_slice+0xb8>
		_current_cpu->slice_ticks = 0;
   3331e:	4b0e      	ldr	r3, [pc, #56]	; (33358 <z_time_slice+0xec>)
   33320:	2200      	movs	r2, #0
   33322:	611a      	str	r2, [r3, #16]
   33324:	480b      	ldr	r0, [pc, #44]	; (33354 <z_time_slice+0xe8>)
   33326:	f7fe f879 	bl	3141c <z_spin_unlock_valid>
   3332a:	b120      	cbz	r0, 33336 <z_time_slice+0xca>
   3332c:	f384 8811 	msr	BASEPRI, r4
   33330:	f3bf 8f6f 	isb	sy
}
   33334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33336:	4c0b      	ldr	r4, [pc, #44]	; (33364 <z_time_slice+0xf8>)
   33338:	23c2      	movs	r3, #194	; 0xc2
   3333a:	4622      	mov	r2, r4
   3333c:	490d      	ldr	r1, [pc, #52]	; (33374 <z_time_slice+0x108>)
   3333e:	480b      	ldr	r0, [pc, #44]	; (3336c <z_time_slice+0x100>)
   33340:	f002 ffa8 	bl	36294 <assert_print>
   33344:	4903      	ldr	r1, [pc, #12]	; (33354 <z_time_slice+0xe8>)
   33346:	480c      	ldr	r0, [pc, #48]	; (33378 <z_time_slice+0x10c>)
   33348:	f002 ffa4 	bl	36294 <assert_print>
   3334c:	21c2      	movs	r1, #194	; 0xc2
   3334e:	4620      	mov	r0, r4
   33350:	f002 ff99 	bl	36286 <assert_post_action>
   33354:	2000ca90 	.word	0x2000ca90
   33358:	2000ca40 	.word	0x2000ca40
   3335c:	2000ca84 	.word	0x2000ca84
   33360:	2000ca8c 	.word	0x2000ca8c
   33364:	00040b28 	.word	0x00040b28
   33368:	00040b88 	.word	0x00040b88
   3336c:	0003f72c 	.word	0x0003f72c
   33370:	00040ba0 	.word	0x00040ba0
   33374:	00040b58 	.word	0x00040b58
   33378:	00040b70 	.word	0x00040b70

0003337c <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
   3337c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   3337e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   33382:	2b00      	cmp	r3, #0
   33384:	db41      	blt.n	3340a <ready_thread+0x8e>
{
   33386:	b570      	push	{r4, r5, r6, lr}
   33388:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3338a:	f012 0f1f 	tst.w	r2, #31
   3338e:	d101      	bne.n	33394 <ready_thread+0x18>
	return node->next != NULL;
   33390:	6986      	ldr	r6, [r0, #24]
   33392:	b106      	cbz	r6, 33396 <ready_thread+0x1a>
}
   33394:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
   33396:	f062 027f 	orn	r2, r2, #127	; 0x7f
   3339a:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3339c:	4b1b      	ldr	r3, [pc, #108]	; (3340c <ready_thread+0x90>)
   3339e:	4298      	cmp	r0, r3
   333a0:	d006      	beq.n	333b0 <ready_thread+0x34>
	return list->head == list;
   333a2:	4b1b      	ldr	r3, [pc, #108]	; (33410 <ready_thread+0x94>)
   333a4:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   333a8:	429d      	cmp	r5, r3
   333aa:	d113      	bne.n	333d4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   333ac:	4635      	mov	r5, r6
   333ae:	e011      	b.n	333d4 <ready_thread+0x58>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   333b0:	4c18      	ldr	r4, [pc, #96]	; (33414 <ready_thread+0x98>)
   333b2:	23ba      	movs	r3, #186	; 0xba
   333b4:	4622      	mov	r2, r4
   333b6:	4918      	ldr	r1, [pc, #96]	; (33418 <ready_thread+0x9c>)
   333b8:	4818      	ldr	r0, [pc, #96]	; (3341c <ready_thread+0xa0>)
   333ba:	f002 ff6b 	bl	36294 <assert_print>
   333be:	21ba      	movs	r1, #186	; 0xba
   333c0:	4620      	mov	r0, r4
   333c2:	f002 ff60 	bl	36286 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   333c6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   333c8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   333ca:	6025      	str	r5, [r4, #0]
	prev->next = node;
   333cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   333ce:	606c      	str	r4, [r5, #4]
}
   333d0:	e017      	b.n	33402 <ready_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   333d2:	4635      	mov	r5, r6
   333d4:	b16d      	cbz	r5, 333f2 <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   333d6:	4629      	mov	r1, r5
   333d8:	4620      	mov	r0, r4
   333da:	f00b fbb6 	bl	3eb4a <z_sched_prio_cmp>
   333de:	2800      	cmp	r0, #0
   333e0:	dcf1      	bgt.n	333c6 <ready_thread+0x4a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   333e2:	2d00      	cmp	r5, #0
   333e4:	d0f6      	beq.n	333d4 <ready_thread+0x58>
	return (node == list->tail) ? NULL : node->next;
   333e6:	4b0a      	ldr	r3, [pc, #40]	; (33410 <ready_thread+0x94>)
   333e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   333ea:	429d      	cmp	r5, r3
   333ec:	d0f1      	beq.n	333d2 <ready_thread+0x56>
   333ee:	682d      	ldr	r5, [r5, #0]
   333f0:	e7f0      	b.n	333d4 <ready_thread+0x58>
	sys_dnode_t *const tail = list->tail;
   333f2:	4b07      	ldr	r3, [pc, #28]	; (33410 <ready_thread+0x94>)
   333f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   333f6:	f103 0120 	add.w	r1, r3, #32
   333fa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   333fc:	6062      	str	r2, [r4, #4]
	tail->next = node;
   333fe:	6014      	str	r4, [r2, #0]
	list->tail = node;
   33400:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   33402:	2000      	movs	r0, #0
   33404:	f7ff fe84 	bl	33110 <update_cache>
}
   33408:	e7c4      	b.n	33394 <ready_thread+0x18>
   3340a:	4770      	bx	lr
   3340c:	2000b980 	.word	0x2000b980
   33410:	2000ca40 	.word	0x2000ca40
   33414:	00046464 	.word	0x00046464
   33418:	00046500 	.word	0x00046500
   3341c:	0003f72c 	.word	0x0003f72c

00033420 <z_ready_thread>:
{
   33420:	b570      	push	{r4, r5, r6, lr}
   33422:	4605      	mov	r5, r0
	__asm__ volatile(
   33424:	f04f 0320 	mov.w	r3, #32
   33428:	f3ef 8611 	mrs	r6, BASEPRI
   3342c:	f383 8812 	msr	BASEPRI_MAX, r3
   33430:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33434:	481d      	ldr	r0, [pc, #116]	; (334ac <z_ready_thread+0x8c>)
   33436:	f7fd ffe1 	bl	313fc <z_spin_lock_valid>
   3343a:	b120      	cbz	r0, 33446 <z_ready_thread+0x26>
   3343c:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   3343e:	481b      	ldr	r0, [pc, #108]	; (334ac <z_ready_thread+0x8c>)
   33440:	f7fd fffc 	bl	3143c <z_spin_lock_set_owner>
	return k;
   33444:	e017      	b.n	33476 <z_ready_thread+0x56>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33446:	4c1a      	ldr	r4, [pc, #104]	; (334b0 <z_ready_thread+0x90>)
   33448:	2394      	movs	r3, #148	; 0x94
   3344a:	4622      	mov	r2, r4
   3344c:	4919      	ldr	r1, [pc, #100]	; (334b4 <z_ready_thread+0x94>)
   3344e:	481a      	ldr	r0, [pc, #104]	; (334b8 <z_ready_thread+0x98>)
   33450:	f002 ff20 	bl	36294 <assert_print>
   33454:	4915      	ldr	r1, [pc, #84]	; (334ac <z_ready_thread+0x8c>)
   33456:	4819      	ldr	r0, [pc, #100]	; (334bc <z_ready_thread+0x9c>)
   33458:	f002 ff1c 	bl	36294 <assert_print>
   3345c:	2194      	movs	r1, #148	; 0x94
   3345e:	4620      	mov	r0, r4
   33460:	f002 ff11 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33464:	4811      	ldr	r0, [pc, #68]	; (334ac <z_ready_thread+0x8c>)
   33466:	f7fd ffd9 	bl	3141c <z_spin_unlock_valid>
   3346a:	b170      	cbz	r0, 3348a <z_ready_thread+0x6a>
	__asm__ volatile(
   3346c:	f386 8811 	msr	BASEPRI, r6
   33470:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   33474:	2401      	movs	r4, #1
   33476:	b9bc      	cbnz	r4, 334a8 <z_ready_thread+0x88>
		if (!thread_active_elsewhere(thread)) {
   33478:	4628      	mov	r0, r5
   3347a:	f00b fb64 	bl	3eb46 <thread_active_elsewhere>
   3347e:	2800      	cmp	r0, #0
   33480:	d1f0      	bne.n	33464 <z_ready_thread+0x44>
			ready_thread(thread);
   33482:	4628      	mov	r0, r5
   33484:	f7ff ff7a 	bl	3337c <ready_thread>
   33488:	e7ec      	b.n	33464 <z_ready_thread+0x44>
   3348a:	4c09      	ldr	r4, [pc, #36]	; (334b0 <z_ready_thread+0x90>)
   3348c:	23c2      	movs	r3, #194	; 0xc2
   3348e:	4622      	mov	r2, r4
   33490:	490b      	ldr	r1, [pc, #44]	; (334c0 <z_ready_thread+0xa0>)
   33492:	4809      	ldr	r0, [pc, #36]	; (334b8 <z_ready_thread+0x98>)
   33494:	f002 fefe 	bl	36294 <assert_print>
   33498:	4904      	ldr	r1, [pc, #16]	; (334ac <z_ready_thread+0x8c>)
   3349a:	480a      	ldr	r0, [pc, #40]	; (334c4 <z_ready_thread+0xa4>)
   3349c:	f002 fefa 	bl	36294 <assert_print>
   334a0:	21c2      	movs	r1, #194	; 0xc2
   334a2:	4620      	mov	r0, r4
   334a4:	f002 feef 	bl	36286 <assert_post_action>
}
   334a8:	bd70      	pop	{r4, r5, r6, pc}
   334aa:	bf00      	nop
   334ac:	2000ca90 	.word	0x2000ca90
   334b0:	00040b28 	.word	0x00040b28
   334b4:	00040b88 	.word	0x00040b88
   334b8:	0003f72c 	.word	0x0003f72c
   334bc:	00040ba0 	.word	0x00040ba0
   334c0:	00040b58 	.word	0x00040b58
   334c4:	00040b70 	.word	0x00040b70

000334c8 <z_sched_start>:
{
   334c8:	b570      	push	{r4, r5, r6, lr}
   334ca:	4604      	mov	r4, r0
	__asm__ volatile(
   334cc:	f04f 0320 	mov.w	r3, #32
   334d0:	f3ef 8511 	mrs	r5, BASEPRI
   334d4:	f383 8812 	msr	BASEPRI_MAX, r3
   334d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   334dc:	481e      	ldr	r0, [pc, #120]	; (33558 <z_sched_start+0x90>)
   334de:	f7fd ff8d 	bl	313fc <z_spin_lock_valid>
   334e2:	b178      	cbz	r0, 33504 <z_sched_start+0x3c>
	z_spin_lock_set_owner(l);
   334e4:	481c      	ldr	r0, [pc, #112]	; (33558 <z_sched_start+0x90>)
   334e6:	f7fd ffa9 	bl	3143c <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   334ea:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   334ec:	f013 0f04 	tst.w	r3, #4
   334f0:	d126      	bne.n	33540 <z_sched_start+0x78>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   334f2:	4819      	ldr	r0, [pc, #100]	; (33558 <z_sched_start+0x90>)
   334f4:	f7fd ff92 	bl	3141c <z_spin_unlock_valid>
   334f8:	b198      	cbz	r0, 33522 <z_sched_start+0x5a>
	__asm__ volatile(
   334fa:	f385 8811 	msr	BASEPRI, r5
   334fe:	f3bf 8f6f 	isb	sy
		return;
   33502:	e027      	b.n	33554 <z_sched_start+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33504:	4c15      	ldr	r4, [pc, #84]	; (3355c <z_sched_start+0x94>)
   33506:	2394      	movs	r3, #148	; 0x94
   33508:	4622      	mov	r2, r4
   3350a:	4915      	ldr	r1, [pc, #84]	; (33560 <z_sched_start+0x98>)
   3350c:	4815      	ldr	r0, [pc, #84]	; (33564 <z_sched_start+0x9c>)
   3350e:	f002 fec1 	bl	36294 <assert_print>
   33512:	4911      	ldr	r1, [pc, #68]	; (33558 <z_sched_start+0x90>)
   33514:	4814      	ldr	r0, [pc, #80]	; (33568 <z_sched_start+0xa0>)
   33516:	f002 febd 	bl	36294 <assert_print>
   3351a:	2194      	movs	r1, #148	; 0x94
   3351c:	4620      	mov	r0, r4
   3351e:	f002 feb2 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33522:	4c0e      	ldr	r4, [pc, #56]	; (3355c <z_sched_start+0x94>)
   33524:	23c2      	movs	r3, #194	; 0xc2
   33526:	4622      	mov	r2, r4
   33528:	4910      	ldr	r1, [pc, #64]	; (3356c <z_sched_start+0xa4>)
   3352a:	480e      	ldr	r0, [pc, #56]	; (33564 <z_sched_start+0x9c>)
   3352c:	f002 feb2 	bl	36294 <assert_print>
   33530:	4909      	ldr	r1, [pc, #36]	; (33558 <z_sched_start+0x90>)
   33532:	480f      	ldr	r0, [pc, #60]	; (33570 <z_sched_start+0xa8>)
   33534:	f002 feae 	bl	36294 <assert_print>
   33538:	21c2      	movs	r1, #194	; 0xc2
   3353a:	4620      	mov	r0, r4
   3353c:	f002 fea3 	bl	36286 <assert_post_action>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   33540:	f023 0304 	bic.w	r3, r3, #4
   33544:	7363      	strb	r3, [r4, #13]
	ready_thread(thread);
   33546:	4620      	mov	r0, r4
   33548:	f7ff ff18 	bl	3337c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   3354c:	4629      	mov	r1, r5
   3354e:	4802      	ldr	r0, [pc, #8]	; (33558 <z_sched_start+0x90>)
   33550:	f7ff fcda 	bl	32f08 <z_reschedule>
}
   33554:	bd70      	pop	{r4, r5, r6, pc}
   33556:	bf00      	nop
   33558:	2000ca90 	.word	0x2000ca90
   3355c:	00040b28 	.word	0x00040b28
   33560:	00040b88 	.word	0x00040b88
   33564:	0003f72c 	.word	0x0003f72c
   33568:	00040ba0 	.word	0x00040ba0
   3356c:	00040b58 	.word	0x00040b58
   33570:	00040b70 	.word	0x00040b70

00033574 <z_thread_timeout>:
{
   33574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33576:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   33578:	f1a0 0718 	sub.w	r7, r0, #24
	__asm__ volatile(
   3357c:	f04f 0320 	mov.w	r3, #32
   33580:	f3ef 8611 	mrs	r6, BASEPRI
   33584:	f383 8812 	msr	BASEPRI_MAX, r3
   33588:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3358c:	4825      	ldr	r0, [pc, #148]	; (33624 <z_thread_timeout+0xb0>)
   3358e:	f7fd ff35 	bl	313fc <z_spin_lock_valid>
   33592:	b120      	cbz	r0, 3359e <z_thread_timeout+0x2a>
   33594:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   33596:	4823      	ldr	r0, [pc, #140]	; (33624 <z_thread_timeout+0xb0>)
   33598:	f7fd ff50 	bl	3143c <z_spin_lock_set_owner>
	return k;
   3359c:	e024      	b.n	335e8 <z_thread_timeout+0x74>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3359e:	4c22      	ldr	r4, [pc, #136]	; (33628 <z_thread_timeout+0xb4>)
   335a0:	2394      	movs	r3, #148	; 0x94
   335a2:	4622      	mov	r2, r4
   335a4:	4921      	ldr	r1, [pc, #132]	; (3362c <z_thread_timeout+0xb8>)
   335a6:	4822      	ldr	r0, [pc, #136]	; (33630 <z_thread_timeout+0xbc>)
   335a8:	f002 fe74 	bl	36294 <assert_print>
   335ac:	491d      	ldr	r1, [pc, #116]	; (33624 <z_thread_timeout+0xb0>)
   335ae:	4821      	ldr	r0, [pc, #132]	; (33634 <z_thread_timeout+0xc0>)
   335b0:	f002 fe70 	bl	36294 <assert_print>
   335b4:	2194      	movs	r1, #148	; 0x94
   335b6:	4620      	mov	r0, r4
   335b8:	f002 fe65 	bl	36286 <assert_post_action>
   335bc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   335c0:	f023 0204 	bic.w	r2, r3, #4
   335c4:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   335c8:	f023 0314 	bic.w	r3, r3, #20
   335cc:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   335d0:	4638      	mov	r0, r7
   335d2:	f7ff fed3 	bl	3337c <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   335d6:	4813      	ldr	r0, [pc, #76]	; (33624 <z_thread_timeout+0xb0>)
   335d8:	f7fd ff20 	bl	3141c <z_spin_unlock_valid>
   335dc:	b190      	cbz	r0, 33604 <z_thread_timeout+0x90>
	__asm__ volatile(
   335de:	f386 8811 	msr	BASEPRI, r6
   335e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   335e6:	2501      	movs	r5, #1
   335e8:	b9dd      	cbnz	r5, 33622 <z_thread_timeout+0xae>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   335ea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   335ee:	f013 0f28 	tst.w	r3, #40	; 0x28
   335f2:	d1f0      	bne.n	335d6 <z_thread_timeout+0x62>
			if (thread->base.pended_on != NULL) {
   335f4:	f854 3c10 	ldr.w	r3, [r4, #-16]
   335f8:	2b00      	cmp	r3, #0
   335fa:	d0df      	beq.n	335bc <z_thread_timeout+0x48>
				unpend_thread_no_timeout(thread);
   335fc:	4638      	mov	r0, r7
   335fe:	f00b fac8 	bl	3eb92 <unpend_thread_no_timeout>
   33602:	e7db      	b.n	335bc <z_thread_timeout+0x48>
   33604:	4c08      	ldr	r4, [pc, #32]	; (33628 <z_thread_timeout+0xb4>)
   33606:	23c2      	movs	r3, #194	; 0xc2
   33608:	4622      	mov	r2, r4
   3360a:	490b      	ldr	r1, [pc, #44]	; (33638 <z_thread_timeout+0xc4>)
   3360c:	4808      	ldr	r0, [pc, #32]	; (33630 <z_thread_timeout+0xbc>)
   3360e:	f002 fe41 	bl	36294 <assert_print>
   33612:	4904      	ldr	r1, [pc, #16]	; (33624 <z_thread_timeout+0xb0>)
   33614:	4809      	ldr	r0, [pc, #36]	; (3363c <z_thread_timeout+0xc8>)
   33616:	f002 fe3d 	bl	36294 <assert_print>
   3361a:	21c2      	movs	r1, #194	; 0xc2
   3361c:	4620      	mov	r0, r4
   3361e:	f002 fe32 	bl	36286 <assert_post_action>
}
   33622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33624:	2000ca90 	.word	0x2000ca90
   33628:	00040b28 	.word	0x00040b28
   3362c:	00040b88 	.word	0x00040b88
   33630:	0003f72c 	.word	0x0003f72c
   33634:	00040ba0 	.word	0x00040ba0
   33638:	00040b58 	.word	0x00040b58
   3363c:	00040b70 	.word	0x00040b70

00033640 <unready_thread>:
{
   33640:	b510      	push	{r4, lr}
   33642:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   33644:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   33646:	f990 300d 	ldrsb.w	r3, [r0, #13]
   3364a:	2b00      	cmp	r3, #0
   3364c:	db08      	blt.n	33660 <unready_thread+0x20>
	update_cache(thread == _current);
   3364e:	4b08      	ldr	r3, [pc, #32]	; (33670 <unready_thread+0x30>)
   33650:	6898      	ldr	r0, [r3, #8]
   33652:	42a0      	cmp	r0, r4
   33654:	bf14      	ite	ne
   33656:	2000      	movne	r0, #0
   33658:	2001      	moveq	r0, #1
   3365a:	f7ff fd59 	bl	33110 <update_cache>
}
   3365e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33660:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   33664:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33666:	4601      	mov	r1, r0
   33668:	4802      	ldr	r0, [pc, #8]	; (33674 <unready_thread+0x34>)
   3366a:	f7ff fcdd 	bl	33028 <z_priq_dumb_remove>
}
   3366e:	e7ee      	b.n	3364e <unready_thread+0xe>
   33670:	2000ca40 	.word	0x2000ca40
   33674:	2000ca60 	.word	0x2000ca60

00033678 <add_to_waitq_locked>:
{
   33678:	b570      	push	{r4, r5, r6, lr}
   3367a:	4605      	mov	r5, r0
   3367c:	460e      	mov	r6, r1
	unready_thread(thread);
   3367e:	f7ff ffdf 	bl	33640 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   33682:	7b6b      	ldrb	r3, [r5, #13]
   33684:	f043 0302 	orr.w	r3, r3, #2
   33688:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   3368a:	2e00      	cmp	r6, #0
   3368c:	d02d      	beq.n	336ea <add_to_waitq_locked+0x72>
		thread->base.pended_on = wait_q;
   3368e:	60ae      	str	r6, [r5, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33690:	4b16      	ldr	r3, [pc, #88]	; (336ec <add_to_waitq_locked+0x74>)
   33692:	429d      	cmp	r5, r3
   33694:	d004      	beq.n	336a0 <add_to_waitq_locked+0x28>
	return list->head == list;
   33696:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33698:	42a6      	cmp	r6, r4
   3369a:	d113      	bne.n	336c4 <add_to_waitq_locked+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3369c:	2400      	movs	r4, #0
   3369e:	e011      	b.n	336c4 <add_to_waitq_locked+0x4c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   336a0:	4c13      	ldr	r4, [pc, #76]	; (336f0 <add_to_waitq_locked+0x78>)
   336a2:	23ba      	movs	r3, #186	; 0xba
   336a4:	4622      	mov	r2, r4
   336a6:	4913      	ldr	r1, [pc, #76]	; (336f4 <add_to_waitq_locked+0x7c>)
   336a8:	4813      	ldr	r0, [pc, #76]	; (336f8 <add_to_waitq_locked+0x80>)
   336aa:	f002 fdf3 	bl	36294 <assert_print>
   336ae:	21ba      	movs	r1, #186	; 0xba
   336b0:	4620      	mov	r0, r4
   336b2:	f002 fde8 	bl	36286 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   336b6:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   336b8:	606b      	str	r3, [r5, #4]
	node->next = successor;
   336ba:	602c      	str	r4, [r5, #0]
	prev->next = node;
   336bc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   336be:	6065      	str	r5, [r4, #4]
}
   336c0:	e013      	b.n	336ea <add_to_waitq_locked+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   336c2:	2400      	movs	r4, #0
   336c4:	b164      	cbz	r4, 336e0 <add_to_waitq_locked+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
   336c6:	4621      	mov	r1, r4
   336c8:	4628      	mov	r0, r5
   336ca:	f00b fa3e 	bl	3eb4a <z_sched_prio_cmp>
   336ce:	2800      	cmp	r0, #0
   336d0:	dcf1      	bgt.n	336b6 <add_to_waitq_locked+0x3e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   336d2:	2c00      	cmp	r4, #0
   336d4:	d0f6      	beq.n	336c4 <add_to_waitq_locked+0x4c>
	return (node == list->tail) ? NULL : node->next;
   336d6:	6873      	ldr	r3, [r6, #4]
   336d8:	429c      	cmp	r4, r3
   336da:	d0f2      	beq.n	336c2 <add_to_waitq_locked+0x4a>
   336dc:	6824      	ldr	r4, [r4, #0]
   336de:	e7f1      	b.n	336c4 <add_to_waitq_locked+0x4c>
	sys_dnode_t *const tail = list->tail;
   336e0:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   336e2:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   336e4:	606b      	str	r3, [r5, #4]
	tail->next = node;
   336e6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   336e8:	6075      	str	r5, [r6, #4]
}
   336ea:	bd70      	pop	{r4, r5, r6, pc}
   336ec:	2000b980 	.word	0x2000b980
   336f0:	00046464 	.word	0x00046464
   336f4:	00046500 	.word	0x00046500
   336f8:	0003f72c 	.word	0x0003f72c

000336fc <z_pend_curr>:
{
   336fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pending_current = _current;
   336fe:	4b33      	ldr	r3, [pc, #204]	; (337cc <z_pend_curr+0xd0>)
   33700:	689d      	ldr	r5, [r3, #8]
   33702:	4b33      	ldr	r3, [pc, #204]	; (337d0 <z_pend_curr+0xd4>)
   33704:	601d      	str	r5, [r3, #0]
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   33706:	4b33      	ldr	r3, [pc, #204]	; (337d4 <z_pend_curr+0xd8>)
   33708:	4298      	cmp	r0, r3
   3370a:	d024      	beq.n	33756 <z_pend_curr+0x5a>
   3370c:	4604      	mov	r4, r0
   3370e:	460f      	mov	r7, r1
   33710:	4616      	mov	r6, r2
	__asm__ volatile(
   33712:	f04f 0220 	mov.w	r2, #32
   33716:	f3ef 8311 	mrs	r3, BASEPRI
   3371a:	f382 8812 	msr	BASEPRI_MAX, r2
   3371e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33722:	482c      	ldr	r0, [pc, #176]	; (337d4 <z_pend_curr+0xd8>)
   33724:	f7fd fe6a 	bl	313fc <z_spin_lock_valid>
   33728:	b310      	cbz	r0, 33770 <z_pend_curr+0x74>
	z_spin_lock_set_owner(l);
   3372a:	482a      	ldr	r0, [pc, #168]	; (337d4 <z_pend_curr+0xd8>)
   3372c:	f7fd fe86 	bl	3143c <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   33730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   33734:	4631      	mov	r1, r6
   33736:	4825      	ldr	r0, [pc, #148]	; (337cc <z_pend_curr+0xd0>)
   33738:	6880      	ldr	r0, [r0, #8]
   3373a:	f00b fa54 	bl	3ebe6 <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3373e:	4620      	mov	r0, r4
   33740:	f7fd fe6c 	bl	3141c <z_spin_unlock_valid>
   33744:	b318      	cbz	r0, 3378e <z_pend_curr+0x92>
   33746:	4823      	ldr	r0, [pc, #140]	; (337d4 <z_pend_curr+0xd8>)
   33748:	f7fd fe68 	bl	3141c <z_spin_unlock_valid>
   3374c:	b370      	cbz	r0, 337ac <z_pend_curr+0xb0>
   3374e:	4638      	mov	r0, r7
   33750:	f7e5 fe82 	bl	19458 <arch_swap>
}
   33754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   33756:	4c20      	ldr	r4, [pc, #128]	; (337d8 <z_pend_curr+0xdc>)
   33758:	f240 334e 	movw	r3, #846	; 0x34e
   3375c:	4622      	mov	r2, r4
   3375e:	491f      	ldr	r1, [pc, #124]	; (337dc <z_pend_curr+0xe0>)
   33760:	481f      	ldr	r0, [pc, #124]	; (337e0 <z_pend_curr+0xe4>)
   33762:	f002 fd97 	bl	36294 <assert_print>
   33766:	f240 314e 	movw	r1, #846	; 0x34e
   3376a:	4620      	mov	r0, r4
   3376c:	f002 fd8b 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33770:	4c1c      	ldr	r4, [pc, #112]	; (337e4 <z_pend_curr+0xe8>)
   33772:	2394      	movs	r3, #148	; 0x94
   33774:	4622      	mov	r2, r4
   33776:	491c      	ldr	r1, [pc, #112]	; (337e8 <z_pend_curr+0xec>)
   33778:	4819      	ldr	r0, [pc, #100]	; (337e0 <z_pend_curr+0xe4>)
   3377a:	f002 fd8b 	bl	36294 <assert_print>
   3377e:	4915      	ldr	r1, [pc, #84]	; (337d4 <z_pend_curr+0xd8>)
   33780:	481a      	ldr	r0, [pc, #104]	; (337ec <z_pend_curr+0xf0>)
   33782:	f002 fd87 	bl	36294 <assert_print>
   33786:	2194      	movs	r1, #148	; 0x94
   33788:	4620      	mov	r0, r4
   3378a:	f002 fd7c 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3378e:	4d15      	ldr	r5, [pc, #84]	; (337e4 <z_pend_curr+0xe8>)
   33790:	23e1      	movs	r3, #225	; 0xe1
   33792:	462a      	mov	r2, r5
   33794:	4916      	ldr	r1, [pc, #88]	; (337f0 <z_pend_curr+0xf4>)
   33796:	4812      	ldr	r0, [pc, #72]	; (337e0 <z_pend_curr+0xe4>)
   33798:	f002 fd7c 	bl	36294 <assert_print>
   3379c:	4621      	mov	r1, r4
   3379e:	4815      	ldr	r0, [pc, #84]	; (337f4 <z_pend_curr+0xf8>)
   337a0:	f002 fd78 	bl	36294 <assert_print>
   337a4:	21e1      	movs	r1, #225	; 0xe1
   337a6:	4628      	mov	r0, r5
   337a8:	f002 fd6d 	bl	36286 <assert_post_action>
   337ac:	4c0d      	ldr	r4, [pc, #52]	; (337e4 <z_pend_curr+0xe8>)
   337ae:	23e1      	movs	r3, #225	; 0xe1
   337b0:	4622      	mov	r2, r4
   337b2:	490f      	ldr	r1, [pc, #60]	; (337f0 <z_pend_curr+0xf4>)
   337b4:	480a      	ldr	r0, [pc, #40]	; (337e0 <z_pend_curr+0xe4>)
   337b6:	f002 fd6d 	bl	36294 <assert_print>
   337ba:	4906      	ldr	r1, [pc, #24]	; (337d4 <z_pend_curr+0xd8>)
   337bc:	480d      	ldr	r0, [pc, #52]	; (337f4 <z_pend_curr+0xf8>)
   337be:	f002 fd69 	bl	36294 <assert_print>
   337c2:	21e1      	movs	r1, #225	; 0xe1
   337c4:	4620      	mov	r0, r4
   337c6:	f002 fd5e 	bl	36286 <assert_post_action>
   337ca:	bf00      	nop
   337cc:	2000ca40 	.word	0x2000ca40
   337d0:	2000ca84 	.word	0x2000ca84
   337d4:	2000ca90 	.word	0x2000ca90
   337d8:	00046464 	.word	0x00046464
   337dc:	0004654c 	.word	0x0004654c
   337e0:	0003f72c 	.word	0x0003f72c
   337e4:	00040b28 	.word	0x00040b28
   337e8:	00040b88 	.word	0x00040b88
   337ec:	00040ba0 	.word	0x00040ba0
   337f0:	00040b58 	.word	0x00040b58
   337f4:	00040b70 	.word	0x00040b70

000337f8 <z_set_prio>:
{
   337f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   337fc:	4605      	mov	r5, r0
   337fe:	460f      	mov	r7, r1
   33800:	f04f 0320 	mov.w	r3, #32
   33804:	f3ef 8811 	mrs	r8, BASEPRI
   33808:	f383 8812 	msr	BASEPRI_MAX, r3
   3380c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33810:	4841      	ldr	r0, [pc, #260]	; (33918 <z_set_prio+0x120>)
   33812:	f7fd fdf3 	bl	313fc <z_spin_lock_valid>
   33816:	b130      	cbz	r0, 33826 <z_set_prio+0x2e>
   33818:	2400      	movs	r4, #0
   3381a:	4681      	mov	r9, r0
	z_spin_lock_set_owner(l);
   3381c:	483e      	ldr	r0, [pc, #248]	; (33918 <z_set_prio+0x120>)
   3381e:	f7fd fe0d 	bl	3143c <z_spin_lock_set_owner>
	bool need_sched = 0;
   33822:	2600      	movs	r6, #0
	return k;
   33824:	e047      	b.n	338b6 <z_set_prio+0xbe>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33826:	4c3d      	ldr	r4, [pc, #244]	; (3391c <z_set_prio+0x124>)
   33828:	2394      	movs	r3, #148	; 0x94
   3382a:	4622      	mov	r2, r4
   3382c:	493c      	ldr	r1, [pc, #240]	; (33920 <z_set_prio+0x128>)
   3382e:	483d      	ldr	r0, [pc, #244]	; (33924 <z_set_prio+0x12c>)
   33830:	f002 fd30 	bl	36294 <assert_print>
   33834:	4938      	ldr	r1, [pc, #224]	; (33918 <z_set_prio+0x120>)
   33836:	483c      	ldr	r0, [pc, #240]	; (33928 <z_set_prio+0x130>)
   33838:	f002 fd2c 	bl	36294 <assert_print>
   3383c:	2194      	movs	r1, #148	; 0x94
   3383e:	4620      	mov	r0, r4
   33840:	f002 fd21 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33844:	4c39      	ldr	r4, [pc, #228]	; (3392c <z_set_prio+0x134>)
   33846:	23ba      	movs	r3, #186	; 0xba
   33848:	4622      	mov	r2, r4
   3384a:	4939      	ldr	r1, [pc, #228]	; (33930 <z_set_prio+0x138>)
   3384c:	4835      	ldr	r0, [pc, #212]	; (33924 <z_set_prio+0x12c>)
   3384e:	f002 fd21 	bl	36294 <assert_print>
   33852:	21ba      	movs	r1, #186	; 0xba
   33854:	4620      	mov	r0, r4
   33856:	f002 fd16 	bl	36286 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   3385a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   3385c:	606b      	str	r3, [r5, #4]
	node->next = successor;
   3385e:	602c      	str	r4, [r5, #0]
	prev->next = node;
   33860:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   33862:	6065      	str	r5, [r4, #4]
}
   33864:	e017      	b.n	33896 <z_set_prio+0x9e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33866:	4634      	mov	r4, r6
   33868:	b16c      	cbz	r4, 33886 <z_set_prio+0x8e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   3386a:	4621      	mov	r1, r4
   3386c:	4628      	mov	r0, r5
   3386e:	f00b f96c 	bl	3eb4a <z_sched_prio_cmp>
   33872:	2800      	cmp	r0, #0
   33874:	dcf1      	bgt.n	3385a <z_set_prio+0x62>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   33876:	2c00      	cmp	r4, #0
   33878:	d0f6      	beq.n	33868 <z_set_prio+0x70>
	return (node == list->tail) ? NULL : node->next;
   3387a:	4b2e      	ldr	r3, [pc, #184]	; (33934 <z_set_prio+0x13c>)
   3387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3387e:	429c      	cmp	r4, r3
   33880:	d0f1      	beq.n	33866 <z_set_prio+0x6e>
   33882:	6824      	ldr	r4, [r4, #0]
   33884:	e7f0      	b.n	33868 <z_set_prio+0x70>
	sys_dnode_t *const tail = list->tail;
   33886:	4b2b      	ldr	r3, [pc, #172]	; (33934 <z_set_prio+0x13c>)
   33888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   3388a:	f103 0120 	add.w	r1, r3, #32
   3388e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   33890:	606a      	str	r2, [r5, #4]
	tail->next = node;
   33892:	6015      	str	r5, [r2, #0]
	list->tail = node;
   33894:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
   33896:	2001      	movs	r0, #1
   33898:	f7ff fc3a 	bl	33110 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3389c:	464e      	mov	r6, r9
   3389e:	e001      	b.n	338a4 <z_set_prio+0xac>
			thread->base.prio = prio;
   338a0:	73af      	strb	r7, [r5, #14]
   338a2:	2600      	movs	r6, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   338a4:	481c      	ldr	r0, [pc, #112]	; (33918 <z_set_prio+0x120>)
   338a6:	f7fd fdb9 	bl	3141c <z_spin_unlock_valid>
   338aa:	b310      	cbz	r0, 338f2 <z_set_prio+0xfa>
	__asm__ volatile(
   338ac:	f388 8811 	msr	BASEPRI, r8
   338b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   338b4:	2401      	movs	r4, #1
   338b6:	bb5c      	cbnz	r4, 33910 <z_set_prio+0x118>
	uint8_t state = thread->base.thread_state;
   338b8:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   338ba:	f013 0f1f 	tst.w	r3, #31
   338be:	d1ef      	bne.n	338a0 <z_set_prio+0xa8>
	return node->next != NULL;
   338c0:	69ae      	ldr	r6, [r5, #24]
   338c2:	2e00      	cmp	r6, #0
   338c4:	d1ec      	bne.n	338a0 <z_set_prio+0xa8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   338c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   338ca:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
   338cc:	4629      	mov	r1, r5
   338ce:	481a      	ldr	r0, [pc, #104]	; (33938 <z_set_prio+0x140>)
   338d0:	f7ff fbaa 	bl	33028 <z_priq_dumb_remove>
				thread->base.prio = prio;
   338d4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   338d6:	7b6b      	ldrb	r3, [r5, #13]
   338d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   338dc:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   338de:	4b17      	ldr	r3, [pc, #92]	; (3393c <z_set_prio+0x144>)
   338e0:	429d      	cmp	r5, r3
   338e2:	d0af      	beq.n	33844 <z_set_prio+0x4c>
	return list->head == list;
   338e4:	4b13      	ldr	r3, [pc, #76]	; (33934 <z_set_prio+0x13c>)
   338e6:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   338ea:	429c      	cmp	r4, r3
   338ec:	d1bc      	bne.n	33868 <z_set_prio+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   338ee:	4634      	mov	r4, r6
   338f0:	e7ba      	b.n	33868 <z_set_prio+0x70>
   338f2:	4c0a      	ldr	r4, [pc, #40]	; (3391c <z_set_prio+0x124>)
   338f4:	23c2      	movs	r3, #194	; 0xc2
   338f6:	4622      	mov	r2, r4
   338f8:	4911      	ldr	r1, [pc, #68]	; (33940 <z_set_prio+0x148>)
   338fa:	480a      	ldr	r0, [pc, #40]	; (33924 <z_set_prio+0x12c>)
   338fc:	f002 fcca 	bl	36294 <assert_print>
   33900:	4905      	ldr	r1, [pc, #20]	; (33918 <z_set_prio+0x120>)
   33902:	4810      	ldr	r0, [pc, #64]	; (33944 <z_set_prio+0x14c>)
   33904:	f002 fcc6 	bl	36294 <assert_print>
   33908:	21c2      	movs	r1, #194	; 0xc2
   3390a:	4620      	mov	r0, r4
   3390c:	f002 fcbb 	bl	36286 <assert_post_action>
}
   33910:	4630      	mov	r0, r6
   33912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   33916:	bf00      	nop
   33918:	2000ca90 	.word	0x2000ca90
   3391c:	00040b28 	.word	0x00040b28
   33920:	00040b88 	.word	0x00040b88
   33924:	0003f72c 	.word	0x0003f72c
   33928:	00040ba0 	.word	0x00040ba0
   3392c:	00046464 	.word	0x00046464
   33930:	00046500 	.word	0x00046500
   33934:	2000ca40 	.word	0x2000ca40
   33938:	2000ca60 	.word	0x2000ca60
   3393c:	2000b980 	.word	0x2000b980
   33940:	00040b58 	.word	0x00040b58
   33944:	00040b70 	.word	0x00040b70

00033948 <z_impl_k_thread_suspend>:
{
   33948:	b570      	push	{r4, r5, r6, lr}
   3394a:	4604      	mov	r4, r0
   3394c:	3018      	adds	r0, #24
   3394e:	f000 fe41 	bl	345d4 <z_abort_timeout>
	__asm__ volatile(
   33952:	f04f 0320 	mov.w	r3, #32
   33956:	f3ef 8611 	mrs	r6, BASEPRI
   3395a:	f383 8812 	msr	BASEPRI_MAX, r3
   3395e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33962:	4829      	ldr	r0, [pc, #164]	; (33a08 <z_impl_k_thread_suspend+0xc0>)
   33964:	f7fd fd4a 	bl	313fc <z_spin_lock_valid>
   33968:	b120      	cbz	r0, 33974 <z_impl_k_thread_suspend+0x2c>
   3396a:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   3396c:	4826      	ldr	r0, [pc, #152]	; (33a08 <z_impl_k_thread_suspend+0xc0>)
   3396e:	f7fd fd65 	bl	3143c <z_spin_lock_set_owner>
	return k;
   33972:	e023      	b.n	339bc <z_impl_k_thread_suspend+0x74>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33974:	4c25      	ldr	r4, [pc, #148]	; (33a0c <z_impl_k_thread_suspend+0xc4>)
   33976:	2394      	movs	r3, #148	; 0x94
   33978:	4622      	mov	r2, r4
   3397a:	4925      	ldr	r1, [pc, #148]	; (33a10 <z_impl_k_thread_suspend+0xc8>)
   3397c:	4825      	ldr	r0, [pc, #148]	; (33a14 <z_impl_k_thread_suspend+0xcc>)
   3397e:	f002 fc89 	bl	36294 <assert_print>
   33982:	4921      	ldr	r1, [pc, #132]	; (33a08 <z_impl_k_thread_suspend+0xc0>)
   33984:	4824      	ldr	r0, [pc, #144]	; (33a18 <z_impl_k_thread_suspend+0xd0>)
   33986:	f002 fc85 	bl	36294 <assert_print>
   3398a:	2194      	movs	r1, #148	; 0x94
   3398c:	4620      	mov	r0, r4
   3398e:	f002 fc7a 	bl	36286 <assert_post_action>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   33992:	7b63      	ldrb	r3, [r4, #13]
   33994:	f043 0310 	orr.w	r3, r3, #16
   33998:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   3399a:	4b20      	ldr	r3, [pc, #128]	; (33a1c <z_impl_k_thread_suspend+0xd4>)
   3399c:	6898      	ldr	r0, [r3, #8]
   3399e:	42a0      	cmp	r0, r4
   339a0:	bf14      	ite	ne
   339a2:	2000      	movne	r0, #0
   339a4:	2001      	moveq	r0, #1
   339a6:	f7ff fbb3 	bl	33110 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   339aa:	4817      	ldr	r0, [pc, #92]	; (33a08 <z_impl_k_thread_suspend+0xc0>)
   339ac:	f7fd fd36 	bl	3141c <z_spin_unlock_valid>
   339b0:	b190      	cbz	r0, 339d8 <z_impl_k_thread_suspend+0x90>
	__asm__ volatile(
   339b2:	f386 8811 	msr	BASEPRI, r6
   339b6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   339ba:	2501      	movs	r5, #1
   339bc:	b9dd      	cbnz	r5, 339f6 <z_impl_k_thread_suspend+0xae>
	return (thread->base.thread_state & state) != 0U;
   339be:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   339c0:	f994 300d 	ldrsb.w	r3, [r4, #13]
   339c4:	2b00      	cmp	r3, #0
   339c6:	dae4      	bge.n	33992 <z_impl_k_thread_suspend+0x4a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   339c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   339cc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   339ce:	4621      	mov	r1, r4
   339d0:	4813      	ldr	r0, [pc, #76]	; (33a20 <z_impl_k_thread_suspend+0xd8>)
   339d2:	f7ff fb29 	bl	33028 <z_priq_dumb_remove>
}
   339d6:	e7dc      	b.n	33992 <z_impl_k_thread_suspend+0x4a>
   339d8:	4c0c      	ldr	r4, [pc, #48]	; (33a0c <z_impl_k_thread_suspend+0xc4>)
   339da:	23c2      	movs	r3, #194	; 0xc2
   339dc:	4622      	mov	r2, r4
   339de:	4911      	ldr	r1, [pc, #68]	; (33a24 <z_impl_k_thread_suspend+0xdc>)
   339e0:	480c      	ldr	r0, [pc, #48]	; (33a14 <z_impl_k_thread_suspend+0xcc>)
   339e2:	f002 fc57 	bl	36294 <assert_print>
   339e6:	4908      	ldr	r1, [pc, #32]	; (33a08 <z_impl_k_thread_suspend+0xc0>)
   339e8:	480f      	ldr	r0, [pc, #60]	; (33a28 <z_impl_k_thread_suspend+0xe0>)
   339ea:	f002 fc53 	bl	36294 <assert_print>
   339ee:	21c2      	movs	r1, #194	; 0xc2
   339f0:	4620      	mov	r0, r4
   339f2:	f002 fc48 	bl	36286 <assert_post_action>
	if (thread == _current) {
   339f6:	4b09      	ldr	r3, [pc, #36]	; (33a1c <z_impl_k_thread_suspend+0xd4>)
   339f8:	689b      	ldr	r3, [r3, #8]
   339fa:	42a3      	cmp	r3, r4
   339fc:	d000      	beq.n	33a00 <z_impl_k_thread_suspend+0xb8>
}
   339fe:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule_unlocked();
   33a00:	f00b f8bb 	bl	3eb7a <z_reschedule_unlocked>
}
   33a04:	e7fb      	b.n	339fe <z_impl_k_thread_suspend+0xb6>
   33a06:	bf00      	nop
   33a08:	2000ca90 	.word	0x2000ca90
   33a0c:	00040b28 	.word	0x00040b28
   33a10:	00040b88 	.word	0x00040b88
   33a14:	0003f72c 	.word	0x0003f72c
   33a18:	00040ba0 	.word	0x00040ba0
   33a1c:	2000ca40 	.word	0x2000ca40
   33a20:	2000ca60 	.word	0x2000ca60
   33a24:	00040b58 	.word	0x00040b58
   33a28:	00040b70 	.word	0x00040b70

00033a2c <k_sched_unlock>:
{
   33a2c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   33a2e:	f04f 0320 	mov.w	r3, #32
   33a32:	f3ef 8511 	mrs	r5, BASEPRI
   33a36:	f383 8812 	msr	BASEPRI_MAX, r3
   33a3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33a3e:	4831      	ldr	r0, [pc, #196]	; (33b04 <k_sched_unlock+0xd8>)
   33a40:	f7fd fcdc 	bl	313fc <z_spin_lock_valid>
   33a44:	b120      	cbz	r0, 33a50 <k_sched_unlock+0x24>
   33a46:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   33a48:	482e      	ldr	r0, [pc, #184]	; (33b04 <k_sched_unlock+0xd8>)
   33a4a:	f7fd fcf7 	bl	3143c <z_spin_lock_set_owner>
	return k;
   33a4e:	e033      	b.n	33ab8 <k_sched_unlock+0x8c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33a50:	4c2d      	ldr	r4, [pc, #180]	; (33b08 <k_sched_unlock+0xdc>)
   33a52:	2394      	movs	r3, #148	; 0x94
   33a54:	4622      	mov	r2, r4
   33a56:	492d      	ldr	r1, [pc, #180]	; (33b0c <k_sched_unlock+0xe0>)
   33a58:	482d      	ldr	r0, [pc, #180]	; (33b10 <k_sched_unlock+0xe4>)
   33a5a:	f002 fc1b 	bl	36294 <assert_print>
   33a5e:	4929      	ldr	r1, [pc, #164]	; (33b04 <k_sched_unlock+0xd8>)
   33a60:	482c      	ldr	r0, [pc, #176]	; (33b14 <k_sched_unlock+0xe8>)
   33a62:	f002 fc17 	bl	36294 <assert_print>
   33a66:	2194      	movs	r1, #148	; 0x94
   33a68:	4620      	mov	r0, r4
   33a6a:	f002 fc0c 	bl	36286 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   33a6e:	4c2a      	ldr	r4, [pc, #168]	; (33b18 <k_sched_unlock+0xec>)
   33a70:	f240 33e7 	movw	r3, #999	; 0x3e7
   33a74:	4622      	mov	r2, r4
   33a76:	4929      	ldr	r1, [pc, #164]	; (33b1c <k_sched_unlock+0xf0>)
   33a78:	4825      	ldr	r0, [pc, #148]	; (33b10 <k_sched_unlock+0xe4>)
   33a7a:	f002 fc0b 	bl	36294 <assert_print>
   33a7e:	4828      	ldr	r0, [pc, #160]	; (33b20 <k_sched_unlock+0xf4>)
   33a80:	f002 fc08 	bl	36294 <assert_print>
   33a84:	f240 31e7 	movw	r1, #999	; 0x3e7
   33a88:	4620      	mov	r0, r4
   33a8a:	f002 fbfc 	bl	36286 <assert_post_action>
		__ASSERT(!arch_is_in_isr(), "");
   33a8e:	4c22      	ldr	r4, [pc, #136]	; (33b18 <k_sched_unlock+0xec>)
   33a90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   33a94:	4622      	mov	r2, r4
   33a96:	4923      	ldr	r1, [pc, #140]	; (33b24 <k_sched_unlock+0xf8>)
   33a98:	481d      	ldr	r0, [pc, #116]	; (33b10 <k_sched_unlock+0xe4>)
   33a9a:	f002 fbfb 	bl	36294 <assert_print>
   33a9e:	4820      	ldr	r0, [pc, #128]	; (33b20 <k_sched_unlock+0xf4>)
   33aa0:	f002 fbf8 	bl	36294 <assert_print>
   33aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   33aa8:	4620      	mov	r0, r4
   33aaa:	f002 fbec 	bl	36286 <assert_post_action>
	__asm__ volatile(
   33aae:	f385 8811 	msr	BASEPRI, r5
   33ab2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   33ab6:	2401      	movs	r4, #1
   33ab8:	bb0c      	cbnz	r4, 33afe <k_sched_unlock+0xd2>
		__ASSERT(_current->base.sched_locked != 0U, "");
   33aba:	4b1b      	ldr	r3, [pc, #108]	; (33b28 <k_sched_unlock+0xfc>)
   33abc:	689a      	ldr	r2, [r3, #8]
   33abe:	7bd3      	ldrb	r3, [r2, #15]
   33ac0:	2b00      	cmp	r3, #0
   33ac2:	d0d4      	beq.n	33a6e <k_sched_unlock+0x42>
   33ac4:	f3ef 8105 	mrs	r1, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   33ac8:	2900      	cmp	r1, #0
   33aca:	d1e0      	bne.n	33a8e <k_sched_unlock+0x62>
		++_current->base.sched_locked;
   33acc:	3301      	adds	r3, #1
   33ace:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   33ad0:	2000      	movs	r0, #0
   33ad2:	f7ff fb1d 	bl	33110 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33ad6:	480b      	ldr	r0, [pc, #44]	; (33b04 <k_sched_unlock+0xd8>)
   33ad8:	f7fd fca0 	bl	3141c <z_spin_unlock_valid>
   33adc:	2800      	cmp	r0, #0
   33ade:	d1e6      	bne.n	33aae <k_sched_unlock+0x82>
   33ae0:	4c09      	ldr	r4, [pc, #36]	; (33b08 <k_sched_unlock+0xdc>)
   33ae2:	23c2      	movs	r3, #194	; 0xc2
   33ae4:	4622      	mov	r2, r4
   33ae6:	4911      	ldr	r1, [pc, #68]	; (33b2c <k_sched_unlock+0x100>)
   33ae8:	4809      	ldr	r0, [pc, #36]	; (33b10 <k_sched_unlock+0xe4>)
   33aea:	f002 fbd3 	bl	36294 <assert_print>
   33aee:	4905      	ldr	r1, [pc, #20]	; (33b04 <k_sched_unlock+0xd8>)
   33af0:	480f      	ldr	r0, [pc, #60]	; (33b30 <k_sched_unlock+0x104>)
   33af2:	f002 fbcf 	bl	36294 <assert_print>
   33af6:	21c2      	movs	r1, #194	; 0xc2
   33af8:	4620      	mov	r0, r4
   33afa:	f002 fbc4 	bl	36286 <assert_post_action>
	z_reschedule_unlocked();
   33afe:	f00b f83c 	bl	3eb7a <z_reschedule_unlocked>
}
   33b02:	bd38      	pop	{r3, r4, r5, pc}
   33b04:	2000ca90 	.word	0x2000ca90
   33b08:	00040b28 	.word	0x00040b28
   33b0c:	00040b88 	.word	0x00040b88
   33b10:	0003f72c 	.word	0x0003f72c
   33b14:	00040ba0 	.word	0x00040ba0
   33b18:	00046464 	.word	0x00046464
   33b1c:	00046584 	.word	0x00046584
   33b20:	00044634 	.word	0x00044634
   33b24:	000461a8 	.word	0x000461a8
   33b28:	2000ca40 	.word	0x2000ca40
   33b2c:	00040b58 	.word	0x00040b58
   33b30:	00040b70 	.word	0x00040b70

00033b34 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   33b34:	7b43      	ldrb	r3, [r0, #13]
   33b36:	f013 0f08 	tst.w	r3, #8
   33b3a:	d12a      	bne.n	33b92 <end_thread+0x5e>
{
   33b3c:	b510      	push	{r4, lr}
   33b3e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
   33b40:	f043 0208 	orr.w	r2, r3, #8
   33b44:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
   33b46:	f023 0220 	bic.w	r2, r3, #32
   33b4a:	f042 0208 	orr.w	r2, r2, #8
   33b4e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
   33b50:	f012 0f80 	tst.w	r2, #128	; 0x80
   33b54:	d113      	bne.n	33b7e <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   33b56:	68a3      	ldr	r3, [r4, #8]
   33b58:	b113      	cbz	r3, 33b60 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
   33b5a:	4620      	mov	r0, r4
   33b5c:	f00b f819 	bl	3eb92 <unpend_thread_no_timeout>
   33b60:	f104 0018 	add.w	r0, r4, #24
   33b64:	f000 fd36 	bl	345d4 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   33b68:	f104 0058 	add.w	r0, r4, #88	; 0x58
   33b6c:	f00b f826 	bl	3ebbc <unpend_all>
		update_cache(1);
   33b70:	2001      	movs	r0, #1
   33b72:	f7ff facd 	bl	33110 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   33b76:	4620      	mov	r0, r4
   33b78:	f7fd fc68 	bl	3144c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   33b7c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33b7e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   33b82:	f043 0308 	orr.w	r3, r3, #8
   33b86:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33b88:	4601      	mov	r1, r0
   33b8a:	4802      	ldr	r0, [pc, #8]	; (33b94 <end_thread+0x60>)
   33b8c:	f7ff fa4c 	bl	33028 <z_priq_dumb_remove>
}
   33b90:	e7e1      	b.n	33b56 <end_thread+0x22>
   33b92:	4770      	bx	lr
   33b94:	2000ca60 	.word	0x2000ca60

00033b98 <z_unpend1_no_timeout>:
{
   33b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33b9a:	4606      	mov	r6, r0
	__asm__ volatile(
   33b9c:	f04f 0320 	mov.w	r3, #32
   33ba0:	f3ef 8711 	mrs	r7, BASEPRI
   33ba4:	f383 8812 	msr	BASEPRI_MAX, r3
   33ba8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33bac:	481e      	ldr	r0, [pc, #120]	; (33c28 <z_unpend1_no_timeout+0x90>)
   33bae:	f7fd fc25 	bl	313fc <z_spin_lock_valid>
   33bb2:	b128      	cbz	r0, 33bc0 <z_unpend1_no_timeout+0x28>
   33bb4:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   33bb6:	481c      	ldr	r0, [pc, #112]	; (33c28 <z_unpend1_no_timeout+0x90>)
   33bb8:	f7fd fc40 	bl	3143c <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   33bbc:	2500      	movs	r5, #0
	return k;
   33bbe:	e019      	b.n	33bf4 <z_unpend1_no_timeout+0x5c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33bc0:	4c1a      	ldr	r4, [pc, #104]	; (33c2c <z_unpend1_no_timeout+0x94>)
   33bc2:	2394      	movs	r3, #148	; 0x94
   33bc4:	4622      	mov	r2, r4
   33bc6:	491a      	ldr	r1, [pc, #104]	; (33c30 <z_unpend1_no_timeout+0x98>)
   33bc8:	481a      	ldr	r0, [pc, #104]	; (33c34 <z_unpend1_no_timeout+0x9c>)
   33bca:	f002 fb63 	bl	36294 <assert_print>
   33bce:	4916      	ldr	r1, [pc, #88]	; (33c28 <z_unpend1_no_timeout+0x90>)
   33bd0:	4819      	ldr	r0, [pc, #100]	; (33c38 <z_unpend1_no_timeout+0xa0>)
   33bd2:	f002 fb5f 	bl	36294 <assert_print>
   33bd6:	2194      	movs	r1, #148	; 0x94
   33bd8:	4620      	mov	r0, r4
   33bda:	f002 fb54 	bl	36286 <assert_post_action>
			unpend_thread_no_timeout(thread);
   33bde:	f00a ffd8 	bl	3eb92 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33be2:	4811      	ldr	r0, [pc, #68]	; (33c28 <z_unpend1_no_timeout+0x90>)
   33be4:	f7fd fc1a 	bl	3141c <z_spin_unlock_valid>
   33be8:	b160      	cbz	r0, 33c04 <z_unpend1_no_timeout+0x6c>
	__asm__ volatile(
   33bea:	f387 8811 	msr	BASEPRI, r7
   33bee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   33bf2:	2401      	movs	r4, #1
   33bf4:	b9ac      	cbnz	r4, 33c22 <z_unpend1_no_timeout+0x8a>
		thread = _priq_wait_best(&wait_q->waitq);
   33bf6:	4630      	mov	r0, r6
   33bf8:	f00a ffd9 	bl	3ebae <z_priq_dumb_best>
		if (thread != NULL) {
   33bfc:	4605      	mov	r5, r0
   33bfe:	2800      	cmp	r0, #0
   33c00:	d1ed      	bne.n	33bde <z_unpend1_no_timeout+0x46>
   33c02:	e7ee      	b.n	33be2 <z_unpend1_no_timeout+0x4a>
   33c04:	4c09      	ldr	r4, [pc, #36]	; (33c2c <z_unpend1_no_timeout+0x94>)
   33c06:	23c2      	movs	r3, #194	; 0xc2
   33c08:	4622      	mov	r2, r4
   33c0a:	490c      	ldr	r1, [pc, #48]	; (33c3c <z_unpend1_no_timeout+0xa4>)
   33c0c:	4809      	ldr	r0, [pc, #36]	; (33c34 <z_unpend1_no_timeout+0x9c>)
   33c0e:	f002 fb41 	bl	36294 <assert_print>
   33c12:	4905      	ldr	r1, [pc, #20]	; (33c28 <z_unpend1_no_timeout+0x90>)
   33c14:	480a      	ldr	r0, [pc, #40]	; (33c40 <z_unpend1_no_timeout+0xa8>)
   33c16:	f002 fb3d 	bl	36294 <assert_print>
   33c1a:	21c2      	movs	r1, #194	; 0xc2
   33c1c:	4620      	mov	r0, r4
   33c1e:	f002 fb32 	bl	36286 <assert_post_action>
}
   33c22:	4628      	mov	r0, r5
   33c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33c26:	bf00      	nop
   33c28:	2000ca90 	.word	0x2000ca90
   33c2c:	00040b28 	.word	0x00040b28
   33c30:	00040b88 	.word	0x00040b88
   33c34:	0003f72c 	.word	0x0003f72c
   33c38:	00040ba0 	.word	0x00040ba0
   33c3c:	00040b58 	.word	0x00040b58
   33c40:	00040b70 	.word	0x00040b70

00033c44 <z_unpend_first_thread>:
{
   33c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33c46:	4606      	mov	r6, r0
	__asm__ volatile(
   33c48:	f04f 0320 	mov.w	r3, #32
   33c4c:	f3ef 8711 	mrs	r7, BASEPRI
   33c50:	f383 8812 	msr	BASEPRI_MAX, r3
   33c54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33c58:	4820      	ldr	r0, [pc, #128]	; (33cdc <z_unpend_first_thread+0x98>)
   33c5a:	f7fd fbcf 	bl	313fc <z_spin_lock_valid>
   33c5e:	b128      	cbz	r0, 33c6c <z_unpend_first_thread+0x28>
   33c60:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   33c62:	481e      	ldr	r0, [pc, #120]	; (33cdc <z_unpend_first_thread+0x98>)
   33c64:	f7fd fbea 	bl	3143c <z_spin_lock_set_owner>
	struct k_thread *thread = NULL;
   33c68:	2400      	movs	r4, #0
	return k;
   33c6a:	e01d      	b.n	33ca8 <z_unpend_first_thread+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33c6c:	4c1c      	ldr	r4, [pc, #112]	; (33ce0 <z_unpend_first_thread+0x9c>)
   33c6e:	2394      	movs	r3, #148	; 0x94
   33c70:	4622      	mov	r2, r4
   33c72:	491c      	ldr	r1, [pc, #112]	; (33ce4 <z_unpend_first_thread+0xa0>)
   33c74:	481c      	ldr	r0, [pc, #112]	; (33ce8 <z_unpend_first_thread+0xa4>)
   33c76:	f002 fb0d 	bl	36294 <assert_print>
   33c7a:	4918      	ldr	r1, [pc, #96]	; (33cdc <z_unpend_first_thread+0x98>)
   33c7c:	481b      	ldr	r0, [pc, #108]	; (33cec <z_unpend_first_thread+0xa8>)
   33c7e:	f002 fb09 	bl	36294 <assert_print>
   33c82:	2194      	movs	r1, #148	; 0x94
   33c84:	4620      	mov	r0, r4
   33c86:	f002 fafe 	bl	36286 <assert_post_action>
			unpend_thread_no_timeout(thread);
   33c8a:	f00a ff82 	bl	3eb92 <unpend_thread_no_timeout>
   33c8e:	f104 0018 	add.w	r0, r4, #24
   33c92:	f000 fc9f 	bl	345d4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33c96:	4811      	ldr	r0, [pc, #68]	; (33cdc <z_unpend_first_thread+0x98>)
   33c98:	f7fd fbc0 	bl	3141c <z_spin_unlock_valid>
   33c9c:	b160      	cbz	r0, 33cb8 <z_unpend_first_thread+0x74>
	__asm__ volatile(
   33c9e:	f387 8811 	msr	BASEPRI, r7
   33ca2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   33ca6:	2501      	movs	r5, #1
   33ca8:	b9ad      	cbnz	r5, 33cd6 <z_unpend_first_thread+0x92>
		thread = _priq_wait_best(&wait_q->waitq);
   33caa:	4630      	mov	r0, r6
   33cac:	f00a ff7f 	bl	3ebae <z_priq_dumb_best>
		if (thread != NULL) {
   33cb0:	4604      	mov	r4, r0
   33cb2:	2800      	cmp	r0, #0
   33cb4:	d1e9      	bne.n	33c8a <z_unpend_first_thread+0x46>
   33cb6:	e7ee      	b.n	33c96 <z_unpend_first_thread+0x52>
   33cb8:	4c09      	ldr	r4, [pc, #36]	; (33ce0 <z_unpend_first_thread+0x9c>)
   33cba:	23c2      	movs	r3, #194	; 0xc2
   33cbc:	4622      	mov	r2, r4
   33cbe:	490c      	ldr	r1, [pc, #48]	; (33cf0 <z_unpend_first_thread+0xac>)
   33cc0:	4809      	ldr	r0, [pc, #36]	; (33ce8 <z_unpend_first_thread+0xa4>)
   33cc2:	f002 fae7 	bl	36294 <assert_print>
   33cc6:	4905      	ldr	r1, [pc, #20]	; (33cdc <z_unpend_first_thread+0x98>)
   33cc8:	480a      	ldr	r0, [pc, #40]	; (33cf4 <z_unpend_first_thread+0xb0>)
   33cca:	f002 fae3 	bl	36294 <assert_print>
   33cce:	21c2      	movs	r1, #194	; 0xc2
   33cd0:	4620      	mov	r0, r4
   33cd2:	f002 fad8 	bl	36286 <assert_post_action>
}
   33cd6:	4620      	mov	r0, r4
   33cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33cda:	bf00      	nop
   33cdc:	2000ca90 	.word	0x2000ca90
   33ce0:	00040b28 	.word	0x00040b28
   33ce4:	00040b88 	.word	0x00040b88
   33ce8:	0003f72c 	.word	0x0003f72c
   33cec:	00040ba0 	.word	0x00040ba0
   33cf0:	00040b58 	.word	0x00040b58
   33cf4:	00040b70 	.word	0x00040b70

00033cf8 <z_sched_init>:
{
   33cf8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   33cfa:	4804      	ldr	r0, [pc, #16]	; (33d0c <z_sched_init+0x14>)
   33cfc:	f00a ff8f 	bl	3ec1e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   33d00:	2100      	movs	r1, #0
   33d02:	4608      	mov	r0, r1
   33d04:	f7ff f842 	bl	32d8c <k_sched_time_slice_set>
}
   33d08:	bd08      	pop	{r3, pc}
   33d0a:	bf00      	nop
   33d0c:	2000ca5c 	.word	0x2000ca5c

00033d10 <z_impl_k_yield>:
{
   33d10:	b570      	push	{r4, r5, r6, lr}
   33d12:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   33d16:	bb3b      	cbnz	r3, 33d68 <z_impl_k_yield+0x58>
	__asm__ volatile(
   33d18:	f04f 0320 	mov.w	r3, #32
   33d1c:	f3ef 8611 	mrs	r6, BASEPRI
   33d20:	f383 8812 	msr	BASEPRI_MAX, r3
   33d24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33d28:	4840      	ldr	r0, [pc, #256]	; (33e2c <z_impl_k_yield+0x11c>)
   33d2a:	f7fd fb67 	bl	313fc <z_spin_lock_valid>
   33d2e:	b358      	cbz	r0, 33d88 <z_impl_k_yield+0x78>
	z_spin_lock_set_owner(l);
   33d30:	483e      	ldr	r0, [pc, #248]	; (33e2c <z_impl_k_yield+0x11c>)
   33d32:	f7fd fb83 	bl	3143c <z_spin_lock_set_owner>
		dequeue_thread(_current);
   33d36:	4c3e      	ldr	r4, [pc, #248]	; (33e30 <z_impl_k_yield+0x120>)
   33d38:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   33d3a:	7b4b      	ldrb	r3, [r1, #13]
   33d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   33d40:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   33d42:	f104 0020 	add.w	r0, r4, #32
   33d46:	f7ff f96f 	bl	33028 <z_priq_dumb_remove>
	queue_thread(_current);
   33d4a:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   33d4c:	7b6b      	ldrb	r3, [r5, #13]
   33d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   33d52:	736b      	strb	r3, [r5, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33d54:	4b37      	ldr	r3, [pc, #220]	; (33e34 <z_impl_k_yield+0x124>)
   33d56:	429d      	cmp	r5, r3
   33d58:	d025      	beq.n	33da6 <z_impl_k_yield+0x96>
	return list->head == list;
   33d5a:	4b35      	ldr	r3, [pc, #212]	; (33e30 <z_impl_k_yield+0x120>)
   33d5c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   33d60:	429c      	cmp	r4, r3
   33d62:	d132      	bne.n	33dca <z_impl_k_yield+0xba>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33d64:	2400      	movs	r4, #0
   33d66:	e030      	b.n	33dca <z_impl_k_yield+0xba>
	__ASSERT(!arch_is_in_isr(), "");
   33d68:	4c33      	ldr	r4, [pc, #204]	; (33e38 <z_impl_k_yield+0x128>)
   33d6a:	f44f 63ae 	mov.w	r3, #1392	; 0x570
   33d6e:	4622      	mov	r2, r4
   33d70:	4932      	ldr	r1, [pc, #200]	; (33e3c <z_impl_k_yield+0x12c>)
   33d72:	4833      	ldr	r0, [pc, #204]	; (33e40 <z_impl_k_yield+0x130>)
   33d74:	f002 fa8e 	bl	36294 <assert_print>
   33d78:	4832      	ldr	r0, [pc, #200]	; (33e44 <z_impl_k_yield+0x134>)
   33d7a:	f002 fa8b 	bl	36294 <assert_print>
   33d7e:	f44f 61ae 	mov.w	r1, #1392	; 0x570
   33d82:	4620      	mov	r0, r4
   33d84:	f002 fa7f 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33d88:	4c2f      	ldr	r4, [pc, #188]	; (33e48 <z_impl_k_yield+0x138>)
   33d8a:	2394      	movs	r3, #148	; 0x94
   33d8c:	4622      	mov	r2, r4
   33d8e:	492f      	ldr	r1, [pc, #188]	; (33e4c <z_impl_k_yield+0x13c>)
   33d90:	482b      	ldr	r0, [pc, #172]	; (33e40 <z_impl_k_yield+0x130>)
   33d92:	f002 fa7f 	bl	36294 <assert_print>
   33d96:	4925      	ldr	r1, [pc, #148]	; (33e2c <z_impl_k_yield+0x11c>)
   33d98:	482d      	ldr	r0, [pc, #180]	; (33e50 <z_impl_k_yield+0x140>)
   33d9a:	f002 fa7b 	bl	36294 <assert_print>
   33d9e:	2194      	movs	r1, #148	; 0x94
   33da0:	4620      	mov	r0, r4
   33da2:	f002 fa70 	bl	36286 <assert_post_action>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   33da6:	4c24      	ldr	r4, [pc, #144]	; (33e38 <z_impl_k_yield+0x128>)
   33da8:	23ba      	movs	r3, #186	; 0xba
   33daa:	4622      	mov	r2, r4
   33dac:	4929      	ldr	r1, [pc, #164]	; (33e54 <z_impl_k_yield+0x144>)
   33dae:	4824      	ldr	r0, [pc, #144]	; (33e40 <z_impl_k_yield+0x130>)
   33db0:	f002 fa70 	bl	36294 <assert_print>
   33db4:	21ba      	movs	r1, #186	; 0xba
   33db6:	4620      	mov	r0, r4
   33db8:	f002 fa65 	bl	36286 <assert_post_action>
	sys_dnode_t *const prev = successor->prev;
   33dbc:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   33dbe:	606b      	str	r3, [r5, #4]
	node->next = successor;
   33dc0:	602c      	str	r4, [r5, #0]
	prev->next = node;
   33dc2:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   33dc4:	6065      	str	r5, [r4, #4]
}
   33dc6:	e017      	b.n	33df8 <z_impl_k_yield+0xe8>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33dc8:	2400      	movs	r4, #0
   33dca:	b16c      	cbz	r4, 33de8 <z_impl_k_yield+0xd8>
		if (z_sched_prio_cmp(thread, t) > 0) {
   33dcc:	4621      	mov	r1, r4
   33dce:	4628      	mov	r0, r5
   33dd0:	f00a febb 	bl	3eb4a <z_sched_prio_cmp>
   33dd4:	2800      	cmp	r0, #0
   33dd6:	dcf1      	bgt.n	33dbc <z_impl_k_yield+0xac>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   33dd8:	2c00      	cmp	r4, #0
   33dda:	d0f6      	beq.n	33dca <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   33ddc:	4b14      	ldr	r3, [pc, #80]	; (33e30 <z_impl_k_yield+0x120>)
   33dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   33de0:	429c      	cmp	r4, r3
   33de2:	d0f1      	beq.n	33dc8 <z_impl_k_yield+0xb8>
   33de4:	6824      	ldr	r4, [r4, #0]
   33de6:	e7f0      	b.n	33dca <z_impl_k_yield+0xba>
	sys_dnode_t *const tail = list->tail;
   33de8:	4b11      	ldr	r3, [pc, #68]	; (33e30 <z_impl_k_yield+0x120>)
   33dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   33dec:	f103 0120 	add.w	r1, r3, #32
   33df0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   33df2:	606a      	str	r2, [r5, #4]
	tail->next = node;
   33df4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   33df6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   33df8:	2001      	movs	r0, #1
   33dfa:	f7ff f989 	bl	33110 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33dfe:	480b      	ldr	r0, [pc, #44]	; (33e2c <z_impl_k_yield+0x11c>)
   33e00:	f7fd fb0c 	bl	3141c <z_spin_unlock_valid>
   33e04:	b118      	cbz	r0, 33e0e <z_impl_k_yield+0xfe>
   33e06:	4630      	mov	r0, r6
   33e08:	f7e5 fb26 	bl	19458 <arch_swap>
}
   33e0c:	bd70      	pop	{r4, r5, r6, pc}
   33e0e:	4c0e      	ldr	r4, [pc, #56]	; (33e48 <z_impl_k_yield+0x138>)
   33e10:	23e1      	movs	r3, #225	; 0xe1
   33e12:	4622      	mov	r2, r4
   33e14:	4910      	ldr	r1, [pc, #64]	; (33e58 <z_impl_k_yield+0x148>)
   33e16:	480a      	ldr	r0, [pc, #40]	; (33e40 <z_impl_k_yield+0x130>)
   33e18:	f002 fa3c 	bl	36294 <assert_print>
   33e1c:	4903      	ldr	r1, [pc, #12]	; (33e2c <z_impl_k_yield+0x11c>)
   33e1e:	480f      	ldr	r0, [pc, #60]	; (33e5c <z_impl_k_yield+0x14c>)
   33e20:	f002 fa38 	bl	36294 <assert_print>
   33e24:	21e1      	movs	r1, #225	; 0xe1
   33e26:	4620      	mov	r0, r4
   33e28:	f002 fa2d 	bl	36286 <assert_post_action>
   33e2c:	2000ca90 	.word	0x2000ca90
   33e30:	2000ca40 	.word	0x2000ca40
   33e34:	2000b980 	.word	0x2000b980
   33e38:	00046464 	.word	0x00046464
   33e3c:	000461a8 	.word	0x000461a8
   33e40:	0003f72c 	.word	0x0003f72c
   33e44:	00044634 	.word	0x00044634
   33e48:	00040b28 	.word	0x00040b28
   33e4c:	00040b88 	.word	0x00040b88
   33e50:	00040ba0 	.word	0x00040ba0
   33e54:	00046500 	.word	0x00046500
   33e58:	00040b58 	.word	0x00040b58
   33e5c:	00040b70 	.word	0x00040b70

00033e60 <z_tick_sleep>:
{
   33e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   33e64:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   33e68:	2b00      	cmp	r3, #0
   33e6a:	d150      	bne.n	33f0e <z_tick_sleep+0xae>
   33e6c:	4604      	mov	r4, r0
   33e6e:	460e      	mov	r6, r1
	if (ticks == 0) {
   33e70:	ea50 0301 	orrs.w	r3, r0, r1
   33e74:	d05b      	beq.n	33f2e <z_tick_sleep+0xce>
	if (Z_TICK_ABS(ticks) <= 0) {
   33e76:	f06f 0301 	mvn.w	r3, #1
   33e7a:	1a1b      	subs	r3, r3, r0
   33e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   33e80:	eb62 0201 	sbc.w	r2, r2, r1
   33e84:	2b01      	cmp	r3, #1
   33e86:	f172 0200 	sbcs.w	r2, r2, #0
   33e8a:	db54      	blt.n	33f36 <z_tick_sleep+0xd6>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   33e8c:	f06f 0501 	mvn.w	r5, #1
   33e90:	1a2d      	subs	r5, r5, r0
   33e92:	f04f 0320 	mov.w	r3, #32
   33e96:	f3ef 8911 	mrs	r9, BASEPRI
   33e9a:	f383 8812 	msr	BASEPRI_MAX, r3
   33e9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33ea2:	483e      	ldr	r0, [pc, #248]	; (33f9c <z_tick_sleep+0x13c>)
   33ea4:	f7fd faaa 	bl	313fc <z_spin_lock_valid>
   33ea8:	2800      	cmp	r0, #0
   33eaa:	d048      	beq.n	33f3e <z_tick_sleep+0xde>
	z_spin_lock_set_owner(l);
   33eac:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 33f9c <z_tick_sleep+0x13c>
   33eb0:	4640      	mov	r0, r8
   33eb2:	f7fd fac3 	bl	3143c <z_spin_lock_set_owner>
	pending_current = _current;
   33eb6:	4f3a      	ldr	r7, [pc, #232]	; (33fa0 <z_tick_sleep+0x140>)
   33eb8:	68b8      	ldr	r0, [r7, #8]
   33eba:	4b3a      	ldr	r3, [pc, #232]	; (33fa4 <z_tick_sleep+0x144>)
   33ebc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   33ebe:	f7ff fbbf 	bl	33640 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   33ec2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   33ec4:	4622      	mov	r2, r4
   33ec6:	4633      	mov	r3, r6
   33ec8:	4937      	ldr	r1, [pc, #220]	; (33fa8 <z_tick_sleep+0x148>)
   33eca:	3018      	adds	r0, #24
   33ecc:	f000 faac 	bl	34428 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   33ed0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   33ed2:	7b53      	ldrb	r3, [r2, #13]
   33ed4:	f043 0310 	orr.w	r3, r3, #16
   33ed8:	7353      	strb	r3, [r2, #13]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33eda:	4640      	mov	r0, r8
   33edc:	f7fd fa9e 	bl	3141c <z_spin_unlock_valid>
   33ee0:	2800      	cmp	r0, #0
   33ee2:	d03b      	beq.n	33f5c <z_tick_sleep+0xfc>
   33ee4:	4648      	mov	r0, r9
   33ee6:	f7e5 fab7 	bl	19458 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   33eea:	4b2d      	ldr	r3, [pc, #180]	; (33fa0 <z_tick_sleep+0x140>)
   33eec:	689b      	ldr	r3, [r3, #8]
	return (thread->base.thread_state & state) != 0U;
   33eee:	7b5b      	ldrb	r3, [r3, #13]
   33ef0:	f013 0f10 	tst.w	r3, #16
   33ef4:	d141      	bne.n	33f7a <z_tick_sleep+0x11a>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   33ef6:	f00a fead 	bl	3ec54 <sys_clock_tick_get_32>
   33efa:	1a28      	subs	r0, r5, r0
   33efc:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   33f00:	2801      	cmp	r0, #1
   33f02:	f173 0300 	sbcs.w	r3, r3, #0
   33f06:	da00      	bge.n	33f0a <z_tick_sleep+0xaa>
	return 0;
   33f08:	2000      	movs	r0, #0
}
   33f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__ASSERT(!arch_is_in_isr(), "");
   33f0e:	4c27      	ldr	r4, [pc, #156]	; (33fac <z_tick_sleep+0x14c>)
   33f10:	f240 538c 	movw	r3, #1420	; 0x58c
   33f14:	4622      	mov	r2, r4
   33f16:	4926      	ldr	r1, [pc, #152]	; (33fb0 <z_tick_sleep+0x150>)
   33f18:	4826      	ldr	r0, [pc, #152]	; (33fb4 <z_tick_sleep+0x154>)
   33f1a:	f002 f9bb 	bl	36294 <assert_print>
   33f1e:	4826      	ldr	r0, [pc, #152]	; (33fb8 <z_tick_sleep+0x158>)
   33f20:	f002 f9b8 	bl	36294 <assert_print>
   33f24:	f240 518c 	movw	r1, #1420	; 0x58c
   33f28:	4620      	mov	r0, r4
   33f2a:	f002 f9ac 	bl	36286 <assert_post_action>
	z_impl_k_yield();
   33f2e:	f7ff feef 	bl	33d10 <z_impl_k_yield>
		return 0;
   33f32:	2000      	movs	r0, #0
   33f34:	e7e9      	b.n	33f0a <z_tick_sleep+0xaa>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   33f36:	f00a fe8d 	bl	3ec54 <sys_clock_tick_get_32>
   33f3a:	1905      	adds	r5, r0, r4
   33f3c:	e7a9      	b.n	33e92 <z_tick_sleep+0x32>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   33f3e:	4c1f      	ldr	r4, [pc, #124]	; (33fbc <z_tick_sleep+0x15c>)
   33f40:	2394      	movs	r3, #148	; 0x94
   33f42:	4622      	mov	r2, r4
   33f44:	491e      	ldr	r1, [pc, #120]	; (33fc0 <z_tick_sleep+0x160>)
   33f46:	481b      	ldr	r0, [pc, #108]	; (33fb4 <z_tick_sleep+0x154>)
   33f48:	f002 f9a4 	bl	36294 <assert_print>
   33f4c:	4913      	ldr	r1, [pc, #76]	; (33f9c <z_tick_sleep+0x13c>)
   33f4e:	481d      	ldr	r0, [pc, #116]	; (33fc4 <z_tick_sleep+0x164>)
   33f50:	f002 f9a0 	bl	36294 <assert_print>
   33f54:	2194      	movs	r1, #148	; 0x94
   33f56:	4620      	mov	r0, r4
   33f58:	f002 f995 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   33f5c:	4c17      	ldr	r4, [pc, #92]	; (33fbc <z_tick_sleep+0x15c>)
   33f5e:	23e1      	movs	r3, #225	; 0xe1
   33f60:	4622      	mov	r2, r4
   33f62:	4919      	ldr	r1, [pc, #100]	; (33fc8 <z_tick_sleep+0x168>)
   33f64:	4813      	ldr	r0, [pc, #76]	; (33fb4 <z_tick_sleep+0x154>)
   33f66:	f002 f995 	bl	36294 <assert_print>
   33f6a:	4641      	mov	r1, r8
   33f6c:	4817      	ldr	r0, [pc, #92]	; (33fcc <z_tick_sleep+0x16c>)
   33f6e:	f002 f991 	bl	36294 <assert_print>
   33f72:	21e1      	movs	r1, #225	; 0xe1
   33f74:	4620      	mov	r0, r4
   33f76:	f002 f986 	bl	36286 <assert_post_action>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   33f7a:	4c0c      	ldr	r4, [pc, #48]	; (33fac <z_tick_sleep+0x14c>)
   33f7c:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
   33f80:	4622      	mov	r2, r4
   33f82:	4913      	ldr	r1, [pc, #76]	; (33fd0 <z_tick_sleep+0x170>)
   33f84:	480b      	ldr	r0, [pc, #44]	; (33fb4 <z_tick_sleep+0x154>)
   33f86:	f002 f985 	bl	36294 <assert_print>
   33f8a:	480b      	ldr	r0, [pc, #44]	; (33fb8 <z_tick_sleep+0x158>)
   33f8c:	f002 f982 	bl	36294 <assert_print>
   33f90:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
   33f94:	4620      	mov	r0, r4
   33f96:	f002 f976 	bl	36286 <assert_post_action>
   33f9a:	bf00      	nop
   33f9c:	2000ca90 	.word	0x2000ca90
   33fa0:	2000ca40 	.word	0x2000ca40
   33fa4:	2000ca84 	.word	0x2000ca84
   33fa8:	00033575 	.word	0x00033575
   33fac:	00046464 	.word	0x00046464
   33fb0:	000461a8 	.word	0x000461a8
   33fb4:	0003f72c 	.word	0x0003f72c
   33fb8:	00044634 	.word	0x00044634
   33fbc:	00040b28 	.word	0x00040b28
   33fc0:	00040b88 	.word	0x00040b88
   33fc4:	00040ba0 	.word	0x00040ba0
   33fc8:	00040b58 	.word	0x00040b58
   33fcc:	00040b70 	.word	0x00040b70
   33fd0:	000465b8 	.word	0x000465b8

00033fd4 <z_impl_k_sleep>:
{
   33fd4:	b510      	push	{r4, lr}
   33fd6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   33fda:	b9f3      	cbnz	r3, 3401a <z_impl_k_sleep+0x46>
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   33fdc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   33fe0:	bf08      	it	eq
   33fe2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   33fe6:	d028      	beq.n	3403a <z_impl_k_sleep+0x66>
	ticks = z_tick_sleep(ticks);
   33fe8:	f7ff ff3a 	bl	33e60 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   33fec:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
   33fee:	0151      	lsls	r1, r2, #5
   33ff0:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
   33ff4:	0143      	lsls	r3, r0, #5
   33ff6:	1a1b      	subs	r3, r3, r0
   33ff8:	eb61 0102 	sbc.w	r1, r1, r2
   33ffc:	0089      	lsls	r1, r1, #2
   33ffe:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
   34002:	009b      	lsls	r3, r3, #2
   34004:	181b      	adds	r3, r3, r0
   34006:	eb42 0201 	adc.w	r2, r2, r1
   3400a:	00d2      	lsls	r2, r2, #3
   3400c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
   34010:	f3c3 3310 	ubfx	r3, r3, #12, #17
   34014:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
   34018:	bd10      	pop	{r4, pc}
	__ASSERT(!arch_is_in_isr(), "");
   3401a:	4c0b      	ldr	r4, [pc, #44]	; (34048 <z_impl_k_sleep+0x74>)
   3401c:	f240 53b7 	movw	r3, #1463	; 0x5b7
   34020:	4622      	mov	r2, r4
   34022:	490a      	ldr	r1, [pc, #40]	; (3404c <z_impl_k_sleep+0x78>)
   34024:	480a      	ldr	r0, [pc, #40]	; (34050 <z_impl_k_sleep+0x7c>)
   34026:	f002 f935 	bl	36294 <assert_print>
   3402a:	480a      	ldr	r0, [pc, #40]	; (34054 <z_impl_k_sleep+0x80>)
   3402c:	f002 f932 	bl	36294 <assert_print>
   34030:	f240 51b7 	movw	r1, #1463	; 0x5b7
   34034:	4620      	mov	r0, r4
   34036:	f002 f926 	bl	36286 <assert_post_action>
		k_thread_suspend(_current);
   3403a:	4b07      	ldr	r3, [pc, #28]	; (34058 <z_impl_k_sleep+0x84>)
   3403c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   3403e:	f7ff fc83 	bl	33948 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   34042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34046:	e7e7      	b.n	34018 <z_impl_k_sleep+0x44>
   34048:	00046464 	.word	0x00046464
   3404c:	000461a8 	.word	0x000461a8
   34050:	0003f72c 	.word	0x0003f72c
   34054:	00044634 	.word	0x00044634
   34058:	2000ca40 	.word	0x2000ca40

0003405c <z_impl_k_usleep>:
{
   3405c:	b508      	push	{r3, lr}
	ticks = k_us_to_ticks_ceil64(us);
   3405e:	17c1      	asrs	r1, r0, #31
   34060:	03c9      	lsls	r1, r1, #15
   34062:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   34066:	03c0      	lsls	r0, r0, #15
   34068:	4b15      	ldr	r3, [pc, #84]	; (340c0 <z_impl_k_usleep+0x64>)
   3406a:	18c0      	adds	r0, r0, r3
   3406c:	4a15      	ldr	r2, [pc, #84]	; (340c4 <z_impl_k_usleep+0x68>)
   3406e:	f04f 0300 	mov.w	r3, #0
   34072:	f141 0100 	adc.w	r1, r1, #0
   34076:	f7dc f86f 	bl	10158 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   3407a:	17c1      	asrs	r1, r0, #31
   3407c:	f7ff fef0 	bl	33e60 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   34080:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   34084:	ea4f 124c 	mov.w	r2, ip, lsl #5
   34088:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
   3408c:	0143      	lsls	r3, r0, #5
   3408e:	1a1b      	subs	r3, r3, r0
   34090:	eb62 020c 	sbc.w	r2, r2, ip
   34094:	0252      	lsls	r2, r2, #9
   34096:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   3409a:	025b      	lsls	r3, r3, #9
   3409c:	181b      	adds	r3, r3, r0
   3409e:	eb4c 0202 	adc.w	r2, ip, r2
   340a2:	ea4f 1e82 	mov.w	lr, r2, lsl #6
   340a6:	ea4e 6e93 	orr.w	lr, lr, r3, lsr #26
   340aa:	0199      	lsls	r1, r3, #6
   340ac:	1acb      	subs	r3, r1, r3
   340ae:	eb6e 0e02 	sbc.w	lr, lr, r2
   340b2:	181b      	adds	r3, r3, r0
   340b4:	eb4c 000e 	adc.w	r0, ip, lr
   340b8:	0bdb      	lsrs	r3, r3, #15
}
   340ba:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   340be:	bd08      	pop	{r3, pc}
   340c0:	000f423f 	.word	0x000f423f
   340c4:	000f4240 	.word	0x000f4240

000340c8 <z_impl_z_current_get>:
}
   340c8:	4b01      	ldr	r3, [pc, #4]	; (340d0 <z_impl_z_current_get+0x8>)
   340ca:	6898      	ldr	r0, [r3, #8]
   340cc:	4770      	bx	lr
   340ce:	bf00      	nop
   340d0:	2000ca40 	.word	0x2000ca40

000340d4 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   340d4:	b570      	push	{r4, r5, r6, lr}
   340d6:	4604      	mov	r4, r0
   340d8:	f04f 0320 	mov.w	r3, #32
   340dc:	f3ef 8511 	mrs	r5, BASEPRI
   340e0:	f383 8812 	msr	BASEPRI_MAX, r3
   340e4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   340e8:	4854      	ldr	r0, [pc, #336]	; (3423c <z_thread_abort+0x168>)
   340ea:	f7fd f987 	bl	313fc <z_spin_lock_valid>
   340ee:	b1a8      	cbz	r0, 3411c <z_thread_abort+0x48>
   340f0:	462e      	mov	r6, r5
	z_spin_lock_set_owner(l);
   340f2:	4852      	ldr	r0, [pc, #328]	; (3423c <z_thread_abort+0x168>)
   340f4:	f7fd f9a2 	bl	3143c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   340f8:	7b23      	ldrb	r3, [r4, #12]
   340fa:	f013 0f01 	tst.w	r3, #1
   340fe:	d11c      	bne.n	3413a <z_thread_abort+0x66>
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   34100:	7b63      	ldrb	r3, [r4, #13]
   34102:	f013 0f08 	tst.w	r3, #8
   34106:	d04f      	beq.n	341a8 <z_thread_abort+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34108:	484c      	ldr	r0, [pc, #304]	; (3423c <z_thread_abort+0x168>)
   3410a:	f7fd f987 	bl	3141c <z_spin_unlock_valid>
   3410e:	2800      	cmp	r0, #0
   34110:	d03b      	beq.n	3418a <z_thread_abort+0xb6>
	__asm__ volatile(
   34112:	f385 8811 	msr	BASEPRI, r5
   34116:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   3411a:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3411c:	4c48      	ldr	r4, [pc, #288]	; (34240 <z_thread_abort+0x16c>)
   3411e:	2394      	movs	r3, #148	; 0x94
   34120:	4622      	mov	r2, r4
   34122:	4948      	ldr	r1, [pc, #288]	; (34244 <z_thread_abort+0x170>)
   34124:	4848      	ldr	r0, [pc, #288]	; (34248 <z_thread_abort+0x174>)
   34126:	f002 f8b5 	bl	36294 <assert_print>
   3412a:	4944      	ldr	r1, [pc, #272]	; (3423c <z_thread_abort+0x168>)
   3412c:	4847      	ldr	r0, [pc, #284]	; (3424c <z_thread_abort+0x178>)
   3412e:	f002 f8b1 	bl	36294 <assert_print>
   34132:	2194      	movs	r1, #148	; 0x94
   34134:	4620      	mov	r0, r4
   34136:	f002 f8a6 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3413a:	4840      	ldr	r0, [pc, #256]	; (3423c <z_thread_abort+0x168>)
   3413c:	f7fd f96e 	bl	3141c <z_spin_unlock_valid>
   34140:	b1a0      	cbz	r0, 3416c <z_thread_abort+0x98>
   34142:	f385 8811 	msr	BASEPRI, r5
   34146:	f3bf 8f6f 	isb	sy
		__ASSERT(false, "aborting essential thread %p", thread);
   3414a:	4d41      	ldr	r5, [pc, #260]	; (34250 <z_thread_abort+0x17c>)
   3414c:	f240 63c3 	movw	r3, #1731	; 0x6c3
   34150:	462a      	mov	r2, r5
   34152:	4940      	ldr	r1, [pc, #256]	; (34254 <z_thread_abort+0x180>)
   34154:	483c      	ldr	r0, [pc, #240]	; (34248 <z_thread_abort+0x174>)
   34156:	f002 f89d 	bl	36294 <assert_print>
   3415a:	4621      	mov	r1, r4
   3415c:	483e      	ldr	r0, [pc, #248]	; (34258 <z_thread_abort+0x184>)
   3415e:	f002 f899 	bl	36294 <assert_print>
   34162:	f240 61c3 	movw	r1, #1731	; 0x6c3
   34166:	4628      	mov	r0, r5
   34168:	f002 f88d 	bl	36286 <assert_post_action>
   3416c:	4c34      	ldr	r4, [pc, #208]	; (34240 <z_thread_abort+0x16c>)
   3416e:	23c2      	movs	r3, #194	; 0xc2
   34170:	4622      	mov	r2, r4
   34172:	493a      	ldr	r1, [pc, #232]	; (3425c <z_thread_abort+0x188>)
   34174:	4834      	ldr	r0, [pc, #208]	; (34248 <z_thread_abort+0x174>)
   34176:	f002 f88d 	bl	36294 <assert_print>
   3417a:	4930      	ldr	r1, [pc, #192]	; (3423c <z_thread_abort+0x168>)
   3417c:	4838      	ldr	r0, [pc, #224]	; (34260 <z_thread_abort+0x18c>)
   3417e:	f002 f889 	bl	36294 <assert_print>
   34182:	21c2      	movs	r1, #194	; 0xc2
   34184:	4620      	mov	r0, r4
   34186:	f002 f87e 	bl	36286 <assert_post_action>
   3418a:	4c2d      	ldr	r4, [pc, #180]	; (34240 <z_thread_abort+0x16c>)
   3418c:	23c2      	movs	r3, #194	; 0xc2
   3418e:	4622      	mov	r2, r4
   34190:	4932      	ldr	r1, [pc, #200]	; (3425c <z_thread_abort+0x188>)
   34192:	482d      	ldr	r0, [pc, #180]	; (34248 <z_thread_abort+0x174>)
   34194:	f002 f87e 	bl	36294 <assert_print>
   34198:	4928      	ldr	r1, [pc, #160]	; (3423c <z_thread_abort+0x168>)
   3419a:	4831      	ldr	r0, [pc, #196]	; (34260 <z_thread_abort+0x18c>)
   3419c:	f002 f87a 	bl	36294 <assert_print>
   341a0:	21c2      	movs	r1, #194	; 0xc2
   341a2:	4620      	mov	r0, r4
   341a4:	f002 f86f 	bl	36286 <assert_post_action>
	end_thread(thread);
   341a8:	4620      	mov	r0, r4
   341aa:	f7ff fcc3 	bl	33b34 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   341ae:	4b2d      	ldr	r3, [pc, #180]	; (34264 <z_thread_abort+0x190>)
   341b0:	689b      	ldr	r3, [r3, #8]
   341b2:	42a3      	cmp	r3, r4
   341b4:	d008      	beq.n	341c8 <z_thread_abort+0xf4>
   341b6:	4821      	ldr	r0, [pc, #132]	; (3423c <z_thread_abort+0x168>)
   341b8:	f7fd f930 	bl	3141c <z_spin_unlock_valid>
   341bc:	b370      	cbz	r0, 3421c <z_thread_abort+0x148>
   341be:	f386 8811 	msr	BASEPRI, r6
   341c2:	f3bf 8f6f 	isb	sy
   341c6:	e7a8      	b.n	3411a <z_thread_abort+0x46>
   341c8:	f3ef 8305 	mrs	r3, IPSR
   341cc:	2b00      	cmp	r3, #0
   341ce:	d1f2      	bne.n	341b6 <z_thread_abort+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   341d0:	481a      	ldr	r0, [pc, #104]	; (3423c <z_thread_abort+0x168>)
   341d2:	f7fd f923 	bl	3141c <z_spin_unlock_valid>
   341d6:	b190      	cbz	r0, 341fe <z_thread_abort+0x12a>
   341d8:	4628      	mov	r0, r5
   341da:	f7e5 f93d 	bl	19458 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   341de:	4c1c      	ldr	r4, [pc, #112]	; (34250 <z_thread_abort+0x17c>)
   341e0:	f240 63f2 	movw	r3, #1778	; 0x6f2
   341e4:	4622      	mov	r2, r4
   341e6:	491b      	ldr	r1, [pc, #108]	; (34254 <z_thread_abort+0x180>)
   341e8:	4817      	ldr	r0, [pc, #92]	; (34248 <z_thread_abort+0x174>)
   341ea:	f002 f853 	bl	36294 <assert_print>
   341ee:	481e      	ldr	r0, [pc, #120]	; (34268 <z_thread_abort+0x194>)
   341f0:	f002 f850 	bl	36294 <assert_print>
   341f4:	f240 61f2 	movw	r1, #1778	; 0x6f2
   341f8:	4620      	mov	r0, r4
   341fa:	f002 f844 	bl	36286 <assert_post_action>
   341fe:	4c10      	ldr	r4, [pc, #64]	; (34240 <z_thread_abort+0x16c>)
   34200:	23e1      	movs	r3, #225	; 0xe1
   34202:	4622      	mov	r2, r4
   34204:	4915      	ldr	r1, [pc, #84]	; (3425c <z_thread_abort+0x188>)
   34206:	4810      	ldr	r0, [pc, #64]	; (34248 <z_thread_abort+0x174>)
   34208:	f002 f844 	bl	36294 <assert_print>
   3420c:	490b      	ldr	r1, [pc, #44]	; (3423c <z_thread_abort+0x168>)
   3420e:	4814      	ldr	r0, [pc, #80]	; (34260 <z_thread_abort+0x18c>)
   34210:	f002 f840 	bl	36294 <assert_print>
   34214:	21e1      	movs	r1, #225	; 0xe1
   34216:	4620      	mov	r0, r4
   34218:	f002 f835 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3421c:	4c08      	ldr	r4, [pc, #32]	; (34240 <z_thread_abort+0x16c>)
   3421e:	23c2      	movs	r3, #194	; 0xc2
   34220:	4622      	mov	r2, r4
   34222:	490e      	ldr	r1, [pc, #56]	; (3425c <z_thread_abort+0x188>)
   34224:	4808      	ldr	r0, [pc, #32]	; (34248 <z_thread_abort+0x174>)
   34226:	f002 f835 	bl	36294 <assert_print>
   3422a:	4904      	ldr	r1, [pc, #16]	; (3423c <z_thread_abort+0x168>)
   3422c:	480c      	ldr	r0, [pc, #48]	; (34260 <z_thread_abort+0x18c>)
   3422e:	f002 f831 	bl	36294 <assert_print>
   34232:	21c2      	movs	r1, #194	; 0xc2
   34234:	4620      	mov	r0, r4
   34236:	f002 f826 	bl	36286 <assert_post_action>
   3423a:	bf00      	nop
   3423c:	2000ca90 	.word	0x2000ca90
   34240:	00040b28 	.word	0x00040b28
   34244:	00040b88 	.word	0x00040b88
   34248:	0003f72c 	.word	0x0003f72c
   3424c:	00040ba0 	.word	0x00040ba0
   34250:	00046464 	.word	0x00046464
   34254:	0003f964 	.word	0x0003f964
   34258:	000465f8 	.word	0x000465f8
   3425c:	00040b58 	.word	0x00040b58
   34260:	00040b70 	.word	0x00040b70
   34264:	2000ca40 	.word	0x2000ca40
   34268:	00046618 	.word	0x00046618

0003426c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   3426c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34270:	4605      	mov	r5, r0
   34272:	460f      	mov	r7, r1
   34274:	4690      	mov	r8, r2
	__asm__ volatile(
   34276:	f04f 0320 	mov.w	r3, #32
   3427a:	f3ef 8611 	mrs	r6, BASEPRI
   3427e:	f383 8812 	msr	BASEPRI_MAX, r3
   34282:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34286:	4826      	ldr	r0, [pc, #152]	; (34320 <z_sched_wake+0xb4>)
   34288:	f7fd f8b8 	bl	313fc <z_spin_lock_valid>
   3428c:	b138      	cbz	r0, 3429e <z_sched_wake+0x32>
   3428e:	2400      	movs	r4, #0
   34290:	4682      	mov	sl, r0
	z_spin_lock_set_owner(l);
   34292:	4823      	ldr	r0, [pc, #140]	; (34320 <z_sched_wake+0xb4>)
   34294:	f7fd f8d2 	bl	3143c <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;
   34298:	f04f 0900 	mov.w	r9, #0
	return k;
   3429c:	e025      	b.n	342ea <z_sched_wake+0x7e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3429e:	4c21      	ldr	r4, [pc, #132]	; (34324 <z_sched_wake+0xb8>)
   342a0:	2394      	movs	r3, #148	; 0x94
   342a2:	4622      	mov	r2, r4
   342a4:	4920      	ldr	r1, [pc, #128]	; (34328 <z_sched_wake+0xbc>)
   342a6:	4821      	ldr	r0, [pc, #132]	; (3432c <z_sched_wake+0xc0>)
   342a8:	f001 fff4 	bl	36294 <assert_print>
   342ac:	491c      	ldr	r1, [pc, #112]	; (34320 <z_sched_wake+0xb4>)
   342ae:	4820      	ldr	r0, [pc, #128]	; (34330 <z_sched_wake+0xc4>)
   342b0:	f001 fff0 	bl	36294 <assert_print>
   342b4:	2194      	movs	r1, #148	; 0x94
   342b6:	4620      	mov	r0, r4
   342b8:	f001 ffe5 	bl	36286 <assert_post_action>
   342bc:	f8c0 70b0 	str.w	r7, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   342c0:	f8c0 8014 	str.w	r8, [r0, #20]

		if (thread != NULL) {
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   342c4:	f00a fc65 	bl	3eb92 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   342c8:	f104 0018 	add.w	r0, r4, #24
   342cc:	f000 f982 	bl	345d4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   342d0:	4620      	mov	r0, r4
   342d2:	f7ff f853 	bl	3337c <ready_thread>
			ret = true;
   342d6:	46d1      	mov	r9, sl
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   342d8:	4811      	ldr	r0, [pc, #68]	; (34320 <z_sched_wake+0xb4>)
   342da:	f7fd f89f 	bl	3141c <z_spin_unlock_valid>
   342de:	b160      	cbz	r0, 342fa <z_sched_wake+0x8e>
	__asm__ volatile(
   342e0:	f386 8811 	msr	BASEPRI, r6
   342e4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   342e8:	2401      	movs	r4, #1
   342ea:	b9ac      	cbnz	r4, 34318 <z_sched_wake+0xac>
		thread = _priq_wait_best(&wait_q->waitq);
   342ec:	4628      	mov	r0, r5
   342ee:	f00a fc5e 	bl	3ebae <z_priq_dumb_best>
		if (thread != NULL) {
   342f2:	4604      	mov	r4, r0
   342f4:	2800      	cmp	r0, #0
   342f6:	d1e1      	bne.n	342bc <z_sched_wake+0x50>
   342f8:	e7ee      	b.n	342d8 <z_sched_wake+0x6c>
   342fa:	4c0a      	ldr	r4, [pc, #40]	; (34324 <z_sched_wake+0xb8>)
   342fc:	23c2      	movs	r3, #194	; 0xc2
   342fe:	4622      	mov	r2, r4
   34300:	490c      	ldr	r1, [pc, #48]	; (34334 <z_sched_wake+0xc8>)
   34302:	480a      	ldr	r0, [pc, #40]	; (3432c <z_sched_wake+0xc0>)
   34304:	f001 ffc6 	bl	36294 <assert_print>
   34308:	4905      	ldr	r1, [pc, #20]	; (34320 <z_sched_wake+0xb4>)
   3430a:	480b      	ldr	r0, [pc, #44]	; (34338 <z_sched_wake+0xcc>)
   3430c:	f001 ffc2 	bl	36294 <assert_print>
   34310:	21c2      	movs	r1, #194	; 0xc2
   34312:	4620      	mov	r0, r4
   34314:	f001 ffb7 	bl	36286 <assert_post_action>
		}
	}

	return ret;
}
   34318:	4648      	mov	r0, r9
   3431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3431e:	bf00      	nop
   34320:	2000ca90 	.word	0x2000ca90
   34324:	00040b28 	.word	0x00040b28
   34328:	00040b88 	.word	0x00040b88
   3432c:	0003f72c 	.word	0x0003f72c
   34330:	00040ba0 	.word	0x00040ba0
   34334:	00040b58 	.word	0x00040b58
   34338:	00040b70 	.word	0x00040b70

0003433c <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   3433c:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
   34340:	b083      	sub	sp, #12
   34342:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   34344:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
   34348:	e9cd bc00 	strd	fp, ip, [sp]
   3434c:	f7ff f9d6 	bl	336fc <z_pend_curr>

	if (data != NULL) {
   34350:	b11c      	cbz	r4, 3435a <z_sched_wait+0x1e>
		*data = _current->base.swap_data;
   34352:	4b03      	ldr	r3, [pc, #12]	; (34360 <z_sched_wait+0x24>)
   34354:	689b      	ldr	r3, [r3, #8]
   34356:	695b      	ldr	r3, [r3, #20]
   34358:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   3435a:	b003      	add	sp, #12
   3435c:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
   34360:	2000ca40 	.word	0x2000ca40

00034364 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   34364:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   34366:	4806      	ldr	r0, [pc, #24]	; (34380 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   34368:	4a06      	ldr	r2, [pc, #24]	; (34384 <z_data_copy+0x20>)
   3436a:	1a12      	subs	r2, r2, r0
   3436c:	4906      	ldr	r1, [pc, #24]	; (34388 <z_data_copy+0x24>)
   3436e:	f00a fa73 	bl	3e858 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   34372:	4a06      	ldr	r2, [pc, #24]	; (3438c <z_data_copy+0x28>)
   34374:	4906      	ldr	r1, [pc, #24]	; (34390 <z_data_copy+0x2c>)
   34376:	4807      	ldr	r0, [pc, #28]	; (34394 <z_data_copy+0x30>)
   34378:	f00a fa6e 	bl	3e858 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   3437c:	bd08      	pop	{r3, pc}
   3437e:	bf00      	nop
   34380:	20008000 	.word	0x20008000
   34384:	20008ba0 	.word	0x20008ba0
   34388:	000469fc 	.word	0x000469fc
   3438c:	00000000 	.word	0x00000000
   34390:	000469fc 	.word	0x000469fc
   34394:	20008000 	.word	0x20008000

00034398 <first>:
	return list->head == list;
   34398:	4b03      	ldr	r3, [pc, #12]	; (343a8 <first+0x10>)
   3439a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3439c:	4298      	cmp	r0, r3
   3439e:	d000      	beq.n	343a2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   343a0:	4770      	bx	lr
   343a2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   343a4:	e7fc      	b.n	343a0 <first+0x8>
   343a6:	bf00      	nop
   343a8:	20008824 	.word	0x20008824

000343ac <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   343ac:	b130      	cbz	r0, 343bc <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   343ae:	4a04      	ldr	r2, [pc, #16]	; (343c0 <next+0x14>)
   343b0:	6852      	ldr	r2, [r2, #4]
   343b2:	4290      	cmp	r0, r2
   343b4:	d001      	beq.n	343ba <next+0xe>
   343b6:	6800      	ldr	r0, [r0, #0]
   343b8:	4770      	bx	lr
   343ba:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   343bc:	4770      	bx	lr
   343be:	bf00      	nop
   343c0:	20008824 	.word	0x20008824

000343c4 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   343c4:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   343c6:	4b04      	ldr	r3, [pc, #16]	; (343d8 <elapsed+0x14>)
   343c8:	681b      	ldr	r3, [r3, #0]
   343ca:	b10b      	cbz	r3, 343d0 <elapsed+0xc>
   343cc:	2000      	movs	r0, #0
}
   343ce:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   343d0:	f7f8 ffac 	bl	2d32c <sys_clock_elapsed>
   343d4:	e7fb      	b.n	343ce <elapsed+0xa>
   343d6:	bf00      	nop
   343d8:	2000ca94 	.word	0x2000ca94

000343dc <next_timeout>:

static int32_t next_timeout(void)
{
   343dc:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   343de:	f7ff ffdb 	bl	34398 <first>
   343e2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   343e4:	f7ff ffee 	bl	343c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   343e8:	b17c      	cbz	r4, 3440a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   343ea:	6923      	ldr	r3, [r4, #16]
   343ec:	6962      	ldr	r2, [r4, #20]
   343ee:	1a1b      	subs	r3, r3, r0
   343f0:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   343f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   343f8:	f172 0100 	sbcs.w	r1, r2, #0
   343fc:	da08      	bge.n	34410 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   343fe:	2a00      	cmp	r2, #0
   34400:	db01      	blt.n	34406 <next_timeout+0x2a>
   34402:	4618      	mov	r0, r3
   34404:	e006      	b.n	34414 <next_timeout+0x38>
   34406:	2300      	movs	r3, #0
   34408:	e7fb      	b.n	34402 <next_timeout+0x26>
		ret = MAX_WAIT;
   3440a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   3440e:	e001      	b.n	34414 <next_timeout+0x38>
   34410:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   34414:	4b03      	ldr	r3, [pc, #12]	; (34424 <next_timeout+0x48>)
   34416:	691b      	ldr	r3, [r3, #16]
   34418:	b113      	cbz	r3, 34420 <next_timeout+0x44>
   3441a:	4283      	cmp	r3, r0
   3441c:	da00      	bge.n	34420 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
   3441e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   34420:	bd10      	pop	{r4, pc}
   34422:	bf00      	nop
   34424:	2000ca40 	.word	0x2000ca40

00034428 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   34428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3442c:	bf08      	it	eq
   3442e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   34432:	f000 80b4 	beq.w	3459e <z_add_timeout+0x176>
{
   34436:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3443a:	4604      	mov	r4, r0
   3443c:	4616      	mov	r6, r2
   3443e:	461d      	mov	r5, r3
	return node->next != NULL;
   34440:	6803      	ldr	r3, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   34442:	b98b      	cbnz	r3, 34468 <z_add_timeout+0x40>
	to->fn = fn;
   34444:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   34446:	2700      	movs	r7, #0
	__asm__ volatile(
   34448:	f04f 0320 	mov.w	r3, #32
   3444c:	f3ef 8a11 	mrs	sl, BASEPRI
   34450:	f383 8812 	msr	BASEPRI_MAX, r3
   34454:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34458:	4851      	ldr	r0, [pc, #324]	; (345a0 <z_add_timeout+0x178>)
   3445a:	f7fc ffcf 	bl	313fc <z_spin_lock_valid>
   3445e:	b188      	cbz	r0, 34484 <z_add_timeout+0x5c>
	z_spin_lock_set_owner(l);
   34460:	484f      	ldr	r0, [pc, #316]	; (345a0 <z_add_timeout+0x178>)
   34462:	f7fc ffeb 	bl	3143c <z_spin_lock_set_owner>
	return k;
   34466:	e048      	b.n	344fa <z_add_timeout+0xd2>
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   34468:	4c4e      	ldr	r4, [pc, #312]	; (345a4 <z_add_timeout+0x17c>)
   3446a:	2363      	movs	r3, #99	; 0x63
   3446c:	4622      	mov	r2, r4
   3446e:	494e      	ldr	r1, [pc, #312]	; (345a8 <z_add_timeout+0x180>)
   34470:	484e      	ldr	r0, [pc, #312]	; (345ac <z_add_timeout+0x184>)
   34472:	f001 ff0f 	bl	36294 <assert_print>
   34476:	484e      	ldr	r0, [pc, #312]	; (345b0 <z_add_timeout+0x188>)
   34478:	f001 ff0c 	bl	36294 <assert_print>
   3447c:	2163      	movs	r1, #99	; 0x63
   3447e:	4620      	mov	r0, r4
   34480:	f001 ff01 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34484:	4c4b      	ldr	r4, [pc, #300]	; (345b4 <z_add_timeout+0x18c>)
   34486:	2394      	movs	r3, #148	; 0x94
   34488:	4622      	mov	r2, r4
   3448a:	494b      	ldr	r1, [pc, #300]	; (345b8 <z_add_timeout+0x190>)
   3448c:	4847      	ldr	r0, [pc, #284]	; (345ac <z_add_timeout+0x184>)
   3448e:	f001 ff01 	bl	36294 <assert_print>
   34492:	4943      	ldr	r1, [pc, #268]	; (345a0 <z_add_timeout+0x178>)
   34494:	4849      	ldr	r0, [pc, #292]	; (345bc <z_add_timeout+0x194>)
   34496:	f001 fefd 	bl	36294 <assert_print>
   3449a:	2194      	movs	r1, #148	; 0x94
   3449c:	4620      	mov	r0, r4
   3449e:	f001 fef2 	bl	36286 <assert_post_action>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   344a2:	f116 0801 	adds.w	r8, r6, #1
   344a6:	f145 0900 	adc.w	r9, r5, #0
   344aa:	f7ff ff8b 	bl	343c4 <elapsed>
   344ae:	eb18 0300 	adds.w	r3, r8, r0
   344b2:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
   344b6:	6123      	str	r3, [r4, #16]
   344b8:	6160      	str	r0, [r4, #20]
   344ba:	e03e      	b.n	3453a <z_add_timeout+0x112>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   344bc:	1a52      	subs	r2, r2, r1
   344be:	eb67 0303 	sbc.w	r3, r7, r3
   344c2:	6102      	str	r2, [r0, #16]
   344c4:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
   344c6:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
   344c8:	6063      	str	r3, [r4, #4]
	node->next = successor;
   344ca:	6020      	str	r0, [r4, #0]
	prev->next = node;
   344cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   344ce:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   344d0:	e005      	b.n	344de <z_add_timeout+0xb6>
	sys_dnode_t *const tail = list->tail;
   344d2:	4b3b      	ldr	r3, [pc, #236]	; (345c0 <z_add_timeout+0x198>)
   344d4:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   344d6:	6023      	str	r3, [r4, #0]
	node->prev = tail;
   344d8:	6062      	str	r2, [r4, #4]
	tail->next = node;
   344da:	6014      	str	r4, [r2, #0]
	list->tail = node;
   344dc:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   344de:	f7ff ff5b 	bl	34398 <first>
   344e2:	4284      	cmp	r4, r0
   344e4:	d03d      	beq.n	34562 <z_add_timeout+0x13a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   344e6:	482e      	ldr	r0, [pc, #184]	; (345a0 <z_add_timeout+0x178>)
   344e8:	f7fc ff98 	bl	3141c <z_spin_unlock_valid>
   344ec:	2800      	cmp	r0, #0
   344ee:	d045      	beq.n	3457c <z_add_timeout+0x154>
	__asm__ volatile(
   344f0:	f38a 8811 	msr	BASEPRI, sl
   344f4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   344f8:	2701      	movs	r7, #1
   344fa:	2f00      	cmp	r7, #0
   344fc:	d14d      	bne.n	3459a <z_add_timeout+0x172>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   344fe:	f06f 0101 	mvn.w	r1, #1
   34502:	1b89      	subs	r1, r1, r6
   34504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34508:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   3450c:	2a00      	cmp	r2, #0
   3450e:	dbc8      	blt.n	344a2 <z_add_timeout+0x7a>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   34510:	4a2c      	ldr	r2, [pc, #176]	; (345c4 <z_add_timeout+0x19c>)
   34512:	6811      	ldr	r1, [r2, #0]
   34514:	6852      	ldr	r2, [r2, #4]
   34516:	1873      	adds	r3, r6, r1
   34518:	eb42 0205 	adc.w	r2, r2, r5
   3451c:	f06f 0101 	mvn.w	r1, #1
   34520:	1ac9      	subs	r1, r1, r3
   34522:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
   34526:	4608      	mov	r0, r1
   34528:	461a      	mov	r2, r3
   3452a:	2901      	cmp	r1, #1
   3452c:	f173 0300 	sbcs.w	r3, r3, #0
   34530:	da01      	bge.n	34536 <z_add_timeout+0x10e>
   34532:	2001      	movs	r0, #1
   34534:	2200      	movs	r2, #0
   34536:	6120      	str	r0, [r4, #16]
   34538:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   3453a:	f7ff ff2d 	bl	34398 <first>
   3453e:	2800      	cmp	r0, #0
   34540:	d0c7      	beq.n	344d2 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
   34542:	6902      	ldr	r2, [r0, #16]
   34544:	6947      	ldr	r7, [r0, #20]
   34546:	6921      	ldr	r1, [r4, #16]
   34548:	6963      	ldr	r3, [r4, #20]
   3454a:	4291      	cmp	r1, r2
   3454c:	eb73 0e07 	sbcs.w	lr, r3, r7
   34550:	dbb4      	blt.n	344bc <z_add_timeout+0x94>
			to->dticks -= t->dticks;
   34552:	1a89      	subs	r1, r1, r2
   34554:	eb63 0307 	sbc.w	r3, r3, r7
   34558:	6121      	str	r1, [r4, #16]
   3455a:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
   3455c:	f7ff ff26 	bl	343ac <next>
   34560:	e7ed      	b.n	3453e <z_add_timeout+0x116>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   34562:	f7ff ff3b 	bl	343dc <next_timeout>

			if (next_time == 0 ||
   34566:	4603      	mov	r3, r0
   34568:	b118      	cbz	r0, 34572 <z_add_timeout+0x14a>
			    _current_cpu->slice_ticks != next_time) {
   3456a:	4a17      	ldr	r2, [pc, #92]	; (345c8 <z_add_timeout+0x1a0>)
   3456c:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   3456e:	4282      	cmp	r2, r0
   34570:	d0b9      	beq.n	344e6 <z_add_timeout+0xbe>
				sys_clock_set_timeout(next_time, false);
   34572:	2100      	movs	r1, #0
   34574:	4618      	mov	r0, r3
   34576:	f7f8 fe9d 	bl	2d2b4 <sys_clock_set_timeout>
   3457a:	e7b4      	b.n	344e6 <z_add_timeout+0xbe>
   3457c:	4c0d      	ldr	r4, [pc, #52]	; (345b4 <z_add_timeout+0x18c>)
   3457e:	23c2      	movs	r3, #194	; 0xc2
   34580:	4622      	mov	r2, r4
   34582:	4912      	ldr	r1, [pc, #72]	; (345cc <z_add_timeout+0x1a4>)
   34584:	4809      	ldr	r0, [pc, #36]	; (345ac <z_add_timeout+0x184>)
   34586:	f001 fe85 	bl	36294 <assert_print>
   3458a:	4905      	ldr	r1, [pc, #20]	; (345a0 <z_add_timeout+0x178>)
   3458c:	4810      	ldr	r0, [pc, #64]	; (345d0 <z_add_timeout+0x1a8>)
   3458e:	f001 fe81 	bl	36294 <assert_print>
   34592:	21c2      	movs	r1, #194	; 0xc2
   34594:	4620      	mov	r0, r4
   34596:	f001 fe76 	bl	36286 <assert_post_action>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   3459a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3459e:	4770      	bx	lr
   345a0:	2000ca98 	.word	0x2000ca98
   345a4:	0004663c 	.word	0x0004663c
   345a8:	00046660 	.word	0x00046660
   345ac:	0003f72c 	.word	0x0003f72c
   345b0:	00044634 	.word	0x00044634
   345b4:	00040b28 	.word	0x00040b28
   345b8:	00040b88 	.word	0x00040b88
   345bc:	00040ba0 	.word	0x00040ba0
   345c0:	20008824 	.word	0x20008824
   345c4:	2000bbc8 	.word	0x2000bbc8
   345c8:	2000ca40 	.word	0x2000ca40
   345cc:	00040b58 	.word	0x00040b58
   345d0:	00040b70 	.word	0x00040b70

000345d4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   345d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   345d8:	4605      	mov	r5, r0
	__asm__ volatile(
   345da:	f04f 0320 	mov.w	r3, #32
   345de:	f3ef 8711 	mrs	r7, BASEPRI
   345e2:	f383 8812 	msr	BASEPRI_MAX, r3
   345e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   345ea:	481f      	ldr	r0, [pc, #124]	; (34668 <z_abort_timeout+0x94>)
   345ec:	f7fc ff06 	bl	313fc <z_spin_lock_valid>
   345f0:	b130      	cbz	r0, 34600 <z_abort_timeout+0x2c>
   345f2:	2400      	movs	r4, #0
	z_spin_lock_set_owner(l);
   345f4:	481c      	ldr	r0, [pc, #112]	; (34668 <z_abort_timeout+0x94>)
   345f6:	f7fc ff21 	bl	3143c <z_spin_lock_set_owner>
	int ret = -EINVAL;
   345fa:	f06f 0815 	mvn.w	r8, #21
	return k;
   345fe:	e01b      	b.n	34638 <z_abort_timeout+0x64>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34600:	4c1a      	ldr	r4, [pc, #104]	; (3466c <z_abort_timeout+0x98>)
   34602:	2394      	movs	r3, #148	; 0x94
   34604:	4622      	mov	r2, r4
   34606:	491a      	ldr	r1, [pc, #104]	; (34670 <z_abort_timeout+0x9c>)
   34608:	481a      	ldr	r0, [pc, #104]	; (34674 <z_abort_timeout+0xa0>)
   3460a:	f001 fe43 	bl	36294 <assert_print>
   3460e:	4916      	ldr	r1, [pc, #88]	; (34668 <z_abort_timeout+0x94>)
   34610:	4819      	ldr	r0, [pc, #100]	; (34678 <z_abort_timeout+0xa4>)
   34612:	f001 fe3f 	bl	36294 <assert_print>
   34616:	2194      	movs	r1, #148	; 0x94
   34618:	4620      	mov	r0, r4
   3461a:	f001 fe34 	bl	36286 <assert_post_action>

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
			remove_timeout(to);
   3461e:	4628      	mov	r0, r5
   34620:	f00a fb01 	bl	3ec26 <remove_timeout>
			ret = 0;
   34624:	46b0      	mov	r8, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34626:	4810      	ldr	r0, [pc, #64]	; (34668 <z_abort_timeout+0x94>)
   34628:	f7fc fef8 	bl	3141c <z_spin_unlock_valid>
   3462c:	b150      	cbz	r0, 34644 <z_abort_timeout+0x70>
	__asm__ volatile(
   3462e:	f387 8811 	msr	BASEPRI, r7
   34632:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   34636:	2401      	movs	r4, #1
   34638:	4626      	mov	r6, r4
   3463a:	b994      	cbnz	r4, 34662 <z_abort_timeout+0x8e>
	return node->next != NULL;
   3463c:	682b      	ldr	r3, [r5, #0]
		if (sys_dnode_is_linked(&to->node)) {
   3463e:	2b00      	cmp	r3, #0
   34640:	d1ed      	bne.n	3461e <z_abort_timeout+0x4a>
   34642:	e7f0      	b.n	34626 <z_abort_timeout+0x52>
   34644:	4c09      	ldr	r4, [pc, #36]	; (3466c <z_abort_timeout+0x98>)
   34646:	23c2      	movs	r3, #194	; 0xc2
   34648:	4622      	mov	r2, r4
   3464a:	490c      	ldr	r1, [pc, #48]	; (3467c <z_abort_timeout+0xa8>)
   3464c:	4809      	ldr	r0, [pc, #36]	; (34674 <z_abort_timeout+0xa0>)
   3464e:	f001 fe21 	bl	36294 <assert_print>
   34652:	4905      	ldr	r1, [pc, #20]	; (34668 <z_abort_timeout+0x94>)
   34654:	480a      	ldr	r0, [pc, #40]	; (34680 <z_abort_timeout+0xac>)
   34656:	f001 fe1d 	bl	36294 <assert_print>
   3465a:	21c2      	movs	r1, #194	; 0xc2
   3465c:	4620      	mov	r0, r4
   3465e:	f001 fe12 	bl	36286 <assert_post_action>
		}
	}

	return ret;
}
   34662:	4640      	mov	r0, r8
   34664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34668:	2000ca98 	.word	0x2000ca98
   3466c:	00040b28 	.word	0x00040b28
   34670:	00040b88 	.word	0x00040b88
   34674:	0003f72c 	.word	0x0003f72c
   34678:	00040ba0 	.word	0x00040ba0
   3467c:	00040b58 	.word	0x00040b58
   34680:	00040b70 	.word	0x00040b70

00034684 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   34684:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   34686:	f04f 0320 	mov.w	r3, #32
   3468a:	f3ef 8611 	mrs	r6, BASEPRI
   3468e:	f383 8812 	msr	BASEPRI_MAX, r3
   34692:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34696:	481c      	ldr	r0, [pc, #112]	; (34708 <z_get_next_timeout_expiry+0x84>)
   34698:	f7fc feb0 	bl	313fc <z_spin_lock_valid>
   3469c:	b198      	cbz	r0, 346c6 <z_get_next_timeout_expiry+0x42>
   3469e:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   346a0:	4819      	ldr	r0, [pc, #100]	; (34708 <z_get_next_timeout_expiry+0x84>)
   346a2:	f7fc fecb 	bl	3143c <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   346a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff

	LOCKED(&timeout_lock) {
   346aa:	bb55      	cbnz	r5, 34702 <z_get_next_timeout_expiry+0x7e>
		ret = next_timeout();
   346ac:	f7ff fe96 	bl	343dc <next_timeout>
   346b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   346b2:	4815      	ldr	r0, [pc, #84]	; (34708 <z_get_next_timeout_expiry+0x84>)
   346b4:	f7fc feb2 	bl	3141c <z_spin_unlock_valid>
   346b8:	b1a0      	cbz	r0, 346e4 <z_get_next_timeout_expiry+0x60>
	__asm__ volatile(
   346ba:	f386 8811 	msr	BASEPRI, r6
   346be:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   346c2:	2501      	movs	r5, #1
   346c4:	e7f1      	b.n	346aa <z_get_next_timeout_expiry+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   346c6:	4c11      	ldr	r4, [pc, #68]	; (3470c <z_get_next_timeout_expiry+0x88>)
   346c8:	2394      	movs	r3, #148	; 0x94
   346ca:	4622      	mov	r2, r4
   346cc:	4910      	ldr	r1, [pc, #64]	; (34710 <z_get_next_timeout_expiry+0x8c>)
   346ce:	4811      	ldr	r0, [pc, #68]	; (34714 <z_get_next_timeout_expiry+0x90>)
   346d0:	f001 fde0 	bl	36294 <assert_print>
   346d4:	490c      	ldr	r1, [pc, #48]	; (34708 <z_get_next_timeout_expiry+0x84>)
   346d6:	4810      	ldr	r0, [pc, #64]	; (34718 <z_get_next_timeout_expiry+0x94>)
   346d8:	f001 fddc 	bl	36294 <assert_print>
   346dc:	2194      	movs	r1, #148	; 0x94
   346de:	4620      	mov	r0, r4
   346e0:	f001 fdd1 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   346e4:	4c09      	ldr	r4, [pc, #36]	; (3470c <z_get_next_timeout_expiry+0x88>)
   346e6:	23c2      	movs	r3, #194	; 0xc2
   346e8:	4622      	mov	r2, r4
   346ea:	490c      	ldr	r1, [pc, #48]	; (3471c <z_get_next_timeout_expiry+0x98>)
   346ec:	4809      	ldr	r0, [pc, #36]	; (34714 <z_get_next_timeout_expiry+0x90>)
   346ee:	f001 fdd1 	bl	36294 <assert_print>
   346f2:	4905      	ldr	r1, [pc, #20]	; (34708 <z_get_next_timeout_expiry+0x84>)
   346f4:	480a      	ldr	r0, [pc, #40]	; (34720 <z_get_next_timeout_expiry+0x9c>)
   346f6:	f001 fdcd 	bl	36294 <assert_print>
   346fa:	21c2      	movs	r1, #194	; 0xc2
   346fc:	4620      	mov	r0, r4
   346fe:	f001 fdc2 	bl	36286 <assert_post_action>
	}
	return ret;
}
   34702:	4620      	mov	r0, r4
   34704:	bd70      	pop	{r4, r5, r6, pc}
   34706:	bf00      	nop
   34708:	2000ca98 	.word	0x2000ca98
   3470c:	00040b28 	.word	0x00040b28
   34710:	00040b88 	.word	0x00040b88
   34714:	0003f72c 	.word	0x0003f72c
   34718:	00040ba0 	.word	0x00040ba0
   3471c:	00040b58 	.word	0x00040b58
   34720:	00040b70 	.word	0x00040b70

00034724 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   34724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34728:	4607      	mov	r7, r0
   3472a:	4688      	mov	r8, r1
	__asm__ volatile(
   3472c:	f04f 0320 	mov.w	r3, #32
   34730:	f3ef 8611 	mrs	r6, BASEPRI
   34734:	f383 8812 	msr	BASEPRI_MAX, r3
   34738:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3473c:	4824      	ldr	r0, [pc, #144]	; (347d0 <z_set_timeout_expiry+0xac>)
   3473e:	f7fc fe5d 	bl	313fc <z_spin_lock_valid>
   34742:	b120      	cbz	r0, 3474e <z_set_timeout_expiry+0x2a>
   34744:	2500      	movs	r5, #0
	z_spin_lock_set_owner(l);
   34746:	4822      	ldr	r0, [pc, #136]	; (347d0 <z_set_timeout_expiry+0xac>)
   34748:	f7fc fe78 	bl	3143c <z_spin_lock_set_owner>
	return k;
   3474c:	e01d      	b.n	3478a <z_set_timeout_expiry+0x66>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3474e:	4c21      	ldr	r4, [pc, #132]	; (347d4 <z_set_timeout_expiry+0xb0>)
   34750:	2394      	movs	r3, #148	; 0x94
   34752:	4622      	mov	r2, r4
   34754:	4920      	ldr	r1, [pc, #128]	; (347d8 <z_set_timeout_expiry+0xb4>)
   34756:	4821      	ldr	r0, [pc, #132]	; (347dc <z_set_timeout_expiry+0xb8>)
   34758:	f001 fd9c 	bl	36294 <assert_print>
   3475c:	491c      	ldr	r1, [pc, #112]	; (347d0 <z_set_timeout_expiry+0xac>)
   3475e:	4820      	ldr	r0, [pc, #128]	; (347e0 <z_set_timeout_expiry+0xbc>)
   34760:	f001 fd98 	bl	36294 <assert_print>
   34764:	2194      	movs	r1, #148	; 0x94
   34766:	4620      	mov	r0, r4
   34768:	f001 fd8d 	bl	36286 <assert_post_action>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
   3476c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   3476e:	f004 0401 	and.w	r4, r4, #1
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   34772:	2801      	cmp	r0, #1
   34774:	dd00      	ble.n	34778 <z_set_timeout_expiry+0x54>
   34776:	b99c      	cbnz	r4, 347a0 <z_set_timeout_expiry+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34778:	4815      	ldr	r0, [pc, #84]	; (347d0 <z_set_timeout_expiry+0xac>)
   3477a:	f7fc fe4f 	bl	3141c <z_spin_unlock_valid>
   3477e:	b1b0      	cbz	r0, 347ae <z_set_timeout_expiry+0x8a>
	__asm__ volatile(
   34780:	f386 8811 	msr	BASEPRI, r6
   34784:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   34788:	2501      	movs	r5, #1
   3478a:	462c      	mov	r4, r5
   3478c:	b9f5      	cbnz	r5, 347cc <z_set_timeout_expiry+0xa8>
		int next_to = next_timeout();
   3478e:	f7ff fe25 	bl	343dc <next_timeout>
			      || (ticks <= next_to);
   34792:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   34796:	d0e9      	beq.n	3476c <z_set_timeout_expiry+0x48>
   34798:	42b8      	cmp	r0, r7
   3479a:	dbe8      	blt.n	3476e <z_set_timeout_expiry+0x4a>
   3479c:	2401      	movs	r4, #1
   3479e:	e7e6      	b.n	3476e <z_set_timeout_expiry+0x4a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   347a0:	4641      	mov	r1, r8
   347a2:	42b8      	cmp	r0, r7
   347a4:	bfa8      	it	ge
   347a6:	4638      	movge	r0, r7
   347a8:	f7f8 fd84 	bl	2d2b4 <sys_clock_set_timeout>
   347ac:	e7e4      	b.n	34778 <z_set_timeout_expiry+0x54>
   347ae:	4c09      	ldr	r4, [pc, #36]	; (347d4 <z_set_timeout_expiry+0xb0>)
   347b0:	23c2      	movs	r3, #194	; 0xc2
   347b2:	4622      	mov	r2, r4
   347b4:	490b      	ldr	r1, [pc, #44]	; (347e4 <z_set_timeout_expiry+0xc0>)
   347b6:	4809      	ldr	r0, [pc, #36]	; (347dc <z_set_timeout_expiry+0xb8>)
   347b8:	f001 fd6c 	bl	36294 <assert_print>
   347bc:	4904      	ldr	r1, [pc, #16]	; (347d0 <z_set_timeout_expiry+0xac>)
   347be:	480a      	ldr	r0, [pc, #40]	; (347e8 <z_set_timeout_expiry+0xc4>)
   347c0:	f001 fd68 	bl	36294 <assert_print>
   347c4:	21c2      	movs	r1, #194	; 0xc2
   347c6:	4620      	mov	r0, r4
   347c8:	f001 fd5d 	bl	36286 <assert_post_action>
		}
	}
}
   347cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   347d0:	2000ca98 	.word	0x2000ca98
   347d4:	00040b28 	.word	0x00040b28
   347d8:	00040b88 	.word	0x00040b88
   347dc:	0003f72c 	.word	0x0003f72c
   347e0:	00040ba0 	.word	0x00040ba0
   347e4:	00040b58 	.word	0x00040b58
   347e8:	00040b70 	.word	0x00040b70

000347ec <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   347ec:	b570      	push	{r4, r5, r6, lr}
   347ee:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   347f0:	f7fe fd3c 	bl	3326c <z_time_slice>
	__asm__ volatile(
   347f4:	f04f 0320 	mov.w	r3, #32
   347f8:	f3ef 8511 	mrs	r5, BASEPRI
   347fc:	f383 8812 	msr	BASEPRI_MAX, r3
   34800:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34804:	4852      	ldr	r0, [pc, #328]	; (34950 <sys_clock_announce+0x164>)
   34806:	f7fc fdf9 	bl	313fc <z_spin_lock_valid>
   3480a:	2800      	cmp	r0, #0
   3480c:	d03f      	beq.n	3488e <sys_clock_announce+0xa2>
	z_spin_lock_set_owner(l);
   3480e:	4850      	ldr	r0, [pc, #320]	; (34950 <sys_clock_announce+0x164>)
   34810:	f7fc fe14 	bl	3143c <z_spin_lock_set_owner>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   34814:	4b4f      	ldr	r3, [pc, #316]	; (34954 <sys_clock_announce+0x168>)
   34816:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   34818:	f7ff fdbe 	bl	34398 <first>
   3481c:	4604      	mov	r4, r0
   3481e:	2800      	cmp	r0, #0
   34820:	d062      	beq.n	348e8 <sys_clock_announce+0xfc>
   34822:	6906      	ldr	r6, [r0, #16]
   34824:	6941      	ldr	r1, [r0, #20]
   34826:	4b4b      	ldr	r3, [pc, #300]	; (34954 <sys_clock_announce+0x168>)
   34828:	681a      	ldr	r2, [r3, #0]
   3482a:	17d3      	asrs	r3, r2, #31
   3482c:	42b2      	cmp	r2, r6
   3482e:	418b      	sbcs	r3, r1
   34830:	db5a      	blt.n	348e8 <sys_clock_announce+0xfc>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   34832:	4a49      	ldr	r2, [pc, #292]	; (34958 <sys_clock_announce+0x16c>)
   34834:	6813      	ldr	r3, [r2, #0]
   34836:	6851      	ldr	r1, [r2, #4]
   34838:	199b      	adds	r3, r3, r6
   3483a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   3483e:	6013      	str	r3, [r2, #0]
   34840:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
   34842:	2200      	movs	r2, #0
   34844:	2300      	movs	r3, #0
   34846:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   3484a:	4620      	mov	r0, r4
   3484c:	f00a f9eb 	bl	3ec26 <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34850:	483f      	ldr	r0, [pc, #252]	; (34950 <sys_clock_announce+0x164>)
   34852:	f7fc fde3 	bl	3141c <z_spin_unlock_valid>
   34856:	b348      	cbz	r0, 348ac <sys_clock_announce+0xc0>
	__asm__ volatile(
   34858:	f385 8811 	msr	BASEPRI, r5
   3485c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   34860:	68a3      	ldr	r3, [r4, #8]
   34862:	4620      	mov	r0, r4
   34864:	4798      	blx	r3
	__asm__ volatile(
   34866:	f04f 0320 	mov.w	r3, #32
   3486a:	f3ef 8511 	mrs	r5, BASEPRI
   3486e:	f383 8812 	msr	BASEPRI_MAX, r3
   34872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34876:	4836      	ldr	r0, [pc, #216]	; (34950 <sys_clock_announce+0x164>)
   34878:	f7fc fdc0 	bl	313fc <z_spin_lock_valid>
   3487c:	b328      	cbz	r0, 348ca <sys_clock_announce+0xde>
	z_spin_lock_set_owner(l);
   3487e:	4834      	ldr	r0, [pc, #208]	; (34950 <sys_clock_announce+0x164>)
   34880:	f7fc fddc 	bl	3143c <z_spin_lock_set_owner>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
   34884:	4a33      	ldr	r2, [pc, #204]	; (34954 <sys_clock_announce+0x168>)
   34886:	6813      	ldr	r3, [r2, #0]
   34888:	1b9b      	subs	r3, r3, r6
   3488a:	6013      	str	r3, [r2, #0]
   3488c:	e7c4      	b.n	34818 <sys_clock_announce+0x2c>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3488e:	4c33      	ldr	r4, [pc, #204]	; (3495c <sys_clock_announce+0x170>)
   34890:	2394      	movs	r3, #148	; 0x94
   34892:	4622      	mov	r2, r4
   34894:	4932      	ldr	r1, [pc, #200]	; (34960 <sys_clock_announce+0x174>)
   34896:	4833      	ldr	r0, [pc, #204]	; (34964 <sys_clock_announce+0x178>)
   34898:	f001 fcfc 	bl	36294 <assert_print>
   3489c:	492c      	ldr	r1, [pc, #176]	; (34950 <sys_clock_announce+0x164>)
   3489e:	4832      	ldr	r0, [pc, #200]	; (34968 <sys_clock_announce+0x17c>)
   348a0:	f001 fcf8 	bl	36294 <assert_print>
   348a4:	2194      	movs	r1, #148	; 0x94
   348a6:	4620      	mov	r0, r4
   348a8:	f001 fced 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   348ac:	4c2b      	ldr	r4, [pc, #172]	; (3495c <sys_clock_announce+0x170>)
   348ae:	23c2      	movs	r3, #194	; 0xc2
   348b0:	4622      	mov	r2, r4
   348b2:	492e      	ldr	r1, [pc, #184]	; (3496c <sys_clock_announce+0x180>)
   348b4:	482b      	ldr	r0, [pc, #172]	; (34964 <sys_clock_announce+0x178>)
   348b6:	f001 fced 	bl	36294 <assert_print>
   348ba:	4925      	ldr	r1, [pc, #148]	; (34950 <sys_clock_announce+0x164>)
   348bc:	482c      	ldr	r0, [pc, #176]	; (34970 <sys_clock_announce+0x184>)
   348be:	f001 fce9 	bl	36294 <assert_print>
   348c2:	21c2      	movs	r1, #194	; 0xc2
   348c4:	4620      	mov	r0, r4
   348c6:	f001 fcde 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   348ca:	4c24      	ldr	r4, [pc, #144]	; (3495c <sys_clock_announce+0x170>)
   348cc:	2394      	movs	r3, #148	; 0x94
   348ce:	4622      	mov	r2, r4
   348d0:	4923      	ldr	r1, [pc, #140]	; (34960 <sys_clock_announce+0x174>)
   348d2:	4824      	ldr	r0, [pc, #144]	; (34964 <sys_clock_announce+0x178>)
   348d4:	f001 fcde 	bl	36294 <assert_print>
   348d8:	491d      	ldr	r1, [pc, #116]	; (34950 <sys_clock_announce+0x164>)
   348da:	4823      	ldr	r0, [pc, #140]	; (34968 <sys_clock_announce+0x17c>)
   348dc:	f001 fcda 	bl	36294 <assert_print>
   348e0:	2194      	movs	r1, #148	; 0x94
   348e2:	4620      	mov	r0, r4
   348e4:	f001 fccf 	bl	36286 <assert_post_action>
	}

	if (first() != NULL) {
   348e8:	b144      	cbz	r4, 348fc <sys_clock_announce+0x110>
		first()->dticks -= announce_remaining;
   348ea:	6923      	ldr	r3, [r4, #16]
   348ec:	6962      	ldr	r2, [r4, #20]
   348ee:	4919      	ldr	r1, [pc, #100]	; (34954 <sys_clock_announce+0x168>)
   348f0:	6809      	ldr	r1, [r1, #0]
   348f2:	1a5b      	subs	r3, r3, r1
   348f4:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
   348f8:	6123      	str	r3, [r4, #16]
   348fa:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
   348fc:	4a16      	ldr	r2, [pc, #88]	; (34958 <sys_clock_announce+0x16c>)
   348fe:	4e15      	ldr	r6, [pc, #84]	; (34954 <sys_clock_announce+0x168>)
   34900:	6830      	ldr	r0, [r6, #0]
   34902:	6813      	ldr	r3, [r2, #0]
   34904:	6851      	ldr	r1, [r2, #4]
   34906:	181b      	adds	r3, r3, r0
   34908:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
   3490c:	6013      	str	r3, [r2, #0]
   3490e:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
   34910:	2400      	movs	r4, #0
   34912:	6034      	str	r4, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   34914:	f7ff fd62 	bl	343dc <next_timeout>
   34918:	4621      	mov	r1, r4
   3491a:	f7f8 fccb 	bl	2d2b4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3491e:	480c      	ldr	r0, [pc, #48]	; (34950 <sys_clock_announce+0x164>)
   34920:	f7fc fd7c 	bl	3141c <z_spin_unlock_valid>
   34924:	b120      	cbz	r0, 34930 <sys_clock_announce+0x144>
	__asm__ volatile(
   34926:	f385 8811 	msr	BASEPRI, r5
   3492a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3492e:	bd70      	pop	{r4, r5, r6, pc}
   34930:	4c0a      	ldr	r4, [pc, #40]	; (3495c <sys_clock_announce+0x170>)
   34932:	23c2      	movs	r3, #194	; 0xc2
   34934:	4622      	mov	r2, r4
   34936:	490d      	ldr	r1, [pc, #52]	; (3496c <sys_clock_announce+0x180>)
   34938:	480a      	ldr	r0, [pc, #40]	; (34964 <sys_clock_announce+0x178>)
   3493a:	f001 fcab 	bl	36294 <assert_print>
   3493e:	4904      	ldr	r1, [pc, #16]	; (34950 <sys_clock_announce+0x164>)
   34940:	480b      	ldr	r0, [pc, #44]	; (34970 <sys_clock_announce+0x184>)
   34942:	f001 fca7 	bl	36294 <assert_print>
   34946:	21c2      	movs	r1, #194	; 0xc2
   34948:	4620      	mov	r0, r4
   3494a:	f001 fc9c 	bl	36286 <assert_post_action>
   3494e:	bf00      	nop
   34950:	2000ca98 	.word	0x2000ca98
   34954:	2000ca94 	.word	0x2000ca94
   34958:	2000bbc8 	.word	0x2000bbc8
   3495c:	00040b28 	.word	0x00040b28
   34960:	00040b88 	.word	0x00040b88
   34964:	0003f72c 	.word	0x0003f72c
   34968:	00040ba0 	.word	0x00040ba0
   3496c:	00040b58 	.word	0x00040b58
   34970:	00040b70 	.word	0x00040b70

00034974 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   34974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   34976:	f04f 0320 	mov.w	r3, #32
   3497a:	f3ef 8611 	mrs	r6, BASEPRI
   3497e:	f383 8812 	msr	BASEPRI_MAX, r3
   34982:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34986:	481f      	ldr	r0, [pc, #124]	; (34a04 <sys_clock_tick_get+0x90>)
   34988:	f7fc fd38 	bl	313fc <z_spin_lock_valid>
   3498c:	b1c0      	cbz	r0, 349c0 <sys_clock_tick_get+0x4c>
   3498e:	2700      	movs	r7, #0
	z_spin_lock_set_owner(l);
   34990:	481c      	ldr	r0, [pc, #112]	; (34a04 <sys_clock_tick_get+0x90>)
   34992:	f7fc fd53 	bl	3143c <z_spin_lock_set_owner>
	uint64_t t = 0U;
   34996:	2400      	movs	r4, #0
   34998:	4625      	mov	r5, r4

	LOCKED(&timeout_lock) {
   3499a:	bb7f      	cbnz	r7, 349fc <sys_clock_tick_get+0x88>
		t = curr_tick + elapsed();
   3499c:	f7ff fd12 	bl	343c4 <elapsed>
   349a0:	4a19      	ldr	r2, [pc, #100]	; (34a08 <sys_clock_tick_get+0x94>)
   349a2:	6814      	ldr	r4, [r2, #0]
   349a4:	6855      	ldr	r5, [r2, #4]
   349a6:	1904      	adds	r4, r0, r4
   349a8:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   349ac:	4815      	ldr	r0, [pc, #84]	; (34a04 <sys_clock_tick_get+0x90>)
   349ae:	f7fc fd35 	bl	3141c <z_spin_unlock_valid>
   349b2:	b1a0      	cbz	r0, 349de <sys_clock_tick_get+0x6a>
	__asm__ volatile(
   349b4:	f386 8811 	msr	BASEPRI, r6
   349b8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   349bc:	2701      	movs	r7, #1
   349be:	e7ec      	b.n	3499a <sys_clock_tick_get+0x26>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   349c0:	4c12      	ldr	r4, [pc, #72]	; (34a0c <sys_clock_tick_get+0x98>)
   349c2:	2394      	movs	r3, #148	; 0x94
   349c4:	4622      	mov	r2, r4
   349c6:	4912      	ldr	r1, [pc, #72]	; (34a10 <sys_clock_tick_get+0x9c>)
   349c8:	4812      	ldr	r0, [pc, #72]	; (34a14 <sys_clock_tick_get+0xa0>)
   349ca:	f001 fc63 	bl	36294 <assert_print>
   349ce:	490d      	ldr	r1, [pc, #52]	; (34a04 <sys_clock_tick_get+0x90>)
   349d0:	4811      	ldr	r0, [pc, #68]	; (34a18 <sys_clock_tick_get+0xa4>)
   349d2:	f001 fc5f 	bl	36294 <assert_print>
   349d6:	2194      	movs	r1, #148	; 0x94
   349d8:	4620      	mov	r0, r4
   349da:	f001 fc54 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   349de:	4c0b      	ldr	r4, [pc, #44]	; (34a0c <sys_clock_tick_get+0x98>)
   349e0:	23c2      	movs	r3, #194	; 0xc2
   349e2:	4622      	mov	r2, r4
   349e4:	490d      	ldr	r1, [pc, #52]	; (34a1c <sys_clock_tick_get+0xa8>)
   349e6:	480b      	ldr	r0, [pc, #44]	; (34a14 <sys_clock_tick_get+0xa0>)
   349e8:	f001 fc54 	bl	36294 <assert_print>
   349ec:	4905      	ldr	r1, [pc, #20]	; (34a04 <sys_clock_tick_get+0x90>)
   349ee:	480c      	ldr	r0, [pc, #48]	; (34a20 <sys_clock_tick_get+0xac>)
   349f0:	f001 fc50 	bl	36294 <assert_print>
   349f4:	21c2      	movs	r1, #194	; 0xc2
   349f6:	4620      	mov	r0, r4
   349f8:	f001 fc45 	bl	36286 <assert_post_action>
	}
	return t;
}
   349fc:	4620      	mov	r0, r4
   349fe:	4629      	mov	r1, r5
   34a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34a02:	bf00      	nop
   34a04:	2000ca98 	.word	0x2000ca98
   34a08:	2000bbc8 	.word	0x2000bbc8
   34a0c:	00040b28 	.word	0x00040b28
   34a10:	00040b88 	.word	0x00040b88
   34a14:	0003f72c 	.word	0x0003f72c
   34a18:	00040ba0 	.word	0x00040ba0
   34a1c:	00040b58 	.word	0x00040b58
   34a20:	00040b70 	.word	0x00040b70

00034a24 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   34a24:	b570      	push	{r4, r5, r6, lr}
   34a26:	4604      	mov	r4, r0
	__asm__ volatile(
   34a28:	f04f 0320 	mov.w	r3, #32
   34a2c:	f3ef 8611 	mrs	r6, BASEPRI
   34a30:	f383 8812 	msr	BASEPRI_MAX, r3
   34a34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34a38:	4865      	ldr	r0, [pc, #404]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34a3a:	f7fc fcdf 	bl	313fc <z_spin_lock_valid>
   34a3e:	2800      	cmp	r0, #0
   34a40:	d049      	beq.n	34ad6 <z_timer_expiration_handler+0xb2>
	z_spin_lock_set_owner(l);
   34a42:	4863      	ldr	r0, [pc, #396]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34a44:	f7fc fcfa 	bl	3143c <z_spin_lock_set_owner>
	return k;
   34a48:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   34a4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   34a4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   34a4e:	ea52 0103 	orrs.w	r1, r2, r3
   34a52:	d005      	beq.n	34a60 <z_timer_expiration_handler+0x3c>
   34a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   34a58:	bf08      	it	eq
   34a5a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   34a5e:	d149      	bne.n	34af4 <z_timer_expiration_handler+0xd0>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   34a60:	6b23      	ldr	r3, [r4, #48]	; 0x30
   34a62:	3301      	adds	r3, #1
   34a64:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   34a66:	6a23      	ldr	r3, [r4, #32]
   34a68:	b1db      	cbz	r3, 34aa2 <z_timer_expiration_handler+0x7e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34a6a:	4859      	ldr	r0, [pc, #356]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34a6c:	f7fc fcd6 	bl	3141c <z_spin_unlock_valid>
   34a70:	2800      	cmp	r0, #0
   34a72:	d068      	beq.n	34b46 <z_timer_expiration_handler+0x122>
	__asm__ volatile(
   34a74:	f386 8811 	msr	BASEPRI, r6
   34a78:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   34a7c:	6a23      	ldr	r3, [r4, #32]
   34a7e:	4620      	mov	r0, r4
   34a80:	4798      	blx	r3
	__asm__ volatile(
   34a82:	f04f 0320 	mov.w	r3, #32
   34a86:	f3ef 8511 	mrs	r5, BASEPRI
   34a8a:	f383 8812 	msr	BASEPRI_MAX, r3
   34a8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34a92:	484f      	ldr	r0, [pc, #316]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34a94:	f7fc fcb2 	bl	313fc <z_spin_lock_valid>
   34a98:	2800      	cmp	r0, #0
   34a9a:	d063      	beq.n	34b64 <z_timer_expiration_handler+0x140>
	z_spin_lock_set_owner(l);
   34a9c:	484c      	ldr	r0, [pc, #304]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34a9e:	f7fc fccd 	bl	3143c <z_spin_lock_set_owner>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   34aa2:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   34aa6:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   34aa8:	42a3      	cmp	r3, r4
   34aaa:	d06a      	beq.n	34b82 <z_timer_expiration_handler+0x15e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   34aac:	2c00      	cmp	r4, #0
   34aae:	d068      	beq.n	34b82 <z_timer_expiration_handler+0x15e>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   34ab0:	4620      	mov	r0, r4
   34ab2:	f7fe f9db 	bl	32e6c <z_unpend_thread_no_timeout>
   34ab6:	2300      	movs	r3, #0
   34ab8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34abc:	4844      	ldr	r0, [pc, #272]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34abe:	f7fc fcad 	bl	3141c <z_spin_unlock_valid>
   34ac2:	2800      	cmp	r0, #0
   34ac4:	d075      	beq.n	34bb2 <z_timer_expiration_handler+0x18e>
	__asm__ volatile(
   34ac6:	f385 8811 	msr	BASEPRI, r5
   34aca:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   34ace:	4620      	mov	r0, r4
   34ad0:	f7fe fca6 	bl	33420 <z_ready_thread>
   34ad4:	e05d      	b.n	34b92 <z_timer_expiration_handler+0x16e>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34ad6:	4c3f      	ldr	r4, [pc, #252]	; (34bd4 <z_timer_expiration_handler+0x1b0>)
   34ad8:	2394      	movs	r3, #148	; 0x94
   34ada:	4622      	mov	r2, r4
   34adc:	493e      	ldr	r1, [pc, #248]	; (34bd8 <z_timer_expiration_handler+0x1b4>)
   34ade:	483f      	ldr	r0, [pc, #252]	; (34bdc <z_timer_expiration_handler+0x1b8>)
   34ae0:	f001 fbd8 	bl	36294 <assert_print>
   34ae4:	493a      	ldr	r1, [pc, #232]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34ae6:	483e      	ldr	r0, [pc, #248]	; (34be0 <z_timer_expiration_handler+0x1bc>)
   34ae8:	f001 fbd4 	bl	36294 <assert_print>
   34aec:	2194      	movs	r1, #148	; 0x94
   34aee:	4620      	mov	r0, r4
   34af0:	f001 fbc9 	bl	36286 <assert_post_action>
	return z_impl_k_uptime_ticks();
   34af4:	f00a f8b2 	bl	3ec5c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   34af8:	3001      	adds	r0, #1
   34afa:	f141 0100 	adc.w	r1, r1, #0
   34afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   34b00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   34b02:	18c0      	adds	r0, r0, r3
   34b04:	eb41 0102 	adc.w	r1, r1, r2
   34b08:	2801      	cmp	r0, #1
   34b0a:	f171 0100 	sbcs.w	r1, r1, #0
   34b0e:	da08      	bge.n	34b22 <z_timer_expiration_handler+0xfe>
   34b10:	f06f 0201 	mvn.w	r2, #1
   34b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34b18:	4932      	ldr	r1, [pc, #200]	; (34be4 <z_timer_expiration_handler+0x1c0>)
   34b1a:	4620      	mov	r0, r4
   34b1c:	f7ff fc84 	bl	34428 <z_add_timeout>
   34b20:	e79e      	b.n	34a60 <z_timer_expiration_handler+0x3c>
   34b22:	f00a f89b 	bl	3ec5c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   34b26:	3001      	adds	r0, #1
   34b28:	f141 0300 	adc.w	r3, r1, #0
   34b2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   34b2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   34b30:	1880      	adds	r0, r0, r2
   34b32:	eb43 0301 	adc.w	r3, r3, r1
   34b36:	f06f 0201 	mvn.w	r2, #1
   34b3a:	1a12      	subs	r2, r2, r0
   34b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   34b40:	eb61 0303 	sbc.w	r3, r1, r3
   34b44:	e7e8      	b.n	34b18 <z_timer_expiration_handler+0xf4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34b46:	4c23      	ldr	r4, [pc, #140]	; (34bd4 <z_timer_expiration_handler+0x1b0>)
   34b48:	23c2      	movs	r3, #194	; 0xc2
   34b4a:	4622      	mov	r2, r4
   34b4c:	4926      	ldr	r1, [pc, #152]	; (34be8 <z_timer_expiration_handler+0x1c4>)
   34b4e:	4823      	ldr	r0, [pc, #140]	; (34bdc <z_timer_expiration_handler+0x1b8>)
   34b50:	f001 fba0 	bl	36294 <assert_print>
   34b54:	491e      	ldr	r1, [pc, #120]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34b56:	4825      	ldr	r0, [pc, #148]	; (34bec <z_timer_expiration_handler+0x1c8>)
   34b58:	f001 fb9c 	bl	36294 <assert_print>
   34b5c:	21c2      	movs	r1, #194	; 0xc2
   34b5e:	4620      	mov	r0, r4
   34b60:	f001 fb91 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34b64:	4c1b      	ldr	r4, [pc, #108]	; (34bd4 <z_timer_expiration_handler+0x1b0>)
   34b66:	2394      	movs	r3, #148	; 0x94
   34b68:	4622      	mov	r2, r4
   34b6a:	491b      	ldr	r1, [pc, #108]	; (34bd8 <z_timer_expiration_handler+0x1b4>)
   34b6c:	481b      	ldr	r0, [pc, #108]	; (34bdc <z_timer_expiration_handler+0x1b8>)
   34b6e:	f001 fb91 	bl	36294 <assert_print>
   34b72:	4917      	ldr	r1, [pc, #92]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34b74:	481a      	ldr	r0, [pc, #104]	; (34be0 <z_timer_expiration_handler+0x1bc>)
   34b76:	f001 fb8d 	bl	36294 <assert_print>
   34b7a:	2194      	movs	r1, #148	; 0x94
   34b7c:	4620      	mov	r0, r4
   34b7e:	f001 fb82 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34b82:	4813      	ldr	r0, [pc, #76]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34b84:	f7fc fc4a 	bl	3141c <z_spin_unlock_valid>
   34b88:	b120      	cbz	r0, 34b94 <z_timer_expiration_handler+0x170>
   34b8a:	f385 8811 	msr	BASEPRI, r5
   34b8e:	f3bf 8f6f 	isb	sy
}
   34b92:	bd70      	pop	{r4, r5, r6, pc}
   34b94:	4c0f      	ldr	r4, [pc, #60]	; (34bd4 <z_timer_expiration_handler+0x1b0>)
   34b96:	23c2      	movs	r3, #194	; 0xc2
   34b98:	4622      	mov	r2, r4
   34b9a:	4913      	ldr	r1, [pc, #76]	; (34be8 <z_timer_expiration_handler+0x1c4>)
   34b9c:	480f      	ldr	r0, [pc, #60]	; (34bdc <z_timer_expiration_handler+0x1b8>)
   34b9e:	f001 fb79 	bl	36294 <assert_print>
   34ba2:	490b      	ldr	r1, [pc, #44]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34ba4:	4811      	ldr	r0, [pc, #68]	; (34bec <z_timer_expiration_handler+0x1c8>)
   34ba6:	f001 fb75 	bl	36294 <assert_print>
   34baa:	21c2      	movs	r1, #194	; 0xc2
   34bac:	4620      	mov	r0, r4
   34bae:	f001 fb6a 	bl	36286 <assert_post_action>
   34bb2:	4c08      	ldr	r4, [pc, #32]	; (34bd4 <z_timer_expiration_handler+0x1b0>)
   34bb4:	23c2      	movs	r3, #194	; 0xc2
   34bb6:	4622      	mov	r2, r4
   34bb8:	490b      	ldr	r1, [pc, #44]	; (34be8 <z_timer_expiration_handler+0x1c4>)
   34bba:	4808      	ldr	r0, [pc, #32]	; (34bdc <z_timer_expiration_handler+0x1b8>)
   34bbc:	f001 fb6a 	bl	36294 <assert_print>
   34bc0:	4903      	ldr	r1, [pc, #12]	; (34bd0 <z_timer_expiration_handler+0x1ac>)
   34bc2:	480a      	ldr	r0, [pc, #40]	; (34bec <z_timer_expiration_handler+0x1c8>)
   34bc4:	f001 fb66 	bl	36294 <assert_print>
   34bc8:	21c2      	movs	r1, #194	; 0xc2
   34bca:	4620      	mov	r0, r4
   34bcc:	f001 fb5b 	bl	36286 <assert_post_action>
   34bd0:	2000ca9c 	.word	0x2000ca9c
   34bd4:	00040b28 	.word	0x00040b28
   34bd8:	00040b88 	.word	0x00040b88
   34bdc:	0003f72c 	.word	0x0003f72c
   34be0:	00040ba0 	.word	0x00040ba0
   34be4:	00034a25 	.word	0x00034a25
   34be8:	00040b58 	.word	0x00040b58
   34bec:	00040b70 	.word	0x00040b70

00034bf0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   34bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34bf4:	461e      	mov	r6, r3
   34bf6:	9f06      	ldr	r7, [sp, #24]
   34bf8:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   34bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   34c00:	bf08      	it	eq
   34c02:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   34c06:	d02f      	beq.n	34c68 <z_impl_k_timer_start+0x78>
   34c08:	4605      	mov	r5, r0
   34c0a:	4614      	mov	r4, r2
   34c0c:	4613      	mov	r3, r2
   34c0e:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   34c10:	4640      	mov	r0, r8
   34c12:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   34c16:	bf08      	it	eq
   34c18:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
   34c1c:	d00d      	beq.n	34c3a <z_impl_k_timer_start+0x4a>
   34c1e:	ea57 0c08 	orrs.w	ip, r7, r8
   34c22:	d00a      	beq.n	34c3a <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
   34c24:	f06f 0c01 	mvn.w	ip, #1
   34c28:	ebbc 0c07 	subs.w	ip, ip, r7
   34c2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   34c30:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   34c34:	f1bc 0f00 	cmp.w	ip, #0
   34c38:	db18      	blt.n	34c6c <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   34c3a:	f06f 0201 	mvn.w	r2, #1
   34c3e:	1ad2      	subs	r2, r2, r3
   34c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   34c44:	eb62 0201 	sbc.w	r2, r2, r1
   34c48:	2a00      	cmp	r2, #0
   34c4a:	db1a      	blt.n	34c82 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   34c4c:	4628      	mov	r0, r5
   34c4e:	f7ff fcc1 	bl	345d4 <z_abort_timeout>
	timer->period = period;
   34c52:	62af      	str	r7, [r5, #40]	; 0x28
   34c54:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
   34c58:	2300      	movs	r3, #0
   34c5a:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   34c5c:	4622      	mov	r2, r4
   34c5e:	4633      	mov	r3, r6
   34c60:	490e      	ldr	r1, [pc, #56]	; (34c9c <z_impl_k_timer_start+0xac>)
   34c62:	4628      	mov	r0, r5
   34c64:	f7ff fbe0 	bl	34428 <z_add_timeout>
		     duration);
}
   34c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   34c6c:	2f02      	cmp	r7, #2
   34c6e:	f170 0000 	sbcs.w	r0, r0, #0
   34c72:	da02      	bge.n	34c7a <z_impl_k_timer_start+0x8a>
   34c74:	2702      	movs	r7, #2
   34c76:	f04f 0800 	mov.w	r8, #0
   34c7a:	3f01      	subs	r7, #1
   34c7c:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
   34c80:	e7db      	b.n	34c3a <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   34c82:	461c      	mov	r4, r3
   34c84:	460e      	mov	r6, r1
   34c86:	2b01      	cmp	r3, #1
   34c88:	f171 0100 	sbcs.w	r1, r1, #0
   34c8c:	da01      	bge.n	34c92 <z_impl_k_timer_start+0xa2>
   34c8e:	2401      	movs	r4, #1
   34c90:	2600      	movs	r6, #0
   34c92:	3c01      	subs	r4, #1
   34c94:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
   34c98:	e7d8      	b.n	34c4c <z_impl_k_timer_start+0x5c>
   34c9a:	bf00      	nop
   34c9c:	00034a25 	.word	0x00034a25

00034ca0 <is_condition_met>:
	SYS_PORT_TRACING_FUNC(k_poll_api, event_init, event);
}

/* must be called with interrupts locked */
static inline bool is_condition_met(struct k_poll_event *event, uint32_t *state)
{
   34ca0:	b538      	push	{r3, r4, r5, lr}
   34ca2:	4604      	mov	r4, r0
	switch (event->type) {
   34ca4:	7b43      	ldrb	r3, [r0, #13]
   34ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   34caa:	2b08      	cmp	r3, #8
   34cac:	d827      	bhi.n	34cfe <is_condition_met+0x5e>
   34cae:	e8df f003 	tbb	[pc, r3]
   34cb2:	1537      	.short	0x1537
   34cb4:	260e2605 	.word	0x260e2605
   34cb8:	2626      	.short	0x2626
   34cba:	1d          	.byte	0x1d
   34cbb:	00          	.byte	0x00
	case K_POLL_TYPE_SEM_AVAILABLE:
		if (k_sem_count_get(event->sem) > 0U) {
   34cbc:	6903      	ldr	r3, [r0, #16]
	return sem->count;
   34cbe:	689b      	ldr	r3, [r3, #8]
   34cc0:	b90b      	cbnz	r3, 34cc6 <is_condition_met+0x26>
	default:
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
		break;
	}

	return false;
   34cc2:	2000      	movs	r0, #0
   34cc4:	e02d      	b.n	34d22 <is_condition_met+0x82>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   34cc6:	2302      	movs	r3, #2
   34cc8:	600b      	str	r3, [r1, #0]
			return true;
   34cca:	2001      	movs	r0, #1
   34ccc:	e029      	b.n	34d22 <is_condition_met+0x82>
		if (!k_queue_is_empty(event->queue)) {
   34cce:	6903      	ldr	r3, [r0, #16]
	return list->head;
   34cd0:	681b      	ldr	r3, [r3, #0]
   34cd2:	b33b      	cbz	r3, 34d24 <is_condition_met+0x84>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   34cd4:	2304      	movs	r3, #4
   34cd6:	600b      	str	r3, [r1, #0]
			return true;
   34cd8:	2001      	movs	r0, #1
   34cda:	e022      	b.n	34d22 <is_condition_met+0x82>
		if (event->signal->signaled != 0U) {
   34cdc:	6903      	ldr	r3, [r0, #16]
   34cde:	689b      	ldr	r3, [r3, #8]
   34ce0:	b90b      	cbnz	r3, 34ce6 <is_condition_met+0x46>
	return false;
   34ce2:	2000      	movs	r0, #0
   34ce4:	e01d      	b.n	34d22 <is_condition_met+0x82>
			*state = K_POLL_STATE_SIGNALED;
   34ce6:	2001      	movs	r0, #1
   34ce8:	6008      	str	r0, [r1, #0]
			return true;
   34cea:	e01a      	b.n	34d22 <is_condition_met+0x82>
		if (event->msgq->used_msgs > 0) {
   34cec:	6903      	ldr	r3, [r0, #16]
   34cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   34cf0:	b90b      	cbnz	r3, 34cf6 <is_condition_met+0x56>
	return false;
   34cf2:	2000      	movs	r0, #0
   34cf4:	e015      	b.n	34d22 <is_condition_met+0x82>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   34cf6:	2310      	movs	r3, #16
   34cf8:	600b      	str	r3, [r1, #0]
			return true;
   34cfa:	2001      	movs	r0, #1
   34cfc:	e011      	b.n	34d22 <is_condition_met+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   34cfe:	4d0a      	ldr	r5, [pc, #40]	; (34d28 <is_condition_met+0x88>)
   34d00:	2363      	movs	r3, #99	; 0x63
   34d02:	462a      	mov	r2, r5
   34d04:	4909      	ldr	r1, [pc, #36]	; (34d2c <is_condition_met+0x8c>)
   34d06:	480a      	ldr	r0, [pc, #40]	; (34d30 <is_condition_met+0x90>)
   34d08:	f001 fac4 	bl	36294 <assert_print>
   34d0c:	7b61      	ldrb	r1, [r4, #13]
   34d0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   34d12:	4808      	ldr	r0, [pc, #32]	; (34d34 <is_condition_met+0x94>)
   34d14:	f001 fabe 	bl	36294 <assert_print>
   34d18:	2163      	movs	r1, #99	; 0x63
   34d1a:	4628      	mov	r0, r5
   34d1c:	f001 fab3 	bl	36286 <assert_post_action>
	switch (event->type) {
   34d20:	2000      	movs	r0, #0
}
   34d22:	bd38      	pop	{r3, r4, r5, pc}
	return false;
   34d24:	2000      	movs	r0, #0
   34d26:	e7fc      	b.n	34d22 <is_condition_met+0x82>
   34d28:	00046680 	.word	0x00046680
   34d2c:	0003f964 	.word	0x0003f964
   34d30:	0003f72c 	.word	0x0003f72c
   34d34:	000466a4 	.word	0x000466a4

00034d38 <clear_event_registration>:
	event->poller = poller;
}

/* must be called with interrupts locked */
static inline void clear_event_registration(struct k_poll_event *event)
{
   34d38:	b510      	push	{r4, lr}
	bool remove_event = false;

	event->poller = NULL;
   34d3a:	2300      	movs	r3, #0
   34d3c:	6083      	str	r3, [r0, #8]

	switch (event->type) {
   34d3e:	7b43      	ldrb	r3, [r0, #13]
   34d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   34d44:	2b08      	cmp	r3, #8
   34d46:	d852      	bhi.n	34dee <clear_event_registration+0xb6>
   34d48:	e8df f003 	tbb	[pc, r3]
   34d4c:	51052f0f 	.word	0x51052f0f
   34d50:	5151511e 	.word	0x5151511e
   34d54:	40          	.byte	0x40
   34d55:	00          	.byte	0x00
	case K_POLL_TYPE_SEM_AVAILABLE:
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   34d56:	6903      	ldr	r3, [r0, #16]
   34d58:	b143      	cbz	r3, 34d6c <clear_event_registration+0x34>
	return node->next != NULL;
   34d5a:	6803      	ldr	r3, [r0, #0]
		break;
	default:
		__ASSERT(false, "invalid event type\n");
		break;
	}
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   34d5c:	b12b      	cbz	r3, 34d6a <clear_event_registration+0x32>
	sys_dnode_t *const prev = node->prev;
   34d5e:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   34d60:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   34d62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   34d64:	2300      	movs	r3, #0
   34d66:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   34d68:	6043      	str	r3, [r0, #4]
		sys_dlist_remove(&event->_node);
	}
}
   34d6a:	bd10      	pop	{r4, pc}
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   34d6c:	4c27      	ldr	r4, [pc, #156]	; (34e0c <clear_event_registration+0xd4>)
   34d6e:	23b6      	movs	r3, #182	; 0xb6
   34d70:	4622      	mov	r2, r4
   34d72:	4927      	ldr	r1, [pc, #156]	; (34e10 <clear_event_registration+0xd8>)
   34d74:	4827      	ldr	r0, [pc, #156]	; (34e14 <clear_event_registration+0xdc>)
   34d76:	f001 fa8d 	bl	36294 <assert_print>
   34d7a:	4827      	ldr	r0, [pc, #156]	; (34e18 <clear_event_registration+0xe0>)
   34d7c:	f001 fa8a 	bl	36294 <assert_print>
   34d80:	21b6      	movs	r1, #182	; 0xb6
   34d82:	4620      	mov	r0, r4
   34d84:	f001 fa7f 	bl	36286 <assert_post_action>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   34d88:	6903      	ldr	r3, [r0, #16]
   34d8a:	2b00      	cmp	r3, #0
   34d8c:	d1e5      	bne.n	34d5a <clear_event_registration+0x22>
   34d8e:	4c1f      	ldr	r4, [pc, #124]	; (34e0c <clear_event_registration+0xd4>)
   34d90:	23ba      	movs	r3, #186	; 0xba
   34d92:	4622      	mov	r2, r4
   34d94:	4921      	ldr	r1, [pc, #132]	; (34e1c <clear_event_registration+0xe4>)
   34d96:	481f      	ldr	r0, [pc, #124]	; (34e14 <clear_event_registration+0xdc>)
   34d98:	f001 fa7c 	bl	36294 <assert_print>
   34d9c:	4820      	ldr	r0, [pc, #128]	; (34e20 <clear_event_registration+0xe8>)
   34d9e:	f001 fa79 	bl	36294 <assert_print>
   34da2:	21ba      	movs	r1, #186	; 0xba
   34da4:	4620      	mov	r0, r4
   34da6:	f001 fa6e 	bl	36286 <assert_post_action>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   34daa:	6903      	ldr	r3, [r0, #16]
   34dac:	2b00      	cmp	r3, #0
   34dae:	d1d4      	bne.n	34d5a <clear_event_registration+0x22>
   34db0:	4c16      	ldr	r4, [pc, #88]	; (34e0c <clear_event_registration+0xd4>)
   34db2:	23be      	movs	r3, #190	; 0xbe
   34db4:	4622      	mov	r2, r4
   34db6:	491b      	ldr	r1, [pc, #108]	; (34e24 <clear_event_registration+0xec>)
   34db8:	4816      	ldr	r0, [pc, #88]	; (34e14 <clear_event_registration+0xdc>)
   34dba:	f001 fa6b 	bl	36294 <assert_print>
   34dbe:	481a      	ldr	r0, [pc, #104]	; (34e28 <clear_event_registration+0xf0>)
   34dc0:	f001 fa68 	bl	36294 <assert_print>
   34dc4:	21be      	movs	r1, #190	; 0xbe
   34dc6:	4620      	mov	r0, r4
   34dc8:	f001 fa5d 	bl	36286 <assert_post_action>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   34dcc:	6903      	ldr	r3, [r0, #16]
   34dce:	2b00      	cmp	r3, #0
   34dd0:	d1c3      	bne.n	34d5a <clear_event_registration+0x22>
   34dd2:	4c0e      	ldr	r4, [pc, #56]	; (34e0c <clear_event_registration+0xd4>)
   34dd4:	23c2      	movs	r3, #194	; 0xc2
   34dd6:	4622      	mov	r2, r4
   34dd8:	4914      	ldr	r1, [pc, #80]	; (34e2c <clear_event_registration+0xf4>)
   34dda:	480e      	ldr	r0, [pc, #56]	; (34e14 <clear_event_registration+0xdc>)
   34ddc:	f001 fa5a 	bl	36294 <assert_print>
   34de0:	4813      	ldr	r0, [pc, #76]	; (34e30 <clear_event_registration+0xf8>)
   34de2:	f001 fa57 	bl	36294 <assert_print>
   34de6:	21c2      	movs	r1, #194	; 0xc2
   34de8:	4620      	mov	r0, r4
   34dea:	f001 fa4c 	bl	36286 <assert_post_action>
		__ASSERT(false, "invalid event type\n");
   34dee:	4c07      	ldr	r4, [pc, #28]	; (34e0c <clear_event_registration+0xd4>)
   34df0:	23cf      	movs	r3, #207	; 0xcf
   34df2:	4622      	mov	r2, r4
   34df4:	490f      	ldr	r1, [pc, #60]	; (34e34 <clear_event_registration+0xfc>)
   34df6:	4807      	ldr	r0, [pc, #28]	; (34e14 <clear_event_registration+0xdc>)
   34df8:	f001 fa4c 	bl	36294 <assert_print>
   34dfc:	480e      	ldr	r0, [pc, #56]	; (34e38 <clear_event_registration+0x100>)
   34dfe:	f001 fa49 	bl	36294 <assert_print>
   34e02:	21cf      	movs	r1, #207	; 0xcf
   34e04:	4620      	mov	r0, r4
   34e06:	f001 fa3e 	bl	36286 <assert_post_action>
   34e0a:	bf00      	nop
   34e0c:	00046680 	.word	0x00046680
   34e10:	000466c4 	.word	0x000466c4
   34e14:	0003f72c 	.word	0x0003f72c
   34e18:	000466e0 	.word	0x000466e0
   34e1c:	000466f8 	.word	0x000466f8
   34e20:	00046714 	.word	0x00046714
   34e24:	00046728 	.word	0x00046728
   34e28:	00046748 	.word	0x00046748
   34e2c:	00046760 	.word	0x00046760
   34e30:	0004677c 	.word	0x0004677c
   34e34:	0003f964 	.word	0x0003f964
   34e38:	00046798 	.word	0x00046798

00034e3c <register_event>:
{
   34e3c:	b538      	push	{r3, r4, r5, lr}
   34e3e:	4604      	mov	r4, r0
   34e40:	460d      	mov	r5, r1
	switch (event->type) {
   34e42:	7b43      	ldrb	r3, [r0, #13]
   34e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   34e48:	2b08      	cmp	r3, #8
   34e4a:	d85e      	bhi.n	34f0a <register_event+0xce>
   34e4c:	e8df f003 	tbb	[pc, r3]
   34e50:	5d05320c 	.word	0x5d05320c
   34e54:	5d5d5d1c 	.word	0x5d5d5d1c
   34e58:	47          	.byte	0x47
   34e59:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   34e5a:	6900      	ldr	r0, [r0, #16]
   34e5c:	b130      	cbz	r0, 34e6c <register_event+0x30>
		add_event(&event->sem->poll_events, event, poller);
   34e5e:	460a      	mov	r2, r1
   34e60:	4621      	mov	r1, r4
   34e62:	3010      	adds	r0, #16
   34e64:	f009 ff60 	bl	3ed28 <add_event>
	event->poller = poller;
   34e68:	60a5      	str	r5, [r4, #8]
}
   34e6a:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   34e6c:	4c2e      	ldr	r4, [pc, #184]	; (34f28 <register_event+0xec>)
   34e6e:	238d      	movs	r3, #141	; 0x8d
   34e70:	4622      	mov	r2, r4
   34e72:	492e      	ldr	r1, [pc, #184]	; (34f2c <register_event+0xf0>)
   34e74:	482e      	ldr	r0, [pc, #184]	; (34f30 <register_event+0xf4>)
   34e76:	f001 fa0d 	bl	36294 <assert_print>
   34e7a:	482e      	ldr	r0, [pc, #184]	; (34f34 <register_event+0xf8>)
   34e7c:	f001 fa0a 	bl	36294 <assert_print>
   34e80:	218d      	movs	r1, #141	; 0x8d
   34e82:	4620      	mov	r0, r4
   34e84:	f001 f9ff 	bl	36286 <assert_post_action>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   34e88:	6900      	ldr	r0, [r0, #16]
   34e8a:	b128      	cbz	r0, 34e98 <register_event+0x5c>
		add_event(&event->queue->poll_events, event, poller);
   34e8c:	460a      	mov	r2, r1
   34e8e:	4621      	mov	r1, r4
   34e90:	3014      	adds	r0, #20
   34e92:	f009 ff49 	bl	3ed28 <add_event>
		break;
   34e96:	e7e7      	b.n	34e68 <register_event+0x2c>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   34e98:	4c23      	ldr	r4, [pc, #140]	; (34f28 <register_event+0xec>)
   34e9a:	2391      	movs	r3, #145	; 0x91
   34e9c:	4622      	mov	r2, r4
   34e9e:	4926      	ldr	r1, [pc, #152]	; (34f38 <register_event+0xfc>)
   34ea0:	4823      	ldr	r0, [pc, #140]	; (34f30 <register_event+0xf4>)
   34ea2:	f001 f9f7 	bl	36294 <assert_print>
   34ea6:	4825      	ldr	r0, [pc, #148]	; (34f3c <register_event+0x100>)
   34ea8:	f001 f9f4 	bl	36294 <assert_print>
   34eac:	2191      	movs	r1, #145	; 0x91
   34eae:	4620      	mov	r0, r4
   34eb0:	f001 f9e9 	bl	36286 <assert_post_action>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   34eb4:	6900      	ldr	r0, [r0, #16]
   34eb6:	b120      	cbz	r0, 34ec2 <register_event+0x86>
		add_event(&event->signal->poll_events, event, poller);
   34eb8:	460a      	mov	r2, r1
   34eba:	4621      	mov	r1, r4
   34ebc:	f009 ff34 	bl	3ed28 <add_event>
		break;
   34ec0:	e7d2      	b.n	34e68 <register_event+0x2c>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   34ec2:	4c19      	ldr	r4, [pc, #100]	; (34f28 <register_event+0xec>)
   34ec4:	2395      	movs	r3, #149	; 0x95
   34ec6:	4622      	mov	r2, r4
   34ec8:	491d      	ldr	r1, [pc, #116]	; (34f40 <register_event+0x104>)
   34eca:	4819      	ldr	r0, [pc, #100]	; (34f30 <register_event+0xf4>)
   34ecc:	f001 f9e2 	bl	36294 <assert_print>
   34ed0:	481c      	ldr	r0, [pc, #112]	; (34f44 <register_event+0x108>)
   34ed2:	f001 f9df 	bl	36294 <assert_print>
   34ed6:	2195      	movs	r1, #149	; 0x95
   34ed8:	4620      	mov	r0, r4
   34eda:	f001 f9d4 	bl	36286 <assert_post_action>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   34ede:	6900      	ldr	r0, [r0, #16]
   34ee0:	b128      	cbz	r0, 34eee <register_event+0xb2>
		add_event(&event->msgq->poll_events, event, poller);
   34ee2:	460a      	mov	r2, r1
   34ee4:	4621      	mov	r1, r4
   34ee6:	3028      	adds	r0, #40	; 0x28
   34ee8:	f009 ff1e 	bl	3ed28 <add_event>
		break;
   34eec:	e7bc      	b.n	34e68 <register_event+0x2c>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   34eee:	4c0e      	ldr	r4, [pc, #56]	; (34f28 <register_event+0xec>)
   34ef0:	2399      	movs	r3, #153	; 0x99
   34ef2:	4622      	mov	r2, r4
   34ef4:	4914      	ldr	r1, [pc, #80]	; (34f48 <register_event+0x10c>)
   34ef6:	480e      	ldr	r0, [pc, #56]	; (34f30 <register_event+0xf4>)
   34ef8:	f001 f9cc 	bl	36294 <assert_print>
   34efc:	4813      	ldr	r0, [pc, #76]	; (34f4c <register_event+0x110>)
   34efe:	f001 f9c9 	bl	36294 <assert_print>
   34f02:	2199      	movs	r1, #153	; 0x99
   34f04:	4620      	mov	r0, r4
   34f06:	f001 f9be 	bl	36286 <assert_post_action>
		__ASSERT(false, "invalid event type\n");
   34f0a:	4c07      	ldr	r4, [pc, #28]	; (34f28 <register_event+0xec>)
   34f0c:	23a6      	movs	r3, #166	; 0xa6
   34f0e:	4622      	mov	r2, r4
   34f10:	490f      	ldr	r1, [pc, #60]	; (34f50 <register_event+0x114>)
   34f12:	4807      	ldr	r0, [pc, #28]	; (34f30 <register_event+0xf4>)
   34f14:	f001 f9be 	bl	36294 <assert_print>
   34f18:	480e      	ldr	r0, [pc, #56]	; (34f54 <register_event+0x118>)
   34f1a:	f001 f9bb 	bl	36294 <assert_print>
   34f1e:	21a6      	movs	r1, #166	; 0xa6
   34f20:	4620      	mov	r0, r4
   34f22:	f001 f9b0 	bl	36286 <assert_post_action>
   34f26:	bf00      	nop
   34f28:	00046680 	.word	0x00046680
   34f2c:	000466c4 	.word	0x000466c4
   34f30:	0003f72c 	.word	0x0003f72c
   34f34:	000466e0 	.word	0x000466e0
   34f38:	000466f8 	.word	0x000466f8
   34f3c:	00046714 	.word	0x00046714
   34f40:	00046728 	.word	0x00046728
   34f44:	00046748 	.word	0x00046748
   34f48:	00046760 	.word	0x00046760
   34f4c:	0004677c 	.word	0x0004677c
   34f50:	0003f964 	.word	0x0003f964
   34f54:	00046798 	.word	0x00046798

00034f58 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   34f58:	b570      	push	{r4, r5, r6, lr}
   34f5a:	4606      	mov	r6, r0
   34f5c:	4614      	mov	r4, r2
	while (num_events--) {
   34f5e:	1e4d      	subs	r5, r1, #1
   34f60:	2900      	cmp	r1, #0
   34f62:	d03c      	beq.n	34fde <clear_event_registrations+0x86>
		clear_event_registration(&events[num_events]);
   34f64:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   34f68:	eb06 0080 	add.w	r0, r6, r0, lsl #2
   34f6c:	f7ff fee4 	bl	34d38 <clear_event_registration>
   34f70:	481b      	ldr	r0, [pc, #108]	; (34fe0 <clear_event_registrations+0x88>)
   34f72:	f7fc fa53 	bl	3141c <z_spin_unlock_valid>
   34f76:	b1a0      	cbz	r0, 34fa2 <clear_event_registrations+0x4a>
   34f78:	f384 8811 	msr	BASEPRI, r4
   34f7c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   34f80:	f04f 0320 	mov.w	r3, #32
   34f84:	f3ef 8411 	mrs	r4, BASEPRI
   34f88:	f383 8812 	msr	BASEPRI_MAX, r3
   34f8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34f90:	4813      	ldr	r0, [pc, #76]	; (34fe0 <clear_event_registrations+0x88>)
   34f92:	f7fc fa33 	bl	313fc <z_spin_lock_valid>
   34f96:	b198      	cbz	r0, 34fc0 <clear_event_registrations+0x68>
	z_spin_lock_set_owner(l);
   34f98:	4811      	ldr	r0, [pc, #68]	; (34fe0 <clear_event_registrations+0x88>)
   34f9a:	f7fc fa4f 	bl	3143c <z_spin_lock_set_owner>
	while (num_events--) {
   34f9e:	4629      	mov	r1, r5
	return k;
   34fa0:	e7dd      	b.n	34f5e <clear_event_registrations+0x6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   34fa2:	4c10      	ldr	r4, [pc, #64]	; (34fe4 <clear_event_registrations+0x8c>)
   34fa4:	23c2      	movs	r3, #194	; 0xc2
   34fa6:	4622      	mov	r2, r4
   34fa8:	490f      	ldr	r1, [pc, #60]	; (34fe8 <clear_event_registrations+0x90>)
   34faa:	4810      	ldr	r0, [pc, #64]	; (34fec <clear_event_registrations+0x94>)
   34fac:	f001 f972 	bl	36294 <assert_print>
   34fb0:	490b      	ldr	r1, [pc, #44]	; (34fe0 <clear_event_registrations+0x88>)
   34fb2:	480f      	ldr	r0, [pc, #60]	; (34ff0 <clear_event_registrations+0x98>)
   34fb4:	f001 f96e 	bl	36294 <assert_print>
   34fb8:	21c2      	movs	r1, #194	; 0xc2
   34fba:	4620      	mov	r0, r4
   34fbc:	f001 f963 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   34fc0:	4c08      	ldr	r4, [pc, #32]	; (34fe4 <clear_event_registrations+0x8c>)
   34fc2:	2394      	movs	r3, #148	; 0x94
   34fc4:	4622      	mov	r2, r4
   34fc6:	490b      	ldr	r1, [pc, #44]	; (34ff4 <clear_event_registrations+0x9c>)
   34fc8:	4808      	ldr	r0, [pc, #32]	; (34fec <clear_event_registrations+0x94>)
   34fca:	f001 f963 	bl	36294 <assert_print>
   34fce:	4904      	ldr	r1, [pc, #16]	; (34fe0 <clear_event_registrations+0x88>)
   34fd0:	4809      	ldr	r0, [pc, #36]	; (34ff8 <clear_event_registrations+0xa0>)
   34fd2:	f001 f95f 	bl	36294 <assert_print>
   34fd6:	2194      	movs	r1, #148	; 0x94
   34fd8:	4620      	mov	r0, r4
   34fda:	f001 f954 	bl	36286 <assert_post_action>
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   34fde:	bd70      	pop	{r4, r5, r6, pc}
   34fe0:	2000caa0 	.word	0x2000caa0
   34fe4:	00040b28 	.word	0x00040b28
   34fe8:	00040b58 	.word	0x00040b58
   34fec:	0003f72c 	.word	0x0003f72c
   34ff0:	00040b70 	.word	0x00040b70
   34ff4:	00040b88 	.word	0x00040b88
   34ff8:	00040ba0 	.word	0x00040ba0

00034ffc <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   34ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35000:	b083      	sub	sp, #12
   35002:	4680      	mov	r8, r0
   35004:	460f      	mov	r7, r1
   35006:	4691      	mov	r9, r2
   35008:	469a      	mov	sl, r3
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   3500a:	2500      	movs	r5, #0
	int events_registered = 0;
   3500c:	46ab      	mov	fp, r5
	for (int ii = 0; ii < num_events; ii++) {
   3500e:	e01f      	b.n	35050 <register_events+0x54>
   35010:	4c31      	ldr	r4, [pc, #196]	; (350d8 <register_events+0xdc>)
   35012:	2394      	movs	r3, #148	; 0x94
   35014:	4622      	mov	r2, r4
   35016:	4931      	ldr	r1, [pc, #196]	; (350dc <register_events+0xe0>)
   35018:	4831      	ldr	r0, [pc, #196]	; (350e0 <register_events+0xe4>)
   3501a:	f001 f93b 	bl	36294 <assert_print>
   3501e:	4931      	ldr	r1, [pc, #196]	; (350e4 <register_events+0xe8>)
   35020:	4831      	ldr	r0, [pc, #196]	; (350e8 <register_events+0xec>)
   35022:	f001 f937 	bl	36294 <assert_print>
   35026:	2194      	movs	r1, #148	; 0x94
   35028:	4620      	mov	r0, r4
   3502a:	f001 f92c 	bl	36286 <assert_post_action>

		key = k_spin_lock(&lock);
		if (is_condition_met(&events[ii], &state)) {
			set_event_ready(&events[ii], state);
			poller->is_polling = false;
		} else if (!just_check && poller->is_polling) {
   3502e:	f1ba 0f00 	cmp.w	sl, #0
   35032:	d103      	bne.n	3503c <register_events+0x40>
   35034:	f899 3000 	ldrb.w	r3, [r9]
   35038:	2b00      	cmp	r3, #0
   3503a:	d132      	bne.n	350a2 <register_events+0xa6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3503c:	4829      	ldr	r0, [pc, #164]	; (350e4 <register_events+0xe8>)
   3503e:	f7fc f9ed 	bl	3141c <z_spin_unlock_valid>
   35042:	2800      	cmp	r0, #0
   35044:	d034      	beq.n	350b0 <register_events+0xb4>
	__asm__ volatile(
   35046:	f386 8811 	msr	BASEPRI, r6
   3504a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3504e:	3501      	adds	r5, #1
   35050:	42bd      	cmp	r5, r7
   35052:	da3c      	bge.n	350ce <register_events+0xd2>
	__asm__ volatile(
   35054:	f04f 0320 	mov.w	r3, #32
   35058:	f3ef 8611 	mrs	r6, BASEPRI
   3505c:	f383 8812 	msr	BASEPRI_MAX, r3
   35060:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35064:	481f      	ldr	r0, [pc, #124]	; (350e4 <register_events+0xe8>)
   35066:	f7fc f9c9 	bl	313fc <z_spin_lock_valid>
   3506a:	2800      	cmp	r0, #0
   3506c:	d0d0      	beq.n	35010 <register_events+0x14>
	z_spin_lock_set_owner(l);
   3506e:	481d      	ldr	r0, [pc, #116]	; (350e4 <register_events+0xe8>)
   35070:	f7fc f9e4 	bl	3143c <z_spin_lock_set_owner>
		if (is_condition_met(&events[ii], &state)) {
   35074:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   35078:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   3507c:	a901      	add	r1, sp, #4
   3507e:	4620      	mov	r0, r4
   35080:	f7ff fe0e 	bl	34ca0 <is_condition_met>
   35084:	2800      	cmp	r0, #0
   35086:	d0d2      	beq.n	3502e <register_events+0x32>
	event->poller = NULL;
   35088:	2100      	movs	r1, #0
   3508a:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3508c:	68e3      	ldr	r3, [r4, #12]
   3508e:	f3c3 3286 	ubfx	r2, r3, #14, #7
   35092:	9801      	ldr	r0, [sp, #4]
   35094:	4302      	orrs	r2, r0
   35096:	f362 3394 	bfi	r3, r2, #14, #7
   3509a:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3509c:	f889 1000 	strb.w	r1, [r9]
   350a0:	e7cc      	b.n	3503c <register_events+0x40>
			register_event(&events[ii], poller);
   350a2:	4649      	mov	r1, r9
   350a4:	4620      	mov	r0, r4
   350a6:	f7ff fec9 	bl	34e3c <register_event>
			events_registered += 1;
   350aa:	f10b 0b01 	add.w	fp, fp, #1
   350ae:	e7c5      	b.n	3503c <register_events+0x40>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   350b0:	4c09      	ldr	r4, [pc, #36]	; (350d8 <register_events+0xdc>)
   350b2:	23c2      	movs	r3, #194	; 0xc2
   350b4:	4622      	mov	r2, r4
   350b6:	490d      	ldr	r1, [pc, #52]	; (350ec <register_events+0xf0>)
   350b8:	4809      	ldr	r0, [pc, #36]	; (350e0 <register_events+0xe4>)
   350ba:	f001 f8eb 	bl	36294 <assert_print>
   350be:	4909      	ldr	r1, [pc, #36]	; (350e4 <register_events+0xe8>)
   350c0:	480b      	ldr	r0, [pc, #44]	; (350f0 <register_events+0xf4>)
   350c2:	f001 f8e7 	bl	36294 <assert_print>
   350c6:	21c2      	movs	r1, #194	; 0xc2
   350c8:	4620      	mov	r0, r4
   350ca:	f001 f8dc 	bl	36286 <assert_post_action>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   350ce:	4658      	mov	r0, fp
   350d0:	b003      	add	sp, #12
   350d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   350d6:	bf00      	nop
   350d8:	00040b28 	.word	0x00040b28
   350dc:	00040b88 	.word	0x00040b88
   350e0:	0003f72c 	.word	0x0003f72c
   350e4:	2000caa0 	.word	0x2000caa0
   350e8:	00040ba0 	.word	0x00040ba0
   350ec:	00040b58 	.word	0x00040b58
   350f0:	00040b70 	.word	0x00040b70

000350f4 <signal_poller>:

static int signal_poller(struct k_poll_event *event, uint32_t state)
{
   350f4:	b538      	push	{r3, r4, r5, lr}
   350f6:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   350f8:	6880      	ldr	r0, [r0, #8]
   350fa:	f009 fe11 	bl	3ed20 <poller_thread>

	__ASSERT(thread != NULL, "poller should have a thread\n");
   350fe:	b1d8      	cbz	r0, 35138 <signal_poller+0x44>
   35100:	4604      	mov	r4, r0
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   35102:	7b43      	ldrb	r3, [r0, #13]

	if (!z_is_thread_pending(thread)) {
   35104:	f013 0f02 	tst.w	r3, #2
   35108:	d034      	beq.n	35174 <signal_poller+0x80>
	return thread->base.timeout.dticks == _EXPIRED;
   3510a:	6a82      	ldr	r2, [r0, #40]	; 0x28
   3510c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		return 0;
	}

	if (z_is_thread_timeout_expired(thread)) {
   3510e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   35112:	bf08      	it	eq
   35114:	f112 0f02 	cmneq.w	r2, #2
   35118:	d02e      	beq.n	35178 <signal_poller+0x84>
		return -EAGAIN;
	}

	z_unpend_thread(thread);
   3511a:	f7fd ffa7 	bl	3306c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3511e:	2d08      	cmp	r5, #8
   35120:	d01a      	beq.n	35158 <signal_poller+0x64>
   35122:	2300      	movs	r3, #0
   35124:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   35128:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3512a:	f013 0f1f 	tst.w	r3, #31
   3512e:	d118      	bne.n	35162 <signal_poller+0x6e>
	return node->next != NULL;
   35130:	69a3      	ldr	r3, [r4, #24]
   35132:	b1a3      	cbz	r3, 3515e <signal_poller+0x6a>
   35134:	2300      	movs	r3, #0
   35136:	e015      	b.n	35164 <signal_poller+0x70>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   35138:	4c11      	ldr	r4, [pc, #68]	; (35180 <signal_poller+0x8c>)
   3513a:	f44f 7386 	mov.w	r3, #268	; 0x10c
   3513e:	4622      	mov	r2, r4
   35140:	4910      	ldr	r1, [pc, #64]	; (35184 <signal_poller+0x90>)
   35142:	4811      	ldr	r0, [pc, #68]	; (35188 <signal_poller+0x94>)
   35144:	f001 f8a6 	bl	36294 <assert_print>
   35148:	4810      	ldr	r0, [pc, #64]	; (3518c <signal_poller+0x98>)
   3514a:	f001 f8a3 	bl	36294 <assert_print>
   3514e:	f44f 7186 	mov.w	r1, #268	; 0x10c
   35152:	4620      	mov	r0, r4
   35154:	f001 f897 	bl	36286 <assert_post_action>
	arch_thread_return_value_set(thread,
   35158:	f06f 0303 	mvn.w	r3, #3
   3515c:	e7e2      	b.n	35124 <signal_poller+0x30>
   3515e:	2301      	movs	r3, #1
   35160:	e000      	b.n	35164 <signal_poller+0x70>
   35162:	2300      	movs	r3, #0
		state == K_POLL_STATE_CANCELLED ? -EINTR : 0);

	if (!z_is_thread_ready(thread)) {
   35164:	b90b      	cbnz	r3, 3516a <signal_poller+0x76>
		return 0;
   35166:	2000      	movs	r0, #0
   35168:	e005      	b.n	35176 <signal_poller+0x82>
	}

	z_ready_thread(thread);
   3516a:	4620      	mov	r0, r4
   3516c:	f7fe f958 	bl	33420 <z_ready_thread>

	return 0;
   35170:	2000      	movs	r0, #0
   35172:	e000      	b.n	35176 <signal_poller+0x82>
		return 0;
   35174:	2000      	movs	r0, #0
}
   35176:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   35178:	f06f 000a 	mvn.w	r0, #10
   3517c:	e7fb      	b.n	35176 <signal_poller+0x82>
   3517e:	bf00      	nop
   35180:	00046680 	.word	0x00046680
   35184:	000467b0 	.word	0x000467b0
   35188:	0003f72c 	.word	0x0003f72c
   3518c:	000467c8 	.word	0x000467c8

00035190 <k_poll_event_init>:
{
   35190:	b510      	push	{r4, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   35192:	b9d2      	cbnz	r2, 351ca <k_poll_event_init+0x3a>
   35194:	4696      	mov	lr, r2
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   35196:	293f      	cmp	r1, #63	; 0x3f
   35198:	d825      	bhi.n	351e6 <k_poll_event_init+0x56>
	__ASSERT(obj != NULL, "must provide an object\n");
   3519a:	2b00      	cmp	r3, #0
   3519c:	d031      	beq.n	35202 <k_poll_event_init+0x72>
	event->poller = NULL;
   3519e:	2200      	movs	r2, #0
   351a0:	6082      	str	r2, [r0, #8]
	event->type = type;
   351a2:	f890 c00d 	ldrb.w	ip, [r0, #13]
   351a6:	f361 0c05 	bfi	ip, r1, #0, #6
   351aa:	f880 c00d 	strb.w	ip, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   351ae:	68c1      	ldr	r1, [r0, #12]
   351b0:	f362 3194 	bfi	r1, r2, #14, #7
   351b4:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   351b6:	7b81      	ldrb	r1, [r0, #14]
   351b8:	f36e 1145 	bfi	r1, lr, #5, #1
   351bc:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   351be:	89c1      	ldrh	r1, [r0, #14]
   351c0:	f362 118f 	bfi	r1, r2, #6, #10
   351c4:	81c1      	strh	r1, [r0, #14]
	event->obj = obj;
   351c6:	6103      	str	r3, [r0, #16]
}
   351c8:	bd10      	pop	{r4, pc}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   351ca:	4c15      	ldr	r4, [pc, #84]	; (35220 <k_poll_event_init+0x90>)
   351cc:	232d      	movs	r3, #45	; 0x2d
   351ce:	4622      	mov	r2, r4
   351d0:	4914      	ldr	r1, [pc, #80]	; (35224 <k_poll_event_init+0x94>)
   351d2:	4815      	ldr	r0, [pc, #84]	; (35228 <k_poll_event_init+0x98>)
   351d4:	f001 f85e 	bl	36294 <assert_print>
   351d8:	4814      	ldr	r0, [pc, #80]	; (3522c <k_poll_event_init+0x9c>)
   351da:	f001 f85b 	bl	36294 <assert_print>
   351de:	212d      	movs	r1, #45	; 0x2d
   351e0:	4620      	mov	r0, r4
   351e2:	f001 f850 	bl	36286 <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   351e6:	4c0e      	ldr	r4, [pc, #56]	; (35220 <k_poll_event_init+0x90>)
   351e8:	232f      	movs	r3, #47	; 0x2f
   351ea:	4622      	mov	r2, r4
   351ec:	4910      	ldr	r1, [pc, #64]	; (35230 <k_poll_event_init+0xa0>)
   351ee:	480e      	ldr	r0, [pc, #56]	; (35228 <k_poll_event_init+0x98>)
   351f0:	f001 f850 	bl	36294 <assert_print>
   351f4:	480f      	ldr	r0, [pc, #60]	; (35234 <k_poll_event_init+0xa4>)
   351f6:	f001 f84d 	bl	36294 <assert_print>
   351fa:	212f      	movs	r1, #47	; 0x2f
   351fc:	4620      	mov	r0, r4
   351fe:	f001 f842 	bl	36286 <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   35202:	4c07      	ldr	r4, [pc, #28]	; (35220 <k_poll_event_init+0x90>)
   35204:	2330      	movs	r3, #48	; 0x30
   35206:	4622      	mov	r2, r4
   35208:	490b      	ldr	r1, [pc, #44]	; (35238 <k_poll_event_init+0xa8>)
   3520a:	4807      	ldr	r0, [pc, #28]	; (35228 <k_poll_event_init+0x98>)
   3520c:	f001 f842 	bl	36294 <assert_print>
   35210:	480a      	ldr	r0, [pc, #40]	; (3523c <k_poll_event_init+0xac>)
   35212:	f001 f83f 	bl	36294 <assert_print>
   35216:	2130      	movs	r1, #48	; 0x30
   35218:	4620      	mov	r0, r4
   3521a:	f001 f834 	bl	36286 <assert_post_action>
   3521e:	bf00      	nop
   35220:	00046680 	.word	0x00046680
   35224:	000467e8 	.word	0x000467e8
   35228:	0003f72c 	.word	0x0003f72c
   3522c:	00046808 	.word	0x00046808
   35230:	00046830 	.word	0x00046830
   35234:	00046854 	.word	0x00046854
   35238:	00046864 	.word	0x00046864
   3523c:	00046878 	.word	0x00046878

00035240 <z_impl_k_poll>:

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   35240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35244:	b082      	sub	sp, #8
   35246:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   35248:	4b7a      	ldr	r3, [pc, #488]	; (35434 <z_impl_k_poll+0x1f4>)
   3524a:	689c      	ldr	r4, [r3, #8]

	poller->is_polling = true;
   3524c:	2301      	movs	r3, #1
   3524e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	poller->mode = MODE_POLL;
   35252:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
   35256:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   3525a:	2b00      	cmp	r3, #0
   3525c:	d138      	bne.n	352d0 <z_impl_k_poll+0x90>
   3525e:	4605      	mov	r5, r0
   35260:	4617      	mov	r7, r2
   35262:	f104 0260 	add.w	r2, r4, #96	; 0x60
	__ASSERT(events != NULL, "NULL events\n");
   35266:	2800      	cmp	r0, #0
   35268:	d042      	beq.n	352f0 <z_impl_k_poll+0xb0>
	__ASSERT(num_events >= 0, "<0 events\n");
   3526a:	2900      	cmp	r1, #0
   3526c:	db50      	blt.n	35310 <z_impl_k_poll+0xd0>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   3526e:	ea56 0307 	orrs.w	r3, r6, r7
   35272:	bf0c      	ite	eq
   35274:	2301      	moveq	r3, #1
   35276:	2300      	movne	r3, #0
   35278:	f7ff fec0 	bl	34ffc <register_events>
   3527c:	4680      	mov	r8, r0
   3527e:	f04f 0320 	mov.w	r3, #32
   35282:	f3ef 8911 	mrs	r9, BASEPRI
   35286:	f383 8812 	msr	BASEPRI_MAX, r3
   3528a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3528e:	486a      	ldr	r0, [pc, #424]	; (35438 <z_impl_k_poll+0x1f8>)
   35290:	f7fc f8b4 	bl	313fc <z_spin_lock_valid>
   35294:	2800      	cmp	r0, #0
   35296:	d04b      	beq.n	35330 <z_impl_k_poll+0xf0>
	z_spin_lock_set_owner(l);
   35298:	4867      	ldr	r0, [pc, #412]	; (35438 <z_impl_k_poll+0x1f8>)
   3529a:	f7fc f8cf 	bl	3143c <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   3529e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   352a2:	2b00      	cmp	r3, #0
   352a4:	d053      	beq.n	3534e <z_impl_k_poll+0x10e>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   352a6:	2300      	movs	r3, #0
   352a8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   352ac:	ea56 0307 	orrs.w	r3, r6, r7
   352b0:	d17a      	bne.n	353a8 <z_impl_k_poll+0x168>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   352b2:	4861      	ldr	r0, [pc, #388]	; (35438 <z_impl_k_poll+0x1f8>)
   352b4:	f7fc f8b2 	bl	3141c <z_spin_unlock_valid>
   352b8:	2800      	cmp	r0, #0
   352ba:	d066      	beq.n	3538a <z_impl_k_poll+0x14a>
	__asm__ volatile(
   352bc:	f389 8811 	msr	BASEPRI, r9
   352c0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, -EAGAIN);

		return -EAGAIN;
   352c4:	f06f 040a 	mvn.w	r4, #10
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   352c8:	4620      	mov	r0, r4
   352ca:	b002      	add	sp, #8
   352cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	__ASSERT(!arch_is_in_isr(), "");
   352d0:	4c5a      	ldr	r4, [pc, #360]	; (3543c <z_impl_k_poll+0x1fc>)
   352d2:	f240 132d 	movw	r3, #301	; 0x12d
   352d6:	4622      	mov	r2, r4
   352d8:	4959      	ldr	r1, [pc, #356]	; (35440 <z_impl_k_poll+0x200>)
   352da:	485a      	ldr	r0, [pc, #360]	; (35444 <z_impl_k_poll+0x204>)
   352dc:	f000 ffda 	bl	36294 <assert_print>
   352e0:	4859      	ldr	r0, [pc, #356]	; (35448 <z_impl_k_poll+0x208>)
   352e2:	f000 ffd7 	bl	36294 <assert_print>
   352e6:	f240 112d 	movw	r1, #301	; 0x12d
   352ea:	4620      	mov	r0, r4
   352ec:	f000 ffcb 	bl	36286 <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   352f0:	4c52      	ldr	r4, [pc, #328]	; (3543c <z_impl_k_poll+0x1fc>)
   352f2:	f44f 7397 	mov.w	r3, #302	; 0x12e
   352f6:	4622      	mov	r2, r4
   352f8:	4954      	ldr	r1, [pc, #336]	; (3544c <z_impl_k_poll+0x20c>)
   352fa:	4852      	ldr	r0, [pc, #328]	; (35444 <z_impl_k_poll+0x204>)
   352fc:	f000 ffca 	bl	36294 <assert_print>
   35300:	4853      	ldr	r0, [pc, #332]	; (35450 <z_impl_k_poll+0x210>)
   35302:	f000 ffc7 	bl	36294 <assert_print>
   35306:	f44f 7197 	mov.w	r1, #302	; 0x12e
   3530a:	4620      	mov	r0, r4
   3530c:	f000 ffbb 	bl	36286 <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   35310:	4c4a      	ldr	r4, [pc, #296]	; (3543c <z_impl_k_poll+0x1fc>)
   35312:	f240 132f 	movw	r3, #303	; 0x12f
   35316:	4622      	mov	r2, r4
   35318:	494e      	ldr	r1, [pc, #312]	; (35454 <z_impl_k_poll+0x214>)
   3531a:	484a      	ldr	r0, [pc, #296]	; (35444 <z_impl_k_poll+0x204>)
   3531c:	f000 ffba 	bl	36294 <assert_print>
   35320:	484d      	ldr	r0, [pc, #308]	; (35458 <z_impl_k_poll+0x218>)
   35322:	f000 ffb7 	bl	36294 <assert_print>
   35326:	f240 112f 	movw	r1, #303	; 0x12f
   3532a:	4620      	mov	r0, r4
   3532c:	f000 ffab 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   35330:	4c4a      	ldr	r4, [pc, #296]	; (3545c <z_impl_k_poll+0x21c>)
   35332:	2394      	movs	r3, #148	; 0x94
   35334:	4622      	mov	r2, r4
   35336:	494a      	ldr	r1, [pc, #296]	; (35460 <z_impl_k_poll+0x220>)
   35338:	4842      	ldr	r0, [pc, #264]	; (35444 <z_impl_k_poll+0x204>)
   3533a:	f000 ffab 	bl	36294 <assert_print>
   3533e:	493e      	ldr	r1, [pc, #248]	; (35438 <z_impl_k_poll+0x1f8>)
   35340:	4848      	ldr	r0, [pc, #288]	; (35464 <z_impl_k_poll+0x224>)
   35342:	f000 ffa7 	bl	36294 <assert_print>
   35346:	2194      	movs	r1, #148	; 0x94
   35348:	4620      	mov	r0, r4
   3534a:	f000 ff9c 	bl	36286 <assert_post_action>
		clear_event_registrations(events, events_registered, key);
   3534e:	464a      	mov	r2, r9
   35350:	4641      	mov	r1, r8
   35352:	4628      	mov	r0, r5
   35354:	f7ff fe00 	bl	34f58 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35358:	4837      	ldr	r0, [pc, #220]	; (35438 <z_impl_k_poll+0x1f8>)
   3535a:	f7fc f85f 	bl	3141c <z_spin_unlock_valid>
   3535e:	b128      	cbz	r0, 3536c <z_impl_k_poll+0x12c>
   35360:	f389 8811 	msr	BASEPRI, r9
   35364:	f3bf 8f6f 	isb	sy
		return 0;
   35368:	2400      	movs	r4, #0
   3536a:	e7ad      	b.n	352c8 <z_impl_k_poll+0x88>
   3536c:	4c3b      	ldr	r4, [pc, #236]	; (3545c <z_impl_k_poll+0x21c>)
   3536e:	23c2      	movs	r3, #194	; 0xc2
   35370:	4622      	mov	r2, r4
   35372:	493d      	ldr	r1, [pc, #244]	; (35468 <z_impl_k_poll+0x228>)
   35374:	4833      	ldr	r0, [pc, #204]	; (35444 <z_impl_k_poll+0x204>)
   35376:	f000 ff8d 	bl	36294 <assert_print>
   3537a:	492f      	ldr	r1, [pc, #188]	; (35438 <z_impl_k_poll+0x1f8>)
   3537c:	483b      	ldr	r0, [pc, #236]	; (3546c <z_impl_k_poll+0x22c>)
   3537e:	f000 ff89 	bl	36294 <assert_print>
   35382:	21c2      	movs	r1, #194	; 0xc2
   35384:	4620      	mov	r0, r4
   35386:	f000 ff7e 	bl	36286 <assert_post_action>
   3538a:	4c34      	ldr	r4, [pc, #208]	; (3545c <z_impl_k_poll+0x21c>)
   3538c:	23c2      	movs	r3, #194	; 0xc2
   3538e:	4622      	mov	r2, r4
   35390:	4935      	ldr	r1, [pc, #212]	; (35468 <z_impl_k_poll+0x228>)
   35392:	482c      	ldr	r0, [pc, #176]	; (35444 <z_impl_k_poll+0x204>)
   35394:	f000 ff7e 	bl	36294 <assert_print>
   35398:	4927      	ldr	r1, [pc, #156]	; (35438 <z_impl_k_poll+0x1f8>)
   3539a:	4834      	ldr	r0, [pc, #208]	; (3546c <z_impl_k_poll+0x22c>)
   3539c:	f000 ff7a 	bl	36294 <assert_print>
   353a0:	21c2      	movs	r1, #194	; 0xc2
   353a2:	4620      	mov	r0, r4
   353a4:	f000 ff6f 	bl	36286 <assert_post_action>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   353a8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 35438 <z_impl_k_poll+0x1f8>
   353ac:	9700      	str	r7, [sp, #0]
   353ae:	9601      	str	r6, [sp, #4]
   353b0:	4a2f      	ldr	r2, [pc, #188]	; (35470 <z_impl_k_poll+0x230>)
   353b2:	4649      	mov	r1, r9
   353b4:	4650      	mov	r0, sl
   353b6:	f7fe f9a1 	bl	336fc <z_pend_curr>
   353ba:	4604      	mov	r4, r0
	__asm__ volatile(
   353bc:	f04f 0320 	mov.w	r3, #32
   353c0:	f3ef 8711 	mrs	r7, BASEPRI
   353c4:	f383 8812 	msr	BASEPRI_MAX, r3
   353c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   353cc:	4650      	mov	r0, sl
   353ce:	f7fc f815 	bl	313fc <z_spin_lock_valid>
   353d2:	b188      	cbz	r0, 353f8 <z_impl_k_poll+0x1b8>
	z_spin_lock_set_owner(l);
   353d4:	4e18      	ldr	r6, [pc, #96]	; (35438 <z_impl_k_poll+0x1f8>)
   353d6:	4630      	mov	r0, r6
   353d8:	f7fc f830 	bl	3143c <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   353dc:	463a      	mov	r2, r7
   353de:	4641      	mov	r1, r8
   353e0:	4628      	mov	r0, r5
   353e2:	f7ff fdb9 	bl	34f58 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   353e6:	4630      	mov	r0, r6
   353e8:	f7fc f818 	bl	3141c <z_spin_unlock_valid>
   353ec:	b198      	cbz	r0, 35416 <z_impl_k_poll+0x1d6>
	__asm__ volatile(
   353ee:	f387 8811 	msr	BASEPRI, r7
   353f2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   353f6:	e767      	b.n	352c8 <z_impl_k_poll+0x88>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   353f8:	4c18      	ldr	r4, [pc, #96]	; (3545c <z_impl_k_poll+0x21c>)
   353fa:	2394      	movs	r3, #148	; 0x94
   353fc:	4622      	mov	r2, r4
   353fe:	4918      	ldr	r1, [pc, #96]	; (35460 <z_impl_k_poll+0x220>)
   35400:	4810      	ldr	r0, [pc, #64]	; (35444 <z_impl_k_poll+0x204>)
   35402:	f000 ff47 	bl	36294 <assert_print>
   35406:	4651      	mov	r1, sl
   35408:	4816      	ldr	r0, [pc, #88]	; (35464 <z_impl_k_poll+0x224>)
   3540a:	f000 ff43 	bl	36294 <assert_print>
   3540e:	2194      	movs	r1, #148	; 0x94
   35410:	4620      	mov	r0, r4
   35412:	f000 ff38 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   35416:	4c11      	ldr	r4, [pc, #68]	; (3545c <z_impl_k_poll+0x21c>)
   35418:	23c2      	movs	r3, #194	; 0xc2
   3541a:	4622      	mov	r2, r4
   3541c:	4912      	ldr	r1, [pc, #72]	; (35468 <z_impl_k_poll+0x228>)
   3541e:	4809      	ldr	r0, [pc, #36]	; (35444 <z_impl_k_poll+0x204>)
   35420:	f000 ff38 	bl	36294 <assert_print>
   35424:	4631      	mov	r1, r6
   35426:	4811      	ldr	r0, [pc, #68]	; (3546c <z_impl_k_poll+0x22c>)
   35428:	f000 ff34 	bl	36294 <assert_print>
   3542c:	21c2      	movs	r1, #194	; 0xc2
   3542e:	4620      	mov	r0, r4
   35430:	f000 ff29 	bl	36286 <assert_post_action>
   35434:	2000ca40 	.word	0x2000ca40
   35438:	2000caa0 	.word	0x2000caa0
   3543c:	00046680 	.word	0x00046680
   35440:	000461a8 	.word	0x000461a8
   35444:	0003f72c 	.word	0x0003f72c
   35448:	00044634 	.word	0x00044634
   3544c:	00046894 	.word	0x00046894
   35450:	000468ac 	.word	0x000468ac
   35454:	000468bc 	.word	0x000468bc
   35458:	000468cc 	.word	0x000468cc
   3545c:	00040b28 	.word	0x00040b28
   35460:	00040b88 	.word	0x00040b88
   35464:	00040ba0 	.word	0x00040ba0
   35468:	00040b58 	.word	0x00040b58
   3546c:	00040b70 	.word	0x00040b70
   35470:	2000882c 	.word	0x2000882c

00035474 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   35474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35476:	4604      	mov	r4, r0
   35478:	460d      	mov	r5, r1
	__asm__ volatile(
   3547a:	f04f 0320 	mov.w	r3, #32
   3547e:	f3ef 8611 	mrs	r6, BASEPRI
   35482:	f383 8812 	msr	BASEPRI_MAX, r3
   35486:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3548a:	4823      	ldr	r0, [pc, #140]	; (35518 <z_impl_k_poll_signal_raise+0xa4>)
   3548c:	f7fb ffb6 	bl	313fc <z_spin_lock_valid>
   35490:	b1c8      	cbz	r0, 354c6 <z_impl_k_poll_signal_raise+0x52>
	z_spin_lock_set_owner(l);
   35492:	4821      	ldr	r0, [pc, #132]	; (35518 <z_impl_k_poll_signal_raise+0xa4>)
   35494:	f7fb ffd2 	bl	3143c <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   35498:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   3549a:	2301      	movs	r3, #1
   3549c:	60a3      	str	r3, [r4, #8]
	return list->head == list;
   3549e:	6820      	ldr	r0, [r4, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   354a0:	4284      	cmp	r4, r0
   354a2:	d01f      	beq.n	354e4 <z_impl_k_poll_signal_raise+0x70>
	sys_dnode_t *const prev = node->prev;
   354a4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   354a6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   354a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   354aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   354ac:	2300      	movs	r3, #0
   354ae:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   354b0:	6043      	str	r3, [r0, #4]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   354b2:	2101      	movs	r1, #1
   354b4:	f009 fc93 	bl	3edde <signal_poll_event>
   354b8:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   354ba:	4631      	mov	r1, r6
   354bc:	4816      	ldr	r0, [pc, #88]	; (35518 <z_impl_k_poll_signal_raise+0xa4>)
   354be:	f7fd fd23 	bl	32f08 <z_reschedule>
	return rc;
}
   354c2:	4620      	mov	r0, r4
   354c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   354c6:	4c15      	ldr	r4, [pc, #84]	; (3551c <z_impl_k_poll_signal_raise+0xa8>)
   354c8:	2394      	movs	r3, #148	; 0x94
   354ca:	4622      	mov	r2, r4
   354cc:	4914      	ldr	r1, [pc, #80]	; (35520 <z_impl_k_poll_signal_raise+0xac>)
   354ce:	4815      	ldr	r0, [pc, #84]	; (35524 <z_impl_k_poll_signal_raise+0xb0>)
   354d0:	f000 fee0 	bl	36294 <assert_print>
   354d4:	4910      	ldr	r1, [pc, #64]	; (35518 <z_impl_k_poll_signal_raise+0xa4>)
   354d6:	4814      	ldr	r0, [pc, #80]	; (35528 <z_impl_k_poll_signal_raise+0xb4>)
   354d8:	f000 fedc 	bl	36294 <assert_print>
   354dc:	2194      	movs	r1, #148	; 0x94
   354de:	4620      	mov	r0, r4
   354e0:	f000 fed1 	bl	36286 <assert_post_action>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   354e4:	480c      	ldr	r0, [pc, #48]	; (35518 <z_impl_k_poll_signal_raise+0xa4>)
   354e6:	f7fb ff99 	bl	3141c <z_spin_unlock_valid>
   354ea:	b128      	cbz	r0, 354f8 <z_impl_k_poll_signal_raise+0x84>
	__asm__ volatile(
   354ec:	f386 8811 	msr	BASEPRI, r6
   354f0:	f3bf 8f6f 	isb	sy
		return 0;
   354f4:	2400      	movs	r4, #0
   354f6:	e7e4      	b.n	354c2 <z_impl_k_poll_signal_raise+0x4e>
   354f8:	4c08      	ldr	r4, [pc, #32]	; (3551c <z_impl_k_poll_signal_raise+0xa8>)
   354fa:	23c2      	movs	r3, #194	; 0xc2
   354fc:	4622      	mov	r2, r4
   354fe:	490b      	ldr	r1, [pc, #44]	; (3552c <z_impl_k_poll_signal_raise+0xb8>)
   35500:	4808      	ldr	r0, [pc, #32]	; (35524 <z_impl_k_poll_signal_raise+0xb0>)
   35502:	f000 fec7 	bl	36294 <assert_print>
   35506:	4904      	ldr	r1, [pc, #16]	; (35518 <z_impl_k_poll_signal_raise+0xa4>)
   35508:	4809      	ldr	r0, [pc, #36]	; (35530 <z_impl_k_poll_signal_raise+0xbc>)
   3550a:	f000 fec3 	bl	36294 <assert_print>
   3550e:	21c2      	movs	r1, #194	; 0xc2
   35510:	4620      	mov	r0, r4
   35512:	f000 feb8 	bl	36286 <assert_post_action>
   35516:	bf00      	nop
   35518:	2000caa0 	.word	0x2000caa0
   3551c:	00040b28 	.word	0x00040b28
   35520:	00040b88 	.word	0x00040b88
   35524:	0003f72c 	.word	0x0003f72c
   35528:	00040ba0 	.word	0x00040ba0
   3552c:	00040b58 	.word	0x00040b58
   35530:	00040b70 	.word	0x00040b70

00035534 <z_heap_aligned_alloc>:
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   35534:	b570      	push	{r4, r5, r6, lr}
   35536:	b082      	sub	sp, #8
   35538:	4606      	mov	r6, r0
   3553a:	460c      	mov	r4, r1
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   3553c:	2300      	movs	r3, #0
   3553e:	3204      	adds	r2, #4
   35540:	d214      	bcs.n	3556c <z_heap_aligned_alloc+0x38>
	 * Adjust the size to make room for our heap reference.
	 * Merge a rewind bit with align value (see sys_heap_aligned_alloc()).
	 * This allows for storing the heap pointer right below the aligned
	 * boundary without wasting any memory.
	 */
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   35542:	bb2b      	cbnz	r3, 35590 <z_heap_aligned_alloc+0x5c>
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   35544:	2000      	movs	r0, #0
   35546:	2100      	movs	r1, #0
   35548:	e9cd 0100 	strd	r0, r1, [sp]
   3554c:	f044 0104 	orr.w	r1, r4, #4
   35550:	4630      	mov	r0, r6
   35552:	f7fb fd19 	bl	30f88 <k_heap_aligned_alloc>
	if (mem == NULL) {
   35556:	4605      	mov	r5, r0
   35558:	b128      	cbz	r0, 35566 <z_heap_aligned_alloc+0x32>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   3555a:	f845 6b04 	str.w	r6, [r5], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   3555e:	b114      	cbz	r4, 35566 <z_heap_aligned_alloc+0x32>
   35560:	1e63      	subs	r3, r4, #1
   35562:	421d      	tst	r5, r3
   35564:	d104      	bne.n	35570 <z_heap_aligned_alloc+0x3c>
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   35566:	4628      	mov	r0, r5
   35568:	b002      	add	sp, #8
   3556a:	bd70      	pop	{r4, r5, r6, pc}
   3556c:	2301      	movs	r3, #1
   3556e:	e7e8      	b.n	35542 <z_heap_aligned_alloc+0xe>
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   35570:	4e08      	ldr	r6, [pc, #32]	; (35594 <z_heap_aligned_alloc+0x60>)
   35572:	2325      	movs	r3, #37	; 0x25
   35574:	4632      	mov	r2, r6
   35576:	4908      	ldr	r1, [pc, #32]	; (35598 <z_heap_aligned_alloc+0x64>)
   35578:	4808      	ldr	r0, [pc, #32]	; (3559c <z_heap_aligned_alloc+0x68>)
   3557a:	f000 fe8b 	bl	36294 <assert_print>
   3557e:	4622      	mov	r2, r4
   35580:	4629      	mov	r1, r5
   35582:	4807      	ldr	r0, [pc, #28]	; (355a0 <z_heap_aligned_alloc+0x6c>)
   35584:	f000 fe86 	bl	36294 <assert_print>
   35588:	2125      	movs	r1, #37	; 0x25
   3558a:	4630      	mov	r0, r6
   3558c:	f000 fe7b 	bl	36286 <assert_post_action>
		return NULL;
   35590:	2500      	movs	r5, #0
   35592:	e7e8      	b.n	35566 <z_heap_aligned_alloc+0x32>
   35594:	000468dc 	.word	0x000468dc
   35598:	00046900 	.word	0x00046900
   3559c:	0003f72c 	.word	0x0003f72c
   355a0:	00046934 	.word	0x00046934

000355a4 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   355a4:	b510      	push	{r4, lr}
	__ASSERT(align / sizeof(void *) >= 1
   355a6:	2803      	cmp	r0, #3
   355a8:	d90b      	bls.n	355c2 <k_aligned_alloc+0x1e>
   355aa:	460a      	mov	r2, r1
   355ac:	f010 0f03 	tst.w	r0, #3
   355b0:	d107      	bne.n	355c2 <k_aligned_alloc+0x1e>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   355b2:	1e43      	subs	r3, r0, #1
   355b4:	4203      	tst	r3, r0
   355b6:	d112      	bne.n	355de <k_aligned_alloc+0x3a>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   355b8:	4601      	mov	r1, r0
   355ba:	4810      	ldr	r0, [pc, #64]	; (355fc <k_aligned_alloc+0x58>)
   355bc:	f7ff ffba 	bl	35534 <z_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   355c0:	bd10      	pop	{r4, pc}
	__ASSERT(align / sizeof(void *) >= 1
   355c2:	4c0f      	ldr	r4, [pc, #60]	; (35600 <k_aligned_alloc+0x5c>)
   355c4:	2342      	movs	r3, #66	; 0x42
   355c6:	4622      	mov	r2, r4
   355c8:	490e      	ldr	r1, [pc, #56]	; (35604 <k_aligned_alloc+0x60>)
   355ca:	480f      	ldr	r0, [pc, #60]	; (35608 <k_aligned_alloc+0x64>)
   355cc:	f000 fe62 	bl	36294 <assert_print>
   355d0:	480e      	ldr	r0, [pc, #56]	; (3560c <k_aligned_alloc+0x68>)
   355d2:	f000 fe5f 	bl	36294 <assert_print>
   355d6:	2142      	movs	r1, #66	; 0x42
   355d8:	4620      	mov	r0, r4
   355da:	f000 fe54 	bl	36286 <assert_post_action>
	__ASSERT((align & (align - 1)) == 0,
   355de:	4c08      	ldr	r4, [pc, #32]	; (35600 <k_aligned_alloc+0x5c>)
   355e0:	2346      	movs	r3, #70	; 0x46
   355e2:	4622      	mov	r2, r4
   355e4:	490a      	ldr	r1, [pc, #40]	; (35610 <k_aligned_alloc+0x6c>)
   355e6:	4808      	ldr	r0, [pc, #32]	; (35608 <k_aligned_alloc+0x64>)
   355e8:	f000 fe54 	bl	36294 <assert_print>
   355ec:	4809      	ldr	r0, [pc, #36]	; (35614 <k_aligned_alloc+0x70>)
   355ee:	f000 fe51 	bl	36294 <assert_print>
   355f2:	2146      	movs	r1, #70	; 0x46
   355f4:	4620      	mov	r0, r4
   355f6:	f000 fe46 	bl	36286 <assert_post_action>
   355fa:	bf00      	nop
   355fc:	200088fc 	.word	0x200088fc
   35600:	000468dc 	.word	0x000468dc
   35604:	0004695c 	.word	0x0004695c
   35608:	0003f72c 	.word	0x0003f72c
   3560c:	0004699c 	.word	0x0004699c
   35610:	0004092c 	.word	0x0004092c
   35614:	00040948 	.word	0x00040948

00035618 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   35618:	4b01      	ldr	r3, [pc, #4]	; (35620 <k_thread_system_pool_assign+0x8>)
   3561a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
}
   3561e:	4770      	bx	lr
   35620:	200088fc 	.word	0x200088fc

00035624 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   35624:	b538      	push	{r3, r4, r5, lr}
   35626:	4604      	mov	r4, r0
   35628:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   3562a:	f009 f944 	bl	3e8b6 <k_is_in_isr>
   3562e:	b948      	cbnz	r0, 35644 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   35630:	4b05      	ldr	r3, [pc, #20]	; (35648 <z_thread_aligned_alloc+0x24>)
   35632:	689b      	ldr	r3, [r3, #8]
   35634:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   35638:	b118      	cbz	r0, 35642 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   3563a:	462a      	mov	r2, r5
   3563c:	4621      	mov	r1, r4
   3563e:	f7ff ff79 	bl	35534 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   35642:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   35644:	4801      	ldr	r0, [pc, #4]	; (3564c <z_thread_aligned_alloc+0x28>)
   35646:	e7f8      	b.n	3563a <z_thread_aligned_alloc+0x16>
   35648:	2000ca40 	.word	0x2000ca40
   3564c:	200088fc 	.word	0x200088fc

00035650 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
   35650:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   35652:	4802      	ldr	r0, [pc, #8]	; (3565c <boot_banner+0xc>)
   35654:	f000 f9cd 	bl	359f2 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
   35658:	bd08      	pop	{r3, pc}
   3565a:	bf00      	nop
   3565c:	000469cc 	.word	0x000469cc

00035660 <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
   35660:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
   35662:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   35664:	69db      	ldr	r3, [r3, #28]
   35666:	b113      	cbz	r3, 3566e <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   35668:	2201      	movs	r2, #1
   3566a:	4798      	blx	r3
}
   3566c:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
   3566e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   35672:	e7fb      	b.n	3566c <gpio_add_callback+0xc>

00035674 <gpio_pin_configure_dt>:
{
   35674:	b508      	push	{r3, lr}
   35676:	4603      	mov	r3, r0
   35678:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   3567a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   3567c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   3567e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   35680:	ea42 020c 	orr.w	r2, r2, ip
	return z_impl_gpio_pin_configure(port, pin, flags);
   35684:	f7da ff14 	bl	104b0 <z_impl_gpio_pin_configure>
}
   35688:	bd08      	pop	{r3, pc}

0003568a <k_uptime_get_32>:
{
   3568a:	b508      	push	{r3, lr}
   3568c:	f009 fae6 	bl	3ec5c <z_impl_k_uptime_ticks>
	return k_ticks_to_ms_floor64(k_uptime_ticks());
   35690:	4602      	mov	r2, r0
   35692:	014b      	lsls	r3, r1, #5
   35694:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   35698:	0140      	lsls	r0, r0, #5
   3569a:	1a80      	subs	r0, r0, r2
   3569c:	eb63 0301 	sbc.w	r3, r3, r1
   356a0:	009b      	lsls	r3, r3, #2
   356a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
   356a6:	0080      	lsls	r0, r0, #2
   356a8:	1880      	adds	r0, r0, r2
   356aa:	eb43 0301 	adc.w	r3, r3, r1
   356ae:	00db      	lsls	r3, r3, #3
   356b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
   356b4:	f3c0 3010 	ubfx	r0, r0, #12, #17
}
   356b8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   356bc:	bd08      	pop	{r3, pc}

000356be <k_msleep>:
{
   356be:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   356c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   356c4:	17c1      	asrs	r1, r0, #31
   356c6:	03c9      	lsls	r1, r1, #15
   356c8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   356cc:	03c0      	lsls	r0, r0, #15
   356ce:	f240 33e7 	movw	r3, #999	; 0x3e7
   356d2:	18c0      	adds	r0, r0, r3
   356d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   356d8:	f04f 0300 	mov.w	r3, #0
   356dc:	f141 0100 	adc.w	r1, r1, #0
   356e0:	f7da fd3a 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   356e4:	f7fe fc76 	bl	33fd4 <z_impl_k_sleep>
}
   356e8:	bd08      	pop	{r3, pc}

000356ea <ads1298_read_ID>:
bool get_spi_busy() {
    return state != idle;
}

uint8_t ads1298_read_ID()             
{
   356ea:	b508      	push	{r3, lr}
    ADS1298_send_command(0x20);// OPCODE1 = 0x20 = 0b0010 0000 : 001 = commande READ RREG |  0 0000 = Adresse du registe ID 
   356ec:	2020      	movs	r0, #32
   356ee:	f7dc fbf7 	bl	11ee0 <ADS1298_send_command>
	return z_impl_k_usleep(us);
   356f2:	2040      	movs	r0, #64	; 0x40
   356f4:	f7fe fcb2 	bl	3405c <z_impl_k_usleep>
    k_usleep(64);
	ADS1298_send_command(0x00); // OPCODE2 = number of register -1 = 0= 0x00
   356f8:	2000      	movs	r0, #0
   356fa:	f7dc fbf1 	bl	11ee0 <ADS1298_send_command>
   356fe:	2040      	movs	r0, #64	; 0x40
   35700:	f7fe fcac 	bl	3405c <z_impl_k_usleep>
    k_usleep(64);
	return ADS1298_read_data();
   35704:	f7dc fc0c 	bl	11f20 <ADS1298_read_data>
}
   35708:	bd08      	pop	{r3, pc}

0003570a <ads1298_write_multiple_register>:
    ads1298_write_multiple_register(reg, &val, 1);
    return true;
}

bool ads1298_write_multiple_register(uint8_t reg, uint8_t* val, uint8_t num)
{	
   3570a:	b570      	push	{r4, r5, r6, lr}
   3570c:	460e      	mov	r6, r1
   3570e:	4615      	mov	r5, r2
	ADS1298_send_command(ADS129X_CMD_WREG | (reg & 0x1F));
   35710:	f000 001f 	and.w	r0, r0, #31
   35714:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   35718:	f7dc fbe2 	bl	11ee0 <ADS1298_send_command>
   3571c:	2040      	movs	r0, #64	; 0x40
   3571e:	f7fe fc9d 	bl	3405c <z_impl_k_usleep>
    k_usleep(64);
	ADS1298_send_command((num - 1) & 0x1F);
   35722:	1e68      	subs	r0, r5, #1
   35724:	f000 001f 	and.w	r0, r0, #31
   35728:	f7dc fbda 	bl	11ee0 <ADS1298_send_command>
   3572c:	2040      	movs	r0, #64	; 0x40
   3572e:	f7fe fc95 	bl	3405c <z_impl_k_usleep>
    k_usleep(64);
	
	for(int i = 0; i < num; i++) {
   35732:	2400      	movs	r4, #0
   35734:	e006      	b.n	35744 <ads1298_write_multiple_register+0x3a>
        ADS1298_send_command(*(val + i));
   35736:	5d30      	ldrb	r0, [r6, r4]
   35738:	f7dc fbd2 	bl	11ee0 <ADS1298_send_command>
   3573c:	2040      	movs	r0, #64	; 0x40
   3573e:	f7fe fc8d 	bl	3405c <z_impl_k_usleep>
	for(int i = 0; i < num; i++) {
   35742:	3401      	adds	r4, #1
   35744:	42a5      	cmp	r5, r4
   35746:	dcf6      	bgt.n	35736 <ads1298_write_multiple_register+0x2c>
        k_usleep(64);
    }

    return true;	
}
   35748:	2001      	movs	r0, #1
   3574a:	bd70      	pop	{r4, r5, r6, pc}

0003574c <ads1298_write_register>:
{
   3574c:	b500      	push	{lr}
   3574e:	b083      	sub	sp, #12
   35750:	f88d 1007 	strb.w	r1, [sp, #7]
    ads1298_write_multiple_register(reg, &val, 1);
   35754:	2201      	movs	r2, #1
   35756:	f10d 0107 	add.w	r1, sp, #7
   3575a:	f7ff ffd6 	bl	3570a <ads1298_write_multiple_register>
}
   3575e:	2001      	movs	r0, #1
   35760:	b003      	add	sp, #12
   35762:	f85d fb04 	ldr.w	pc, [sp], #4

00035766 <ADS1298_send_start>:
  
bool ADS1298_send_start() {
   35766:	b508      	push	{r3, lr}
    return ADS1298_send_command(COMMAND_START);
   35768:	2008      	movs	r0, #8
   3576a:	f7dc fbb9 	bl	11ee0 <ADS1298_send_command>
}
   3576e:	bd08      	pop	{r3, pc}

00035770 <ADS1298_send_read_data>:
}
bool ADS1298_send_read_continuous() {
    return ADS1298_send_command(COMMAND_RDATAC);
}

bool ADS1298_send_read_data() {
   35770:	b508      	push	{r3, lr}
    return ADS1298_send_command(COMMAND_RDATA);
   35772:	2012      	movs	r0, #18
   35774:	f7dc fbb4 	bl	11ee0 <ADS1298_send_command>
}
   35778:	bd08      	pop	{r3, pc}

0003577a <ADS1298_send_stop_read_continuous>:

bool ADS1298_send_stop_read_continuous() {
   3577a:	b508      	push	{r3, lr}
    return ADS1298_send_command(COMMAND_SDATAC);
   3577c:	2011      	movs	r0, #17
   3577e:	f7dc fbaf 	bl	11ee0 <ADS1298_send_command>
}
   35782:	bd08      	pop	{r3, pc}

00035784 <ADS1298_send_wakeup>:

bool ADS1298_send_reset() {
    return ADS1298_send_command(COMMAND_RESET);
}

bool ADS1298_send_wakeup() {
   35784:	b508      	push	{r3, lr}
    return ADS1298_send_command(COMMAND_WAKEUP);
   35786:	2002      	movs	r0, #2
   35788:	f7dc fbaa 	bl	11ee0 <ADS1298_send_command>
}
   3578c:	bd08      	pop	{r3, pc}

0003578e <config_ADS1298>:
void config_ADS1298() {
   3578e:	b508      	push	{r3, lr}
    ads1298_write_register(ADS129X_REG_CONFIG1, 0xC5); // HR mode, SPS: 0-32k, 1-16k, 2-8k, 3-4k, 4-2k, 5-1k, 6-500, 7-non_use
   35790:	21c5      	movs	r1, #197	; 0xc5
   35792:	2001      	movs	r0, #1
   35794:	f7ff ffda 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CONFIG2, 0x00); // default register
   35798:	2100      	movs	r1, #0
   3579a:	2002      	movs	r0, #2
   3579c:	f7ff ffd6 	bl	3574c <ads1298_write_register>
	ads1298_write_register(ADS129X_REG_CONFIG3, 0xE0); // internal power ref = 4 V
   357a0:	21e0      	movs	r1, #224	; 0xe0
   357a2:	2003      	movs	r0, #3
   357a4:	f7ff ffd2 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CONFIG4, 0x00); // default register
   357a8:	2100      	movs	r1, #0
   357aa:	2017      	movs	r0, #23
   357ac:	f7ff ffce 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH1SET, TURN_OFF_CHANNEL);
   357b0:	2180      	movs	r1, #128	; 0x80
   357b2:	2005      	movs	r0, #5
   357b4:	f7ff ffca 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH2SET, TURN_OFF_CHANNEL);
   357b8:	2180      	movs	r1, #128	; 0x80
   357ba:	2006      	movs	r0, #6
   357bc:	f7ff ffc6 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH3SET, TURN_OFF_CHANNEL);
   357c0:	2180      	movs	r1, #128	; 0x80
   357c2:	2007      	movs	r0, #7
   357c4:	f7ff ffc2 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH4SET, TURN_OFF_CHANNEL);
   357c8:	2180      	movs	r1, #128	; 0x80
   357ca:	2008      	movs	r0, #8
   357cc:	f7ff ffbe 	bl	3574c <ads1298_write_register>
	ads1298_write_register(ADS129X_REG_CH5SET, TURN_OFF_CHANNEL);
   357d0:	2180      	movs	r1, #128	; 0x80
   357d2:	2009      	movs	r0, #9
   357d4:	f7ff ffba 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH6SET, TURN_OFF_CHANNEL);
   357d8:	2180      	movs	r1, #128	; 0x80
   357da:	200a      	movs	r0, #10
   357dc:	f7ff ffb6 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH7SET, GAIN_ONE);
   357e0:	2110      	movs	r1, #16
   357e2:	200b      	movs	r0, #11
   357e4:	f7ff ffb2 	bl	3574c <ads1298_write_register>
    ads1298_write_register(ADS129X_REG_CH8SET, GAIN_ONE);
   357e8:	2110      	movs	r1, #16
   357ea:	200c      	movs	r0, #12
   357ec:	f7ff ffae 	bl	3574c <ads1298_write_register>
}
   357f0:	bd08      	pop	{r3, pc}

000357f2 <cbprintf_via_va_list>:
{
   357f2:	b510      	push	{r4, lr}
   357f4:	460c      	mov	r4, r1
   357f6:	4611      	mov	r1, r2
   357f8:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
   357fa:	9b02      	ldr	r3, [sp, #8]
   357fc:	47a0      	blx	r4
}
   357fe:	bd10      	pop	{r4, pc}

00035800 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
   35800:	3840      	subs	r0, #64	; 0x40
   35802:	b2c0      	uxtb	r0, r0
}
   35804:	283a      	cmp	r0, #58	; 0x3a
   35806:	bf8c      	ite	hi
   35808:	2000      	movhi	r0, #0
   3580a:	2001      	movls	r0, #1
   3580c:	4770      	bx	lr

0003580e <append_string>:
{
   3580e:	b570      	push	{r4, r5, r6, lr}
   35810:	4614      	mov	r4, r2
	if (cb == NULL) {
   35812:	b138      	cbz	r0, 35824 <append_string+0x16>
   35814:	460d      	mov	r5, r1
   35816:	4619      	mov	r1, r3
   35818:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   3581a:	b143      	cbz	r3, 3582e <append_string+0x20>
	return cb(str, strl, ctx);
   3581c:	462a      	mov	r2, r5
   3581e:	4620      	mov	r0, r4
   35820:	47b0      	blx	r6
}
   35822:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
   35824:	4610      	mov	r0, r2
   35826:	f002 fd92 	bl	3834e <strlen>
   3582a:	3001      	adds	r0, #1
   3582c:	e7f9      	b.n	35822 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
   3582e:	4610      	mov	r0, r2
   35830:	f002 fd8d 	bl	3834e <strlen>
   35834:	b283      	uxth	r3, r0
   35836:	3301      	adds	r3, #1
   35838:	b299      	uxth	r1, r3
   3583a:	e7ef      	b.n	3581c <append_string+0xe>

0003583c <cbpprintf_external>:
	if (buf == NULL) {
   3583c:	b35b      	cbz	r3, 35896 <cbpprintf_external+0x5a>
{
   3583e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35842:	b082      	sub	sp, #8
   35844:	4607      	mov	r7, r0
   35846:	4688      	mov	r8, r1
   35848:	4691      	mov	r9, r2
   3584a:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
   3584c:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
   3584e:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   35850:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   35852:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   35854:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   35858:	eb04 0443 	add.w	r4, r4, r3, lsl #1
   3585c:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   3585e:	f04f 0a00 	mov.w	sl, #0
   35862:	e00a      	b.n	3587a <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
   35864:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   35868:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   3586c:	4620      	mov	r0, r4
   3586e:	f002 fd6e 	bl	3834e <strlen>
   35872:	3001      	adds	r0, #1
   35874:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   35876:	f10a 0a01 	add.w	sl, sl, #1
   3587a:	45b2      	cmp	sl, r6
   3587c:	d3f2      	bcc.n	35864 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
   3587e:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
   35882:	9300      	str	r3, [sp, #0]
   35884:	686b      	ldr	r3, [r5, #4]
   35886:	464a      	mov	r2, r9
   35888:	4641      	mov	r1, r8
   3588a:	4638      	mov	r0, r7
   3588c:	f7ff ffb1 	bl	357f2 <cbprintf_via_va_list>
}
   35890:	b002      	add	sp, #8
   35892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
   35896:	f06f 0015 	mvn.w	r0, #21
}
   3589a:	4770      	bx	lr

0003589c <is_ptr>:
{
   3589c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   358a0:	4604      	mov	r4, r0
   358a2:	4688      	mov	r8, r1
	int cnt = 0;
   358a4:	2700      	movs	r7, #0
	bool mod = false;
   358a6:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
   358a8:	e007      	b.n	358ba <is_ptr+0x1e>
				if (c == 'p') {
   358aa:	2d70      	cmp	r5, #112	; 0x70
   358ac:	d018      	beq.n	358e0 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
   358ae:	4628      	mov	r0, r5
   358b0:	f7ff ffa6 	bl	35800 <is_fmt_spec>
   358b4:	b9b8      	cbnz	r0, 358e6 <is_ptr+0x4a>
		if (c == '%') {
   358b6:	2d25      	cmp	r5, #37	; 0x25
   358b8:	d00e      	beq.n	358d8 <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
   358ba:	f814 5b01 	ldrb.w	r5, [r4], #1
   358be:	b175      	cbz	r5, 358de <is_ptr+0x42>
		if (mod) {
   358c0:	2e00      	cmp	r6, #0
   358c2:	d0f8      	beq.n	358b6 <is_ptr+0x1a>
			if (cnt == n) {
   358c4:	4547      	cmp	r7, r8
   358c6:	d0f0      	beq.n	358aa <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
   358c8:	4628      	mov	r0, r5
   358ca:	f7ff ff99 	bl	35800 <is_fmt_spec>
   358ce:	2800      	cmp	r0, #0
   358d0:	d0f1      	beq.n	358b6 <is_ptr+0x1a>
				cnt++;
   358d2:	3701      	adds	r7, #1
				mod = false;
   358d4:	2600      	movs	r6, #0
   358d6:	e7ee      	b.n	358b6 <is_ptr+0x1a>
			mod = !mod;
   358d8:	f086 0601 	eor.w	r6, r6, #1
   358dc:	e7ed      	b.n	358ba <is_ptr+0x1e>
	return false;
   358de:	2600      	movs	r6, #0
}
   358e0:	4630      	mov	r0, r6
   358e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
   358e6:	2600      	movs	r6, #0
   358e8:	e7fa      	b.n	358e0 <is_ptr+0x44>

000358ea <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   358ea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   358ee:	b2db      	uxtb	r3, r3
   358f0:	2b09      	cmp	r3, #9
   358f2:	d802      	bhi.n	358fa <char2hex+0x10>
		*x = c - '0';
   358f4:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   358f6:	2000      	movs	r0, #0
   358f8:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   358fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   358fe:	b2db      	uxtb	r3, r3
   35900:	2b05      	cmp	r3, #5
   35902:	d803      	bhi.n	3590c <char2hex+0x22>
		*x = c - 'a' + 10;
   35904:	3857      	subs	r0, #87	; 0x57
   35906:	7008      	strb	r0, [r1, #0]
	return 0;
   35908:	2000      	movs	r0, #0
   3590a:	4770      	bx	lr
	} else if (c >= 'A' && c <= 'F') {
   3590c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   35910:	b2db      	uxtb	r3, r3
   35912:	2b05      	cmp	r3, #5
   35914:	d803      	bhi.n	3591e <char2hex+0x34>
		*x = c - 'A' + 10;
   35916:	3837      	subs	r0, #55	; 0x37
   35918:	7008      	strb	r0, [r1, #0]
	return 0;
   3591a:	2000      	movs	r0, #0
   3591c:	4770      	bx	lr
		return -EINVAL;
   3591e:	f06f 0015 	mvn.w	r0, #21
}
   35922:	4770      	bx	lr

00035924 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   35924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   35928:	b083      	sub	sp, #12
   3592a:	4616      	mov	r6, r2
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   3592c:	f001 0201 	and.w	r2, r1, #1
   35930:	eb02 0851 	add.w	r8, r2, r1, lsr #1
   35934:	4598      	cmp	r8, r3
   35936:	d82f      	bhi.n	35998 <hex2bin+0x74>
   35938:	4607      	mov	r7, r0
   3593a:	ea4f 0951 	mov.w	r9, r1, lsr #1
		return 0;
	}

	/* if hexlen is uneven, insert leading zero nibble */
	if (hexlen % 2) {
   3593e:	b9f2      	cbnz	r2, 3597e <hex2bin+0x5a>
		hex++;
		buf++;
	}

	/* regular hex conversion */
	for (size_t i = 0; i < hexlen / 2; i++) {
   35940:	2400      	movs	r4, #0
   35942:	45a1      	cmp	r9, r4
   35944:	d92a      	bls.n	3599c <hex2bin+0x78>
		if (char2hex(hex[2 * i], &dec) < 0) {
   35946:	0065      	lsls	r5, r4, #1
   35948:	f10d 0107 	add.w	r1, sp, #7
   3594c:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
   35950:	f7ff ffcb 	bl	358ea <char2hex>
   35954:	2800      	cmp	r0, #0
   35956:	db28      	blt.n	359aa <hex2bin+0x86>
			return 0;
		}
		buf[i] = dec << 4;
   35958:	f89d 3007 	ldrb.w	r3, [sp, #7]
   3595c:	011b      	lsls	r3, r3, #4
   3595e:	5533      	strb	r3, [r6, r4]

		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   35960:	3501      	adds	r5, #1
   35962:	f10d 0107 	add.w	r1, sp, #7
   35966:	5d78      	ldrb	r0, [r7, r5]
   35968:	f7ff ffbf 	bl	358ea <char2hex>
   3596c:	2800      	cmp	r0, #0
   3596e:	db1f      	blt.n	359b0 <hex2bin+0x8c>
			return 0;
		}
		buf[i] += dec;
   35970:	5d33      	ldrb	r3, [r6, r4]
   35972:	f89d 2007 	ldrb.w	r2, [sp, #7]
   35976:	4413      	add	r3, r2
   35978:	5533      	strb	r3, [r6, r4]
	for (size_t i = 0; i < hexlen / 2; i++) {
   3597a:	3401      	adds	r4, #1
   3597c:	e7e1      	b.n	35942 <hex2bin+0x1e>
		if (char2hex(hex[0], &dec) < 0) {
   3597e:	f10d 0107 	add.w	r1, sp, #7
   35982:	7800      	ldrb	r0, [r0, #0]
   35984:	f7ff ffb1 	bl	358ea <char2hex>
   35988:	2800      	cmp	r0, #0
   3598a:	db0b      	blt.n	359a4 <hex2bin+0x80>
		buf[0] = dec;
   3598c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   35990:	f806 3b01 	strb.w	r3, [r6], #1
		hex++;
   35994:	3701      	adds	r7, #1
		buf++;
   35996:	e7d3      	b.n	35940 <hex2bin+0x1c>
		return 0;
   35998:	f04f 0800 	mov.w	r8, #0
	}

	return hexlen / 2 + hexlen % 2;
}
   3599c:	4640      	mov	r0, r8
   3599e:	b003      	add	sp, #12
   359a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			return 0;
   359a4:	f04f 0800 	mov.w	r8, #0
   359a8:	e7f8      	b.n	3599c <hex2bin+0x78>
			return 0;
   359aa:	f04f 0800 	mov.w	r8, #0
   359ae:	e7f5      	b.n	3599c <hex2bin+0x78>
			return 0;
   359b0:	f04f 0800 	mov.w	r8, #0
   359b4:	e7f2      	b.n	3599c <hex2bin+0x78>

000359b6 <arch_printk_char_out>:
}
   359b6:	2000      	movs	r0, #0
   359b8:	4770      	bx	lr

000359ba <str_out>:
{
   359ba:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   359bc:	680c      	ldr	r4, [r1, #0]
   359be:	b154      	cbz	r4, 359d6 <str_out+0x1c>
   359c0:	688a      	ldr	r2, [r1, #8]
   359c2:	684b      	ldr	r3, [r1, #4]
   359c4:	429a      	cmp	r2, r3
   359c6:	da06      	bge.n	359d6 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   359c8:	3b01      	subs	r3, #1
   359ca:	429a      	cmp	r2, r3
   359cc:	d008      	beq.n	359e0 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   359ce:	1c53      	adds	r3, r2, #1
   359d0:	608b      	str	r3, [r1, #8]
   359d2:	54a0      	strb	r0, [r4, r2]
   359d4:	e002      	b.n	359dc <str_out+0x22>
		ctx->count++;
   359d6:	688b      	ldr	r3, [r1, #8]
   359d8:	3301      	adds	r3, #1
   359da:	608b      	str	r3, [r1, #8]
}
   359dc:	bc10      	pop	{r4}
   359de:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   359e0:	1c53      	adds	r3, r2, #1
   359e2:	608b      	str	r3, [r1, #8]
   359e4:	2300      	movs	r3, #0
   359e6:	54a3      	strb	r3, [r4, r2]
   359e8:	e7f8      	b.n	359dc <str_out+0x22>

000359ea <vprintk>:
{
   359ea:	b508      	push	{r3, lr}
		z_log_vprintk(fmt, ap);
   359ec:	f000 fdf2 	bl	365d4 <z_log_vprintk>
}
   359f0:	bd08      	pop	{r3, pc}

000359f2 <printk>:
{
   359f2:	b40f      	push	{r0, r1, r2, r3}
   359f4:	b500      	push	{lr}
   359f6:	b083      	sub	sp, #12
   359f8:	a904      	add	r1, sp, #16
   359fa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   359fe:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   35a00:	f7ff fff3 	bl	359ea <vprintk>
}
   35a04:	b003      	add	sp, #12
   35a06:	f85d eb04 	ldr.w	lr, [sp], #4
   35a0a:	b004      	add	sp, #16
   35a0c:	4770      	bx	lr

00035a0e <snprintk>:
{
   35a0e:	b40c      	push	{r2, r3}
   35a10:	b500      	push	{lr}
   35a12:	b083      	sub	sp, #12
   35a14:	ab04      	add	r3, sp, #16
   35a16:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   35a1a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   35a1c:	f7de fd2a 	bl	14474 <vsnprintk>
}
   35a20:	b003      	add	sp, #12
   35a22:	f85d eb04 	ldr.w	lr, [sp], #4
   35a26:	b002      	add	sp, #8
   35a28:	4770      	bx	lr

00035a2a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   35a2a:	b508      	push	{r3, lr}
   35a2c:	4604      	mov	r4, r0
   35a2e:	4608      	mov	r0, r1
   35a30:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   35a32:	461a      	mov	r2, r3
   35a34:	47a0      	blx	r4
	return z_impl_z_current_get();
   35a36:	f7fe fb47 	bl	340c8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   35a3a:	f7e4 fdc9 	bl	1a5d0 <z_impl_k_thread_abort>

00035a3e <chunk_mem>:
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   35a3e:	00c9      	lsls	r1, r1, #3
   35a40:	3104      	adds	r1, #4
}
   35a42:	4408      	add	r0, r1
   35a44:	4770      	bx	lr

00035a46 <free_list_remove_bidx>:
	void *cmem = &buf[c];
   35a46:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		return ((uint16_t *)cmem)[f];
   35a4a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   35a4e:	88db      	ldrh	r3, [r3, #6]
	if (next_free_chunk(h, c) == c) {
   35a50:	4299      	cmp	r1, r3
   35a52:	d00c      	beq.n	35a6e <free_list_remove_bidx+0x28>
   35a54:	4484      	add	ip, r0
   35a56:	f8bc 1004 	ldrh.w	r1, [ip, #4]
		b->next = second;
   35a5a:	3204      	adds	r2, #4
   35a5c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   35a60:	00ca      	lsls	r2, r1, #3
		((uint16_t *)cmem)[f] = val;
   35a62:	3206      	adds	r2, #6
   35a64:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   35a66:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   35a68:	3304      	adds	r3, #4
   35a6a:	52c1      	strh	r1, [r0, r3]
}
   35a6c:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   35a6e:	68c3      	ldr	r3, [r0, #12]
   35a70:	2101      	movs	r1, #1
   35a72:	4091      	lsls	r1, r2
   35a74:	ea23 0301 	bic.w	r3, r3, r1
   35a78:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   35a7a:	3204      	adds	r2, #4
   35a7c:	2300      	movs	r3, #0
   35a7e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   35a82:	4770      	bx	lr

00035a84 <free_list_add_bidx>:
{
   35a84:	b510      	push	{r4, lr}
	if (b->next == 0U) {
   35a86:	1d13      	adds	r3, r2, #4
   35a88:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   35a8c:	b974      	cbnz	r4, 35aac <free_list_add_bidx+0x28>
		h->avail_buckets |= BIT(bidx);
   35a8e:	68c3      	ldr	r3, [r0, #12]
   35a90:	2401      	movs	r4, #1
   35a92:	4094      	lsls	r4, r2
   35a94:	4323      	orrs	r3, r4
   35a96:	60c3      	str	r3, [r0, #12]
		b->next = c;
   35a98:	3204      	adds	r2, #4
   35a9a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   35a9e:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   35aa0:	1d1a      	adds	r2, r3, #4
   35aa2:	b289      	uxth	r1, r1
   35aa4:	5281      	strh	r1, [r0, r2]
   35aa6:	3306      	adds	r3, #6
   35aa8:	52c1      	strh	r1, [r0, r3]
}
   35aaa:	bd10      	pop	{r4, pc}
	void *cmem = &buf[c];
   35aac:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   35aae:	3204      	adds	r2, #4
   35ab0:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   35ab2:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
		((uint16_t *)cmem)[f] = val;
   35ab6:	f10c 0e04 	add.w	lr, ip, #4
   35aba:	f820 300e 	strh.w	r3, [r0, lr]
   35abe:	f10c 0c06 	add.w	ip, ip, #6
   35ac2:	f820 400c 	strh.w	r4, [r0, ip]
	void *cmem = &buf[c];
   35ac6:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   35ac8:	3306      	adds	r3, #6
   35aca:	b289      	uxth	r1, r1
   35acc:	52c1      	strh	r1, [r0, r3]
   35ace:	5281      	strh	r1, [r0, r2]
   35ad0:	e7eb      	b.n	35aaa <free_list_add_bidx+0x26>

00035ad2 <split_chunks>:
{
   35ad2:	b500      	push	{lr}
	void *cmem = &buf[c];
   35ad4:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   35ad6:	3302      	adds	r3, #2
   35ad8:	f830 e003 	ldrh.w	lr, [r0, r3]
	chunksz_t lsz = rc - lc;
   35adc:	eba2 0c01 	sub.w	ip, r2, r1
	chunksz_t rsz = sz0 - lsz;
   35ae0:	1a89      	subs	r1, r1, r2
   35ae2:	eb01 015e 	add.w	r1, r1, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   35ae6:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
		((uint16_t *)cmem)[f] = val;
   35aea:	f820 e003 	strh.w	lr, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   35aee:	ea4f 0e41 	mov.w	lr, r1, lsl #1
	void *cmem = &buf[c];
   35af2:	00d3      	lsls	r3, r2, #3
		((uint16_t *)cmem)[f] = val;
   35af4:	3302      	adds	r3, #2
   35af6:	f820 e003 	strh.w	lr, [r0, r3]
   35afa:	f820 c032 	strh.w	ip, [r0, r2, lsl #3]
		return ((uint16_t *)cmem)[f];
   35afe:	5ac3      	ldrh	r3, [r0, r3]
	return c + chunk_size(h, c);
   35b00:	eb02 0253 	add.w	r2, r2, r3, lsr #1
		((uint16_t *)cmem)[f] = val;
   35b04:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
}
   35b08:	f85d fb04 	ldr.w	pc, [sp], #4

00035b0c <merge_chunks>:
{
   35b0c:	b500      	push	{lr}
	void *cmem = &buf[c];
   35b0e:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   35b10:	3102      	adds	r1, #2
   35b12:	f830 e001 	ldrh.w	lr, [r0, r1]
	void *cmem = &buf[c];
   35b16:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
		return ((uint16_t *)cmem)[f];
   35b1a:	f10c 0c02 	add.w	ip, ip, #2
   35b1e:	f830 300c 	ldrh.w	r3, [r0, ip]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   35b22:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   35b24:	eb03 035e 	add.w	r3, r3, lr, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   35b28:	ea4f 0e43 	mov.w	lr, r3, lsl #1
		((uint16_t *)cmem)[f] = val;
   35b2c:	f820 e001 	strh.w	lr, [r0, r1]
		return ((uint16_t *)cmem)[f];
   35b30:	f830 100c 	ldrh.w	r1, [r0, ip]
	return c + chunk_size(h, c);
   35b34:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   35b38:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
}
   35b3c:	f85d fb04 	ldr.w	pc, [sp], #4

00035b40 <mem_to_chunkid>:
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   35b40:	3904      	subs	r1, #4
   35b42:	1a08      	subs	r0, r1, r0
}
   35b44:	08c0      	lsrs	r0, r0, #3
   35b46:	4770      	bx	lr

00035b48 <free_list_remove>:
{
   35b48:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   35b4a:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   35b4e:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   35b50:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   35b52:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   35b56:	f1c2 021f 	rsb	r2, r2, #31
   35b5a:	f7ff ff74 	bl	35a46 <free_list_remove_bidx>
}
   35b5e:	bd08      	pop	{r3, pc}

00035b60 <free_list_add>:
{
   35b60:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   35b62:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   35b66:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   35b68:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   35b6a:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   35b6e:	f1c2 021f 	rsb	r2, r2, #31
   35b72:	f7ff ff87 	bl	35a84 <free_list_add_bidx>
}
   35b76:	bd08      	pop	{r3, pc}

00035b78 <free_chunk>:
{
   35b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b7a:	4604      	mov	r4, r0
   35b7c:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   35b7e:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   35b80:	1cb7      	adds	r7, r6, #2
   35b82:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   35b84:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   35b88:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   35b8c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   35b8e:	f013 0f01 	tst.w	r3, #1
   35b92:	d00c      	beq.n	35bae <free_chunk+0x36>
   35b94:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   35b96:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   35b98:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   35b9c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   35b9e:	f013 0f01 	tst.w	r3, #1
   35ba2:	d00e      	beq.n	35bc2 <free_chunk+0x4a>
	free_list_add(h, c);
   35ba4:	4629      	mov	r1, r5
   35ba6:	4620      	mov	r0, r4
   35ba8:	f7ff ffda 	bl	35b60 <free_list_add>
}
   35bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   35bae:	f7ff ffcb 	bl	35b48 <free_list_remove>
   35bb2:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   35bb4:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   35bb8:	4629      	mov	r1, r5
   35bba:	4620      	mov	r0, r4
   35bbc:	f7ff ffa6 	bl	35b0c <merge_chunks>
   35bc0:	e7e8      	b.n	35b94 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   35bc2:	4620      	mov	r0, r4
   35bc4:	f7ff ffc0 	bl	35b48 <free_list_remove>
   35bc8:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   35bca:	462a      	mov	r2, r5
   35bcc:	1a69      	subs	r1, r5, r1
   35bce:	4620      	mov	r0, r4
   35bd0:	f7ff ff9c 	bl	35b0c <merge_chunks>
   35bd4:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   35bd6:	1aed      	subs	r5, r5, r3
   35bd8:	e7e4      	b.n	35ba4 <free_chunk+0x2c>

00035bda <alloc_chunk>:
{
   35bda:	b570      	push	{r4, r5, r6, lr}
	return 31 - __builtin_clz(usable_sz);
   35bdc:	fab1 f381 	clz	r3, r1
	if (b->next) {
   35be0:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   35be4:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
   35be8:	b1cd      	cbz	r5, 35c1e <alloc_chunk+0x44>
   35bea:	f1c3 021f 	rsb	r2, r3, #31
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   35bee:	f04f 0e03 	mov.w	lr, #3
			chunkid_t c = b->next;
   35bf2:	1d14      	adds	r4, r2, #4
   35bf4:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   35bf8:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
		return ((uint16_t *)cmem)[f];
   35bfc:	eb00 06c4 	add.w	r6, r0, r4, lsl #3
   35c00:	8876      	ldrh	r6, [r6, #2]
			if (chunk_size(h, c) >= sz) {
   35c02:	ebb1 0f56 	cmp.w	r1, r6, lsr #1
   35c06:	d914      	bls.n	35c32 <alloc_chunk+0x58>
   35c08:	4484      	add	ip, r0
   35c0a:	f8bc 4006 	ldrh.w	r4, [ip, #6]
			b->next = next_free_chunk(h, c);
   35c0e:	1d16      	adds	r6, r2, #4
   35c10:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
		} while (--i && b->next != first);
   35c14:	f1be 0e01 	subs.w	lr, lr, #1
   35c18:	d001      	beq.n	35c1e <alloc_chunk+0x44>
   35c1a:	42a5      	cmp	r5, r4
   35c1c:	d1e9      	bne.n	35bf2 <alloc_chunk+0x18>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   35c1e:	68c4      	ldr	r4, [r0, #12]
   35c20:	f1c3 0220 	rsb	r2, r3, #32
   35c24:	2301      	movs	r3, #1
   35c26:	4093      	lsls	r3, r2
   35c28:	425b      	negs	r3, r3
	if (bmask != 0U) {
   35c2a:	401c      	ands	r4, r3
   35c2c:	d105      	bne.n	35c3a <alloc_chunk+0x60>
}
   35c2e:	4620      	mov	r0, r4
   35c30:	bd70      	pop	{r4, r5, r6, pc}
				free_list_remove_bidx(h, c, bi);
   35c32:	4621      	mov	r1, r4
   35c34:	f7ff ff07 	bl	35a46 <free_list_remove_bidx>
				return c;
   35c38:	e7f9      	b.n	35c2e <alloc_chunk+0x54>
		int minbucket = __builtin_ctz(bmask);
   35c3a:	fa94 f2a4 	rbit	r2, r4
   35c3e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   35c42:	1d13      	adds	r3, r2, #4
   35c44:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   35c48:	4621      	mov	r1, r4
   35c4a:	f7ff fefc 	bl	35a46 <free_list_remove_bidx>
		return c;
   35c4e:	e7ee      	b.n	35c2e <alloc_chunk+0x54>

00035c50 <sys_heap_alloc>:
{
   35c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   35c52:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   35c54:	b341      	cbz	r1, 35ca8 <sys_heap_alloc+0x58>
   35c56:	460b      	mov	r3, r1
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   35c58:	68aa      	ldr	r2, [r5, #8]
   35c5a:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   35c5e:	d925      	bls.n	35cac <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   35c60:	330b      	adds	r3, #11
   35c62:	08dc      	lsrs	r4, r3, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   35c64:	4621      	mov	r1, r4
   35c66:	4628      	mov	r0, r5
   35c68:	f7ff ffb7 	bl	35bda <alloc_chunk>
	if (c == 0U) {
   35c6c:	4607      	mov	r7, r0
   35c6e:	b1f8      	cbz	r0, 35cb0 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   35c70:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   35c72:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   35c76:	885b      	ldrh	r3, [r3, #2]
	if (chunk_size(h, c) > chunk_sz) {
   35c78:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   35c7c:	d309      	bcc.n	35c92 <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   35c7e:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   35c80:	885a      	ldrh	r2, [r3, #2]
   35c82:	f042 0201 	orr.w	r2, r2, #1
   35c86:	805a      	strh	r2, [r3, #2]
	mem = chunk_mem(h, c);
   35c88:	4639      	mov	r1, r7
   35c8a:	4628      	mov	r0, r5
   35c8c:	f7ff fed7 	bl	35a3e <chunk_mem>
}
   35c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   35c92:	4404      	add	r4, r0
   35c94:	4622      	mov	r2, r4
   35c96:	4601      	mov	r1, r0
   35c98:	4628      	mov	r0, r5
   35c9a:	f7ff ff1a 	bl	35ad2 <split_chunks>
		free_list_add(h, c + chunk_sz);
   35c9e:	4621      	mov	r1, r4
   35ca0:	4628      	mov	r0, r5
   35ca2:	f7ff ff5d 	bl	35b60 <free_list_add>
   35ca6:	e7ea      	b.n	35c7e <sys_heap_alloc+0x2e>
		return NULL;
   35ca8:	2000      	movs	r0, #0
   35caa:	e7f1      	b.n	35c90 <sys_heap_alloc+0x40>
   35cac:	2000      	movs	r0, #0
   35cae:	e7ef      	b.n	35c90 <sys_heap_alloc+0x40>
		return NULL;
   35cb0:	2000      	movs	r0, #0
   35cb2:	e7ed      	b.n	35c90 <sys_heap_alloc+0x40>

00035cb4 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   35cb4:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   35cb8:	8b83      	ldrh	r3, [r0, #28]
   35cba:	f023 0307 	bic.w	r3, r3, #7
   35cbe:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   35cc0:	8383      	strh	r3, [r0, #28]
}
   35cc2:	4770      	bx	lr

00035cc4 <notify_monitors>:
{
   35cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35cc8:	4606      	mov	r6, r0
   35cca:	460f      	mov	r7, r1
   35ccc:	4690      	mov	r8, r2
   35cce:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   35cd0:	b121      	cbz	r1, 35cdc <notify_monitors+0x18>
	return node->next;
   35cd2:	680c      	ldr	r4, [r1, #0]
   35cd4:	b13c      	cbz	r4, 35ce6 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   35cd6:	b931      	cbnz	r1, 35ce6 <notify_monitors+0x22>
   35cd8:	460c      	mov	r4, r1
   35cda:	e004      	b.n	35ce6 <notify_monitors+0x22>
   35cdc:	460c      	mov	r4, r1
   35cde:	e002      	b.n	35ce6 <notify_monitors+0x22>
   35ce0:	4623      	mov	r3, r4
   35ce2:	4621      	mov	r1, r4
   35ce4:	461c      	mov	r4, r3
   35ce6:	b169      	cbz	r1, 35d04 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
   35ce8:	684d      	ldr	r5, [r1, #4]
   35cea:	4643      	mov	r3, r8
   35cec:	463a      	mov	r2, r7
   35cee:	4630      	mov	r0, r6
   35cf0:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   35cf2:	2c00      	cmp	r4, #0
   35cf4:	d0f4      	beq.n	35ce0 <notify_monitors+0x1c>
	return node->next;
   35cf6:	6823      	ldr	r3, [r4, #0]
   35cf8:	2b00      	cmp	r3, #0
   35cfa:	d0f2      	beq.n	35ce2 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   35cfc:	2c00      	cmp	r4, #0
   35cfe:	d1f0      	bne.n	35ce2 <notify_monitors+0x1e>
   35d00:	4623      	mov	r3, r4
   35d02:	e7ee      	b.n	35ce2 <notify_monitors+0x1e>
}
   35d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035d08 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   35d08:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   35d0a:	f013 0307 	ands.w	r3, r3, #7
   35d0e:	d103      	bne.n	35d18 <process_recheck+0x10>
	return list->head;
   35d10:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   35d12:	b10a      	cbz	r2, 35d18 <process_recheck+0x10>
		evt = EVT_START;
   35d14:	2003      	movs	r0, #3
   35d16:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   35d18:	2b02      	cmp	r3, #2
   35d1a:	d003      	beq.n	35d24 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   35d1c:	2b01      	cmp	r3, #1
   35d1e:	d006      	beq.n	35d2e <process_recheck+0x26>
	int evt = EVT_NOP;
   35d20:	2000      	movs	r0, #0
   35d22:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   35d24:	8bc2      	ldrh	r2, [r0, #30]
   35d26:	2a00      	cmp	r2, #0
   35d28:	d1f8      	bne.n	35d1c <process_recheck+0x14>
		evt = EVT_STOP;
   35d2a:	2004      	movs	r0, #4
   35d2c:	4770      	bx	lr
   35d2e:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   35d30:	b10b      	cbz	r3, 35d36 <process_recheck+0x2e>
		evt = EVT_RESET;
   35d32:	2005      	movs	r0, #5
}
   35d34:	4770      	bx	lr
	int evt = EVT_NOP;
   35d36:	2000      	movs	r0, #0
   35d38:	4770      	bx	lr

00035d3a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   35d3a:	b150      	cbz	r0, 35d52 <validate_args+0x18>
{
   35d3c:	b510      	push	{r4, lr}
   35d3e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   35d40:	b151      	cbz	r1, 35d58 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
   35d42:	1d08      	adds	r0, r1, #4
   35d44:	f000 f854 	bl	35df0 <sys_notify_validate>
	if ((rv == 0)
   35d48:	b910      	cbnz	r0, 35d50 <validate_args+0x16>
	    && ((cli->notify.flags
   35d4a:	68a3      	ldr	r3, [r4, #8]
   35d4c:	2b03      	cmp	r3, #3
   35d4e:	d806      	bhi.n	35d5e <validate_args+0x24>
}
   35d50:	bd10      	pop	{r4, pc}
		return -EINVAL;
   35d52:	f06f 0015 	mvn.w	r0, #21
}
   35d56:	4770      	bx	lr
		return -EINVAL;
   35d58:	f06f 0015 	mvn.w	r0, #21
   35d5c:	e7f8      	b.n	35d50 <validate_args+0x16>
		rv = -EINVAL;
   35d5e:	f06f 0015 	mvn.w	r0, #21
   35d62:	e7f5      	b.n	35d50 <validate_args+0x16>

00035d64 <notify_one>:
{
   35d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35d68:	4607      	mov	r7, r0
   35d6a:	460c      	mov	r4, r1
   35d6c:	4616      	mov	r6, r2
   35d6e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   35d70:	4619      	mov	r1, r3
   35d72:	1d20      	adds	r0, r4, #4
   35d74:	f7df f83c 	bl	14df0 <sys_notify_finalize>
	if (cb) {
   35d78:	b128      	cbz	r0, 35d86 <notify_one+0x22>
   35d7a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   35d7c:	462b      	mov	r3, r5
   35d7e:	4632      	mov	r2, r6
   35d80:	4621      	mov	r1, r4
   35d82:	4638      	mov	r0, r7
   35d84:	47c0      	blx	r8
}
   35d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035d8a <notify_all>:
{
   35d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   35d8e:	4680      	mov	r8, r0
   35d90:	460c      	mov	r4, r1
   35d92:	4617      	mov	r7, r2
   35d94:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
   35d96:	e004      	b.n	35da2 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
   35d98:	4633      	mov	r3, r6
   35d9a:	463a      	mov	r2, r7
   35d9c:	4640      	mov	r0, r8
   35d9e:	f7ff ffe1 	bl	35d64 <notify_one>
   35da2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   35da4:	b131      	cbz	r1, 35db4 <notify_all+0x2a>
	return node->next;
   35da6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   35da8:	6025      	str	r5, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   35daa:	6863      	ldr	r3, [r4, #4]
   35dac:	428b      	cmp	r3, r1
   35dae:	d1f3      	bne.n	35d98 <notify_all+0xe>
	list->tail = node;
   35db0:	6065      	str	r5, [r4, #4]
}
   35db2:	e7f1      	b.n	35d98 <notify_all+0xe>
}
   35db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00035db8 <onoff_manager_init>:
	if ((mgr == NULL)
   35db8:	b170      	cbz	r0, 35dd8 <onoff_manager_init+0x20>
{
   35dba:	b538      	push	{r3, r4, r5, lr}
   35dbc:	460c      	mov	r4, r1
   35dbe:	4605      	mov	r5, r0
	    || (transitions == NULL)
   35dc0:	b169      	cbz	r1, 35dde <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   35dc2:	680b      	ldr	r3, [r1, #0]
   35dc4:	b173      	cbz	r3, 35de4 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   35dc6:	684b      	ldr	r3, [r1, #4]
   35dc8:	b17b      	cbz	r3, 35dea <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   35dca:	2220      	movs	r2, #32
   35dcc:	2100      	movs	r1, #0
   35dce:	f002 fb43 	bl	38458 <memset>
   35dd2:	612c      	str	r4, [r5, #16]
	return 0;
   35dd4:	2000      	movs	r0, #0
}
   35dd6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   35dd8:	f06f 0015 	mvn.w	r0, #21
}
   35ddc:	4770      	bx	lr
		return -EINVAL;
   35dde:	f06f 0015 	mvn.w	r0, #21
   35de2:	e7f8      	b.n	35dd6 <onoff_manager_init+0x1e>
   35de4:	f06f 0015 	mvn.w	r0, #21
   35de8:	e7f5      	b.n	35dd6 <onoff_manager_init+0x1e>
   35dea:	f06f 0015 	mvn.w	r0, #21
   35dee:	e7f2      	b.n	35dd6 <onoff_manager_init+0x1e>

00035df0 <sys_notify_validate>:
	if (notify == NULL) {
   35df0:	4602      	mov	r2, r0
   35df2:	b1b0      	cbz	r0, 35e22 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   35df4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   35df6:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   35dfa:	2b02      	cmp	r3, #2
   35dfc:	d00b      	beq.n	35e16 <sys_notify_validate+0x26>
   35dfe:	2b03      	cmp	r3, #3
   35e00:	d004      	beq.n	35e0c <sys_notify_validate+0x1c>
   35e02:	2b01      	cmp	r3, #1
   35e04:	d004      	beq.n	35e10 <sys_notify_validate+0x20>
   35e06:	f06f 0015 	mvn.w	r0, #21
   35e0a:	4770      	bx	lr
		if (notify->method.callback == NULL) {
   35e0c:	6803      	ldr	r3, [r0, #0]
   35e0e:	b15b      	cbz	r3, 35e28 <sys_notify_validate+0x38>
		notify->result = 0;
   35e10:	2000      	movs	r0, #0
   35e12:	6090      	str	r0, [r2, #8]
   35e14:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   35e16:	6803      	ldr	r3, [r0, #0]
   35e18:	2b00      	cmp	r3, #0
   35e1a:	d1f9      	bne.n	35e10 <sys_notify_validate+0x20>
			rv = -EINVAL;
   35e1c:	f06f 0015 	mvn.w	r0, #21
}
   35e20:	4770      	bx	lr
		return -EINVAL;
   35e22:	f06f 0015 	mvn.w	r0, #21
   35e26:	4770      	bx	lr
			rv = -EINVAL;
   35e28:	f06f 0015 	mvn.w	r0, #21
   35e2c:	4770      	bx	lr

00035e2e <extract_decimal>:
{
   35e2e:	4684      	mov	ip, r0
	const char *sp = *str;
   35e30:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   35e32:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   35e34:	e006      	b.n	35e44 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
   35e36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   35e3a:	3201      	adds	r2, #1
   35e3c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   35e40:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   35e44:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   35e46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   35e4a:	2909      	cmp	r1, #9
   35e4c:	d9f3      	bls.n	35e36 <extract_decimal+0x8>
	*str = sp;
   35e4e:	f8cc 2000 	str.w	r2, [ip]
}
   35e52:	4770      	bx	lr

00035e54 <extract_width>:
{
   35e54:	b530      	push	{r4, r5, lr}
   35e56:	b083      	sub	sp, #12
   35e58:	4604      	mov	r4, r0
   35e5a:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
   35e5c:	7803      	ldrb	r3, [r0, #0]
   35e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   35e62:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
   35e64:	460d      	mov	r5, r1
   35e66:	780b      	ldrb	r3, [r1, #0]
   35e68:	2b2a      	cmp	r3, #42	; 0x2a
   35e6a:	d018      	beq.n	35e9e <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
   35e6c:	a801      	add	r0, sp, #4
   35e6e:	f7ff ffde 	bl	35e2e <extract_decimal>
	if (sp != wp) {
   35e72:	9b01      	ldr	r3, [sp, #4]
   35e74:	429d      	cmp	r5, r3
   35e76:	d00f      	beq.n	35e98 <extract_width+0x44>
		conv->width_present = true;
   35e78:	7823      	ldrb	r3, [r4, #0]
   35e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   35e7e:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
   35e80:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
   35e82:	b2db      	uxtb	r3, r3
   35e84:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   35e88:	2800      	cmp	r0, #0
   35e8a:	db10      	blt.n	35eae <extract_width+0x5a>
   35e8c:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   35e8e:	4313      	orrs	r3, r2
   35e90:	7822      	ldrb	r2, [r4, #0]
   35e92:	f363 0241 	bfi	r2, r3, #1, #1
   35e96:	7022      	strb	r2, [r4, #0]
	return sp;
   35e98:	9801      	ldr	r0, [sp, #4]
}
   35e9a:	b003      	add	sp, #12
   35e9c:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
   35e9e:	7843      	ldrb	r3, [r0, #1]
   35ea0:	f043 0301 	orr.w	r3, r3, #1
   35ea4:	7043      	strb	r3, [r0, #1]
		return ++sp;
   35ea6:	4608      	mov	r0, r1
   35ea8:	3001      	adds	r0, #1
   35eaa:	9001      	str	r0, [sp, #4]
   35eac:	e7f5      	b.n	35e9a <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
   35eae:	2201      	movs	r2, #1
   35eb0:	e7ed      	b.n	35e8e <extract_width+0x3a>

00035eb2 <extract_prec>:
{
   35eb2:	b510      	push	{r4, lr}
   35eb4:	b082      	sub	sp, #8
   35eb6:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
   35eb8:	780b      	ldrb	r3, [r1, #0]
   35eba:	2b2e      	cmp	r3, #46	; 0x2e
   35ebc:	bf14      	ite	ne
   35ebe:	2300      	movne	r3, #0
   35ec0:	2301      	moveq	r3, #1
   35ec2:	7842      	ldrb	r2, [r0, #1]
   35ec4:	f363 0241 	bfi	r2, r3, #1, #1
   35ec8:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
   35eca:	b1c3      	cbz	r3, 35efe <extract_prec+0x4c>
   35ecc:	4604      	mov	r4, r0
	++sp;
   35ece:	9b01      	ldr	r3, [sp, #4]
   35ed0:	1c5a      	adds	r2, r3, #1
   35ed2:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
   35ed4:	785b      	ldrb	r3, [r3, #1]
   35ed6:	2b2a      	cmp	r3, #42	; 0x2a
   35ed8:	d013      	beq.n	35f02 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
   35eda:	a801      	add	r0, sp, #4
   35edc:	f7ff ffa7 	bl	35e2e <extract_decimal>
	conv->prec_value = prec;
   35ee0:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
   35ee2:	7823      	ldrb	r3, [r4, #0]
   35ee4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   35ee8:	2800      	cmp	r0, #0
   35eea:	db12      	blt.n	35f12 <extract_prec+0x60>
   35eec:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   35eee:	4313      	orrs	r3, r2
   35ef0:	7822      	ldrb	r2, [r4, #0]
   35ef2:	f363 0241 	bfi	r2, r3, #1, #1
   35ef6:	7022      	strb	r2, [r4, #0]
	return sp;
   35ef8:	9801      	ldr	r0, [sp, #4]
}
   35efa:	b002      	add	sp, #8
   35efc:	bd10      	pop	{r4, pc}
		return sp;
   35efe:	4608      	mov	r0, r1
   35f00:	e7fb      	b.n	35efa <extract_prec+0x48>
		conv->prec_star = true;
   35f02:	7843      	ldrb	r3, [r0, #1]
   35f04:	f043 0304 	orr.w	r3, r3, #4
   35f08:	7043      	strb	r3, [r0, #1]
		return ++sp;
   35f0a:	4610      	mov	r0, r2
   35f0c:	3001      	adds	r0, #1
   35f0e:	9001      	str	r0, [sp, #4]
   35f10:	e7f3      	b.n	35efa <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
   35f12:	2201      	movs	r2, #1
   35f14:	e7eb      	b.n	35eee <extract_prec+0x3c>

00035f16 <extract_length>:
{
   35f16:	4602      	mov	r2, r0
	switch (*sp) {
   35f18:	780b      	ldrb	r3, [r1, #0]
   35f1a:	3b4c      	subs	r3, #76	; 0x4c
   35f1c:	2b2e      	cmp	r3, #46	; 0x2e
   35f1e:	d85b      	bhi.n	35fd8 <extract_length+0xc2>
   35f20:	e8df f003 	tbb	[pc, r3]
   35f24:	5a5a5a4f 	.word	0x5a5a5a4f
   35f28:	5a5a5a5a 	.word	0x5a5a5a5a
   35f2c:	5a5a5a5a 	.word	0x5a5a5a5a
   35f30:	5a5a5a5a 	.word	0x5a5a5a5a
   35f34:	5a5a5a5a 	.word	0x5a5a5a5a
   35f38:	5a5a5a5a 	.word	0x5a5a5a5a
   35f3c:	5a5a5a5a 	.word	0x5a5a5a5a
   35f40:	5a3a5a18 	.word	0x5a3a5a18
   35f44:	5a5a5a29 	.word	0x5a5a5a29
   35f48:	5a5a5a5a 	.word	0x5a5a5a5a
   35f4c:	5a5a5a48 	.word	0x5a5a5a48
   35f50:	5a5a      	.short	0x5a5a
   35f52:	41          	.byte	0x41
   35f53:	00          	.byte	0x00
		if (*++sp == 'h') {
   35f54:	1c48      	adds	r0, r1, #1
   35f56:	784b      	ldrb	r3, [r1, #1]
   35f58:	2b68      	cmp	r3, #104	; 0x68
   35f5a:	d005      	beq.n	35f68 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
   35f5c:	7853      	ldrb	r3, [r2, #1]
   35f5e:	2102      	movs	r1, #2
   35f60:	f361 03c6 	bfi	r3, r1, #3, #4
   35f64:	7053      	strb	r3, [r2, #1]
   35f66:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
   35f68:	7853      	ldrb	r3, [r2, #1]
   35f6a:	2001      	movs	r0, #1
   35f6c:	f360 03c6 	bfi	r3, r0, #3, #4
   35f70:	7053      	strb	r3, [r2, #1]
			++sp;
   35f72:	1c88      	adds	r0, r1, #2
   35f74:	4770      	bx	lr
		if (*++sp == 'l') {
   35f76:	1c48      	adds	r0, r1, #1
   35f78:	784b      	ldrb	r3, [r1, #1]
   35f7a:	2b6c      	cmp	r3, #108	; 0x6c
   35f7c:	d005      	beq.n	35f8a <extract_length+0x74>
			conv->length_mod = LENGTH_L;
   35f7e:	7853      	ldrb	r3, [r2, #1]
   35f80:	2103      	movs	r1, #3
   35f82:	f361 03c6 	bfi	r3, r1, #3, #4
   35f86:	7053      	strb	r3, [r2, #1]
   35f88:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
   35f8a:	7853      	ldrb	r3, [r2, #1]
   35f8c:	2004      	movs	r0, #4
   35f8e:	f360 03c6 	bfi	r3, r0, #3, #4
   35f92:	7053      	strb	r3, [r2, #1]
			++sp;
   35f94:	1c88      	adds	r0, r1, #2
   35f96:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
   35f98:	7853      	ldrb	r3, [r2, #1]
   35f9a:	2005      	movs	r0, #5
   35f9c:	f360 03c6 	bfi	r3, r0, #3, #4
   35fa0:	7053      	strb	r3, [r2, #1]
		++sp;
   35fa2:	1c48      	adds	r0, r1, #1
		break;
   35fa4:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
   35fa6:	7853      	ldrb	r3, [r2, #1]
   35fa8:	2006      	movs	r0, #6
   35faa:	f360 03c6 	bfi	r3, r0, #3, #4
   35fae:	7053      	strb	r3, [r2, #1]
		++sp;
   35fb0:	1c48      	adds	r0, r1, #1
		break;
   35fb2:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
   35fb4:	7853      	ldrb	r3, [r2, #1]
   35fb6:	2007      	movs	r0, #7
   35fb8:	f360 03c6 	bfi	r3, r0, #3, #4
   35fbc:	7053      	strb	r3, [r2, #1]
		++sp;
   35fbe:	1c48      	adds	r0, r1, #1
		break;
   35fc0:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
   35fc2:	7853      	ldrb	r3, [r2, #1]
   35fc4:	2008      	movs	r0, #8
   35fc6:	f360 03c6 	bfi	r3, r0, #3, #4
   35fca:	7053      	strb	r3, [r2, #1]
		++sp;
   35fcc:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
   35fce:	7813      	ldrb	r3, [r2, #0]
   35fd0:	f043 0302 	orr.w	r3, r3, #2
   35fd4:	7013      	strb	r3, [r2, #0]
		break;
   35fd6:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
   35fd8:	7853      	ldrb	r3, [r2, #1]
   35fda:	f36f 03c6 	bfc	r3, #3, #4
   35fde:	7053      	strb	r3, [r2, #1]
		break;
   35fe0:	4608      	mov	r0, r1
}
   35fe2:	4770      	bx	lr

00035fe4 <extract_specifier>:
{
   35fe4:	b500      	push	{lr}
   35fe6:	4602      	mov	r2, r0
	conv->specifier = *sp++;
   35fe8:	4608      	mov	r0, r1
   35fea:	f810 3b01 	ldrb.w	r3, [r0], #1
   35fee:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
   35ff0:	2b78      	cmp	r3, #120	; 0x78
   35ff2:	d817      	bhi.n	36024 <extract_specifier+0x40>
   35ff4:	2b6e      	cmp	r3, #110	; 0x6e
   35ff6:	d229      	bcs.n	3604c <extract_specifier+0x68>
   35ff8:	2b69      	cmp	r3, #105	; 0x69
   35ffa:	d813      	bhi.n	36024 <extract_specifier+0x40>
   35ffc:	2b58      	cmp	r3, #88	; 0x58
   35ffe:	d317      	bcc.n	36030 <extract_specifier+0x4c>
   36000:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
   36004:	fa5f fc8c 	uxtb.w	ip, ip
   36008:	2101      	movs	r1, #1
   3600a:	fa01 f10c 	lsl.w	r1, r1, ip
   3600e:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   36012:	d114      	bne.n	3603e <extract_specifier+0x5a>
   36014:	f640 0c01 	movw	ip, #2049	; 0x801
   36018:	ea11 0f0c 	tst.w	r1, ip
   3601c:	d155      	bne.n	360ca <extract_specifier+0xe6>
   3601e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   36022:	d13a      	bne.n	3609a <extract_specifier+0xb6>
		conv->invalid = true;
   36024:	7813      	ldrb	r3, [r2, #0]
   36026:	f043 0301 	orr.w	r3, r3, #1
   3602a:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
   3602c:	2100      	movs	r1, #0
		break;
   3602e:	e042      	b.n	360b6 <extract_specifier+0xd2>
	switch (conv->specifier) {
   36030:	2b41      	cmp	r3, #65	; 0x41
   36032:	d004      	beq.n	3603e <extract_specifier+0x5a>
   36034:	d3f6      	bcc.n	36024 <extract_specifier+0x40>
   36036:	3b45      	subs	r3, #69	; 0x45
   36038:	b2db      	uxtb	r3, r3
   3603a:	2b02      	cmp	r3, #2
   3603c:	d8f2      	bhi.n	36024 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
   3603e:	7893      	ldrb	r3, [r2, #2]
   36040:	2104      	movs	r1, #4
   36042:	f361 0302 	bfi	r3, r1, #0, #3
   36046:	7093      	strb	r3, [r2, #2]
			unsupported = true;
   36048:	2101      	movs	r1, #1
			break;
   3604a:	e034      	b.n	360b6 <extract_specifier+0xd2>
	switch (conv->specifier) {
   3604c:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
   36050:	b2c9      	uxtb	r1, r1
   36052:	f04f 0c01 	mov.w	ip, #1
   36056:	fa0c fc01 	lsl.w	ip, ip, r1
   3605a:	f240 4182 	movw	r1, #1154	; 0x482
   3605e:	ea1c 0f01 	tst.w	ip, r1
   36062:	bf14      	ite	ne
   36064:	f04f 0e01 	movne.w	lr, #1
   36068:	f04f 0e00 	moveq.w	lr, #0
   3606c:	d12d      	bne.n	360ca <extract_specifier+0xe6>
   3606e:	f01c 0f24 	tst.w	ip, #36	; 0x24
   36072:	bf14      	ite	ne
   36074:	2101      	movne	r1, #1
   36076:	2100      	moveq	r1, #0
   36078:	d139      	bne.n	360ee <extract_specifier+0x10a>
   3607a:	f01c 0c01 	ands.w	ip, ip, #1
   3607e:	d0d1      	beq.n	36024 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
   36080:	7893      	ldrb	r3, [r2, #2]
   36082:	f04f 0e03 	mov.w	lr, #3
   36086:	f36e 0302 	bfi	r3, lr, #0, #3
   3608a:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   3608c:	7853      	ldrb	r3, [r2, #1]
   3608e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   36092:	2b40      	cmp	r3, #64	; 0x40
   36094:	d10f      	bne.n	360b6 <extract_specifier+0xd2>
			unsupported = true;
   36096:	4661      	mov	r1, ip
   36098:	e00d      	b.n	360b6 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
   3609a:	7891      	ldrb	r1, [r2, #2]
   3609c:	f04f 0c01 	mov.w	ip, #1
   360a0:	f36c 0102 	bfi	r1, ip, #0, #3
   360a4:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
   360a6:	7851      	ldrb	r1, [r2, #1]
   360a8:	f001 0178 	and.w	r1, r1, #120	; 0x78
   360ac:	2940      	cmp	r1, #64	; 0x40
   360ae:	d013      	beq.n	360d8 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
   360b0:	2b63      	cmp	r3, #99	; 0x63
   360b2:	d018      	beq.n	360e6 <extract_specifier+0x102>
	bool unsupported = false;
   360b4:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
   360b6:	7813      	ldrb	r3, [r2, #0]
   360b8:	f3c3 0c40 	ubfx	ip, r3, #1, #1
   360bc:	ea41 010c 	orr.w	r1, r1, ip
   360c0:	f361 0341 	bfi	r3, r1, #1, #1
   360c4:	7013      	strb	r3, [r2, #0]
}
   360c6:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
   360ca:	7891      	ldrb	r1, [r2, #2]
   360cc:	f04f 0c02 	mov.w	ip, #2
   360d0:	f36c 0102 	bfi	r1, ip, #0, #3
   360d4:	7091      	strb	r1, [r2, #2]
   360d6:	e7e6      	b.n	360a6 <extract_specifier+0xc2>
			conv->invalid = true;
   360d8:	f892 c000 	ldrb.w	ip, [r2]
   360dc:	f04c 0c01 	orr.w	ip, ip, #1
   360e0:	f882 c000 	strb.w	ip, [r2]
   360e4:	e7e4      	b.n	360b0 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
   360e6:	3900      	subs	r1, #0
   360e8:	bf18      	it	ne
   360ea:	2101      	movne	r1, #1
   360ec:	e7e3      	b.n	360b6 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
   360ee:	7893      	ldrb	r3, [r2, #2]
   360f0:	f04f 0c03 	mov.w	ip, #3
   360f4:	f36c 0302 	bfi	r3, ip, #0, #3
   360f8:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
   360fa:	7853      	ldrb	r3, [r2, #1]
   360fc:	f013 0f78 	tst.w	r3, #120	; 0x78
   36100:	d1d9      	bne.n	360b6 <extract_specifier+0xd2>
	bool unsupported = false;
   36102:	4671      	mov	r1, lr
   36104:	e7d7      	b.n	360b6 <extract_specifier+0xd2>

00036106 <extract_conversion>:
{
   36106:	b510      	push	{r4, lr}
   36108:	4604      	mov	r4, r0
   3610a:	4608      	mov	r0, r1
	*conv = (struct conversion) {
   3610c:	2300      	movs	r3, #0
   3610e:	6023      	str	r3, [r4, #0]
   36110:	6063      	str	r3, [r4, #4]
   36112:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
   36114:	784b      	ldrb	r3, [r1, #1]
   36116:	2b25      	cmp	r3, #37	; 0x25
   36118:	d014      	beq.n	36144 <extract_conversion+0x3e>
   3611a:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
   3611c:	4620      	mov	r0, r4
   3611e:	f7de feb1 	bl	14e84 <extract_flags>
   36122:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
   36124:	4620      	mov	r0, r4
   36126:	f7ff fe95 	bl	35e54 <extract_width>
   3612a:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
   3612c:	4620      	mov	r0, r4
   3612e:	f7ff fec0 	bl	35eb2 <extract_prec>
   36132:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
   36134:	4620      	mov	r0, r4
   36136:	f7ff feee 	bl	35f16 <extract_length>
   3613a:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
   3613c:	4620      	mov	r0, r4
   3613e:	f7ff ff51 	bl	35fe4 <extract_specifier>
}
   36142:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
   36144:	3002      	adds	r0, #2
   36146:	70e3      	strb	r3, [r4, #3]
		return sp;
   36148:	e7fb      	b.n	36142 <extract_conversion+0x3c>

0003614a <conversion_radix>:
	switch (specifier) {
   3614a:	286f      	cmp	r0, #111	; 0x6f
   3614c:	d00c      	beq.n	36168 <conversion_radix+0x1e>
   3614e:	d905      	bls.n	3615c <conversion_radix+0x12>
   36150:	2870      	cmp	r0, #112	; 0x70
   36152:	d00b      	beq.n	3616c <conversion_radix+0x22>
   36154:	2878      	cmp	r0, #120	; 0x78
   36156:	d10b      	bne.n	36170 <conversion_radix+0x26>
		return 16;
   36158:	2010      	movs	r0, #16
   3615a:	4770      	bx	lr
	switch (specifier) {
   3615c:	2858      	cmp	r0, #88	; 0x58
   3615e:	d001      	beq.n	36164 <conversion_radix+0x1a>
   36160:	200a      	movs	r0, #10
   36162:	4770      	bx	lr
		return 16;
   36164:	2010      	movs	r0, #16
   36166:	4770      	bx	lr
		return 8;
   36168:	2008      	movs	r0, #8
   3616a:	4770      	bx	lr
		return 16;
   3616c:	2010      	movs	r0, #16
   3616e:	4770      	bx	lr
	switch (specifier) {
   36170:	200a      	movs	r0, #10
}
   36172:	4770      	bx	lr

00036174 <encode_uint>:
{
   36174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36178:	4605      	mov	r5, r0
   3617a:	460c      	mov	r4, r1
   3617c:	4693      	mov	fp, r2
   3617e:	4699      	mov	r9, r3
   36180:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
   36182:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   36184:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
   36188:	f7ff ffdf 	bl	3614a <conversion_radix>
   3618c:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
   3618e:	e015      	b.n	361bc <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   36190:	f1ba 0f19 	cmp.w	sl, #25
   36194:	d820      	bhi.n	361d8 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   36196:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   36198:	3237      	adds	r2, #55	; 0x37
   3619a:	b2d2      	uxtb	r2, r2
   3619c:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
   361a0:	4632      	mov	r2, r6
   361a2:	4643      	mov	r3, r8
   361a4:	4628      	mov	r0, r5
   361a6:	4621      	mov	r1, r4
   361a8:	f7d9 ffd6 	bl	10158 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   361ac:	42b5      	cmp	r5, r6
   361ae:	f174 0400 	sbcs.w	r4, r4, #0
   361b2:	d315      	bcc.n	361e0 <encode_uint+0x6c>
   361b4:	454f      	cmp	r7, r9
   361b6:	d913      	bls.n	361e0 <encode_uint+0x6c>
		value /= radix;
   361b8:	4605      	mov	r5, r0
   361ba:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
   361bc:	f04f 0800 	mov.w	r8, #0
   361c0:	4632      	mov	r2, r6
   361c2:	4643      	mov	r3, r8
   361c4:	4628      	mov	r0, r5
   361c6:	4621      	mov	r1, r4
   361c8:	f7d9 ffc6 	bl	10158 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   361cc:	2a09      	cmp	r2, #9
   361ce:	d8df      	bhi.n	36190 <encode_uint+0x1c>
   361d0:	b2d2      	uxtb	r2, r2
   361d2:	3230      	adds	r2, #48	; 0x30
   361d4:	b2d2      	uxtb	r2, r2
   361d6:	e7e1      	b.n	3619c <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   361d8:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   361da:	3257      	adds	r2, #87	; 0x57
   361dc:	b2d2      	uxtb	r2, r2
   361de:	e7dd      	b.n	3619c <encode_uint+0x28>
	if (conv->flag_hash) {
   361e0:	f89b 3000 	ldrb.w	r3, [fp]
   361e4:	f013 0f20 	tst.w	r3, #32
   361e8:	d003      	beq.n	361f2 <encode_uint+0x7e>
		if (radix == 8) {
   361ea:	2e08      	cmp	r6, #8
   361ec:	d004      	beq.n	361f8 <encode_uint+0x84>
		} else if (radix == 16) {
   361ee:	2e10      	cmp	r6, #16
   361f0:	d009      	beq.n	36206 <encode_uint+0x92>
}
   361f2:	4638      	mov	r0, r7
   361f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   361f8:	f89b 3002 	ldrb.w	r3, [fp, #2]
   361fc:	f043 0308 	orr.w	r3, r3, #8
   36200:	f88b 3002 	strb.w	r3, [fp, #2]
   36204:	e7f5      	b.n	361f2 <encode_uint+0x7e>
			conv->altform_0c = true;
   36206:	f89b 3002 	ldrb.w	r3, [fp, #2]
   3620a:	f043 0310 	orr.w	r3, r3, #16
   3620e:	f88b 3002 	strb.w	r3, [fp, #2]
   36212:	e7ee      	b.n	361f2 <encode_uint+0x7e>

00036214 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
   36214:	7843      	ldrb	r3, [r0, #1]
   36216:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   3621a:	2b07      	cmp	r3, #7
   3621c:	d818      	bhi.n	36250 <store_count+0x3c>
   3621e:	e8df f003 	tbb	[pc, r3]
   36222:	0604      	.short	0x0604
   36224:	100c0a08 	.word	0x100c0a08
   36228:	1614      	.short	0x1614
		*(int *)dp = count;
   3622a:	600a      	str	r2, [r1, #0]
		break;
   3622c:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
   3622e:	700a      	strb	r2, [r1, #0]
		break;
   36230:	4770      	bx	lr
		*(short *)dp = (short)count;
   36232:	800a      	strh	r2, [r1, #0]
		break;
   36234:	4770      	bx	lr
		*(long *)dp = (long)count;
   36236:	600a      	str	r2, [r1, #0]
		break;
   36238:	4770      	bx	lr
		*(long long *)dp = (long long)count;
   3623a:	17d3      	asrs	r3, r2, #31
   3623c:	600a      	str	r2, [r1, #0]
   3623e:	604b      	str	r3, [r1, #4]
		break;
   36240:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
   36242:	17d3      	asrs	r3, r2, #31
   36244:	600a      	str	r2, [r1, #0]
   36246:	604b      	str	r3, [r1, #4]
		break;
   36248:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
   3624a:	600a      	str	r2, [r1, #0]
		break;
   3624c:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   3624e:	600a      	str	r2, [r1, #0]
}
   36250:	4770      	bx	lr

00036252 <outs>:
{
   36252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36256:	4607      	mov	r7, r0
   36258:	460e      	mov	r6, r1
   3625a:	4614      	mov	r4, r2
   3625c:	4698      	mov	r8, r3
	size_t count = 0;
   3625e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   36260:	e006      	b.n	36270 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   36262:	4631      	mov	r1, r6
   36264:	f814 0b01 	ldrb.w	r0, [r4], #1
   36268:	47b8      	blx	r7
		if (rc < 0) {
   3626a:	2800      	cmp	r0, #0
   3626c:	db09      	blt.n	36282 <outs+0x30>
		++count;
   3626e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   36270:	4544      	cmp	r4, r8
   36272:	d3f6      	bcc.n	36262 <outs+0x10>
   36274:	f1b8 0f00 	cmp.w	r8, #0
   36278:	d102      	bne.n	36280 <outs+0x2e>
   3627a:	7823      	ldrb	r3, [r4, #0]
   3627c:	2b00      	cmp	r3, #0
   3627e:	d1f0      	bne.n	36262 <outs+0x10>
	return (int)count;
   36280:	4628      	mov	r0, r5
}
   36282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036286 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   36286:	4040      	eors	r0, r0
   36288:	f380 8811 	msr	BASEPRI, r0
   3628c:	f04f 0004 	mov.w	r0, #4
   36290:	df02      	svc	2
}
   36292:	4770      	bx	lr

00036294 <assert_print>:

void assert_print(const char *fmt, ...)
{
   36294:	b40f      	push	{r0, r1, r2, r3}
   36296:	b500      	push	{lr}
   36298:	b083      	sub	sp, #12
   3629a:	a904      	add	r1, sp, #16
   3629c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   362a0:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   362a2:	f7ff fba2 	bl	359ea <vprintk>

	va_end(ap);
}
   362a6:	b003      	add	sp, #12
   362a8:	f85d eb04 	ldr.w	lr, [sp], #4
   362ac:	b004      	add	sp, #16
   362ae:	4770      	bx	lr

000362b0 <free_space>:
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   362b0:	68c3      	ldr	r3, [r0, #12]
   362b2:	6802      	ldr	r2, [r0, #0]
   362b4:	4293      	cmp	r3, r2
   362b6:	d805      	bhi.n	362c4 <free_space+0x14>
	} else if (!buffer->rd_idx) {
   362b8:	b14b      	cbz	r3, 362ce <free_space+0x1e>
	*res = buffer->size - buffer->tmp_wr_idx;
   362ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
   362bc:	1a9b      	subs	r3, r3, r2
   362be:	600b      	str	r3, [r1, #0]
	return true;
   362c0:	2001      	movs	r0, #1
}
   362c2:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   362c4:	1a9b      	subs	r3, r3, r2
   362c6:	3b01      	subs	r3, #1
   362c8:	600b      	str	r3, [r1, #0]
		return false;
   362ca:	2000      	movs	r0, #0
   362cc:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   362ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
   362d0:	1a9b      	subs	r3, r3, r2
   362d2:	3b01      	subs	r3, #1
   362d4:	600b      	str	r3, [r1, #0]
		return false;
   362d6:	2000      	movs	r0, #0
   362d8:	4770      	bx	lr

000362da <get_usage>:
{
   362da:	b510      	push	{r4, lr}
   362dc:	b082      	sub	sp, #8
   362de:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   362e0:	a901      	add	r1, sp, #4
   362e2:	f7ff ffe5 	bl	362b0 <free_space>
   362e6:	b120      	cbz	r0, 362f2 <get_usage+0x18>
		f += (buffer->rd_idx - 1);
   362e8:	68e3      	ldr	r3, [r4, #12]
   362ea:	9a01      	ldr	r2, [sp, #4]
   362ec:	4413      	add	r3, r2
   362ee:	3b01      	subs	r3, #1
   362f0:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   362f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   362f4:	9b01      	ldr	r3, [sp, #4]
   362f6:	1ac0      	subs	r0, r0, r3
}
   362f8:	3801      	subs	r0, #1
   362fa:	b002      	add	sp, #8
   362fc:	bd10      	pop	{r4, pc}

000362fe <max_utilization_update>:
{
   362fe:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   36300:	6903      	ldr	r3, [r0, #16]
   36302:	f013 0f04 	tst.w	r3, #4
   36306:	d100      	bne.n	3630a <max_utilization_update+0xc>
}
   36308:	bd38      	pop	{r3, r4, r5, pc}
   3630a:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   3630c:	6a85      	ldr	r5, [r0, #40]	; 0x28
   3630e:	f7ff ffe4 	bl	362da <get_usage>
   36312:	4285      	cmp	r5, r0
   36314:	d902      	bls.n	3631c <max_utilization_update+0x1e>
   36316:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   36318:	62a0      	str	r0, [r4, #40]	; 0x28
   3631a:	e7f5      	b.n	36308 <max_utilization_update+0xa>
   3631c:	4620      	mov	r0, r4
   3631e:	f7ff ffdc 	bl	362da <get_usage>
   36322:	e7f9      	b.n	36318 <max_utilization_update+0x1a>

00036324 <add_skip_item>:
{
   36324:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
   36326:	2300      	movs	r3, #0
   36328:	f36f 0300 	bfc	r3, #0, #1
   3632c:	f043 0302 	orr.w	r3, r3, #2
   36330:	f361 039f 	bfi	r3, r1, #2, #30
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   36334:	6a02      	ldr	r2, [r0, #32]
   36336:	6804      	ldr	r4, [r0, #0]
   36338:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   3633c:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
   3633e:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   36340:	6902      	ldr	r2, [r0, #16]
   36342:	f012 0201 	ands.w	r2, r2, #1
   36346:	d104      	bne.n	36352 <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
   36348:	6a44      	ldr	r4, [r0, #36]	; 0x24
   3634a:	42a3      	cmp	r3, r4
   3634c:	d304      	bcc.n	36358 <add_skip_item+0x34>
   3634e:	1b1b      	subs	r3, r3, r4
   36350:	e002      	b.n	36358 <add_skip_item+0x34>
		return i & (buffer->size - 1);
   36352:	6a44      	ldr	r4, [r0, #36]	; 0x24
   36354:	3c01      	subs	r4, #1
   36356:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   36358:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   3635a:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
   3635c:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   3635e:	b922      	cbnz	r2, 3636a <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
   36360:	6a43      	ldr	r3, [r0, #36]	; 0x24
   36362:	4299      	cmp	r1, r3
   36364:	d304      	bcc.n	36370 <add_skip_item+0x4c>
   36366:	1ac9      	subs	r1, r1, r3
   36368:	e002      	b.n	36370 <add_skip_item+0x4c>
		return i & (buffer->size - 1);
   3636a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3636c:	3b01      	subs	r3, #1
   3636e:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   36370:	6041      	str	r1, [r0, #4]
}
   36372:	bc10      	pop	{r4}
   36374:	4770      	bx	lr

00036376 <drop_item_locked>:
{
   36376:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3637a:	b083      	sub	sp, #12
   3637c:	4604      	mov	r4, r0
   3637e:	9101      	str	r1, [sp, #4]
   36380:	4615      	mov	r5, r2
   36382:	461e      	mov	r6, r3
	*user_packet = false;
   36384:	2300      	movs	r3, #0
   36386:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   36388:	f8d0 8020 	ldr.w	r8, [r0, #32]
   3638c:	f8d0 900c 	ldr.w	r9, [r0, #12]
   36390:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   36394:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   36398:	f003 0303 	and.w	r3, r3, #3
   3639c:	2b02      	cmp	r3, #2
   3639e:	d012      	beq.n	363c6 <drop_item_locked+0x50>
	return 0;
   363a0:	f04f 0b00 	mov.w	fp, #0
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   363a4:	69e3      	ldr	r3, [r4, #28]
   363a6:	4650      	mov	r0, sl
   363a8:	4798      	blx	r3
   363aa:	4607      	mov	r7, r0
	if (skip_wlen) {
   363ac:	f1bb 0f00 	cmp.w	fp, #0
   363b0:	d152      	bne.n	36458 <drop_item_locked+0xe2>
	} else if (allow_drop) {
   363b2:	2d00      	cmp	r5, #0
   363b4:	d05d      	beq.n	36472 <drop_item_locked+0xfc>
		if (item->hdr.busy) {
   363b6:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
   363ba:	f013 0f02 	tst.w	r3, #2
   363be:	d10a      	bne.n	363d6 <drop_item_locked+0x60>
			*user_packet = true;
   363c0:	2301      	movs	r3, #1
   363c2:	7033      	strb	r3, [r6, #0]
   363c4:	e049      	b.n	3645a <drop_item_locked+0xe4>
		return item->skip.len;
   363c6:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   363ca:	ea5f 0b93 	movs.w	fp, r3, lsr #2
   363ce:	d0e9      	beq.n	363a4 <drop_item_locked+0x2e>
		return item->skip.len;
   363d0:	465f      	mov	r7, fp
		allow_drop = true;
   363d2:	2501      	movs	r5, #1
   363d4:	e041      	b.n	3645a <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
   363d6:	9901      	ldr	r1, [sp, #4]
   363d8:	3101      	adds	r1, #1
   363da:	4620      	mov	r0, r4
   363dc:	f7ff ffa2 	bl	36324 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   363e0:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
   363e2:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   363e4:	6922      	ldr	r2, [r4, #16]
   363e6:	f012 0201 	ands.w	r2, r2, #1
   363ea:	d104      	bne.n	363f6 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
   363ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
   363ee:	428b      	cmp	r3, r1
   363f0:	d304      	bcc.n	363fc <drop_item_locked+0x86>
   363f2:	1a5b      	subs	r3, r3, r1
   363f4:	e002      	b.n	363fc <drop_item_locked+0x86>
		return i & (buffer->size - 1);
   363f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
   363f8:	3901      	subs	r1, #1
   363fa:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   363fc:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   363fe:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
   36400:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   36402:	b922      	cbnz	r2, 3640e <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
   36404:	6a61      	ldr	r1, [r4, #36]	; 0x24
   36406:	428b      	cmp	r3, r1
   36408:	d304      	bcc.n	36414 <drop_item_locked+0x9e>
   3640a:	1a5b      	subs	r3, r3, r1
   3640c:	e002      	b.n	36414 <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
   3640e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   36410:	3901      	subs	r1, #1
   36412:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   36414:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   36416:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   36418:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   3641a:	b922      	cbnz	r2, 36426 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
   3641c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3641e:	4293      	cmp	r3, r2
   36420:	d304      	bcc.n	3642c <drop_item_locked+0xb6>
   36422:	1a9b      	subs	r3, r3, r2
   36424:	e002      	b.n	3642c <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
   36426:	6a62      	ldr	r2, [r4, #36]	; 0x24
   36428:	3a01      	subs	r2, #1
   3642a:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   3642c:	6a21      	ldr	r1, [r4, #32]
   3642e:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   36432:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
   36436:	f002 0203 	and.w	r2, r2, #3
   3643a:	2a02      	cmp	r2, #2
   3643c:	d006      	beq.n	3644c <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
   3643e:	69e3      	ldr	r3, [r4, #28]
   36440:	4650      	mov	r0, sl
   36442:	4798      	blx	r3
   36444:	4407      	add	r7, r0
				*user_packet = true;
   36446:	2301      	movs	r3, #1
   36448:	7033      	strb	r3, [r6, #0]
   3644a:	e006      	b.n	3645a <drop_item_locked+0xe4>
		return item->skip.len;
   3644c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
   36450:	089b      	lsrs	r3, r3, #2
   36452:	d0f4      	beq.n	3643e <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
   36454:	441f      	add	r7, r3
   36456:	e000      	b.n	3645a <drop_item_locked+0xe4>
		allow_drop = true;
   36458:	2501      	movs	r5, #1
	if (allow_drop) {
   3645a:	b195      	cbz	r5, 36482 <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   3645c:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
   3645e:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   36460:	6922      	ldr	r2, [r4, #16]
   36462:	f012 0f01 	tst.w	r2, #1
   36466:	d107      	bne.n	36478 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
   36468:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3646a:	4293      	cmp	r3, r2
   3646c:	d307      	bcc.n	3647e <drop_item_locked+0x108>
   3646e:	1a9b      	subs	r3, r3, r2
   36470:	e005      	b.n	3647e <drop_item_locked+0x108>
		item = NULL;
   36472:	f04f 0a00 	mov.w	sl, #0
   36476:	e7f0      	b.n	3645a <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
   36478:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3647a:	3a01      	subs	r2, #1
   3647c:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   3647e:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
   36480:	60a3      	str	r3, [r4, #8]
}
   36482:	4650      	mov	r0, sl
   36484:	b003      	add	sp, #12
   36486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003648a <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   3648a:	6883      	ldr	r3, [r0, #8]
   3648c:	6842      	ldr	r2, [r0, #4]
   3648e:	4293      	cmp	r3, r2
   36490:	d905      	bls.n	3649e <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
   36492:	6a40      	ldr	r0, [r0, #36]	; 0x24
   36494:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   36496:	3800      	subs	r0, #0
   36498:	bf18      	it	ne
   3649a:	2001      	movne	r0, #1
   3649c:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   3649e:	1ad0      	subs	r0, r2, r3
		return false;
   364a0:	e7f9      	b.n	36496 <mpsc_pbuf_is_pending+0xc>

000364a2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 40);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_SECURITY_ENABLED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   364a2:	4770      	bx	lr

000364a4 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
   364a4:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
   364a6:	f7df fad3 	bl	15a50 <nrfx_coredep_delay_us>
}
   364aa:	bd08      	pop	{r3, pc}

000364ac <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   364ac:	2301      	movs	r3, #1
   364ae:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   364b2:	f3bf 8f4f 	dsb	sy
        __WFE();
   364b6:	bf20      	wfe
    while (true)
   364b8:	e7fd      	b.n	364b6 <nrf_regulators_system_off+0xa>

000364ba <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   364ba:	2806      	cmp	r0, #6
   364bc:	d000      	beq.n	364c0 <pm_state_set+0x6>
   364be:	4770      	bx	lr
{
   364c0:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
   364c2:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   364c6:	f7ff fff1 	bl	364ac <nrf_regulators_system_off>

000364ca <pm_state_exit_post_ops>:
   364ca:	2300      	movs	r3, #0
   364cc:	f383 8811 	msr	BASEPRI, r3
   364d0:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   364d4:	4770      	bx	lr

000364d6 <mbox_register_callback>:
 * @retval 0 On success, negative value on error.
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
   364d6:	b510      	push	{r4, lr}
   364d8:	4684      	mov	ip, r0
   364da:	4613      	mov	r3, r2
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   364dc:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   364de:	6882      	ldr	r2, [r0, #8]

	if (api->register_callback == NULL) {
   364e0:	6854      	ldr	r4, [r2, #4]
   364e2:	b124      	cbz	r4, 364ee <mbox_register_callback+0x18>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
   364e4:	460a      	mov	r2, r1
   364e6:	f8dc 1004 	ldr.w	r1, [ip, #4]
   364ea:	47a0      	blx	r4
}
   364ec:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   364ee:	f06f 0057 	mvn.w	r0, #87	; 0x57
   364f2:	e7fb      	b.n	364ec <mbox_register_callback+0x16>

000364f4 <z_impl_mbox_set_enabled>:
 * @retval -EINVAL If it isn't an inbound channel.
 */
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
   364f4:	b510      	push	{r4, lr}
   364f6:	4603      	mov	r3, r0
   364f8:	460a      	mov	r2, r1
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
   364fa:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   364fc:	6881      	ldr	r1, [r0, #8]

	if (api->set_enabled == NULL) {
   364fe:	690c      	ldr	r4, [r1, #16]
   36500:	b114      	cbz	r4, 36508 <z_impl_mbox_set_enabled+0x14>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
   36502:	6859      	ldr	r1, [r3, #4]
   36504:	47a0      	blx	r4
}
   36506:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   36508:	f06f 0057 	mvn.w	r0, #87	; 0x57
   3650c:	e7fb      	b.n	36506 <z_impl_mbox_set_enabled+0x12>

0003650e <rtc_cb>:
{
   3650e:	b510      	push	{r4, lr}
   36510:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
   36512:	2100      	movs	r1, #0
   36514:	4620      	mov	r0, r4
   36516:	f7df fc27 	bl	15d68 <ppi_rtc_to_ipc>
		free_resources(channels);
   3651a:	4620      	mov	r0, r4
   3651c:	f7df fbfc 	bl	15d18 <free_resources>
}
   36520:	bd10      	pop	{r4, pc}

00036522 <soc_secure_mem_read>:
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   36522:	b500      	push	{lr}
   36524:	b083      	sub	sp, #12
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   36526:	ab01      	add	r3, sp, #4
   36528:	f006 ff51 	bl	3d3ce <tfm_platform_mem_read>

	switch (status) {
   3652c:	2802      	cmp	r0, #2
   3652e:	d00e      	beq.n	3654e <soc_secure_mem_read+0x2c>
   36530:	2803      	cmp	r0, #3
   36532:	d00f      	beq.n	36554 <soc_secure_mem_read+0x32>
   36534:	b120      	cbz	r0, 36540 <soc_secure_mem_read+0x1e>
		if (result == 0) {
			return 0;
		}
		/* Fallthrough */
	default:
		return -EPERM;
   36536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
}
   3653a:	b003      	add	sp, #12
   3653c:	f85d fb04 	ldr.w	pc, [sp], #4
		if (result == 0) {
   36540:	9b01      	ldr	r3, [sp, #4]
   36542:	b90b      	cbnz	r3, 36548 <soc_secure_mem_read+0x26>
			return 0;
   36544:	2000      	movs	r0, #0
   36546:	e7f8      	b.n	3653a <soc_secure_mem_read+0x18>
		return -EPERM;
   36548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3654c:	e7f5      	b.n	3653a <soc_secure_mem_read+0x18>
	switch (status) {
   3654e:	f06f 0015 	mvn.w	r0, #21
   36552:	e7f2      	b.n	3653a <soc_secure_mem_read+0x18>
		return -ENOTSUP;
   36554:	f06f 0085 	mvn.w	r0, #133	; 0x85
   36558:	e7ef      	b.n	3653a <soc_secure_mem_read+0x18>

0003655a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   3655a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   3655c:	f013 0f04 	tst.w	r3, #4
   36560:	d001      	beq.n	36566 <log_msg_generic_get_wlen+0xc>
	return 0;
   36562:	2000      	movs	r0, #0
}
   36564:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
   36566:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   36568:	f3c3 2049 	ubfx	r0, r3, #9, #10
   3656c:	f3c3 43cb 	ubfx	r3, r3, #19, #12
   36570:	4418      	add	r0, r3
   36572:	3017      	adds	r0, #23
   36574:	f020 0007 	bic.w	r0, r0, #7
   36578:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   3657a:	4770      	bx	lr

0003657c <dummy_timestamp>:
}
   3657c:	2000      	movs	r0, #0
   3657e:	4770      	bx	lr

00036580 <msg_filter_check>:
}
   36580:	2001      	movs	r0, #1
   36582:	4770      	bx	lr

00036584 <default_get_timestamp>:
{
   36584:	b508      	push	{r3, lr}
   36586:	f006 fe52 	bl	3d22e <sys_clock_cycle_get_32>
}
   3658a:	bd08      	pop	{r3, pc}

0003658c <k_msleep>:
{
   3658c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   3658e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   36592:	17c1      	asrs	r1, r0, #31
   36594:	03c9      	lsls	r1, r1, #15
   36596:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   3659a:	03c0      	lsls	r0, r0, #15
   3659c:	f240 33e7 	movw	r3, #999	; 0x3e7
   365a0:	18c0      	adds	r0, r0, r3
   365a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   365a6:	f04f 0300 	mov.w	r3, #0
   365aa:	f141 0100 	adc.w	r1, r1, #0
   365ae:	f7d9 fdd3 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   365b2:	f7fd fd0f 	bl	33fd4 <z_impl_k_sleep>
}
   365b6:	bd08      	pop	{r3, pc}

000365b8 <msg_alloc>:
{
   365b8:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   365ba:	2200      	movs	r2, #0
   365bc:	2300      	movs	r3, #0
   365be:	f7de ffc3 	bl	15548 <mpsc_pbuf_alloc>
}
   365c2:	bd08      	pop	{r3, pc}

000365c4 <msg_free>:
{
   365c4:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
   365c6:	f7df f9cb 	bl	15960 <mpsc_pbuf_free>
}
   365ca:	bd08      	pop	{r3, pc}

000365cc <msg_pending>:
{
   365cc:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
   365ce:	f7ff ff5c 	bl	3648a <mpsc_pbuf_is_pending>
}
   365d2:	bd08      	pop	{r3, pc}

000365d4 <z_log_vprintk>:
{
   365d4:	b500      	push	{lr}
   365d6:	b085      	sub	sp, #20
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   365d8:	9103      	str	r1, [sp, #12]
   365da:	9002      	str	r0, [sp, #8]
   365dc:	2000      	movs	r0, #0
   365de:	9001      	str	r0, [sp, #4]
   365e0:	9000      	str	r0, [sp, #0]
   365e2:	4603      	mov	r3, r0
   365e4:	4602      	mov	r2, r0
   365e6:	4601      	mov	r1, r0
   365e8:	f7e0 fa0c 	bl	16a04 <z_impl_z_log_msg_runtime_vcreate>
}
   365ec:	b005      	add	sp, #20
   365ee:	f85d fb04 	ldr.w	pc, [sp], #4

000365f2 <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
   365f2:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   365f4:	2001      	movs	r0, #1
   365f6:	f7df ff11 	bl	1641c <z_log_dropped>
}
   365fa:	bd08      	pop	{r3, pc}

000365fc <z_log_msg_claim>:
{
   365fc:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
   365fe:	f7df ff9b 	bl	16538 <z_log_msg_local_claim>
}
   36602:	bd08      	pop	{r3, pc}

00036604 <msg_commit>:
{
   36604:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
   36606:	f7df f899 	bl	1573c <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
   3660a:	f7e0 f84b 	bl	166a4 <z_log_msg_post_finalize>
}
   3660e:	bd08      	pop	{r3, pc}

00036610 <z_log_get_tag>:
}
   36610:	2000      	movs	r0, #0
   36612:	4770      	bx	lr

00036614 <z_cbprintf_cpy>:
{
   36614:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   36616:	6853      	ldr	r3, [r2, #4]
   36618:	6896      	ldr	r6, [r2, #8]
   3661a:	1b9b      	subs	r3, r3, r6
   3661c:	428b      	cmp	r3, r1
   3661e:	d30c      	bcc.n	3663a <z_cbprintf_cpy+0x26>
   36620:	460c      	mov	r4, r1
   36622:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   36624:	6813      	ldr	r3, [r2, #0]
   36626:	460a      	mov	r2, r1
   36628:	4601      	mov	r1, r0
   3662a:	1998      	adds	r0, r3, r6
   3662c:	f001 fee5 	bl	383fa <memcpy>
	desc->off += len;
   36630:	68ab      	ldr	r3, [r5, #8]
   36632:	4423      	add	r3, r4
   36634:	60ab      	str	r3, [r5, #8]
	return len;
   36636:	4620      	mov	r0, r4
}
   36638:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   3663a:	f06f 001b 	mvn.w	r0, #27
   3663e:	e7fb      	b.n	36638 <z_cbprintf_cpy+0x24>

00036640 <z_log_msg_finalize>:
{
   36640:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   36642:	b190      	cbz	r0, 3666a <z_log_msg_finalize+0x2a>
   36644:	460e      	mov	r6, r1
   36646:	4614      	mov	r4, r2
   36648:	4619      	mov	r1, r3
   3664a:	4605      	mov	r5, r0
	if (data) {
   3664c:	b13b      	cbz	r3, 3665e <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
   3664e:	3010      	adds	r0, #16
   36650:	f3c2 2349 	ubfx	r3, r2, #9, #10
		memcpy(d, data, desc.data_len);
   36654:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   36658:	4418      	add	r0, r3
   3665a:	f001 fece 	bl	383fa <memcpy>
	msg->hdr.desc = desc;
   3665e:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   36660:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
   36662:	4628      	mov	r0, r5
   36664:	f7e0 f896 	bl	16794 <z_log_msg_commit>
}
   36668:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
   3666a:	f7df fed7 	bl	1641c <z_log_dropped>
		return;
   3666e:	e7fb      	b.n	36668 <z_log_msg_finalize+0x28>

00036670 <buffer_write>:
{
   36670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36672:	4607      	mov	r7, r0
   36674:	460d      	mov	r5, r1
   36676:	4614      	mov	r4, r2
   36678:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   3667a:	4632      	mov	r2, r6
   3667c:	4621      	mov	r1, r4
   3667e:	4628      	mov	r0, r5
   36680:	47b8      	blx	r7
		buf += processed;
   36682:	4405      	add	r5, r0
	} while (len != 0);
   36684:	1a24      	subs	r4, r4, r0
   36686:	d1f8      	bne.n	3667a <buffer_write+0xa>
}
   36688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003668a <cbvprintf>:
{
   3668a:	b510      	push	{r4, lr}
   3668c:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   3668e:	2400      	movs	r4, #0
   36690:	9400      	str	r4, [sp, #0]
   36692:	f7de fc59 	bl	14f48 <z_cbvprintf_impl>
}
   36696:	b002      	add	sp, #8
   36698:	bd10      	pop	{r4, pc}

0003669a <color_prefix>:
{
   3669a:	b508      	push	{r3, lr}
   3669c:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   3669e:	2201      	movs	r2, #1
   366a0:	f7e0 fa74 	bl	16b8c <color_print>
}
   366a4:	bd08      	pop	{r3, pc}

000366a6 <color_postfix>:
{
   366a6:	b508      	push	{r3, lr}
   366a8:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   366aa:	2200      	movs	r2, #0
   366ac:	f7e0 fa6e 	bl	16b8c <color_print>
}
   366b0:	bd08      	pop	{r3, pc}

000366b2 <postfix_print>:
{
   366b2:	b538      	push	{r3, r4, r5, lr}
   366b4:	4605      	mov	r5, r0
   366b6:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   366b8:	f001 0101 	and.w	r1, r1, #1
   366bc:	f7ff fff3 	bl	366a6 <color_postfix>
	newline_print(output, flags);
   366c0:	4621      	mov	r1, r4
   366c2:	4628      	mov	r0, r5
   366c4:	f7e0 fae8 	bl	16c98 <newline_print>
}
   366c8:	bd38      	pop	{r3, r4, r5, pc}

000366ca <log_msg_hexdump>:
{
   366ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   366ce:	b083      	sub	sp, #12
   366d0:	4680      	mov	r8, r0
   366d2:	460e      	mov	r6, r1
   366d4:	4615      	mov	r5, r2
   366d6:	461f      	mov	r7, r3
   366d8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   366dc:	462c      	mov	r4, r5
   366de:	2d10      	cmp	r5, #16
   366e0:	bf28      	it	cs
   366e2:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   366e4:	f8cd 9000 	str.w	r9, [sp]
   366e8:	463b      	mov	r3, r7
   366ea:	4622      	mov	r2, r4
   366ec:	4631      	mov	r1, r6
   366ee:	4640      	mov	r0, r8
   366f0:	f7e0 fae6 	bl	16cc0 <hexdump_line_print>
		data += length;
   366f4:	4426      	add	r6, r4
	} while (len);
   366f6:	1b2d      	subs	r5, r5, r4
   366f8:	d1f0      	bne.n	366dc <log_msg_hexdump+0x12>
}
   366fa:	b003      	add	sp, #12
   366fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00036700 <log_output_flush>:
{
   36700:	b510      	push	{r4, lr}
   36702:	4604      	mov	r4, r0
		     output->control_block->offset,
   36704:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   36706:	6853      	ldr	r3, [r2, #4]
   36708:	6812      	ldr	r2, [r2, #0]
   3670a:	6881      	ldr	r1, [r0, #8]
   3670c:	6800      	ldr	r0, [r0, #0]
   3670e:	f7ff ffaf 	bl	36670 <buffer_write>
	output->control_block->offset = 0;
   36712:	6863      	ldr	r3, [r4, #4]
   36714:	2200      	movs	r2, #0
   36716:	601a      	str	r2, [r3, #0]
}
   36718:	bd10      	pop	{r4, pc}

0003671a <cr_out_func>:
{
   3671a:	b538      	push	{r3, r4, r5, lr}
   3671c:	4604      	mov	r4, r0
   3671e:	460d      	mov	r5, r1
	if (c == '\n') {
   36720:	280a      	cmp	r0, #10
   36722:	d005      	beq.n	36730 <cr_out_func+0x16>
	out_func(c, ctx);
   36724:	4629      	mov	r1, r5
   36726:	4620      	mov	r0, r4
   36728:	f7e0 fb28 	bl	16d7c <out_func>
}
   3672c:	2000      	movs	r0, #0
   3672e:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   36730:	200d      	movs	r0, #13
   36732:	f7e0 fb23 	bl	16d7c <out_func>
   36736:	e7f5      	b.n	36724 <cr_out_func+0xa>

00036738 <k_msleep>:
{
   36738:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   3673a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3673e:	17c1      	asrs	r1, r0, #31
   36740:	03c9      	lsls	r1, r1, #15
   36742:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   36746:	03c0      	lsls	r0, r0, #15
   36748:	f240 33e7 	movw	r3, #999	; 0x3e7
   3674c:	18c0      	adds	r0, r0, r3
   3674e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36752:	f04f 0300 	mov.w	r3, #0
   36756:	f141 0100 	adc.w	r1, r1, #0
   3675a:	f7d9 fcfd 	bl	10158 <__aeabi_uldivmod>
   3675e:	f7fd fc39 	bl	33fd4 <z_impl_k_sleep>
}
   36762:	bd08      	pop	{r3, pc}

00036764 <nvs_flash_rd>:
{
   36764:	b510      	push	{r4, lr}
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   36766:	8984      	ldrh	r4, [r0, #12]
   36768:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   3676c:	f8d0 e000 	ldr.w	lr, [r0]
   36770:	fb0c ec04 	mla	ip, ip, r4, lr
	offset += addr & ADDR_OFFS_MASK;
   36774:	fa1c f181 	uxtah	r1, ip, r1
	rc = flash_read(fs->flash_device, offset, data, len);
   36778:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   3677a:	6884      	ldr	r4, [r0, #8]
	return api->read(dev, offset, data, len);
   3677c:	6824      	ldr	r4, [r4, #0]
   3677e:	47a0      	blx	r4
}
   36780:	bd10      	pop	{r4, pc}

00036782 <nvs_flash_ate_rd>:
{
   36782:	b508      	push	{r3, lr}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   36784:	2308      	movs	r3, #8
   36786:	f7ff ffed 	bl	36764 <nvs_flash_rd>
}
   3678a:	bd08      	pop	{r3, pc}

0003678c <nvs_ate_cmp_const>:
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   3678c:	2300      	movs	r3, #0
   3678e:	2b07      	cmp	r3, #7
   36790:	d804      	bhi.n	3679c <nvs_ate_cmp_const+0x10>
		if (data8[i] != value) {
   36792:	5cc2      	ldrb	r2, [r0, r3]
   36794:	428a      	cmp	r2, r1
   36796:	d103      	bne.n	367a0 <nvs_ate_cmp_const+0x14>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   36798:	3301      	adds	r3, #1
   3679a:	e7f8      	b.n	3678e <nvs_ate_cmp_const+0x2>
	return 0;
   3679c:	2000      	movs	r0, #0
   3679e:	4770      	bx	lr
			return 1;
   367a0:	2001      	movs	r0, #1
}
   367a2:	4770      	bx	lr

000367a4 <nvs_sector_advance>:
	*addr += (1 << ADDR_SECT_SHIFT);
   367a4:	680b      	ldr	r3, [r1, #0]
   367a6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
   367aa:	600b      	str	r3, [r1, #0]
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   367ac:	89c2      	ldrh	r2, [r0, #14]
   367ae:	ebb2 4f13 	cmp.w	r2, r3, lsr #16
   367b2:	d000      	beq.n	367b6 <nvs_sector_advance+0x12>
}
   367b4:	4770      	bx	lr
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   367b6:	eba3 4302 	sub.w	r3, r3, r2, lsl #16
   367ba:	600b      	str	r3, [r1, #0]
}
   367bc:	e7fa      	b.n	367b4 <nvs_sector_advance+0x10>

000367be <nvs_flash_block_cmp>:
{
   367be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   367c2:	b089      	sub	sp, #36	; 0x24
   367c4:	4681      	mov	r9, r0
   367c6:	460e      	mov	r6, r1
   367c8:	4617      	mov	r7, r2
   367ca:	461d      	mov	r5, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   367cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   367ce:	681b      	ldr	r3, [r3, #0]
   367d0:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   367d4:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   367d8:	e002      	b.n	367e0 <nvs_flash_block_cmp+0x22>
		len -= bytes_to_cmp;
   367da:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_cmp;
   367dc:	4426      	add	r6, r4
		data8 += bytes_to_cmp;
   367de:	4427      	add	r7, r4
	while (len) {
   367e0:	b1a5      	cbz	r5, 3680c <nvs_flash_block_cmp+0x4e>
		bytes_to_cmp = MIN(block_size, len);
   367e2:	462c      	mov	r4, r5
   367e4:	4545      	cmp	r5, r8
   367e6:	bf28      	it	cs
   367e8:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   367ea:	4623      	mov	r3, r4
   367ec:	466a      	mov	r2, sp
   367ee:	4631      	mov	r1, r6
   367f0:	4648      	mov	r0, r9
   367f2:	f7ff ffb7 	bl	36764 <nvs_flash_rd>
		if (rc) {
   367f6:	4603      	mov	r3, r0
   367f8:	b948      	cbnz	r0, 3680e <nvs_flash_block_cmp+0x50>
		rc = memcmp(data8, buf, bytes_to_cmp);
   367fa:	4622      	mov	r2, r4
   367fc:	4669      	mov	r1, sp
   367fe:	4638      	mov	r0, r7
   36800:	f001 fdd6 	bl	383b0 <memcmp>
		if (rc) {
   36804:	2800      	cmp	r0, #0
   36806:	d0e8      	beq.n	367da <nvs_flash_block_cmp+0x1c>
			return 1;
   36808:	2301      	movs	r3, #1
   3680a:	e000      	b.n	3680e <nvs_flash_block_cmp+0x50>
	return 0;
   3680c:	2300      	movs	r3, #0
}
   3680e:	4618      	mov	r0, r3
   36810:	b009      	add	sp, #36	; 0x24
   36812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00036816 <nvs_flash_cmp_const>:
{
   36816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3681a:	b088      	sub	sp, #32
   3681c:	4680      	mov	r8, r0
   3681e:	460e      	mov	r6, r1
   36820:	4611      	mov	r1, r2
   36822:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   36824:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   36826:	681f      	ldr	r7, [r3, #0]
   36828:	427f      	negs	r7, r7
	block_size =
   3682a:	f007 0720 	and.w	r7, r7, #32
	(void)memset(cmp, value, block_size);
   3682e:	463a      	mov	r2, r7
   36830:	4668      	mov	r0, sp
   36832:	f001 fe11 	bl	38458 <memset>
	while (len) {
   36836:	e001      	b.n	3683c <nvs_flash_cmp_const+0x26>
		len -= bytes_to_cmp;
   36838:	1b64      	subs	r4, r4, r5
		addr += bytes_to_cmp;
   3683a:	442e      	add	r6, r5
	while (len) {
   3683c:	b16c      	cbz	r4, 3685a <nvs_flash_cmp_const+0x44>
		bytes_to_cmp = MIN(block_size, len);
   3683e:	4625      	mov	r5, r4
   36840:	42bc      	cmp	r4, r7
   36842:	bf28      	it	cs
   36844:	463d      	movcs	r5, r7
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   36846:	462b      	mov	r3, r5
   36848:	466a      	mov	r2, sp
   3684a:	4631      	mov	r1, r6
   3684c:	4640      	mov	r0, r8
   3684e:	f7ff ffb6 	bl	367be <nvs_flash_block_cmp>
		if (rc) {
   36852:	4603      	mov	r3, r0
   36854:	2800      	cmp	r0, #0
   36856:	d0ef      	beq.n	36838 <nvs_flash_cmp_const+0x22>
   36858:	e000      	b.n	3685c <nvs_flash_cmp_const+0x46>
	return 0;
   3685a:	2300      	movs	r3, #0
}
   3685c:	4618      	mov	r0, r3
   3685e:	b008      	add	sp, #32
   36860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036864 <nvs_flash_erase_sector>:
{
   36864:	b570      	push	{r4, r5, r6, lr}
   36866:	4604      	mov	r4, r0
	addr &= ADDR_SECT_MASK;
   36868:	0c0d      	lsrs	r5, r1, #16
	offset = fs->offset;
   3686a:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   3686c:	8982      	ldrh	r2, [r0, #12]
   3686e:	0c09      	lsrs	r1, r1, #16
   36870:	fb01 3102 	mla	r1, r1, r2, r3
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   36874:	6a80      	ldr	r0, [r0, #40]	; 0x28
	const struct flash_driver_api *api =
   36876:	6883      	ldr	r3, [r0, #8]
	rc = api->erase(dev, offset, size);
   36878:	689b      	ldr	r3, [r3, #8]
   3687a:	4798      	blx	r3
	if (rc) {
   3687c:	4606      	mov	r6, r0
   3687e:	b108      	cbz	r0, 36884 <nvs_flash_erase_sector+0x20>
}
   36880:	4630      	mov	r0, r6
   36882:	bd70      	pop	{r4, r5, r6, pc}
   36884:	042d      	lsls	r5, r5, #16
	if (nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   36886:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   36888:	89a3      	ldrh	r3, [r4, #12]
   3688a:	7912      	ldrb	r2, [r2, #4]
   3688c:	4629      	mov	r1, r5
   3688e:	4620      	mov	r0, r4
   36890:	f7ff ffc1 	bl	36816 <nvs_flash_cmp_const>
   36894:	2800      	cmp	r0, #0
   36896:	d0f3      	beq.n	36880 <nvs_flash_erase_sector+0x1c>
		rc = -ENXIO;
   36898:	f06f 0605 	mvn.w	r6, #5
   3689c:	e7f0      	b.n	36880 <nvs_flash_erase_sector+0x1c>

0003689e <nvs_ate_crc8_check>:
{
   3689e:	b510      	push	{r4, lr}
   368a0:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   368a2:	2207      	movs	r2, #7
   368a4:	4601      	mov	r1, r0
   368a6:	20ff      	movs	r0, #255	; 0xff
   368a8:	f7de face 	bl	14e48 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   368ac:	79e3      	ldrb	r3, [r4, #7]
   368ae:	4283      	cmp	r3, r0
   368b0:	d001      	beq.n	368b6 <nvs_ate_crc8_check+0x18>
	return 1;
   368b2:	2001      	movs	r0, #1
}
   368b4:	bd10      	pop	{r4, pc}
		return 0;
   368b6:	2000      	movs	r0, #0
   368b8:	e7fc      	b.n	368b4 <nvs_ate_crc8_check+0x16>

000368ba <nvs_ate_valid>:
{
   368ba:	b570      	push	{r4, r5, r6, lr}
   368bc:	4604      	mov	r4, r0
   368be:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   368c0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   368c2:	681b      	ldr	r3, [r3, #0]
   368c4:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   368c6:	2a01      	cmp	r2, #1
   368c8:	d90d      	bls.n	368e6 <nvs_ate_valid+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   368ca:	1dd6      	adds	r6, r2, #7
   368cc:	4253      	negs	r3, r2
   368ce:	401e      	ands	r6, r3
	if ((nvs_ate_crc8_check(entry)) ||
   368d0:	4628      	mov	r0, r5
   368d2:	f7ff ffe4 	bl	3689e <nvs_ate_crc8_check>
   368d6:	b940      	cbnz	r0, 368ea <nvs_ate_valid+0x30>
	    (entry->offset >= (fs->sector_size - ate_size))) {
   368d8:	886a      	ldrh	r2, [r5, #2]
   368da:	89a3      	ldrh	r3, [r4, #12]
   368dc:	1b9b      	subs	r3, r3, r6
	if ((nvs_ate_crc8_check(entry)) ||
   368de:	429a      	cmp	r2, r3
   368e0:	d205      	bcs.n	368ee <nvs_ate_valid+0x34>
	return 1;
   368e2:	2001      	movs	r0, #1
}
   368e4:	bd70      	pop	{r4, r5, r6, pc}
		return len;
   368e6:	2608      	movs	r6, #8
   368e8:	e7f2      	b.n	368d0 <nvs_ate_valid+0x16>
		return 0;
   368ea:	2000      	movs	r0, #0
   368ec:	e7fa      	b.n	368e4 <nvs_ate_valid+0x2a>
   368ee:	2000      	movs	r0, #0
   368f0:	e7f8      	b.n	368e4 <nvs_ate_valid+0x2a>

000368f2 <nvs_recover_last_ate>:
{
   368f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   368f6:	b082      	sub	sp, #8
   368f8:	4606      	mov	r6, r0
   368fa:	4688      	mov	r8, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   368fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   368fe:	681f      	ldr	r7, [r3, #0]
   36900:	b2fb      	uxtb	r3, r7
	if (write_block_size <= 1U) {
   36902:	2b01      	cmp	r3, #1
   36904:	d90b      	bls.n	3691e <nvs_recover_last_ate+0x2c>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   36906:	461f      	mov	r7, r3
   36908:	3307      	adds	r3, #7
   3690a:	427f      	negs	r7, r7
   3690c:	401f      	ands	r7, r3
	*addr -= ate_size;
   3690e:	f8d8 4000 	ldr.w	r4, [r8]
   36912:	1be4      	subs	r4, r4, r7
   36914:	f8c8 4000 	str.w	r4, [r8]
	data_end_addr = *addr & ADDR_SECT_MASK;
   36918:	0c25      	lsrs	r5, r4, #16
   3691a:	042d      	lsls	r5, r5, #16
	while (ate_end_addr > data_end_addr) {
   3691c:	e002      	b.n	36924 <nvs_recover_last_ate+0x32>
		return len;
   3691e:	2708      	movs	r7, #8
   36920:	e7f5      	b.n	3690e <nvs_recover_last_ate+0x1c>
		ate_end_addr -= ate_size;
   36922:	1be4      	subs	r4, r4, r7
	while (ate_end_addr > data_end_addr) {
   36924:	42ac      	cmp	r4, r5
   36926:	d917      	bls.n	36958 <nvs_recover_last_ate+0x66>
		rc = nvs_flash_ate_rd(fs, ate_end_addr, &end_ate);
   36928:	466a      	mov	r2, sp
   3692a:	4621      	mov	r1, r4
   3692c:	4630      	mov	r0, r6
   3692e:	f7ff ff28 	bl	36782 <nvs_flash_ate_rd>
		if (rc) {
   36932:	4603      	mov	r3, r0
   36934:	b988      	cbnz	r0, 3695a <nvs_recover_last_ate+0x68>
		if (nvs_ate_valid(fs, &end_ate)) {
   36936:	4669      	mov	r1, sp
   36938:	4630      	mov	r0, r6
   3693a:	f7ff ffbe 	bl	368ba <nvs_ate_valid>
   3693e:	2800      	cmp	r0, #0
   36940:	d0ef      	beq.n	36922 <nvs_recover_last_ate+0x30>
			data_end_addr &= ADDR_SECT_MASK;
   36942:	0c2d      	lsrs	r5, r5, #16
   36944:	042d      	lsls	r5, r5, #16
			data_end_addr += end_ate.offset + end_ate.len;
   36946:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   3694a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   3694e:	4413      	add	r3, r2
   36950:	441d      	add	r5, r3
			*addr = ate_end_addr;
   36952:	f8c8 4000 	str.w	r4, [r8]
   36956:	e7e4      	b.n	36922 <nvs_recover_last_ate+0x30>
	return 0;
   36958:	2300      	movs	r3, #0
}
   3695a:	4618      	mov	r0, r3
   3695c:	b002      	add	sp, #8
   3695e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036962 <nvs_close_ate_valid>:
{
   36962:	b538      	push	{r3, r4, r5, lr}
   36964:	4605      	mov	r5, r0
   36966:	460c      	mov	r4, r1
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   36968:	f7ff ffa7 	bl	368ba <nvs_ate_valid>
   3696c:	b1e0      	cbz	r0, 369a8 <nvs_close_ate_valid+0x46>
   3696e:	88a3      	ldrh	r3, [r4, #4]
   36970:	b9cb      	cbnz	r3, 369a6 <nvs_close_ate_valid+0x44>
	    (entry->id != 0xFFFF)) {
   36972:	8822      	ldrh	r2, [r4, #0]
	if ((!nvs_ate_valid(fs, entry)) || (entry->len != 0U) ||
   36974:	f64f 73ff 	movw	r3, #65535	; 0xffff
   36978:	429a      	cmp	r2, r3
   3697a:	d116      	bne.n	369aa <nvs_close_ate_valid+0x48>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   3697c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   3697e:	681b      	ldr	r3, [r3, #0]
   36980:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   36982:	2a01      	cmp	r2, #1
   36984:	d90d      	bls.n	369a2 <nvs_close_ate_valid+0x40>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   36986:	4613      	mov	r3, r2
   36988:	3207      	adds	r2, #7
   3698a:	425b      	negs	r3, r3
   3698c:	401a      	ands	r2, r3
	if ((fs->sector_size - entry->offset) % ate_size) {
   3698e:	89ab      	ldrh	r3, [r5, #12]
   36990:	8861      	ldrh	r1, [r4, #2]
   36992:	1a5b      	subs	r3, r3, r1
   36994:	fbb3 f1f2 	udiv	r1, r3, r2
   36998:	fb02 3311 	mls	r3, r2, r1, r3
   3699c:	b93b      	cbnz	r3, 369ae <nvs_close_ate_valid+0x4c>
	return 1;
   3699e:	2001      	movs	r0, #1
   369a0:	e002      	b.n	369a8 <nvs_close_ate_valid+0x46>
		return len;
   369a2:	2208      	movs	r2, #8
   369a4:	e7f3      	b.n	3698e <nvs_close_ate_valid+0x2c>
		return 0;
   369a6:	2000      	movs	r0, #0
}
   369a8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   369aa:	2000      	movs	r0, #0
   369ac:	e7fc      	b.n	369a8 <nvs_close_ate_valid+0x46>
		return 0;
   369ae:	2000      	movs	r0, #0
   369b0:	e7fa      	b.n	369a8 <nvs_close_ate_valid+0x46>

000369b2 <nvs_prev_ate>:
{
   369b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   369b4:	b083      	sub	sp, #12
   369b6:	4604      	mov	r4, r0
   369b8:	460d      	mov	r5, r1
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   369ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   369bc:	681b      	ldr	r3, [r3, #0]
   369be:	b2d9      	uxtb	r1, r3
	if (write_block_size <= 1U) {
   369c0:	2901      	cmp	r1, #1
   369c2:	d92a      	bls.n	36a1a <nvs_prev_ate+0x68>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   369c4:	1dce      	adds	r6, r1, #7
   369c6:	424b      	negs	r3, r1
   369c8:	401e      	ands	r6, r3
	rc = nvs_flash_ate_rd(fs, *addr, ate);
   369ca:	6829      	ldr	r1, [r5, #0]
   369cc:	4620      	mov	r0, r4
   369ce:	f7ff fed8 	bl	36782 <nvs_flash_ate_rd>
	if (rc) {
   369d2:	4607      	mov	r7, r0
   369d4:	b9f0      	cbnz	r0, 36a14 <nvs_prev_ate+0x62>
	*addr += ate_size;
   369d6:	682b      	ldr	r3, [r5, #0]
   369d8:	4433      	add	r3, r6
   369da:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   369dc:	b299      	uxth	r1, r3
   369de:	89a2      	ldrh	r2, [r4, #12]
   369e0:	1b92      	subs	r2, r2, r6
   369e2:	4291      	cmp	r1, r2
   369e4:	d116      	bne.n	36a14 <nvs_prev_ate+0x62>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   369e6:	0c1a      	lsrs	r2, r3, #16
   369e8:	d119      	bne.n	36a1e <nvs_prev_ate+0x6c>
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   369ea:	89e2      	ldrh	r2, [r4, #14]
   369ec:	3a01      	subs	r2, #1
   369ee:	eb03 4302 	add.w	r3, r3, r2, lsl #16
   369f2:	602b      	str	r3, [r5, #0]
	rc = nvs_flash_ate_rd(fs, *addr, &close_ate);
   369f4:	466a      	mov	r2, sp
   369f6:	6829      	ldr	r1, [r5, #0]
   369f8:	4620      	mov	r0, r4
   369fa:	f7ff fec2 	bl	36782 <nvs_flash_ate_rd>
	if (rc) {
   369fe:	4607      	mov	r7, r0
   36a00:	b940      	cbnz	r0, 36a14 <nvs_prev_ate+0x62>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   36a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   36a04:	7919      	ldrb	r1, [r3, #4]
   36a06:	4668      	mov	r0, sp
   36a08:	f7ff fec0 	bl	3678c <nvs_ate_cmp_const>
	if (!rc) {
   36a0c:	b958      	cbnz	r0, 36a26 <nvs_prev_ate+0x74>
		*addr = fs->ate_wra;
   36a0e:	6862      	ldr	r2, [r4, #4]
   36a10:	602a      	str	r2, [r5, #0]
		return 0;
   36a12:	4607      	mov	r7, r0
}
   36a14:	4638      	mov	r0, r7
   36a16:	b003      	add	sp, #12
   36a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return len;
   36a1a:	2608      	movs	r6, #8
   36a1c:	e7d5      	b.n	369ca <nvs_prev_ate+0x18>
		*addr -= (1 << ADDR_SECT_SHIFT);
   36a1e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   36a22:	602b      	str	r3, [r5, #0]
   36a24:	e7e6      	b.n	369f4 <nvs_prev_ate+0x42>
	if (nvs_close_ate_valid(fs, &close_ate)) {
   36a26:	4669      	mov	r1, sp
   36a28:	4620      	mov	r0, r4
   36a2a:	f7ff ff9a 	bl	36962 <nvs_close_ate_valid>
   36a2e:	b138      	cbz	r0, 36a40 <nvs_prev_ate+0x8e>
		(*addr) &= ADDR_SECT_MASK;
   36a30:	886b      	ldrh	r3, [r5, #2]
   36a32:	041b      	lsls	r3, r3, #16
   36a34:	602b      	str	r3, [r5, #0]
		(*addr) += close_ate.offset;
   36a36:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   36a3a:	4413      	add	r3, r2
   36a3c:	602b      	str	r3, [r5, #0]
		return 0;
   36a3e:	e7e9      	b.n	36a14 <nvs_prev_ate+0x62>
	return nvs_recover_last_ate(fs, addr);
   36a40:	4629      	mov	r1, r5
   36a42:	4620      	mov	r0, r4
   36a44:	f7ff ff55 	bl	368f2 <nvs_recover_last_ate>
   36a48:	4607      	mov	r7, r0
   36a4a:	e7e3      	b.n	36a14 <nvs_prev_ate+0x62>

00036a4c <nvs_ate_crc8_update>:
{
   36a4c:	b510      	push	{r4, lr}
   36a4e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   36a50:	2207      	movs	r2, #7
   36a52:	4601      	mov	r1, r0
   36a54:	20ff      	movs	r0, #255	; 0xff
   36a56:	f7de f9f7 	bl	14e48 <crc8_ccitt>
	entry->crc8 = crc8;
   36a5a:	71e0      	strb	r0, [r4, #7]
}
   36a5c:	bd10      	pop	{r4, pc}

00036a5e <nvs_flash_al_wrt>:
	if (!len) {
   36a5e:	2b00      	cmp	r3, #0
   36a60:	d040      	beq.n	36ae4 <nvs_flash_al_wrt+0x86>
{
   36a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   36a66:	b089      	sub	sp, #36	; 0x24
   36a68:	4605      	mov	r5, r0
   36a6a:	4617      	mov	r7, r2
   36a6c:	4698      	mov	r8, r3
	offset = fs->offset;
   36a6e:	6803      	ldr	r3, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   36a70:	8982      	ldrh	r2, [r0, #12]
   36a72:	0c08      	lsrs	r0, r1, #16
   36a74:	fb00 3302 	mla	r3, r0, r2, r3
	offset += addr & ADDR_OFFS_MASK;
   36a78:	fa13 f481 	uxtah	r4, r3, r1
   36a7c:	46a1      	mov	r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   36a7e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   36a80:	681b      	ldr	r3, [r3, #0]
   36a82:	425b      	negs	r3, r3
	if (blen > 0) {
   36a84:	ea13 0608 	ands.w	r6, r3, r8
   36a88:	d00e      	beq.n	36aa8 <nvs_flash_al_wrt+0x4a>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   36a8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	const struct flash_driver_api *api =
   36a8c:	6883      	ldr	r3, [r0, #8]
	rc = api->write(dev, offset, data, len);
   36a8e:	f8d3 9004 	ldr.w	r9, [r3, #4]
   36a92:	4633      	mov	r3, r6
   36a94:	463a      	mov	r2, r7
   36a96:	4621      	mov	r1, r4
   36a98:	47c8      	blx	r9
		if (rc) {
   36a9a:	b948      	cbnz	r0, 36ab0 <nvs_flash_al_wrt+0x52>
		len -= blen;
   36a9c:	eba8 0806 	sub.w	r8, r8, r6
		offset += blen;
   36aa0:	eb04 0906 	add.w	r9, r4, r6
		data8 += blen;
   36aa4:	4437      	add	r7, r6
   36aa6:	e000      	b.n	36aaa <nvs_flash_al_wrt+0x4c>
	int rc = 0;
   36aa8:	2000      	movs	r0, #0
	if (len) {
   36aaa:	f1b8 0f00 	cmp.w	r8, #0
   36aae:	d102      	bne.n	36ab6 <nvs_flash_al_wrt+0x58>
}
   36ab0:	b009      	add	sp, #36	; 0x24
   36ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		memcpy(buf, data8, len);
   36ab6:	4642      	mov	r2, r8
   36ab8:	4639      	mov	r1, r7
   36aba:	4668      	mov	r0, sp
   36abc:	f001 fc9d 	bl	383fa <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   36ac0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
			fs->flash_parameters->write_block_size - len);
   36ac2:	681a      	ldr	r2, [r3, #0]
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   36ac4:	eba2 0208 	sub.w	r2, r2, r8
   36ac8:	7919      	ldrb	r1, [r3, #4]
   36aca:	eb0d 0008 	add.w	r0, sp, r8
   36ace:	f001 fcc3 	bl	38458 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   36ad2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
				 fs->flash_parameters->write_block_size);
   36ad4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   36ad6:	681b      	ldr	r3, [r3, #0]
	const struct flash_driver_api *api =
   36ad8:	6882      	ldr	r2, [r0, #8]
	rc = api->write(dev, offset, data, len);
   36ada:	6854      	ldr	r4, [r2, #4]
   36adc:	466a      	mov	r2, sp
   36ade:	4649      	mov	r1, r9
   36ae0:	47a0      	blx	r4
	return rc;
   36ae2:	e7e5      	b.n	36ab0 <nvs_flash_al_wrt+0x52>
		return 0;
   36ae4:	2000      	movs	r0, #0
}
   36ae6:	4770      	bx	lr

00036ae8 <nvs_flash_data_wrt>:
{
   36ae8:	b538      	push	{r3, r4, r5, lr}
   36aea:	4605      	mov	r5, r0
   36aec:	4614      	mov	r4, r2
	rc = nvs_flash_al_wrt(fs, fs->data_wra, data, len);
   36aee:	4613      	mov	r3, r2
   36af0:	460a      	mov	r2, r1
   36af2:	6881      	ldr	r1, [r0, #8]
   36af4:	f7ff ffb3 	bl	36a5e <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   36af8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   36afa:	681b      	ldr	r3, [r3, #0]
   36afc:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   36afe:	2a01      	cmp	r2, #1
   36b00:	d903      	bls.n	36b0a <nvs_flash_data_wrt+0x22>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   36b02:	4414      	add	r4, r2
   36b04:	3c01      	subs	r4, #1
   36b06:	4253      	negs	r3, r2
   36b08:	401c      	ands	r4, r3
	fs->data_wra += nvs_al_size(fs, len);
   36b0a:	68ab      	ldr	r3, [r5, #8]
   36b0c:	4423      	add	r3, r4
   36b0e:	60ab      	str	r3, [r5, #8]
}
   36b10:	bd38      	pop	{r3, r4, r5, pc}

00036b12 <nvs_flash_block_move>:
{
   36b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36b16:	b088      	sub	sp, #32
   36b18:	4607      	mov	r7, r0
   36b1a:	460e      	mov	r6, r1
   36b1c:	4615      	mov	r5, r2
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   36b1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   36b20:	681b      	ldr	r3, [r3, #0]
   36b22:	f1c3 0800 	rsb	r8, r3, #0
	block_size =
   36b26:	f008 0820 	and.w	r8, r8, #32
	while (len) {
   36b2a:	e001      	b.n	36b30 <nvs_flash_block_move+0x1e>
		len -= bytes_to_copy;
   36b2c:	1b2d      	subs	r5, r5, r4
		addr += bytes_to_copy;
   36b2e:	4426      	add	r6, r4
	while (len) {
   36b30:	b1a5      	cbz	r5, 36b5c <nvs_flash_block_move+0x4a>
		bytes_to_copy = MIN(block_size, len);
   36b32:	462c      	mov	r4, r5
   36b34:	4545      	cmp	r5, r8
   36b36:	bf28      	it	cs
   36b38:	4644      	movcs	r4, r8
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
   36b3a:	4623      	mov	r3, r4
   36b3c:	466a      	mov	r2, sp
   36b3e:	4631      	mov	r1, r6
   36b40:	4638      	mov	r0, r7
   36b42:	f7ff fe0f 	bl	36764 <nvs_flash_rd>
		if (rc) {
   36b46:	4603      	mov	r3, r0
   36b48:	b948      	cbnz	r0, 36b5e <nvs_flash_block_move+0x4c>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
   36b4a:	4622      	mov	r2, r4
   36b4c:	4669      	mov	r1, sp
   36b4e:	4638      	mov	r0, r7
   36b50:	f7ff ffca 	bl	36ae8 <nvs_flash_data_wrt>
		if (rc) {
   36b54:	4603      	mov	r3, r0
   36b56:	2800      	cmp	r0, #0
   36b58:	d0e8      	beq.n	36b2c <nvs_flash_block_move+0x1a>
   36b5a:	e000      	b.n	36b5e <nvs_flash_block_move+0x4c>
	return 0;
   36b5c:	2300      	movs	r3, #0
}
   36b5e:	4618      	mov	r0, r3
   36b60:	b008      	add	sp, #32
   36b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00036b66 <nvs_flash_ate_wrt>:
{
   36b66:	b510      	push	{r4, lr}
   36b68:	4604      	mov	r4, r0
   36b6a:	460a      	mov	r2, r1
	rc = nvs_flash_al_wrt(fs, fs->ate_wra, entry,
   36b6c:	2308      	movs	r3, #8
   36b6e:	6841      	ldr	r1, [r0, #4]
   36b70:	f7ff ff75 	bl	36a5e <nvs_flash_al_wrt>
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   36b74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   36b76:	681b      	ldr	r3, [r3, #0]
   36b78:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   36b7a:	2a01      	cmp	r2, #1
   36b7c:	d907      	bls.n	36b8e <nvs_flash_ate_wrt+0x28>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   36b7e:	4613      	mov	r3, r2
   36b80:	3207      	adds	r2, #7
   36b82:	425b      	negs	r3, r3
   36b84:	401a      	ands	r2, r3
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   36b86:	6863      	ldr	r3, [r4, #4]
   36b88:	1a9b      	subs	r3, r3, r2
   36b8a:	6063      	str	r3, [r4, #4]
}
   36b8c:	bd10      	pop	{r4, pc}
		return len;
   36b8e:	2208      	movs	r2, #8
   36b90:	e7f9      	b.n	36b86 <nvs_flash_ate_wrt+0x20>

00036b92 <nvs_add_gc_done_ate>:
{
   36b92:	b510      	push	{r4, lr}
   36b94:	b082      	sub	sp, #8
   36b96:	4604      	mov	r4, r0
	gc_done_ate.id = 0xffff;
   36b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   36b9c:	f8ad 3000 	strh.w	r3, [sp]
	gc_done_ate.len = 0U;
   36ba0:	2300      	movs	r3, #0
   36ba2:	f8ad 3004 	strh.w	r3, [sp, #4]
	gc_done_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   36ba6:	8903      	ldrh	r3, [r0, #8]
   36ba8:	f8ad 3002 	strh.w	r3, [sp, #2]
	nvs_ate_crc8_update(&gc_done_ate);
   36bac:	4668      	mov	r0, sp
   36bae:	f7ff ff4d 	bl	36a4c <nvs_ate_crc8_update>
	return nvs_flash_ate_wrt(fs, &gc_done_ate);
   36bb2:	4669      	mov	r1, sp
   36bb4:	4620      	mov	r0, r4
   36bb6:	f7ff ffd6 	bl	36b66 <nvs_flash_ate_wrt>
}
   36bba:	b002      	add	sp, #8
   36bbc:	bd10      	pop	{r4, pc}

00036bbe <nvs_gc>:
{
   36bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36bc2:	b08a      	sub	sp, #40	; 0x28
   36bc4:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   36bc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   36bc8:	681b      	ldr	r3, [r3, #0]
   36bca:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   36bcc:	2a01      	cmp	r2, #1
   36bce:	d92d      	bls.n	36c2c <nvs_gc+0x6e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   36bd0:	1dd6      	adds	r6, r2, #7
   36bd2:	4253      	negs	r3, r2
   36bd4:	401e      	ands	r6, r3
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
   36bd6:	88e3      	ldrh	r3, [r4, #6]
   36bd8:	041b      	lsls	r3, r3, #16
   36bda:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
   36bdc:	a903      	add	r1, sp, #12
   36bde:	4620      	mov	r0, r4
   36be0:	f7ff fde0 	bl	367a4 <nvs_sector_advance>
	gc_addr = sec_addr + fs->sector_size - ate_size;
   36be4:	89a1      	ldrh	r1, [r4, #12]
   36be6:	9b03      	ldr	r3, [sp, #12]
   36be8:	4419      	add	r1, r3
   36bea:	1b89      	subs	r1, r1, r6
   36bec:	9102      	str	r1, [sp, #8]
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
   36bee:	aa08      	add	r2, sp, #32
   36bf0:	4620      	mov	r0, r4
   36bf2:	f7ff fdc6 	bl	36782 <nvs_flash_ate_rd>
	if (rc < 0) {
   36bf6:	1e03      	subs	r3, r0, #0
   36bf8:	db14      	blt.n	36c24 <nvs_gc+0x66>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   36bfa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   36bfc:	7919      	ldrb	r1, [r3, #4]
   36bfe:	a808      	add	r0, sp, #32
   36c00:	f7ff fdc4 	bl	3678c <nvs_ate_cmp_const>
	if (!rc) {
   36c04:	b9a0      	cbnz	r0, 36c30 <nvs_gc+0x72>
	if (fs->ate_wra >= (fs->data_wra + ate_size)) {
   36c06:	6863      	ldr	r3, [r4, #4]
   36c08:	68a2      	ldr	r2, [r4, #8]
   36c0a:	4416      	add	r6, r2
   36c0c:	42b3      	cmp	r3, r6
   36c0e:	d304      	bcc.n	36c1a <nvs_gc+0x5c>
		rc = nvs_add_gc_done_ate(fs);
   36c10:	4620      	mov	r0, r4
   36c12:	f7ff ffbe 	bl	36b92 <nvs_add_gc_done_ate>
		if (rc) {
   36c16:	4603      	mov	r3, r0
   36c18:	b920      	cbnz	r0, 36c24 <nvs_gc+0x66>
	rc = nvs_flash_erase_sector(fs, sec_addr);
   36c1a:	9903      	ldr	r1, [sp, #12]
   36c1c:	4620      	mov	r0, r4
   36c1e:	f7ff fe21 	bl	36864 <nvs_flash_erase_sector>
   36c22:	4603      	mov	r3, r0
}
   36c24:	4618      	mov	r0, r3
   36c26:	b00a      	add	sp, #40	; 0x28
   36c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return len;
   36c2c:	2608      	movs	r6, #8
   36c2e:	e7d2      	b.n	36bd6 <nvs_gc+0x18>
	stop_addr = gc_addr - ate_size;
   36c30:	9b02      	ldr	r3, [sp, #8]
   36c32:	eba3 0806 	sub.w	r8, r3, r6
	if (nvs_close_ate_valid(fs, &close_ate)) {
   36c36:	a908      	add	r1, sp, #32
   36c38:	4620      	mov	r0, r4
   36c3a:	f7ff fe92 	bl	36962 <nvs_close_ate_valid>
   36c3e:	b140      	cbz	r0, 36c52 <nvs_gc+0x94>
		gc_addr &= ADDR_SECT_MASK;
   36c40:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   36c44:	041b      	lsls	r3, r3, #16
   36c46:	9302      	str	r3, [sp, #8]
		gc_addr += close_ate.offset;
   36c48:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   36c4c:	4413      	add	r3, r2
   36c4e:	9302      	str	r3, [sp, #8]
   36c50:	e023      	b.n	36c9a <nvs_gc+0xdc>
		rc = nvs_recover_last_ate(fs, &gc_addr);
   36c52:	a902      	add	r1, sp, #8
   36c54:	4620      	mov	r0, r4
   36c56:	f7ff fe4c 	bl	368f2 <nvs_recover_last_ate>
		if (rc) {
   36c5a:	4603      	mov	r3, r0
   36c5c:	b1e8      	cbz	r0, 36c9a <nvs_gc+0xdc>
   36c5e:	e7e1      	b.n	36c24 <nvs_gc+0x66>
		} while (wlk_addr != fs->ate_wra);
   36c60:	6862      	ldr	r2, [r4, #4]
   36c62:	9b01      	ldr	r3, [sp, #4]
   36c64:	429a      	cmp	r2, r3
   36c66:	d014      	beq.n	36c92 <nvs_gc+0xd4>
			wlk_prev_addr = wlk_addr;
   36c68:	9d01      	ldr	r5, [sp, #4]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
   36c6a:	aa04      	add	r2, sp, #16
   36c6c:	a901      	add	r1, sp, #4
   36c6e:	4620      	mov	r0, r4
   36c70:	f7ff fe9f 	bl	369b2 <nvs_prev_ate>
			if (rc) {
   36c74:	4603      	mov	r3, r0
   36c76:	2800      	cmp	r0, #0
   36c78:	d1d4      	bne.n	36c24 <nvs_gc+0x66>
			if ((wlk_ate.id == gc_ate.id) &&
   36c7a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   36c7e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   36c82:	429a      	cmp	r2, r3
   36c84:	d1ec      	bne.n	36c60 <nvs_gc+0xa2>
			    (nvs_ate_valid(fs, &wlk_ate))) {
   36c86:	a904      	add	r1, sp, #16
   36c88:	4620      	mov	r0, r4
   36c8a:	f7ff fe16 	bl	368ba <nvs_ate_valid>
			if ((wlk_ate.id == gc_ate.id) &&
   36c8e:	2800      	cmp	r0, #0
   36c90:	d0e6      	beq.n	36c60 <nvs_gc+0xa2>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   36c92:	42bd      	cmp	r5, r7
   36c94:	d013      	beq.n	36cbe <nvs_gc+0x100>
	} while (gc_prev_addr != stop_addr);
   36c96:	4547      	cmp	r7, r8
   36c98:	d0b5      	beq.n	36c06 <nvs_gc+0x48>
		gc_prev_addr = gc_addr;
   36c9a:	9f02      	ldr	r7, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
   36c9c:	aa06      	add	r2, sp, #24
   36c9e:	a902      	add	r1, sp, #8
   36ca0:	4620      	mov	r0, r4
   36ca2:	f7ff fe86 	bl	369b2 <nvs_prev_ate>
		if (rc) {
   36ca6:	4603      	mov	r3, r0
   36ca8:	2800      	cmp	r0, #0
   36caa:	d1bb      	bne.n	36c24 <nvs_gc+0x66>
		if (!nvs_ate_valid(fs, &gc_ate)) {
   36cac:	a906      	add	r1, sp, #24
   36cae:	4620      	mov	r0, r4
   36cb0:	f7ff fe03 	bl	368ba <nvs_ate_valid>
   36cb4:	2800      	cmp	r0, #0
   36cb6:	d0ee      	beq.n	36c96 <nvs_gc+0xd8>
		wlk_addr = fs->ate_wra;
   36cb8:	6863      	ldr	r3, [r4, #4]
   36cba:	9301      	str	r3, [sp, #4]
   36cbc:	e7d4      	b.n	36c68 <nvs_gc+0xaa>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
   36cbe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   36cc2:	2b00      	cmp	r3, #0
   36cc4:	d0e7      	beq.n	36c96 <nvs_gc+0xd8>
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
   36cc6:	0c3b      	lsrs	r3, r7, #16
   36cc8:	041b      	lsls	r3, r3, #16
			data_addr += gc_ate.offset;
   36cca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   36cce:	189d      	adds	r5, r3, r2
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   36cd0:	8923      	ldrh	r3, [r4, #8]
   36cd2:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
   36cd6:	a806      	add	r0, sp, #24
   36cd8:	f7ff feb8 	bl	36a4c <nvs_ate_crc8_update>
			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
   36cdc:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   36ce0:	4629      	mov	r1, r5
   36ce2:	4620      	mov	r0, r4
   36ce4:	f7ff ff15 	bl	36b12 <nvs_flash_block_move>
			if (rc) {
   36ce8:	4603      	mov	r3, r0
   36cea:	2800      	cmp	r0, #0
   36cec:	d19a      	bne.n	36c24 <nvs_gc+0x66>
			rc = nvs_flash_ate_wrt(fs, &gc_ate);
   36cee:	a906      	add	r1, sp, #24
   36cf0:	4620      	mov	r0, r4
   36cf2:	f7ff ff38 	bl	36b66 <nvs_flash_ate_wrt>
			if (rc) {
   36cf6:	4603      	mov	r3, r0
   36cf8:	2800      	cmp	r0, #0
   36cfa:	d0cc      	beq.n	36c96 <nvs_gc+0xd8>
   36cfc:	e792      	b.n	36c24 <nvs_gc+0x66>

00036cfe <nvs_flash_wrt_entry>:
{
   36cfe:	b570      	push	{r4, r5, r6, lr}
   36d00:	b082      	sub	sp, #8
   36d02:	4604      	mov	r4, r0
   36d04:	4616      	mov	r6, r2
   36d06:	461d      	mov	r5, r3
	entry.id = id;
   36d08:	f8ad 1000 	strh.w	r1, [sp]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
   36d0c:	8903      	ldrh	r3, [r0, #8]
   36d0e:	f8ad 3002 	strh.w	r3, [sp, #2]
	entry.len = (uint16_t)len;
   36d12:	f8ad 5004 	strh.w	r5, [sp, #4]
	entry.part = 0xff;
   36d16:	23ff      	movs	r3, #255	; 0xff
   36d18:	f88d 3006 	strb.w	r3, [sp, #6]
	nvs_ate_crc8_update(&entry);
   36d1c:	4668      	mov	r0, sp
   36d1e:	f7ff fe95 	bl	36a4c <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
   36d22:	462a      	mov	r2, r5
   36d24:	4631      	mov	r1, r6
   36d26:	4620      	mov	r0, r4
   36d28:	f7ff fede 	bl	36ae8 <nvs_flash_data_wrt>
	if (rc) {
   36d2c:	b108      	cbz	r0, 36d32 <nvs_flash_wrt_entry+0x34>
}
   36d2e:	b002      	add	sp, #8
   36d30:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_flash_ate_wrt(fs, &entry);
   36d32:	4669      	mov	r1, sp
   36d34:	4620      	mov	r0, r4
   36d36:	f7ff ff16 	bl	36b66 <nvs_flash_ate_wrt>
	if (rc) {
   36d3a:	e7f8      	b.n	36d2e <nvs_flash_wrt_entry+0x30>

00036d3c <nvs_sector_close>:
{
   36d3c:	b530      	push	{r4, r5, lr}
   36d3e:	b083      	sub	sp, #12
   36d40:	4604      	mov	r4, r0
	uint8_t write_block_size = fs->flash_parameters->write_block_size;
   36d42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   36d44:	681b      	ldr	r3, [r3, #0]
   36d46:	b2da      	uxtb	r2, r3
	if (write_block_size <= 1U) {
   36d48:	2a01      	cmp	r2, #1
   36d4a:	d926      	bls.n	36d9a <nvs_sector_close+0x5e>
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   36d4c:	4613      	mov	r3, r2
   36d4e:	3207      	adds	r2, #7
   36d50:	425b      	negs	r3, r3
   36d52:	401a      	ands	r2, r3
	close_ate.id = 0xFFFF;
   36d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   36d58:	f8ad 3000 	strh.w	r3, [sp]
	close_ate.len = 0U;
   36d5c:	2500      	movs	r5, #0
   36d5e:	f8ad 5004 	strh.w	r5, [sp, #4]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
   36d62:	6863      	ldr	r3, [r4, #4]
   36d64:	1899      	adds	r1, r3, r2
   36d66:	f8ad 1002 	strh.w	r1, [sp, #2]
	fs->ate_wra &= ADDR_SECT_MASK;
   36d6a:	0c1b      	lsrs	r3, r3, #16
   36d6c:	041b      	lsls	r3, r3, #16
   36d6e:	6063      	str	r3, [r4, #4]
	fs->ate_wra += (fs->sector_size - ate_size);
   36d70:	89a1      	ldrh	r1, [r4, #12]
   36d72:	1a8a      	subs	r2, r1, r2
   36d74:	4413      	add	r3, r2
   36d76:	6063      	str	r3, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
   36d78:	4668      	mov	r0, sp
   36d7a:	f7ff fe67 	bl	36a4c <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
   36d7e:	4669      	mov	r1, sp
   36d80:	4620      	mov	r0, r4
   36d82:	f7ff fef0 	bl	36b66 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
   36d86:	1d21      	adds	r1, r4, #4
   36d88:	4620      	mov	r0, r4
   36d8a:	f7ff fd0b 	bl	367a4 <nvs_sector_advance>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
   36d8e:	88e3      	ldrh	r3, [r4, #6]
   36d90:	041b      	lsls	r3, r3, #16
   36d92:	60a3      	str	r3, [r4, #8]
}
   36d94:	4628      	mov	r0, r5
   36d96:	b003      	add	sp, #12
   36d98:	bd30      	pop	{r4, r5, pc}
		return len;
   36d9a:	2208      	movs	r2, #8
   36d9c:	e7da      	b.n	36d54 <nvs_sector_close+0x18>

00036d9e <nvs_delete>:
{
   36d9e:	b508      	push	{r3, lr}
	return nvs_write(fs, id, NULL, 0);
   36da0:	2300      	movs	r3, #0
   36da2:	461a      	mov	r2, r3
   36da4:	f7e0 fd52 	bl	1784c <nvs_write>
}
   36da8:	bd08      	pop	{r3, pc}

00036daa <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   36daa:	b510      	push	{r4, lr}
   36dac:	b082      	sub	sp, #8
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   36dae:	2400      	movs	r4, #0
   36db0:	9400      	str	r4, [sp, #0]
   36db2:	f7e0 fe25 	bl	17a00 <nvs_read_hist>
	return rc;
}
   36db6:	b002      	add	sp, #8
   36db8:	bd10      	pop	{r4, pc}

00036dba <z_impl_mbox_send>:
{
   36dba:	b510      	push	{r4, lr}
   36dbc:	4603      	mov	r3, r0
   36dbe:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
   36dc0:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   36dc2:	6881      	ldr	r1, [r0, #8]
	if (api->send == NULL) {
   36dc4:	680c      	ldr	r4, [r1, #0]
   36dc6:	b114      	cbz	r4, 36dce <z_impl_mbox_send+0x14>
	return api->send(channel->dev, channel->id, msg);
   36dc8:	6859      	ldr	r1, [r3, #4]
   36dca:	47a0      	blx	r4
}
   36dcc:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   36dce:	f06f 0057 	mvn.w	r0, #87	; 0x57
   36dd2:	e7fb      	b.n	36dcc <z_impl_mbox_send+0x12>

00036dd4 <mbox_register_callback>:
{
   36dd4:	b510      	push	{r4, lr}
   36dd6:	4684      	mov	ip, r0
   36dd8:	4613      	mov	r3, r2
		(const struct mbox_driver_api *)channel->dev->api;
   36dda:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   36ddc:	6882      	ldr	r2, [r0, #8]
	if (api->register_callback == NULL) {
   36dde:	6854      	ldr	r4, [r2, #4]
   36de0:	b124      	cbz	r4, 36dec <mbox_register_callback+0x18>
	return api->register_callback(channel->dev, channel->id, cb, user_data);
   36de2:	460a      	mov	r2, r1
   36de4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   36de8:	47a0      	blx	r4
}
   36dea:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   36dec:	f06f 0057 	mvn.w	r0, #87	; 0x57
   36df0:	e7fb      	b.n	36dea <mbox_register_callback+0x16>

00036df2 <z_impl_mbox_set_enabled>:
{
   36df2:	b510      	push	{r4, lr}
   36df4:	4603      	mov	r3, r0
   36df6:	460a      	mov	r2, r1
		(const struct mbox_driver_api *)channel->dev->api;
   36df8:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
   36dfa:	6881      	ldr	r1, [r0, #8]
	if (api->set_enabled == NULL) {
   36dfc:	690c      	ldr	r4, [r1, #16]
   36dfe:	b114      	cbz	r4, 36e06 <z_impl_mbox_set_enabled+0x14>
	return api->set_enabled(channel->dev, channel->id, enable);
   36e00:	6859      	ldr	r1, [r3, #4]
   36e02:	47a0      	blx	r4
}
   36e04:	bd10      	pop	{r4, pc}
		return -ENOSYS;
   36e06:	f06f 0057 	mvn.w	r0, #87	; 0x57
   36e0a:	e7fb      	b.n	36e04 <z_impl_mbox_set_enabled+0x12>

00036e0c <shm_size>:
#define ROLE_HOST		VIRTIO_DEV_DRIVER
#define ROLE_REMOTE		VIRTIO_DEV_DEVICE

static inline size_t vq_ring_size(unsigned int num, unsigned int buf_size)
{
	return (buf_size * num);
   36e0c:	fb00 f101 	mul.w	r1, r0, r1
}

static inline size_t shm_size(unsigned int num, unsigned int buf_size)
{
	return (VDEV_STATUS_SIZE + (VRING_COUNT * vq_ring_size(num, buf_size)) +
   36e10:	3102      	adds	r1, #2
static inline int vring_size(unsigned int num, unsigned long align)
{
	int size;

	size = num * sizeof(struct vring_desc);
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   36e12:	1cc3      	adds	r3, r0, #3
   36e14:	005b      	lsls	r3, r3, #1
   36e16:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
   36e1a:	3303      	adds	r3, #3
   36e1c:	f023 0303 	bic.w	r3, r3, #3
	size += sizeof(struct vring_used) +
   36e20:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   36e24:	3306      	adds	r3, #6
	       (VRING_COUNT * vring_size(num, VRING_ALIGNMENT)));
   36e26:	005b      	lsls	r3, r3, #1
}
   36e28:	eb03 0041 	add.w	r0, r3, r1, lsl #1
   36e2c:	4770      	bx	lr

00036e2e <virtio_notify_cb>:
{
   36e2e:	b508      	push	{r3, lr}
	if (conf->mbox_tx.dev) {
   36e30:	68cb      	ldr	r3, [r1, #12]
   36e32:	b123      	cbz	r3, 36e3e <virtio_notify_cb+0x10>
		mbox_send(&conf->mbox_tx, NULL);
   36e34:	f101 000c 	add.w	r0, r1, #12
	return z_impl_mbox_send(channel, msg);
   36e38:	2100      	movs	r1, #0
   36e3a:	f7ff ffbe 	bl	36dba <z_impl_mbox_send>
}
   36e3e:	bd08      	pop	{r3, pc}

00036e40 <get_tx_buffer_size>:
	struct backend_data_t *data = instance->data;
   36e40:	6903      	ldr	r3, [r0, #16]
}
   36e42:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
   36e46:	4770      	bx	lr

00036e48 <drop_tx_buffer>:
}
   36e48:	f06f 0085 	mvn.w	r0, #133	; 0x85
   36e4c:	4770      	bx	lr

00036e4e <release_rx_buffer>:
	if (!rpmsg_ept) {
   36e4e:	b131      	cbz	r1, 36e5e <release_rx_buffer+0x10>
{
   36e50:	b508      	push	{r3, lr}
   36e52:	4608      	mov	r0, r1
	rpmsg_release_rx_buffer(&rpmsg_ept->ep, data);
   36e54:	4611      	mov	r1, r2
   36e56:	f007 fac2 	bl	3e3de <rpmsg_release_rx_buffer>
	return 0;
   36e5a:	2000      	movs	r0, #0
}
   36e5c:	bd08      	pop	{r3, pc}
		return -ENOENT;
   36e5e:	f06f 0001 	mvn.w	r0, #1
}
   36e62:	4770      	bx	lr

00036e64 <hold_rx_buffer>:
	if (!rpmsg_ept) {
   36e64:	b131      	cbz	r1, 36e74 <hold_rx_buffer+0x10>
{
   36e66:	b508      	push	{r3, lr}
   36e68:	4608      	mov	r0, r1
	rpmsg_hold_rx_buffer(&rpmsg_ept->ep, data);
   36e6a:	4611      	mov	r1, r2
   36e6c:	f007 faad 	bl	3e3ca <rpmsg_hold_rx_buffer>
	return 0;
   36e70:	2000      	movs	r0, #0
}
   36e72:	bd08      	pop	{r3, pc}
		return -ENOENT;
   36e74:	f06f 0001 	mvn.w	r0, #1
}
   36e78:	4770      	bx	lr

00036e7a <send_nocopy>:
{
   36e7a:	b508      	push	{r3, lr}
   36e7c:	4684      	mov	ip, r0
   36e7e:	4608      	mov	r0, r1
   36e80:	4611      	mov	r1, r2
   36e82:	461a      	mov	r2, r3
	struct backend_data_t *data = instance->data;
   36e84:	f8dc 3010 	ldr.w	r3, [ip, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   36e88:	f503 7367 	add.w	r3, r3, #924	; 0x39c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   36e8c:	e8d3 3faf 	lda	r3, [r3]
   36e90:	2b02      	cmp	r3, #2
   36e92:	d104      	bne.n	36e9e <send_nocopy+0x24>
	if (len == 0) {
   36e94:	b132      	cbz	r2, 36ea4 <send_nocopy+0x2a>
	if (!rpmsg_ept) {
   36e96:	b140      	cbz	r0, 36eaa <send_nocopy+0x30>
	return rpmsg_send_nocopy(&rpmsg_ept->ep, msg, len);
   36e98:	f7e0 ffa6 	bl	17de8 <rpmsg_send_nocopy>
}
   36e9c:	bd08      	pop	{r3, pc}
		return -EBUSY;
   36e9e:	f06f 000f 	mvn.w	r0, #15
   36ea2:	e7fb      	b.n	36e9c <send_nocopy+0x22>
		return -EBADMSG;
   36ea4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   36ea8:	e7f8      	b.n	36e9c <send_nocopy+0x22>
		return -ENOENT;
   36eaa:	f06f 0001 	mvn.w	r0, #1
   36eae:	e7f5      	b.n	36e9c <send_nocopy+0x22>

00036eb0 <get_tx_buffer>:
{
   36eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36eb4:	4690      	mov	r8, r2
   36eb6:	461e      	mov	r6, r3
   36eb8:	9a06      	ldr	r2, [sp, #24]
   36eba:	9b07      	ldr	r3, [sp, #28]
	struct backend_data_t *data = instance->data;
   36ebc:	6900      	ldr	r0, [r0, #16]
	if (!rpmsg_ept) {
   36ebe:	b3a1      	cbz	r1, 36f2a <get_tx_buffer+0x7a>
   36ec0:	460f      	mov	r7, r1
	if (!r_data || !size) {
   36ec2:	f1b8 0f00 	cmp.w	r8, #0
   36ec6:	d033      	beq.n	36f30 <get_tx_buffer+0x80>
   36ec8:	b3ae      	cbz	r6, 36f36 <get_tx_buffer+0x86>
	if (!K_TIMEOUT_EQ(wait, K_FOREVER) && !K_TIMEOUT_EQ(wait, K_NO_WAIT)) {
   36eca:	4614      	mov	r4, r2
   36ecc:	461d      	mov	r5, r3
   36ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   36ed2:	bf08      	it	eq
   36ed4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   36ed8:	d001      	beq.n	36ede <get_tx_buffer+0x2e>
   36eda:	4313      	orrs	r3, r2
   36edc:	d11e      	bne.n	36f1c <get_tx_buffer+0x6c>
	if ((*size) && (*size > data->tx_buffer_size)) {
   36ede:	6833      	ldr	r3, [r6, #0]
   36ee0:	b11b      	cbz	r3, 36eea <get_tx_buffer+0x3a>
   36ee2:	f8d0 23a0 	ldr.w	r2, [r0, #928]	; 0x3a0
   36ee6:	4293      	cmp	r3, r2
   36ee8:	d81b      	bhi.n	36f22 <get_tx_buffer+0x72>
		payload = rpmsg_get_tx_payload_buffer(&rpmsg_ept->ep, size,
   36eea:	ea04 0205 	and.w	r2, r4, r5
   36eee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   36ef2:	bf14      	ite	ne
   36ef4:	2200      	movne	r2, #0
   36ef6:	2201      	moveq	r2, #1
   36ef8:	4631      	mov	r1, r6
   36efa:	4638      	mov	r0, r7
   36efc:	f007 fa7a 	bl	3e3f4 <rpmsg_get_tx_payload_buffer>
	} while ((!payload) && K_TIMEOUT_EQ(wait, K_FOREVER));
   36f00:	4603      	mov	r3, r0
   36f02:	b928      	cbnz	r0, 36f10 <get_tx_buffer+0x60>
   36f04:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   36f08:	bf08      	it	eq
   36f0a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   36f0e:	d0ec      	beq.n	36eea <get_tx_buffer+0x3a>
	if (!payload) {
   36f10:	b1a3      	cbz	r3, 36f3c <get_tx_buffer+0x8c>
	(*r_data) = payload;
   36f12:	f8c8 3000 	str.w	r3, [r8]
	return 0;
   36f16:	2000      	movs	r0, #0
}
   36f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTSUP;
   36f1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   36f20:	e7fa      	b.n	36f18 <get_tx_buffer+0x68>
		*size = data->tx_buffer_size;
   36f22:	6032      	str	r2, [r6, #0]
		return -ENOMEM;
   36f24:	f06f 000b 	mvn.w	r0, #11
   36f28:	e7f6      	b.n	36f18 <get_tx_buffer+0x68>
		return -ENOENT;
   36f2a:	f06f 0001 	mvn.w	r0, #1
   36f2e:	e7f3      	b.n	36f18 <get_tx_buffer+0x68>
		return -EINVAL;
   36f30:	f06f 0015 	mvn.w	r0, #21
   36f34:	e7f0      	b.n	36f18 <get_tx_buffer+0x68>
   36f36:	f06f 0015 	mvn.w	r0, #21
   36f3a:	e7ed      	b.n	36f18 <get_tx_buffer+0x68>
		return -ENOBUFS;
   36f3c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   36f40:	e7ea      	b.n	36f18 <get_tx_buffer+0x68>

00036f42 <rpmsg_service_unbind>:
{
   36f42:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   36f44:	f007 fa93 	bl	3e46e <rpmsg_destroy_ept>
}
   36f48:	bd08      	pop	{r3, pc}

00036f4a <deregister_ept>:
	struct backend_data_t *data = instance->data;
   36f4a:	6903      	ldr	r3, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   36f4c:	f503 7367 	add.w	r3, r3, #924	; 0x39c
   36f50:	e8d3 3faf 	lda	r3, [r3]
   36f54:	2b02      	cmp	r3, #2
   36f56:	d10c      	bne.n	36f72 <deregister_ept+0x28>
{
   36f58:	b510      	push	{r4, lr}
   36f5a:	460c      	mov	r4, r1
	if (!rpmsg_ept) {
   36f5c:	b161      	cbz	r1, 36f78 <deregister_ept+0x2e>
	rpmsg_destroy_ept(&rpmsg_ept->ep);
   36f5e:	4608      	mov	r0, r1
   36f60:	f007 fa85 	bl	3e46e <rpmsg_destroy_ept>
	memset(rpmsg_ept, 0, sizeof(struct ipc_rpmsg_ept));
   36f64:	2270      	movs	r2, #112	; 0x70
   36f66:	2100      	movs	r1, #0
   36f68:	4620      	mov	r0, r4
   36f6a:	f001 fa75 	bl	38458 <memset>
	return 0;
   36f6e:	2000      	movs	r0, #0
}
   36f70:	bd10      	pop	{r4, pc}
		return -EBUSY;
   36f72:	f06f 000f 	mvn.w	r0, #15
}
   36f76:	4770      	bx	lr
		return -ENOENT;
   36f78:	f06f 0001 	mvn.w	r0, #1
   36f7c:	e7f8      	b.n	36f70 <deregister_ept+0x26>

00036f7e <get_ept_slot_with_name>:
{
   36f7e:	b570      	push	{r4, r5, r6, lr}
   36f80:	4605      	mov	r5, r0
   36f82:	460e      	mov	r6, r1
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   36f84:	2400      	movs	r4, #0
   36f86:	2c01      	cmp	r4, #1
   36f88:	d80f      	bhi.n	36faa <get_ept_slot_with_name+0x2c>
		if (strcmp(name, rpmsg_ept->name) == 0) {
   36f8a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   36f8e:	011b      	lsls	r3, r3, #4
   36f90:	3340      	adds	r3, #64	; 0x40
   36f92:	18e9      	adds	r1, r5, r3
   36f94:	4630      	mov	r0, r6
   36f96:	f001 f9ed 	bl	38374 <strcmp>
   36f9a:	b108      	cbz	r0, 36fa0 <get_ept_slot_with_name+0x22>
	for (size_t i = 0; i < NUM_ENDPOINTS; i++) {
   36f9c:	3401      	adds	r4, #1
   36f9e:	e7f2      	b.n	36f86 <get_ept_slot_with_name+0x8>
			return &rpmsg_inst->endpoint[i];
   36fa0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   36fa4:	eb05 1004 	add.w	r0, r5, r4, lsl #4
   36fa8:	e000      	b.n	36fac <get_ept_slot_with_name+0x2e>
	return NULL;
   36faa:	2000      	movs	r0, #0
}
   36fac:	bd70      	pop	{r4, r5, r6, pc}

00036fae <get_ept>:
{
   36fae:	b538      	push	{r3, r4, r5, lr}
   36fb0:	4605      	mov	r5, r0
   36fb2:	460c      	mov	r4, r1
	ept = get_ept_slot_with_name(rpmsg_inst, name);
   36fb4:	4611      	mov	r1, r2
   36fb6:	f7ff ffe2 	bl	36f7e <get_ept_slot_with_name>
	if (ept != NULL) {
   36fba:	b110      	cbz	r0, 36fc2 <get_ept+0x14>
		(*rpmsg_ept) = ept;
   36fbc:	6020      	str	r0, [r4, #0]
		return true;
   36fbe:	2001      	movs	r0, #1
}
   36fc0:	bd38      	pop	{r3, r4, r5, pc}
	ept = get_available_ept_slot(rpmsg_inst);
   36fc2:	4628      	mov	r0, r5
   36fc4:	f7e0 ff42 	bl	17e4c <get_available_ept_slot>
	if (ept != NULL) {
   36fc8:	b110      	cbz	r0, 36fd0 <get_ept+0x22>
		(*rpmsg_ept) = ept;
   36fca:	6020      	str	r0, [r4, #0]
		return false;
   36fcc:	2000      	movs	r0, #0
   36fce:	e7f7      	b.n	36fc0 <get_ept+0x12>
	(*rpmsg_ept) = NULL;
   36fd0:	2000      	movs	r0, #0
   36fd2:	6020      	str	r0, [r4, #0]
	return false;
   36fd4:	e7f4      	b.n	36fc0 <get_ept+0x12>

00036fd6 <register_ept_on_host>:
{
   36fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
   36fd8:	b083      	sub	sp, #12
   36fda:	4607      	mov	r7, r0
   36fdc:	460d      	mov	r5, r1
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   36fde:	f500 76d8 	add.w	r6, r0, #432	; 0x1b0
	return z_impl_k_mutex_lock(mutex, timeout);
   36fe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   36fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   36fea:	4630      	mov	r0, r6
   36fec:	f7fa fc36 	bl	3185c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, cfg->name);
   36ff0:	682a      	ldr	r2, [r5, #0]
   36ff2:	a901      	add	r1, sp, #4
   36ff4:	4638      	mov	r0, r7
   36ff6:	f7ff ffda 	bl	36fae <get_ept>
	if (rpmsg_ept == NULL) {
   36ffa:	9c01      	ldr	r4, [sp, #4]
   36ffc:	b1b4      	cbz	r4, 3702c <register_ept_on_host+0x56>
	rpmsg_ept->cb = &cfg->cb;
   36ffe:	f105 0308 	add.w	r3, r5, #8
   37002:	66a3      	str	r3, [r4, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   37004:	696b      	ldr	r3, [r5, #20]
   37006:	66e3      	str	r3, [r4, #108]	; 0x6c
	rpmsg_ept->bound = false;
   37008:	2300      	movs	r3, #0
   3700a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   3700e:	63e4      	str	r4, [r4, #60]	; 0x3c
	if (ept_cached) {
   37010:	b180      	cbz	r0, 37034 <register_ept_on_host+0x5e>
	return z_impl_k_mutex_unlock(mutex);
   37012:	4630      	mov	r0, r6
   37014:	f7fa fd38 	bl	31a88 <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, cfg->name, rpmsg_ept->dest);
   37018:	9901      	ldr	r1, [sp, #4]
   3701a:	6e0b      	ldr	r3, [r1, #96]	; 0x60
   3701c:	682a      	ldr	r2, [r5, #0]
   3701e:	4638      	mov	r0, r7
   37020:	f7e0 ff32 	bl	17e88 <advertise_ept>
	return rpmsg_ept;
   37024:	9c01      	ldr	r4, [sp, #4]
}
   37026:	4620      	mov	r0, r4
   37028:	b003      	add	sp, #12
   3702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3702c:	4630      	mov	r0, r6
   3702e:	f7fa fd2b 	bl	31a88 <z_impl_k_mutex_unlock>
		return NULL;
   37032:	e7f8      	b.n	37026 <register_ept_on_host+0x50>
		strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   37034:	2220      	movs	r2, #32
   37036:	6829      	ldr	r1, [r5, #0]
   37038:	f104 0040 	add.w	r0, r4, #64	; 0x40
   3703c:	f001 f96d 	bl	3831a <strncpy>
   37040:	4630      	mov	r0, r6
   37042:	f7fa fd21 	bl	31a88 <z_impl_k_mutex_unlock>
   37046:	e7ed      	b.n	37024 <register_ept_on_host+0x4e>

00037048 <ns_bind_cb>:
{
   37048:	b5f0      	push	{r4, r5, r6, r7, lr}
   3704a:	b083      	sub	sp, #12
	rpmsg_inst = CONTAINER_OF(p_rvdev->shpool, struct ipc_rpmsg_instance, shm_pool);
   3704c:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
	if (name == NULL || name[0] == '\0') {
   37050:	b129      	cbz	r1, 3705e <ns_bind_cb+0x16>
   37052:	4616      	mov	r6, r2
   37054:	f5a4 77ce 	sub.w	r7, r4, #412	; 0x19c
   37058:	460d      	mov	r5, r1
   3705a:	780b      	ldrb	r3, [r1, #0]
   3705c:	b90b      	cbnz	r3, 37062 <ns_bind_cb+0x1a>
}
   3705e:	b003      	add	sp, #12
   37060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_mutex_lock(&rpmsg_inst->mtx, K_FOREVER);
   37062:	3414      	adds	r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
   37064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   37068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3706c:	4620      	mov	r0, r4
   3706e:	f7fa fbf5 	bl	3185c <z_impl_k_mutex_lock>
	ept_cached = get_ept(rpmsg_inst, &rpmsg_ept, name);
   37072:	462a      	mov	r2, r5
   37074:	a901      	add	r1, sp, #4
   37076:	4638      	mov	r0, r7
   37078:	f7ff ff99 	bl	36fae <get_ept>
	if (rpmsg_ept == NULL) {
   3707c:	9b01      	ldr	r3, [sp, #4]
   3707e:	b153      	cbz	r3, 37096 <ns_bind_cb+0x4e>
	if (ept_cached) {
   37080:	b168      	cbz	r0, 3709e <ns_bind_cb+0x56>
	return z_impl_k_mutex_unlock(mutex);
   37082:	4620      	mov	r0, r4
   37084:	f7fa fd00 	bl	31a88 <z_impl_k_mutex_unlock>
		advertise_ept(rpmsg_inst, rpmsg_ept, name, dest);
   37088:	4633      	mov	r3, r6
   3708a:	462a      	mov	r2, r5
   3708c:	9901      	ldr	r1, [sp, #4]
   3708e:	4638      	mov	r0, r7
   37090:	f7e0 fefa 	bl	17e88 <advertise_ept>
   37094:	e7e3      	b.n	3705e <ns_bind_cb+0x16>
   37096:	4620      	mov	r0, r4
   37098:	f7fa fcf6 	bl	31a88 <z_impl_k_mutex_unlock>
		return;
   3709c:	e7df      	b.n	3705e <ns_bind_cb+0x16>
		strncpy(rpmsg_ept->name, name, sizeof(rpmsg_ept->name));
   3709e:	2220      	movs	r2, #32
   370a0:	4629      	mov	r1, r5
   370a2:	f103 0040 	add.w	r0, r3, #64	; 0x40
   370a6:	f001 f938 	bl	3831a <strncpy>
		rpmsg_ept->dest = dest;
   370aa:	9b01      	ldr	r3, [sp, #4]
   370ac:	661e      	str	r6, [r3, #96]	; 0x60
   370ae:	4620      	mov	r0, r4
   370b0:	f7fa fcea 	bl	31a88 <z_impl_k_mutex_unlock>
   370b4:	e7d3      	b.n	3705e <ns_bind_cb+0x16>

000370b6 <register_ept_on_remote>:
{
   370b6:	b570      	push	{r4, r5, r6, lr}
   370b8:	4606      	mov	r6, r0
   370ba:	460d      	mov	r5, r1
	rpmsg_ept = get_available_ept_slot(rpmsg_inst);
   370bc:	f7e0 fec6 	bl	17e4c <get_available_ept_slot>
	if (rpmsg_ept == NULL) {
   370c0:	4604      	mov	r4, r0
   370c2:	b198      	cbz	r0, 370ec <register_ept_on_remote+0x36>
	rpmsg_ept->cb = &cfg->cb;
   370c4:	f105 0308 	add.w	r3, r5, #8
   370c8:	6683      	str	r3, [r0, #104]	; 0x68
	rpmsg_ept->priv = cfg->priv;
   370ca:	696b      	ldr	r3, [r5, #20]
   370cc:	66c3      	str	r3, [r0, #108]	; 0x6c
	rpmsg_ept->bound = false;
   370ce:	2300      	movs	r3, #0
   370d0:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
	rpmsg_ept->ep.priv = rpmsg_ept;
   370d4:	63e0      	str	r0, [r4, #60]	; 0x3c
	strncpy(rpmsg_ept->name, cfg->name, sizeof(rpmsg_ept->name));
   370d6:	2220      	movs	r2, #32
   370d8:	6829      	ldr	r1, [r5, #0]
   370da:	3040      	adds	r0, #64	; 0x40
   370dc:	f001 f91d 	bl	3831a <strncpy>
	err = ipc_rpmsg_register_ept(rpmsg_inst, RPMSG_REMOTE, rpmsg_ept);
   370e0:	4622      	mov	r2, r4
   370e2:	2101      	movs	r1, #1
   370e4:	4630      	mov	r0, r6
   370e6:	f7e1 f813 	bl	18110 <ipc_rpmsg_register_ept>
	if (err != 0) {
   370ea:	b908      	cbnz	r0, 370f0 <register_ept_on_remote+0x3a>
}
   370ec:	4620      	mov	r0, r4
   370ee:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   370f0:	2400      	movs	r4, #0
   370f2:	e7fb      	b.n	370ec <register_ept_on_remote+0x36>

000370f4 <register_ept>:
	struct backend_data_t *data = instance->data;
   370f4:	6900      	ldr	r0, [r0, #16]
	if (atomic_get(&data->state) != STATE_INITED) {
   370f6:	f500 7367 	add.w	r3, r0, #924	; 0x39c
   370fa:	e8d3 3faf 	lda	r3, [r3]
   370fe:	2b02      	cmp	r3, #2
   37100:	d112      	bne.n	37128 <register_ept+0x34>
{
   37102:	b510      	push	{r4, lr}
   37104:	460c      	mov	r4, r1
   37106:	4611      	mov	r1, r2
	if (cfg->name == NULL || cfg->name[0] == '\0') {
   37108:	6813      	ldr	r3, [r2, #0]
   3710a:	b183      	cbz	r3, 3712e <register_ept+0x3a>
   3710c:	781b      	ldrb	r3, [r3, #0]
   3710e:	b18b      	cbz	r3, 37134 <register_ept+0x40>
	rpmsg_ept = (data->role == ROLE_HOST) ?
   37110:	f8d0 3398 	ldr.w	r3, [r0, #920]	; 0x398
			register_ept_on_host(rpmsg_inst, cfg) :
   37114:	b92b      	cbnz	r3, 37122 <register_ept+0x2e>
   37116:	f7ff ff5e 	bl	36fd6 <register_ept_on_host>
	if (rpmsg_ept == NULL) {
   3711a:	b170      	cbz	r0, 3713a <register_ept+0x46>
	(*token) = rpmsg_ept;
   3711c:	6020      	str	r0, [r4, #0]
	return 0;
   3711e:	2000      	movs	r0, #0
}
   37120:	bd10      	pop	{r4, pc}
			register_ept_on_remote(rpmsg_inst, cfg);
   37122:	f7ff ffc8 	bl	370b6 <register_ept_on_remote>
   37126:	e7f8      	b.n	3711a <register_ept+0x26>
		return -EBUSY;
   37128:	f06f 000f 	mvn.w	r0, #15
}
   3712c:	4770      	bx	lr
		return -EINVAL;
   3712e:	f06f 0015 	mvn.w	r0, #21
   37132:	e7f5      	b.n	37120 <register_ept+0x2c>
   37134:	f06f 0015 	mvn.w	r0, #21
   37138:	e7f2      	b.n	37120 <register_ept+0x2c>
		return -EINVAL;
   3713a:	f06f 0015 	mvn.w	r0, #21
   3713e:	e7ef      	b.n	37120 <register_ept+0x2c>

00037140 <ept_cb>:
{
   37140:	b510      	push	{r4, lr}
   37142:	9b02      	ldr	r3, [sp, #8]
	if (len == 0) {
   37144:	b142      	cbz	r2, 37158 <ept_cb+0x18>
   37146:	4608      	mov	r0, r1
   37148:	4611      	mov	r1, r2
	if (ept->cb->received) {
   3714a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   3714c:	6854      	ldr	r4, [r2, #4]
   3714e:	b10c      	cbz	r4, 37154 <ept_cb+0x14>
		ept->cb->received(data, len, ept->priv);
   37150:	6eda      	ldr	r2, [r3, #108]	; 0x6c
   37152:	47a0      	blx	r4
}
   37154:	2000      	movs	r0, #0
   37156:	bd10      	pop	{r4, pc}
		if (!ept->bound) {
   37158:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   3715c:	2a00      	cmp	r2, #0
   3715e:	d1f9      	bne.n	37154 <ept_cb+0x14>
			ept->bound = true;
   37160:	2201      	movs	r2, #1
   37162:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
			bound_cb(ept);
   37166:	4618      	mov	r0, r3
   37168:	f7e0 fee2 	bl	17f30 <bound_cb>
		return RPMSG_SUCCESS;
   3716c:	e7f2      	b.n	37154 <ept_cb+0x14>

0003716e <mbox_deinit>:
{
   3716e:	b538      	push	{r3, r4, r5, lr}
	const struct backend_config_t *conf = instance->config;
   37170:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   37172:	6904      	ldr	r4, [r0, #16]
	err = mbox_set_enabled(&conf->mbox_rx, 0);
   37174:	f103 0014 	add.w	r0, r3, #20
	return z_impl_mbox_set_enabled(channel, enable);
   37178:	2100      	movs	r1, #0
   3717a:	f7ff fe3a 	bl	36df2 <z_impl_mbox_set_enabled>
	if (err != 0) {
   3717e:	4605      	mov	r5, r0
   37180:	b108      	cbz	r0, 37186 <mbox_deinit+0x18>
}
   37182:	4628      	mov	r0, r5
   37184:	bd38      	pop	{r3, r4, r5, pc}
	k_work_queue_drain(&data->mbox_wq, 1);
   37186:	f504 7430 	add.w	r4, r4, #704	; 0x2c0
   3718a:	2101      	movs	r1, #1
   3718c:	4620      	mov	r0, r4
   3718e:	f7fb fa73 	bl	32678 <k_work_queue_drain>
	z_impl_k_thread_abort(thread);
   37192:	4620      	mov	r0, r4
   37194:	f7e3 fa1c 	bl	1a5d0 <z_impl_k_thread_abort>
	return 0;
   37198:	e7f3      	b.n	37182 <mbox_deinit+0x14>

0003719a <close>:
{
   3719a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3719e:	4604      	mov	r4, r0
	const struct backend_config_t *conf = instance->config;
   371a0:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct backend_data_t *data = instance->data;
   371a4:	6906      	ldr	r6, [r0, #16]
	if (!atomic_cas(&data->state, STATE_INITED, STATE_BUSY)) {
   371a6:	f506 7767 	add.w	r7, r6, #924	; 0x39c
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   371aa:	2301      	movs	r3, #1
   371ac:	e8d7 2fef 	ldaex	r2, [r7]
   371b0:	2a02      	cmp	r2, #2
   371b2:	d103      	bne.n	371bc <close+0x22>
   371b4:	e8c7 3fe1 	stlex	r1, r3, [r7]
   371b8:	2900      	cmp	r1, #0
   371ba:	d1f7      	bne.n	371ac <close+0x12>
   371bc:	d137      	bne.n	3722e <close+0x94>
	if (!check_endpoints_freed(rpmsg_inst)) {
   371be:	4630      	mov	r0, r6
   371c0:	f7e0 fe4c 	bl	17e5c <check_endpoints_freed>
   371c4:	b3b0      	cbz	r0, 37234 <close+0x9a>
	err = ipc_rpmsg_deinit(rpmsg_inst, data->role);
   371c6:	f8d6 1398 	ldr.w	r1, [r6, #920]	; 0x398
   371ca:	4630      	mov	r0, r6
   371cc:	f000 f8aa 	bl	37324 <ipc_rpmsg_deinit>
	if (err != 0) {
   371d0:	4605      	mov	r5, r0
   371d2:	b148      	cbz	r0, 371e8 <close+0x4e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   371d4:	2302      	movs	r3, #2
   371d6:	e8d7 2fef 	ldaex	r2, [r7]
   371da:	e8c7 3fe1 	stlex	r1, r3, [r7]
   371de:	2900      	cmp	r1, #0
   371e0:	d1f9      	bne.n	371d6 <close+0x3c>
}
   371e2:	4628      	mov	r0, r5
   371e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = mbox_deinit(instance);
   371e8:	4620      	mov	r0, r4
   371ea:	f7ff ffc0 	bl	3716e <mbox_deinit>
	if (err != 0) {
   371ee:	4605      	mov	r5, r0
   371f0:	2800      	cmp	r0, #0
   371f2:	d1ef      	bne.n	371d4 <close+0x3a>
	err = ipc_static_vrings_deinit(&data->vr, conf->role);
   371f4:	f506 74e4 	add.w	r4, r6, #456	; 0x1c8
   371f8:	f8d8 1000 	ldr.w	r1, [r8]
   371fc:	4620      	mov	r0, r4
   371fe:	f000 f902 	bl	37406 <ipc_static_vrings_deinit>
	if (err != 0) {
   37202:	4605      	mov	r5, r0
   37204:	2800      	cmp	r0, #0
   37206:	d1e5      	bne.n	371d4 <close+0x3a>
	memset(&data->vr, 0, sizeof(struct ipc_static_vrings));
   37208:	22e8      	movs	r2, #232	; 0xe8
   3720a:	2100      	movs	r1, #0
   3720c:	4620      	mov	r0, r4
   3720e:	f001 f923 	bl	38458 <memset>
	memset(rpmsg_inst, 0, sizeof(struct ipc_rpmsg_instance));
   37212:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
   37216:	2100      	movs	r1, #0
   37218:	4630      	mov	r0, r6
   3721a:	f001 f91d 	bl	38458 <memset>
   3721e:	2300      	movs	r3, #0
   37220:	e8d7 2fef 	ldaex	r2, [r7]
   37224:	e8c7 3fe1 	stlex	r1, r3, [r7]
   37228:	2900      	cmp	r1, #0
   3722a:	d0da      	beq.n	371e2 <close+0x48>
   3722c:	e7f8      	b.n	37220 <close+0x86>
		return -EALREADY;
   3722e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   37232:	e7d6      	b.n	371e2 <close+0x48>
		return -EBUSY;
   37234:	f06f 050f 	mvn.w	r5, #15
   37238:	e7d3      	b.n	371e2 <close+0x48>

0003723a <vr_shm_configure>:
{
   3723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3723e:	4605      	mov	r5, r0
   37240:	460c      	mov	r4, r1
	num_desc = optimal_num_desc(conf->shm_size, conf->buffer_size);
   37242:	688a      	ldr	r2, [r1, #8]
   37244:	6a8b      	ldr	r3, [r1, #40]	; 0x28
static inline unsigned int optimal_num_desc(size_t shm_size, unsigned int buf_size)
{
	size_t available, single_alloc;
	unsigned int num_desc;

	available = shm_size - VDEV_STATUS_SIZE;
   37246:	3a04      	subs	r2, #4
	single_alloc = VRING_COUNT * (vq_ring_size(1, buf_size) + vring_size(1, VRING_ALIGNMENT));
   37248:	3326      	adds	r3, #38	; 0x26
   3724a:	005b      	lsls	r3, r3, #1

	num_desc = (unsigned int) (available / single_alloc);
   3724c:	fbb2 f7f3 	udiv	r7, r2, r3
 * @return most significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_msb_set(uint32_t op)
{
	if (op == 0) {
   37250:	4293      	cmp	r3, r2
   37252:	d833      	bhi.n	372bc <vr_shm_configure+0x82>
		return 0;
	}

	return 32 - __builtin_clz(op);
   37254:	fab7 f787 	clz	r7, r7
   37258:	f1c7 0720 	rsb	r7, r7, #32

	return (1 << (find_msb_set(num_desc) - 1));
   3725c:	3f01      	subs	r7, #1
   3725e:	2601      	movs	r6, #1
	if (num_desc == 0) {
   37260:	40be      	lsls	r6, r7
   37262:	d02d      	beq.n	372c0 <vr_shm_configure+0x86>
	vr->shm_addr = conf->shm_addr + VDEV_STATUS_SIZE;
   37264:	6863      	ldr	r3, [r4, #4]
   37266:	f103 0804 	add.w	r8, r3, #4
   3726a:	f8c5 8098 	str.w	r8, [r5, #152]	; 0x98
	vr->shm_size = shm_size(num_desc, conf->buffer_size) - VDEV_STATUS_SIZE;
   3726e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   37270:	4630      	mov	r0, r6
   37272:	f7ff fdcb 	bl	36e0c <shm_size>
   37276:	3804      	subs	r0, #4
   37278:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
	vr->rx_addr = vr->shm_addr + VRING_COUNT * vq_ring_size(num_desc, conf->buffer_size);
   3727c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	return (buf_size * num);
   3727e:	40ba      	lsls	r2, r7
   37280:	eb08 0242 	add.w	r2, r8, r2, lsl #1
   37284:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
	size = num * sizeof(struct vring_desc);
   37288:	2310      	movs	r3, #16
   3728a:	40bb      	lsls	r3, r7
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   3728c:	1cf1      	adds	r1, r6, #3
   3728e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	size = (size + align - 1) & ~(align - 1);
   37292:	3303      	adds	r3, #3
   37294:	f023 0303 	bic.w	r3, r3, #3
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
   37298:	2108      	movs	r1, #8
   3729a:	40b9      	lsls	r1, r7
	size += sizeof(struct vring_used) +
   3729c:	440b      	add	r3, r1
   3729e:	3306      	adds	r3, #6
	vr->tx_addr = ROUND_UP(vr->rx_addr + vring_size(num_desc, VRING_ALIGNMENT),
   372a0:	441a      	add	r2, r3
   372a2:	3203      	adds	r2, #3
   372a4:	f022 0203 	bic.w	r2, r2, #3
   372a8:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
	vr->status_reg_addr = conf->shm_addr;
   372ac:	6863      	ldr	r3, [r4, #4]
   372ae:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
	vr->vring_size = num_desc;
   372b2:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
	return 0;
   372b6:	2000      	movs	r0, #0
}
   372b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   372bc:	2700      	movs	r7, #0
   372be:	e7cd      	b.n	3725c <vr_shm_configure+0x22>
		return -ENOMEM;
   372c0:	f06f 000b 	mvn.w	r0, #11
   372c4:	e7f8      	b.n	372b8 <vr_shm_configure+0x7e>

000372c6 <mbox_callback>:
{
   372c6:	b508      	push	{r3, lr}
	k_work_submit_to_queue(&data->mbox_wq, &data->mbox_work);
   372c8:	f502 712c 	add.w	r1, r2, #688	; 0x2b0
   372cc:	f502 7030 	add.w	r0, r2, #704	; 0x2c0
   372d0:	f007 fc2f 	bl	3eb32 <k_work_submit_to_queue>
}
   372d4:	bd08      	pop	{r3, pc}

000372d6 <mbox_callback_process>:
{
   372d6:	b508      	push	{r3, lr}
	vq_id = (data->role == ROLE_HOST) ? VIRTQUEUE_ID_HOST : VIRTQUEUE_ID_REMOTE;
   372d8:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   372dc:	f5a0 702c 	sub.w	r0, r0, #688	; 0x2b0
   372e0:	3b00      	subs	r3, #0
   372e2:	bf18      	it	ne
   372e4:	2301      	movne	r3, #1
	virtqueue_notification(data->vr.vq[vq_id]);
   372e6:	33a6      	adds	r3, #166	; 0xa6
   372e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   372ec:	6840      	ldr	r0, [r0, #4]
   372ee:	f006 ffe4 	bl	3e2ba <virtqueue_notification>
}
   372f2:	bd08      	pop	{r3, pc}

000372f4 <backend_init>:
{
   372f4:	b510      	push	{r4, lr}
	const struct backend_config_t *conf = instance->config;
   372f6:	6843      	ldr	r3, [r0, #4]
	struct backend_data_t *data = instance->data;
   372f8:	6904      	ldr	r4, [r0, #16]
	data->role = conf->role;
   372fa:	681b      	ldr	r3, [r3, #0]
   372fc:	f8c4 3398 	str.w	r3, [r4, #920]	; 0x398
	k_mutex_init(&data->rpmsg_inst.mtx);
   37300:	f504 70d8 	add.w	r0, r4, #432	; 0x1b0
	return z_impl_k_mutex_init(mutex);
   37304:	f007 fb0a 	bl	3e91c <z_impl_k_mutex_init>
	atomic_set(&data->state, STATE_READY);
   37308:	f504 7467 	add.w	r4, r4, #924	; 0x39c
   3730c:	2000      	movs	r0, #0
   3730e:	e8d4 3fef 	ldaex	r3, [r4]
   37312:	e8c4 0fe2 	stlex	r2, r0, [r4]
   37316:	2a00      	cmp	r2, #0
   37318:	d1f9      	bne.n	3730e <backend_init+0x1a>
}
   3731a:	bd10      	pop	{r4, pc}

0003731c <rpmsg_service_unbind>:
{
   3731c:	b508      	push	{r3, lr}
	rpmsg_destroy_ept(ep);
   3731e:	f007 f8a6 	bl	3e46e <rpmsg_destroy_ept>
}
   37322:	bd08      	pop	{r3, pc}

00037324 <ipc_rpmsg_deinit>:

int ipc_rpmsg_deinit(struct ipc_rpmsg_instance *instance,
		   unsigned int role)
{
	if (!instance) {
   37324:	b180      	cbz	r0, 37348 <ipc_rpmsg_deinit+0x24>
{
   37326:	b538      	push	{r3, r4, r5, lr}
   37328:	460c      	mov	r4, r1
   3732a:	4605      	mov	r5, r0
		return -EINVAL;
	}

	rpmsg_deinit_vdev(&instance->rvdev);
   3732c:	30e0      	adds	r0, #224	; 0xe0
   3732e:	f007 fa5d 	bl	3e7ec <rpmsg_deinit_vdev>

	if (role == RPMSG_HOST) {
   37332:	b10c      	cbz	r4, 37338 <ipc_rpmsg_deinit+0x14>
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
	}

	return 0;
   37334:	2000      	movs	r0, #0
}
   37336:	bd38      	pop	{r3, r4, r5, pc}
		memset(&instance->shm_pool, 0, sizeof(struct rpmsg_virtio_shm_pool));
   37338:	220c      	movs	r2, #12
   3733a:	2100      	movs	r1, #0
   3733c:	f505 70ce 	add.w	r0, r5, #412	; 0x19c
   37340:	f001 f88a 	bl	38458 <memset>
	return 0;
   37344:	2000      	movs	r0, #0
   37346:	e7f6      	b.n	37336 <ipc_rpmsg_deinit+0x12>
		return -EINVAL;
   37348:	f06f 0015 	mvn.w	r0, #21
}
   3734c:	4770      	bx	lr

0003734e <virtio_notify>:
{
   3734e:	b508      	push	{r3, lr}
	vr = CONTAINER_OF(vq->vq_dev, struct ipc_static_vrings, vdev);
   37350:	6802      	ldr	r2, [r0, #0]
	if (vr->notify_cb) {
   37352:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
   37356:	b113      	cbz	r3, 3735e <virtio_notify+0x10>
		vr->notify_cb(vq, vr->priv);
   37358:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   3735c:	4798      	blx	r3
}
   3735e:	bd08      	pop	{r3, pc}

00037360 <virtio_set_features>:
}
   37360:	4770      	bx	lr

00037362 <virtio_set_status>:
	if (p_vdev->role != VIRTIO_DEV_DRIVER) {
   37362:	6983      	ldr	r3, [r0, #24]
   37364:	b913      	cbnz	r3, 3736c <virtio_set_status+0xa>
	sys_write8(status, vr->status_reg_addr);
   37366:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
}

static ALWAYS_INLINE void sys_write8(uint8_t data, mem_addr_t addr)
{
	*(volatile uint8_t *)addr = data;
   3736a:	7019      	strb	r1, [r3, #0]
}
   3736c:	4770      	bx	lr

0003736e <virtio_get_features>:
}
   3736e:	2001      	movs	r0, #1
   37370:	4770      	bx	lr

00037372 <virtio_get_status>:
	if (p_vdev->role == VIRTIO_DEV_DEVICE) {
   37372:	6983      	ldr	r3, [r0, #24]
   37374:	2b01      	cmp	r3, #1
   37376:	d001      	beq.n	3737c <virtio_get_status+0xa>
	ret = VIRTIO_CONFIG_STATUS_DRIVER_OK;
   37378:	2004      	movs	r0, #4
}
   3737a:	4770      	bx	lr
		ret = sys_read8(vr->status_reg_addr);
   3737c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
	return *(volatile uint8_t *)addr;
   37380:	7818      	ldrb	r0, [r3, #0]
   37382:	b2c0      	uxtb	r0, r0
   37384:	4770      	bx	lr

00037386 <metal_io_finish>:
{
   37386:	b510      	push	{r4, lr}
   37388:	4604      	mov	r4, r0
	if (io->ops.close)
   3738a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3738c:	b103      	cbz	r3, 37390 <metal_io_finish+0xa>
		(*io->ops.close)(io);
   3738e:	4798      	blx	r3
	memset(io, 0, sizeof(*io));
   37390:	2238      	movs	r2, #56	; 0x38
   37392:	2100      	movs	r1, #0
   37394:	4620      	mov	r0, r4
   37396:	f001 f85f 	bl	38458 <memset>
}
   3739a:	bd10      	pop	{r4, pc}

0003739c <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
   3739c:	b538      	push	{r3, r4, r5, lr}
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
		 num_desc_extra * sizeof(struct vq_desc_extra);
   3739e:	00c4      	lsls	r4, r0, #3
	uint32_t vq_size = sizeof(struct virtqueue) +
   373a0:	3434      	adds	r4, #52	; 0x34
	return k_malloc(size);
   373a2:	4620      	mov	r0, r4
   373a4:	f007 fd5a 	bl	3ee5c <k_malloc>

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
	if (vqs) {
   373a8:	4605      	mov	r5, r0
   373aa:	b118      	cbz	r0, 373b4 <virtqueue_allocate+0x18>
		memset(vqs, 0x00, vq_size);
   373ac:	4622      	mov	r2, r4
   373ae:	2100      	movs	r1, #0
   373b0:	f001 f852 	bl	38458 <memset>
	}

	return vqs;
}
   373b4:	4628      	mov	r0, r5
   373b6:	bd38      	pop	{r3, r4, r5, pc}

000373b8 <vq_teardown>:
{
   373b8:	b510      	push	{r4, lr}
   373ba:	4604      	mov	r4, r0
	memset(&vr->vdev, 0, sizeof(struct virtio_device));
   373bc:	2230      	movs	r2, #48	; 0x30
   373be:	2100      	movs	r1, #0
   373c0:	f001 f84a 	bl	38458 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_1]), 0, sizeof(struct virtio_vring_info));
   373c4:	2218      	movs	r2, #24
   373c6:	2100      	movs	r1, #0
   373c8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   373cc:	f001 f844 	bl	38458 <memset>
	memset(&(vr->rvrings[RPMSG_VQ_0]), 0, sizeof(struct virtio_vring_info));
   373d0:	2218      	movs	r2, #24
   373d2:	2100      	movs	r1, #0
   373d4:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
   373d8:	f001 f83e 	bl	38458 <memset>
	virtqueue_free(vr->vq[RPMSG_VQ_1]);
   373dc:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
   373e0:	f7f8 fe10 	bl	30004 <virtqueue_free>
	virtqueue_free(vr->vq[RPMSG_VQ_0]);
   373e4:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
   373e8:	f7f8 fe0c 	bl	30004 <virtqueue_free>
}
   373ec:	2000      	movs	r0, #0
   373ee:	bd10      	pop	{r4, pc}

000373f0 <libmetal_teardown>:
{
   373f0:	b510      	push	{r4, lr}
	vr->shm_io = 0;
   373f2:	2400      	movs	r4, #0
   373f4:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	metal_device_close(&vr->shm_device);
   373f8:	3034      	adds	r0, #52	; 0x34
   373fa:	f7f8 fd23 	bl	2fe44 <metal_device_close>
	metal_finish();
   373fe:	f7f8 fd79 	bl	2fef4 <metal_finish>
}
   37402:	4620      	mov	r0, r4
   37404:	bd10      	pop	{r4, pc}

00037406 <ipc_static_vrings_deinit>:

int ipc_static_vrings_deinit(struct ipc_static_vrings *vr, unsigned int role)
{
   37406:	b538      	push	{r3, r4, r5, lr}
   37408:	4604      	mov	r4, r0
	int err;

	err = vq_teardown(vr, role);
   3740a:	f7ff ffd5 	bl	373b8 <vq_teardown>
	if (err != 0) {
   3740e:	4605      	mov	r5, r0
   37410:	b108      	cbz	r0, 37416 <ipc_static_vrings_deinit+0x10>
	}

	metal_io_finish(vr->shm_device.regions);

	return 0;
}
   37412:	4628      	mov	r0, r5
   37414:	bd38      	pop	{r3, r4, r5, pc}
	err = libmetal_teardown(vr);
   37416:	4620      	mov	r0, r4
   37418:	f7ff ffea 	bl	373f0 <libmetal_teardown>
	if (err != 0) {
   3741c:	4605      	mov	r5, r0
   3741e:	2800      	cmp	r0, #0
   37420:	d1f7      	bne.n	37412 <ipc_static_vrings_deinit+0xc>
	metal_io_finish(vr->shm_device.regions);
   37422:	f104 0040 	add.w	r0, r4, #64	; 0x40
   37426:	f7ff ffae 	bl	37386 <metal_io_finish>
	return 0;
   3742a:	e7f2      	b.n	37412 <ipc_static_vrings_deinit+0xc>

0003742c <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   3742c:	4770      	bx	lr

0003742e <should_bail>:
	if (info->start_offset < data->area_off) {
   3742e:	6800      	ldr	r0, [r0, #0]
   37430:	684b      	ldr	r3, [r1, #4]
   37432:	4298      	cmp	r0, r3
   37434:	d30a      	bcc.n	3744c <should_bail+0x1e>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   37436:	f8d1 c008 	ldr.w	ip, [r1, #8]
   3743a:	4463      	add	r3, ip
   3743c:	4298      	cmp	r0, r3
   3743e:	d208      	bcs.n	37452 <should_bail+0x24>
	} else if (data->ret_idx >= data->ret_len) {
   37440:	6908      	ldr	r0, [r1, #16]
   37442:	694b      	ldr	r3, [r1, #20]
   37444:	4298      	cmp	r0, r3
   37446:	d208      	bcs.n	3745a <should_bail+0x2c>
	return false;
   37448:	2000      	movs	r0, #0
}
   3744a:	4770      	bx	lr
		*bail_value = true;
   3744c:	2001      	movs	r0, #1
   3744e:	7010      	strb	r0, [r2, #0]
		return true;
   37450:	4770      	bx	lr
		*bail_value = false;
   37452:	2300      	movs	r3, #0
   37454:	7013      	strb	r3, [r2, #0]
		return true;
   37456:	2001      	movs	r0, #1
   37458:	4770      	bx	lr
		data->status = -ENOMEM;
   3745a:	f06f 030b 	mvn.w	r3, #11
   3745e:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   37460:	2300      	movs	r3, #0
   37462:	7013      	strb	r3, [r2, #0]
		return true;
   37464:	2001      	movs	r0, #1
   37466:	4770      	bx	lr

00037468 <get_sectors_cb>:
{
   37468:	b570      	push	{r4, r5, r6, lr}
   3746a:	b082      	sub	sp, #8
   3746c:	4605      	mov	r5, r0
   3746e:	460c      	mov	r4, r1
	struct flash_sector *ret = data->ret;
   37470:	68ce      	ldr	r6, [r1, #12]
	if (should_bail(info, data, &bail)) {
   37472:	f10d 0207 	add.w	r2, sp, #7
   37476:	f7ff ffda 	bl	3742e <should_bail>
   3747a:	b980      	cbnz	r0, 3749e <get_sectors_cb+0x36>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3747c:	682b      	ldr	r3, [r5, #0]
   3747e:	6861      	ldr	r1, [r4, #4]
   37480:	6922      	ldr	r2, [r4, #16]
   37482:	1a5b      	subs	r3, r3, r1
   37484:	f846 3032 	str.w	r3, [r6, r2, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   37488:	6923      	ldr	r3, [r4, #16]
   3748a:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   3748e:	686b      	ldr	r3, [r5, #4]
   37490:	6073      	str	r3, [r6, #4]
	data->ret_idx++;
   37492:	6923      	ldr	r3, [r4, #16]
   37494:	3301      	adds	r3, #1
   37496:	6123      	str	r3, [r4, #16]
	return true;
   37498:	2001      	movs	r0, #1
}
   3749a:	b002      	add	sp, #8
   3749c:	bd70      	pop	{r4, r5, r6, pc}
		return bail;
   3749e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   374a2:	e7fa      	b.n	3749a <get_sectors_cb+0x32>

000374a4 <flash_area_layout>:
{
   374a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   374a8:	b082      	sub	sp, #8
   374aa:	4605      	mov	r5, r0
   374ac:	460e      	mov	r6, r1
   374ae:	4690      	mov	r8, r2
   374b0:	461f      	mov	r7, r3
   374b2:	9c08      	ldr	r4, [sp, #32]
	int rc = flash_area_open(idx, &fa);
   374b4:	a901      	add	r1, sp, #4
   374b6:	b2c0      	uxtb	r0, r0
   374b8:	f7e0 ff38 	bl	1832c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   374bc:	2800      	cmp	r0, #0
   374be:	db1f      	blt.n	37500 <flash_area_layout+0x5c>
   374c0:	9b01      	ldr	r3, [sp, #4]
   374c2:	b303      	cbz	r3, 37506 <flash_area_layout+0x62>
	cb_data->area_idx = idx;
   374c4:	6025      	str	r5, [r4, #0]
	cb_data->area_off = fa->fa_off;
   374c6:	9801      	ldr	r0, [sp, #4]
   374c8:	6843      	ldr	r3, [r0, #4]
   374ca:	6063      	str	r3, [r4, #4]
	cb_data->area_len = fa->fa_size;
   374cc:	6883      	ldr	r3, [r0, #8]
   374ce:	60a3      	str	r3, [r4, #8]
	cb_data->ret = ret;
   374d0:	f8c4 800c 	str.w	r8, [r4, #12]
	cb_data->ret_idx = 0U;
   374d4:	2200      	movs	r2, #0
   374d6:	6122      	str	r2, [r4, #16]
	cb_data->ret_len = *cnt;
   374d8:	6833      	ldr	r3, [r6, #0]
   374da:	6163      	str	r3, [r4, #20]
	cb_data->status = 0;
   374dc:	61a2      	str	r2, [r4, #24]
	flash_dev = fa->fa_dev;
   374de:	68c5      	ldr	r5, [r0, #12]
	flash_area_close(fa);
   374e0:	f7ff ffa4 	bl	3742c <flash_area_close>
	if (flash_dev == NULL) {
   374e4:	b195      	cbz	r5, 3750c <flash_area_layout+0x68>
	flash_page_foreach(flash_dev, cb, cb_data);
   374e6:	4622      	mov	r2, r4
   374e8:	4639      	mov	r1, r7
   374ea:	4628      	mov	r0, r5
   374ec:	f005 f90c 	bl	3c708 <flash_page_foreach>
	if (cb_data->status == 0) {
   374f0:	69a3      	ldr	r3, [r4, #24]
   374f2:	b90b      	cbnz	r3, 374f8 <flash_area_layout+0x54>
		*cnt = cb_data->ret_idx;
   374f4:	6923      	ldr	r3, [r4, #16]
   374f6:	6033      	str	r3, [r6, #0]
	return cb_data->status;
   374f8:	69a0      	ldr	r0, [r4, #24]
}
   374fa:	b002      	add	sp, #8
   374fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   37500:	f06f 0015 	mvn.w	r0, #21
   37504:	e7f9      	b.n	374fa <flash_area_layout+0x56>
   37506:	f06f 0015 	mvn.w	r0, #21
   3750a:	e7f6      	b.n	374fa <flash_area_layout+0x56>
		return -ENODEV;
   3750c:	f06f 0012 	mvn.w	r0, #18
   37510:	e7f3      	b.n	374fa <flash_area_layout+0x56>

00037512 <settings_load>:
{
   37512:	b508      	push	{r3, lr}
	return settings_load_subtree(NULL);
   37514:	2000      	movs	r0, #0
   37516:	f7e0 ff6d 	bl	183f4 <settings_load_subtree>
}
   3751a:	bd08      	pop	{r3, pc}

0003751c <settings_delete>:
{
   3751c:	b508      	push	{r3, lr}
	return settings_save_one(name, NULL, 0);
   3751e:	2200      	movs	r2, #0
   37520:	4611      	mov	r1, r2
   37522:	f7e0 ff2b 	bl	1837c <settings_save_one>
}
   37526:	bd08      	pop	{r3, pc}

00037528 <settings_name_steq>:
{
   37528:	b410      	push	{r4}
	if (next) {
   3752a:	4614      	mov	r4, r2
   3752c:	b10a      	cbz	r2, 37532 <settings_name_steq+0xa>
		*next = NULL;
   3752e:	2300      	movs	r3, #0
   37530:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   37532:	b1d0      	cbz	r0, 3756a <settings_name_steq+0x42>
   37534:	b919      	cbnz	r1, 3753e <settings_name_steq+0x16>
		return 0;
   37536:	2000      	movs	r0, #0
   37538:	e01a      	b.n	37570 <settings_name_steq+0x48>
		key++;
   3753a:	3101      	adds	r1, #1
		name++;
   3753c:	3001      	adds	r0, #1
	while ((*key != '\0') && (*key == *name) &&
   3753e:	780a      	ldrb	r2, [r1, #0]
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   37540:	b12a      	cbz	r2, 3754e <settings_name_steq+0x26>
	while ((*key != '\0') && (*key == *name) &&
   37542:	7803      	ldrb	r3, [r0, #0]
   37544:	429a      	cmp	r2, r3
   37546:	d102      	bne.n	3754e <settings_name_steq+0x26>
   37548:	b10b      	cbz	r3, 3754e <settings_name_steq+0x26>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3754a:	2b3d      	cmp	r3, #61	; 0x3d
   3754c:	d1f5      	bne.n	3753a <settings_name_steq+0x12>
	if (*key != '\0') {
   3754e:	b972      	cbnz	r2, 3756e <settings_name_steq+0x46>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   37550:	7803      	ldrb	r3, [r0, #0]
   37552:	2b2f      	cmp	r3, #47	; 0x2f
   37554:	d004      	beq.n	37560 <settings_name_steq+0x38>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   37556:	2b3d      	cmp	r3, #61	; 0x3d
   37558:	d00c      	beq.n	37574 <settings_name_steq+0x4c>
   3755a:	b16b      	cbz	r3, 37578 <settings_name_steq+0x50>
	return 0;
   3755c:	2000      	movs	r0, #0
   3755e:	e007      	b.n	37570 <settings_name_steq+0x48>
		if (next) {
   37560:	b10c      	cbz	r4, 37566 <settings_name_steq+0x3e>
			*next = name + 1;
   37562:	3001      	adds	r0, #1
   37564:	6020      	str	r0, [r4, #0]
		return 1;
   37566:	2001      	movs	r0, #1
   37568:	e002      	b.n	37570 <settings_name_steq+0x48>
		return 0;
   3756a:	2000      	movs	r0, #0
   3756c:	e000      	b.n	37570 <settings_name_steq+0x48>
		return 0;
   3756e:	2000      	movs	r0, #0
}
   37570:	bc10      	pop	{r4}
   37572:	4770      	bx	lr
		return 1;
   37574:	2001      	movs	r0, #1
   37576:	e7fb      	b.n	37570 <settings_name_steq+0x48>
   37578:	2001      	movs	r0, #1
   3757a:	e7f9      	b.n	37570 <settings_name_steq+0x48>

0003757c <settings_name_next>:
{
   3757c:	b410      	push	{r4}
   3757e:	4602      	mov	r2, r0
	if (next) {
   37580:	460c      	mov	r4, r1
   37582:	b109      	cbz	r1, 37588 <settings_name_next+0xc>
		*next = NULL;
   37584:	2300      	movs	r3, #0
   37586:	600b      	str	r3, [r1, #0]
	if (!name) {
   37588:	b192      	cbz	r2, 375b0 <_flash_used+0x10>
	int rc = 0;
   3758a:	2000      	movs	r0, #0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   3758c:	7813      	ldrb	r3, [r2, #0]
   3758e:	b133      	cbz	r3, 3759e <settings_name_next+0x22>
   37590:	2b3d      	cmp	r3, #61	; 0x3d
   37592:	d004      	beq.n	3759e <settings_name_next+0x22>
   37594:	2b2f      	cmp	r3, #47	; 0x2f
   37596:	d002      	beq.n	3759e <settings_name_next+0x22>
		rc++;
   37598:	3001      	adds	r0, #1
		name++;
   3759a:	3201      	adds	r2, #1
   3759c:	e7f6      	b.n	3758c <settings_name_next+0x10>
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3759e:	2b2f      	cmp	r3, #47	; 0x2f
   375a0:	d001      	beq.n	375a6 <_flash_used+0x6>
}
   375a2:	bc10      	pop	{r4}
   375a4:	4770      	bx	lr
		if (next) {
   375a6:	2c00      	cmp	r4, #0
   375a8:	d0fb      	beq.n	375a2 <_flash_used+0x2>
			*next = name + 1;
   375aa:	3201      	adds	r2, #1
   375ac:	6022      	str	r2, [r4, #0]
		return rc;
   375ae:	e7f8      	b.n	375a2 <_flash_used+0x2>
		return 0;
   375b0:	2000      	movs	r0, #0
   375b2:	e7f6      	b.n	375a2 <_flash_used+0x2>

000375b4 <settings_nvs_storage_get>:
static void *settings_nvs_storage_get(struct settings_store *cs)
{
	struct settings_nvs *cf = CONTAINER_OF(cs, struct settings_nvs, cf_store);

	return &cf->cf_nvs;
}
   375b4:	3008      	adds	r0, #8
   375b6:	4770      	bx	lr

000375b8 <settings_nvs_read_fn>:
{
   375b8:	b510      	push	{r4, lr}
   375ba:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   375bc:	4613      	mov	r3, r2
   375be:	460a      	mov	r2, r1
   375c0:	8881      	ldrh	r1, [r0, #4]
   375c2:	6800      	ldr	r0, [r0, #0]
   375c4:	f7ff fbf1 	bl	36daa <nvs_read>
   375c8:	4603      	mov	r3, r0
	if (rc > (ssize_t)len) {
   375ca:	4620      	mov	r0, r4
   375cc:	429c      	cmp	r4, r3
   375ce:	db00      	blt.n	375d2 <settings_nvs_read_fn+0x1a>
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   375d0:	4618      	mov	r0, r3
}
   375d2:	bd10      	pop	{r4, pc}

000375d4 <settings_nvs_save>:
	if (!name) {
   375d4:	2900      	cmp	r1, #0
   375d6:	f000 8093 	beq.w	37700 <settings_nvs_save+0x12c>
{
   375da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   375de:	b097      	sub	sp, #92	; 0x5c
   375e0:	4606      	mov	r6, r0
   375e2:	4690      	mov	r8, r2
   375e4:	4699      	mov	r9, r3
   375e6:	468b      	mov	fp, r1
	delete = ((value == NULL) || (val_len == 0));
   375e8:	b132      	cbz	r2, 375f8 <settings_nvs_save+0x24>
   375ea:	b93b      	cbnz	r3, 375fc <settings_nvs_save+0x28>
   375ec:	2701      	movs	r7, #1
	name_id = cf->last_name_id + 1;
   375ee:	8f35      	ldrh	r5, [r6, #56]	; 0x38
   375f0:	3501      	adds	r5, #1
   375f2:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   375f4:	46aa      	mov	sl, r5
   375f6:	e007      	b.n	37608 <settings_nvs_save+0x34>
	delete = ((value == NULL) || (val_len == 0));
   375f8:	2701      	movs	r7, #1
   375fa:	e7f8      	b.n	375ee <settings_nvs_save+0x1a>
   375fc:	2700      	movs	r7, #0
   375fe:	e7f6      	b.n	375ee <settings_nvs_save+0x1a>
			if (rc == -ENOENT) {
   37600:	f110 0f02 	cmn.w	r0, #2
   37604:	d036      	beq.n	37674 <settings_nvs_save+0xa0>
	delete = ((value == NULL) || (val_len == 0));
   37606:	4625      	mov	r5, r4
		name_id--;
   37608:	1e6c      	subs	r4, r5, #1
   3760a:	b2a4      	uxth	r4, r4
		if (name_id == NVS_NAMECNT_ID) {
   3760c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   37610:	d035      	beq.n	3767e <settings_nvs_save+0xaa>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   37612:	234a      	movs	r3, #74	; 0x4a
   37614:	aa03      	add	r2, sp, #12
   37616:	4621      	mov	r1, r4
   37618:	f106 0008 	add.w	r0, r6, #8
   3761c:	f7ff fbc5 	bl	36daa <nvs_read>
		if (rc < 0) {
   37620:	2800      	cmp	r0, #0
   37622:	dbed      	blt.n	37600 <settings_nvs_save+0x2c>
		rdname[rc] = '\0';
   37624:	f100 0358 	add.w	r3, r0, #88	; 0x58
   37628:	eb0d 0003 	add.w	r0, sp, r3
   3762c:	2300      	movs	r3, #0
   3762e:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   37632:	a903      	add	r1, sp, #12
   37634:	4658      	mov	r0, fp
   37636:	f000 fe9d 	bl	38374 <strcmp>
   3763a:	2800      	cmp	r0, #0
   3763c:	d1e3      	bne.n	37606 <settings_nvs_save+0x32>
		if (!delete) {
   3763e:	b1df      	cbz	r7, 37678 <settings_nvs_save+0xa4>
	write_name = true;
   37640:	9701      	str	r7, [sp, #4]
	if (delete) {
   37642:	b36f      	cbz	r7, 376a0 <settings_nvs_save+0xcc>
		if (name_id == NVS_NAMECNT_ID) {
   37644:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   37648:	d05d      	beq.n	37706 <settings_nvs_save+0x132>
		if (name_id == cf->last_name_id) {
   3764a:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   3764c:	42a3      	cmp	r3, r4
   3764e:	d019      	beq.n	37684 <settings_nvs_save+0xb0>
		rc = nvs_delete(&cf->cf_nvs, name_id);
   37650:	3608      	adds	r6, #8
   37652:	4621      	mov	r1, r4
   37654:	4630      	mov	r0, r6
   37656:	f7ff fba2 	bl	36d9e <nvs_delete>
		if (rc >= 0) {
   3765a:	2800      	cmp	r0, #0
   3765c:	db37      	blt.n	376ce <settings_nvs_save+0xfa>
			rc = nvs_delete(&cf->cf_nvs, name_id +
   3765e:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   37662:	313f      	adds	r1, #63	; 0x3f
   37664:	b289      	uxth	r1, r1
   37666:	4630      	mov	r0, r6
   37668:	f7ff fb99 	bl	36d9e <nvs_delete>
		if (rc < 0) {
   3766c:	2800      	cmp	r0, #0
   3766e:	db2e      	blt.n	376ce <settings_nvs_save+0xfa>
		return 0;
   37670:	2000      	movs	r0, #0
   37672:	e02c      	b.n	376ce <settings_nvs_save+0xfa>
				write_name_id = name_id;
   37674:	46a2      	mov	sl, r4
			continue;
   37676:	e7c6      	b.n	37606 <settings_nvs_save+0x32>
			write_name = false;
   37678:	9701      	str	r7, [sp, #4]
			write_name_id = name_id;
   3767a:	46a2      	mov	sl, r4
		goto found;
   3767c:	e7e1      	b.n	37642 <settings_nvs_save+0x6e>
	write_name = true;
   3767e:	2301      	movs	r3, #1
   37680:	9301      	str	r3, [sp, #4]
   37682:	e7de      	b.n	37642 <settings_nvs_save+0x6e>
			cf->last_name_id--;
   37684:	3b01      	subs	r3, #1
   37686:	4632      	mov	r2, r6
   37688:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   3768c:	2302      	movs	r3, #2
   3768e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   37692:	f106 0008 	add.w	r0, r6, #8
   37696:	f7e0 f8d9 	bl	1784c <nvs_write>
			if (rc < 0) {
   3769a:	2800      	cmp	r0, #0
   3769c:	dad8      	bge.n	37650 <settings_nvs_save+0x7c>
   3769e:	e016      	b.n	376ce <settings_nvs_save+0xfa>
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   376a0:	f5ba 4f40 	cmp.w	sl, #49152	; 0xc000
   376a4:	d031      	beq.n	3770a <settings_nvs_save+0x136>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   376a6:	f106 0408 	add.w	r4, r6, #8
   376aa:	f50a 4180 	add.w	r1, sl, #16384	; 0x4000
   376ae:	464b      	mov	r3, r9
   376b0:	4642      	mov	r2, r8
   376b2:	b289      	uxth	r1, r1
   376b4:	4620      	mov	r0, r4
   376b6:	f7e0 f8c9 	bl	1784c <nvs_write>
	if (rc < 0) {
   376ba:	2800      	cmp	r0, #0
   376bc:	db07      	blt.n	376ce <settings_nvs_save+0xfa>
	if (write_name) {
   376be:	9b01      	ldr	r3, [sp, #4]
   376c0:	b943      	cbnz	r3, 376d4 <settings_nvs_save+0x100>
	if (write_name_id > cf->last_name_id) {
   376c2:	8f33      	ldrh	r3, [r6, #56]	; 0x38
   376c4:	4553      	cmp	r3, sl
   376c6:	d311      	bcc.n	376ec <settings_nvs_save+0x118>
	if (rc < 0) {
   376c8:	2800      	cmp	r0, #0
   376ca:	db00      	blt.n	376ce <settings_nvs_save+0xfa>
	return 0;
   376cc:	2000      	movs	r0, #0
}
   376ce:	b017      	add	sp, #92	; 0x5c
   376d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   376d4:	4658      	mov	r0, fp
   376d6:	f000 fe3a 	bl	3834e <strlen>
   376da:	4603      	mov	r3, r0
   376dc:	465a      	mov	r2, fp
   376de:	4651      	mov	r1, sl
   376e0:	4620      	mov	r0, r4
   376e2:	f7e0 f8b3 	bl	1784c <nvs_write>
		if (rc < 0) {
   376e6:	2800      	cmp	r0, #0
   376e8:	daeb      	bge.n	376c2 <settings_nvs_save+0xee>
   376ea:	e7f0      	b.n	376ce <settings_nvs_save+0xfa>
		cf->last_name_id = write_name_id;
   376ec:	4632      	mov	r2, r6
   376ee:	f822 af38 	strh.w	sl, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   376f2:	2302      	movs	r3, #2
   376f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   376f8:	4620      	mov	r0, r4
   376fa:	f7e0 f8a7 	bl	1784c <nvs_write>
   376fe:	e7e3      	b.n	376c8 <settings_nvs_save+0xf4>
		return -EINVAL;
   37700:	f06f 0015 	mvn.w	r0, #21
}
   37704:	4770      	bx	lr
			return 0;
   37706:	2000      	movs	r0, #0
   37708:	e7e1      	b.n	376ce <settings_nvs_save+0xfa>
		return -ENOMEM;
   3770a:	f06f 000b 	mvn.w	r0, #11
   3770e:	e7de      	b.n	376ce <settings_nvs_save+0xfa>

00037710 <settings_nvs_backend_init>:
{
   37710:	b570      	push	{r4, r5, r6, lr}
   37712:	b082      	sub	sp, #8
	cf->cf_nvs.flash_device = cf->flash_dev;
   37714:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   37716:	6303      	str	r3, [r0, #48]	; 0x30
	if (cf->cf_nvs.flash_device == NULL) {
   37718:	b1e3      	cbz	r3, 37754 <settings_nvs_backend_init+0x44>
   3771a:	4604      	mov	r4, r0
	rc = nvs_mount(&cf->cf_nvs);
   3771c:	f100 0508 	add.w	r5, r0, #8
   37720:	4628      	mov	r0, r5
   37722:	f7df fea7 	bl	17474 <nvs_mount>
	if (rc) {
   37726:	4606      	mov	r6, r0
   37728:	b110      	cbz	r0, 37730 <settings_nvs_backend_init+0x20>
}
   3772a:	4630      	mov	r0, r6
   3772c:	b002      	add	sp, #8
   3772e:	bd70      	pop	{r4, r5, r6, pc}
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   37730:	2302      	movs	r3, #2
   37732:	f10d 0206 	add.w	r2, sp, #6
   37736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   3773a:	4628      	mov	r0, r5
   3773c:	f7ff fb35 	bl	36daa <nvs_read>
	if (rc < 0) {
   37740:	2800      	cmp	r0, #0
   37742:	db03      	blt.n	3774c <settings_nvs_backend_init+0x3c>
		cf->last_name_id = last_name_id;
   37744:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   37748:	8723      	strh	r3, [r4, #56]	; 0x38
   3774a:	e7ee      	b.n	3772a <settings_nvs_backend_init+0x1a>
		cf->last_name_id = NVS_NAMECNT_ID;
   3774c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   37750:	8723      	strh	r3, [r4, #56]	; 0x38
   37752:	e7ea      	b.n	3772a <settings_nvs_backend_init+0x1a>
		return -ENODEV;
   37754:	f06f 0612 	mvn.w	r6, #18
   37758:	e7e7      	b.n	3772a <settings_nvs_backend_init+0x1a>

0003775a <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
   3775a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   3775c:	f001 021f 	and.w	r2, r1, #31
   37760:	2301      	movs	r3, #1
   37762:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   37764:	0949      	lsrs	r1, r1, #5
   37766:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3776a:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3776c:	e8d0 2fef 	ldaex	r2, [r0]
   37770:	ea02 0c01 	and.w	ip, r2, r1
   37774:	e8c0 cfee 	stlex	lr, ip, [r0]
   37778:	f1be 0f00 	cmp.w	lr, #0
   3777c:	d1f6      	bne.n	3776c <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
   3777e:	4213      	tst	r3, r2
}
   37780:	bf14      	ite	ne
   37782:	2001      	movne	r0, #1
   37784:	2000      	moveq	r0, #0
   37786:	f85d fb04 	ldr.w	pc, [sp], #4

0003778a <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   3778a:	f001 021f 	and.w	r2, r1, #31
   3778e:	2301      	movs	r3, #1
   37790:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   37792:	0949      	lsrs	r1, r1, #5
   37794:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   37798:	e8d0 2fef 	ldaex	r2, [r0]
   3779c:	431a      	orrs	r2, r3
   3779e:	e8c0 2fe1 	stlex	r1, r2, [r0]
   377a2:	2900      	cmp	r1, #0
   377a4:	d1f8      	bne.n	37798 <atomic_set_bit+0xe>
}
   377a6:	4770      	bx	lr

000377a8 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
   377a8:	2000      	movs	r0, #0
   377aa:	4770      	bx	lr

000377ac <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   377ac:	428b      	cmp	r3, r1
   377ae:	d901      	bls.n	377b4 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   377b0:	2000      	movs	r0, #0
	}
}
   377b2:	4770      	bx	lr
{
   377b4:	b510      	push	{r4, lr}
   377b6:	4694      	mov	ip, r2
   377b8:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   377ba:	461a      	mov	r2, r3
   377bc:	4661      	mov	r1, ip
   377be:	f000 fe1c 	bl	383fa <memcpy>
		return from_len;
   377c2:	4620      	mov	r0, r4
}
   377c4:	bd10      	pop	{r4, pc}

000377c6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   377c6:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   377c8:	f000 fe46 	bl	38458 <memset>
}
   377cc:	bd08      	pop	{r3, pc}

000377ce <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   377ce:	09c3      	lsrs	r3, r0, #7
   377d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   377d4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   377d8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   377dc:	b2c0      	uxtb	r0, r0
   377de:	4770      	bx	lr

000377e0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   377e0:	7803      	ldrb	r3, [r0, #0]
   377e2:	78ca      	ldrb	r2, [r1, #3]
   377e4:	4053      	eors	r3, r2
   377e6:	7003      	strb	r3, [r0, #0]
   377e8:	7843      	ldrb	r3, [r0, #1]
   377ea:	788a      	ldrb	r2, [r1, #2]
   377ec:	4053      	eors	r3, r2
   377ee:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   377f0:	7883      	ldrb	r3, [r0, #2]
   377f2:	784a      	ldrb	r2, [r1, #1]
   377f4:	4053      	eors	r3, r2
   377f6:	7083      	strb	r3, [r0, #2]
   377f8:	78c3      	ldrb	r3, [r0, #3]
   377fa:	780a      	ldrb	r2, [r1, #0]
   377fc:	4053      	eors	r3, r2
   377fe:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   37800:	7903      	ldrb	r3, [r0, #4]
   37802:	79ca      	ldrb	r2, [r1, #7]
   37804:	4053      	eors	r3, r2
   37806:	7103      	strb	r3, [r0, #4]
   37808:	7943      	ldrb	r3, [r0, #5]
   3780a:	798a      	ldrb	r2, [r1, #6]
   3780c:	4053      	eors	r3, r2
   3780e:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   37810:	7983      	ldrb	r3, [r0, #6]
   37812:	794a      	ldrb	r2, [r1, #5]
   37814:	4053      	eors	r3, r2
   37816:	7183      	strb	r3, [r0, #6]
   37818:	79c3      	ldrb	r3, [r0, #7]
   3781a:	790a      	ldrb	r2, [r1, #4]
   3781c:	4053      	eors	r3, r2
   3781e:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   37820:	7a03      	ldrb	r3, [r0, #8]
   37822:	7aca      	ldrb	r2, [r1, #11]
   37824:	4053      	eors	r3, r2
   37826:	7203      	strb	r3, [r0, #8]
   37828:	7a43      	ldrb	r3, [r0, #9]
   3782a:	7a8a      	ldrb	r2, [r1, #10]
   3782c:	4053      	eors	r3, r2
   3782e:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   37830:	7a83      	ldrb	r3, [r0, #10]
   37832:	7a4a      	ldrb	r2, [r1, #9]
   37834:	4053      	eors	r3, r2
   37836:	7283      	strb	r3, [r0, #10]
   37838:	7ac3      	ldrb	r3, [r0, #11]
   3783a:	7a0a      	ldrb	r2, [r1, #8]
   3783c:	4053      	eors	r3, r2
   3783e:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   37840:	7b03      	ldrb	r3, [r0, #12]
   37842:	7bca      	ldrb	r2, [r1, #15]
   37844:	4053      	eors	r3, r2
   37846:	7303      	strb	r3, [r0, #12]
   37848:	7b43      	ldrb	r3, [r0, #13]
   3784a:	7b8a      	ldrb	r2, [r1, #14]
   3784c:	4053      	eors	r3, r2
   3784e:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   37850:	7b83      	ldrb	r3, [r0, #14]
   37852:	7b4a      	ldrb	r2, [r1, #13]
   37854:	4053      	eors	r3, r2
   37856:	7383      	strb	r3, [r0, #14]
   37858:	7bc3      	ldrb	r3, [r0, #15]
   3785a:	7b0a      	ldrb	r2, [r1, #12]
   3785c:	4053      	eors	r3, r2
   3785e:	73c3      	strb	r3, [r0, #15]
}
   37860:	4770      	bx	lr

00037862 <shift_rows>:
{
   37862:	b500      	push	{lr}
   37864:	b085      	sub	sp, #20
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   37866:	7802      	ldrb	r2, [r0, #0]
   37868:	f88d 2000 	strb.w	r2, [sp]
   3786c:	7942      	ldrb	r2, [r0, #5]
   3786e:	f88d 2001 	strb.w	r2, [sp, #1]
   37872:	7a82      	ldrb	r2, [r0, #10]
   37874:	f88d 2002 	strb.w	r2, [sp, #2]
   37878:	7bc2      	ldrb	r2, [r0, #15]
   3787a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   3787e:	7902      	ldrb	r2, [r0, #4]
   37880:	f88d 2004 	strb.w	r2, [sp, #4]
   37884:	7a42      	ldrb	r2, [r0, #9]
   37886:	f88d 2005 	strb.w	r2, [sp, #5]
   3788a:	7b82      	ldrb	r2, [r0, #14]
   3788c:	f88d 2006 	strb.w	r2, [sp, #6]
   37890:	78c2      	ldrb	r2, [r0, #3]
   37892:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   37896:	7a02      	ldrb	r2, [r0, #8]
   37898:	f88d 2008 	strb.w	r2, [sp, #8]
   3789c:	7b42      	ldrb	r2, [r0, #13]
   3789e:	f88d 2009 	strb.w	r2, [sp, #9]
   378a2:	7882      	ldrb	r2, [r0, #2]
   378a4:	f88d 200a 	strb.w	r2, [sp, #10]
   378a8:	79c2      	ldrb	r2, [r0, #7]
   378aa:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   378ae:	7b02      	ldrb	r2, [r0, #12]
   378b0:	f88d 200c 	strb.w	r2, [sp, #12]
   378b4:	7842      	ldrb	r2, [r0, #1]
   378b6:	f88d 200d 	strb.w	r2, [sp, #13]
   378ba:	7982      	ldrb	r2, [r0, #6]
   378bc:	f88d 200e 	strb.w	r2, [sp, #14]
   378c0:	7ac3      	ldrb	r3, [r0, #11]
   378c2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   378c6:	2310      	movs	r3, #16
   378c8:	466a      	mov	r2, sp
   378ca:	4619      	mov	r1, r3
   378cc:	f7ff ff6e 	bl	377ac <_copy>
}
   378d0:	b005      	add	sp, #20
   378d2:	f85d fb04 	ldr.w	pc, [sp], #4

000378d6 <mult_row_column>:
{
   378d6:	b570      	push	{r4, r5, r6, lr}
   378d8:	4606      	mov	r6, r0
   378da:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   378dc:	7808      	ldrb	r0, [r1, #0]
   378de:	f7ff ff76 	bl	377ce <_double_byte>
   378e2:	4605      	mov	r5, r0
   378e4:	7860      	ldrb	r0, [r4, #1]
   378e6:	f7ff ff72 	bl	377ce <_double_byte>
   378ea:	7861      	ldrb	r1, [r4, #1]
   378ec:	78a2      	ldrb	r2, [r4, #2]
   378ee:	78e3      	ldrb	r3, [r4, #3]
   378f0:	4048      	eors	r0, r1
   378f2:	4045      	eors	r5, r0
   378f4:	406a      	eors	r2, r5
   378f6:	4053      	eors	r3, r2
   378f8:	7033      	strb	r3, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   378fa:	7825      	ldrb	r5, [r4, #0]
   378fc:	7860      	ldrb	r0, [r4, #1]
   378fe:	f7ff ff66 	bl	377ce <_double_byte>
   37902:	4045      	eors	r5, r0
   37904:	b2ed      	uxtb	r5, r5
   37906:	78a0      	ldrb	r0, [r4, #2]
   37908:	f7ff ff61 	bl	377ce <_double_byte>
   3790c:	78a2      	ldrb	r2, [r4, #2]
   3790e:	78e3      	ldrb	r3, [r4, #3]
   37910:	4050      	eors	r0, r2
   37912:	4045      	eors	r5, r0
   37914:	406b      	eors	r3, r5
   37916:	7073      	strb	r3, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   37918:	7825      	ldrb	r5, [r4, #0]
   3791a:	7863      	ldrb	r3, [r4, #1]
   3791c:	405d      	eors	r5, r3
   3791e:	78a0      	ldrb	r0, [r4, #2]
   37920:	f7ff ff55 	bl	377ce <_double_byte>
   37924:	4045      	eors	r5, r0
   37926:	b2ed      	uxtb	r5, r5
   37928:	78e0      	ldrb	r0, [r4, #3]
   3792a:	f7ff ff50 	bl	377ce <_double_byte>
   3792e:	78e3      	ldrb	r3, [r4, #3]
   37930:	4058      	eors	r0, r3
   37932:	4045      	eors	r5, r0
   37934:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   37936:	7820      	ldrb	r0, [r4, #0]
   37938:	f7ff ff49 	bl	377ce <_double_byte>
   3793c:	7822      	ldrb	r2, [r4, #0]
   3793e:	7863      	ldrb	r3, [r4, #1]
   37940:	78a5      	ldrb	r5, [r4, #2]
   37942:	4050      	eors	r0, r2
   37944:	4043      	eors	r3, r0
   37946:	405d      	eors	r5, r3
   37948:	b2ed      	uxtb	r5, r5
   3794a:	78e0      	ldrb	r0, [r4, #3]
   3794c:	f7ff ff3f 	bl	377ce <_double_byte>
   37950:	4045      	eors	r5, r0
   37952:	70f5      	strb	r5, [r6, #3]
}
   37954:	bd70      	pop	{r4, r5, r6, pc}

00037956 <mix_columns>:
{
   37956:	b510      	push	{r4, lr}
   37958:	b084      	sub	sp, #16
   3795a:	4604      	mov	r4, r0
	mult_row_column(t, s);
   3795c:	4601      	mov	r1, r0
   3795e:	4668      	mov	r0, sp
   37960:	f7ff ffb9 	bl	378d6 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   37964:	1d21      	adds	r1, r4, #4
   37966:	a801      	add	r0, sp, #4
   37968:	f7ff ffb5 	bl	378d6 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   3796c:	f104 0108 	add.w	r1, r4, #8
   37970:	a802      	add	r0, sp, #8
   37972:	f7ff ffb0 	bl	378d6 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   37976:	f104 010c 	add.w	r1, r4, #12
   3797a:	a803      	add	r0, sp, #12
   3797c:	f7ff ffab 	bl	378d6 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   37980:	2310      	movs	r3, #16
   37982:	466a      	mov	r2, sp
   37984:	4619      	mov	r1, r3
   37986:	4620      	mov	r0, r4
   37988:	f7ff ff10 	bl	377ac <_copy>
}
   3798c:	b004      	add	sp, #16
   3798e:	bd10      	pop	{r4, pc}

00037990 <gf_double>:
 */
void gf_double(uint8_t *out, uint8_t *in)
{

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   37990:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   37992:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   37996:	2a00      	cmp	r2, #0
   37998:	db04      	blt.n	379a4 <gf_double+0x14>
   3799a:	f04f 0c00 	mov.w	ip, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   3799e:	f100 020f 	add.w	r2, r0, #15
   379a2:	e006      	b.n	379b2 <gf_double+0x22>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   379a4:	f04f 0c87 	mov.w	ip, #135	; 0x87
   379a8:	e7f9      	b.n	3799e <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   379aa:	f813 0901 	ldrb.w	r0, [r3], #-1
   379ae:	ea4f 1cd0 	mov.w	ip, r0, lsr #7
		*out-- = (*x << 1) ^ carry;
   379b2:	7818      	ldrb	r0, [r3, #0]
   379b4:	ea8c 0040 	eor.w	r0, ip, r0, lsl #1
   379b8:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   379bc:	428b      	cmp	r3, r1
   379be:	d1f4      	bne.n	379aa <gf_double+0x1a>
	}
}
   379c0:	4770      	bx	lr

000379c2 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   379c2:	b130      	cbz	r0, 379d2 <tc_cmac_erase+0x10>
{
   379c4:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   379c6:	2258      	movs	r2, #88	; 0x58
   379c8:	2100      	movs	r1, #0
   379ca:	f7ff fefc 	bl	377c6 <_set>

	return TC_CRYPTO_SUCCESS;
   379ce:	2001      	movs	r0, #1
}
   379d0:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   379d2:	2000      	movs	r0, #0
}
   379d4:	4770      	bx	lr

000379d6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   379d6:	b1a0      	cbz	r0, 37a02 <tc_cmac_init+0x2c>
{
   379d8:	b510      	push	{r4, lr}
   379da:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   379dc:	2210      	movs	r2, #16
   379de:	2100      	movs	r1, #0
   379e0:	f7ff fef1 	bl	377c6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   379e4:	2210      	movs	r2, #16
   379e6:	2100      	movs	r1, #0
   379e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   379ec:	f7ff feeb 	bl	377c6 <_set>
	s->leftover_offset = 0;
   379f0:	2300      	movs	r3, #0
   379f2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   379f4:	2200      	movs	r2, #0
   379f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   379fa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   379fe:	2001      	movs	r0, #1
}
   37a00:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   37a02:	2000      	movs	r0, #0
}
   37a04:	4770      	bx	lr

00037a06 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   37a06:	b338      	cbz	r0, 37a58 <tc_cmac_setup+0x52>
{
   37a08:	b570      	push	{r4, r5, r6, lr}
   37a0a:	460d      	mov	r5, r1
   37a0c:	4616      	mov	r6, r2
   37a0e:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   37a10:	b321      	cbz	r1, 37a5c <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   37a12:	2258      	movs	r2, #88	; 0x58
   37a14:	2100      	movs	r1, #0
   37a16:	f7ff fed6 	bl	377c6 <_set>
	s->sched = sched;
   37a1a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   37a1c:	4629      	mov	r1, r5
   37a1e:	4630      	mov	r0, r6
   37a20:	f7e1 f98c 	bl	18d3c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   37a24:	2210      	movs	r2, #16
   37a26:	2100      	movs	r1, #0
   37a28:	4620      	mov	r0, r4
   37a2a:	f7ff fecc 	bl	377c6 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   37a2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37a30:	4621      	mov	r1, r4
   37a32:	4620      	mov	r0, r4
   37a34:	f7e1 f9e4 	bl	18e00 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   37a38:	f104 0510 	add.w	r5, r4, #16
   37a3c:	4621      	mov	r1, r4
   37a3e:	4628      	mov	r0, r5
   37a40:	f7ff ffa6 	bl	37990 <gf_double>
	gf_double (s->K2, s->K1);
   37a44:	4629      	mov	r1, r5
   37a46:	f104 0020 	add.w	r0, r4, #32
   37a4a:	f7ff ffa1 	bl	37990 <gf_double>
	tc_cmac_init(s);
   37a4e:	4620      	mov	r0, r4
   37a50:	f7ff ffc1 	bl	379d6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   37a54:	2001      	movs	r0, #1
}
   37a56:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   37a58:	2000      	movs	r0, #0
}
   37a5a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37a5c:	2000      	movs	r0, #0
   37a5e:	e7fa      	b.n	37a56 <tc_cmac_setup+0x50>

00037a60 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   37a60:	2800      	cmp	r0, #0
   37a62:	d064      	beq.n	37b2e <tc_cmac_update+0xce>
{
   37a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37a68:	460d      	mov	r5, r1
   37a6a:	4616      	mov	r6, r2
   37a6c:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   37a6e:	2a00      	cmp	r2, #0
   37a70:	d05f      	beq.n	37b32 <tc_cmac_update+0xd2>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   37a72:	2900      	cmp	r1, #0
   37a74:	d060      	beq.n	37b38 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   37a76:	6d03      	ldr	r3, [r0, #80]	; 0x50
   37a78:	6d42      	ldr	r2, [r0, #84]	; 0x54
   37a7a:	ea53 0102 	orrs.w	r1, r3, r2
   37a7e:	d05d      	beq.n	37b3c <tc_cmac_update+0xdc>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   37a80:	3b01      	subs	r3, #1
   37a82:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   37a86:	6503      	str	r3, [r0, #80]	; 0x50
   37a88:	6542      	str	r2, [r0, #84]	; 0x54

	if (s->leftover_offset > 0) {
   37a8a:	6c47      	ldr	r7, [r0, #68]	; 0x44
   37a8c:	2f00      	cmp	r7, #0
   37a8e:	d03d      	beq.n	37b0c <tc_cmac_update+0xac>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   37a90:	f1c7 0810 	rsb	r8, r7, #16

		if (data_length < remaining_space) {
   37a94:	4546      	cmp	r6, r8
   37a96:	d30d      	bcc.n	37ab4 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   37a98:	f107 0030 	add.w	r0, r7, #48	; 0x30
   37a9c:	4643      	mov	r3, r8
   37a9e:	462a      	mov	r2, r5
   37aa0:	4641      	mov	r1, r8
   37aa2:	4420      	add	r0, r4
   37aa4:	f7ff fe82 	bl	377ac <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   37aa8:	3f10      	subs	r7, #16
   37aaa:	443e      	add	r6, r7
		data += remaining_space;
   37aac:	4445      	add	r5, r8
		s->leftover_offset = 0;
   37aae:	2300      	movs	r3, #0
   37ab0:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37ab2:	e013      	b.n	37adc <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   37ab4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   37ab8:	4633      	mov	r3, r6
   37aba:	462a      	mov	r2, r5
   37abc:	4631      	mov	r1, r6
   37abe:	4420      	add	r0, r4
   37ac0:	f7ff fe74 	bl	377ac <_copy>
			s->leftover_offset += data_length;
   37ac4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   37ac6:	4433      	add	r3, r6
   37ac8:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   37aca:	2001      	movs	r0, #1
   37acc:	e032      	b.n	37b34 <tc_cmac_update+0xd4>
			s->iv[i] ^= s->leftover[i];
   37ace:	5ce2      	ldrb	r2, [r4, r3]
   37ad0:	18e1      	adds	r1, r4, r3
   37ad2:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
   37ad6:	404a      	eors	r2, r1
   37ad8:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37ada:	3301      	adds	r3, #1
   37adc:	2b0f      	cmp	r3, #15
   37ade:	d9f6      	bls.n	37ace <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   37ae0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37ae2:	4621      	mov	r1, r4
   37ae4:	4620      	mov	r0, r4
   37ae6:	f7e1 f98b 	bl	18e00 <tc_aes_encrypt>
   37aea:	e00f      	b.n	37b0c <tc_cmac_update+0xac>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
   37aec:	5ce0      	ldrb	r0, [r4, r3]
   37aee:	f815 c003 	ldrb.w	ip, [r5, r3]
   37af2:	ea80 000c 	eor.w	r0, r0, ip
   37af6:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37af8:	3301      	adds	r3, #1
   37afa:	2b0f      	cmp	r3, #15
   37afc:	d9f6      	bls.n	37aec <tc_cmac_update+0x8c>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   37afe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37b00:	4621      	mov	r1, r4
   37b02:	4620      	mov	r0, r4
   37b04:	f7e1 f97c 	bl	18e00 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   37b08:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   37b0a:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   37b0c:	2e10      	cmp	r6, #16
   37b0e:	d901      	bls.n	37b14 <tc_cmac_update+0xb4>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37b10:	2300      	movs	r3, #0
   37b12:	e7f2      	b.n	37afa <tc_cmac_update+0x9a>
	}

	if (data_length > 0) {
   37b14:	b90e      	cbnz	r6, 37b1a <tc_cmac_update+0xba>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   37b16:	2001      	movs	r0, #1
   37b18:	e00c      	b.n	37b34 <tc_cmac_update+0xd4>
		_copy(s->leftover, data_length, data, data_length);
   37b1a:	4633      	mov	r3, r6
   37b1c:	462a      	mov	r2, r5
   37b1e:	4631      	mov	r1, r6
   37b20:	f104 0030 	add.w	r0, r4, #48	; 0x30
   37b24:	f7ff fe42 	bl	377ac <_copy>
		s->leftover_offset = data_length;
   37b28:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   37b2a:	2001      	movs	r0, #1
   37b2c:	e002      	b.n	37b34 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   37b2e:	2000      	movs	r0, #0
}
   37b30:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   37b32:	2001      	movs	r0, #1
}
   37b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   37b38:	2000      	movs	r0, #0
   37b3a:	e7fb      	b.n	37b34 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
   37b3c:	2000      	movs	r0, #0
   37b3e:	e7f9      	b.n	37b34 <tc_cmac_update+0xd4>

00037b40 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   37b40:	b380      	cbz	r0, 37ba4 <tc_cmac_final+0x64>
{
   37b42:	b538      	push	{r3, r4, r5, lr}
   37b44:	460c      	mov	r4, r1
   37b46:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   37b48:	b371      	cbz	r1, 37ba8 <tc_cmac_final+0x68>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   37b4a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   37b4c:	2a10      	cmp	r2, #16
   37b4e:	d103      	bne.n	37b58 <tc_cmac_final+0x18>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   37b50:	f101 0c10 	add.w	ip, r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37b54:	2300      	movs	r3, #0
   37b56:	e019      	b.n	37b8c <tc_cmac_final+0x4c>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   37b58:	f102 0030 	add.w	r0, r2, #48	; 0x30
   37b5c:	f1c2 0210 	rsb	r2, r2, #16
   37b60:	2100      	movs	r1, #0
   37b62:	4420      	add	r0, r4
   37b64:	f7ff fe2f 	bl	377c6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   37b68:	6c63      	ldr	r3, [r4, #68]	; 0x44
   37b6a:	4423      	add	r3, r4
   37b6c:	2280      	movs	r2, #128	; 0x80
   37b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   37b72:	f104 0c20 	add.w	ip, r4, #32
   37b76:	e7ed      	b.n	37b54 <tc_cmac_final+0x14>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   37b78:	5ce2      	ldrb	r2, [r4, r3]
   37b7a:	18e1      	adds	r1, r4, r3
   37b7c:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
   37b80:	f81c 1003 	ldrb.w	r1, [ip, r3]
   37b84:	4048      	eors	r0, r1
   37b86:	4042      	eors	r2, r0
   37b88:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   37b8a:	3301      	adds	r3, #1
   37b8c:	2b0f      	cmp	r3, #15
   37b8e:	d9f3      	bls.n	37b78 <tc_cmac_final+0x38>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   37b90:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   37b92:	4621      	mov	r1, r4
   37b94:	4628      	mov	r0, r5
   37b96:	f7e1 f933 	bl	18e00 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   37b9a:	4620      	mov	r0, r4
   37b9c:	f7ff ff11 	bl	379c2 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   37ba0:	2001      	movs	r0, #1
}
   37ba2:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   37ba4:	2000      	movs	r0, #0
}
   37ba6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37ba8:	2000      	movs	r0, #0
   37baa:	e7fa      	b.n	37ba2 <tc_cmac_final+0x62>

00037bac <BigEndian>:
	n = (((unsigned int)(*((*c)++))) << 24);
   37bac:	6802      	ldr	r2, [r0, #0]
   37bae:	1c53      	adds	r3, r2, #1
   37bb0:	6003      	str	r3, [r0, #0]
   37bb2:	4613      	mov	r3, r2
   37bb4:	f813 1b02 	ldrb.w	r1, [r3], #2
	n |= ((unsigned int)(*((*c)++)) << 16);
   37bb8:	6003      	str	r3, [r0, #0]
   37bba:	7853      	ldrb	r3, [r2, #1]
   37bbc:	041b      	lsls	r3, r3, #16
   37bbe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
	n |= ((unsigned int)(*((*c)++)) << 8);
   37bc2:	1cd1      	adds	r1, r2, #3
   37bc4:	6001      	str	r1, [r0, #0]
   37bc6:	7891      	ldrb	r1, [r2, #2]
   37bc8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	n |= ((unsigned int)(*((*c)++)));
   37bcc:	1d11      	adds	r1, r2, #4
   37bce:	6001      	str	r1, [r0, #0]
   37bd0:	78d0      	ldrb	r0, [r2, #3]
}
   37bd2:	4318      	orrs	r0, r3
   37bd4:	4770      	bx	lr

00037bd6 <tc_sha256_update>:
	if (s == (TCSha256State_t) 0 ||
   37bd6:	b328      	cbz	r0, 37c24 <tc_sha256_update+0x4e>
{
   37bd8:	b570      	push	{r4, r5, r6, lr}
   37bda:	460c      	mov	r4, r1
   37bdc:	4605      	mov	r5, r0
	if (s == (TCSha256State_t) 0 ||
   37bde:	b319      	cbz	r1, 37c28 <tc_sha256_update+0x52>
	} else if (datalen == 0) {
   37be0:	b912      	cbnz	r2, 37be8 <tc_sha256_update+0x12>
		return TC_CRYPTO_SUCCESS;
   37be2:	2001      	movs	r0, #1
   37be4:	e01d      	b.n	37c22 <tc_sha256_update+0x4c>
{
   37be6:	4632      	mov	r2, r6
	while (datalen-- > 0) {
   37be8:	1e56      	subs	r6, r2, #1
   37bea:	b1ca      	cbz	r2, 37c20 <tc_sha256_update+0x4a>
		s->leftover[s->leftover_offset++] = *(data++);
   37bec:	6eab      	ldr	r3, [r5, #104]	; 0x68
   37bee:	1c5a      	adds	r2, r3, #1
   37bf0:	66aa      	str	r2, [r5, #104]	; 0x68
   37bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
   37bf6:	442b      	add	r3, r5
   37bf8:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
		if (s->leftover_offset >= TC_SHA256_BLOCK_SIZE) {
   37bfc:	2a3f      	cmp	r2, #63	; 0x3f
   37bfe:	d9f2      	bls.n	37be6 <tc_sha256_update+0x10>
			compress(s->iv, s->leftover);
   37c00:	f105 0128 	add.w	r1, r5, #40	; 0x28
   37c04:	4628      	mov	r0, r5
   37c06:	f7e1 f955 	bl	18eb4 <compress>
			s->leftover_offset = 0;
   37c0a:	2300      	movs	r3, #0
   37c0c:	66ab      	str	r3, [r5, #104]	; 0x68
			s->bits_hashed += (TC_SHA256_BLOCK_SIZE << 3);
   37c0e:	6a2b      	ldr	r3, [r5, #32]
   37c10:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   37c12:	f513 7300 	adds.w	r3, r3, #512	; 0x200
   37c16:	f142 0200 	adc.w	r2, r2, #0
   37c1a:	622b      	str	r3, [r5, #32]
   37c1c:	626a      	str	r2, [r5, #36]	; 0x24
   37c1e:	e7e2      	b.n	37be6 <tc_sha256_update+0x10>
	return TC_CRYPTO_SUCCESS;
   37c20:	2001      	movs	r0, #1
}
   37c22:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   37c24:	2000      	movs	r0, #0
}
   37c26:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37c28:	2000      	movs	r0, #0
   37c2a:	e7fa      	b.n	37c22 <tc_sha256_update+0x4c>

00037c2c <tc_sha256_final>:
	if (digest == (uint8_t *) 0 ||
   37c2c:	2800      	cmp	r0, #0
   37c2e:	d065      	beq.n	37cfc <tc_sha256_final+0xd0>
{
   37c30:	b570      	push	{r4, r5, r6, lr}
   37c32:	460d      	mov	r5, r1
   37c34:	4604      	mov	r4, r0
	if (digest == (uint8_t *) 0 ||
   37c36:	2900      	cmp	r1, #0
   37c38:	d062      	beq.n	37d00 <tc_sha256_final+0xd4>
	s->bits_hashed += (s->leftover_offset << 3);
   37c3a:	6a0a      	ldr	r2, [r1, #32]
   37c3c:	6a49      	ldr	r1, [r1, #36]	; 0x24
   37c3e:	6eab      	ldr	r3, [r5, #104]	; 0x68
   37c40:	00d8      	lsls	r0, r3, #3
   37c42:	1812      	adds	r2, r2, r0
   37c44:	f141 0100 	adc.w	r1, r1, #0
   37c48:	622a      	str	r2, [r5, #32]
   37c4a:	6269      	str	r1, [r5, #36]	; 0x24
	s->leftover[s->leftover_offset++] = 0x80; /* always room for one byte */
   37c4c:	1c58      	adds	r0, r3, #1
   37c4e:	66a8      	str	r0, [r5, #104]	; 0x68
   37c50:	442b      	add	r3, r5
   37c52:	2280      	movs	r2, #128	; 0x80
   37c54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	if (s->leftover_offset > (sizeof(s->leftover) - 8)) {
   37c58:	2838      	cmp	r0, #56	; 0x38
   37c5a:	d82a      	bhi.n	37cb2 <tc_sha256_final+0x86>
	_set(s->leftover + s->leftover_offset, 0x00,
   37c5c:	f105 0628 	add.w	r6, r5, #40	; 0x28
   37c60:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   37c62:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
   37c66:	2100      	movs	r1, #0
   37c68:	4430      	add	r0, r6
   37c6a:	f7ff fdac 	bl	377c6 <_set>
	s->leftover[sizeof(s->leftover) - 1] = (uint8_t)(s->bits_hashed);
   37c6e:	6a2a      	ldr	r2, [r5, #32]
   37c70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   37c72:	f885 2067 	strb.w	r2, [r5, #103]	; 0x67
	s->leftover[sizeof(s->leftover) - 2] = (uint8_t)(s->bits_hashed >> 8);
   37c76:	f3c2 2107 	ubfx	r1, r2, #8, #8
   37c7a:	f885 1066 	strb.w	r1, [r5, #102]	; 0x66
	s->leftover[sizeof(s->leftover) - 3] = (uint8_t)(s->bits_hashed >> 16);
   37c7e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   37c82:	f885 1065 	strb.w	r1, [r5, #101]	; 0x65
	s->leftover[sizeof(s->leftover) - 4] = (uint8_t)(s->bits_hashed >> 24);
   37c86:	0e12      	lsrs	r2, r2, #24
   37c88:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	s->leftover[sizeof(s->leftover) - 5] = (uint8_t)(s->bits_hashed >> 32);
   37c8c:	f885 3063 	strb.w	r3, [r5, #99]	; 0x63
	s->leftover[sizeof(s->leftover) - 6] = (uint8_t)(s->bits_hashed >> 40);
   37c90:	f3c3 2207 	ubfx	r2, r3, #8, #8
   37c94:	f885 2062 	strb.w	r2, [r5, #98]	; 0x62
	s->leftover[sizeof(s->leftover) - 7] = (uint8_t)(s->bits_hashed >> 48);
   37c98:	f3c3 4207 	ubfx	r2, r3, #16, #8
   37c9c:	f885 2061 	strb.w	r2, [r5, #97]	; 0x61
	s->leftover[sizeof(s->leftover) - 8] = (uint8_t)(s->bits_hashed >> 56);
   37ca0:	0e1b      	lsrs	r3, r3, #24
   37ca2:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
	compress(s->iv, s->leftover);
   37ca6:	4631      	mov	r1, r6
   37ca8:	4628      	mov	r0, r5
   37caa:	f7e1 f903 	bl	18eb4 <compress>
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   37cae:	2200      	movs	r2, #0
   37cb0:	e01b      	b.n	37cea <tc_sha256_final+0xbe>
		_set(s->leftover + s->leftover_offset, 0x00,
   37cb2:	f105 0628 	add.w	r6, r5, #40	; 0x28
   37cb6:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
   37cba:	2100      	movs	r1, #0
   37cbc:	4430      	add	r0, r6
   37cbe:	f7ff fd82 	bl	377c6 <_set>
		compress(s->iv, s->leftover);
   37cc2:	4631      	mov	r1, r6
   37cc4:	4628      	mov	r0, r5
   37cc6:	f7e1 f8f5 	bl	18eb4 <compress>
		s->leftover_offset = 0;
   37cca:	2300      	movs	r3, #0
   37ccc:	66ab      	str	r3, [r5, #104]	; 0x68
   37cce:	e7c5      	b.n	37c5c <tc_sha256_final+0x30>
		unsigned int t = *((unsigned int *) &s->iv[i]);
   37cd0:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
		*digest++ = (uint8_t)(t >> 24);
   37cd4:	0e19      	lsrs	r1, r3, #24
   37cd6:	7021      	strb	r1, [r4, #0]
		*digest++ = (uint8_t)(t >> 16);
   37cd8:	f3c3 4107 	ubfx	r1, r3, #16, #8
   37cdc:	7061      	strb	r1, [r4, #1]
		*digest++ = (uint8_t)(t >> 8);
   37cde:	f3c3 2107 	ubfx	r1, r3, #8, #8
   37ce2:	70a1      	strb	r1, [r4, #2]
		*digest++ = (uint8_t)(t);
   37ce4:	70e3      	strb	r3, [r4, #3]
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   37ce6:	3201      	adds	r2, #1
		*digest++ = (uint8_t)(t);
   37ce8:	3404      	adds	r4, #4
	for (i = 0; i < TC_SHA256_STATE_BLOCKS; ++i) {
   37cea:	2a07      	cmp	r2, #7
   37cec:	d9f0      	bls.n	37cd0 <tc_sha256_final+0xa4>
	_set(s, 0, sizeof(*s));
   37cee:	2270      	movs	r2, #112	; 0x70
   37cf0:	2100      	movs	r1, #0
   37cf2:	4628      	mov	r0, r5
   37cf4:	f7ff fd67 	bl	377c6 <_set>
	return TC_CRYPTO_SUCCESS;
   37cf8:	2001      	movs	r0, #1
}
   37cfa:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   37cfc:	2000      	movs	r0, #0
}
   37cfe:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37d00:	2000      	movs	r0, #0
   37d02:	e7fa      	b.n	37cfa <tc_sha256_final+0xce>

00037d04 <rekey>:
#include <tinycrypt/hmac.h>
#include <tinycrypt/constants.h>
#include <tinycrypt/utils.h>

static void rekey(uint8_t *key, const uint8_t *new_key, unsigned int key_size)
{
   37d04:	b500      	push	{lr}
	const uint8_t inner_pad = (uint8_t) 0x36;
	const uint8_t outer_pad = (uint8_t) 0x5c;
	unsigned int i;

	for (i = 0; i < key_size; ++i) {
   37d06:	2300      	movs	r3, #0
   37d08:	e00e      	b.n	37d28 <rekey+0x24>
		key[i] = inner_pad ^ new_key[i];
   37d0a:	f811 c003 	ldrb.w	ip, [r1, r3]
   37d0e:	f08c 0c36 	eor.w	ip, ip, #54	; 0x36
   37d12:	f800 c003 	strb.w	ip, [r0, r3]
		key[i + TC_SHA256_BLOCK_SIZE] = outer_pad ^ new_key[i];
   37d16:	f811 c003 	ldrb.w	ip, [r1, r3]
   37d1a:	f103 0e40 	add.w	lr, r3, #64	; 0x40
   37d1e:	f08c 0c5c 	eor.w	ip, ip, #92	; 0x5c
   37d22:	f800 c00e 	strb.w	ip, [r0, lr]
	for (i = 0; i < key_size; ++i) {
   37d26:	3301      	adds	r3, #1
   37d28:	4293      	cmp	r3, r2
   37d2a:	d3ee      	bcc.n	37d0a <rekey+0x6>
   37d2c:	e006      	b.n	37d3c <rekey+0x38>
	}
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
		key[i] = inner_pad; key[i + TC_SHA256_BLOCK_SIZE] = outer_pad;
   37d2e:	2236      	movs	r2, #54	; 0x36
   37d30:	54c2      	strb	r2, [r0, r3]
   37d32:	f103 0240 	add.w	r2, r3, #64	; 0x40
   37d36:	215c      	movs	r1, #92	; 0x5c
   37d38:	5481      	strb	r1, [r0, r2]
	for (; i < TC_SHA256_BLOCK_SIZE; ++i) {
   37d3a:	3301      	adds	r3, #1
   37d3c:	2b3f      	cmp	r3, #63	; 0x3f
   37d3e:	d9f6      	bls.n	37d2e <rekey+0x2a>
	}
}
   37d40:	f85d fb04 	ldr.w	pc, [sp], #4

00037d44 <tc_hmac_set_key>:

int tc_hmac_set_key(TCHmacState_t ctx, const uint8_t *key,
		    unsigned int key_size)
{
	/* Input sanity check */
	if (ctx == (TCHmacState_t) 0 ||
   37d44:	b388      	cbz	r0, 37daa <tc_hmac_set_key+0x66>
{
   37d46:	b570      	push	{r4, r5, r6, lr}
   37d48:	b0cc      	sub	sp, #304	; 0x130
   37d4a:	460d      	mov	r5, r1
   37d4c:	4614      	mov	r4, r2
   37d4e:	4606      	mov	r6, r0
	if (ctx == (TCHmacState_t) 0 ||
   37d50:	b369      	cbz	r1, 37dae <tc_hmac_set_key+0x6a>
	    key == (const uint8_t *) 0 ||
   37d52:	b372      	cbz	r2, 37db2 <tc_hmac_set_key+0x6e>
	}

	const uint8_t dummy_key[TC_SHA256_BLOCK_SIZE];
	struct tc_hmac_state_struct dummy_state;

	if (key_size <= TC_SHA256_BLOCK_SIZE) {
   37d54:	2a40      	cmp	r2, #64	; 0x40
   37d56:	d813      	bhi.n	37d80 <tc_hmac_set_key+0x3c>
		 * certain timing attacks. Without these dummy calls,
		 * adversaries would be able to learn whether the key_size is
		 * greater than TC_SHA256_BLOCK_SIZE by measuring the time
		 * consumed in this process.
		 */
		(void)tc_sha256_init(&dummy_state.hash_state);
   37d58:	4668      	mov	r0, sp
   37d5a:	f7e1 f977 	bl	1904c <tc_sha256_init>
		(void)tc_sha256_update(&dummy_state.hash_state,
   37d5e:	4622      	mov	r2, r4
   37d60:	a93c      	add	r1, sp, #240	; 0xf0
   37d62:	4668      	mov	r0, sp
   37d64:	f7ff ff37 	bl	37bd6 <tc_sha256_update>
				       dummy_key,
				       key_size);
		(void)tc_sha256_final(&dummy_state.key[TC_SHA256_DIGEST_SIZE],
   37d68:	4669      	mov	r1, sp
   37d6a:	a824      	add	r0, sp, #144	; 0x90
   37d6c:	f7ff ff5e 	bl	37c2c <tc_sha256_final>
				      &dummy_state.hash_state);

		/* Actual code for when key_size <= TC_SHA256_BLOCK_SIZE: */
		rekey(ctx->key, key, key_size);
   37d70:	4622      	mov	r2, r4
   37d72:	4629      	mov	r1, r5
   37d74:	f106 0070 	add.w	r0, r6, #112	; 0x70
   37d78:	f7ff ffc4 	bl	37d04 <rekey>
		rekey(ctx->key,
		      &ctx->key[TC_SHA256_DIGEST_SIZE],
		      TC_SHA256_DIGEST_SIZE);
	}

	return TC_CRYPTO_SUCCESS;
   37d7c:	2001      	movs	r0, #1
   37d7e:	e019      	b.n	37db4 <tc_hmac_set_key+0x70>
		(void)tc_sha256_init(&ctx->hash_state);
   37d80:	f7e1 f964 	bl	1904c <tc_sha256_init>
		(void)tc_sha256_update(&ctx->hash_state, key, key_size);
   37d84:	4622      	mov	r2, r4
   37d86:	4629      	mov	r1, r5
   37d88:	4630      	mov	r0, r6
   37d8a:	f7ff ff24 	bl	37bd6 <tc_sha256_update>
		(void)tc_sha256_final(&ctx->key[TC_SHA256_DIGEST_SIZE],
   37d8e:	f106 0490 	add.w	r4, r6, #144	; 0x90
   37d92:	4631      	mov	r1, r6
   37d94:	4620      	mov	r0, r4
   37d96:	f7ff ff49 	bl	37c2c <tc_sha256_final>
		rekey(ctx->key,
   37d9a:	2220      	movs	r2, #32
   37d9c:	4621      	mov	r1, r4
   37d9e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   37da2:	f7ff ffaf 	bl	37d04 <rekey>
	return TC_CRYPTO_SUCCESS;
   37da6:	2001      	movs	r0, #1
   37da8:	e004      	b.n	37db4 <tc_hmac_set_key+0x70>
		return TC_CRYPTO_FAIL;
   37daa:	2000      	movs	r0, #0
}
   37dac:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37dae:	2000      	movs	r0, #0
   37db0:	e000      	b.n	37db4 <tc_hmac_set_key+0x70>
   37db2:	2000      	movs	r0, #0
}
   37db4:	b04c      	add	sp, #304	; 0x130
   37db6:	bd70      	pop	{r4, r5, r6, pc}

00037db8 <tc_hmac_init>:

int tc_hmac_init(TCHmacState_t ctx)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   37db8:	b158      	cbz	r0, 37dd2 <tc_hmac_init+0x1a>
{
   37dba:	b510      	push	{r4, lr}
   37dbc:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

  (void) tc_sha256_init(&ctx->hash_state);
   37dbe:	f7e1 f945 	bl	1904c <tc_sha256_init>
  (void) tc_sha256_update(&ctx->hash_state, ctx->key, TC_SHA256_BLOCK_SIZE);
   37dc2:	2240      	movs	r2, #64	; 0x40
   37dc4:	f104 0170 	add.w	r1, r4, #112	; 0x70
   37dc8:	4620      	mov	r0, r4
   37dca:	f7ff ff04 	bl	37bd6 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   37dce:	2001      	movs	r0, #1
}
   37dd0:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   37dd2:	2000      	movs	r0, #0
}
   37dd4:	4770      	bx	lr

00037dd6 <tc_hmac_update>:
		   const void *data,
		   unsigned int data_length)
{

	/* input sanity check: */
	if (ctx == (TCHmacState_t) 0) {
   37dd6:	b120      	cbz	r0, 37de2 <tc_hmac_update+0xc>
{
   37dd8:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	(void)tc_sha256_update(&ctx->hash_state, data, data_length);
   37dda:	f7ff fefc 	bl	37bd6 <tc_sha256_update>

	return TC_CRYPTO_SUCCESS;
   37dde:	2001      	movs	r0, #1
}
   37de0:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   37de2:	2000      	movs	r0, #0
}
   37de4:	4770      	bx	lr

00037de6 <tc_hmac_final>:

int tc_hmac_final(uint8_t *tag, unsigned int taglen, TCHmacState_t ctx)
{

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   37de6:	b308      	cbz	r0, 37e2c <tc_hmac_final+0x46>
{
   37de8:	b538      	push	{r3, r4, r5, lr}
   37dea:	4614      	mov	r4, r2
   37dec:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   37dee:	2920      	cmp	r1, #32
   37df0:	d11e      	bne.n	37e30 <tc_hmac_final+0x4a>
	    taglen != TC_SHA256_DIGEST_SIZE ||
   37df2:	b1fa      	cbz	r2, 37e34 <tc_hmac_final+0x4e>
	    ctx == (TCHmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	(void) tc_sha256_final(tag, &ctx->hash_state);
   37df4:	4611      	mov	r1, r2
   37df6:	f7ff ff19 	bl	37c2c <tc_sha256_final>

	(void)tc_sha256_init(&ctx->hash_state);
   37dfa:	4620      	mov	r0, r4
   37dfc:	f7e1 f926 	bl	1904c <tc_sha256_init>
	(void)tc_sha256_update(&ctx->hash_state,
   37e00:	2240      	movs	r2, #64	; 0x40
   37e02:	f104 01b0 	add.w	r1, r4, #176	; 0xb0
   37e06:	4620      	mov	r0, r4
   37e08:	f7ff fee5 	bl	37bd6 <tc_sha256_update>
			       &ctx->key[TC_SHA256_BLOCK_SIZE],
				TC_SHA256_BLOCK_SIZE);
	(void)tc_sha256_update(&ctx->hash_state, tag, TC_SHA256_DIGEST_SIZE);
   37e0c:	2220      	movs	r2, #32
   37e0e:	4629      	mov	r1, r5
   37e10:	4620      	mov	r0, r4
   37e12:	f7ff fee0 	bl	37bd6 <tc_sha256_update>
	(void)tc_sha256_final(tag, &ctx->hash_state);
   37e16:	4621      	mov	r1, r4
   37e18:	4628      	mov	r0, r5
   37e1a:	f7ff ff07 	bl	37c2c <tc_sha256_final>

	/* destroy the current state */
	_set(ctx, 0, sizeof(*ctx));
   37e1e:	22f0      	movs	r2, #240	; 0xf0
   37e20:	2100      	movs	r1, #0
   37e22:	4620      	mov	r0, r4
   37e24:	f7ff fccf 	bl	377c6 <_set>

	return TC_CRYPTO_SUCCESS;
   37e28:	2001      	movs	r0, #1
   37e2a:	e002      	b.n	37e32 <tc_hmac_final+0x4c>
		return TC_CRYPTO_FAIL;
   37e2c:	2000      	movs	r0, #0
}
   37e2e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37e30:	2000      	movs	r0, #0
}
   37e32:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   37e34:	2000      	movs	r0, #0
   37e36:	e7fc      	b.n	37e32 <tc_hmac_final+0x4c>

00037e38 <update>:

/*
 * Assumes: prng != NULL
 */
static void update(TCHmacPrng_t prng, const uint8_t *data, unsigned int datalen, const uint8_t *additional_data, unsigned int additional_datalen)
{
   37e38:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
   37e3c:	b082      	sub	sp, #8
   37e3e:	4604      	mov	r4, r0
   37e40:	460d      	mov	r5, r1
   37e42:	4691      	mov	r9, r2
   37e44:	461f      	mov	r7, r3
	const uint8_t separator0 = 0x00;
   37e46:	2300      	movs	r3, #0
   37e48:	f88d 3007 	strb.w	r3, [sp, #7]
	const uint8_t separator1 = 0x01;
   37e4c:	f04f 0b01 	mov.w	fp, #1
   37e50:	f88d b006 	strb.w	fp, [sp, #6]

	/* configure the new prng key into the prng's instance of hmac */
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   37e54:	f100 08f0 	add.w	r8, r0, #240	; 0xf0
   37e58:	2220      	movs	r2, #32
   37e5a:	4641      	mov	r1, r8
   37e5c:	f7ff ff72 	bl	37d44 <tc_hmac_set_key>

	/* use current state, e and separator 0 to compute a new prng key: */
	(void)tc_hmac_init(&prng->h);
   37e60:	4620      	mov	r0, r4
   37e62:	f7ff ffa9 	bl	37db8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   37e66:	f504 7688 	add.w	r6, r4, #272	; 0x110
   37e6a:	2220      	movs	r2, #32
   37e6c:	4631      	mov	r1, r6
   37e6e:	4620      	mov	r0, r4
   37e70:	f7ff ffb1 	bl	37dd6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator0, sizeof(separator0));
   37e74:	465a      	mov	r2, fp
   37e76:	f10d 0107 	add.w	r1, sp, #7
   37e7a:	4620      	mov	r0, r4
   37e7c:	f7ff ffab 	bl	37dd6 <tc_hmac_update>

	if (data && datalen)
   37e80:	b115      	cbz	r5, 37e88 <update+0x50>
   37e82:	f1b9 0f00 	cmp.w	r9, #0
   37e86:	d120      	bne.n	37eca <update+0x92>
		(void)tc_hmac_update(&prng->h, data, datalen);
	if (additional_data && additional_datalen)
   37e88:	b10f      	cbz	r7, 37e8e <update+0x56>
   37e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37e8c:	bb1b      	cbnz	r3, 37ed6 <update+0x9e>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);

	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   37e8e:	4622      	mov	r2, r4
   37e90:	2120      	movs	r1, #32
   37e92:	4640      	mov	r0, r8
   37e94:	f7ff ffa7 	bl	37de6 <tc_hmac_final>

	/* configure the new prng key into the prng's instance of hmac */
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   37e98:	2220      	movs	r2, #32
   37e9a:	4641      	mov	r1, r8
   37e9c:	4620      	mov	r0, r4
   37e9e:	f7ff ff51 	bl	37d44 <tc_hmac_set_key>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
   37ea2:	4620      	mov	r0, r4
   37ea4:	f7ff ff88 	bl	37db8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   37ea8:	2220      	movs	r2, #32
   37eaa:	4631      	mov	r1, r6
   37eac:	4620      	mov	r0, r4
   37eae:	f7ff ff92 	bl	37dd6 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   37eb2:	4622      	mov	r2, r4
   37eb4:	2120      	movs	r1, #32
   37eb6:	4630      	mov	r0, r6
   37eb8:	f7ff ff95 	bl	37de6 <tc_hmac_final>

	if (data == 0 || datalen == 0)
   37ebc:	b115      	cbz	r5, 37ec4 <update+0x8c>
   37ebe:	f1b9 0f00 	cmp.w	r9, #0
   37ec2:	d10e      	bne.n	37ee2 <update+0xaa>

	/* use the new key to compute a new state variable v */
	(void)tc_hmac_init(&prng->h);
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
}
   37ec4:	b002      	add	sp, #8
   37ec6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		(void)tc_hmac_update(&prng->h, data, datalen);
   37eca:	464a      	mov	r2, r9
   37ecc:	4629      	mov	r1, r5
   37ece:	4620      	mov	r0, r4
   37ed0:	f7ff ff81 	bl	37dd6 <tc_hmac_update>
   37ed4:	e7d8      	b.n	37e88 <update+0x50>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   37ed6:	461a      	mov	r2, r3
   37ed8:	4639      	mov	r1, r7
   37eda:	4620      	mov	r0, r4
   37edc:	f7ff ff7b 	bl	37dd6 <tc_hmac_update>
   37ee0:	e7d5      	b.n	37e8e <update+0x56>
	tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   37ee2:	2220      	movs	r2, #32
   37ee4:	4641      	mov	r1, r8
   37ee6:	4620      	mov	r0, r4
   37ee8:	f7ff ff2c 	bl	37d44 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   37eec:	4620      	mov	r0, r4
   37eee:	f7ff ff63 	bl	37db8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   37ef2:	2220      	movs	r2, #32
   37ef4:	4631      	mov	r1, r6
   37ef6:	4620      	mov	r0, r4
   37ef8:	f7ff ff6d 	bl	37dd6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, &separator1, sizeof(separator1));
   37efc:	2201      	movs	r2, #1
   37efe:	f10d 0106 	add.w	r1, sp, #6
   37f02:	4620      	mov	r0, r4
   37f04:	f7ff ff67 	bl	37dd6 <tc_hmac_update>
	(void)tc_hmac_update(&prng->h, data, datalen);
   37f08:	464a      	mov	r2, r9
   37f0a:	4629      	mov	r1, r5
   37f0c:	4620      	mov	r0, r4
   37f0e:	f7ff ff62 	bl	37dd6 <tc_hmac_update>
	if (additional_data && additional_datalen)
   37f12:	b10f      	cbz	r7, 37f18 <update+0xe0>
   37f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   37f16:	b9bb      	cbnz	r3, 37f48 <update+0x110>
	(void)tc_hmac_final(prng->key, sizeof(prng->key), &prng->h);
   37f18:	4622      	mov	r2, r4
   37f1a:	2120      	movs	r1, #32
   37f1c:	4640      	mov	r0, r8
   37f1e:	f7ff ff62 	bl	37de6 <tc_hmac_final>
	(void)tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   37f22:	2220      	movs	r2, #32
   37f24:	4641      	mov	r1, r8
   37f26:	4620      	mov	r0, r4
   37f28:	f7ff ff0c 	bl	37d44 <tc_hmac_set_key>
	(void)tc_hmac_init(&prng->h);
   37f2c:	4620      	mov	r0, r4
   37f2e:	f7ff ff43 	bl	37db8 <tc_hmac_init>
	(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   37f32:	2220      	movs	r2, #32
   37f34:	4631      	mov	r1, r6
   37f36:	4620      	mov	r0, r4
   37f38:	f7ff ff4d 	bl	37dd6 <tc_hmac_update>
	(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   37f3c:	4622      	mov	r2, r4
   37f3e:	2120      	movs	r1, #32
   37f40:	4630      	mov	r0, r6
   37f42:	f7ff ff50 	bl	37de6 <tc_hmac_final>
   37f46:	e7bd      	b.n	37ec4 <update+0x8c>
		(void)tc_hmac_update(&prng->h, additional_data, additional_datalen);
   37f48:	461a      	mov	r2, r3
   37f4a:	4639      	mov	r1, r7
   37f4c:	4620      	mov	r0, r4
   37f4e:	f7ff ff42 	bl	37dd6 <tc_hmac_update>
   37f52:	e7e1      	b.n	37f18 <update+0xe0>

00037f54 <tc_hmac_prng_init>:
		      const uint8_t *personalization,
		      unsigned int plen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   37f54:	b1e8      	cbz	r0, 37f92 <tc_hmac_prng_init+0x3e>
{
   37f56:	b5f0      	push	{r4, r5, r6, r7, lr}
   37f58:	b083      	sub	sp, #12
   37f5a:	460c      	mov	r4, r1
   37f5c:	4615      	mov	r5, r2
   37f5e:	4606      	mov	r6, r0
	    personalization == (uint8_t *) 0 ||
   37f60:	b1c9      	cbz	r1, 37f96 <tc_hmac_prng_init+0x42>
	    plen > MAX_PLEN) {
		return TC_CRYPTO_FAIL;
	}

	/* put the generator into a known state: */
	_set(prng->key, 0x00, sizeof(prng->key));
   37f62:	2220      	movs	r2, #32
   37f64:	2100      	movs	r1, #0
   37f66:	30f0      	adds	r0, #240	; 0xf0
   37f68:	f7ff fc2d 	bl	377c6 <_set>
	_set(prng->v, 0x01, sizeof(prng->v));
   37f6c:	2220      	movs	r2, #32
   37f6e:	2101      	movs	r1, #1
   37f70:	f506 7088 	add.w	r0, r6, #272	; 0x110
   37f74:	f7ff fc27 	bl	377c6 <_set>

	update(prng, personalization, plen, 0, 0);
   37f78:	2700      	movs	r7, #0
   37f7a:	9700      	str	r7, [sp, #0]
   37f7c:	463b      	mov	r3, r7
   37f7e:	462a      	mov	r2, r5
   37f80:	4621      	mov	r1, r4
   37f82:	4630      	mov	r0, r6
   37f84:	f7ff ff58 	bl	37e38 <update>

	/* force a reseed before allowing tc_hmac_prng_generate to succeed: */
	prng->countdown = 0;
   37f88:	f8c6 7130 	str.w	r7, [r6, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
   37f8c:	2001      	movs	r0, #1
}
   37f8e:	b003      	add	sp, #12
   37f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   37f92:	2000      	movs	r0, #0
}
   37f94:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37f96:	2000      	movs	r0, #0
   37f98:	e7f9      	b.n	37f8e <tc_hmac_prng_init+0x3a>

00037f9a <tc_hmac_prng_reseed>:
			const uint8_t *additional_input,
			unsigned int additionallen)
{

	/* input sanity check: */
	if (prng == (TCHmacPrng_t) 0 ||
   37f9a:	b1d0      	cbz	r0, 37fd2 <tc_hmac_prng_reseed+0x38>
{
   37f9c:	b510      	push	{r4, lr}
   37f9e:	b082      	sub	sp, #8
   37fa0:	4604      	mov	r4, r0
	if (prng == (TCHmacPrng_t) 0 ||
   37fa2:	b1c1      	cbz	r1, 37fd6 <tc_hmac_prng_reseed+0x3c>
	    seed == (const uint8_t *) 0 ||
	    seedlen < MIN_SLEN ||
   37fa4:	2a1f      	cmp	r2, #31
   37fa6:	d918      	bls.n	37fda <tc_hmac_prng_reseed+0x40>
	    seedlen > MAX_SLEN) {
		return TC_CRYPTO_FAIL;
	}

	if (additional_input != (const uint8_t *) 0) {
   37fa8:	b173      	cbz	r3, 37fc8 <tc_hmac_prng_reseed+0x2e>
		/*
		 * Abort if additional_input is provided but has inappropriate
		 * length
		 */
		if (additionallen == 0 ||
   37faa:	9804      	ldr	r0, [sp, #16]
   37fac:	b908      	cbnz	r0, 37fb2 <tc_hmac_prng_reseed+0x18>
		    additionallen > MAX_ALEN) {
			return TC_CRYPTO_FAIL;
   37fae:	2000      	movs	r0, #0
   37fb0:	e008      	b.n	37fc4 <tc_hmac_prng_reseed+0x2a>
		} else {
			/* call update for the seed and additional_input */
			update(prng, seed, seedlen, additional_input, additionallen);
   37fb2:	9000      	str	r0, [sp, #0]
   37fb4:	4620      	mov	r0, r4
   37fb6:	f7ff ff3f 	bl	37e38 <update>
		/* call update only for the seed */
		update(prng, seed, seedlen, 0, 0);
	}

	/* ... and enable hmac_prng_generate */
	prng->countdown = MAX_GENS;
   37fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   37fbe:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130

	return TC_CRYPTO_SUCCESS;
   37fc2:	2001      	movs	r0, #1
}
   37fc4:	b002      	add	sp, #8
   37fc6:	bd10      	pop	{r4, pc}
		update(prng, seed, seedlen, 0, 0);
   37fc8:	2300      	movs	r3, #0
   37fca:	9300      	str	r3, [sp, #0]
   37fcc:	f7ff ff34 	bl	37e38 <update>
   37fd0:	e7f3      	b.n	37fba <tc_hmac_prng_reseed+0x20>
		return TC_CRYPTO_FAIL;
   37fd2:	2000      	movs	r0, #0
}
   37fd4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   37fd6:	2000      	movs	r0, #0
   37fd8:	e7f4      	b.n	37fc4 <tc_hmac_prng_reseed+0x2a>
   37fda:	2000      	movs	r0, #0
   37fdc:	e7f2      	b.n	37fc4 <tc_hmac_prng_reseed+0x2a>

00037fde <tc_hmac_prng_generate>:
int tc_hmac_prng_generate(uint8_t *out, unsigned int outlen, TCHmacPrng_t prng)
{
	unsigned int bufferlen;

	/* input sanity check: */
	if (out == (uint8_t *) 0 ||
   37fde:	2800      	cmp	r0, #0
   37fe0:	d045      	beq.n	3806e <tc_hmac_prng_generate+0x90>
{
   37fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   37fe6:	b082      	sub	sp, #8
   37fe8:	460f      	mov	r7, r1
   37fea:	4614      	mov	r4, r2
   37fec:	4680      	mov	r8, r0
	if (out == (uint8_t *) 0 ||
   37fee:	2a00      	cmp	r2, #0
   37ff0:	d03f      	beq.n	38072 <tc_hmac_prng_generate+0x94>
	    prng == (TCHmacPrng_t) 0 ||
   37ff2:	2900      	cmp	r1, #0
   37ff4:	d03f      	beq.n	38076 <tc_hmac_prng_generate+0x98>
	    outlen == 0 ||
   37ff6:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
   37ffa:	d840      	bhi.n	3807e <tc_hmac_prng_generate+0xa0>
	    outlen > MAX_OUT) {
		return TC_CRYPTO_FAIL;
	} else if (prng->countdown == 0) {
   37ffc:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   38000:	2b00      	cmp	r3, #0
   38002:	d03e      	beq.n	38082 <tc_hmac_prng_generate+0xa4>
		return TC_HMAC_PRNG_RESEED_REQ;
	}

	prng->countdown--;
   38004:	3b01      	subs	r3, #1
   38006:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

	while (outlen != 0) {
   3800a:	e025      	b.n	38058 <tc_hmac_prng_generate+0x7a>
		/* configure the new prng key into the prng's instance of hmac */
		tc_hmac_set_key(&prng->h, prng->key, sizeof(prng->key));
   3800c:	2220      	movs	r2, #32
   3800e:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   38012:	4620      	mov	r0, r4
   38014:	f7ff fe96 	bl	37d44 <tc_hmac_set_key>

		/* operate HMAC in OFB mode to create "random" outputs */
		(void)tc_hmac_init(&prng->h);
   38018:	4620      	mov	r0, r4
   3801a:	f7ff fecd 	bl	37db8 <tc_hmac_init>
		(void)tc_hmac_update(&prng->h, prng->v, sizeof(prng->v));
   3801e:	f504 7588 	add.w	r5, r4, #272	; 0x110
   38022:	2220      	movs	r2, #32
   38024:	4629      	mov	r1, r5
   38026:	4620      	mov	r0, r4
   38028:	f7ff fed5 	bl	37dd6 <tc_hmac_update>
		(void)tc_hmac_final(prng->v, sizeof(prng->v), &prng->h);
   3802c:	4622      	mov	r2, r4
   3802e:	2120      	movs	r1, #32
   38030:	4628      	mov	r0, r5
   38032:	f7ff fed8 	bl	37de6 <tc_hmac_final>

		bufferlen = (TC_SHA256_DIGEST_SIZE > outlen) ?
   38036:	463e      	mov	r6, r7
   38038:	2f20      	cmp	r7, #32
   3803a:	bf28      	it	cs
   3803c:	2620      	movcs	r6, #32
			outlen : TC_SHA256_DIGEST_SIZE;
		(void)_copy(out, bufferlen, prng->v, bufferlen);
   3803e:	4633      	mov	r3, r6
   38040:	462a      	mov	r2, r5
   38042:	4631      	mov	r1, r6
   38044:	4640      	mov	r0, r8
   38046:	f7ff fbb1 	bl	377ac <_copy>

		out += bufferlen;
   3804a:	44b0      	add	r8, r6
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
			(outlen - TC_SHA256_DIGEST_SIZE) : 0;
   3804c:	4639      	mov	r1, r7
   3804e:	2f20      	cmp	r7, #32
   38050:	bf38      	it	cc
   38052:	2120      	movcc	r1, #32
		outlen = (outlen > TC_SHA256_DIGEST_SIZE) ?
   38054:	f1a1 0720 	sub.w	r7, r1, #32
	while (outlen != 0) {
   38058:	2f00      	cmp	r7, #0
   3805a:	d1d7      	bne.n	3800c <tc_hmac_prng_generate+0x2e>
	}

	/* block future PRNG compromises from revealing past state */
	update(prng, 0, 0, 0, 0);
   3805c:	2100      	movs	r1, #0
   3805e:	9100      	str	r1, [sp, #0]
   38060:	460b      	mov	r3, r1
   38062:	460a      	mov	r2, r1
   38064:	4620      	mov	r0, r4
   38066:	f7ff fee7 	bl	37e38 <update>

	return TC_CRYPTO_SUCCESS;
   3806a:	2001      	movs	r0, #1
   3806c:	e004      	b.n	38078 <tc_hmac_prng_generate+0x9a>
		return TC_CRYPTO_FAIL;
   3806e:	2000      	movs	r0, #0
}
   38070:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   38072:	2000      	movs	r0, #0
   38074:	e000      	b.n	38078 <tc_hmac_prng_generate+0x9a>
   38076:	2000      	movs	r0, #0
}
   38078:	b002      	add	sp, #8
   3807a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   3807e:	2000      	movs	r0, #0
   38080:	e7fa      	b.n	38078 <tc_hmac_prng_generate+0x9a>
		return TC_HMAC_PRNG_RESEED_REQ;
   38082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38086:	e7f7      	b.n	38078 <tc_hmac_prng_generate+0x9a>

00038088 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   38088:	b538      	push	{r3, r4, r5, lr}
   3808a:	4604      	mov	r4, r0

	if (esf != NULL) {
   3808c:	460d      	mov	r5, r1
   3808e:	b111      	cbz	r1, 38096 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   38090:	4608      	mov	r0, r1
   38092:	f7e1 f835 	bl	19100 <esf_dump>
	}
	z_fatal_error(reason, esf);
   38096:	4629      	mov	r1, r5
   38098:	4620      	mov	r0, r4
   3809a:	f7f8 fcf5 	bl	30a88 <z_fatal_error>
}
   3809e:	bd38      	pop	{r3, r4, r5, pc}

000380a0 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   380a0:	b508      	push	{r3, lr}
   380a2:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   380a4:	6800      	ldr	r0, [r0, #0]
   380a6:	f7ff ffef 	bl	38088 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   380aa:	bd08      	pop	{r3, pc}

000380ac <arch_irq_enable>:
{
   380ac:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
   380ae:	b240      	sxtb	r0, r0
   380b0:	f7e1 f94c 	bl	1934c <__NVIC_EnableIRQ>
}
   380b4:	bd08      	pop	{r3, pc}

000380b6 <arch_irq_disable>:
{
   380b6:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
   380b8:	b240      	sxtb	r0, r0
   380ba:	f7e1 f955 	bl	19368 <__NVIC_DisableIRQ>
}
   380be:	bd08      	pop	{r3, pc}

000380c0 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
   380c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   380c2:	2100      	movs	r1, #0
   380c4:	2001      	movs	r0, #1
   380c6:	f7ff ffdf 	bl	38088 <z_arm_fatal_error>
}
   380ca:	bd08      	pop	{r3, pc}

000380cc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   380cc:	b508      	push	{r3, lr}
	handler();
   380ce:	f7e1 f9a3 	bl	19418 <z_SysNmiOnReset>
	z_arm_int_exit();
   380d2:	f7e1 fa7b 	bl	195cc <z_arm_exc_exit>
}
   380d6:	bd08      	pop	{r3, pc}

000380d8 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
   380d8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   380dc:	f383 880b 	msr	PSPLIM, r3
}
   380e0:	4770      	bx	lr

000380e2 <memory_fault_recoverable>:
}
   380e2:	2000      	movs	r0, #0
   380e4:	4770      	bx	lr

000380e6 <fault_handle>:
{
   380e6:	b508      	push	{r3, lr}
	*recoverable = false;
   380e8:	2300      	movs	r3, #0
   380ea:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   380ec:	1ecb      	subs	r3, r1, #3
   380ee:	2b09      	cmp	r3, #9
   380f0:	d81a      	bhi.n	38128 <fault_handle+0x42>
   380f2:	e8df f003 	tbb	[pc, r3]
   380f6:	0905      	.short	0x0905
   380f8:	1919110d 	.word	0x1919110d
   380fc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   38100:	4611      	mov	r1, r2
   38102:	f7e1 ff89 	bl	1a018 <hard_fault>
}
   38106:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   38108:	2100      	movs	r1, #0
   3810a:	f7e1 fae1 	bl	196d0 <mem_manage_fault>
		break;
   3810e:	e7fa      	b.n	38106 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   38110:	2100      	movs	r1, #0
   38112:	f7e1 fc77 	bl	19a04 <bus_fault>
		break;
   38116:	e7f6      	b.n	38106 <fault_handle+0x20>
		reason = usage_fault(esf);
   38118:	f7e1 fe08 	bl	19d2c <usage_fault>
		break;
   3811c:	e7f3      	b.n	38106 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   3811e:	4611      	mov	r1, r2
   38120:	f7e2 f8c2 	bl	1a2a8 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   38124:	2000      	movs	r0, #0
		break;
   38126:	e7ee      	b.n	38106 <fault_handle+0x20>
		reserved_exception(esf, fault);
   38128:	f7e2 f8ee 	bl	1a308 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   3812c:	2000      	movs	r0, #0
	return reason;
   3812e:	e7ea      	b.n	38106 <fault_handle+0x20>

00038130 <z_arm_save_fp_context>:
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   38130:	4770      	bx	lr

00038132 <z_arm_restore_fp_context>:
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   38132:	4770      	bx	lr

00038134 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   38134:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   38138:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   3813c:	d001      	beq.n	38142 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
   3813e:	b2c0      	uxtb	r0, r0
   38140:	4770      	bx	lr
	}

	return -EINVAL;
   38142:	f06f 0015 	mvn.w	r0, #21
}
   38146:	4770      	bx	lr

00038148 <region_init>:
{
   38148:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
   3814a:	680b      	ldr	r3, [r1, #0]
   3814c:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
   38150:	7a0b      	ldrb	r3, [r1, #8]
   38152:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   38156:	68ca      	ldr	r2, [r1, #12]
   38158:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   3815c:	095b      	lsrs	r3, r3, #5
   3815e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
   38162:	f042 0201 	orr.w	r2, r2, #1
   38166:	ea4c 010e 	orr.w	r1, ip, lr
   3816a:	f7e2 fa75 	bl	1a658 <mpu_set_region>
}
   3816e:	bd08      	pop	{r3, pc}

00038170 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
   38170:	6843      	ldr	r3, [r0, #4]
		&&
   38172:	2b1f      	cmp	r3, #31
   38174:	d908      	bls.n	38188 <mpu_partition_is_valid+0x18>
		&&
   38176:	f013 0f1f 	tst.w	r3, #31
   3817a:	d107      	bne.n	3818c <mpu_partition_is_valid+0x1c>
		((part->start &
   3817c:	6803      	ldr	r3, [r0, #0]
		&&
   3817e:	f013 0f1f 	tst.w	r3, #31
   38182:	d005      	beq.n	38190 <mpu_partition_is_valid+0x20>
   38184:	2000      	movs	r0, #0
   38186:	4770      	bx	lr
   38188:	2000      	movs	r0, #0
   3818a:	4770      	bx	lr
   3818c:	2000      	movs	r0, #0
   3818e:	4770      	bx	lr
   38190:	2001      	movs	r0, #1
}
   38192:	4770      	bx	lr

00038194 <get_region_index>:
{
   38194:	b570      	push	{r4, r5, r6, lr}
   38196:	4604      	mov	r4, r0
   38198:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   3819a:	f7ff ffcb 	bl	38134 <arm_cmse_mpu_region_get>
   3819e:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   381a0:	4434      	add	r4, r6
   381a2:	1e60      	subs	r0, r4, #1
   381a4:	f7ff ffc6 	bl	38134 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   381a8:	4285      	cmp	r5, r0
   381aa:	d101      	bne.n	381b0 <get_region_index+0x1c>
}
   381ac:	4628      	mov	r0, r5
   381ae:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
   381b0:	f06f 0515 	mvn.w	r5, #21
   381b4:	e7fa      	b.n	381ac <get_region_index+0x18>

000381b6 <mpu_configure_region>:
{
   381b6:	b510      	push	{r4, lr}
   381b8:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
   381ba:	680b      	ldr	r3, [r1, #0]
   381bc:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
   381be:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
   381c0:	f8b1 c008 	ldrh.w	ip, [r1, #8]
   381c4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   381c8:	f36c 0204 	bfi	r2, ip, #0, #5
   381cc:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
   381d0:	8949      	ldrh	r1, [r1, #10]
   381d2:	b2d2      	uxtb	r2, r2
   381d4:	f361 1247 	bfi	r2, r1, #5, #3
   381d8:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   381dc:	f023 031f 	bic.w	r3, r3, #31
   381e0:	4423      	add	r3, r4
   381e2:	3b01      	subs	r3, #1
   381e4:	f023 031f 	bic.w	r3, r3, #31
   381e8:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   381ea:	4669      	mov	r1, sp
   381ec:	f7e2 fa8e 	bl	1a70c <region_allocate_and_init>
}
   381f0:	b004      	add	sp, #16
   381f2:	bd10      	pop	{r4, pc}

000381f4 <strtoul>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long strtoul(const char *nptr, char **endptr, register int base)
{
   381f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   381f8:	4606      	mov	r6, r0
   381fa:	460f      	mov	r7, r1
	register const char *s = nptr;
   381fc:	4604      	mov	r4, r0
   381fe:	e001      	b.n	38204 <strtoul+0x10>
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   38200:	2501      	movs	r5, #1
	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
	} while (isspace((unsigned char)c));
   38202:	b16d      	cbz	r5, 38220 <strtoul+0x2c>
		c = *s++;
   38204:	4620      	mov	r0, r4
   38206:	3401      	adds	r4, #1
   38208:	7801      	ldrb	r1, [r0, #0]
   3820a:	460b      	mov	r3, r1
   3820c:	2920      	cmp	r1, #32
   3820e:	d0f7      	beq.n	38200 <strtoul+0xc>
   38210:	f1a1 0509 	sub.w	r5, r1, #9
   38214:	2d04      	cmp	r5, #4
   38216:	d801      	bhi.n	3821c <strtoul+0x28>
   38218:	2501      	movs	r5, #1
   3821a:	e7f2      	b.n	38202 <strtoul+0xe>
   3821c:	2500      	movs	r5, #0
   3821e:	e7f0      	b.n	38202 <strtoul+0xe>
	if (c == '-') {
   38220:	292d      	cmp	r1, #45	; 0x2d
   38222:	d016      	beq.n	38252 <strtoul+0x5e>
		neg = 1;
		c = *s++;
	} else if (c == '+') {
   38224:	292b      	cmp	r1, #43	; 0x2b
   38226:	d019      	beq.n	3825c <strtoul+0x68>
	register int neg = 0, any, cutlim;
   38228:	46a9      	mov	r9, r5
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   3822a:	b10a      	cbz	r2, 38230 <strtoul+0x3c>
   3822c:	2a10      	cmp	r2, #16
   3822e:	d101      	bne.n	38234 <strtoul+0x40>
   38230:	2b30      	cmp	r3, #48	; 0x30
   38232:	d017      	beq.n	38264 <strtoul+0x70>
		c = s[1];
		s += 2;
		base = 16;
	}

	if (base == 0) {
   38234:	b912      	cbnz	r2, 3823c <strtoul+0x48>
		base = c == '0' ? 8 : 10;
   38236:	2b30      	cmp	r3, #48	; 0x30
   38238:	d01d      	beq.n	38276 <strtoul+0x82>
   3823a:	220a      	movs	r2, #10
	}

	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   3823c:	4690      	mov	r8, r2
   3823e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   38242:	fbb1 f1f2 	udiv	r1, r1, r2
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   38246:	fb02 fe01 	mul.w	lr, r2, r1
   3824a:	ea6f 0e0e 	mvn.w	lr, lr
	for (acc = 0, any = 0;; c = *s++) {
   3824e:	2000      	movs	r0, #0
   38250:	e030      	b.n	382b4 <strtoul+0xc0>
		c = *s++;
   38252:	7823      	ldrb	r3, [r4, #0]
   38254:	1c84      	adds	r4, r0, #2
		neg = 1;
   38256:	f04f 0901 	mov.w	r9, #1
   3825a:	e7e6      	b.n	3822a <strtoul+0x36>
		c = *s++;
   3825c:	7823      	ldrb	r3, [r4, #0]
	register int neg = 0, any, cutlim;
   3825e:	46a9      	mov	r9, r5
		c = *s++;
   38260:	1c84      	adds	r4, r0, #2
   38262:	e7e2      	b.n	3822a <strtoul+0x36>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   38264:	7821      	ldrb	r1, [r4, #0]
   38266:	2978      	cmp	r1, #120	; 0x78
   38268:	d001      	beq.n	3826e <strtoul+0x7a>
   3826a:	2958      	cmp	r1, #88	; 0x58
   3826c:	d1e2      	bne.n	38234 <strtoul+0x40>
		c = s[1];
   3826e:	7863      	ldrb	r3, [r4, #1]
		s += 2;
   38270:	3402      	adds	r4, #2
		base = 16;
   38272:	2210      	movs	r2, #16
   38274:	e7de      	b.n	38234 <strtoul+0x40>
		base = c == '0' ? 8 : 10;
   38276:	2208      	movs	r2, #8
   38278:	e7e0      	b.n	3823c <strtoul+0x48>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   3827a:	f04c 0a20 	orr.w	sl, ip, #32
   3827e:	f1aa 0a61 	sub.w	sl, sl, #97	; 0x61
		if (isdigit((unsigned char)c)) {
			c -= '0';
		} else if (isalpha((unsigned char)c)) {
   38282:	f1ba 0f19 	cmp.w	sl, #25
   38286:	d82b      	bhi.n	382e0 <strtoul+0xec>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   38288:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
			c -= isupper((unsigned char)c) ? 'A' - 10 : 'a' - 10;
   3828c:	f1bc 0f19 	cmp.w	ip, #25
   38290:	d804      	bhi.n	3829c <strtoul+0xa8>
   38292:	f04f 0c37 	mov.w	ip, #55	; 0x37
   38296:	eba3 030c 	sub.w	r3, r3, ip
   3829a:	e013      	b.n	382c4 <strtoul+0xd0>
   3829c:	f04f 0c57 	mov.w	ip, #87	; 0x57
   382a0:	e7f9      	b.n	38296 <strtoul+0xa2>
			break;
		}
		if (c >= base) {
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   382a2:	4573      	cmp	r3, lr
   382a4:	dd15      	ble.n	382d2 <strtoul+0xde>
			any = -1;
   382a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   382aa:	e001      	b.n	382b0 <strtoul+0xbc>
   382ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	for (acc = 0, any = 0;; c = *s++) {
   382b0:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit((unsigned char)c)) {
   382b4:	fa5f fc83 	uxtb.w	ip, r3
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   382b8:	f1a3 0a30 	sub.w	sl, r3, #48	; 0x30
   382bc:	f1ba 0f09 	cmp.w	sl, #9
   382c0:	d8db      	bhi.n	3827a <strtoul+0x86>
			c -= '0';
   382c2:	4653      	mov	r3, sl
		if (c >= base) {
   382c4:	429a      	cmp	r2, r3
   382c6:	dd0b      	ble.n	382e0 <strtoul+0xec>
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   382c8:	2d00      	cmp	r5, #0
   382ca:	dbef      	blt.n	382ac <strtoul+0xb8>
   382cc:	4288      	cmp	r0, r1
   382ce:	d804      	bhi.n	382da <strtoul+0xe6>
   382d0:	d0e7      	beq.n	382a2 <strtoul+0xae>
		} else {
			any = 1;
			acc *= base;
			acc += c;
   382d2:	fb00 3008 	mla	r0, r0, r8, r3
			any = 1;
   382d6:	2501      	movs	r5, #1
   382d8:	e7ea      	b.n	382b0 <strtoul+0xbc>
			any = -1;
   382da:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   382de:	e7e7      	b.n	382b0 <strtoul+0xbc>
		}
	}
	if (any < 0) {
   382e0:	2d00      	cmp	r5, #0
   382e2:	db09      	blt.n	382f8 <strtoul+0x104>
		acc = ULONG_MAX;
		errno = ERANGE;
	} else if (neg) {
   382e4:	f1b9 0f00 	cmp.w	r9, #0
   382e8:	d000      	beq.n	382ec <strtoul+0xf8>
		acc = -acc;
   382ea:	4240      	negs	r0, r0
	}
	if (endptr != NULL) {
   382ec:	b117      	cbz	r7, 382f4 <strtoul+0x100>
		*endptr = (char *)(any ? s - 1 : nptr);
   382ee:	b105      	cbz	r5, 382f2 <strtoul+0xfe>
   382f0:	1e66      	subs	r6, r4, #1
   382f2:	603e      	str	r6, [r7, #0]
	}
	return acc;
}
   382f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   382f8:	f7f8 fb5e 	bl	309b8 <z_impl_z_errno>
		errno = ERANGE;
   382fc:	2322      	movs	r3, #34	; 0x22
   382fe:	6003      	str	r3, [r0, #0]
		acc = ULONG_MAX;
   38300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38304:	e7f2      	b.n	382ec <strtoul+0xf8>

00038306 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   38306:	4602      	mov	r2, r0
   38308:	e002      	b.n	38310 <strcpy+0xa>
		*d = *s;
   3830a:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   3830e:	3101      	adds	r1, #1
	while (*s != '\0') {
   38310:	780b      	ldrb	r3, [r1, #0]
   38312:	2b00      	cmp	r3, #0
   38314:	d1f9      	bne.n	3830a <strcpy+0x4>
	}

	*d = '\0';
   38316:	7013      	strb	r3, [r2, #0]

	return dest;
}
   38318:	4770      	bx	lr

0003831a <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   3831a:	4603      	mov	r3, r0
   3831c:	b1a2      	cbz	r2, 38348 <strncpy+0x2e>
{
   3831e:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   38320:	780c      	ldrb	r4, [r1, #0]
   38322:	b12c      	cbz	r4, 38330 <strncpy+0x16>
		*d = *s;
   38324:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   38328:	3101      	adds	r1, #1
		d++;
		n--;
   3832a:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   3832c:	2a00      	cmp	r2, #0
   3832e:	d1f7      	bne.n	38320 <strncpy+0x6>
	}

	while (n > 0) {
   38330:	b122      	cbz	r2, 3833c <strncpy+0x22>
		*d = '\0';
   38332:	2100      	movs	r1, #0
   38334:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   38338:	3a01      	subs	r2, #1
   3833a:	e7f9      	b.n	38330 <strncpy+0x16>
	}

	return dest;
}
   3833c:	bc10      	pop	{r4}
   3833e:	4770      	bx	lr
		*d = '\0';
   38340:	2100      	movs	r1, #0
   38342:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   38346:	3a01      	subs	r2, #1
	while (n > 0) {
   38348:	2a00      	cmp	r2, #0
   3834a:	d1f9      	bne.n	38340 <strncpy+0x26>
   3834c:	4770      	bx	lr

0003834e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   3834e:	4603      	mov	r3, r0
	size_t n = 0;
   38350:	2000      	movs	r0, #0

	while (*s != '\0') {
   38352:	e001      	b.n	38358 <strlen+0xa>
		s++;
   38354:	3301      	adds	r3, #1
		n++;
   38356:	3001      	adds	r0, #1
	while (*s != '\0') {
   38358:	781a      	ldrb	r2, [r3, #0]
   3835a:	2a00      	cmp	r2, #0
   3835c:	d1fa      	bne.n	38354 <strlen+0x6>
	}

	return n;
}
   3835e:	4770      	bx	lr

00038360 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   38360:	4603      	mov	r3, r0
	size_t n = 0;
   38362:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   38364:	e001      	b.n	3836a <strnlen+0xa>
		s++;
   38366:	3301      	adds	r3, #1
		n++;
   38368:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
   3836a:	781a      	ldrb	r2, [r3, #0]
   3836c:	b10a      	cbz	r2, 38372 <strnlen+0x12>
   3836e:	4288      	cmp	r0, r1
   38370:	d3f9      	bcc.n	38366 <strnlen+0x6>
	}

	return n;
}
   38372:	4770      	bx	lr

00038374 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   38374:	e001      	b.n	3837a <strcmp+0x6>
		s1++;
   38376:	3001      	adds	r0, #1
		s2++;
   38378:	3101      	adds	r1, #1
	while ((*s1 == *s2) && (*s1 != '\0')) {
   3837a:	7803      	ldrb	r3, [r0, #0]
   3837c:	780a      	ldrb	r2, [r1, #0]
   3837e:	4293      	cmp	r3, r2
   38380:	d101      	bne.n	38386 <strcmp+0x12>
   38382:	2b00      	cmp	r3, #0
   38384:	d1f7      	bne.n	38376 <strcmp+0x2>
	}

	return *s1 - *s2;
}
   38386:	1a98      	subs	r0, r3, r2
   38388:	4770      	bx	lr

0003838a <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   3838a:	e002      	b.n	38392 <strncmp+0x8>
		s1++;
   3838c:	3001      	adds	r0, #1
		s2++;
   3838e:	3101      	adds	r1, #1
		n--;
   38390:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   38392:	b132      	cbz	r2, 383a2 <strncmp+0x18>
   38394:	7803      	ldrb	r3, [r0, #0]
   38396:	f891 c000 	ldrb.w	ip, [r1]
   3839a:	4563      	cmp	r3, ip
   3839c:	d101      	bne.n	383a2 <strncmp+0x18>
   3839e:	2b00      	cmp	r3, #0
   383a0:	d1f4      	bne.n	3838c <strncmp+0x2>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   383a2:	b11a      	cbz	r2, 383ac <strncmp+0x22>
   383a4:	7800      	ldrb	r0, [r0, #0]
   383a6:	780b      	ldrb	r3, [r1, #0]
   383a8:	1ac0      	subs	r0, r0, r3
   383aa:	4770      	bx	lr
   383ac:	2000      	movs	r0, #0
}
   383ae:	4770      	bx	lr

000383b0 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   383b0:	4613      	mov	r3, r2
   383b2:	b16a      	cbz	r2, 383d0 <memcmp+0x20>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   383b4:	3b01      	subs	r3, #1
   383b6:	d007      	beq.n	383c8 <memcmp+0x18>
   383b8:	f890 c000 	ldrb.w	ip, [r0]
   383bc:	780a      	ldrb	r2, [r1, #0]
   383be:	4594      	cmp	ip, r2
   383c0:	d102      	bne.n	383c8 <memcmp+0x18>
		c1++;
   383c2:	3001      	adds	r0, #1
		c2++;
   383c4:	3101      	adds	r1, #1
   383c6:	e7f5      	b.n	383b4 <memcmp+0x4>
	}

	return *c1 - *c2;
   383c8:	7800      	ldrb	r0, [r0, #0]
   383ca:	780b      	ldrb	r3, [r1, #0]
   383cc:	1ac0      	subs	r0, r0, r3
   383ce:	4770      	bx	lr
		return 0;
   383d0:	2000      	movs	r0, #0
}
   383d2:	4770      	bx	lr

000383d4 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   383d4:	1a43      	subs	r3, r0, r1
   383d6:	4293      	cmp	r3, r2
   383d8:	d304      	bcc.n	383e4 <memmove+0x10>
	char *dest = d;
   383da:	4603      	mov	r3, r0
   383dc:	e00a      	b.n	383f4 <memmove+0x20>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
   383de:	3a01      	subs	r2, #1
			dest[n] = src[n];
   383e0:	5c8b      	ldrb	r3, [r1, r2]
   383e2:	5483      	strb	r3, [r0, r2]
		while (n > 0) {
   383e4:	2a00      	cmp	r2, #0
   383e6:	d1fa      	bne.n	383de <memmove+0xa>
   383e8:	4770      	bx	lr
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
   383ea:	f811 cb01 	ldrb.w	ip, [r1], #1
   383ee:	f803 cb01 	strb.w	ip, [r3], #1
			dest++;
			src++;
			n--;
   383f2:	3a01      	subs	r2, #1
		while (n > 0) {
   383f4:	2a00      	cmp	r2, #0
   383f6:	d1f8      	bne.n	383ea <memmove+0x16>
		}
	}

	return d;
}
   383f8:	4770      	bx	lr

000383fa <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   383fa:	ea80 0301 	eor.w	r3, r0, r1
   383fe:	f013 0f03 	tst.w	r3, #3
   38402:	d001      	beq.n	38408 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
   38404:	4603      	mov	r3, r0
   38406:	e023      	b.n	38450 <memcpy+0x56>
   38408:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   3840a:	f013 0f03 	tst.w	r3, #3
   3840e:	d00f      	beq.n	38430 <memcpy+0x36>
			if (n == 0) {
   38410:	b30a      	cbz	r2, 38456 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   38412:	f811 cb01 	ldrb.w	ip, [r1], #1
   38416:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
   3841a:	3a01      	subs	r2, #1
   3841c:	e7f5      	b.n	3840a <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   3841e:	f811 cb01 	ldrb.w	ip, [r1], #1
   38422:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   38426:	3a01      	subs	r2, #1
	while (n > 0) {
   38428:	2a00      	cmp	r2, #0
   3842a:	d1f8      	bne.n	3841e <memcpy+0x24>
	}

	return d;
}
   3842c:	bc10      	pop	{r4}
   3842e:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
   38430:	2a03      	cmp	r2, #3
   38432:	d90d      	bls.n	38450 <memcpy+0x56>
{
   38434:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
   38436:	f851 4b04 	ldr.w	r4, [r1], #4
   3843a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   3843e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   38440:	2a03      	cmp	r2, #3
   38442:	d8f8      	bhi.n	38436 <memcpy+0x3c>
   38444:	e7f0      	b.n	38428 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
   38446:	f811 cb01 	ldrb.w	ip, [r1], #1
   3844a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   3844e:	3a01      	subs	r2, #1
	while (n > 0) {
   38450:	2a00      	cmp	r2, #0
   38452:	d1f8      	bne.n	38446 <memcpy+0x4c>
   38454:	4770      	bx	lr
}
   38456:	4770      	bx	lr

00038458 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   38458:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
   3845c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   3845e:	e002      	b.n	38466 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
   38460:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   38464:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   38466:	f013 0f03 	tst.w	r3, #3
   3846a:	d002      	beq.n	38472 <memset+0x1a>
		if (n == 0) {
   3846c:	2a00      	cmp	r2, #0
   3846e:	d1f7      	bne.n	38460 <memset+0x8>
   38470:	e00f      	b.n	38492 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   38472:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   38474:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   38478:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   3847c:	2a03      	cmp	r2, #3
   3847e:	d906      	bls.n	3848e <memset+0x36>
		*(d_word++) = c_word;
   38480:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   38484:	3a04      	subs	r2, #4
   38486:	e7f9      	b.n	3847c <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   38488:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
   3848c:	3a01      	subs	r2, #1
	while (n > 0) {
   3848e:	2a00      	cmp	r2, #0
   38490:	d1fa      	bne.n	38488 <memset+0x30>
	}

	return buf;
}
   38492:	4770      	bx	lr

00038494 <_stdout_hook_default>:
}
   38494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   38498:	4770      	bx	lr

0003849a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   3849a:	684b      	ldr	r3, [r1, #4]
   3849c:	2b01      	cmp	r3, #1
   3849e:	dd07      	ble.n	384b0 <sprintf_out+0x16>
		*(p->ptr) = c;
   384a0:	680b      	ldr	r3, [r1, #0]
   384a2:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   384a4:	680b      	ldr	r3, [r1, #0]
   384a6:	3301      	adds	r3, #1
   384a8:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   384aa:	684b      	ldr	r3, [r1, #4]
   384ac:	3b01      	subs	r3, #1
   384ae:	604b      	str	r3, [r1, #4]
}
   384b0:	2000      	movs	r0, #0
   384b2:	4770      	bx	lr

000384b4 <internal_encrypt_le>:
}
#endif /* defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY) */

static int internal_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
			       uint8_t enc_data[16])
{
   384b4:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_CTLR) && defined(CONFIG_BT_HOST_CRYPTO) && \
    defined(CONFIG_BT_CTLR_LE_ENC)
	ecb_encrypt(key, plaintext, enc_data, NULL);
	return 0;
#else
	return bt_encrypt_le(key, plaintext, enc_data);
   384b6:	f000 fd4e 	bl	38f56 <bt_encrypt_le>
#endif
}
   384ba:	bd08      	pop	{r3, pc}

000384bc <ah>:

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   384bc:	b530      	push	{r4, r5, lr}
   384be:	b085      	sub	sp, #20
   384c0:	4604      	mov	r4, r0
   384c2:	4615      	mov	r5, r2

	LOG_DBG("irk %s", bt_hex(irk, 16));
	LOG_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   384c4:	2203      	movs	r2, #3
   384c6:	4668      	mov	r0, sp
   384c8:	f7ff ff97 	bl	383fa <memcpy>
	(void)memset(res + 3, 0, 13);
   384cc:	220d      	movs	r2, #13
   384ce:	2100      	movs	r1, #0
   384d0:	f10d 0003 	add.w	r0, sp, #3
   384d4:	f7ff ffc0 	bl	38458 <memset>

	err = internal_encrypt_le(irk, res, res);
   384d8:	466a      	mov	r2, sp
   384da:	4669      	mov	r1, sp
   384dc:	4620      	mov	r0, r4
   384de:	f7ff ffe9 	bl	384b4 <internal_encrypt_le>
	if (err) {
   384e2:	4604      	mov	r4, r0
   384e4:	b110      	cbz	r0, 384ec <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   384e6:	4620      	mov	r0, r4
   384e8:	b005      	add	sp, #20
   384ea:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
   384ec:	2203      	movs	r2, #3
   384ee:	4669      	mov	r1, sp
   384f0:	4628      	mov	r0, r5
   384f2:	f7ff ff82 	bl	383fa <memcpy>
	return 0;
   384f6:	e7f6      	b.n	384e6 <ah+0x2a>

000384f8 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   384f8:	b510      	push	{r4, lr}
   384fa:	b082      	sub	sp, #8
   384fc:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	LOG_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   384fe:	aa01      	add	r2, sp, #4
   38500:	3103      	adds	r1, #3
   38502:	f7ff ffdb 	bl	384bc <ah>
	if (err) {
   38506:	b110      	cbz	r0, 3850e <bt_rpa_irk_matches+0x16>
		return false;
   38508:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
   3850a:	b002      	add	sp, #8
   3850c:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
   3850e:	2203      	movs	r2, #3
   38510:	a901      	add	r1, sp, #4
   38512:	4620      	mov	r0, r4
   38514:	f7ff ff4c 	bl	383b0 <memcmp>
   38518:	fab0 f080 	clz	r0, r0
   3851c:	0940      	lsrs	r0, r0, #5
   3851e:	e7f4      	b.n	3850a <bt_rpa_irk_matches+0x12>

00038520 <bt_settings_decode_key>:
{
   38520:	b570      	push	{r4, r5, r6, lr}
   38522:	4605      	mov	r5, r0
   38524:	460e      	mov	r6, r1
	if (settings_name_next(key, NULL) != 13) {
   38526:	2100      	movs	r1, #0
   38528:	f7ff f828 	bl	3757c <settings_name_next>
   3852c:	280d      	cmp	r0, #13
   3852e:	d11b      	bne.n	38568 <bt_settings_decode_key+0x48>
	if (key[12] == '0') {
   38530:	7b2b      	ldrb	r3, [r5, #12]
   38532:	2b30      	cmp	r3, #48	; 0x30
   38534:	d005      	beq.n	38542 <bt_settings_decode_key+0x22>
	} else if (key[12] == '1') {
   38536:	2b31      	cmp	r3, #49	; 0x31
   38538:	d119      	bne.n	3856e <bt_settings_decode_key+0x4e>
		addr->type = BT_ADDR_LE_RANDOM;
   3853a:	2301      	movs	r3, #1
   3853c:	7033      	strb	r3, [r6, #0]
{
   3853e:	2400      	movs	r4, #0
   38540:	e00e      	b.n	38560 <bt_settings_decode_key+0x40>
		addr->type = BT_ADDR_LE_PUBLIC;
   38542:	2300      	movs	r3, #0
   38544:	7033      	strb	r3, [r6, #0]
   38546:	e7fa      	b.n	3853e <bt_settings_decode_key+0x1e>
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   38548:	f1c4 0205 	rsb	r2, r4, #5
   3854c:	4432      	add	r2, r6
   3854e:	2301      	movs	r3, #1
   38550:	441a      	add	r2, r3
   38552:	2102      	movs	r1, #2
   38554:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   38558:	f7fd f9e4 	bl	35924 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   3855c:	3401      	adds	r4, #1
   3855e:	b2e4      	uxtb	r4, r4
   38560:	2c05      	cmp	r4, #5
   38562:	d9f1      	bls.n	38548 <bt_settings_decode_key+0x28>
	return 0;
   38564:	2000      	movs	r0, #0
}
   38566:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   38568:	f06f 0015 	mvn.w	r0, #21
   3856c:	e7fb      	b.n	38566 <bt_settings_decode_key+0x46>
		return -EINVAL;
   3856e:	f06f 0015 	mvn.w	r0, #21
   38572:	e7f8      	b.n	38566 <bt_settings_decode_key+0x46>

00038574 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   38574:	b510      	push	{r4, lr}
   38576:	b08a      	sub	sp, #40	; 0x28
   38578:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   3857a:	a905      	add	r1, sp, #20
   3857c:	f7e2 fe4e 	bl	1b21c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   38580:	4669      	mov	r1, sp
   38582:	4620      	mov	r0, r4
   38584:	f7e2 fe4a 	bl	1b21c <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   38588:	2210      	movs	r2, #16
   3858a:	f10d 0101 	add.w	r1, sp, #1
   3858e:	f10d 0015 	add.w	r0, sp, #21
   38592:	f7ff ff0d 	bl	383b0 <memcmp>
}
   38596:	b00a      	add	sp, #40	; 0x28
   38598:	bd10      	pop	{r4, pc}

0003859a <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   3859a:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   3859c:	7803      	ldrb	r3, [r0, #0]
   3859e:	780a      	ldrb	r2, [r1, #0]
   385a0:	4293      	cmp	r3, r2
   385a2:	d107      	bne.n	385b4 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   385a4:	2b01      	cmp	r3, #1
   385a6:	d00c      	beq.n	385c2 <bt_uuid_cmp+0x28>
   385a8:	2b02      	cmp	r3, #2
   385aa:	d00e      	beq.n	385ca <bt_uuid_cmp+0x30>
   385ac:	b12b      	cbz	r3, 385ba <bt_uuid_cmp+0x20>
   385ae:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   385b2:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   385b4:	f7ff ffde 	bl	38574 <uuid128_cmp>
   385b8:	e7fb      	b.n	385b2 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   385ba:	8840      	ldrh	r0, [r0, #2]
   385bc:	884b      	ldrh	r3, [r1, #2]
   385be:	1ac0      	subs	r0, r0, r3
   385c0:	e7f7      	b.n	385b2 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   385c2:	6840      	ldr	r0, [r0, #4]
   385c4:	684b      	ldr	r3, [r1, #4]
   385c6:	1ac0      	subs	r0, r0, r3
   385c8:	e7f3      	b.n	385b2 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   385ca:	2210      	movs	r2, #16
   385cc:	3101      	adds	r1, #1
   385ce:	3001      	adds	r0, #1
   385d0:	f7ff feee 	bl	383b0 <memcmp>
   385d4:	e7ed      	b.n	385b2 <bt_uuid_cmp+0x18>

000385d6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   385d6:	b508      	push	{r3, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   385d8:	2a04      	cmp	r2, #4
   385da:	d00e      	beq.n	385fa <bt_uuid_create+0x24>
   385dc:	2a10      	cmp	r2, #16
   385de:	d01d      	beq.n	3861c <bt_uuid_create+0x46>
   385e0:	2a02      	cmp	r2, #2
   385e2:	d001      	beq.n	385e8 <bt_uuid_create+0x12>
   385e4:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   385e6:	bd08      	pop	{r3, pc}
		uuid->type = BT_UUID_TYPE_16;
   385e8:	2300      	movs	r3, #0
   385ea:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   385ec:	784a      	ldrb	r2, [r1, #1]
   385ee:	780b      	ldrb	r3, [r1, #0]
   385f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   385f4:	8043      	strh	r3, [r0, #2]
	return true;
   385f6:	2001      	movs	r0, #1
		break;
   385f8:	e7f5      	b.n	385e6 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   385fa:	2301      	movs	r3, #1
   385fc:	7003      	strb	r3, [r0, #0]
   385fe:	78ca      	ldrb	r2, [r1, #3]
   38600:	f891 c002 	ldrb.w	ip, [r1, #2]
   38604:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   38608:	f891 e001 	ldrb.w	lr, [r1, #1]
   3860c:	780a      	ldrb	r2, [r1, #0]
   3860e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   38612:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   38616:	6042      	str	r2, [r0, #4]
	return true;
   38618:	4618      	mov	r0, r3
		break;
   3861a:	e7e4      	b.n	385e6 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   3861c:	2302      	movs	r3, #2
   3861e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   38622:	2210      	movs	r2, #16
   38624:	f7ff fee9 	bl	383fa <memcpy>
	return true;
   38628:	2001      	movs	r0, #1
		break;
   3862a:	e7dc      	b.n	385e6 <bt_uuid_create+0x10>

0003862c <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   3862c:	b510      	push	{r4, lr}
   3862e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   38630:	2301      	movs	r3, #1
   38632:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   38636:	2106      	movs	r1, #6
   38638:	f7e6 ffba 	bl	1f5b0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   3863c:	b918      	cbnz	r0, 38646 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   3863e:	79a3      	ldrb	r3, [r4, #6]
   38640:	f063 033f 	orn	r3, r3, #63	; 0x3f
   38644:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   38646:	bd10      	pop	{r4, pc}

00038648 <sys_put_le64>:
	dst[0] = val;
   38648:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   3864a:	f3c0 2307 	ubfx	r3, r0, #8, #8
   3864e:	7053      	strb	r3, [r2, #1]
	sys_put_le16(val >> 16, &dst[2]);
   38650:	0c03      	lsrs	r3, r0, #16
	dst[0] = val;
   38652:	7093      	strb	r3, [r2, #2]
	dst[1] = val >> 8;
   38654:	0e00      	lsrs	r0, r0, #24
   38656:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   38658:	7111      	strb	r1, [r2, #4]
	dst[1] = val >> 8;
   3865a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   3865e:	7153      	strb	r3, [r2, #5]
	sys_put_le16(val >> 16, &dst[2]);
   38660:	0c0b      	lsrs	r3, r1, #16
	dst[0] = val;
   38662:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   38664:	0e09      	lsrs	r1, r1, #24
   38666:	71d1      	strb	r1, [r2, #7]
}
   38668:	4770      	bx	lr

0003866a <sys_get_le64>:
{
   3866a:	b500      	push	{lr}
	return ((uint16_t)src[1] << 8) | src[0];
   3866c:	79c3      	ldrb	r3, [r0, #7]
   3866e:	7981      	ldrb	r1, [r0, #6]
   38670:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   38674:	7942      	ldrb	r2, [r0, #5]
   38676:	7903      	ldrb	r3, [r0, #4]
   38678:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3867c:	78c2      	ldrb	r2, [r0, #3]
   3867e:	f890 c002 	ldrb.w	ip, [r0, #2]
   38682:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
   38686:	f890 e001 	ldrb.w	lr, [r0, #1]
   3868a:	7802      	ldrb	r2, [r0, #0]
   3868c:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
}
   38690:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
   38694:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   38698:	f85d fb04 	ldr.w	pc, [sp], #4

0003869c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   3869c:	3805      	subs	r0, #5
   3869e:	2815      	cmp	r0, #21
   386a0:	d80e      	bhi.n	386c0 <bt_hci_evt_get_flags+0x24>
   386a2:	e8df f000 	tbb	[pc, r0]
   386a6:	0d0b      	.short	0x0d0b
   386a8:	0d0d0d0d 	.word	0x0d0d0d0d
   386ac:	0f0d0d0d 	.word	0x0f0d0d0d
   386b0:	0d0d0d0f 	.word	0x0d0d0d0f
   386b4:	0d0d0d0f 	.word	0x0d0d0d0f
   386b8:	0f0d0d0d 	.word	0x0f0d0d0d
   386bc:	2003      	movs	r0, #3
   386be:	4770      	bx	lr
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   386c0:	2002      	movs	r0, #2
   386c2:	4770      	bx	lr
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   386c4:	2001      	movs	r0, #1
	}
}
   386c6:	4770      	bx	lr

000386c8 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   386c8:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   386cc:	b17b      	cbz	r3, 386ee <update_sec_level+0x26>
   386ce:	7b5a      	ldrb	r2, [r3, #13]
   386d0:	f012 0f01 	tst.w	r2, #1
   386d4:	d00b      	beq.n	386ee <update_sec_level+0x26>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   386d6:	f012 0f10 	tst.w	r2, #16
   386da:	d002      	beq.n	386e2 <update_sec_level+0x1a>
		    conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE) {
   386dc:	7b1b      	ldrb	r3, [r3, #12]
		if (conn->le.keys->flags & BT_KEYS_SC &&
   386de:	2b10      	cmp	r3, #16
   386e0:	d002      	beq.n	386e8 <update_sec_level+0x20>
			conn->sec_level = BT_SECURITY_L3;
   386e2:	2303      	movs	r3, #3
   386e4:	7243      	strb	r3, [r0, #9]
   386e6:	e004      	b.n	386f2 <update_sec_level+0x2a>
			conn->sec_level = BT_SECURITY_L4;
   386e8:	2304      	movs	r3, #4
   386ea:	7243      	strb	r3, [r0, #9]
   386ec:	e001      	b.n	386f2 <update_sec_level+0x2a>
		conn->sec_level = BT_SECURITY_L2;
   386ee:	2302      	movs	r3, #2
   386f0:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   386f2:	7a82      	ldrb	r2, [r0, #10]
   386f4:	7a40      	ldrb	r0, [r0, #9]
}
   386f6:	4282      	cmp	r2, r0
   386f8:	bf8c      	ite	hi
   386fa:	2000      	movhi	r0, #0
   386fc:	2001      	movls	r0, #1
   386fe:	4770      	bx	lr

00038700 <hci_vendor_event>:
}
   38700:	4770      	bx	lr

00038702 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   38702:	094b      	lsrs	r3, r1, #5
   38704:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38708:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3870c:	f001 011f 	and.w	r1, r1, #31
   38710:	4108      	asrs	r0, r1
}
   38712:	f000 0001 	and.w	r0, r0, #1
   38716:	4770      	bx	lr

00038718 <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   38718:	f001 021f 	and.w	r2, r1, #31
   3871c:	2301      	movs	r3, #1
   3871e:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   38720:	0949      	lsrs	r1, r1, #5
   38722:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38726:	e8d0 2fef 	ldaex	r2, [r0]
   3872a:	ea42 0103 	orr.w	r1, r2, r3
   3872e:	e8c0 1fec 	stlex	ip, r1, [r0]
   38732:	f1bc 0f00 	cmp.w	ip, #0
   38736:	d1f6      	bne.n	38726 <atomic_test_and_set_bit+0xe>
	return (old & mask) != 0;
   38738:	4213      	tst	r3, r2
}
   3873a:	bf14      	ite	ne
   3873c:	2001      	movne	r0, #1
   3873e:	2000      	moveq	r0, #0
   38740:	4770      	bx	lr

00038742 <net_buf_destroy>:
{
   38742:	b510      	push	{r4, lr}
   38744:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   38746:	7a80      	ldrb	r0, [r0, #10]
   38748:	f7f0 fd50 	bl	291ec <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   3874c:	4621      	mov	r1, r4
   3874e:	f006 f951 	bl	3e9f4 <k_queue_prepend>
}
   38752:	bd10      	pop	{r4, pc}

00038754 <atomic_set_bit_to>:
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   38754:	f001 0c1f 	and.w	ip, r1, #31
   38758:	2301      	movs	r3, #1
   3875a:	fa03 f30c 	lsl.w	r3, r3, ip

	if (val) {
   3875e:	b152      	cbz	r2, 38776 <atomic_set_bit_to+0x22>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   38760:	0949      	lsrs	r1, r1, #5
   38762:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   38766:	e8d0 2fef 	ldaex	r2, [r0]
   3876a:	431a      	orrs	r2, r3
   3876c:	e8c0 2fe1 	stlex	r1, r2, [r0]
   38770:	2900      	cmp	r1, #0
   38772:	d1f8      	bne.n	38766 <atomic_set_bit_to+0x12>
   38774:	4770      	bx	lr
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   38776:	0949      	lsrs	r1, r1, #5
   38778:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3877c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3877e:	e8d0 2fef 	ldaex	r2, [r0]
   38782:	401a      	ands	r2, r3
   38784:	e8c0 2fe1 	stlex	r1, r2, [r0]
   38788:	2900      	cmp	r1, #0
   3878a:	d1f8      	bne.n	3877e <atomic_set_bit_to+0x2a>
	}
}
   3878c:	4770      	bx	lr

0003878e <hci_disconn_complete_prio>:
{
   3878e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   38790:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   38792:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   38796:	781b      	ldrb	r3, [r3, #0]
   38798:	b103      	cbz	r3, 3879c <hci_disconn_complete_prio+0xe>
}
   3879a:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   3879c:	4620      	mov	r0, r4
   3879e:	f7e7 fdbd 	bl	2031c <bt_conn_lookup_handle>
	if (!conn) {
   387a2:	4605      	mov	r5, r0
   387a4:	b130      	cbz	r0, 387b4 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   387a6:	2101      	movs	r1, #1
   387a8:	f7e7 fdc2 	bl	20330 <bt_conn_set_state>
	bt_conn_unref(conn);
   387ac:	4628      	mov	r0, r5
   387ae:	f7e7 fd83 	bl	202b8 <bt_conn_unref>
   387b2:	e7f2      	b.n	3879a <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   387b4:	4620      	mov	r0, r4
   387b6:	f7e2 fdf5 	bl	1b3a4 <conn_handle_disconnected>
		return;
   387ba:	e7ee      	b.n	3879a <hci_disconn_complete_prio+0xc>

000387bc <hci_le_read_remote_features>:
{
   387bc:	b538      	push	{r3, r4, r5, lr}
   387be:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   387c0:	2102      	movs	r1, #2
   387c2:	f242 0016 	movw	r0, #8214	; 0x2016
   387c6:	f7e3 fe71 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   387ca:	b168      	cbz	r0, 387e8 <hci_le_read_remote_features+0x2c>
   387cc:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   387ce:	2102      	movs	r1, #2
   387d0:	300c      	adds	r0, #12
   387d2:	f7f1 f885 	bl	298e0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   387d6:	8823      	ldrh	r3, [r4, #0]
   387d8:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   387da:	2200      	movs	r2, #0
   387dc:	4629      	mov	r1, r5
   387de:	f242 0016 	movw	r0, #8214	; 0x2016
   387e2:	f7e3 feb5 	bl	1c550 <bt_hci_cmd_send_sync>
}
   387e6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   387e8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   387ec:	e7fb      	b.n	387e6 <hci_le_read_remote_features+0x2a>

000387ee <bt_get_phy>:
	switch (hci_phy) {
   387ee:	2802      	cmp	r0, #2
   387f0:	d004      	beq.n	387fc <bt_get_phy+0xe>
   387f2:	2803      	cmp	r0, #3
   387f4:	d004      	beq.n	38800 <bt_get_phy+0x12>
   387f6:	2801      	cmp	r0, #1
   387f8:	d001      	beq.n	387fe <bt_get_phy+0x10>
		return 0;
   387fa:	2000      	movs	r0, #0
}
   387fc:	4770      	bx	lr
   387fe:	4770      	bx	lr
		return BT_GAP_LE_PHY_CODED;
   38800:	2004      	movs	r0, #4
   38802:	4770      	bx	lr

00038804 <bt_hci_disconnect>:
{
   38804:	b570      	push	{r4, r5, r6, lr}
   38806:	4605      	mov	r5, r0
   38808:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   3880a:	2103      	movs	r1, #3
   3880c:	f240 4006 	movw	r0, #1030	; 0x406
   38810:	f7e3 fe4c 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38814:	b168      	cbz	r0, 38832 <bt_hci_disconnect+0x2e>
   38816:	4606      	mov	r6, r0
   38818:	2103      	movs	r1, #3
   3881a:	300c      	adds	r0, #12
   3881c:	f7f1 f860 	bl	298e0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   38820:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   38822:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   38824:	2200      	movs	r2, #0
   38826:	4631      	mov	r1, r6
   38828:	f240 4006 	movw	r0, #1030	; 0x406
   3882c:	f7e3 fe90 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38830:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   38832:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38836:	e7fb      	b.n	38830 <bt_hci_disconnect+0x2c>

00038838 <bt_le_set_phy>:
{
   38838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3883c:	4607      	mov	r7, r0
   3883e:	460e      	mov	r6, r1
   38840:	4615      	mov	r5, r2
   38842:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   38844:	2107      	movs	r1, #7
   38846:	f242 0032 	movw	r0, #8242	; 0x2032
   3884a:	f7e3 fe2f 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   3884e:	b1a8      	cbz	r0, 3887c <bt_le_set_phy+0x44>
   38850:	4680      	mov	r8, r0
   38852:	2107      	movs	r1, #7
   38854:	300c      	adds	r0, #12
   38856:	f7f1 f843 	bl	298e0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   3885a:	883b      	ldrh	r3, [r7, #0]
   3885c:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   3885e:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   38860:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   38862:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   38864:	f89d 3018 	ldrb.w	r3, [sp, #24]
   38868:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   3886c:	2200      	movs	r2, #0
   3886e:	4641      	mov	r1, r8
   38870:	f242 0032 	movw	r0, #8242	; 0x2032
   38874:	f7e3 fe6c 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   3887c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38880:	e7fa      	b.n	38878 <bt_le_set_phy+0x40>

00038882 <enh_conn_complete>:
{
   38882:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   38884:	f7e4 fae4 	bl	1ce50 <bt_hci_le_enh_conn_complete>
}
   38888:	bd08      	pop	{r3, pc}

0003888a <le_enh_conn_complete>:
{
   3888a:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   3888c:	68c0      	ldr	r0, [r0, #12]
   3888e:	f7ff fff8 	bl	38882 <enh_conn_complete>
}
   38892:	bd08      	pop	{r3, pc}

00038894 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   38894:	8802      	ldrh	r2, [r0, #0]
   38896:	8843      	ldrh	r3, [r0, #2]
   38898:	429a      	cmp	r2, r3
   3889a:	d817      	bhi.n	388cc <bt_le_conn_params_valid+0x38>
   3889c:	2a05      	cmp	r2, #5
   3889e:	d917      	bls.n	388d0 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   388a0:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   388a4:	d816      	bhi.n	388d4 <bt_le_conn_params_valid+0x40>
	if (param->latency > 499) {
   388a6:	8881      	ldrh	r1, [r0, #4]
   388a8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   388ac:	d214      	bcs.n	388d8 <bt_le_conn_params_valid+0x44>
	if (param->timeout < 10 || param->timeout > 3200 ||
   388ae:	88c0      	ldrh	r0, [r0, #6]
   388b0:	f1a0 020a 	sub.w	r2, r0, #10
   388b4:	b292      	uxth	r2, r2
   388b6:	f640 4c76 	movw	ip, #3190	; 0xc76
   388ba:	4562      	cmp	r2, ip
   388bc:	d80e      	bhi.n	388dc <bt_le_conn_params_valid+0x48>
	     ((1U + param->latency) * param->interval_max))) {
   388be:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   388c2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   388c6:	d20b      	bcs.n	388e0 <bt_le_conn_params_valid+0x4c>
	return true;
   388c8:	2001      	movs	r0, #1
   388ca:	4770      	bx	lr
		return false;
   388cc:	2000      	movs	r0, #0
   388ce:	4770      	bx	lr
   388d0:	2000      	movs	r0, #0
   388d2:	4770      	bx	lr
   388d4:	2000      	movs	r0, #0
   388d6:	4770      	bx	lr
		return false;
   388d8:	2000      	movs	r0, #0
   388da:	4770      	bx	lr
		return false;
   388dc:	2000      	movs	r0, #0
   388de:	4770      	bx	lr
   388e0:	2000      	movs	r0, #0
}
   388e2:	4770      	bx	lr

000388e4 <bt_security_err_get>:
	switch (hci_err) {
   388e4:	2829      	cmp	r0, #41	; 0x29
   388e6:	d81e      	bhi.n	38926 <bt_security_err_get+0x42>
   388e8:	e8df f000 	tbb	[pc, r0]
   388ec:	1d1d1d20 	.word	0x1d1d1d20
   388f0:	1d151f1d 	.word	0x1d151f1d
   388f4:	1d1d1d1d 	.word	0x1d1d1d1d
   388f8:	1d1d1d1d 	.word	0x1d1d1d1d
   388fc:	1d1b1d1d 	.word	0x1d1b1d1d
   38900:	1d1d1d1d 	.word	0x1d1d1d1d
   38904:	1d1d1d19 	.word	0x1d1d1d19
   38908:	1d1d1d1d 	.word	0x1d1d1d1d
   3890c:	1d1d1d1d 	.word	0x1d1d1d1d
   38910:	1d1d1d1d 	.word	0x1d1d1d1d
   38914:	171d      	.short	0x171d
		return BT_SECURITY_ERR_PIN_OR_KEY_MISSING;
   38916:	2002      	movs	r0, #2
   38918:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   3891a:	2005      	movs	r0, #5
   3891c:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   3891e:	2006      	movs	r0, #6
   38920:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   38922:	2007      	movs	r0, #7
   38924:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   38926:	2009      	movs	r0, #9
   38928:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_FAIL;
   3892a:	2001      	movs	r0, #1
}
   3892c:	4770      	bx	lr

0003892e <le_conn_param_req_reply>:
{
   3892e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38930:	4606      	mov	r6, r0
   38932:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   38934:	210e      	movs	r1, #14
   38936:	f242 0020 	movw	r0, #8224	; 0x2020
   3893a:	f7e3 fdb7 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   3893e:	b1c0      	cbz	r0, 38972 <le_conn_param_req_reply+0x44>
   38940:	4607      	mov	r7, r0
   38942:	210e      	movs	r1, #14
   38944:	300c      	adds	r0, #12
   38946:	f7f0 ffcb 	bl	298e0 <net_buf_simple_add>
   3894a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   3894c:	220e      	movs	r2, #14
   3894e:	2100      	movs	r1, #0
   38950:	f7ff fd82 	bl	38458 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   38954:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   38956:	882b      	ldrh	r3, [r5, #0]
   38958:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   3895a:	886b      	ldrh	r3, [r5, #2]
   3895c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   3895e:	88ab      	ldrh	r3, [r5, #4]
   38960:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   38962:	88eb      	ldrh	r3, [r5, #6]
   38964:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   38966:	4639      	mov	r1, r7
   38968:	f242 0020 	movw	r0, #8224	; 0x2020
   3896c:	f7e4 fd5a 	bl	1d424 <bt_hci_cmd_send>
}
   38970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   38972:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38976:	e7fb      	b.n	38970 <le_conn_param_req_reply+0x42>

00038978 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   38978:	f240 3041 	movw	r0, #833	; 0x341
   3897c:	4770      	bx	lr

0003897e <bt_addr_le_is_bonded>:
	return 0;
}
#endif

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   3897e:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   38980:	f7ef ffb6 	bl	288f0 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   38984:	b118      	cbz	r0, 3898e <bt_addr_le_is_bonded+0x10>
   38986:	89c3      	ldrh	r3, [r0, #14]
   38988:	b91b      	cbnz	r3, 38992 <bt_addr_le_is_bonded+0x14>
   3898a:	2000      	movs	r0, #0
	} else {
		return false;
	}
}
   3898c:	bd08      	pop	{r3, pc}
		return keys && keys->keys;
   3898e:	2000      	movs	r0, #0
   38990:	e7fc      	b.n	3898c <bt_addr_le_is_bonded+0xe>
   38992:	2001      	movs	r0, #1
   38994:	e7fa      	b.n	3898c <bt_addr_le_is_bonded+0xe>

00038996 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   38996:	094b      	lsrs	r3, r1, #5
   38998:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3899c:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   389a0:	f001 011f 	and.w	r1, r1, #31
   389a4:	4108      	asrs	r0, r1
}
   389a6:	f000 0001 	and.w	r0, r0, #1
   389aa:	4770      	bx	lr

000389ac <atomic_test_and_clear_bit>:
{
   389ac:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   389ae:	f001 021f 	and.w	r2, r1, #31
   389b2:	2301      	movs	r3, #1
   389b4:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   389b6:	0949      	lsrs	r1, r1, #5
   389b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   389bc:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   389be:	e8d0 2fef 	ldaex	r2, [r0]
   389c2:	ea02 0c01 	and.w	ip, r2, r1
   389c6:	e8c0 cfee 	stlex	lr, ip, [r0]
   389ca:	f1be 0f00 	cmp.w	lr, #0
   389ce:	d1f6      	bne.n	389be <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   389d0:	4213      	tst	r3, r2
}
   389d2:	bf14      	ite	ne
   389d4:	2001      	movne	r0, #1
   389d6:	2000      	moveq	r0, #0
   389d8:	f85d fb04 	ldr.w	pc, [sp], #4

000389dc <adv_unpause_enabled>:
{
   389dc:	b510      	push	{r4, lr}
   389de:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   389e0:	210f      	movs	r1, #15
   389e2:	3010      	adds	r0, #16
   389e4:	f7ff ffe2 	bl	389ac <atomic_test_and_clear_bit>
   389e8:	b900      	cbnz	r0, 389ec <adv_unpause_enabled+0x10>
}
   389ea:	bd10      	pop	{r4, pc}
		bt_le_adv_set_enable(adv, true);
   389ec:	2101      	movs	r1, #1
   389ee:	4620      	mov	r0, r4
   389f0:	f000 fa53 	bl	38e9a <bt_le_adv_set_enable>
}
   389f4:	e7f9      	b.n	389ea <adv_unpause_enabled+0xe>

000389f6 <adv_pause_enabled>:
{
   389f6:	b538      	push	{r3, r4, r5, lr}
   389f8:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   389fa:	f100 0510 	add.w	r5, r0, #16
   389fe:	2107      	movs	r1, #7
   38a00:	4628      	mov	r0, r5
   38a02:	f7ff ffc8 	bl	38996 <atomic_test_bit>
   38a06:	b158      	cbz	r0, 38a20 <adv_pause_enabled+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38a08:	e8d5 3fef 	ldaex	r3, [r5]
   38a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   38a10:	e8c5 3fe2 	stlex	r2, r3, [r5]
   38a14:	2a00      	cmp	r2, #0
   38a16:	d1f7      	bne.n	38a08 <adv_pause_enabled+0x12>
		bt_le_adv_set_enable(adv, false);
   38a18:	2100      	movs	r1, #0
   38a1a:	4620      	mov	r0, r4
   38a1c:	f000 fa3d 	bl	38e9a <bt_le_adv_set_enable>
}
   38a20:	bd38      	pop	{r3, r4, r5, pc}

00038a22 <hci_id_add>:
	if (id >= CONFIG_BT_ID_MAX) {
   38a22:	bb20      	cbnz	r0, 38a6e <hci_id_add+0x4c>
{
   38a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38a26:	460e      	mov	r6, r1
   38a28:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   38a2a:	2127      	movs	r1, #39	; 0x27
   38a2c:	f242 0027 	movw	r0, #8231	; 0x2027
   38a30:	f7e3 fd3c 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38a34:	4607      	mov	r7, r0
   38a36:	b1e8      	cbz	r0, 38a74 <hci_id_add+0x52>
   38a38:	2127      	movs	r1, #39	; 0x27
   38a3a:	300c      	adds	r0, #12
   38a3c:	f7f0 ff50 	bl	298e0 <net_buf_simple_add>
   38a40:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   38a42:	2207      	movs	r2, #7
   38a44:	4631      	mov	r1, r6
   38a46:	f7ff fcd8 	bl	383fa <memcpy>
	memcpy(cp->peer_irk, peer_irk, 16);
   38a4a:	2210      	movs	r2, #16
   38a4c:	4629      	mov	r1, r5
   38a4e:	1de0      	adds	r0, r4, #7
   38a50:	f7ff fcd3 	bl	383fa <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   38a54:	2210      	movs	r2, #16
   38a56:	2100      	movs	r1, #0
   38a58:	f104 0017 	add.w	r0, r4, #23
   38a5c:	f7ff fcfc 	bl	38458 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   38a60:	2200      	movs	r2, #0
   38a62:	4639      	mov	r1, r7
   38a64:	f242 0027 	movw	r0, #8231	; 0x2027
   38a68:	f7e3 fd72 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   38a6e:	f06f 0015 	mvn.w	r0, #21
}
   38a72:	4770      	bx	lr
		return -ENOBUFS;
   38a74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38a78:	e7f8      	b.n	38a6c <hci_id_add+0x4a>

00038a7a <keys_add_id>:
{
   38a7a:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   38a7c:	7a03      	ldrb	r3, [r0, #8]
   38a7e:	f013 0f04 	tst.w	r3, #4
   38a82:	d100      	bne.n	38a86 <keys_add_id+0xc>
}
   38a84:	bd08      	pop	{r3, pc}
   38a86:	4601      	mov	r1, r0
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   38a88:	4602      	mov	r2, r0
   38a8a:	f812 0b2a 	ldrb.w	r0, [r2], #42
   38a8e:	3101      	adds	r1, #1
   38a90:	f7ff ffc7 	bl	38a22 <hci_id_add>
}
   38a94:	e7f6      	b.n	38a84 <keys_add_id+0xa>

00038a96 <hci_id_del>:
{
   38a96:	b538      	push	{r3, r4, r5, lr}
   38a98:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
   38a9a:	2107      	movs	r1, #7
   38a9c:	f242 0028 	movw	r0, #8232	; 0x2028
   38aa0:	f7e3 fd04 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38aa4:	b178      	cbz	r0, 38ac6 <hci_id_del+0x30>
   38aa6:	4605      	mov	r5, r0
   38aa8:	2107      	movs	r1, #7
   38aaa:	300c      	adds	r0, #12
   38aac:	f7f0 ff18 	bl	298e0 <net_buf_simple_add>
   38ab0:	2207      	movs	r2, #7
   38ab2:	4621      	mov	r1, r4
   38ab4:	f7ff fca1 	bl	383fa <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
   38ab8:	2200      	movs	r2, #0
   38aba:	4629      	mov	r1, r5
   38abc:	f242 0028 	movw	r0, #8232	; 0x2028
   38ac0:	f7e3 fd46 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38ac4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   38ac6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38aca:	e7fb      	b.n	38ac4 <hci_id_del+0x2e>

00038acc <addr_res_enable>:
{
   38acc:	b538      	push	{r3, r4, r5, lr}
   38ace:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   38ad0:	2101      	movs	r1, #1
   38ad2:	f242 002d 	movw	r0, #8237	; 0x202d
   38ad6:	f7e3 fce9 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38ada:	b158      	cbz	r0, 38af4 <addr_res_enable+0x28>
   38adc:	4605      	mov	r5, r0
	return net_buf_simple_add_u8(&buf->b, val);
   38ade:	4621      	mov	r1, r4
   38ae0:	300c      	adds	r0, #12
   38ae2:	f003 f99e 	bl	3be22 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   38ae6:	2200      	movs	r2, #0
   38ae8:	4629      	mov	r1, r5
   38aea:	f242 002d 	movw	r0, #8237	; 0x202d
   38aee:	f7e3 fd2f 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38af2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   38af4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38af8:	e7fb      	b.n	38af2 <addr_res_enable+0x26>

00038afa <bt_lookup_id_addr>:
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   38afa:	b938      	cbnz	r0, 38b0c <bt_lookup_id_addr+0x12>
{
   38afc:	b510      	push	{r4, lr}
   38afe:	460c      	mov	r4, r1
	CHECKIF(id >= CONFIG_BT_ID_MAX || addr == NULL) {
   38b00:	b131      	cbz	r1, 38b10 <bt_lookup_id_addr+0x16>
		keys = bt_keys_find_irk(id, addr);
   38b02:	f7ef fe7f 	bl	28804 <bt_keys_find_irk>
		if (keys) {
   38b06:	b128      	cbz	r0, 38b14 <bt_lookup_id_addr+0x1a>
			return &keys->addr;
   38b08:	3001      	adds	r0, #1
}
   38b0a:	bd10      	pop	{r4, pc}
		return NULL;
   38b0c:	2000      	movs	r0, #0
}
   38b0e:	4770      	bx	lr
		return NULL;
   38b10:	4608      	mov	r0, r1
   38b12:	e7fa      	b.n	38b0a <bt_lookup_id_addr+0x10>
	return addr;
   38b14:	4620      	mov	r0, r4
   38b16:	e7f8      	b.n	38b0a <bt_lookup_id_addr+0x10>

00038b18 <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   38b18:	b128      	cbz	r0, 38b26 <bt_id_set_adv_random_addr+0xe>
   38b1a:	b139      	cbz	r1, 38b2c <bt_id_set_adv_random_addr+0x14>
{
   38b1c:	b508      	push	{r3, lr}
		return set_random_address(addr);
   38b1e:	4608      	mov	r0, r1
   38b20:	f7e5 fb00 	bl	1e124 <set_random_address>
}
   38b24:	bd08      	pop	{r3, pc}
		return -EINVAL;
   38b26:	f06f 0015 	mvn.w	r0, #21
   38b2a:	4770      	bx	lr
   38b2c:	f06f 0015 	mvn.w	r0, #21
}
   38b30:	4770      	bx	lr

00038b32 <bt_id_set_adv_private_addr>:
	CHECKIF(adv == NULL) {
   38b32:	b1a0      	cbz	r0, 38b5e <bt_id_set_adv_private_addr+0x2c>
{
   38b34:	b510      	push	{r4, lr}
   38b36:	b082      	sub	sp, #8
   38b38:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   38b3a:	2106      	movs	r1, #6
   38b3c:	4668      	mov	r0, sp
   38b3e:	f7e6 fd37 	bl	1f5b0 <bt_rand>
	if (err) {
   38b42:	b108      	cbz	r0, 38b48 <bt_id_set_adv_private_addr+0x16>
}
   38b44:	b002      	add	sp, #8
   38b46:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   38b48:	f89d 3005 	ldrb.w	r3, [sp, #5]
   38b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   38b50:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   38b54:	4669      	mov	r1, sp
   38b56:	4620      	mov	r0, r4
   38b58:	f7ff ffde 	bl	38b18 <bt_id_set_adv_random_addr>
	if (err) {
   38b5c:	e7f2      	b.n	38b44 <bt_id_set_adv_private_addr+0x12>
		return -EINVAL;
   38b5e:	f06f 0015 	mvn.w	r0, #21
}
   38b62:	4770      	bx	lr

00038b64 <bt_id_adv_random_addr_check>:
	CHECKIF(param == NULL) {
   38b64:	b100      	cbz	r0, 38b68 <bt_id_adv_random_addr_check+0x4>
		return true;
   38b66:	2001      	movs	r0, #1
}
   38b68:	4770      	bx	lr

00038b6a <pending_id_update>:
{
   38b6a:	b508      	push	{r3, lr}
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   38b6c:	7a03      	ldrb	r3, [r0, #8]
   38b6e:	f013 0f01 	tst.w	r3, #1
   38b72:	d103      	bne.n	38b7c <pending_id_update+0x12>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   38b74:	f013 0f02 	tst.w	r3, #2
   38b78:	d106      	bne.n	38b88 <pending_id_update+0x1e>
}
   38b7a:	bd08      	pop	{r3, pc}
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   38b7c:	f023 0301 	bic.w	r3, r3, #1
   38b80:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   38b82:	f7e5 fc4d 	bl	1e420 <bt_id_add>
		return;
   38b86:	e7f8      	b.n	38b7a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   38b88:	f023 0302 	bic.w	r3, r3, #2
   38b8c:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   38b8e:	f7e5 fd89 	bl	1e6a4 <bt_id_del>
		return;
   38b92:	e7f2      	b.n	38b7a <pending_id_update+0x10>

00038b94 <bt_id_init>:
#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
}
   38b94:	2000      	movs	r0, #0
   38b96:	4770      	bx	lr

00038b98 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   38b98:	2300      	movs	r3, #0
   38b9a:	428b      	cmp	r3, r1
   38b9c:	d219      	bcs.n	38bd2 <ad_is_limited+0x3a>
{
   38b9e:	b500      	push	{lr}
   38ba0:	e002      	b.n	38ba8 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   38ba2:	3301      	adds	r3, #1
   38ba4:	428b      	cmp	r3, r1
   38ba6:	d211      	bcs.n	38bcc <ad_is_limited+0x34>
		if (ad[i].type == BT_DATA_FLAGS &&
   38ba8:	eb00 0ec3 	add.w	lr, r0, r3, lsl #3
   38bac:	f830 c033 	ldrh.w	ip, [r0, r3, lsl #3]
   38bb0:	f240 1201 	movw	r2, #257	; 0x101
   38bb4:	4594      	cmp	ip, r2
   38bb6:	d1f4      	bne.n	38ba2 <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   38bb8:	f8de 2004 	ldr.w	r2, [lr, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   38bbc:	2a00      	cmp	r2, #0
   38bbe:	d0f0      	beq.n	38ba2 <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   38bc0:	7812      	ldrb	r2, [r2, #0]
   38bc2:	f012 0f01 	tst.w	r2, #1
   38bc6:	d0ec      	beq.n	38ba2 <ad_is_limited+0xa>
				return true;
   38bc8:	2001      	movs	r0, #1
   38bca:	e000      	b.n	38bce <ad_is_limited+0x36>
	return false;
   38bcc:	2000      	movs	r0, #0
}
   38bce:	f85d fb04 	ldr.w	pc, [sp], #4
	return false;
   38bd2:	2000      	movs	r0, #0
}
   38bd4:	4770      	bx	lr

00038bd6 <get_filter_policy>:
}
   38bd6:	2000      	movs	r0, #0
   38bd8:	4770      	bx	lr

00038bda <get_adv_channel_map>:
{
   38bda:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   38bdc:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   38be0:	d10b      	bne.n	38bfa <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   38be2:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   38be4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   38be8:	d001      	beq.n	38bee <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   38bea:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   38bee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   38bf2:	d001      	beq.n	38bf8 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   38bf4:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   38bf8:	4770      	bx	lr
		channel_map &= ~0x01;
   38bfa:	2006      	movs	r0, #6
   38bfc:	e7f2      	b.n	38be4 <get_adv_channel_map+0xa>

00038bfe <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   38bfe:	094b      	lsrs	r3, r1, #5
   38c00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   38c04:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   38c08:	f001 011f 	and.w	r1, r1, #31
   38c0c:	4108      	asrs	r0, r1
}
   38c0e:	f000 0001 	and.w	r0, r0, #1
   38c12:	4770      	bx	lr

00038c14 <hci_set_ad>:
{
   38c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38c18:	b082      	sub	sp, #8
   38c1a:	4607      	mov	r7, r0
   38c1c:	460d      	mov	r5, r1
   38c1e:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   38c20:	2120      	movs	r1, #32
   38c22:	f7e3 fc43 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38c26:	b300      	cbz	r0, 38c6a <hci_set_ad+0x56>
   38c28:	4680      	mov	r8, r0
	return net_buf_simple_add(&buf->b, len);
   38c2a:	2120      	movs	r1, #32
   38c2c:	300c      	adds	r0, #12
   38c2e:	f7f0 fe57 	bl	298e0 <net_buf_simple_add>
   38c32:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   38c34:	2220      	movs	r2, #32
   38c36:	2100      	movs	r1, #0
   38c38:	f7ff fc0e 	bl	38458 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   38c3c:	9400      	str	r4, [sp, #0]
   38c3e:	4633      	mov	r3, r6
   38c40:	462a      	mov	r2, r5
   38c42:	211f      	movs	r1, #31
   38c44:	1c60      	adds	r0, r4, #1
   38c46:	f7e6 f877 	bl	1ed38 <set_data_add_complete>
	if (err) {
   38c4a:	4604      	mov	r4, r0
   38c4c:	b948      	cbnz	r0, 38c62 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   38c4e:	2200      	movs	r2, #0
   38c50:	4641      	mov	r1, r8
   38c52:	4638      	mov	r0, r7
   38c54:	f7e3 fc7c 	bl	1c550 <bt_hci_cmd_send_sync>
   38c58:	4604      	mov	r4, r0
}
   38c5a:	4620      	mov	r0, r4
   38c5c:	b002      	add	sp, #8
   38c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   38c62:	4640      	mov	r0, r8
   38c64:	f7f0 fd1e 	bl	296a4 <net_buf_unref>
		return err;
   38c68:	e7f7      	b.n	38c5a <hci_set_ad+0x46>
		return -ENOBUFS;
   38c6a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   38c6e:	e7f4      	b.n	38c5a <hci_set_ad+0x46>

00038c70 <set_ad>:
{
   38c70:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   38c72:	f242 0008 	movw	r0, #8200	; 0x2008
   38c76:	f7ff ffcd 	bl	38c14 <hci_set_ad>
}
   38c7a:	bd08      	pop	{r3, pc}

00038c7c <set_sd>:
{
   38c7c:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   38c7e:	f242 0009 	movw	r0, #8201	; 0x2009
   38c82:	f7ff ffc7 	bl	38c14 <hci_set_ad>
}
   38c86:	bd08      	pop	{r3, pc}

00038c88 <le_adv_update>:
{
   38c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c8c:	b089      	sub	sp, #36	; 0x24
   38c8e:	4604      	mov	r4, r0
   38c90:	460e      	mov	r6, r1
   38c92:	4617      	mov	r7, r2
   38c94:	461d      	mov	r5, r3
   38c96:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   38c9a:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   38c9e:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   38ca2:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   38ca6:	2300      	movs	r3, #0
   38ca8:	9304      	str	r3, [sp, #16]
   38caa:	9305      	str	r3, [sp, #20]
   38cac:	9306      	str	r3, [sp, #24]
   38cae:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   38cb0:	f1b9 0f00 	cmp.w	r9, #0
   38cb4:	d12f      	bne.n	38d16 <le_adv_update+0x8e>
	if (!(ext_adv && scannable)) {
   38cb6:	f1ba 0f00 	cmp.w	sl, #0
   38cba:	d002      	beq.n	38cc2 <le_adv_update+0x3a>
   38cbc:	f1bb 0f00 	cmp.w	fp, #0
   38cc0:	d10e      	bne.n	38ce0 <le_adv_update+0x58>
		d[0].data = ad;
   38cc2:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   38cc4:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   38cc6:	f1b9 0f01 	cmp.w	r9, #1
   38cca:	d052      	beq.n	38d72 <le_adv_update+0xea>
		d_len = 1;
   38ccc:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   38cce:	a904      	add	r1, sp, #16
   38cd0:	4620      	mov	r0, r4
   38cd2:	f7ff ffcd 	bl	38c70 <set_ad>
		if (err) {
   38cd6:	4603      	mov	r3, r0
   38cd8:	b9c8      	cbnz	r0, 38d0e <le_adv_update+0x86>
	if (scannable) {
   38cda:	f1bb 0f00 	cmp.w	fp, #0
   38cde:	d00c      	beq.n	38cfa <le_adv_update+0x72>
		d[0].data = sd;
   38ce0:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   38ce2:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   38ce6:	f1b9 0f02 	cmp.w	r9, #2
   38cea:	d048      	beq.n	38d7e <le_adv_update+0xf6>
		d_len = 1;
   38cec:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   38cee:	a904      	add	r1, sp, #16
   38cf0:	4620      	mov	r0, r4
   38cf2:	f7ff ffc3 	bl	38c7c <set_sd>
		if (err) {
   38cf6:	4603      	mov	r3, r0
   38cf8:	b948      	cbnz	r0, 38d0e <le_adv_update+0x86>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   38cfa:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38cfc:	e8d4 3fef 	ldaex	r3, [r4]
   38d00:	f043 0304 	orr.w	r3, r3, #4
   38d04:	e8c4 3fe2 	stlex	r2, r3, [r4]
   38d08:	2a00      	cmp	r2, #0
   38d0a:	d1f7      	bne.n	38cfc <le_adv_update+0x74>
	return 0;
   38d0c:	2300      	movs	r3, #0
}
   38d0e:	4618      	mov	r0, r3
   38d10:	b009      	add	sp, #36	; 0x24
   38d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   38d16:	f7e5 f9e5 	bl	1e0e4 <bt_get_name>
   38d1a:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   38d1c:	b166      	cbz	r6, 38d38 <le_adv_update+0xb0>
	for (i = 0; i < ad_len; i++) {
   38d1e:	2200      	movs	r2, #0
   38d20:	4297      	cmp	r7, r2
   38d22:	d907      	bls.n	38d34 <le_adv_update+0xac>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   38d24:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   38d28:	3b08      	subs	r3, #8
   38d2a:	b2db      	uxtb	r3, r3
   38d2c:	2b01      	cmp	r3, #1
   38d2e:	d90f      	bls.n	38d50 <le_adv_update+0xc8>
	for (i = 0; i < ad_len; i++) {
   38d30:	3201      	adds	r2, #1
   38d32:	e7f5      	b.n	38d20 <le_adv_update+0x98>
	return false;
   38d34:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   38d36:	bb43      	cbnz	r3, 38d8a <le_adv_update+0x102>
   38d38:	b175      	cbz	r5, 38d58 <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   38d3a:	2200      	movs	r2, #0
   38d3c:	4590      	cmp	r8, r2
   38d3e:	d909      	bls.n	38d54 <le_adv_update+0xcc>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   38d40:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   38d44:	3b08      	subs	r3, #8
   38d46:	b2db      	uxtb	r3, r3
   38d48:	2b01      	cmp	r3, #1
   38d4a:	d910      	bls.n	38d6e <le_adv_update+0xe6>
	for (i = 0; i < ad_len; i++) {
   38d4c:	3201      	adds	r2, #1
   38d4e:	e7f5      	b.n	38d3c <le_adv_update+0xb4>
			return true;
   38d50:	2301      	movs	r3, #1
   38d52:	e7f0      	b.n	38d36 <le_adv_update+0xae>
	return false;
   38d54:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   38d56:	b9db      	cbnz	r3, 38d90 <le_adv_update+0x108>
		data = (struct bt_data)BT_DATA(
   38d58:	9801      	ldr	r0, [sp, #4]
   38d5a:	f7ff faf8 	bl	3834e <strlen>
   38d5e:	2309      	movs	r3, #9
   38d60:	f88d 3008 	strb.w	r3, [sp, #8]
   38d64:	f88d 0009 	strb.w	r0, [sp, #9]
   38d68:	9b01      	ldr	r3, [sp, #4]
   38d6a:	9303      	str	r3, [sp, #12]
   38d6c:	e7a3      	b.n	38cb6 <le_adv_update+0x2e>
			return true;
   38d6e:	2301      	movs	r3, #1
   38d70:	e7f1      	b.n	38d56 <le_adv_update+0xce>
			d[1].data = &data;
   38d72:	ab02      	add	r3, sp, #8
   38d74:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   38d76:	2301      	movs	r3, #1
   38d78:	9307      	str	r3, [sp, #28]
			d_len = 2;
   38d7a:	2202      	movs	r2, #2
   38d7c:	e7a7      	b.n	38cce <le_adv_update+0x46>
			d[1].data = &data;
   38d7e:	ab02      	add	r3, sp, #8
   38d80:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   38d82:	2301      	movs	r3, #1
   38d84:	9307      	str	r3, [sp, #28]
			d_len = 2;
   38d86:	2202      	movs	r2, #2
   38d88:	e7b1      	b.n	38cee <le_adv_update+0x66>
			return -EINVAL;
   38d8a:	f06f 0315 	mvn.w	r3, #21
   38d8e:	e7be      	b.n	38d0e <le_adv_update+0x86>
   38d90:	f06f 0315 	mvn.w	r3, #21
   38d94:	e7bb      	b.n	38d0e <le_adv_update+0x86>

00038d96 <valid_adv_param>:
{
   38d96:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   38d98:	6843      	ldr	r3, [r0, #4]
   38d9a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   38d9e:	d107      	bne.n	38db0 <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   38da0:	6902      	ldr	r2, [r0, #16]
   38da2:	b112      	cbz	r2, 38daa <valid_adv_param+0x14>
   38da4:	f013 0f01 	tst.w	r3, #1
   38da8:	d004      	beq.n	38db4 <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   38daa:	f7e6 f83f 	bl	1ee2c <valid_adv_ext_param>
}
   38dae:	bd08      	pop	{r3, pc}
		return false;
   38db0:	2000      	movs	r0, #0
   38db2:	e7fc      	b.n	38dae <valid_adv_param+0x18>
		return false;
   38db4:	2000      	movs	r0, #0
   38db6:	e7fa      	b.n	38dae <valid_adv_param+0x18>

00038db8 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   38db8:	f001 0c1f 	and.w	ip, r1, #31
   38dbc:	2301      	movs	r3, #1
   38dbe:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   38dc2:	b152      	cbz	r2, 38dda <atomic_set_bit_to+0x22>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   38dc4:	0949      	lsrs	r1, r1, #5
   38dc6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   38dca:	e8d0 2fef 	ldaex	r2, [r0]
   38dce:	431a      	orrs	r2, r3
   38dd0:	e8c0 2fe1 	stlex	r1, r2, [r0]
   38dd4:	2900      	cmp	r1, #0
   38dd6:	d1f8      	bne.n	38dca <atomic_set_bit_to+0x12>
   38dd8:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   38dda:	0949      	lsrs	r1, r1, #5
   38ddc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   38de0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   38de2:	e8d0 2fef 	ldaex	r2, [r0]
   38de6:	401a      	ands	r2, r3
   38de8:	e8c0 2fe1 	stlex	r1, r2, [r0]
   38dec:	2900      	cmp	r1, #0
   38dee:	d1f8      	bne.n	38de2 <atomic_set_bit_to+0x2a>
}
   38df0:	4770      	bx	lr

00038df2 <atomic_test_and_clear_bit>:
{
   38df2:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   38df4:	f001 021f 	and.w	r2, r1, #31
   38df8:	2301      	movs	r3, #1
   38dfa:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   38dfc:	0949      	lsrs	r1, r1, #5
   38dfe:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   38e02:	43d9      	mvns	r1, r3
   38e04:	e8d0 2fef 	ldaex	r2, [r0]
   38e08:	ea02 0c01 	and.w	ip, r2, r1
   38e0c:	e8c0 cfee 	stlex	lr, ip, [r0]
   38e10:	f1be 0f00 	cmp.w	lr, #0
   38e14:	d1f6      	bne.n	38e04 <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   38e16:	4213      	tst	r3, r2
}
   38e18:	bf14      	ite	ne
   38e1a:	2001      	movne	r0, #1
   38e1c:	2000      	moveq	r0, #0
   38e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00038e22 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   38e22:	6843      	ldr	r3, [r0, #4]
   38e24:	f013 0f08 	tst.w	r3, #8
   38e28:	d00b      	beq.n	38e42 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   38e2a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   38e2e:	d10a      	bne.n	38e46 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   38e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   38e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   38e38:	d001      	beq.n	38e3e <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   38e3a:	2002      	movs	r0, #2
}
   38e3c:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   38e3e:	2001      	movs	r0, #1
   38e40:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   38e42:	2000      	movs	r0, #0
   38e44:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   38e46:	2001      	movs	r0, #1
   38e48:	4770      	bx	lr

00038e4a <bt_le_adv_set_enable_legacy>:
{
   38e4a:	b570      	push	{r4, r5, r6, lr}
   38e4c:	b086      	sub	sp, #24
   38e4e:	4605      	mov	r5, r0
   38e50:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   38e52:	2101      	movs	r1, #1
   38e54:	f242 000a 	movw	r0, #8202	; 0x200a
   38e58:	f7e3 fb28 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38e5c:	b1d0      	cbz	r0, 38e94 <bt_le_adv_set_enable_legacy+0x4a>
   38e5e:	4606      	mov	r6, r0
	if (enable) {
   38e60:	b19c      	cbz	r4, 38e8a <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   38e62:	2101      	movs	r1, #1
   38e64:	300c      	adds	r0, #12
   38e66:	f002 ffdc 	bl	3be22 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   38e6a:	9400      	str	r4, [sp, #0]
   38e6c:	2307      	movs	r3, #7
   38e6e:	f105 0210 	add.w	r2, r5, #16
   38e72:	a903      	add	r1, sp, #12
   38e74:	4630      	mov	r0, r6
   38e76:	f7e3 fb07 	bl	1c488 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   38e7a:	2200      	movs	r2, #0
   38e7c:	4631      	mov	r1, r6
   38e7e:	f242 000a 	movw	r0, #8202	; 0x200a
   38e82:	f7e3 fb65 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38e86:	b006      	add	sp, #24
   38e88:	bd70      	pop	{r4, r5, r6, pc}
   38e8a:	2100      	movs	r1, #0
   38e8c:	300c      	adds	r0, #12
   38e8e:	f002 ffc8 	bl	3be22 <net_buf_simple_add_u8>
   38e92:	e7ea      	b.n	38e6a <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   38e94:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38e98:	e7f5      	b.n	38e86 <bt_le_adv_set_enable_legacy+0x3c>

00038e9a <bt_le_adv_set_enable>:
{
   38e9a:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   38e9c:	f7ff ffd5 	bl	38e4a <bt_le_adv_set_enable_legacy>
}
   38ea0:	bd08      	pop	{r3, pc}

00038ea2 <bt_le_lim_adv_cancel_timeout>:
{
   38ea2:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   38ea4:	3018      	adds	r0, #24
   38ea6:	f7f9 fde1 	bl	32a6c <k_work_cancel_delayable>
}
   38eaa:	bd08      	pop	{r3, pc}

00038eac <bt_le_adv_resume>:
{
   38eac:	b570      	push	{r4, r5, r6, lr}
   38eae:	b082      	sub	sp, #8
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   38eb0:	f7e6 f870 	bl	1ef94 <bt_le_adv_lookup_legacy>
	if (!adv) {
   38eb4:	b138      	cbz	r0, 38ec6 <bt_le_adv_resume+0x1a>
   38eb6:	4605      	mov	r5, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   38eb8:	f100 0410 	add.w	r4, r0, #16
   38ebc:	210e      	movs	r1, #14
   38ebe:	4620      	mov	r0, r4
   38ec0:	f7ff fe9d 	bl	38bfe <atomic_test_bit>
   38ec4:	b908      	cbnz	r0, 38eca <bt_le_adv_resume+0x1e>
}
   38ec6:	b002      	add	sp, #8
   38ec8:	bd70      	pop	{r4, r5, r6, pc}
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
   38eca:	2107      	movs	r1, #7
   38ecc:	4620      	mov	r0, r4
   38ece:	f7ff fe96 	bl	38bfe <atomic_test_bit>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   38ed2:	4606      	mov	r6, r0
   38ed4:	2800      	cmp	r0, #0
   38ed6:	d1f6      	bne.n	38ec6 <bt_le_adv_resume+0x1a>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   38ed8:	210a      	movs	r1, #10
   38eda:	4620      	mov	r0, r4
   38edc:	f7ff fe8f 	bl	38bfe <atomic_test_bit>
   38ee0:	2800      	cmp	r0, #0
   38ee2:	d0f0      	beq.n	38ec6 <bt_le_adv_resume+0x1a>
	err = le_adv_start_add_conn(adv, &conn);
   38ee4:	a901      	add	r1, sp, #4
   38ee6:	4628      	mov	r0, r5
   38ee8:	f7e5 ffea 	bl	1eec0 <le_adv_start_add_conn>
	if (err) {
   38eec:	2800      	cmp	r0, #0
   38eee:	d1ea      	bne.n	38ec6 <bt_le_adv_resume+0x1a>
	err = bt_le_adv_set_enable(adv, true);
   38ef0:	2101      	movs	r1, #1
   38ef2:	4628      	mov	r0, r5
   38ef4:	f7ff ffd1 	bl	38e9a <bt_le_adv_set_enable>
	if (err) {
   38ef8:	b968      	cbnz	r0, 38f16 <bt_le_adv_resume+0x6a>
	bt_conn_unref(conn);
   38efa:	9801      	ldr	r0, [sp, #4]
   38efc:	f7e7 f9dc 	bl	202b8 <bt_conn_unref>
	if (persist_paused) {
   38f00:	2e00      	cmp	r6, #0
   38f02:	d0e0      	beq.n	38ec6 <bt_le_adv_resume+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   38f04:	e8d4 3fef 	ldaex	r3, [r4]
   38f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   38f0c:	e8c4 3fe2 	stlex	r2, r3, [r4]
   38f10:	2a00      	cmp	r2, #0
   38f12:	d0d8      	beq.n	38ec6 <bt_le_adv_resume+0x1a>
   38f14:	e7f6      	b.n	38f04 <bt_le_adv_resume+0x58>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   38f16:	2100      	movs	r1, #0
   38f18:	9801      	ldr	r0, [sp, #4]
   38f1a:	f7e7 fa09 	bl	20330 <bt_conn_set_state>
		persist_paused = atomic_test_and_clear_bit(adv->flags,
   38f1e:	210e      	movs	r1, #14
   38f20:	4620      	mov	r0, r4
   38f22:	f7ff ff66 	bl	38df2 <atomic_test_and_clear_bit>
   38f26:	4606      	mov	r6, r0
   38f28:	e7e7      	b.n	38efa <bt_le_adv_resume+0x4e>

00038f2a <sys_mem_swap>:
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   38f2a:	2300      	movs	r3, #0
   38f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   38f30:	d210      	bcs.n	38f54 <sys_mem_swap+0x2a>
{
   38f32:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   38f34:	f810 c003 	ldrb.w	ip, [r0, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   38f38:	1aca      	subs	r2, r1, r3
   38f3a:	3a01      	subs	r2, #1
   38f3c:	f810 e002 	ldrb.w	lr, [r0, r2]
   38f40:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   38f44:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   38f48:	3301      	adds	r3, #1
   38f4a:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   38f4e:	d3f1      	bcc.n	38f34 <sys_mem_swap+0xa>
	}
}
   38f50:	f85d fb04 	ldr.w	pc, [sp], #4
   38f54:	4770      	bx	lr

00038f56 <bt_encrypt_le>:
		  uint8_t enc_data[16])
{
	struct tc_aes_key_sched_struct s;
	uint8_t tmp[16];

	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   38f56:	b308      	cbz	r0, 38f9c <bt_encrypt_le+0x46>
{
   38f58:	b530      	push	{r4, r5, lr}
   38f5a:	b0b1      	sub	sp, #196	; 0xc4
   38f5c:	460d      	mov	r5, r1
   38f5e:	4614      	mov	r4, r2
   38f60:	4601      	mov	r1, r0
	CHECKIF(key == NULL || plaintext == NULL || enc_data == NULL) {
   38f62:	b1f5      	cbz	r5, 38fa2 <bt_encrypt_le+0x4c>
   38f64:	b302      	cbz	r2, 38fa8 <bt_encrypt_le+0x52>
	}

	LOG_DBG("key %s", bt_hex(key, 16));
	LOG_DBG("plaintext %s", bt_hex(plaintext, 16));

	sys_memcpy_swap(tmp, key, 16);
   38f66:	2210      	movs	r2, #16
   38f68:	4668      	mov	r0, sp
   38f6a:	f7e6 fa53 	bl	1f414 <sys_memcpy_swap>

	if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   38f6e:	4669      	mov	r1, sp
   38f70:	a804      	add	r0, sp, #16
   38f72:	f7df fee3 	bl	18d3c <tc_aes128_set_encrypt_key>
   38f76:	b1d0      	cbz	r0, 38fae <bt_encrypt_le+0x58>
		return -EINVAL;
	}

	sys_memcpy_swap(tmp, plaintext, 16);
   38f78:	2210      	movs	r2, #16
   38f7a:	4629      	mov	r1, r5
   38f7c:	4668      	mov	r0, sp
   38f7e:	f7e6 fa49 	bl	1f414 <sys_memcpy_swap>

	if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   38f82:	aa04      	add	r2, sp, #16
   38f84:	4669      	mov	r1, sp
   38f86:	4620      	mov	r0, r4
   38f88:	f7df ff3a 	bl	18e00 <tc_aes_encrypt>
   38f8c:	b190      	cbz	r0, 38fb4 <bt_encrypt_le+0x5e>
		return -EINVAL;
	}

	sys_mem_swap(enc_data, 16);
   38f8e:	2110      	movs	r1, #16
   38f90:	4620      	mov	r0, r4
   38f92:	f7ff ffca 	bl	38f2a <sys_mem_swap>

	LOG_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
   38f96:	2000      	movs	r0, #0
}
   38f98:	b031      	add	sp, #196	; 0xc4
   38f9a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   38f9c:	f06f 0015 	mvn.w	r0, #21
}
   38fa0:	4770      	bx	lr
		return -EINVAL;
   38fa2:	f06f 0015 	mvn.w	r0, #21
   38fa6:	e7f7      	b.n	38f98 <bt_encrypt_le+0x42>
   38fa8:	f06f 0015 	mvn.w	r0, #21
   38fac:	e7f4      	b.n	38f98 <bt_encrypt_le+0x42>
		return -EINVAL;
   38fae:	f06f 0015 	mvn.w	r0, #21
   38fb2:	e7f1      	b.n	38f98 <bt_encrypt_le+0x42>
		return -EINVAL;
   38fb4:	f06f 0015 	mvn.w	r0, #21
   38fb8:	e7ee      	b.n	38f98 <bt_encrypt_le+0x42>

00038fba <hci_generate_dhkey_v1>:
{
   38fba:	b538      	push	{r3, r4, r5, lr}
   38fbc:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
   38fbe:	2140      	movs	r1, #64	; 0x40
   38fc0:	f242 0026 	movw	r0, #8230	; 0x2026
   38fc4:	f7e3 fa72 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   38fc8:	b178      	cbz	r0, 38fea <hci_generate_dhkey_v1+0x30>
   38fca:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   38fcc:	2140      	movs	r1, #64	; 0x40
   38fce:	300c      	adds	r0, #12
   38fd0:	f7f0 fc86 	bl	298e0 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
   38fd4:	2240      	movs	r2, #64	; 0x40
   38fd6:	4621      	mov	r1, r4
   38fd8:	f7ff fa0f 	bl	383fa <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
   38fdc:	2200      	movs	r2, #0
   38fde:	4629      	mov	r1, r5
   38fe0:	f242 0026 	movw	r0, #8230	; 0x2026
   38fe4:	f7e3 fab4 	bl	1c550 <bt_hci_cmd_send_sync>
}
   38fe8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   38fea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   38fee:	e7fb      	b.n	38fe8 <hci_generate_dhkey_v1+0x2e>

00038ff0 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   38ff0:	460b      	mov	r3, r1
   38ff2:	b139      	cbz	r1, 39004 <sys_slist_remove+0x14>
	return node->next;
   38ff4:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   38ff6:	6019      	str	r1, [r3, #0]
	return list->tail;
   38ff8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   38ffa:	428a      	cmp	r2, r1
   38ffc:	d009      	beq.n	39012 <sys_slist_remove+0x22>
	parent->next = child;
   38ffe:	2300      	movs	r3, #0
   39000:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   39002:	4770      	bx	lr
	return node->next;
   39004:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   39006:	6003      	str	r3, [r0, #0]
	return list->tail;
   39008:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3900a:	428a      	cmp	r2, r1
   3900c:	d1f7      	bne.n	38ffe <sys_slist_remove+0xe>
	list->tail = node;
   3900e:	6043      	str	r3, [r0, #4]
}
   39010:	e7f5      	b.n	38ffe <sys_slist_remove+0xe>
	list->tail = node;
   39012:	6043      	str	r3, [r0, #4]
}
   39014:	e7f3      	b.n	38ffe <sys_slist_remove+0xe>

00039016 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   39016:	b508      	push	{r3, lr}
   39018:	460a      	mov	r2, r1
	return list->head;
   3901a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3901c:	2100      	movs	r1, #0
   3901e:	e001      	b.n	39024 <sys_slist_find_and_remove+0xe>
   39020:	4619      	mov	r1, r3
   39022:	681b      	ldr	r3, [r3, #0]
   39024:	b12b      	cbz	r3, 39032 <sys_slist_find_and_remove+0x1c>
   39026:	4293      	cmp	r3, r2
   39028:	d1fa      	bne.n	39020 <sys_slist_find_and_remove+0xa>
   3902a:	f7ff ffe1 	bl	38ff0 <sys_slist_remove>
   3902e:	2001      	movs	r0, #1
   39030:	e000      	b.n	39034 <sys_slist_find_and_remove+0x1e>
   39032:	2000      	movs	r0, #0
   39034:	bd08      	pop	{r3, pc}

00039036 <reset_pairing>:
	conn->required_sec_level = conn->sec_level;
   39036:	7a43      	ldrb	r3, [r0, #9]
   39038:	7283      	strb	r3, [r0, #10]
}
   3903a:	4770      	bx	lr

0003903c <tx_notify>:
{
   3903c:	b570      	push	{r4, r5, r6, lr}
   3903e:	4604      	mov	r4, r0
	LOG_DBG("conn %p", conn);
   39040:	e00c      	b.n	3905c <tx_notify+0x20>
   39042:	f383 8811 	msr	BASEPRI, r3
   39046:	f3bf 8f6f 	isb	sy
		if (!tx) {
   3904a:	b1c8      	cbz	r0, 39080 <tx_notify+0x44>
		cb = tx->cb;
   3904c:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   3904e:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   39050:	f7e6 fcc6 	bl	1f9e0 <tx_free>
		cb(conn, user_data, 0);
   39054:	2200      	movs	r2, #0
   39056:	4631      	mov	r1, r6
   39058:	4620      	mov	r0, r4
   3905a:	47a8      	blx	r5
	__asm__ volatile(
   3905c:	f04f 0220 	mov.w	r2, #32
   39060:	f3ef 8311 	mrs	r3, BASEPRI
   39064:	f382 8812 	msr	BASEPRI_MAX, r2
   39068:	f3bf 8f6f 	isb	sy
	return list->head;
   3906c:	6a20      	ldr	r0, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   3906e:	2800      	cmp	r0, #0
   39070:	d0e7      	beq.n	39042 <tx_notify+0x6>
	return node->next;
   39072:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   39074:	6222      	str	r2, [r4, #32]
	return list->tail;
   39076:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   39078:	4281      	cmp	r1, r0
   3907a:	d1e2      	bne.n	39042 <tx_notify+0x6>
	list->tail = node;
   3907c:	6262      	str	r2, [r4, #36]	; 0x24
}
   3907e:	e7e0      	b.n	39042 <tx_notify+0x6>
}
   39080:	bd70      	pop	{r4, r5, r6, pc}

00039082 <tx_complete_work>:
{
   39082:	b508      	push	{r3, lr}
	tx_notify(conn);
   39084:	3828      	subs	r0, #40	; 0x28
   39086:	f7ff ffd9 	bl	3903c <tx_notify>
}
   3908a:	bd08      	pop	{r3, pc}

0003908c <atomic_test_and_clear_bit>:
{
   3908c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   3908e:	f001 021f 	and.w	r2, r1, #31
   39092:	2301      	movs	r3, #1
   39094:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   39096:	0949      	lsrs	r1, r1, #5
   39098:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3909c:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3909e:	e8d0 2fef 	ldaex	r2, [r0]
   390a2:	ea02 0c01 	and.w	ip, r2, r1
   390a6:	e8c0 cfee 	stlex	lr, ip, [r0]
   390aa:	f1be 0f00 	cmp.w	lr, #0
   390ae:	d1f6      	bne.n	3909e <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   390b0:	4213      	tst	r3, r2
}
   390b2:	bf14      	ite	ne
   390b4:	2001      	movne	r0, #1
   390b6:	2000      	moveq	r0, #0
   390b8:	f85d fb04 	ldr.w	pc, [sp], #4

000390bc <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   390bc:	094b      	lsrs	r3, r1, #5
   390be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   390c2:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   390c6:	f001 011f 	and.w	r1, r1, #31
   390ca:	4108      	asrs	r0, r1
}
   390cc:	f000 0001 	and.w	r0, r0, #1
   390d0:	4770      	bx	lr

000390d2 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   390d2:	f001 0c1f 	and.w	ip, r1, #31
   390d6:	2301      	movs	r3, #1
   390d8:	fa03 f30c 	lsl.w	r3, r3, ip
	if (val) {
   390dc:	b152      	cbz	r2, 390f4 <atomic_set_bit_to+0x22>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   390de:	0949      	lsrs	r1, r1, #5
   390e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   390e4:	e8d0 2fef 	ldaex	r2, [r0]
   390e8:	431a      	orrs	r2, r3
   390ea:	e8c0 2fe1 	stlex	r1, r2, [r0]
   390ee:	2900      	cmp	r1, #0
   390f0:	d1f8      	bne.n	390e4 <atomic_set_bit_to+0x12>
   390f2:	4770      	bx	lr
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   390f4:	0949      	lsrs	r1, r1, #5
   390f6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   390fa:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   390fc:	e8d0 2fef 	ldaex	r2, [r0]
   39100:	401a      	ands	r2, r3
   39102:	e8c0 2fe1 	stlex	r1, r2, [r0]
   39106:	2900      	cmp	r1, #0
   39108:	d1f8      	bne.n	390fc <atomic_set_bit_to+0x2a>
}
   3910a:	4770      	bx	lr

0003910c <send_acl>:
{
   3910c:	b570      	push	{r4, r5, r6, lr}
   3910e:	4605      	mov	r5, r0
   39110:	460c      	mov	r4, r1
	switch (flags) {
   39112:	2a03      	cmp	r2, #3
   39114:	d818      	bhi.n	39148 <send_acl+0x3c>
   39116:	e8df f002 	tbb	[pc, r2]
   3911a:	1502      	.short	0x1502
   3911c:	1502      	.short	0x1502
   3911e:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   39120:	2104      	movs	r1, #4
   39122:	f104 000c 	add.w	r0, r4, #12
   39126:	f7f0 fbb9 	bl	2989c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   3912a:	882b      	ldrh	r3, [r5, #0]
   3912c:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   39130:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   39132:	8a23      	ldrh	r3, [r4, #16]
   39134:	3b04      	subs	r3, #4
   39136:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   39138:	2302      	movs	r3, #2
   3913a:	7623      	strb	r3, [r4, #24]
	return bt_send(buf);
   3913c:	4620      	mov	r0, r4
   3913e:	f7e4 f967 	bl	1d410 <bt_send>
}
   39142:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   39144:	2601      	movs	r6, #1
   39146:	e7eb      	b.n	39120 <send_acl+0x14>
	switch (flags) {
   39148:	f06f 0015 	mvn.w	r0, #21
   3914c:	e7f9      	b.n	39142 <send_acl+0x36>

0003914e <start_security>:
{
   3914e:	b508      	push	{r3, lr}
		return bt_smp_start_security(conn);
   39150:	f002 fc15 	bl	3b97e <bt_smp_start_security>
}
   39154:	bd08      	pop	{r3, pc}

00039156 <process_unack_tx>:
{
   39156:	b510      	push	{r4, lr}
   39158:	4604      	mov	r4, r0
   3915a:	e028      	b.n	391ae <process_unack_tx+0x58>
			conn->pending_no_cb--;
   3915c:	3a01      	subs	r2, #1
   3915e:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   39160:	f383 8811 	msr	BASEPRI, r3
   39164:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   39168:	4620      	mov	r0, r4
   3916a:	f7e6 fcf9 	bl	1fb60 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   3916e:	f7f8 fe37 	bl	31de0 <z_impl_k_sem_give>
			continue;
   39172:	e01c      	b.n	391ae <process_unack_tx+0x58>
   39174:	f383 8811 	msr	BASEPRI, r3
   39178:	f3bf 8f6f 	isb	sy
		if (!node) {
   3917c:	b361      	cbz	r1, 391d8 <process_unack_tx+0x82>
	__asm__ volatile(
   3917e:	f04f 0220 	mov.w	r2, #32
   39182:	f3ef 8311 	mrs	r3, BASEPRI
   39186:	f382 8812 	msr	BASEPRI_MAX, r2
   3918a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   3918e:	68ca      	ldr	r2, [r1, #12]
   39190:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   39192:	2200      	movs	r2, #0
   39194:	60ca      	str	r2, [r1, #12]
	__asm__ volatile(
   39196:	f383 8811 	msr	BASEPRI, r3
   3919a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   3919e:	4620      	mov	r0, r4
   391a0:	f7e6 fc68 	bl	1fa74 <conn_tx_destroy>
		k_sem_give(bt_conn_get_pkts(conn));
   391a4:	4620      	mov	r0, r4
   391a6:	f7e6 fcdb 	bl	1fb60 <bt_conn_get_pkts>
   391aa:	f7f8 fe19 	bl	31de0 <z_impl_k_sem_give>
	__asm__ volatile(
   391ae:	f04f 0220 	mov.w	r2, #32
   391b2:	f3ef 8311 	mrs	r3, BASEPRI
   391b6:	f382 8812 	msr	BASEPRI_MAX, r2
   391ba:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   391be:	69e2      	ldr	r2, [r4, #28]
   391c0:	2a00      	cmp	r2, #0
   391c2:	d1cb      	bne.n	3915c <process_unack_tx+0x6>
	return list->head;
   391c4:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   391c6:	2900      	cmp	r1, #0
   391c8:	d0d4      	beq.n	39174 <process_unack_tx+0x1e>
	return node->next;
   391ca:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   391cc:	6162      	str	r2, [r4, #20]
	return list->tail;
   391ce:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   391d0:	4281      	cmp	r1, r0
   391d2:	d1cf      	bne.n	39174 <process_unack_tx+0x1e>
	list->tail = node;
   391d4:	61a2      	str	r2, [r4, #24]
}
   391d6:	e7cd      	b.n	39174 <process_unack_tx+0x1e>
}
   391d8:	bd10      	pop	{r4, pc}

000391da <bt_conn_reset_rx_state>:
{
   391da:	b510      	push	{r4, lr}
   391dc:	4604      	mov	r4, r0
	if (!conn->rx) {
   391de:	6900      	ldr	r0, [r0, #16]
   391e0:	b118      	cbz	r0, 391ea <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   391e2:	f7f0 fa5f 	bl	296a4 <net_buf_unref>
	conn->rx = NULL;
   391e6:	2300      	movs	r3, #0
   391e8:	6123      	str	r3, [r4, #16]
}
   391ea:	bd10      	pop	{r4, pc}

000391ec <conn_prepare_events>:
{
   391ec:	b538      	push	{r3, r4, r5, lr}
	if (!atomic_get(&conn->ref)) {
   391ee:	f100 03d0 	add.w	r3, r0, #208	; 0xd0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   391f2:	e8d3 3faf 	lda	r3, [r3]
   391f6:	b1eb      	cbz	r3, 39234 <conn_prepare_events+0x48>
   391f8:	4604      	mov	r4, r0
   391fa:	460d      	mov	r5, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   391fc:	7b43      	ldrb	r3, [r0, #13]
   391fe:	b16b      	cbz	r3, 3921c <conn_prepare_events+0x30>
	if (conn->state != BT_CONN_CONNECTED) {
   39200:	7b63      	ldrb	r3, [r4, #13]
   39202:	2b07      	cmp	r3, #7
   39204:	d119      	bne.n	3923a <conn_prepare_events+0x4e>
	k_poll_event_init(&events[0],
   39206:	f104 0338 	add.w	r3, r4, #56	; 0x38
   3920a:	2200      	movs	r2, #0
   3920c:	2104      	movs	r1, #4
   3920e:	4628      	mov	r0, r5
   39210:	f7fb ffbe 	bl	35190 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   39214:	2301      	movs	r3, #1
   39216:	732b      	strb	r3, [r5, #12]
	return 0;
   39218:	2000      	movs	r0, #0
}
   3921a:	bd38      	pop	{r3, r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   3921c:	2106      	movs	r1, #6
   3921e:	3004      	adds	r0, #4
   39220:	f7ff ff34 	bl	3908c <atomic_test_and_clear_bit>
	if (conn->state == BT_CONN_DISCONNECTED &&
   39224:	2800      	cmp	r0, #0
   39226:	d0eb      	beq.n	39200 <conn_prepare_events+0x14>
		conn_cleanup(conn);
   39228:	4620      	mov	r0, r4
   3922a:	f7e6 ff03 	bl	20034 <conn_cleanup>
		return -ENOTCONN;
   3922e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   39232:	e7f2      	b.n	3921a <conn_prepare_events+0x2e>
		return -ENOTCONN;
   39234:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   39238:	e7ef      	b.n	3921a <conn_prepare_events+0x2e>
		return -ENOTCONN;
   3923a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3923e:	e7ec      	b.n	3921a <conn_prepare_events+0x2e>

00039240 <bt_conn_recv>:
{
   39240:	b570      	push	{r4, r5, r6, lr}
   39242:	4604      	mov	r4, r0
   39244:	460d      	mov	r5, r1
   39246:	4616      	mov	r6, r2
	tx_notify(conn);
   39248:	f7ff fef8 	bl	3903c <tx_notify>
		bt_acl_recv(conn, buf, flags);
   3924c:	4632      	mov	r2, r6
   3924e:	4629      	mov	r1, r5
   39250:	4620      	mov	r0, r4
   39252:	f7e6 fd95 	bl	1fd80 <bt_acl_recv>
}
   39256:	bd70      	pop	{r4, r5, r6, pc}

00039258 <conn_lookup_handle>:
{
   39258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3925a:	4606      	mov	r6, r0
   3925c:	460d      	mov	r5, r1
   3925e:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   39260:	2400      	movs	r4, #0
   39262:	e003      	b.n	3926c <conn_lookup_handle+0x14>
			bt_conn_unref(conn);
   39264:	4660      	mov	r0, ip
   39266:	f7e7 f827 	bl	202b8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   3926a:	3401      	adds	r4, #1
   3926c:	42ac      	cmp	r4, r5
   3926e:	d21b      	bcs.n	392a8 <conn_lookup_handle+0x50>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   39270:	20d8      	movs	r0, #216	; 0xd8
   39272:	fb00 6004 	mla	r0, r0, r4, r6
   39276:	f7e6 fff5 	bl	20264 <bt_conn_ref>
		if (!conn) {
   3927a:	4684      	mov	ip, r0
   3927c:	2800      	cmp	r0, #0
   3927e:	d0f4      	beq.n	3926a <conn_lookup_handle+0x12>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   39280:	7b43      	ldrb	r3, [r0, #13]
   39282:	2b01      	cmp	r3, #1
   39284:	d006      	beq.n	39294 <conn_lookup_handle+0x3c>
   39286:	b25a      	sxtb	r2, r3
   39288:	2a00      	cmp	r2, #0
   3928a:	d0eb      	beq.n	39264 <conn_lookup_handle+0xc>
   3928c:	3b07      	subs	r3, #7
   3928e:	b2db      	uxtb	r3, r3
   39290:	2b01      	cmp	r3, #1
   39292:	d8e7      	bhi.n	39264 <conn_lookup_handle+0xc>
		if (conn->handle != handle) {
   39294:	f8bc 3000 	ldrh.w	r3, [ip]
   39298:	42bb      	cmp	r3, r7
   3929a:	d101      	bne.n	392a0 <conn_lookup_handle+0x48>
}
   3929c:	4660      	mov	r0, ip
   3929e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   392a0:	4660      	mov	r0, ip
   392a2:	f7e7 f809 	bl	202b8 <bt_conn_unref>
			continue;
   392a6:	e7e0      	b.n	3926a <conn_lookup_handle+0x12>
	return NULL;
   392a8:	f04f 0c00 	mov.w	ip, #0
   392ac:	e7f6      	b.n	3929c <conn_lookup_handle+0x44>

000392ae <conn_disconnect>:
{
   392ae:	b538      	push	{r3, r4, r5, lr}
   392b0:	4604      	mov	r4, r0
	err = bt_hci_disconnect(conn->handle, reason);
   392b2:	8800      	ldrh	r0, [r0, #0]
   392b4:	f7ff faa6 	bl	38804 <bt_hci_disconnect>
	if (err) {
   392b8:	4605      	mov	r5, r0
   392ba:	b910      	cbnz	r0, 392c2 <conn_disconnect+0x14>
	if (conn->state == BT_CONN_CONNECTED) {
   392bc:	7b63      	ldrb	r3, [r4, #13]
   392be:	2b07      	cmp	r3, #7
   392c0:	d001      	beq.n	392c6 <conn_disconnect+0x18>
}
   392c2:	4628      	mov	r0, r5
   392c4:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTING);
   392c6:	2108      	movs	r1, #8
   392c8:	4620      	mov	r0, r4
   392ca:	f7e7 f831 	bl	20330 <bt_conn_set_state>
   392ce:	e7f8      	b.n	392c2 <conn_disconnect+0x14>

000392d0 <bt_conn_connected>:
{
   392d0:	b510      	push	{r4, lr}
   392d2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   392d4:	f7e7 ffe6 	bl	212a4 <bt_l2cap_connected>
	notify_connected(conn);
   392d8:	4620      	mov	r0, r4
   392da:	f7e6 fbeb 	bl	1fab4 <notify_connected>
}
   392de:	bd10      	pop	{r4, pc}

000392e0 <bt_conn_disconnect>:
{
   392e0:	b508      	push	{r3, lr}
	switch (conn->state) {
   392e2:	7b43      	ldrb	r3, [r0, #13]
   392e4:	3b02      	subs	r3, #2
   392e6:	2b06      	cmp	r3, #6
   392e8:	d810      	bhi.n	3930c <bt_conn_disconnect+0x2c>
   392ea:	e8df f003 	tbb	[pc, r3]
   392ee:	0f06      	.short	0x0f06
   392f0:	0c040f0f 	.word	0x0c040f0f
   392f4:	04          	.byte	0x04
   392f5:	00          	.byte	0x00
   392f6:	2000      	movs	r0, #0
}
   392f8:	bd08      	pop	{r3, pc}
		conn->err = reason;
   392fa:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   392fc:	2100      	movs	r1, #0
   392fe:	f7e7 f817 	bl	20330 <bt_conn_set_state>
		return 0;
   39302:	2000      	movs	r0, #0
   39304:	e7f8      	b.n	392f8 <bt_conn_disconnect+0x18>
		return conn_disconnect(conn, reason);
   39306:	f7ff ffd2 	bl	392ae <conn_disconnect>
   3930a:	e7f5      	b.n	392f8 <bt_conn_disconnect+0x18>
		return -ENOTCONN;
   3930c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   39310:	e7f2      	b.n	392f8 <bt_conn_disconnect+0x18>

00039312 <bt_conn_set_security>:
{
   39312:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   39314:	7b43      	ldrb	r3, [r0, #13]
   39316:	2b07      	cmp	r3, #7
   39318:	d118      	bne.n	3934c <bt_conn_set_security+0x3a>
   3931a:	4604      	mov	r4, r0
   3931c:	460d      	mov	r5, r1
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   3931e:	7a43      	ldrb	r3, [r0, #9]
   39320:	428b      	cmp	r3, r1
   39322:	d216      	bcs.n	39352 <bt_conn_set_security+0x40>
   39324:	7a83      	ldrb	r3, [r0, #10]
   39326:	428b      	cmp	r3, r1
   39328:	d301      	bcc.n	3932e <bt_conn_set_security+0x1c>
		return 0;
   3932a:	2000      	movs	r0, #0
   3932c:	e012      	b.n	39354 <bt_conn_set_security+0x42>
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   3932e:	09ca      	lsrs	r2, r1, #7
   39330:	210b      	movs	r1, #11
   39332:	3004      	adds	r0, #4
   39334:	f7ff fecd 	bl	390d2 <atomic_set_bit_to>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   39338:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   3933c:	72a5      	strb	r5, [r4, #10]
	err = start_security(conn);
   3933e:	4620      	mov	r0, r4
   39340:	f7ff ff05 	bl	3914e <start_security>
	if (err) {
   39344:	b130      	cbz	r0, 39354 <bt_conn_set_security+0x42>
		conn->required_sec_level = conn->sec_level;
   39346:	7a63      	ldrb	r3, [r4, #9]
   39348:	72a3      	strb	r3, [r4, #10]
   3934a:	e003      	b.n	39354 <bt_conn_set_security+0x42>
		return -ENOTCONN;
   3934c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   39350:	e000      	b.n	39354 <bt_conn_set_security+0x42>
		return 0;
   39352:	2000      	movs	r0, #0
}
   39354:	bd38      	pop	{r3, r4, r5, pc}

00039356 <bt_conn_get_security>:
}
   39356:	7a40      	ldrb	r0, [r0, #9]
   39358:	4770      	bx	lr

0003935a <bt_conn_add_le>:
{
   3935a:	b570      	push	{r4, r5, r6, lr}
   3935c:	4606      	mov	r6, r0
   3935e:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   39360:	f7e6 fd06 	bl	1fd70 <acl_conn_new>
	if (!conn) {
   39364:	4604      	mov	r4, r0
   39366:	b178      	cbz	r0, 39388 <bt_conn_add_le+0x2e>
	conn->id = id;
   39368:	7206      	strb	r6, [r0, #8]
   3936a:	2207      	movs	r2, #7
   3936c:	4629      	mov	r1, r5
   3936e:	3090      	adds	r0, #144	; 0x90
   39370:	f7ff f843 	bl	383fa <memcpy>
	conn->sec_level = BT_SECURITY_L1;
   39374:	2301      	movs	r3, #1
   39376:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
   39378:	72a3      	strb	r3, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
   3937a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   3937c:	2318      	movs	r3, #24
   3937e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   39382:	2328      	movs	r3, #40	; 0x28
   39384:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   39388:	4620      	mov	r0, r4
   3938a:	bd70      	pop	{r4, r5, r6, pc}

0003938c <bt_conn_is_peer_addr_le>:
{
   3938c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   3938e:	7a03      	ldrb	r3, [r0, #8]
   39390:	428b      	cmp	r3, r1
   39392:	d001      	beq.n	39398 <bt_conn_is_peer_addr_le+0xc>
		return false;
   39394:	2000      	movs	r0, #0
}
   39396:	bd38      	pop	{r3, r4, r5, pc}
   39398:	4604      	mov	r4, r0
   3939a:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   3939c:	2207      	movs	r2, #7
   3939e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   393a2:	4628      	mov	r0, r5
   393a4:	f7ff f804 	bl	383b0 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   393a8:	b1a8      	cbz	r0, 393d6 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   393aa:	78e3      	ldrb	r3, [r4, #3]
   393ac:	b14b      	cbz	r3, 393c2 <bt_conn_is_peer_addr_le+0x36>
   393ae:	2207      	movs	r2, #7
   393b0:	f104 0197 	add.w	r1, r4, #151	; 0x97
   393b4:	4628      	mov	r0, r5
   393b6:	f7fe fffb 	bl	383b0 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   393ba:	fab0 f080 	clz	r0, r0
   393be:	0940      	lsrs	r0, r0, #5
	return bt_addr_le_eq(peer, &conn->le.init_addr);
   393c0:	e7e9      	b.n	39396 <bt_conn_is_peer_addr_le+0xa>
	return memcmp(a, b, sizeof(*a));
   393c2:	2207      	movs	r2, #7
   393c4:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   393c8:	4628      	mov	r0, r5
   393ca:	f7fe fff1 	bl	383b0 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   393ce:	fab0 f080 	clz	r0, r0
   393d2:	0940      	lsrs	r0, r0, #5
		return bt_addr_le_eq(peer, &conn->le.resp_addr);
   393d4:	e7df      	b.n	39396 <bt_conn_is_peer_addr_le+0xa>
		return true;
   393d6:	2001      	movs	r0, #1
   393d8:	e7dd      	b.n	39396 <bt_conn_is_peer_addr_le+0xa>

000393da <bt_conn_get_dst>:
}
   393da:	3090      	adds	r0, #144	; 0x90
   393dc:	4770      	bx	lr

000393de <bt_conn_le_phy_update>:
{
   393de:	b510      	push	{r4, lr}
   393e0:	b082      	sub	sp, #8
   393e2:	460b      	mov	r3, r1
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   393e4:	880a      	ldrh	r2, [r1, #0]
   393e6:	f002 0103 	and.w	r1, r2, #3
   393ea:	2903      	cmp	r1, #3
   393ec:	d007      	beq.n	393fe <bt_conn_le_phy_update+0x20>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   393ee:	f012 0f01 	tst.w	r2, #1
   393f2:	d111      	bne.n	39418 <bt_conn_le_phy_update+0x3a>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S8) {
   393f4:	f012 0f02 	tst.w	r2, #2
   393f8:	d010      	beq.n	3941c <bt_conn_le_phy_update+0x3e>
		phy_opts = BT_HCI_LE_PHY_CODED_S8;
   393fa:	2402      	movs	r4, #2
   393fc:	e000      	b.n	39400 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   393fe:	2400      	movs	r4, #0
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   39400:	789a      	ldrb	r2, [r3, #2]
   39402:	b16a      	cbz	r2, 39420 <bt_conn_le_phy_update+0x42>
	all_phys = 0U;
   39404:	2100      	movs	r1, #0
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   39406:	78db      	ldrb	r3, [r3, #3]
   39408:	b90b      	cbnz	r3, 3940e <bt_conn_le_phy_update+0x30>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   3940a:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   3940e:	9400      	str	r4, [sp, #0]
   39410:	f7ff fa12 	bl	38838 <bt_le_set_phy>
}
   39414:	b002      	add	sp, #8
   39416:	bd10      	pop	{r4, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   39418:	2401      	movs	r4, #1
   3941a:	e7f1      	b.n	39400 <bt_conn_le_phy_update+0x22>
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   3941c:	2400      	movs	r4, #0
   3941e:	e7ef      	b.n	39400 <bt_conn_le_phy_update+0x22>
		all_phys |= BT_HCI_LE_PHY_TX_ANY;
   39420:	2101      	movs	r1, #1
   39422:	e7f0      	b.n	39406 <bt_conn_le_phy_update+0x28>

00039424 <bt_conn_le_conn_update>:
{
   39424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   39426:	4606      	mov	r6, r0
   39428:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   3942a:	210e      	movs	r1, #14
   3942c:	f242 0013 	movw	r0, #8211	; 0x2013
   39430:	f7e3 f83c 	bl	1c4ac <bt_hci_cmd_create>
	if (!buf) {
   39434:	b1d0      	cbz	r0, 3946c <bt_conn_le_conn_update+0x48>
   39436:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   39438:	210e      	movs	r1, #14
   3943a:	300c      	adds	r0, #12
   3943c:	f7f0 fa50 	bl	298e0 <net_buf_simple_add>
   39440:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   39442:	220e      	movs	r2, #14
   39444:	2100      	movs	r1, #0
   39446:	f7ff f807 	bl	38458 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   3944a:	8833      	ldrh	r3, [r6, #0]
   3944c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   3944e:	882b      	ldrh	r3, [r5, #0]
   39450:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   39452:	886b      	ldrh	r3, [r5, #2]
   39454:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   39456:	88ab      	ldrh	r3, [r5, #4]
   39458:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   3945a:	88eb      	ldrh	r3, [r5, #6]
   3945c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   3945e:	2200      	movs	r2, #0
   39460:	4639      	mov	r1, r7
   39462:	f242 0013 	movw	r0, #8211	; 0x2013
   39466:	f7e3 f873 	bl	1c550 <bt_hci_cmd_send_sync>
}
   3946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   3946c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   39470:	e7fb      	b.n	3946a <bt_conn_le_conn_update+0x46>

00039472 <l2cap_connected>:
}
   39472:	4770      	bx	lr

00039474 <l2cap_disconnected>:
}
   39474:	4770      	bx	lr

00039476 <l2cap_chan_recv>:
{
   39476:	b510      	push	{r4, lr}
   39478:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   3947a:	6843      	ldr	r3, [r0, #4]
   3947c:	695b      	ldr	r3, [r3, #20]
   3947e:	4798      	blx	r3
	net_buf_unref(buf);
   39480:	4620      	mov	r0, r4
   39482:	f7f0 f90f 	bl	296a4 <net_buf_unref>
}
   39486:	bd10      	pop	{r4, pc}

00039488 <bt_l2cap_chan_del>:
{
   39488:	b538      	push	{r3, r4, r5, lr}
   3948a:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   3948c:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   3948e:	6803      	ldr	r3, [r0, #0]
   39490:	b123      	cbz	r3, 3949c <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   39492:	686b      	ldr	r3, [r5, #4]
   39494:	b103      	cbz	r3, 39498 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   39496:	4798      	blx	r3
	chan->conn = NULL;
   39498:	2300      	movs	r3, #0
   3949a:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   3949c:	68e3      	ldr	r3, [r4, #12]
   3949e:	b10b      	cbz	r3, 394a4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   394a0:	4620      	mov	r0, r4
   394a2:	4798      	blx	r3
	if (ops->released) {
   394a4:	6a2b      	ldr	r3, [r5, #32]
   394a6:	b10b      	cbz	r3, 394ac <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   394a8:	4620      	mov	r0, r4
   394aa:	4798      	blx	r3
}
   394ac:	bd38      	pop	{r3, r4, r5, pc}

000394ae <bt_l2cap_chan_add>:
{
   394ae:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   394b0:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   394b4:	2400      	movs	r4, #0
   394b6:	608c      	str	r4, [r1, #8]
	return list->tail;
   394b8:	6d84      	ldr	r4, [r0, #88]	; 0x58
Z_GENLIST_APPEND(slist, snode)
   394ba:	b12c      	cbz	r4, 394c8 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   394bc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   394be:	6583      	str	r3, [r0, #88]	; 0x58
	chan->conn = conn;
   394c0:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   394c2:	60ca      	str	r2, [r1, #12]
}
   394c4:	bc10      	pop	{r4}
   394c6:	4770      	bx	lr
   394c8:	6583      	str	r3, [r0, #88]	; 0x58
	list->head = node;
   394ca:	6543      	str	r3, [r0, #84]	; 0x54
}
   394cc:	e7f8      	b.n	394c0 <bt_l2cap_chan_add+0x12>

000394ce <bt_l2cap_disconnected>:
{
   394ce:	b510      	push	{r4, lr}
	return list->head;
   394d0:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   394d2:	b138      	cbz	r0, 394e4 <bt_l2cap_disconnected+0x16>
   394d4:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   394d6:	f110 0408 	adds.w	r4, r0, #8
   394da:	d008      	beq.n	394ee <bt_l2cap_disconnected+0x20>
	return node->next;
   394dc:	6884      	ldr	r4, [r0, #8]
   394de:	b134      	cbz	r4, 394ee <bt_l2cap_disconnected+0x20>
   394e0:	3c08      	subs	r4, #8
   394e2:	e004      	b.n	394ee <bt_l2cap_disconnected+0x20>
   394e4:	4604      	mov	r4, r0
   394e6:	e002      	b.n	394ee <bt_l2cap_disconnected+0x20>
   394e8:	4623      	mov	r3, r4
   394ea:	4620      	mov	r0, r4
   394ec:	461c      	mov	r4, r3
   394ee:	b140      	cbz	r0, 39502 <bt_l2cap_disconnected+0x34>
		bt_l2cap_chan_del(chan);
   394f0:	f7ff ffca 	bl	39488 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   394f4:	2c00      	cmp	r4, #0
   394f6:	d0f7      	beq.n	394e8 <bt_l2cap_disconnected+0x1a>
   394f8:	68a3      	ldr	r3, [r4, #8]
   394fa:	2b00      	cmp	r3, #0
   394fc:	d0f5      	beq.n	394ea <bt_l2cap_disconnected+0x1c>
   394fe:	3b08      	subs	r3, #8
   39500:	e7f3      	b.n	394ea <bt_l2cap_disconnected+0x1c>
}
   39502:	bd10      	pop	{r4, pc}

00039504 <bt_l2cap_security_changed>:
{
   39504:	b538      	push	{r3, r4, r5, lr}
   39506:	460d      	mov	r5, r1
	return list->head;
   39508:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   3950a:	b138      	cbz	r0, 3951c <bt_l2cap_security_changed+0x18>
   3950c:	3808      	subs	r0, #8
Z_GENLIST_PEEK_NEXT(slist, snode)
   3950e:	f110 0408 	adds.w	r4, r0, #8
   39512:	d008      	beq.n	39526 <bt_l2cap_security_changed+0x22>
	return node->next;
   39514:	6884      	ldr	r4, [r0, #8]
   39516:	b134      	cbz	r4, 39526 <bt_l2cap_security_changed+0x22>
   39518:	3c08      	subs	r4, #8
   3951a:	e004      	b.n	39526 <bt_l2cap_security_changed+0x22>
   3951c:	4604      	mov	r4, r0
   3951e:	e002      	b.n	39526 <bt_l2cap_security_changed+0x22>
   39520:	4623      	mov	r3, r4
   39522:	4620      	mov	r0, r4
   39524:	461c      	mov	r4, r3
   39526:	b158      	cbz	r0, 39540 <bt_l2cap_security_changed+0x3c>
		if (chan->ops->encrypt_change) {
   39528:	6843      	ldr	r3, [r0, #4]
   3952a:	689b      	ldr	r3, [r3, #8]
   3952c:	b10b      	cbz	r3, 39532 <bt_l2cap_security_changed+0x2e>
			chan->ops->encrypt_change(chan, hci_status);
   3952e:	4629      	mov	r1, r5
   39530:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   39532:	2c00      	cmp	r4, #0
   39534:	d0f4      	beq.n	39520 <bt_l2cap_security_changed+0x1c>
   39536:	68a3      	ldr	r3, [r4, #8]
   39538:	2b00      	cmp	r3, #0
   3953a:	d0f2      	beq.n	39522 <bt_l2cap_security_changed+0x1e>
   3953c:	3b08      	subs	r3, #8
   3953e:	e7f0      	b.n	39522 <bt_l2cap_security_changed+0x1e>
}
   39540:	bd38      	pop	{r3, r4, r5, pc}

00039542 <bt_l2cap_create_pdu_timeout>:
{
   39542:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   39544:	3104      	adds	r1, #4
   39546:	f7e7 f89f 	bl	20688 <bt_conn_create_pdu_timeout>
}
   3954a:	bd08      	pop	{r3, pc}

0003954c <bt_l2cap_send_cb>:
{
   3954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3954e:	4605      	mov	r5, r0
   39550:	460f      	mov	r7, r1
   39552:	4614      	mov	r4, r2
   39554:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   39556:	2104      	movs	r1, #4
   39558:	f102 000c 	add.w	r0, r2, #12
   3955c:	f7f0 f99e 	bl	2989c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   39560:	8a23      	ldrh	r3, [r4, #16]
   39562:	3b04      	subs	r3, #4
   39564:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   39566:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   39568:	9b06      	ldr	r3, [sp, #24]
   3956a:	4632      	mov	r2, r6
   3956c:	4621      	mov	r1, r4
   3956e:	4628      	mov	r0, r5
   39570:	f7e6 fdac 	bl	200cc <bt_conn_send_cb>
}
   39574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00039576 <l2cap_send>:
{
   39576:	b510      	push	{r4, lr}
   39578:	b082      	sub	sp, #8
   3957a:	4614      	mov	r4, r2
   3957c:	2300      	movs	r3, #0
   3957e:	9300      	str	r3, [sp, #0]
   39580:	f7ff ffe4 	bl	3954c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   39584:	b908      	cbnz	r0, 3958a <l2cap_send+0x14>
}
   39586:	b002      	add	sp, #8
   39588:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
   3958a:	4620      	mov	r0, r4
   3958c:	f7f0 f88a 	bl	296a4 <net_buf_unref>
}
   39590:	e7f9      	b.n	39586 <l2cap_send+0x10>

00039592 <l2cap_send_reject>:
{
   39592:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39596:	4606      	mov	r6, r0
   39598:	4690      	mov	r8, r2
   3959a:	461c      	mov	r4, r3
   3959c:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   395a0:	1cbb      	adds	r3, r7, #2
   395a2:	460a      	mov	r2, r1
   395a4:	2101      	movs	r1, #1
   395a6:	2000      	movs	r0, #0
   395a8:	f7e7 fece 	bl	21348 <l2cap_create_le_sig_pdu>
	if (!buf) {
   395ac:	b198      	cbz	r0, 395d6 <l2cap_send_reject+0x44>
   395ae:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   395b0:	f100 090c 	add.w	r9, r0, #12
   395b4:	2102      	movs	r1, #2
   395b6:	4648      	mov	r0, r9
   395b8:	f7f0 f992 	bl	298e0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   395bc:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   395c0:	b124      	cbz	r4, 395cc <l2cap_send_reject+0x3a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   395c2:	463a      	mov	r2, r7
   395c4:	4621      	mov	r1, r4
   395c6:	4648      	mov	r0, r9
   395c8:	f002 fc20 	bl	3be0c <net_buf_simple_add_mem>
	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
   395cc:	462a      	mov	r2, r5
   395ce:	2105      	movs	r1, #5
   395d0:	4630      	mov	r0, r6
   395d2:	f7ff ffd0 	bl	39576 <l2cap_send>
}
   395d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000395da <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   395da:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   395dc:	b110      	cbz	r0, 395e4 <bt_l2cap_le_lookup_tx_cid+0xa>
   395de:	3808      	subs	r0, #8
   395e0:	e000      	b.n	395e4 <bt_l2cap_le_lookup_tx_cid+0xa>
   395e2:	4618      	mov	r0, r3
   395e4:	b150      	cbz	r0, 395fc <bt_l2cap_le_lookup_tx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   395e6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   395e8:	428b      	cmp	r3, r1
   395ea:	d007      	beq.n	395fc <bt_l2cap_le_lookup_tx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   395ec:	f110 0308 	adds.w	r3, r0, #8
   395f0:	d0f7      	beq.n	395e2 <bt_l2cap_le_lookup_tx_cid+0x8>
	return node->next;
   395f2:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   395f4:	2800      	cmp	r0, #0
   395f6:	d0f5      	beq.n	395e4 <bt_l2cap_le_lookup_tx_cid+0xa>
   395f8:	3808      	subs	r0, #8
   395fa:	e7f3      	b.n	395e4 <bt_l2cap_le_lookup_tx_cid+0xa>
}
   395fc:	4770      	bx	lr

000395fe <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   395fe:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   39600:	b110      	cbz	r0, 39608 <bt_l2cap_le_lookup_rx_cid+0xa>
   39602:	3808      	subs	r0, #8
   39604:	e000      	b.n	39608 <bt_l2cap_le_lookup_rx_cid+0xa>
   39606:	4618      	mov	r0, r3
   39608:	b150      	cbz	r0, 39620 <bt_l2cap_le_lookup_rx_cid+0x22>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   3960a:	8a83      	ldrh	r3, [r0, #20]
   3960c:	428b      	cmp	r3, r1
   3960e:	d007      	beq.n	39620 <bt_l2cap_le_lookup_rx_cid+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   39610:	f110 0308 	adds.w	r3, r0, #8
   39614:	d0f7      	beq.n	39606 <bt_l2cap_le_lookup_rx_cid+0x8>
	return node->next;
   39616:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   39618:	2800      	cmp	r0, #0
   3961a:	d0f5      	beq.n	39608 <bt_l2cap_le_lookup_rx_cid+0xa>
   3961c:	3808      	subs	r0, #8
   3961e:	e7f3      	b.n	39608 <bt_l2cap_le_lookup_rx_cid+0xa>
}
   39620:	4770      	bx	lr

00039622 <bt_l2cap_update_conn_param>:
{
   39622:	b570      	push	{r4, r5, r6, lr}
   39624:	b082      	sub	sp, #8
   39626:	4605      	mov	r5, r0
   39628:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   3962a:	f7e7 fd5b 	bl	210e4 <get_ident>
   3962e:	4602      	mov	r2, r0
   39630:	2308      	movs	r3, #8
   39632:	2112      	movs	r1, #18
   39634:	2000      	movs	r0, #0
   39636:	f7e7 fe87 	bl	21348 <l2cap_create_le_sig_pdu>
	if (!buf) {
   3963a:	b1e0      	cbz	r0, 39676 <bt_l2cap_update_conn_param+0x54>
   3963c:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   3963e:	2108      	movs	r1, #8
   39640:	300c      	adds	r0, #12
   39642:	f7f0 f94d 	bl	298e0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   39646:	8823      	ldrh	r3, [r4, #0]
   39648:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   3964a:	8863      	ldrh	r3, [r4, #2]
   3964c:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   3964e:	88a3      	ldrh	r3, [r4, #4]
   39650:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   39652:	88e3      	ldrh	r3, [r4, #6]
   39654:	80c3      	strh	r3, [r0, #6]
   39656:	2300      	movs	r3, #0
   39658:	9300      	str	r3, [sp, #0]
   3965a:	4632      	mov	r2, r6
   3965c:	2105      	movs	r1, #5
   3965e:	4628      	mov	r0, r5
   39660:	f7ff ff74 	bl	3954c <bt_l2cap_send_cb>
	if (err) {
   39664:	4604      	mov	r4, r0
   39666:	b910      	cbnz	r0, 3966e <bt_l2cap_update_conn_param+0x4c>
}
   39668:	4620      	mov	r0, r4
   3966a:	b002      	add	sp, #8
   3966c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   3966e:	4630      	mov	r0, r6
   39670:	f7f0 f818 	bl	296a4 <net_buf_unref>
		return err;
   39674:	e7f8      	b.n	39668 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   39676:	f06f 040b 	mvn.w	r4, #11
   3967a:	e7f5      	b.n	39668 <bt_l2cap_update_conn_param+0x46>

0003967c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   3967c:	4770      	bx	lr

0003967e <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   3967e:	460b      	mov	r3, r1
   39680:	b139      	cbz	r1, 39692 <sys_slist_remove+0x14>
	return node->next;
   39682:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   39684:	6019      	str	r1, [r3, #0]
	return list->tail;
   39686:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   39688:	428a      	cmp	r2, r1
   3968a:	d009      	beq.n	396a0 <sys_slist_remove+0x22>
	parent->next = child;
   3968c:	2300      	movs	r3, #0
   3968e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   39690:	4770      	bx	lr
	return node->next;
   39692:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   39694:	6003      	str	r3, [r0, #0]
	return list->tail;
   39696:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   39698:	428a      	cmp	r2, r1
   3969a:	d1f7      	bne.n	3968c <sys_slist_remove+0xe>
	list->tail = node;
   3969c:	6043      	str	r3, [r0, #4]
}
   3969e:	e7f5      	b.n	3968c <sys_slist_remove+0xe>
	list->tail = node;
   396a0:	6043      	str	r3, [r0, #4]
}
   396a2:	e7f3      	b.n	3968c <sys_slist_remove+0xe>

000396a4 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   396a4:	b508      	push	{r3, lr}
   396a6:	460a      	mov	r2, r1
	return list->head;
   396a8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   396aa:	2100      	movs	r1, #0
   396ac:	e001      	b.n	396b2 <sys_slist_find_and_remove+0xe>
   396ae:	4619      	mov	r1, r3
   396b0:	681b      	ldr	r3, [r3, #0]
   396b2:	b12b      	cbz	r3, 396c0 <sys_slist_find_and_remove+0x1c>
   396b4:	4293      	cmp	r3, r2
   396b6:	d1fa      	bne.n	396ae <sys_slist_find_and_remove+0xa>
   396b8:	f7ff ffe1 	bl	3967e <sys_slist_remove>
   396bc:	2001      	movs	r0, #1
   396be:	e000      	b.n	396c2 <sys_slist_find_and_remove+0x1e>
   396c0:	2000      	movs	r0, #0
   396c2:	bd08      	pop	{r3, pc}

000396c4 <get_first_req_matching_chan>:
{
   396c4:	4603      	mov	r3, r0
	return list->head;
   396c6:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   396c8:	b120      	cbz	r0, 396d4 <get_first_req_matching_chan+0x10>
	return node->next;
   396ca:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   396cc:	601a      	str	r2, [r3, #0]
	return list->tail;
   396ce:	6859      	ldr	r1, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   396d0:	4288      	cmp	r0, r1
   396d2:	d000      	beq.n	396d6 <get_first_req_matching_chan+0x12>
}
   396d4:	4770      	bx	lr
	list->tail = node;
   396d6:	605a      	str	r2, [r3, #4]
		return ATT_REQ(node);
   396d8:	e7fc      	b.n	396d4 <get_first_req_matching_chan+0x10>

000396da <range_is_valid>:
	if (!start || !end) {
   396da:	b120      	cbz	r0, 396e6 <range_is_valid+0xc>
   396dc:	b119      	cbz	r1, 396e6 <range_is_valid+0xc>
	if (start > end) {
   396de:	4288      	cmp	r0, r1
   396e0:	d806      	bhi.n	396f0 <range_is_valid+0x16>
	return true;
   396e2:	2001      	movs	r0, #1
}
   396e4:	4770      	bx	lr
		if (err) {
   396e6:	b10a      	cbz	r2, 396ec <range_is_valid+0x12>
			*err = 0U;
   396e8:	2300      	movs	r3, #0
   396ea:	8013      	strh	r3, [r2, #0]
		return false;
   396ec:	2000      	movs	r0, #0
   396ee:	4770      	bx	lr
		if (err) {
   396f0:	b102      	cbz	r2, 396f4 <range_is_valid+0x1a>
			*err = start;
   396f2:	8010      	strh	r0, [r2, #0]
		return false;
   396f4:	2000      	movs	r0, #0
   396f6:	4770      	bx	lr

000396f8 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   396f8:	f110 0fff 	cmn.w	r0, #255	; 0xff
   396fc:	d201      	bcs.n	39702 <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   396fe:	200e      	movs	r0, #14
}
   39700:	4770      	bx	lr
		return -err;
   39702:	4240      	negs	r0, r0
   39704:	b2c0      	uxtb	r0, r0
   39706:	4770      	bx	lr

00039708 <attr_read_type_cb>:
{
   39708:	b410      	push	{r4}
	if (!data->rsp->len) {
   3970a:	68d4      	ldr	r4, [r2, #12]
   3970c:	7823      	ldrb	r3, [r4, #0]
   3970e:	b923      	cbnz	r3, 3971a <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   39710:	3102      	adds	r1, #2
   39712:	7021      	strb	r1, [r4, #0]
	return true;
   39714:	2001      	movs	r0, #1
}
   39716:	bc10      	pop	{r4}
   39718:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   3971a:	3102      	adds	r1, #2
   3971c:	428b      	cmp	r3, r1
   3971e:	d005      	beq.n	3972c <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   39720:	8a03      	ldrh	r3, [r0, #16]
   39722:	3b02      	subs	r3, #2
   39724:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   39726:	2000      	movs	r0, #0
   39728:	6110      	str	r0, [r2, #16]
		return false;
   3972a:	e7f4      	b.n	39716 <attr_read_type_cb+0xe>
	return true;
   3972c:	2001      	movs	r0, #1
   3972e:	e7f2      	b.n	39716 <attr_read_type_cb+0xe>

00039730 <attr_read_group_cb>:
	if (!data->rsp->len) {
   39730:	68d0      	ldr	r0, [r2, #12]
   39732:	7803      	ldrb	r3, [r0, #0]
   39734:	b91b      	cbnz	r3, 3973e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   39736:	3104      	adds	r1, #4
   39738:	7001      	strb	r1, [r0, #0]
	return true;
   3973a:	2001      	movs	r0, #1
   3973c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   3973e:	3104      	adds	r1, #4
   39740:	428b      	cmp	r3, r1
   39742:	d006      	beq.n	39752 <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   39744:	6891      	ldr	r1, [r2, #8]
   39746:	8a0b      	ldrh	r3, [r1, #16]
   39748:	3b04      	subs	r3, #4
   3974a:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   3974c:	2000      	movs	r0, #0
   3974e:	6110      	str	r0, [r2, #16]
		return false;
   39750:	4770      	bx	lr
	return true;
   39752:	2001      	movs	r0, #1
}
   39754:	4770      	bx	lr

00039756 <att_prepare_write_req>:
}
   39756:	2006      	movs	r0, #6
   39758:	4770      	bx	lr

0003975a <att_exec_write_req>:
}
   3975a:	2006      	movs	r0, #6
   3975c:	4770      	bx	lr

0003975e <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3975e:	094b      	lsrs	r3, r1, #5
   39760:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   39764:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   39768:	f001 011f 	and.w	r1, r1, #31
   3976c:	4108      	asrs	r0, r1
}
   3976e:	f000 0001 	and.w	r0, r0, #1
   39772:	4770      	bx	lr

00039774 <att_chan_attach>:
{
   39774:	b538      	push	{r3, r4, r5, lr}
   39776:	4604      	mov	r4, r0
   39778:	460d      	mov	r5, r1
	return list->head;
   3977a:	6a83      	ldr	r3, [r0, #40]	; 0x28
	if (sys_slist_is_empty(&att->chans)) {
   3977c:	b143      	cbz	r3, 39790 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   3977e:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   39782:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   39784:	f8c5 20f0 	str.w	r2, [r5, #240]	; 0xf0
	list->head = node;
   39788:	62a3      	str	r3, [r4, #40]	; 0x28
	return list->tail;
   3978a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
Z_GENLIST_PREPEND(slist, snode)
   3978c:	b122      	cbz	r2, 39798 <att_chan_attach+0x24>
}
   3978e:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   39790:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   39792:	f005 f916 	bl	3e9c2 <z_impl_k_queue_init>
}
   39796:	e7f2      	b.n	3977e <att_chan_attach+0xa>
	list->tail = node;
   39798:	62e3      	str	r3, [r4, #44]	; 0x2c
}
   3979a:	e7f8      	b.n	3978e <att_chan_attach+0x1a>

0003979c <chan_tx_complete>:
{
   3979c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   397a0:	4605      	mov	r5, r0
   397a2:	4608      	mov	r0, r1
   397a4:	4614      	mov	r4, r2
	bt_gatt_complete_func_t func = data->func;
   397a6:	688e      	ldr	r6, [r1, #8]
	uint16_t attr_count = data->attr_count;
   397a8:	888f      	ldrh	r7, [r1, #4]
	void *ud = data->user_data;
   397aa:	f8d1 800c 	ldr.w	r8, [r1, #12]
	tx_meta_data_free(data);
   397ae:	f7e8 f9d1 	bl	21b54 <tx_meta_data_free>
	if (!err && func) {
   397b2:	b94c      	cbnz	r4, 397c8 <chan_tx_complete+0x2c>
   397b4:	b146      	cbz	r6, 397c8 <chan_tx_complete+0x2c>
		for (uint16_t i = 0; i < attr_count; i++) {
   397b6:	2400      	movs	r4, #0
   397b8:	e004      	b.n	397c4 <chan_tx_complete+0x28>
			func(conn, ud);
   397ba:	4641      	mov	r1, r8
   397bc:	4628      	mov	r0, r5
   397be:	47b0      	blx	r6
		for (uint16_t i = 0; i < attr_count; i++) {
   397c0:	3401      	adds	r4, #1
   397c2:	b2a4      	uxth	r4, r4
   397c4:	42a7      	cmp	r7, r4
   397c6:	d8f8      	bhi.n	397ba <chan_tx_complete+0x1e>
}
   397c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000397cc <bt_att_chan_send>:
{
   397cc:	b508      	push	{r3, lr}
	return chan_send(chan, buf);
   397ce:	f7e8 f9e1 	bl	21b94 <chan_send>
}
   397d2:	bd08      	pop	{r3, pc}

000397d4 <chan_req_send>:
{
   397d4:	b570      	push	{r4, r5, r6, lr}
   397d6:	4605      	mov	r5, r0
   397d8:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   397da:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   397dc:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   397de:	2200      	movs	r2, #0
	while (buf) {
   397e0:	e003      	b.n	397ea <chan_req_send+0x16>
		bytes += buf->len;
   397e2:	f8b3 c010 	ldrh.w	ip, [r3, #16]
   397e6:	4462      	add	r2, ip
		buf = buf->frags;
   397e8:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   397ea:	2b00      	cmp	r3, #0
   397ec:	d1f9      	bne.n	397e2 <chan_req_send+0xe>
   397ee:	4291      	cmp	r1, r2
   397f0:	d30d      	bcc.n	3980e <chan_req_send+0x3a>
	chan->req = req;
   397f2:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
	buf = req->buf;
   397f6:	68a6      	ldr	r6, [r4, #8]
	req->buf = NULL;
   397f8:	60a3      	str	r3, [r4, #8]
	err = bt_att_chan_send(chan, buf);
   397fa:	4631      	mov	r1, r6
   397fc:	4628      	mov	r0, r5
   397fe:	f7ff ffe5 	bl	397cc <bt_att_chan_send>
	if (err) {
   39802:	b118      	cbz	r0, 3980c <chan_req_send+0x38>
		req->buf = buf;
   39804:	60a6      	str	r6, [r4, #8]
		chan->req = NULL;
   39806:	2300      	movs	r3, #0
   39808:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
}
   3980c:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3980e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   39812:	e7fb      	b.n	3980c <chan_req_send+0x38>

00039814 <bt_att_status>:
{
   39814:	b570      	push	{r4, r5, r6, lr}
   39816:	4604      	mov	r4, r0
   39818:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   3981a:	2100      	movs	r1, #0
   3981c:	f7ff ff9f 	bl	3975e <atomic_test_bit>
   39820:	b130      	cbz	r0, 39830 <bt_att_status+0x1c>
   39822:	1f26      	subs	r6, r4, #4
	if (!chan->att) {
   39824:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39828:	b113      	cbz	r3, 39830 <bt_att_status+0x1c>
	if (chan->req) {
   3982a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   3982e:	b102      	cbz	r2, 39832 <bt_att_status+0x1e>
}
   39830:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   39832:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   39834:	2d00      	cmp	r5, #0
   39836:	d0fb      	beq.n	39830 <bt_att_status+0x1c>
	return node->next;
   39838:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   3983a:	605a      	str	r2, [r3, #4]
	return list->tail;
   3983c:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   3983e:	42a9      	cmp	r1, r5
   39840:	d00f      	beq.n	39862 <bt_att_status+0x4e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   39842:	4629      	mov	r1, r5
   39844:	4630      	mov	r0, r6
   39846:	f7e8 fa15 	bl	21c74 <bt_att_chan_req_send>
   3984a:	2800      	cmp	r0, #0
   3984c:	daf0      	bge.n	39830 <bt_att_status+0x1c>
	sys_slist_prepend(&chan->att->reqs, node);
   3984e:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return list->head;
   39852:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   39854:	602a      	str	r2, [r5, #0]
	list->head = node;
   39856:	605d      	str	r5, [r3, #4]
	return list->tail;
   39858:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   3985a:	2a00      	cmp	r2, #0
   3985c:	d1e8      	bne.n	39830 <bt_att_status+0x1c>
	list->tail = node;
   3985e:	609d      	str	r5, [r3, #8]
}
   39860:	e7e6      	b.n	39830 <bt_att_status+0x1c>
	list->tail = node;
   39862:	609a      	str	r2, [r3, #8]
	if (!node) {
   39864:	e7ed      	b.n	39842 <bt_att_status+0x2e>

00039866 <att_req_send_process>:
{
   39866:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3986a:	4607      	mov	r7, r0
	return list->head;
   3986c:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3986e:	b3ac      	cbz	r4, 398dc <att_req_send_process+0x76>
   39870:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   39872:	f114 05f0 	adds.w	r5, r4, #240	; 0xf0
   39876:	d003      	beq.n	39880 <att_req_send_process+0x1a>
	return node->next;
   39878:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   3987c:	b105      	cbz	r5, 39880 <att_req_send_process+0x1a>
   3987e:	3df0      	subs	r5, #240	; 0xf0
   39880:	f04f 0800 	mov.w	r8, #0
   39884:	4646      	mov	r6, r8
   39886:	e02e      	b.n	398e6 <att_req_send_process+0x80>
		if (!req && prev &&
   39888:	b196      	cbz	r6, 398b0 <att_req_send_process+0x4a>
		req = get_first_req_matching_chan(&att->reqs, chan);
   3988a:	4621      	mov	r1, r4
   3988c:	1d38      	adds	r0, r7, #4
   3988e:	f7ff ff19 	bl	396c4 <get_first_req_matching_chan>
		if (!req) {
   39892:	4606      	mov	r6, r0
   39894:	b300      	cbz	r0, 398d8 <att_req_send_process+0x72>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   39896:	4601      	mov	r1, r0
   39898:	4620      	mov	r0, r4
   3989a:	f7e8 f9eb 	bl	21c74 <bt_att_chan_req_send>
   3989e:	2800      	cmp	r0, #0
   398a0:	da2e      	bge.n	39900 <att_req_send_process+0x9a>
	return list->head;
   398a2:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   398a4:	6033      	str	r3, [r6, #0]
	list->head = node;
   398a6:	607e      	str	r6, [r7, #4]
	return list->tail;
   398a8:	68bb      	ldr	r3, [r7, #8]
Z_GENLIST_PREPEND(slist, snode)
   398aa:	b193      	cbz	r3, 398d2 <att_req_send_process+0x6c>
		prev = chan;
   398ac:	46a0      	mov	r8, r4
   398ae:	e01f      	b.n	398f0 <att_req_send_process+0x8a>
		if (!req && prev &&
   398b0:	f1b8 0f00 	cmp.w	r8, #0
   398b4:	d0e9      	beq.n	3988a <att_req_send_process+0x24>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   398b6:	2103      	movs	r1, #3
   398b8:	f104 0098 	add.w	r0, r4, #152	; 0x98
   398bc:	f7ff ff4f 	bl	3975e <atomic_test_bit>
   398c0:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   398c2:	2103      	movs	r1, #3
   398c4:	f108 0098 	add.w	r0, r8, #152	; 0x98
   398c8:	f7ff ff49 	bl	3975e <atomic_test_bit>
		if (!req && prev &&
   398cc:	4581      	cmp	r9, r0
   398ce:	d1dc      	bne.n	3988a <att_req_send_process+0x24>
   398d0:	e00e      	b.n	398f0 <att_req_send_process+0x8a>
	list->tail = node;
   398d2:	60be      	str	r6, [r7, #8]
		prev = chan;
   398d4:	46a0      	mov	r8, r4
}
   398d6:	e00b      	b.n	398f0 <att_req_send_process+0x8a>
   398d8:	46a0      	mov	r8, r4
   398da:	e009      	b.n	398f0 <att_req_send_process+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   398dc:	4625      	mov	r5, r4
   398de:	e7cf      	b.n	39880 <att_req_send_process+0x1a>
   398e0:	462b      	mov	r3, r5
   398e2:	462c      	mov	r4, r5
   398e4:	461d      	mov	r5, r3
   398e6:	b15c      	cbz	r4, 39900 <att_req_send_process+0x9a>
		if (chan->req) {
   398e8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   398ec:	2b00      	cmp	r3, #0
   398ee:	d0cb      	beq.n	39888 <att_req_send_process+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   398f0:	2d00      	cmp	r5, #0
   398f2:	d0f5      	beq.n	398e0 <att_req_send_process+0x7a>
	return node->next;
   398f4:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   398f8:	2b00      	cmp	r3, #0
   398fa:	d0f2      	beq.n	398e2 <att_req_send_process+0x7c>
   398fc:	3bf0      	subs	r3, #240	; 0xf0
   398fe:	e7f0      	b.n	398e2 <att_req_send_process+0x7c>
}
   39900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00039904 <chan_req_sent>:
{
   39904:	b510      	push	{r4, lr}
   39906:	460c      	mov	r4, r1
	struct bt_att_chan *chan = data->att_chan;
   39908:	6808      	ldr	r0, [r1, #0]
	if (chan->req) {
   3990a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   3990e:	b12b      	cbz	r3, 3991c <chan_req_sent+0x18>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   39910:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   39914:	2300      	movs	r3, #0
   39916:	30c0      	adds	r0, #192	; 0xc0
   39918:	f7f9 f8a0 	bl	32a5c <k_work_reschedule>
	tx_meta_data_free(user_data);
   3991c:	4620      	mov	r0, r4
   3991e:	f7e8 f919 	bl	21b54 <tx_meta_data_free>
}
   39922:	bd10      	pop	{r4, pc}

00039924 <chan_cfm_sent>:
{
   39924:	b508      	push	{r3, lr}
   39926:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   39928:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   3992a:	3398      	adds	r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3992c:	e8d3 1fef 	ldaex	r1, [r3]
   39930:	f021 0102 	bic.w	r1, r1, #2
   39934:	e8c3 1fe2 	stlex	r2, r1, [r3]
   39938:	2a00      	cmp	r2, #0
   3993a:	d1f7      	bne.n	3992c <chan_cfm_sent+0x8>
	tx_meta_data_free(data);
   3993c:	f7e8 f90a 	bl	21b54 <tx_meta_data_free>
}
   39940:	bd08      	pop	{r3, pc}

00039942 <chan_rsp_sent>:
{
   39942:	b508      	push	{r3, lr}
   39944:	4608      	mov	r0, r1
	struct bt_att_chan *chan = data->att_chan;
   39946:	680b      	ldr	r3, [r1, #0]
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   39948:	3398      	adds	r3, #152	; 0x98
   3994a:	e8d3 1fef 	ldaex	r1, [r3]
   3994e:	f021 0101 	bic.w	r1, r1, #1
   39952:	e8c3 1fe2 	stlex	r2, r1, [r3]
   39956:	2a00      	cmp	r2, #0
   39958:	d1f7      	bne.n	3994a <chan_rsp_sent+0x8>
	tx_meta_data_free(data);
   3995a:	f7e8 f8fb 	bl	21b54 <tx_meta_data_free>
}
   3995e:	bd08      	pop	{r3, pc}

00039960 <get_first_buf_matching_chan>:
{
   39960:	b508      	push	{r3, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   39962:	2200      	movs	r2, #0
   39964:	2300      	movs	r3, #0
   39966:	f002 fa2b 	bl	3bdc0 <net_buf_get>
}
   3996a:	bd08      	pop	{r3, pc}

0003996c <process_queue>:
{
   3996c:	b570      	push	{r4, r5, r6, lr}
   3996e:	4604      	mov	r4, r0
   39970:	460d      	mov	r5, r1
	buf = get_first_buf_matching_chan(queue, chan);
   39972:	4601      	mov	r1, r0
   39974:	4628      	mov	r0, r5
   39976:	f7ff fff3 	bl	39960 <get_first_buf_matching_chan>
	if (buf) {
   3997a:	b168      	cbz	r0, 39998 <process_queue+0x2c>
   3997c:	4606      	mov	r6, r0
		err = bt_att_chan_send(chan, buf);
   3997e:	4601      	mov	r1, r0
   39980:	4620      	mov	r0, r4
   39982:	f7ff ff23 	bl	397cc <bt_att_chan_send>
		if (err) {
   39986:	4604      	mov	r4, r0
   39988:	b908      	cbnz	r0, 3998e <process_queue+0x22>
}
   3998a:	4620      	mov	r0, r4
   3998c:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   3998e:	4631      	mov	r1, r6
   39990:	4628      	mov	r0, r5
   39992:	f005 f82f 	bl	3e9f4 <k_queue_prepend>
			return err;
   39996:	e7f8      	b.n	3998a <process_queue+0x1e>
	return -ENOENT;
   39998:	f06f 0401 	mvn.w	r4, #1
   3999c:	e7f5      	b.n	3998a <process_queue+0x1e>

0003999e <bt_att_sent>:
{
   3999e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   399a0:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   399a2:	1f06      	subs	r6, r0, #4
	struct bt_att *att = chan->att;
   399a4:	f850 5c04 	ldr.w	r5, [r0, #-4]
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   399a8:	f100 0394 	add.w	r3, r0, #148	; 0x94
   399ac:	e8d3 1fef 	ldaex	r1, [r3]
   399b0:	f021 0110 	bic.w	r1, r1, #16
   399b4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   399b8:	2a00      	cmp	r2, #0
   399ba:	d1f7      	bne.n	399ac <bt_att_sent+0xe>
	if (!att) {
   399bc:	b145      	cbz	r5, 399d0 <bt_att_sent+0x32>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   399be:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   399c2:	b133      	cbz	r3, 399d2 <bt_att_sent+0x34>
	err = process_queue(chan, &chan->tx_queue);
   399c4:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   399c8:	4630      	mov	r0, r6
   399ca:	f7ff ffcf 	bl	3996c <process_queue>
	if (!err) {
   399ce:	b9c0      	cbnz	r0, 39a02 <bt_att_sent+0x64>
}
   399d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   399d2:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   399d4:	2f00      	cmp	r7, #0
   399d6:	d0f5      	beq.n	399c4 <bt_att_sent+0x26>
	return node->next;
   399d8:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   399da:	606b      	str	r3, [r5, #4]
	return list->tail;
   399dc:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   399de:	42ba      	cmp	r2, r7
   399e0:	d00d      	beq.n	399fe <bt_att_sent+0x60>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   399e2:	4639      	mov	r1, r7
   399e4:	4630      	mov	r0, r6
   399e6:	f7ff fef5 	bl	397d4 <chan_req_send>
   399ea:	2800      	cmp	r0, #0
   399ec:	daf0      	bge.n	399d0 <bt_att_sent+0x32>
	return list->head;
   399ee:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   399f0:	603b      	str	r3, [r7, #0]
	list->head = node;
   399f2:	606f      	str	r7, [r5, #4]
	return list->tail;
   399f4:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   399f6:	2b00      	cmp	r3, #0
   399f8:	d1e4      	bne.n	399c4 <bt_att_sent+0x26>
	list->tail = node;
   399fa:	60af      	str	r7, [r5, #8]
}
   399fc:	e7e2      	b.n	399c4 <bt_att_sent+0x26>
	list->tail = node;
   399fe:	60ab      	str	r3, [r5, #8]
}
   39a00:	e7ef      	b.n	399e2 <bt_att_sent+0x44>
	(void)process_queue(chan, &att->tx_queue);
   39a02:	f105 010c 	add.w	r1, r5, #12
   39a06:	4630      	mov	r0, r6
   39a08:	f7ff ffb0 	bl	3996c <process_queue>
   39a0c:	e7e0      	b.n	399d0 <bt_att_sent+0x32>

00039a0e <att_send_process>:
{
   39a0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39a12:	4680      	mov	r8, r0
	return list->head;
   39a14:	6a84      	ldr	r4, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39a16:	b374      	cbz	r4, 39a76 <att_send_process+0x68>
   39a18:	3cf0      	subs	r4, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   39a1a:	f114 05f0 	adds.w	r5, r4, #240	; 0xf0
   39a1e:	d003      	beq.n	39a28 <att_send_process+0x1a>
	return node->next;
   39a20:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   39a24:	b105      	cbz	r5, 39a28 <att_send_process+0x1a>
   39a26:	3df0      	subs	r5, #240	; 0xf0
   39a28:	2600      	movs	r6, #0
   39a2a:	4637      	mov	r7, r6
   39a2c:	e00e      	b.n	39a4c <att_send_process+0x3e>
		err = process_queue(chan, &att->tx_queue);
   39a2e:	f108 010c 	add.w	r1, r8, #12
   39a32:	4620      	mov	r0, r4
   39a34:	f7ff ff9a 	bl	3996c <process_queue>
		if (!err) {
   39a38:	4606      	mov	r6, r0
   39a3a:	b300      	cbz	r0, 39a7e <att_send_process+0x70>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39a3c:	b1ed      	cbz	r5, 39a7a <att_send_process+0x6c>
   39a3e:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   39a42:	b103      	cbz	r3, 39a46 <att_send_process+0x38>
   39a44:	3bf0      	subs	r3, #240	; 0xf0
   39a46:	4627      	mov	r7, r4
   39a48:	462c      	mov	r4, r5
   39a4a:	461d      	mov	r5, r3
   39a4c:	b1bc      	cbz	r4, 39a7e <att_send_process+0x70>
		if (err == -ENOENT && prev &&
   39a4e:	f116 0f02 	cmn.w	r6, #2
   39a52:	d1ec      	bne.n	39a2e <att_send_process+0x20>
   39a54:	2f00      	cmp	r7, #0
   39a56:	d0ea      	beq.n	39a2e <att_send_process+0x20>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   39a58:	2103      	movs	r1, #3
   39a5a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   39a5e:	f7ff fe7e 	bl	3975e <atomic_test_bit>
   39a62:	4681      	mov	r9, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   39a64:	2103      	movs	r1, #3
   39a66:	f107 0098 	add.w	r0, r7, #152	; 0x98
   39a6a:	f7ff fe78 	bl	3975e <atomic_test_bit>
		if (err == -ENOENT && prev &&
   39a6e:	4581      	cmp	r9, r0
   39a70:	d1dd      	bne.n	39a2e <att_send_process+0x20>
   39a72:	463c      	mov	r4, r7
   39a74:	e7e2      	b.n	39a3c <att_send_process+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39a76:	4625      	mov	r5, r4
   39a78:	e7d6      	b.n	39a28 <att_send_process+0x1a>
   39a7a:	462b      	mov	r3, r5
   39a7c:	e7e3      	b.n	39a46 <att_send_process+0x38>
}
   39a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00039a82 <att_notify_mult>:
{
   39a82:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   39a84:	6803      	ldr	r3, [r0, #0]
   39a86:	8a0a      	ldrh	r2, [r1, #16]
   39a88:	68c9      	ldr	r1, [r1, #12]
   39a8a:	6818      	ldr	r0, [r3, #0]
   39a8c:	f7eb ff4e 	bl	2592c <bt_gatt_mult_notification>
}
   39a90:	2000      	movs	r0, #0
   39a92:	bd08      	pop	{r3, pc}

00039a94 <att_notify>:
{
   39a94:	b538      	push	{r3, r4, r5, lr}
   39a96:	4605      	mov	r5, r0
   39a98:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   39a9a:	f101 000c 	add.w	r0, r1, #12
   39a9e:	f002 f999 	bl	3bdd4 <net_buf_simple_pull_le16>
   39aa2:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   39aa4:	682d      	ldr	r5, [r5, #0]
   39aa6:	8a23      	ldrh	r3, [r4, #16]
   39aa8:	68e2      	ldr	r2, [r4, #12]
   39aaa:	6828      	ldr	r0, [r5, #0]
   39aac:	f001 f9ea 	bl	3ae84 <bt_gatt_notification>
}
   39ab0:	2000      	movs	r0, #0
   39ab2:	bd38      	pop	{r3, r4, r5, pc}

00039ab4 <bt_att_chan_send_rsp>:
{
   39ab4:	b538      	push	{r3, r4, r5, lr}
   39ab6:	4604      	mov	r4, r0
   39ab8:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   39aba:	f7e8 f86b 	bl	21b94 <chan_send>
	if (err) {
   39abe:	b900      	cbnz	r0, 39ac2 <bt_att_chan_send_rsp+0xe>
}
   39ac0:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   39ac2:	4629      	mov	r1, r5
   39ac4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   39ac8:	f7ef fdc4 	bl	29654 <net_buf_put>
}
   39acc:	e7f8      	b.n	39ac0 <bt_att_chan_send_rsp+0xc>

00039ace <att_chan_mtu_updated>:
{
   39ace:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   39ad0:	6806      	ldr	r6, [r0, #0]
	return list->head;
   39ad2:	6ab3      	ldr	r3, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39ad4:	b153      	cbz	r3, 39aec <att_chan_mtu_updated+0x1e>
   39ad6:	3bf0      	subs	r3, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   39ad8:	f113 04f0 	adds.w	r4, r3, #240	; 0xf0
   39adc:	d003      	beq.n	39ae6 <att_chan_mtu_updated+0x18>
	return node->next;
   39ade:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
   39ae2:	b104      	cbz	r4, 39ae6 <att_chan_mtu_updated+0x18>
   39ae4:	3cf0      	subs	r4, #240	; 0xf0
   39ae6:	2200      	movs	r2, #0
   39ae8:	4611      	mov	r1, r2
   39aea:	e004      	b.n	39af6 <att_chan_mtu_updated+0x28>
   39aec:	461c      	mov	r4, r3
   39aee:	e7fa      	b.n	39ae6 <att_chan_mtu_updated+0x18>
   39af0:	4625      	mov	r5, r4
   39af2:	4623      	mov	r3, r4
   39af4:	462c      	mov	r4, r5
   39af6:	b18b      	cbz	r3, 39b1c <att_chan_mtu_updated+0x4e>
		if (chan == updated_chan) {
   39af8:	4283      	cmp	r3, r0
   39afa:	d007      	beq.n	39b0c <att_chan_mtu_updated+0x3e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   39afc:	8d5d      	ldrh	r5, [r3, #42]	; 0x2a
   39afe:	42a9      	cmp	r1, r5
   39b00:	bf38      	it	cc
   39b02:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   39b04:	8b5b      	ldrh	r3, [r3, #26]
   39b06:	429a      	cmp	r2, r3
   39b08:	bf38      	it	cc
   39b0a:	461a      	movcc	r2, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   39b0c:	2c00      	cmp	r4, #0
   39b0e:	d0ef      	beq.n	39af0 <att_chan_mtu_updated+0x22>
   39b10:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
   39b14:	2d00      	cmp	r5, #0
   39b16:	d0ec      	beq.n	39af2 <att_chan_mtu_updated+0x24>
   39b18:	3df0      	subs	r5, #240	; 0xf0
   39b1a:	e7ea      	b.n	39af2 <att_chan_mtu_updated+0x24>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   39b1c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   39b1e:	428b      	cmp	r3, r1
   39b20:	d802      	bhi.n	39b28 <att_chan_mtu_updated+0x5a>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   39b22:	8b44      	ldrh	r4, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   39b24:	4294      	cmp	r4, r2
   39b26:	d909      	bls.n	39b3c <att_chan_mtu_updated+0x6e>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   39b28:	8b40      	ldrh	r0, [r0, #26]
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   39b2a:	4282      	cmp	r2, r0
   39b2c:	bf38      	it	cc
   39b2e:	4602      	movcc	r2, r0
   39b30:	4299      	cmp	r1, r3
   39b32:	bf38      	it	cc
   39b34:	4619      	movcc	r1, r3
   39b36:	6830      	ldr	r0, [r6, #0]
   39b38:	f7ec f82a 	bl	25b90 <bt_gatt_att_max_mtu_changed>
}
   39b3c:	bd70      	pop	{r4, r5, r6, pc}

00039b3e <att_change_security>:
{
   39b3e:	b508      	push	{r3, lr}
	switch (err) {
   39b40:	2905      	cmp	r1, #5
   39b42:	d008      	beq.n	39b56 <att_change_security+0x18>
   39b44:	290f      	cmp	r1, #15
   39b46:	d113      	bne.n	39b70 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_L2)
   39b48:	7a43      	ldrb	r3, [r0, #9]
   39b4a:	2b01      	cmp	r3, #1
   39b4c:	d813      	bhi.n	39b76 <att_change_security+0x38>
		sec = BT_SECURITY_L2;
   39b4e:	2102      	movs	r1, #2
	return bt_conn_set_security(conn, sec);
   39b50:	f7ff fbdf 	bl	39312 <bt_conn_set_security>
}
   39b54:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_L2) {
   39b56:	7a43      	ldrb	r3, [r0, #9]
   39b58:	2b01      	cmp	r3, #1
   39b5a:	d905      	bls.n	39b68 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_L3) {
   39b5c:	2b02      	cmp	r3, #2
   39b5e:	d905      	bls.n	39b6c <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_L4) {
   39b60:	2b03      	cmp	r3, #3
   39b62:	d80b      	bhi.n	39b7c <att_change_security+0x3e>
			sec = BT_SECURITY_L4;
   39b64:	2104      	movs	r1, #4
   39b66:	e7f3      	b.n	39b50 <att_change_security+0x12>
			sec = BT_SECURITY_L2;
   39b68:	2102      	movs	r1, #2
   39b6a:	e7f1      	b.n	39b50 <att_change_security+0x12>
			sec = BT_SECURITY_L3;
   39b6c:	2103      	movs	r1, #3
   39b6e:	e7ef      	b.n	39b50 <att_change_security+0x12>
	switch (err) {
   39b70:	f06f 0015 	mvn.w	r0, #21
   39b74:	e7ee      	b.n	39b54 <att_change_security+0x16>
			return -EALREADY;
   39b76:	f06f 0077 	mvn.w	r0, #119	; 0x77
   39b7a:	e7eb      	b.n	39b54 <att_change_security+0x16>
			return -EALREADY;
   39b7c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   39b80:	e7e8      	b.n	39b54 <att_change_security+0x16>

00039b82 <write_cb>:
{
   39b82:	b5f0      	push	{r4, r5, r6, r7, lr}
   39b84:	b083      	sub	sp, #12
   39b86:	4606      	mov	r6, r0
   39b88:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   39b8a:	f44f 7295 	mov.w	r2, #298	; 0x12a
   39b8e:	4601      	mov	r1, r0
   39b90:	6820      	ldr	r0, [r4, #0]
   39b92:	f001 f918 	bl	3adc6 <bt_gatt_check_perm>
   39b96:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   39b98:	bb08      	cbnz	r0, 39bde <write_cb+0x5c>
   39b9a:	4605      	mov	r5, r0
	if (!data->req) {
   39b9c:	7a23      	ldrb	r3, [r4, #8]
   39b9e:	b11b      	cbz	r3, 39ba8 <write_cb+0x26>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   39ba0:	2b18      	cmp	r3, #24
   39ba2:	d016      	beq.n	39bd2 <write_cb+0x50>
	uint8_t flags = 0U;
   39ba4:	4603      	mov	r3, r0
   39ba6:	e000      	b.n	39baa <write_cb+0x28>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   39ba8:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   39baa:	68b7      	ldr	r7, [r6, #8]
   39bac:	9301      	str	r3, [sp, #4]
   39bae:	8a63      	ldrh	r3, [r4, #18]
   39bb0:	9300      	str	r3, [sp, #0]
   39bb2:	8a23      	ldrh	r3, [r4, #16]
   39bb4:	68e2      	ldr	r2, [r4, #12]
   39bb6:	4631      	mov	r1, r6
   39bb8:	6820      	ldr	r0, [r4, #0]
   39bba:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   39bbc:	2800      	cmp	r0, #0
   39bbe:	db02      	blt.n	39bc6 <write_cb+0x44>
   39bc0:	8a23      	ldrh	r3, [r4, #16]
   39bc2:	4298      	cmp	r0, r3
   39bc4:	d007      	beq.n	39bd6 <write_cb+0x54>
		data->err = err_to_att(write);
   39bc6:	f7ff fd97 	bl	396f8 <err_to_att>
   39bca:	7520      	strb	r0, [r4, #20]
}
   39bcc:	4628      	mov	r0, r5
   39bce:	b003      	add	sp, #12
   39bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   39bd2:	2304      	movs	r3, #4
   39bd4:	e7e9      	b.n	39baa <write_cb+0x28>
	data->err = 0U;
   39bd6:	2300      	movs	r3, #0
   39bd8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   39bda:	2501      	movs	r5, #1
   39bdc:	e7f6      	b.n	39bcc <write_cb+0x4a>
		return BT_GATT_ITER_STOP;
   39bde:	2500      	movs	r5, #0
   39be0:	e7f4      	b.n	39bcc <write_cb+0x4a>

00039be2 <att_chan_read>:
{
   39be2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39be6:	b085      	sub	sp, #20
   39be8:	4680      	mov	r8, r0
   39bea:	4689      	mov	r9, r1
   39bec:	9202      	str	r2, [sp, #8]
   39bee:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   39bf0:	6843      	ldr	r3, [r0, #4]
   39bf2:	9303      	str	r3, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   39bf4:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
	while (buf) {
   39bf6:	4613      	mov	r3, r2
	size_t bytes = 0;
   39bf8:	2200      	movs	r2, #0
	while (buf) {
   39bfa:	e002      	b.n	39c02 <att_chan_read+0x20>
		bytes += buf->len;
   39bfc:	8a19      	ldrh	r1, [r3, #16]
   39bfe:	440a      	add	r2, r1
		buf = buf->frags;
   39c00:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   39c02:	2b00      	cmp	r3, #0
   39c04:	d1fa      	bne.n	39bfc <att_chan_read+0x1a>
   39c06:	4290      	cmp	r0, r2
   39c08:	d804      	bhi.n	39c14 <att_chan_read+0x32>
		return 0;
   39c0a:	2400      	movs	r4, #0
}
   39c0c:	4620      	mov	r0, r4
   39c0e:	b005      	add	sp, #20
   39c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   39c14:	9802      	ldr	r0, [sp, #8]
   39c16:	f7ef fd95 	bl	29744 <net_buf_frag_last>
   39c1a:	4607      	mov	r7, r0
	size_t len, total = 0;
   39c1c:	f04f 0a00 	mov.w	sl, #0
   39c20:	e082      	b.n	39d28 <att_chan_read+0x146>
		bytes += buf->len;
   39c22:	8a19      	ldrh	r1, [r3, #16]
   39c24:	440a      	add	r2, r1
		buf = buf->frags;
   39c26:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   39c28:	2b00      	cmp	r3, #0
   39c2a:	d1fa      	bne.n	39c22 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39c2c:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   39c2e:	f107 060c 	add.w	r6, r7, #12
   39c32:	4630      	mov	r0, r6
   39c34:	f002 f8e1 	bl	3bdfa <net_buf_simple_tailroom>
   39c38:	4284      	cmp	r4, r0
   39c3a:	d326      	bcc.n	39c8a <att_chan_read+0xa8>
   39c3c:	4630      	mov	r0, r6
   39c3e:	f002 f8dc 	bl	3bdfa <net_buf_simple_tailroom>
   39c42:	4606      	mov	r6, r0
		if (!len) {
   39c44:	b36e      	cbz	r6, 39ca2 <att_chan_read+0xc0>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   39c46:	f8d9 4004 	ldr.w	r4, [r9, #4]
   39c4a:	68f9      	ldr	r1, [r7, #12]
   39c4c:	8a3a      	ldrh	r2, [r7, #16]
   39c4e:	9500      	str	r5, [sp, #0]
   39c50:	b2b3      	uxth	r3, r6
   39c52:	440a      	add	r2, r1
   39c54:	4649      	mov	r1, r9
   39c56:	9803      	ldr	r0, [sp, #12]
   39c58:	47a0      	blx	r4
		if (read < 0) {
   39c5a:	1e04      	subs	r4, r0, #0
   39c5c:	db55      	blt.n	39d0a <att_chan_read+0x128>
		if (cb && !cb(frag, read, user_data)) {
   39c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   39c60:	b12b      	cbz	r3, 39c6e <att_chan_read+0x8c>
   39c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   39c64:	4621      	mov	r1, r4
   39c66:	4638      	mov	r0, r7
   39c68:	4798      	blx	r3
   39c6a:	2800      	cmp	r0, #0
   39c6c:	d061      	beq.n	39d32 <att_chan_read+0x150>
		net_buf_add(frag, read);
   39c6e:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   39c70:	4621      	mov	r1, r4
   39c72:	f107 000c 	add.w	r0, r7, #12
   39c76:	f7ef fe33 	bl	298e0 <net_buf_simple_add>
		total += read;
   39c7a:	44a2      	add	sl, r4
		offset += read;
   39c7c:	442c      	add	r4, r5
   39c7e:	b2a5      	uxth	r5, r4
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39c80:	f8b8 002a 	ldrh.w	r0, [r8, #42]	; 0x2a
   39c84:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   39c86:	2200      	movs	r2, #0
   39c88:	e048      	b.n	39d1c <att_chan_read+0x13a>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39c8a:	f8b8 602a 	ldrh.w	r6, [r8, #42]	; 0x2a
	while (buf) {
   39c8e:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   39c90:	2200      	movs	r2, #0
	while (buf) {
   39c92:	e002      	b.n	39c9a <att_chan_read+0xb8>
		bytes += buf->len;
   39c94:	8a19      	ldrh	r1, [r3, #16]
   39c96:	440a      	add	r2, r1
		buf = buf->frags;
   39c98:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   39c9a:	2b00      	cmp	r3, #0
   39c9c:	d1fa      	bne.n	39c94 <att_chan_read+0xb2>
   39c9e:	1ab6      	subs	r6, r6, r2
   39ca0:	e7d0      	b.n	39c44 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   39ca2:	9b02      	ldr	r3, [sp, #8]
   39ca4:	7a98      	ldrb	r0, [r3, #10]
   39ca6:	f7ef faa1 	bl	291ec <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   39caa:	2200      	movs	r2, #0
   39cac:	2300      	movs	r3, #0
   39cae:	f002 f880 	bl	3bdb2 <net_buf_alloc_fixed>
			if (!frag) {
   39cb2:	4607      	mov	r7, r0
   39cb4:	b150      	cbz	r0, 39ccc <att_chan_read+0xea>
			net_buf_frag_add(buf, frag);
   39cb6:	4601      	mov	r1, r0
   39cb8:	f8dd b008 	ldr.w	fp, [sp, #8]
   39cbc:	4658      	mov	r0, fp
   39cbe:	f7ef fd8d 	bl	297dc <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39cc2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	size_t bytes = 0;
   39cc6:	4632      	mov	r2, r6
	while (buf) {
   39cc8:	465b      	mov	r3, fp
   39cca:	e004      	b.n	39cd6 <att_chan_read+0xf4>
				return total;
   39ccc:	4654      	mov	r4, sl
   39cce:	e79d      	b.n	39c0c <att_chan_read+0x2a>
		bytes += buf->len;
   39cd0:	8a19      	ldrh	r1, [r3, #16]
   39cd2:	440a      	add	r2, r1
		buf = buf->frags;
   39cd4:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   39cd6:	2b00      	cmp	r3, #0
   39cd8:	d1fa      	bne.n	39cd0 <att_chan_read+0xee>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39cda:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   39cdc:	f107 0b0c 	add.w	fp, r7, #12
   39ce0:	4658      	mov	r0, fp
   39ce2:	f002 f88a 	bl	3bdfa <net_buf_simple_tailroom>
   39ce6:	4284      	cmp	r4, r0
   39ce8:	d304      	bcc.n	39cf4 <att_chan_read+0x112>
   39cea:	4658      	mov	r0, fp
   39cec:	f002 f885 	bl	3bdfa <net_buf_simple_tailroom>
   39cf0:	4606      	mov	r6, r0
   39cf2:	e7a8      	b.n	39c46 <att_chan_read+0x64>
   39cf4:	f8b8 102a 	ldrh.w	r1, [r8, #42]	; 0x2a
	while (buf) {
   39cf8:	9b02      	ldr	r3, [sp, #8]
   39cfa:	e002      	b.n	39d02 <att_chan_read+0x120>
		bytes += buf->len;
   39cfc:	8a1a      	ldrh	r2, [r3, #16]
   39cfe:	4416      	add	r6, r2
		buf = buf->frags;
   39d00:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   39d02:	2b00      	cmp	r3, #0
   39d04:	d1fa      	bne.n	39cfc <att_chan_read+0x11a>
   39d06:	1b8e      	subs	r6, r1, r6
   39d08:	e79d      	b.n	39c46 <att_chan_read+0x64>
			if (total) {
   39d0a:	f1ba 0f00 	cmp.w	sl, #0
   39d0e:	f43f af7d 	beq.w	39c0c <att_chan_read+0x2a>
				return total;
   39d12:	4654      	mov	r4, sl
   39d14:	e77a      	b.n	39c0c <att_chan_read+0x2a>
		bytes += buf->len;
   39d16:	8a19      	ldrh	r1, [r3, #16]
   39d18:	440a      	add	r2, r1
		buf = buf->frags;
   39d1a:	685b      	ldr	r3, [r3, #4]
	while (buf) {
   39d1c:	2b00      	cmp	r3, #0
   39d1e:	d1fa      	bne.n	39d16 <att_chan_read+0x134>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   39d20:	4290      	cmp	r0, r2
   39d22:	d906      	bls.n	39d32 <att_chan_read+0x150>
   39d24:	45b3      	cmp	fp, r6
   39d26:	d104      	bne.n	39d32 <att_chan_read+0x150>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   39d28:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   39d2c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   39d2e:	2200      	movs	r2, #0
	while (buf) {
   39d30:	e77a      	b.n	39c28 <att_chan_read+0x46>
	return total;
   39d32:	4654      	mov	r4, sl
   39d34:	e76a      	b.n	39c0c <att_chan_read+0x2a>

00039d36 <read_vl_cb>:
{
   39d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39d3a:	b082      	sub	sp, #8
   39d3c:	4606      	mov	r6, r0
   39d3e:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   39d40:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   39d42:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   39d44:	2300      	movs	r3, #0
   39d46:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   39d48:	2295      	movs	r2, #149	; 0x95
   39d4a:	4631      	mov	r1, r6
   39d4c:	f001 f83b 	bl	3adc6 <bt_gatt_check_perm>
   39d50:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   39d52:	b9f0      	cbnz	r0, 39d92 <read_vl_cb+0x5c>
   39d54:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   39d56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   39d58:	68a0      	ldr	r0, [r4, #8]
   39d5a:	8a02      	ldrh	r2, [r0, #16]
   39d5c:	1a9b      	subs	r3, r3, r2
   39d5e:	2b01      	cmp	r3, #1
   39d60:	dd18      	ble.n	39d94 <read_vl_cb+0x5e>
	return net_buf_simple_add(&buf->b, len);
   39d62:	2102      	movs	r1, #2
   39d64:	300c      	adds	r0, #12
   39d66:	f7ef fdbb 	bl	298e0 <net_buf_simple_add>
   39d6a:	4680      	mov	r8, r0
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   39d6c:	2300      	movs	r3, #0
   39d6e:	9301      	str	r3, [sp, #4]
   39d70:	9300      	str	r3, [sp, #0]
   39d72:	88a3      	ldrh	r3, [r4, #4]
   39d74:	68a2      	ldr	r2, [r4, #8]
   39d76:	4631      	mov	r1, r6
   39d78:	4638      	mov	r0, r7
   39d7a:	f7ff ff32 	bl	39be2 <att_chan_read>
	if (read < 0) {
   39d7e:	2800      	cmp	r0, #0
   39d80:	db03      	blt.n	39d8a <read_vl_cb+0x54>
	rsp->len = read;
   39d82:	f8a8 0000 	strh.w	r0, [r8]
	return BT_GATT_ITER_CONTINUE;
   39d86:	2501      	movs	r5, #1
   39d88:	e004      	b.n	39d94 <read_vl_cb+0x5e>
		data->err = err_to_att(read);
   39d8a:	f7ff fcb5 	bl	396f8 <err_to_att>
   39d8e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   39d90:	e000      	b.n	39d94 <read_vl_cb+0x5e>
		return BT_GATT_ITER_STOP;
   39d92:	2500      	movs	r5, #0
}
   39d94:	4628      	mov	r0, r5
   39d96:	b002      	add	sp, #8
   39d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039d9c <read_cb>:
{
   39d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   39d9e:	b083      	sub	sp, #12
   39da0:	4606      	mov	r6, r0
   39da2:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   39da4:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   39da6:	6878      	ldr	r0, [r7, #4]
	data->err = 0x00;
   39da8:	2300      	movs	r3, #0
   39daa:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   39dac:	2295      	movs	r2, #149	; 0x95
   39dae:	4631      	mov	r1, r6
   39db0:	f001 f809 	bl	3adc6 <bt_gatt_check_perm>
   39db4:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   39db6:	b118      	cbz	r0, 39dc0 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   39db8:	2500      	movs	r5, #0
}
   39dba:	4628      	mov	r0, r5
   39dbc:	b003      	add	sp, #12
   39dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   39dc0:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   39dc2:	2300      	movs	r3, #0
   39dc4:	9301      	str	r3, [sp, #4]
   39dc6:	9300      	str	r3, [sp, #0]
   39dc8:	88a3      	ldrh	r3, [r4, #4]
   39dca:	68a2      	ldr	r2, [r4, #8]
   39dcc:	4631      	mov	r1, r6
   39dce:	4638      	mov	r0, r7
   39dd0:	f7ff ff07 	bl	39be2 <att_chan_read>
	if (ret < 0) {
   39dd4:	2800      	cmp	r0, #0
   39dd6:	db01      	blt.n	39ddc <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   39dd8:	2501      	movs	r5, #1
   39dda:	e7ee      	b.n	39dba <read_cb+0x1e>
		data->err = err_to_att(ret);
   39ddc:	f7ff fc8c 	bl	396f8 <err_to_att>
   39de0:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   39de2:	e7ea      	b.n	39dba <read_cb+0x1e>

00039de4 <find_info_cb>:
{
   39de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39de8:	4606      	mov	r6, r0
   39dea:	460f      	mov	r7, r1
   39dec:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   39dee:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   39df2:	6893      	ldr	r3, [r2, #8]
   39df4:	b14b      	cbz	r3, 39e0a <find_info_cb+0x26>
	switch (data->rsp->format) {
   39df6:	68a3      	ldr	r3, [r4, #8]
   39df8:	781d      	ldrb	r5, [r3, #0]
   39dfa:	2d01      	cmp	r5, #1
   39dfc:	d013      	beq.n	39e26 <find_info_cb+0x42>
   39dfe:	2d02      	cmp	r5, #2
   39e00:	d02d      	beq.n	39e5e <find_info_cb+0x7a>
   39e02:	2500      	movs	r5, #0
}
   39e04:	4628      	mov	r0, r5
   39e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   39e0a:	6850      	ldr	r0, [r2, #4]
   39e0c:	2101      	movs	r1, #1
   39e0e:	300c      	adds	r0, #12
   39e10:	f7ef fd66 	bl	298e0 <net_buf_simple_add>
   39e14:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   39e16:	6833      	ldr	r3, [r6, #0]
   39e18:	781b      	ldrb	r3, [r3, #0]
   39e1a:	b913      	cbnz	r3, 39e22 <find_info_cb+0x3e>
   39e1c:	2301      	movs	r3, #1
   39e1e:	7003      	strb	r3, [r0, #0]
   39e20:	e7e9      	b.n	39df6 <find_info_cb+0x12>
   39e22:	2302      	movs	r3, #2
   39e24:	e7fb      	b.n	39e1e <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   39e26:	6833      	ldr	r3, [r6, #0]
   39e28:	f893 9000 	ldrb.w	r9, [r3]
   39e2c:	f1b9 0f00 	cmp.w	r9, #0
   39e30:	d001      	beq.n	39e36 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   39e32:	2500      	movs	r5, #0
   39e34:	e7e6      	b.n	39e04 <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   39e36:	6860      	ldr	r0, [r4, #4]
   39e38:	2104      	movs	r1, #4
   39e3a:	300c      	adds	r0, #12
   39e3c:	f7ef fd50 	bl	298e0 <net_buf_simple_add>
   39e40:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   39e42:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   39e44:	6832      	ldr	r2, [r6, #0]
   39e46:	68e3      	ldr	r3, [r4, #12]
   39e48:	8852      	ldrh	r2, [r2, #2]
   39e4a:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   39e4c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   39e50:	6862      	ldr	r2, [r4, #4]
   39e52:	8a12      	ldrh	r2, [r2, #16]
   39e54:	1a9b      	subs	r3, r3, r2
   39e56:	2b04      	cmp	r3, #4
   39e58:	d8d4      	bhi.n	39e04 <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   39e5a:	464d      	mov	r5, r9
   39e5c:	e7d2      	b.n	39e04 <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   39e5e:	6833      	ldr	r3, [r6, #0]
   39e60:	781b      	ldrb	r3, [r3, #0]
   39e62:	2b02      	cmp	r3, #2
   39e64:	d001      	beq.n	39e6a <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   39e66:	2500      	movs	r5, #0
   39e68:	e7cc      	b.n	39e04 <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   39e6a:	6860      	ldr	r0, [r4, #4]
   39e6c:	2112      	movs	r1, #18
   39e6e:	300c      	adds	r0, #12
   39e70:	f7ef fd36 	bl	298e0 <net_buf_simple_add>
   39e74:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   39e76:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   39e78:	68e0      	ldr	r0, [r4, #12]
   39e7a:	6831      	ldr	r1, [r6, #0]
   39e7c:	2210      	movs	r2, #16
   39e7e:	3101      	adds	r1, #1
   39e80:	3002      	adds	r0, #2
   39e82:	f7fe faba 	bl	383fa <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   39e86:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   39e8a:	6862      	ldr	r2, [r4, #4]
   39e8c:	8a12      	ldrh	r2, [r2, #16]
   39e8e:	1a9b      	subs	r3, r3, r2
   39e90:	2b12      	cmp	r3, #18
   39e92:	d801      	bhi.n	39e98 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   39e94:	2500      	movs	r5, #0
   39e96:	e7b5      	b.n	39e04 <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   39e98:	2501      	movs	r5, #1
   39e9a:	e7b3      	b.n	39e04 <find_info_cb+0x20>

00039e9c <atomic_test_and_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   39e9c:	f001 021f 	and.w	r2, r1, #31
   39ea0:	2301      	movs	r3, #1
   39ea2:	4093      	lsls	r3, r2
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   39ea4:	0949      	lsrs	r1, r1, #5
   39ea6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   39eaa:	e8d0 2fef 	ldaex	r2, [r0]
   39eae:	ea42 0103 	orr.w	r1, r2, r3
   39eb2:	e8c0 1fec 	stlex	ip, r1, [r0]
   39eb6:	f1bc 0f00 	cmp.w	ip, #0
   39eba:	d1f6      	bne.n	39eaa <atomic_test_and_set_bit+0xe>
	return (old & mask) != 0;
   39ebc:	4213      	tst	r3, r2
}
   39ebe:	bf14      	ite	ne
   39ec0:	2001      	movne	r0, #1
   39ec2:	2000      	moveq	r0, #0
   39ec4:	4770      	bx	lr

00039ec6 <att_sent>:
{
   39ec6:	b508      	push	{r3, lr}
	struct bt_att_chan *att_chan = data->att_chan;
   39ec8:	680b      	ldr	r3, [r1, #0]
	struct bt_l2cap_chan *chan = &att_chan->chan.chan;
   39eca:	1d18      	adds	r0, r3, #4
	if (chan->ops->sent) {
   39ecc:	689b      	ldr	r3, [r3, #8]
   39ece:	699b      	ldr	r3, [r3, #24]
   39ed0:	b103      	cbz	r3, 39ed4 <att_sent+0xe>
		chan->ops->sent(chan);
   39ed2:	4798      	blx	r3
}
   39ed4:	bd08      	pop	{r3, pc}

00039ed6 <att_tx_complete>:
{
   39ed6:	b570      	push	{r4, r5, r6, lr}
   39ed8:	4604      	mov	r4, r0
   39eda:	460d      	mov	r5, r1
	if (!err) {
   39edc:	4616      	mov	r6, r2
   39ede:	b12a      	cbz	r2, 39eec <att_tx_complete+0x16>
	chan_tx_complete(conn, user_data, err);
   39ee0:	4632      	mov	r2, r6
   39ee2:	4629      	mov	r1, r5
   39ee4:	4620      	mov	r0, r4
   39ee6:	f7ff fc59 	bl	3979c <chan_tx_complete>
}
   39eea:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   39eec:	f7ff ffeb 	bl	39ec6 <att_sent>
   39ef0:	e7f6      	b.n	39ee0 <att_tx_complete+0xa>

00039ef2 <att_req_sent>:
{
   39ef2:	b570      	push	{r4, r5, r6, lr}
   39ef4:	4604      	mov	r4, r0
   39ef6:	460d      	mov	r5, r1
	if (!err) {
   39ef8:	4616      	mov	r6, r2
   39efa:	b12a      	cbz	r2, 39f08 <att_req_sent+0x16>
	chan_req_sent(conn, user_data, err);
   39efc:	4632      	mov	r2, r6
   39efe:	4629      	mov	r1, r5
   39f00:	4620      	mov	r0, r4
   39f02:	f7ff fcff 	bl	39904 <chan_req_sent>
}
   39f06:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   39f08:	f7ff ffdd 	bl	39ec6 <att_sent>
   39f0c:	e7f6      	b.n	39efc <att_req_sent+0xa>

00039f0e <att_cfm_sent>:
{
   39f0e:	b570      	push	{r4, r5, r6, lr}
   39f10:	4604      	mov	r4, r0
   39f12:	460d      	mov	r5, r1
	if (!err) {
   39f14:	4616      	mov	r6, r2
   39f16:	b12a      	cbz	r2, 39f24 <att_cfm_sent+0x16>
	chan_cfm_sent(conn, user_data, err);
   39f18:	4632      	mov	r2, r6
   39f1a:	4629      	mov	r1, r5
   39f1c:	4620      	mov	r0, r4
   39f1e:	f7ff fd01 	bl	39924 <chan_cfm_sent>
}
   39f22:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   39f24:	f7ff ffcf 	bl	39ec6 <att_sent>
   39f28:	e7f6      	b.n	39f18 <att_cfm_sent+0xa>

00039f2a <att_rsp_sent>:
{
   39f2a:	b570      	push	{r4, r5, r6, lr}
   39f2c:	4604      	mov	r4, r0
   39f2e:	460d      	mov	r5, r1
	if (!err) {
   39f30:	4616      	mov	r6, r2
   39f32:	b12a      	cbz	r2, 39f40 <att_rsp_sent+0x16>
	chan_rsp_sent(conn, user_data, err);
   39f34:	4632      	mov	r2, r6
   39f36:	4629      	mov	r1, r5
   39f38:	4620      	mov	r0, r4
   39f3a:	f7ff fd02 	bl	39942 <chan_rsp_sent>
}
   39f3e:	bd70      	pop	{r4, r5, r6, pc}
		att_sent(conn, user_data);
   39f40:	f7ff ffc1 	bl	39ec6 <att_sent>
   39f44:	e7f6      	b.n	39f34 <att_rsp_sent+0xa>

00039f46 <att_indicate>:
{
   39f46:	b538      	push	{r3, r4, r5, lr}
   39f48:	4605      	mov	r5, r0
   39f4a:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   39f4c:	f101 000c 	add.w	r0, r1, #12
   39f50:	f001 ff40 	bl	3bdd4 <net_buf_simple_pull_le16>
   39f54:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   39f56:	8a23      	ldrh	r3, [r4, #16]
   39f58:	68e2      	ldr	r2, [r4, #12]
   39f5a:	6828      	ldr	r0, [r5, #0]
   39f5c:	6800      	ldr	r0, [r0, #0]
   39f5e:	f000 ff91 	bl	3ae84 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   39f62:	2200      	movs	r2, #0
   39f64:	211e      	movs	r1, #30
   39f66:	4628      	mov	r0, r5
   39f68:	f7e8 f8dc 	bl	22124 <bt_att_chan_create_pdu>
	if (!buf) {
   39f6c:	b118      	cbz	r0, 39f76 <att_indicate+0x30>
   39f6e:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf);
   39f70:	4628      	mov	r0, r5
   39f72:	f7ff fd9f 	bl	39ab4 <bt_att_chan_send_rsp>
}
   39f76:	2000      	movs	r0, #0
   39f78:	bd38      	pop	{r3, r4, r5, pc}

00039f7a <send_err_rsp>:
	if (!req) {
   39f7a:	b901      	cbnz	r1, 39f7e <send_err_rsp+0x4>
   39f7c:	4770      	bx	lr
{
   39f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   39f82:	4606      	mov	r6, r0
   39f84:	4615      	mov	r5, r2
   39f86:	461c      	mov	r4, r3
   39f88:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   39f8a:	2204      	movs	r2, #4
   39f8c:	2101      	movs	r1, #1
   39f8e:	f7e8 f8c9 	bl	22124 <bt_att_chan_create_pdu>
	if (!buf) {
   39f92:	4680      	mov	r8, r0
   39f94:	b158      	cbz	r0, 39fae <send_err_rsp+0x34>
	return net_buf_simple_add(&buf->b, len);
   39f96:	2104      	movs	r1, #4
   39f98:	300c      	adds	r0, #12
   39f9a:	f7ef fca1 	bl	298e0 <net_buf_simple_add>
	rsp->request = req;
   39f9e:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   39fa0:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   39fa4:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   39fa6:	4641      	mov	r1, r8
   39fa8:	4630      	mov	r0, r6
   39faa:	f7ff fd83 	bl	39ab4 <bt_att_chan_send_rsp>
}
   39fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00039fb2 <att_write_cmd>:
{
   39fb2:	b530      	push	{r4, r5, lr}
   39fb4:	b085      	sub	sp, #20
   39fb6:	4605      	mov	r5, r0
   39fb8:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   39fba:	f101 000c 	add.w	r0, r1, #12
   39fbe:	f001 ff09 	bl	3bdd4 <net_buf_simple_pull_le16>
   39fc2:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   39fc4:	68e2      	ldr	r2, [r4, #12]
   39fc6:	8a21      	ldrh	r1, [r4, #16]
   39fc8:	9102      	str	r1, [sp, #8]
   39fca:	9201      	str	r2, [sp, #4]
   39fcc:	2100      	movs	r1, #0
   39fce:	9100      	str	r1, [sp, #0]
   39fd0:	460a      	mov	r2, r1
   39fd2:	4628      	mov	r0, r5
   39fd4:	f7e8 fafa 	bl	225cc <att_write_rsp>
}
   39fd8:	b005      	add	sp, #20
   39fda:	bd30      	pop	{r4, r5, pc}

00039fdc <att_write_req>:
{
   39fdc:	b530      	push	{r4, r5, lr}
   39fde:	b085      	sub	sp, #20
   39fe0:	4605      	mov	r5, r0
   39fe2:	460c      	mov	r4, r1
   39fe4:	f101 000c 	add.w	r0, r1, #12
   39fe8:	f001 fef4 	bl	3bdd4 <net_buf_simple_pull_le16>
   39fec:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   39fee:	68e2      	ldr	r2, [r4, #12]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   39ff0:	8a21      	ldrh	r1, [r4, #16]
   39ff2:	9102      	str	r1, [sp, #8]
   39ff4:	9201      	str	r2, [sp, #4]
   39ff6:	2200      	movs	r2, #0
   39ff8:	9200      	str	r2, [sp, #0]
   39ffa:	2213      	movs	r2, #19
   39ffc:	2112      	movs	r1, #18
   39ffe:	4628      	mov	r0, r5
   3a000:	f7e8 fae4 	bl	225cc <att_write_rsp>
}
   3a004:	b005      	add	sp, #20
   3a006:	bd30      	pop	{r4, r5, pc}

0003a008 <att_req_retry>:
{
   3a008:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_req *req = att_chan->req;
   3a00a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
	if (!req->encode) {
   3a00e:	68e3      	ldr	r3, [r4, #12]
   3a010:	b313      	cbz	r3, 3a058 <att_req_retry+0x50>
   3a012:	4605      	mov	r5, r0
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   3a014:	6962      	ldr	r2, [r4, #20]
   3a016:	7c61      	ldrb	r1, [r4, #17]
   3a018:	f7e8 f884 	bl	22124 <bt_att_chan_create_pdu>
	if (!buf) {
   3a01c:	4606      	mov	r6, r0
   3a01e:	b1e8      	cbz	r0, 3a05c <att_req_retry+0x54>
	if (req->encode(buf, req->len, req->user_data)) {
   3a020:	68e3      	ldr	r3, [r4, #12]
   3a022:	69a2      	ldr	r2, [r4, #24]
   3a024:	6961      	ldr	r1, [r4, #20]
   3a026:	4798      	blx	r3
   3a028:	b930      	cbnz	r0, 3a038 <att_req_retry+0x30>
	if (chan_send(att_chan, buf)) {
   3a02a:	4631      	mov	r1, r6
   3a02c:	4628      	mov	r0, r5
   3a02e:	f7e7 fdb1 	bl	21b94 <chan_send>
   3a032:	b948      	cbnz	r0, 3a048 <att_req_retry+0x40>
	return BT_ATT_ERR_SUCCESS;
   3a034:	2000      	movs	r0, #0
}
   3a036:	bd70      	pop	{r4, r5, r6, pc}
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   3a038:	69b0      	ldr	r0, [r6, #24]
   3a03a:	f7e7 fd8b 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(buf);
   3a03e:	4630      	mov	r0, r6
   3a040:	f7ef fb30 	bl	296a4 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   3a044:	200e      	movs	r0, #14
   3a046:	e7f6      	b.n	3a036 <att_req_retry+0x2e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   3a048:	69b0      	ldr	r0, [r6, #24]
   3a04a:	f7e7 fd83 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(buf);
   3a04e:	4630      	mov	r0, r6
   3a050:	f7ef fb28 	bl	296a4 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   3a054:	200e      	movs	r0, #14
   3a056:	e7ee      	b.n	3a036 <att_req_retry+0x2e>
		return BT_ATT_ERR_AUTHENTICATION;
   3a058:	2005      	movs	r0, #5
   3a05a:	e7ec      	b.n	3a036 <att_req_retry+0x2e>
		return BT_ATT_ERR_UNLIKELY;
   3a05c:	200e      	movs	r0, #14
   3a05e:	e7ea      	b.n	3a036 <att_req_retry+0x2e>

0003a060 <att_read_group_req>:
{
   3a060:	b5f0      	push	{r4, r5, r6, r7, lr}
   3a062:	b089      	sub	sp, #36	; 0x24
   3a064:	4605      	mov	r5, r0
   3a066:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   3a068:	7c0c      	ldrb	r4, [r1, #16]
   3a06a:	3c04      	subs	r4, #4
   3a06c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   3a06e:	2c02      	cmp	r4, #2
   3a070:	d001      	beq.n	3a076 <att_read_group_req+0x16>
   3a072:	2c10      	cmp	r4, #16
   3a074:	d142      	bne.n	3a0fc <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   3a076:	2104      	movs	r1, #4
   3a078:	300c      	adds	r0, #12
   3a07a:	f7ef fbf1 	bl	29860 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   3a07e:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3a080:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3a082:	4622      	mov	r2, r4
   3a084:	1d01      	adds	r1, r0, #4
   3a086:	a801      	add	r0, sp, #4
   3a088:	f7fe faa5 	bl	385d6 <bt_uuid_create>
   3a08c:	b3c8      	cbz	r0, 3a102 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   3a08e:	f10d 0216 	add.w	r2, sp, #22
   3a092:	4639      	mov	r1, r7
   3a094:	4630      	mov	r0, r6
   3a096:	f7ff fb20 	bl	396da <range_is_valid>
   3a09a:	b1f0      	cbz	r0, 3a0da <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   3a09c:	2300      	movs	r3, #0
   3a09e:	f88d 3018 	strb.w	r3, [sp, #24]
   3a0a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3a0a6:	f8ad 301a 	strh.w	r3, [sp, #26]
   3a0aa:	a906      	add	r1, sp, #24
   3a0ac:	a801      	add	r0, sp, #4
   3a0ae:	f7fe fa74 	bl	3859a <bt_uuid_cmp>
   3a0b2:	b158      	cbz	r0, 3a0cc <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   3a0b4:	2300      	movs	r3, #0
   3a0b6:	f88d 301c 	strb.w	r3, [sp, #28]
   3a0ba:	f642 0301 	movw	r3, #10241	; 0x2801
   3a0be:	f8ad 301e 	strh.w	r3, [sp, #30]
   3a0c2:	a907      	add	r1, sp, #28
   3a0c4:	a801      	add	r0, sp, #4
   3a0c6:	f7fe fa68 	bl	3859a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   3a0ca:	b978      	cbnz	r0, 3a0ec <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   3a0cc:	463b      	mov	r3, r7
   3a0ce:	4632      	mov	r2, r6
   3a0d0:	a901      	add	r1, sp, #4
   3a0d2:	4628      	mov	r0, r5
   3a0d4:	f7e8 fb5e 	bl	22794 <att_read_group_rsp>
   3a0d8:	e011      	b.n	3a0fe <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   3a0da:	2301      	movs	r3, #1
   3a0dc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   3a0e0:	2110      	movs	r1, #16
   3a0e2:	4628      	mov	r0, r5
   3a0e4:	f7ff ff49 	bl	39f7a <send_err_rsp>
		return 0;
   3a0e8:	2000      	movs	r0, #0
   3a0ea:	e008      	b.n	3a0fe <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   3a0ec:	2310      	movs	r3, #16
   3a0ee:	4632      	mov	r2, r6
   3a0f0:	4619      	mov	r1, r3
   3a0f2:	4628      	mov	r0, r5
   3a0f4:	f7ff ff41 	bl	39f7a <send_err_rsp>
		return 0;
   3a0f8:	2000      	movs	r0, #0
   3a0fa:	e000      	b.n	3a0fe <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   3a0fc:	2004      	movs	r0, #4
}
   3a0fe:	b009      	add	sp, #36	; 0x24
   3a100:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   3a102:	200e      	movs	r0, #14
   3a104:	e7fb      	b.n	3a0fe <att_read_group_req+0x9e>

0003a106 <att_read_blob_req>:
{
   3a106:	b500      	push	{lr}
   3a108:	b083      	sub	sp, #12
	req = (void *)buf->data;
   3a10a:	68ca      	ldr	r2, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   3a10c:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   3a10e:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   3a110:	9200      	str	r2, [sp, #0]
   3a112:	220d      	movs	r2, #13
   3a114:	210c      	movs	r1, #12
   3a116:	f7e8 fc31 	bl	2297c <att_read_rsp>
}
   3a11a:	b003      	add	sp, #12
   3a11c:	f85d fb04 	ldr.w	pc, [sp], #4

0003a120 <att_read_req>:
{
   3a120:	b500      	push	{lr}
   3a122:	b083      	sub	sp, #12
	req = (void *)buf->data;
   3a124:	68cb      	ldr	r3, [r1, #12]
	handle = sys_le16_to_cpu(req->handle);
   3a126:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   3a128:	2200      	movs	r2, #0
   3a12a:	9200      	str	r2, [sp, #0]
   3a12c:	220b      	movs	r2, #11
   3a12e:	210a      	movs	r1, #10
   3a130:	f7e8 fc24 	bl	2297c <att_read_rsp>
}
   3a134:	b003      	add	sp, #12
   3a136:	f85d fb04 	ldr.w	pc, [sp], #4

0003a13a <att_read_type_req>:
{
   3a13a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3a13c:	b087      	sub	sp, #28
   3a13e:	4605      	mov	r5, r0
   3a140:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   3a142:	7c0c      	ldrb	r4, [r1, #16]
   3a144:	3c04      	subs	r4, #4
   3a146:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   3a148:	2c02      	cmp	r4, #2
   3a14a:	d001      	beq.n	3a150 <att_read_type_req+0x16>
   3a14c:	2c10      	cmp	r4, #16
   3a14e:	d123      	bne.n	3a198 <att_read_type_req+0x5e>
   3a150:	2104      	movs	r1, #4
   3a152:	300c      	adds	r0, #12
   3a154:	f7ef fb84 	bl	29860 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   3a158:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3a15a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   3a15c:	4622      	mov	r2, r4
   3a15e:	1d01      	adds	r1, r0, #4
   3a160:	a801      	add	r0, sp, #4
   3a162:	f7fe fa38 	bl	385d6 <bt_uuid_create>
   3a166:	b1c8      	cbz	r0, 3a19c <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   3a168:	f10d 0216 	add.w	r2, sp, #22
   3a16c:	4639      	mov	r1, r7
   3a16e:	4630      	mov	r0, r6
   3a170:	f7ff fab3 	bl	396da <range_is_valid>
   3a174:	b138      	cbz	r0, 3a186 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   3a176:	463b      	mov	r3, r7
   3a178:	4632      	mov	r2, r6
   3a17a:	a901      	add	r1, sp, #4
   3a17c:	4628      	mov	r0, r5
   3a17e:	f7e8 fc57 	bl	22a30 <att_read_type_rsp>
}
   3a182:	b007      	add	sp, #28
   3a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   3a186:	2301      	movs	r3, #1
   3a188:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   3a18c:	2108      	movs	r1, #8
   3a18e:	4628      	mov	r0, r5
   3a190:	f7ff fef3 	bl	39f7a <send_err_rsp>
		return 0;
   3a194:	2000      	movs	r0, #0
   3a196:	e7f4      	b.n	3a182 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   3a198:	2004      	movs	r0, #4
   3a19a:	e7f2      	b.n	3a182 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   3a19c:	200e      	movs	r0, #14
   3a19e:	e7f0      	b.n	3a182 <att_read_type_req+0x48>

0003a1a0 <att_find_type_req>:
{
   3a1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a1a4:	b087      	sub	sp, #28
   3a1a6:	4607      	mov	r7, r0
   3a1a8:	460c      	mov	r4, r1
   3a1aa:	2106      	movs	r1, #6
   3a1ac:	f104 000c 	add.w	r0, r4, #12
   3a1b0:	f7ef fb56 	bl	29860 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   3a1b4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3a1b6:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   3a1b8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   3a1bc:	f8d4 900c 	ldr.w	r9, [r4, #12]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   3a1c0:	f10d 020e 	add.w	r2, sp, #14
   3a1c4:	4631      	mov	r1, r6
   3a1c6:	4628      	mov	r0, r5
   3a1c8:	f7ff fa87 	bl	396da <range_is_valid>
   3a1cc:	b1d0      	cbz	r0, 3a204 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   3a1ce:	2300      	movs	r3, #0
   3a1d0:	f88d 3010 	strb.w	r3, [sp, #16]
   3a1d4:	f8ad 8012 	strh.w	r8, [sp, #18]
   3a1d8:	f88d 3014 	strb.w	r3, [sp, #20]
   3a1dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   3a1e0:	f8ad 3016 	strh.w	r3, [sp, #22]
   3a1e4:	a905      	add	r1, sp, #20
   3a1e6:	a804      	add	r0, sp, #16
   3a1e8:	f7fe f9d7 	bl	3859a <bt_uuid_cmp>
   3a1ec:	b998      	cbnz	r0, 3a216 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   3a1ee:	7c23      	ldrb	r3, [r4, #16]
   3a1f0:	9300      	str	r3, [sp, #0]
   3a1f2:	464b      	mov	r3, r9
   3a1f4:	4632      	mov	r2, r6
   3a1f6:	4629      	mov	r1, r5
   3a1f8:	4638      	mov	r0, r7
   3a1fa:	f7e8 fc63 	bl	22ac4 <att_find_type_rsp>
}
   3a1fe:	b007      	add	sp, #28
   3a200:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   3a204:	2301      	movs	r3, #1
   3a206:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   3a20a:	2106      	movs	r1, #6
   3a20c:	4638      	mov	r0, r7
   3a20e:	f7ff feb4 	bl	39f7a <send_err_rsp>
		return 0;
   3a212:	2000      	movs	r0, #0
   3a214:	e7f3      	b.n	3a1fe <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   3a216:	230a      	movs	r3, #10
   3a218:	462a      	mov	r2, r5
   3a21a:	2106      	movs	r1, #6
   3a21c:	4638      	mov	r0, r7
   3a21e:	f7ff feac 	bl	39f7a <send_err_rsp>
		return 0;
   3a222:	2000      	movs	r0, #0
   3a224:	e7eb      	b.n	3a1fe <att_find_type_req+0x5e>

0003a226 <att_find_info_req>:
{
   3a226:	b570      	push	{r4, r5, r6, lr}
   3a228:	b082      	sub	sp, #8
   3a22a:	4604      	mov	r4, r0
	req = (void *)buf->data;
   3a22c:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   3a22e:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   3a230:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   3a232:	f10d 0206 	add.w	r2, sp, #6
   3a236:	4631      	mov	r1, r6
   3a238:	4628      	mov	r0, r5
   3a23a:	f7ff fa4e 	bl	396da <range_is_valid>
   3a23e:	b130      	cbz	r0, 3a24e <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   3a240:	4632      	mov	r2, r6
   3a242:	4629      	mov	r1, r5
   3a244:	4620      	mov	r0, r4
   3a246:	f7e8 fc87 	bl	22b58 <att_find_info_rsp>
}
   3a24a:	b002      	add	sp, #8
   3a24c:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   3a24e:	2301      	movs	r3, #1
   3a250:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   3a254:	2104      	movs	r1, #4
   3a256:	4620      	mov	r0, r4
   3a258:	f7ff fe8f 	bl	39f7a <send_err_rsp>
		return 0;
   3a25c:	2000      	movs	r0, #0
   3a25e:	e7f4      	b.n	3a24a <att_find_info_req+0x24>

0003a260 <att_mtu_req>:
{
   3a260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a262:	4604      	mov	r4, r0
   3a264:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->att->conn;
   3a266:	f850 3b98 	ldr.w	r3, [r0], #152
   3a26a:	681e      	ldr	r6, [r3, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   3a26c:	2103      	movs	r1, #3
   3a26e:	f7ff fa76 	bl	3975e <atomic_test_bit>
   3a272:	bb60      	cbnz	r0, 3a2ce <att_mtu_req+0x6e>
	req = (void *)buf->data;
   3a274:	68eb      	ldr	r3, [r5, #12]
	mtu_client = sys_le16_to_cpu(req->mtu);
   3a276:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   3a278:	2d16      	cmp	r5, #22
   3a27a:	d92a      	bls.n	3a2d2 <att_mtu_req+0x72>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   3a27c:	2202      	movs	r2, #2
   3a27e:	2103      	movs	r1, #3
   3a280:	4630      	mov	r0, r6
   3a282:	f7e8 fa13 	bl	226ac <bt_att_create_pdu>
	if (!pdu) {
   3a286:	4607      	mov	r7, r0
   3a288:	b328      	cbz	r0, 3a2d6 <att_mtu_req+0x76>
	return net_buf_simple_add(&buf->b, len);
   3a28a:	2102      	movs	r1, #2
   3a28c:	300c      	adds	r0, #12
   3a28e:	f7ef fb27 	bl	298e0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   3a292:	f06f 030d 	mvn.w	r3, #13
   3a296:	7003      	strb	r3, [r0, #0]
   3a298:	2301      	movs	r3, #1
   3a29a:	7043      	strb	r3, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   3a29c:	4639      	mov	r1, r7
   3a29e:	4620      	mov	r0, r4
   3a2a0:	f7ff fc08 	bl	39ab4 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   3a2a4:	f5b5 7ff9 	cmp.w	r5, #498	; 0x1f2
   3a2a8:	bf28      	it	cs
   3a2aa:	f44f 75f9 	movcs.w	r5, #498	; 0x1f2
   3a2ae:	8365      	strh	r5, [r4, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   3a2b0:	8565      	strh	r5, [r4, #42]	; 0x2a
	atomic_set_bit(conn->flags, BT_CONN_ATT_MTU_EXCHANGED);
   3a2b2:	3604      	adds	r6, #4
   3a2b4:	e8d6 3fef 	ldaex	r3, [r6]
   3a2b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   3a2bc:	e8c6 3fe2 	stlex	r2, r3, [r6]
   3a2c0:	2a00      	cmp	r2, #0
   3a2c2:	d1f7      	bne.n	3a2b4 <att_mtu_req+0x54>
	att_chan_mtu_updated(chan);
   3a2c4:	4620      	mov	r0, r4
   3a2c6:	f7ff fc02 	bl	39ace <att_chan_mtu_updated>
	return 0;
   3a2ca:	2000      	movs	r0, #0
}
   3a2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   3a2ce:	2006      	movs	r0, #6
   3a2d0:	e7fc      	b.n	3a2cc <att_mtu_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   3a2d2:	2004      	movs	r0, #4
   3a2d4:	e7fa      	b.n	3a2cc <att_mtu_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   3a2d6:	200e      	movs	r0, #14
   3a2d8:	e7f8      	b.n	3a2cc <att_mtu_req+0x6c>

0003a2da <att_handle_exec_write_rsp>:
{
   3a2da:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a2dc:	2300      	movs	r3, #0
   3a2de:	8a0a      	ldrh	r2, [r1, #16]
   3a2e0:	68c9      	ldr	r1, [r1, #12]
   3a2e2:	f7e8 fcc9 	bl	22c78 <att_handle_rsp>
}
   3a2e6:	bd08      	pop	{r3, pc}

0003a2e8 <att_handle_prepare_write_rsp>:
{
   3a2e8:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a2ea:	2300      	movs	r3, #0
   3a2ec:	8a0a      	ldrh	r2, [r1, #16]
   3a2ee:	68c9      	ldr	r1, [r1, #12]
   3a2f0:	f7e8 fcc2 	bl	22c78 <att_handle_rsp>
}
   3a2f4:	bd08      	pop	{r3, pc}

0003a2f6 <att_handle_write_rsp>:
{
   3a2f6:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a2f8:	2300      	movs	r3, #0
   3a2fa:	8a0a      	ldrh	r2, [r1, #16]
   3a2fc:	68c9      	ldr	r1, [r1, #12]
   3a2fe:	f7e8 fcbb 	bl	22c78 <att_handle_rsp>
}
   3a302:	bd08      	pop	{r3, pc}

0003a304 <att_handle_read_group_rsp>:
{
   3a304:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a306:	2300      	movs	r3, #0
   3a308:	8a0a      	ldrh	r2, [r1, #16]
   3a30a:	68c9      	ldr	r1, [r1, #12]
   3a30c:	f7e8 fcb4 	bl	22c78 <att_handle_rsp>
}
   3a310:	bd08      	pop	{r3, pc}

0003a312 <att_handle_read_mult_vl_rsp>:
{
   3a312:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a314:	2300      	movs	r3, #0
   3a316:	8a0a      	ldrh	r2, [r1, #16]
   3a318:	68c9      	ldr	r1, [r1, #12]
   3a31a:	f7e8 fcad 	bl	22c78 <att_handle_rsp>
}
   3a31e:	bd08      	pop	{r3, pc}

0003a320 <att_handle_read_mult_rsp>:
{
   3a320:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a322:	2300      	movs	r3, #0
   3a324:	8a0a      	ldrh	r2, [r1, #16]
   3a326:	68c9      	ldr	r1, [r1, #12]
   3a328:	f7e8 fca6 	bl	22c78 <att_handle_rsp>
}
   3a32c:	bd08      	pop	{r3, pc}

0003a32e <att_handle_read_blob_rsp>:
{
   3a32e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a330:	2300      	movs	r3, #0
   3a332:	8a0a      	ldrh	r2, [r1, #16]
   3a334:	68c9      	ldr	r1, [r1, #12]
   3a336:	f7e8 fc9f 	bl	22c78 <att_handle_rsp>
}
   3a33a:	bd08      	pop	{r3, pc}

0003a33c <att_handle_read_rsp>:
{
   3a33c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a33e:	2300      	movs	r3, #0
   3a340:	8a0a      	ldrh	r2, [r1, #16]
   3a342:	68c9      	ldr	r1, [r1, #12]
   3a344:	f7e8 fc98 	bl	22c78 <att_handle_rsp>
}
   3a348:	bd08      	pop	{r3, pc}

0003a34a <att_handle_read_type_rsp>:
{
   3a34a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a34c:	2300      	movs	r3, #0
   3a34e:	8a0a      	ldrh	r2, [r1, #16]
   3a350:	68c9      	ldr	r1, [r1, #12]
   3a352:	f7e8 fc91 	bl	22c78 <att_handle_rsp>
}
   3a356:	bd08      	pop	{r3, pc}

0003a358 <att_handle_find_type_rsp>:
{
   3a358:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a35a:	2300      	movs	r3, #0
   3a35c:	8a0a      	ldrh	r2, [r1, #16]
   3a35e:	68c9      	ldr	r1, [r1, #12]
   3a360:	f7e8 fc8a 	bl	22c78 <att_handle_rsp>
}
   3a364:	bd08      	pop	{r3, pc}

0003a366 <att_handle_find_info_rsp>:
{
   3a366:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a368:	2300      	movs	r3, #0
   3a36a:	8a0a      	ldrh	r2, [r1, #16]
   3a36c:	68c9      	ldr	r1, [r1, #12]
   3a36e:	f7e8 fc83 	bl	22c78 <att_handle_rsp>
}
   3a372:	bd08      	pop	{r3, pc}

0003a374 <att_mtu_rsp>:
{
   3a374:	b570      	push	{r4, r5, r6, lr}
   3a376:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   3a378:	68ce      	ldr	r6, [r1, #12]
	mtu = sys_le16_to_cpu(rsp->mtu);
   3a37a:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   3a37c:	2b16      	cmp	r3, #22
   3a37e:	d910      	bls.n	3a3a2 <att_mtu_rsp+0x2e>
   3a380:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   3a382:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
   3a386:	bf28      	it	cs
   3a388:	f44f 73f9 	movcs.w	r3, #498	; 0x1f2
   3a38c:	8343      	strh	r3, [r0, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   3a38e:	8543      	strh	r3, [r0, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   3a390:	f7ff fb9d 	bl	39ace <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   3a394:	2300      	movs	r3, #0
   3a396:	8a2a      	ldrh	r2, [r5, #16]
   3a398:	4631      	mov	r1, r6
   3a39a:	4620      	mov	r0, r4
   3a39c:	f7e8 fc6c 	bl	22c78 <att_handle_rsp>
}
   3a3a0:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   3a3a2:	2304      	movs	r3, #4
   3a3a4:	2200      	movs	r2, #0
   3a3a6:	4611      	mov	r1, r2
   3a3a8:	f7e8 fc66 	bl	22c78 <att_handle_rsp>
   3a3ac:	e7f8      	b.n	3a3a0 <att_mtu_rsp+0x2c>

0003a3ae <att_confirm>:
{
   3a3ae:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   3a3b0:	2300      	movs	r3, #0
   3a3b2:	8a0a      	ldrh	r2, [r1, #16]
   3a3b4:	68c9      	ldr	r1, [r1, #12]
   3a3b6:	f7e8 fc5f 	bl	22c78 <att_handle_rsp>
}
   3a3ba:	bd08      	pop	{r3, pc}

0003a3bc <bt_att_encrypt_change>:
{
   3a3bc:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   3a3be:	4605      	mov	r5, r0
	struct bt_conn *conn = le_chan->chan.conn;
   3a3c0:	f855 6904 	ldr.w	r6, [r5], #-4
	if (!att_chan->att) {
   3a3c4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   3a3c8:	b143      	cbz	r3, 3a3dc <bt_att_encrypt_change+0x20>
   3a3ca:	4604      	mov	r4, r0
	if (hci_status) {
   3a3cc:	b171      	cbz	r1, 3a3ec <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   3a3ce:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   3a3d2:	b11b      	cbz	r3, 3a3dc <bt_att_encrypt_change+0x20>
   3a3d4:	7c1b      	ldrb	r3, [r3, #16]
   3a3d6:	f013 0f01 	tst.w	r3, #1
   3a3da:	d100      	bne.n	3a3de <bt_att_encrypt_change+0x22>
}
   3a3dc:	bd70      	pop	{r4, r5, r6, pc}
			att_handle_rsp(att_chan, NULL, 0,
   3a3de:	2305      	movs	r3, #5
   3a3e0:	2200      	movs	r2, #0
   3a3e2:	4611      	mov	r1, r2
   3a3e4:	4628      	mov	r0, r5
   3a3e6:	f7e8 fc47 	bl	22c78 <att_handle_rsp>
		return;
   3a3ea:	e7f7      	b.n	3a3dc <bt_att_encrypt_change+0x20>
	bt_gatt_encrypt_change(conn);
   3a3ec:	4630      	mov	r0, r6
   3a3ee:	f7eb fbeb 	bl	25bc8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   3a3f2:	7a73      	ldrb	r3, [r6, #9]
   3a3f4:	2b01      	cmp	r3, #1
   3a3f6:	d0f1      	beq.n	3a3dc <bt_att_encrypt_change+0x20>
	if (!(att_chan->req && att_chan->req->retrying)) {
   3a3f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   3a3fc:	2b00      	cmp	r3, #0
   3a3fe:	d0ed      	beq.n	3a3dc <bt_att_encrypt_change+0x20>
   3a400:	7c1b      	ldrb	r3, [r3, #16]
   3a402:	f013 0f01 	tst.w	r3, #1
   3a406:	d0e9      	beq.n	3a3dc <bt_att_encrypt_change+0x20>
	err = att_req_retry(att_chan);
   3a408:	4628      	mov	r0, r5
   3a40a:	f7ff fdfd 	bl	3a008 <att_req_retry>
	if (err) {
   3a40e:	4603      	mov	r3, r0
   3a410:	2800      	cmp	r0, #0
   3a412:	d0e3      	beq.n	3a3dc <bt_att_encrypt_change+0x20>
		att_handle_rsp(att_chan, NULL, 0, err);
   3a414:	2200      	movs	r2, #0
   3a416:	4611      	mov	r1, r2
   3a418:	4628      	mov	r0, r5
   3a41a:	f7e8 fc2d 	bl	22c78 <att_handle_rsp>
   3a41e:	e7dd      	b.n	3a3dc <bt_att_encrypt_change+0x20>

0003a420 <att_chan_detach>:
{
   3a420:	b538      	push	{r3, r4, r5, lr}
   3a422:	4605      	mov	r5, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   3a424:	4601      	mov	r1, r0
   3a426:	f851 0bf0 	ldr.w	r0, [r1], #240
   3a42a:	3028      	adds	r0, #40	; 0x28
   3a42c:	f7ff f93a 	bl	396a4 <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   3a430:	e005      	b.n	3a43e <att_chan_detach+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   3a432:	69a0      	ldr	r0, [r4, #24]
   3a434:	f7e7 fb8e 	bl	21b54 <tx_meta_data_free>
		net_buf_unref(buf);
   3a438:	4620      	mov	r0, r4
   3a43a:	f7ef f933 	bl	296a4 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   3a43e:	2200      	movs	r2, #0
   3a440:	2300      	movs	r3, #0
   3a442:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
   3a446:	f001 fcbb 	bl	3bdc0 <net_buf_get>
   3a44a:	4604      	mov	r4, r0
   3a44c:	2800      	cmp	r0, #0
   3a44e:	d1f0      	bne.n	3a432 <att_chan_detach+0x12>
	if (chan->req) {
   3a450:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
   3a454:	b12b      	cbz	r3, 3a462 <att_chan_detach+0x42>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   3a456:	230e      	movs	r3, #14
   3a458:	2200      	movs	r2, #0
   3a45a:	4611      	mov	r1, r2
   3a45c:	4628      	mov	r0, r5
   3a45e:	f7e8 fc0b 	bl	22c78 <att_handle_rsp>
	chan->att = NULL;
   3a462:	2300      	movs	r3, #0
   3a464:	602b      	str	r3, [r5, #0]
}
   3a466:	bd38      	pop	{r3, r4, r5, pc}

0003a468 <bt_att_disconnected>:
{
   3a468:	b538      	push	{r3, r4, r5, lr}
   3a46a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   3a46c:	f850 5c04 	ldr.w	r5, [r0, #-4]
	if (!att_chan->att) {
   3a470:	b125      	cbz	r5, 3a47c <bt_att_disconnected+0x14>
   3a472:	3804      	subs	r0, #4
	att_chan_detach(att_chan);
   3a474:	f7ff ffd4 	bl	3a420 <att_chan_detach>
	return list->head;
   3a478:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if (!sys_slist_is_empty(&att->chans)) {
   3a47a:	b103      	cbz	r3, 3a47e <bt_att_disconnected+0x16>
}
   3a47c:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   3a47e:	4628      	mov	r0, r5
   3a480:	f7e8 fc7e 	bl	22d80 <att_reset>
	bt_gatt_disconnected(le_chan->chan.conn);
   3a484:	6820      	ldr	r0, [r4, #0]
   3a486:	f7eb fc63 	bl	25d50 <bt_gatt_disconnected>
   3a48a:	e7f7      	b.n	3a47c <bt_att_disconnected+0x14>

0003a48c <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	LOG_DBG("req %p", req);

	if (!conn || !req) {
   3a48c:	b358      	cbz	r0, 3a4e6 <bt_att_req_cancel+0x5a>
{
   3a48e:	b570      	push	{r4, r5, r6, lr}
   3a490:	460d      	mov	r5, r1
	if (!conn || !req) {
   3a492:	b339      	cbz	r1, 3a4e4 <bt_att_req_cancel+0x58>
		return;
	}

	att = att_get(conn);
   3a494:	f7e7 f9d2 	bl	2183c <att_get>
	if (!att) {
   3a498:	4606      	mov	r6, r0
   3a49a:	b318      	cbz	r0, 3a4e4 <bt_att_req_cancel+0x58>
   3a49c:	6a80      	ldr	r0, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a49e:	b140      	cbz	r0, 3a4b2 <bt_att_req_cancel+0x26>
   3a4a0:	38f0      	subs	r0, #240	; 0xf0
Z_GENLIST_PEEK_NEXT(slist, snode)
   3a4a2:	f110 04f0 	adds.w	r4, r0, #240	; 0xf0
   3a4a6:	d009      	beq.n	3a4bc <bt_att_req_cancel+0x30>
	return node->next;
   3a4a8:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
   3a4ac:	b134      	cbz	r4, 3a4bc <bt_att_req_cancel+0x30>
   3a4ae:	3cf0      	subs	r4, #240	; 0xf0
   3a4b0:	e004      	b.n	3a4bc <bt_att_req_cancel+0x30>
   3a4b2:	4604      	mov	r4, r0
   3a4b4:	e002      	b.n	3a4bc <bt_att_req_cancel+0x30>
   3a4b6:	4623      	mov	r3, r4
   3a4b8:	4620      	mov	r0, r4
   3a4ba:	461c      	mov	r4, r3
   3a4bc:	b158      	cbz	r0, 3a4d6 <bt_att_req_cancel+0x4a>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   3a4be:	4629      	mov	r1, r5
   3a4c0:	f7e8 fcc6 	bl	22e50 <bt_att_chan_req_cancel>
   3a4c4:	b970      	cbnz	r0, 3a4e4 <bt_att_req_cancel+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   3a4c6:	2c00      	cmp	r4, #0
   3a4c8:	d0f5      	beq.n	3a4b6 <bt_att_req_cancel+0x2a>
   3a4ca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   3a4ce:	2b00      	cmp	r3, #0
   3a4d0:	d0f2      	beq.n	3a4b8 <bt_att_req_cancel+0x2c>
   3a4d2:	3bf0      	subs	r3, #240	; 0xf0
   3a4d4:	e7f0      	b.n	3a4b8 <bt_att_req_cancel+0x2c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   3a4d6:	4629      	mov	r1, r5
   3a4d8:	1d30      	adds	r0, r6, #4
   3a4da:	f7ff f8e3 	bl	396a4 <sys_slist_find_and_remove>

	bt_att_req_free(req);
   3a4de:	4628      	mov	r0, r5
   3a4e0:	f7e8 fbb2 	bl	22c48 <bt_att_req_free>
}
   3a4e4:	bd70      	pop	{r4, r5, r6, pc}
   3a4e6:	4770      	bx	lr

0003a4e8 <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   3a4e8:	b510      	push	{r4, lr}
   3a4ea:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   3a4ec:	f7e7 f9a6 	bl	2183c <att_get>
	if (!att) {
   3a4f0:	4601      	mov	r1, r0
   3a4f2:	b308      	cbz	r0, 3a538 <bt_att_find_req_by_user_data+0x50>
	return list->head;
   3a4f4:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3a4f6:	b113      	cbz	r3, 3a4fe <bt_att_find_req_by_user_data+0x16>
   3a4f8:	3bf0      	subs	r3, #240	; 0xf0
   3a4fa:	e000      	b.n	3a4fe <bt_att_find_req_by_user_data+0x16>
   3a4fc:	3bf0      	subs	r3, #240	; 0xf0
   3a4fe:	b173      	cbz	r3, 3a51e <bt_att_find_req_by_user_data+0x36>
		if (chan->req->user_data == user_data) {
   3a500:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
   3a504:	6982      	ldr	r2, [r0, #24]
   3a506:	42a2      	cmp	r2, r4
   3a508:	d016      	beq.n	3a538 <bt_att_find_req_by_user_data+0x50>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3a50a:	f113 02f0 	adds.w	r2, r3, #240	; 0xf0
   3a50e:	d004      	beq.n	3a51a <bt_att_find_req_by_user_data+0x32>
	return node->next;
   3a510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3a514:	2b00      	cmp	r3, #0
   3a516:	d1f1      	bne.n	3a4fc <bt_att_find_req_by_user_data+0x14>
   3a518:	e7f1      	b.n	3a4fe <bt_att_find_req_by_user_data+0x16>
   3a51a:	4613      	mov	r3, r2
   3a51c:	e7ef      	b.n	3a4fe <bt_att_find_req_by_user_data+0x16>
	return list->head;
   3a51e:	6848      	ldr	r0, [r1, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   3a520:	b150      	cbz	r0, 3a538 <bt_att_find_req_by_user_data+0x50>
		if (req->user_data == user_data) {
   3a522:	6983      	ldr	r3, [r0, #24]
   3a524:	42a3      	cmp	r3, r4
   3a526:	d007      	beq.n	3a538 <bt_att_find_req_by_user_data+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   3a528:	4603      	mov	r3, r0
	return node->next;
   3a52a:	6800      	ldr	r0, [r0, #0]
   3a52c:	2800      	cmp	r0, #0
   3a52e:	d0f7      	beq.n	3a520 <bt_att_find_req_by_user_data+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   3a530:	2b00      	cmp	r3, #0
   3a532:	d1f5      	bne.n	3a520 <bt_att_find_req_by_user_data+0x38>
   3a534:	4618      	mov	r0, r3
   3a536:	e7f3      	b.n	3a520 <bt_att_find_req_by_user_data+0x38>
			return req;
		}
	}

	return NULL;
}
   3a538:	bd10      	pop	{r4, pc}

0003a53a <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   3a53a:	2001      	movs	r0, #1
   3a53c:	4770      	bx	lr

0003a53e <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   3a53e:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   3a540:	f7e7 f97c 	bl	2183c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   3a544:	b198      	cbz	r0, 3a56e <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   3a546:	6a83      	ldr	r3, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3a548:	b103      	cbz	r3, 3a54c <bt_att_clear_out_of_sync_sent+0xe>
   3a54a:	3bf0      	subs	r3, #240	; 0xf0
   3a54c:	b17b      	cbz	r3, 3a56e <bt_att_clear_out_of_sync_sent+0x30>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   3a54e:	f103 0298 	add.w	r2, r3, #152	; 0x98
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3a552:	e8d2 0fef 	ldaex	r0, [r2]
   3a556:	f020 0020 	bic.w	r0, r0, #32
   3a55a:	e8c2 0fe1 	stlex	r1, r0, [r2]
   3a55e:	2900      	cmp	r1, #0
   3a560:	d1f7      	bne.n	3a552 <bt_att_clear_out_of_sync_sent+0x14>
	return node->next;
   3a562:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   3a566:	2b00      	cmp	r3, #0
   3a568:	d0f0      	beq.n	3a54c <bt_att_clear_out_of_sync_sent+0xe>
   3a56a:	3bf0      	subs	r3, #240	; 0xf0
   3a56c:	e7ee      	b.n	3a54c <bt_att_clear_out_of_sync_sent+0xe>
	}
}
   3a56e:	bd08      	pop	{r3, pc}

0003a570 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   3a570:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   3a572:	2104      	movs	r1, #4
   3a574:	f7ff f843 	bl	395fe <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   3a578:	b120      	cbz	r0, 3a584 <bt_att_out_of_sync_sent_on_fixed+0x14>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   3a57a:	2105      	movs	r1, #5
   3a57c:	3094      	adds	r0, #148	; 0x94
   3a57e:	f7ff f8ee 	bl	3975e <atomic_test_bit>
}
   3a582:	bd08      	pop	{r3, pc}
		return false;
   3a584:	2000      	movs	r0, #0
   3a586:	e7fc      	b.n	3a582 <bt_att_out_of_sync_sent_on_fixed+0x12>

0003a588 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   3a588:	6980      	ldr	r0, [r0, #24]

	data->func = func;
   3a58a:	6081      	str	r1, [r0, #8]
	data->user_data = user_data;
   3a58c:	60c2      	str	r2, [r0, #12]
	data->attr_count = 1;
   3a58e:	2201      	movs	r2, #1
   3a590:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   3a592:	7403      	strb	r3, [r0, #16]
}
   3a594:	4770      	bx	lr

0003a596 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   3a596:	460b      	mov	r3, r1
   3a598:	b139      	cbz	r1, 3a5aa <sys_slist_remove+0x14>
	return node->next;
   3a59a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   3a59c:	6019      	str	r1, [r3, #0]
	return list->tail;
   3a59e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3a5a0:	428a      	cmp	r2, r1
   3a5a2:	d009      	beq.n	3a5b8 <sys_slist_remove+0x22>
	parent->next = child;
   3a5a4:	2300      	movs	r3, #0
   3a5a6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   3a5a8:	4770      	bx	lr
	return node->next;
   3a5aa:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   3a5ac:	6003      	str	r3, [r0, #0]
	return list->tail;
   3a5ae:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3a5b0:	428a      	cmp	r2, r1
   3a5b2:	d1f7      	bne.n	3a5a4 <sys_slist_remove+0xe>
	list->tail = node;
   3a5b4:	6043      	str	r3, [r0, #4]
}
   3a5b6:	e7f5      	b.n	3a5a4 <sys_slist_remove+0xe>
	list->tail = node;
   3a5b8:	6043      	str	r3, [r0, #4]
}
   3a5ba:	e7f3      	b.n	3a5a4 <sys_slist_remove+0xe>

0003a5bc <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3a5bc:	b508      	push	{r3, lr}
   3a5be:	460a      	mov	r2, r1
	return list->head;
   3a5c0:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3a5c2:	2100      	movs	r1, #0
   3a5c4:	e001      	b.n	3a5ca <sys_slist_find_and_remove+0xe>
   3a5c6:	4619      	mov	r1, r3
   3a5c8:	681b      	ldr	r3, [r3, #0]
   3a5ca:	b12b      	cbz	r3, 3a5d8 <sys_slist_find_and_remove+0x1c>
   3a5cc:	4293      	cmp	r3, r2
   3a5ce:	d1fa      	bne.n	3a5c6 <sys_slist_find_and_remove+0xa>
   3a5d0:	f7ff ffe1 	bl	3a596 <sys_slist_remove>
   3a5d4:	2001      	movs	r0, #1
   3a5d6:	e000      	b.n	3a5da <sys_slist_find_and_remove+0x1e>
   3a5d8:	2000      	movs	r0, #0
   3a5da:	bd08      	pop	{r3, pc}

0003a5dc <sys_mem_swap>:
	for (i = 0; i < (length/2); i++) {
   3a5dc:	2300      	movs	r3, #0
   3a5de:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   3a5e2:	d210      	bcs.n	3a606 <sys_mem_swap+0x2a>
{
   3a5e4:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   3a5e6:	f810 c003 	ldrb.w	ip, [r0, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3a5ea:	1aca      	subs	r2, r1, r3
   3a5ec:	3a01      	subs	r2, #1
   3a5ee:	f810 e002 	ldrb.w	lr, [r0, r2]
   3a5f2:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   3a5f6:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   3a5fa:	3301      	adds	r3, #1
   3a5fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   3a600:	d3f1      	bcc.n	3a5e6 <sys_mem_swap+0xa>
}
   3a602:	f85d fb04 	ldr.w	pc, [sp], #4
   3a606:	4770      	bx	lr

0003a608 <update_range>:
	if (new_start >= *start && new_end <= *end) {
   3a608:	f8b0 c000 	ldrh.w	ip, [r0]
   3a60c:	4562      	cmp	r2, ip
   3a60e:	d312      	bcc.n	3a636 <update_range+0x2e>
{
   3a610:	b500      	push	{lr}
	if (new_start >= *start && new_end <= *end) {
   3a612:	f8b1 e000 	ldrh.w	lr, [r1]
   3a616:	4573      	cmp	r3, lr
   3a618:	d908      	bls.n	3a62c <update_range+0x24>
	if (*start > new_start) {
   3a61a:	4562      	cmp	r2, ip
   3a61c:	d200      	bcs.n	3a620 <update_range+0x18>
		*start = new_start;
   3a61e:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   3a620:	880a      	ldrh	r2, [r1, #0]
   3a622:	4293      	cmp	r3, r2
   3a624:	d904      	bls.n	3a630 <update_range+0x28>
		*end = new_end;
   3a626:	800b      	strh	r3, [r1, #0]
	return true;
   3a628:	2001      	movs	r0, #1
   3a62a:	e002      	b.n	3a632 <update_range+0x2a>
		return false;
   3a62c:	2000      	movs	r0, #0
   3a62e:	e000      	b.n	3a632 <update_range+0x2a>
	return true;
   3a630:	2001      	movs	r0, #1
}
   3a632:	f85d fb04 	ldr.w	pc, [sp], #4
	if (*start > new_start) {
   3a636:	4562      	cmp	r2, ip
   3a638:	d200      	bcs.n	3a63c <update_range+0x34>
		*start = new_start;
   3a63a:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   3a63c:	880a      	ldrh	r2, [r1, #0]
   3a63e:	4293      	cmp	r3, r2
   3a640:	d902      	bls.n	3a648 <update_range+0x40>
		*end = new_end;
   3a642:	800b      	strh	r3, [r1, #0]
	return true;
   3a644:	2001      	movs	r0, #1
   3a646:	4770      	bx	lr
   3a648:	2001      	movs	r0, #1
}
   3a64a:	4770      	bx	lr

0003a64c <cf_set_value>:
{
   3a64c:	b510      	push	{r4, lr}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   3a64e:	2300      	movs	r3, #0
   3a650:	e001      	b.n	3a656 <cf_set_value+0xa>
   3a652:	3301      	adds	r3, #1
   3a654:	b29b      	uxth	r3, r3
   3a656:	2b02      	cmp	r3, #2
   3a658:	d819      	bhi.n	3a68e <cf_set_value+0x42>
   3a65a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   3a65e:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   3a662:	d912      	bls.n	3a68a <cf_set_value+0x3e>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   3a664:	eb00 040c 	add.w	r4, r0, ip
   3a668:	7a24      	ldrb	r4, [r4, #8]
   3a66a:	f003 0e07 	and.w	lr, r3, #7
   3a66e:	fa24 f40e 	lsr.w	r4, r4, lr
   3a672:	f014 0f01 	tst.w	r4, #1
   3a676:	d0ec      	beq.n	3a652 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   3a678:	f811 400c 	ldrb.w	r4, [r1, ip]
   3a67c:	fa24 f40e 	lsr.w	r4, r4, lr
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   3a680:	f014 0f01 	tst.w	r4, #1
   3a684:	d1e5      	bne.n	3a652 <cf_set_value+0x6>
			return false;
   3a686:	2000      	movs	r0, #0
   3a688:	e016      	b.n	3a6b8 <cf_set_value+0x6c>
   3a68a:	2300      	movs	r3, #0
   3a68c:	e000      	b.n	3a690 <cf_set_value+0x44>
   3a68e:	2300      	movs	r3, #0
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   3a690:	4293      	cmp	r3, r2
   3a692:	d210      	bcs.n	3a6b6 <cf_set_value+0x6a>
   3a694:	b96b      	cbnz	r3, 3a6b2 <cf_set_value+0x66>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   3a696:	18c4      	adds	r4, r0, r3
   3a698:	f894 c008 	ldrb.w	ip, [r4, #8]
   3a69c:	f811 e003 	ldrb.w	lr, [r1, r3]
   3a6a0:	f00e 0e07 	and.w	lr, lr, #7
   3a6a4:	ea4c 0c0e 	orr.w	ip, ip, lr
   3a6a8:	f884 c008 	strb.w	ip, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   3a6ac:	3301      	adds	r3, #1
   3a6ae:	b29b      	uxth	r3, r3
   3a6b0:	e7ee      	b.n	3a690 <cf_set_value+0x44>
	return true;
   3a6b2:	2001      	movs	r0, #1
   3a6b4:	e000      	b.n	3a6b8 <cf_set_value+0x6c>
   3a6b6:	2001      	movs	r0, #1
}
   3a6b8:	bd10      	pop	{r4, pc}

0003a6ba <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   3a6ba:	6010      	str	r0, [r2, #0]
}
   3a6bc:	2000      	movs	r0, #0
   3a6be:	4770      	bx	lr

0003a6c0 <gatt_ccc_changed>:
{
   3a6c0:	b508      	push	{r3, lr}
   3a6c2:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   3a6c4:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3a6c6:	460b      	mov	r3, r1
   3a6c8:	b13b      	cbz	r3, 3a6da <gatt_ccc_changed+0x1a>
	if (value != ccc->value) {
   3a6ca:	8953      	ldrh	r3, [r2, #10]
   3a6cc:	4299      	cmp	r1, r3
   3a6ce:	d003      	beq.n	3a6d8 <gatt_ccc_changed+0x18>
		ccc->value = value;
   3a6d0:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   3a6d2:	68d3      	ldr	r3, [r2, #12]
   3a6d4:	b103      	cbz	r3, 3a6d8 <gatt_ccc_changed+0x18>
			ccc->cfg_changed(attr, value);
   3a6d6:	4798      	blx	r3
}
   3a6d8:	bd08      	pop	{r3, pc}
		if (ccc->cfg[i].value > value) {
   3a6da:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   3a6de:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
   3a6e2:	f8bc c008 	ldrh.w	ip, [ip, #8]
   3a6e6:	458c      	cmp	ip, r1
   3a6e8:	d900      	bls.n	3a6ec <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   3a6ea:	4661      	mov	r1, ip
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3a6ec:	3301      	adds	r3, #1
   3a6ee:	e7eb      	b.n	3a6c8 <gatt_ccc_changed+0x8>

0003a6f0 <gatt_indicate_rsp>:
{
   3a6f0:	b510      	push	{r4, lr}
   3a6f2:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   3a6f4:	68a3      	ldr	r3, [r4, #8]
   3a6f6:	b113      	cbz	r3, 3a6fe <gatt_indicate_rsp+0xe>
   3a6f8:	460a      	mov	r2, r1
		params->func(conn, params, err);
   3a6fa:	4621      	mov	r1, r4
   3a6fc:	4798      	blx	r3
	params->_ref--;
   3a6fe:	7da3      	ldrb	r3, [r4, #22]
   3a700:	3b01      	subs	r3, #1
   3a702:	b2db      	uxtb	r3, r3
   3a704:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   3a706:	68e2      	ldr	r2, [r4, #12]
   3a708:	b112      	cbz	r2, 3a710 <gatt_indicate_rsp+0x20>
   3a70a:	b90b      	cbnz	r3, 3a710 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   3a70c:	4620      	mov	r0, r4
   3a70e:	4790      	blx	r2
}
   3a710:	bd10      	pop	{r4, pc}

0003a712 <match_uuid>:
	data->attr = attr;
   3a712:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   3a714:	8091      	strh	r1, [r2, #4]
}
   3a716:	2000      	movs	r0, #0
   3a718:	4770      	bx	lr

0003a71a <gatt_sub_is_empty>:
	return list->head;
   3a71a:	6880      	ldr	r0, [r0, #8]
}
   3a71c:	fab0 f080 	clz	r0, r0
   3a720:	0940      	lsrs	r0, r0, #5
   3a722:	4770      	bx	lr

0003a724 <check_subscribe_security_level>:
	return conn->sec_level >= params->min_security;
   3a724:	7a40      	ldrb	r0, [r0, #9]
   3a726:	7c8b      	ldrb	r3, [r1, #18]
}
   3a728:	4298      	cmp	r0, r3
   3a72a:	bf34      	ite	cc
   3a72c:	2000      	movcc	r0, #0
   3a72e:	2001      	movcs	r0, #1
   3a730:	4770      	bx	lr

0003a732 <ccc_set_cb>:
}
   3a732:	2000      	movs	r0, #0
   3a734:	4770      	bx	lr

0003a736 <gen_hash_m>:
{
   3a736:	b5f0      	push	{r4, r5, r6, r7, lr}
   3a738:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   3a73a:	6806      	ldr	r6, [r0, #0]
   3a73c:	7835      	ldrb	r5, [r6, #0]
   3a73e:	2d00      	cmp	r5, #0
   3a740:	d160      	bne.n	3a804 <gen_hash_m+0xce>
   3a742:	4607      	mov	r7, r0
   3a744:	4614      	mov	r4, r2
	switch (u16->val) {
   3a746:	8873      	ldrh	r3, [r6, #2]
   3a748:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   3a74c:	d019      	beq.n	3a782 <gen_hash_m+0x4c>
   3a74e:	d913      	bls.n	3a778 <gen_hash_m+0x42>
   3a750:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   3a754:	33ff      	adds	r3, #255	; 0xff
   3a756:	b29b      	uxth	r3, r3
   3a758:	2b04      	cmp	r3, #4
   3a75a:	d859      	bhi.n	3a810 <gen_hash_m+0xda>
		value = sys_cpu_to_le16(handle);
   3a75c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a760:	2202      	movs	r2, #2
   3a762:	f10d 010a 	add.w	r1, sp, #10
   3a766:	4620      	mov	r0, r4
   3a768:	f7fd f97a 	bl	37a60 <tc_cmac_update>
   3a76c:	2800      	cmp	r0, #0
   3a76e:	d139      	bne.n	3a7e4 <gen_hash_m+0xae>
			state->err = -EINVAL;
   3a770:	f06f 0315 	mvn.w	r3, #21
   3a774:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   3a776:	e046      	b.n	3a806 <gen_hash_m+0xd0>
	switch (u16->val) {
   3a778:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   3a77c:	b29b      	uxth	r3, r3
   3a77e:	2b03      	cmp	r3, #3
   3a780:	d844      	bhi.n	3a80c <gen_hash_m+0xd6>
		value = sys_cpu_to_le16(handle);
   3a782:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a786:	2202      	movs	r2, #2
   3a788:	f10d 010a 	add.w	r1, sp, #10
   3a78c:	4620      	mov	r0, r4
   3a78e:	f7fd f967 	bl	37a60 <tc_cmac_update>
   3a792:	b918      	cbnz	r0, 3a79c <gen_hash_m+0x66>
			state->err = -EINVAL;
   3a794:	f06f 0315 	mvn.w	r3, #21
   3a798:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   3a79a:	e034      	b.n	3a806 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   3a79c:	8873      	ldrh	r3, [r6, #2]
   3a79e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a7a2:	2202      	movs	r2, #2
   3a7a4:	f10d 010a 	add.w	r1, sp, #10
   3a7a8:	4620      	mov	r0, r4
   3a7aa:	f7fd f959 	bl	37a60 <tc_cmac_update>
   3a7ae:	b178      	cbz	r0, 3a7d0 <gen_hash_m+0x9a>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   3a7b0:	687e      	ldr	r6, [r7, #4]
   3a7b2:	2000      	movs	r0, #0
   3a7b4:	9000      	str	r0, [sp, #0]
   3a7b6:	2313      	movs	r3, #19
   3a7b8:	aa03      	add	r2, sp, #12
   3a7ba:	4639      	mov	r1, r7
   3a7bc:	47b0      	blx	r6
		if (len < 0) {
   3a7be:	1e02      	subs	r2, r0, #0
   3a7c0:	db0a      	blt.n	3a7d8 <gen_hash_m+0xa2>
		if (tc_cmac_update(&state->state, data, len) ==
   3a7c2:	a903      	add	r1, sp, #12
   3a7c4:	4620      	mov	r0, r4
   3a7c6:	f7fd f94b 	bl	37a60 <tc_cmac_update>
   3a7ca:	b138      	cbz	r0, 3a7dc <gen_hash_m+0xa6>
	return BT_GATT_ITER_CONTINUE;
   3a7cc:	2501      	movs	r5, #1
   3a7ce:	e01a      	b.n	3a806 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   3a7d0:	f06f 0315 	mvn.w	r3, #21
   3a7d4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   3a7d6:	e016      	b.n	3a806 <gen_hash_m+0xd0>
			state->err = len;
   3a7d8:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   3a7da:	e014      	b.n	3a806 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   3a7dc:	f06f 0315 	mvn.w	r3, #21
   3a7e0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   3a7e2:	e010      	b.n	3a806 <gen_hash_m+0xd0>
		value = sys_cpu_to_le16(u16->val);
   3a7e4:	8873      	ldrh	r3, [r6, #2]
   3a7e6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   3a7ea:	2202      	movs	r2, #2
   3a7ec:	f10d 010a 	add.w	r1, sp, #10
   3a7f0:	4620      	mov	r0, r4
   3a7f2:	f7fd f935 	bl	37a60 <tc_cmac_update>
   3a7f6:	b108      	cbz	r0, 3a7fc <gen_hash_m+0xc6>
	return BT_GATT_ITER_CONTINUE;
   3a7f8:	2501      	movs	r5, #1
   3a7fa:	e004      	b.n	3a806 <gen_hash_m+0xd0>
			state->err = -EINVAL;
   3a7fc:	f06f 0315 	mvn.w	r3, #21
   3a800:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   3a802:	e000      	b.n	3a806 <gen_hash_m+0xd0>
		return BT_GATT_ITER_CONTINUE;
   3a804:	2501      	movs	r5, #1
}
   3a806:	4628      	mov	r0, r5
   3a808:	b009      	add	sp, #36	; 0x24
   3a80a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   3a80c:	2501      	movs	r5, #1
   3a80e:	e7fa      	b.n	3a806 <gen_hash_m+0xd0>
   3a810:	2501      	movs	r5, #1
   3a812:	e7f8      	b.n	3a806 <gen_hash_m+0xd0>

0003a814 <ccc_find_cfg>:
{
   3a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a816:	4605      	mov	r5, r0
   3a818:	460f      	mov	r7, r1
   3a81a:	4616      	mov	r6, r2
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3a81c:	2400      	movs	r4, #0
   3a81e:	b10c      	cbz	r4, 3a824 <ccc_find_cfg+0x10>
	return NULL;
   3a820:	2000      	movs	r0, #0
}
   3a822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (id == ccc->cfg[i].id &&
   3a824:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   3a828:	f815 3013 	ldrb.w	r3, [r5, r3, lsl #1]
   3a82c:	42b3      	cmp	r3, r6
   3a82e:	d001      	beq.n	3a834 <ccc_find_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   3a830:	3401      	adds	r4, #1
   3a832:	e7f4      	b.n	3a81e <ccc_find_cfg+0xa>
		    bt_addr_le_eq(&ccc->cfg[i].peer, addr)) {
   3a834:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   3a838:	eb05 0040 	add.w	r0, r5, r0, lsl #1
	return memcmp(a, b, sizeof(*a));
   3a83c:	2207      	movs	r2, #7
   3a83e:	4639      	mov	r1, r7
   3a840:	3001      	adds	r0, #1
   3a842:	f7fd fdb5 	bl	383b0 <memcmp>
		if (id == ccc->cfg[i].id &&
   3a846:	2800      	cmp	r0, #0
   3a848:	d1f2      	bne.n	3a830 <ccc_find_cfg+0x1c>
			return &ccc->cfg[i];
   3a84a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   3a84e:	eb05 0044 	add.w	r0, r5, r4, lsl #1
   3a852:	e7e6      	b.n	3a822 <ccc_find_cfg+0xe>

0003a854 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3a854:	094b      	lsrs	r3, r1, #5
   3a856:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3a85a:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3a85e:	f001 011f 	and.w	r1, r1, #31
   3a862:	4108      	asrs	r0, r1
}
   3a864:	f000 0001 	and.w	r0, r0, #1
   3a868:	4770      	bx	lr

0003a86a <ccc_clear>:
{
   3a86a:	b508      	push	{r3, lr}
	cfg = ccc_find_cfg(ccc, addr, id);
   3a86c:	f7ff ffd2 	bl	3a814 <ccc_find_cfg>
	if (!cfg) {
   3a870:	b108      	cbz	r0, 3a876 <ccc_clear+0xc>
	clear_ccc_cfg(cfg);
   3a872:	f7e8 fdc5 	bl	23400 <clear_ccc_cfg>
}
   3a876:	bd08      	pop	{r3, pc}

0003a878 <gatt_sub_remove>:
{
   3a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3a87a:	460c      	mov	r4, r1
	if (params) {
   3a87c:	b173      	cbz	r3, 3a89c <gatt_sub_remove+0x24>
   3a87e:	4605      	mov	r5, r0
   3a880:	4611      	mov	r1, r2
   3a882:	461e      	mov	r6, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   3a884:	f103 0218 	add.w	r2, r3, #24
   3a888:	f104 0008 	add.w	r0, r4, #8
   3a88c:	f7ff fe83 	bl	3a596 <sys_slist_remove>
		params->notify(conn, params, NULL, 0);
   3a890:	6837      	ldr	r7, [r6, #0]
   3a892:	2300      	movs	r3, #0
   3a894:	461a      	mov	r2, r3
   3a896:	4631      	mov	r1, r6
   3a898:	4628      	mov	r0, r5
   3a89a:	47b8      	blx	r7
	if (gatt_sub_is_empty(sub)) {
   3a89c:	4620      	mov	r0, r4
   3a89e:	f7ff ff3c 	bl	3a71a <gatt_sub_is_empty>
   3a8a2:	b900      	cbnz	r0, 3a8a6 <gatt_sub_remove+0x2e>
}
   3a8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gatt_sub_free(sub);
   3a8a6:	4620      	mov	r0, r4
   3a8a8:	f7e8 fdb8 	bl	2341c <gatt_sub_free>
}
   3a8ac:	e7fa      	b.n	3a8a4 <gatt_sub_remove+0x2c>

0003a8ae <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   3a8ae:	784a      	ldrb	r2, [r1, #1]
   3a8b0:	b902      	cbnz	r2, 3a8b4 <gatt_sub_update+0x6>
   3a8b2:	4770      	bx	lr
{
   3a8b4:	b508      	push	{r3, lr}
   3a8b6:	460b      	mov	r3, r1
	memcpy(dst, src, sizeof(*dst));
   3a8b8:	2207      	movs	r2, #7
   3a8ba:	f100 0190 	add.w	r1, r0, #144	; 0x90
   3a8be:	1c58      	adds	r0, r3, #1
   3a8c0:	f7fd fd9b 	bl	383fa <memcpy>
}
   3a8c4:	bd08      	pop	{r3, pc}

0003a8c6 <remove_subscriptions>:
{
   3a8c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3a8ca:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   3a8cc:	f7e8 fcaa 	bl	23224 <gatt_sub_find>
	if (!sub) {
   3a8d0:	b3a0      	cbz	r0, 3a93c <remove_subscriptions+0x76>
   3a8d2:	4607      	mov	r7, r0
   3a8d4:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3a8d6:	b36c      	cbz	r4, 3a934 <remove_subscriptions+0x6e>
   3a8d8:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   3a8da:	f114 0518 	adds.w	r5, r4, #24
   3a8de:	d002      	beq.n	3a8e6 <remove_subscriptions+0x20>
	return node->next;
   3a8e0:	69a5      	ldr	r5, [r4, #24]
   3a8e2:	b105      	cbz	r5, 3a8e6 <remove_subscriptions+0x20>
   3a8e4:	3d18      	subs	r5, #24
   3a8e6:	f04f 0800 	mov.w	r8, #0
   3a8ea:	e00d      	b.n	3a908 <remove_subscriptions+0x42>
			params->value = 0U;
   3a8ec:	2300      	movs	r3, #0
   3a8ee:	8223      	strh	r3, [r4, #16]
			gatt_sub_remove(conn, sub, prev, params);
   3a8f0:	4623      	mov	r3, r4
   3a8f2:	4642      	mov	r2, r8
   3a8f4:	4639      	mov	r1, r7
   3a8f6:	4630      	mov	r0, r6
   3a8f8:	f7ff ffbe 	bl	3a878 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3a8fc:	b1e5      	cbz	r5, 3a938 <remove_subscriptions+0x72>
   3a8fe:	69ab      	ldr	r3, [r5, #24]
   3a900:	b103      	cbz	r3, 3a904 <remove_subscriptions+0x3e>
   3a902:	3b18      	subs	r3, #24
   3a904:	462c      	mov	r4, r5
   3a906:	461d      	mov	r5, r3
   3a908:	b1c4      	cbz	r4, 3a93c <remove_subscriptions+0x76>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   3a90a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   3a90e:	7a30      	ldrb	r0, [r6, #8]
   3a910:	f7fe f835 	bl	3897e <bt_addr_le_is_bonded>
   3a914:	2800      	cmp	r0, #0
   3a916:	d0e9      	beq.n	3a8ec <remove_subscriptions+0x26>
		    (atomic_test_bit(params->flags,
   3a918:	2100      	movs	r1, #0
   3a91a:	f104 0014 	add.w	r0, r4, #20
   3a91e:	f7ff ff99 	bl	3a854 <atomic_test_bit>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   3a922:	2800      	cmp	r0, #0
   3a924:	d1e2      	bne.n	3a8ec <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   3a926:	4639      	mov	r1, r7
   3a928:	4630      	mov	r0, r6
   3a92a:	f7ff ffc0 	bl	3a8ae <gatt_sub_update>
			prev = &params->node;
   3a92e:	f104 0818 	add.w	r8, r4, #24
   3a932:	e7e3      	b.n	3a8fc <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3a934:	4625      	mov	r5, r4
   3a936:	e7d6      	b.n	3a8e6 <remove_subscriptions+0x20>
   3a938:	462b      	mov	r3, r5
   3a93a:	e7e3      	b.n	3a904 <remove_subscriptions+0x3e>
}
   3a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003a940 <clear_sc_cfg>:
{
   3a940:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   3a942:	220c      	movs	r2, #12
   3a944:	2100      	movs	r1, #0
   3a946:	f7fd fd87 	bl	38458 <memset>
}
   3a94a:	bd08      	pop	{r3, pc}

0003a94c <sc_ccc_cfg_write>:
{
   3a94c:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   3a94e:	2a02      	cmp	r2, #2
   3a950:	d003      	beq.n	3a95a <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   3a952:	f7e8 ff7f 	bl	23854 <sc_clear>
}
   3a956:	2002      	movs	r0, #2
   3a958:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   3a95a:	2300      	movs	r3, #0
   3a95c:	461a      	mov	r2, r3
   3a95e:	f100 0190 	add.w	r1, r0, #144	; 0x90
   3a962:	7a00      	ldrb	r0, [r0, #8]
   3a964:	f7e8 fe28 	bl	235b8 <sc_save>
   3a968:	e7f5      	b.n	3a956 <sc_ccc_cfg_write+0xa>

0003a96a <sc_reset>:
{
   3a96a:	b510      	push	{r4, lr}
   3a96c:	4604      	mov	r4, r0
	memset(&cfg->data, 0, sizeof(cfg->data));
   3a96e:	2204      	movs	r2, #4
   3a970:	2100      	movs	r1, #0
   3a972:	3008      	adds	r0, #8
   3a974:	f7fd fd70 	bl	38458 <memset>
		sc_store(cfg);
   3a978:	4620      	mov	r0, r4
   3a97a:	f7e8 fdb5 	bl	234e8 <sc_store>
}
   3a97e:	bd10      	pop	{r4, pc}

0003a980 <sc_restore_rsp>:
{
   3a980:	b538      	push	{r3, r4, r5, lr}
   3a982:	4605      	mov	r5, r0
   3a984:	4614      	mov	r4, r2
	if (bt_att_fixed_chan_only(conn)) {
   3a986:	f7ff fdd8 	bl	3a53a <bt_att_fixed_chan_only>
   3a98a:	b908      	cbnz	r0, 3a990 <sc_restore_rsp+0x10>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   3a98c:	b1a4      	cbz	r4, 3a9b8 <sc_restore_rsp+0x38>
}
   3a98e:	bd38      	pop	{r3, r4, r5, pc}
		cfg = find_cf_cfg(conn);
   3a990:	4628      	mov	r0, r5
   3a992:	f7e8 fbd5 	bl	23140 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   3a996:	4603      	mov	r3, r0
   3a998:	2800      	cmp	r0, #0
   3a99a:	d0f7      	beq.n	3a98c <sc_restore_rsp+0xc>
   3a99c:	7a02      	ldrb	r2, [r0, #8]
   3a99e:	f012 0f01 	tst.w	r2, #1
   3a9a2:	d0f3      	beq.n	3a98c <sc_restore_rsp+0xc>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   3a9a4:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3a9a6:	e8d3 1fef 	ldaex	r1, [r3]
   3a9aa:	f041 0101 	orr.w	r1, r1, #1
   3a9ae:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3a9b2:	2a00      	cmp	r2, #0
   3a9b4:	d0ea      	beq.n	3a98c <sc_restore_rsp+0xc>
   3a9b6:	e7f6      	b.n	3a9a6 <sc_restore_rsp+0x26>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   3a9b8:	f105 0190 	add.w	r1, r5, #144	; 0x90
   3a9bc:	7a28      	ldrb	r0, [r5, #8]
   3a9be:	f7e8 fbe5 	bl	2318c <find_sc_cfg>
		if (sc_cfg) {
   3a9c2:	2800      	cmp	r0, #0
   3a9c4:	d0e3      	beq.n	3a98e <sc_restore_rsp+0xe>
			sc_reset(sc_cfg);
   3a9c6:	f7ff ffd0 	bl	3a96a <sc_reset>
}
   3a9ca:	e7e0      	b.n	3a98e <sc_restore_rsp+0xe>

0003a9cc <atomic_test_and_clear_bit>:
{
   3a9cc:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   3a9ce:	f001 021f 	and.w	r2, r1, #31
   3a9d2:	2301      	movs	r3, #1
   3a9d4:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3a9d6:	0949      	lsrs	r1, r1, #5
   3a9d8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3a9dc:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3a9de:	e8d0 2fef 	ldaex	r2, [r0]
   3a9e2:	ea02 0c01 	and.w	ip, r2, r1
   3a9e6:	e8c0 cfee 	stlex	lr, ip, [r0]
   3a9ea:	f1be 0f00 	cmp.w	lr, #0
   3a9ee:	d1f6      	bne.n	3a9de <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   3a9f0:	4213      	tst	r3, r2
}
   3a9f2:	bf14      	ite	ne
   3a9f4:	2001      	movne	r0, #1
   3a9f6:	2000      	moveq	r0, #0
   3a9f8:	f85d fb04 	ldr.w	pc, [sp], #4

0003a9fc <gatt_foreach_iter>:
	if (handle > end_handle) {
   3a9fc:	4299      	cmp	r1, r3
   3a9fe:	d822      	bhi.n	3aa46 <gatt_foreach_iter+0x4a>
{
   3aa00:	b538      	push	{r3, r4, r5, lr}
   3aa02:	4605      	mov	r5, r0
   3aa04:	460c      	mov	r4, r1
	if (handle < start_handle) {
   3aa06:	4291      	cmp	r1, r2
   3aa08:	d31f      	bcc.n	3aa4a <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   3aa0a:	9b04      	ldr	r3, [sp, #16]
   3aa0c:	b123      	cbz	r3, 3aa18 <gatt_foreach_iter+0x1c>
   3aa0e:	6801      	ldr	r1, [r0, #0]
   3aa10:	4618      	mov	r0, r3
   3aa12:	f7fd fdc2 	bl	3859a <bt_uuid_cmp>
   3aa16:	b9d0      	cbnz	r0, 3aa4e <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   3aa18:	9b05      	ldr	r3, [sp, #20]
   3aa1a:	b12b      	cbz	r3, 3aa28 <gatt_foreach_iter+0x2c>
   3aa1c:	68eb      	ldr	r3, [r5, #12]
   3aa1e:	9a05      	ldr	r2, [sp, #20]
   3aa20:	4293      	cmp	r3, r2
   3aa22:	d001      	beq.n	3aa28 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   3aa24:	2001      	movs	r0, #1
   3aa26:	e011      	b.n	3aa4c <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   3aa28:	9b06      	ldr	r3, [sp, #24]
   3aa2a:	881b      	ldrh	r3, [r3, #0]
   3aa2c:	3b01      	subs	r3, #1
   3aa2e:	9a06      	ldr	r2, [sp, #24]
   3aa30:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   3aa32:	9a08      	ldr	r2, [sp, #32]
   3aa34:	4621      	mov	r1, r4
   3aa36:	4628      	mov	r0, r5
   3aa38:	9b07      	ldr	r3, [sp, #28]
   3aa3a:	4798      	blx	r3
	if (!*num_matches) {
   3aa3c:	9b06      	ldr	r3, [sp, #24]
   3aa3e:	881b      	ldrh	r3, [r3, #0]
   3aa40:	b923      	cbnz	r3, 3aa4c <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   3aa42:	2000      	movs	r0, #0
   3aa44:	e002      	b.n	3aa4c <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   3aa46:	2000      	movs	r0, #0
}
   3aa48:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   3aa4a:	2001      	movs	r0, #1
}
   3aa4c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   3aa4e:	2001      	movs	r0, #1
   3aa50:	e7fc      	b.n	3aa4c <gatt_foreach_iter+0x50>

0003aa52 <gatt_req_alloc>:
{
   3aa52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aa54:	4606      	mov	r6, r0
   3aa56:	460f      	mov	r7, r1
   3aa58:	4614      	mov	r4, r2
   3aa5a:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   3aa5c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   3aa60:	2100      	movs	r1, #0
   3aa62:	f7e8 f8cd 	bl	22c00 <bt_att_req_alloc>
	if (!req) {
   3aa66:	4684      	mov	ip, r0
   3aa68:	b128      	cbz	r0, 3aa76 <gatt_req_alloc+0x24>
	req->att_op = op;
   3aa6a:	7445      	strb	r5, [r0, #17]
	req->len = len;
   3aa6c:	9b06      	ldr	r3, [sp, #24]
   3aa6e:	6143      	str	r3, [r0, #20]
	req->encode = encode;
   3aa70:	60c4      	str	r4, [r0, #12]
	req->func = func;
   3aa72:	6046      	str	r6, [r0, #4]
	req->user_data = params;
   3aa74:	6187      	str	r7, [r0, #24]
}
   3aa76:	4660      	mov	r0, ip
   3aa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003aa7a <gatt_req_send>:
{
   3aa7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3aa7e:	b083      	sub	sp, #12
   3aa80:	4606      	mov	r6, r0
   3aa82:	4608      	mov	r0, r1
   3aa84:	4615      	mov	r5, r2
   3aa86:	461c      	mov	r4, r3
   3aa88:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   3aa8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   3aa8e:	9700      	str	r7, [sp, #0]
   3aa90:	4643      	mov	r3, r8
   3aa92:	4622      	mov	r2, r4
   3aa94:	4629      	mov	r1, r5
   3aa96:	f7ff ffdc 	bl	3aa52 <gatt_req_alloc>
	if (!req) {
   3aa9a:	b368      	cbz	r0, 3aaf8 <gatt_req_send+0x7e>
   3aa9c:	4681      	mov	r9, r0
	buf = bt_att_create_pdu(conn, op, len);
   3aa9e:	463a      	mov	r2, r7
   3aaa0:	4641      	mov	r1, r8
   3aaa2:	4630      	mov	r0, r6
   3aaa4:	f7e7 fe02 	bl	226ac <bt_att_create_pdu>
	if (!buf) {
   3aaa8:	4680      	mov	r8, r0
   3aaaa:	b1b8      	cbz	r0, 3aadc <gatt_req_send+0x62>
	bt_att_set_tx_meta_data(buf, NULL, NULL, chan_opt);
   3aaac:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   3aab0:	2200      	movs	r2, #0
   3aab2:	4611      	mov	r1, r2
   3aab4:	f7ff fd68 	bl	3a588 <bt_att_set_tx_meta_data>
	req->buf = buf;
   3aab8:	f8c9 8008 	str.w	r8, [r9, #8]
	err = encode(buf, len, params);
   3aabc:	462a      	mov	r2, r5
   3aabe:	4639      	mov	r1, r7
   3aac0:	4640      	mov	r0, r8
   3aac2:	47a0      	blx	r4
	if (err) {
   3aac4:	4604      	mov	r4, r0
   3aac6:	b978      	cbnz	r0, 3aae8 <gatt_req_send+0x6e>
	err = bt_att_req_send(conn, req);
   3aac8:	4649      	mov	r1, r9
   3aaca:	4630      	mov	r0, r6
   3aacc:	f7e8 fa0e 	bl	22eec <bt_att_req_send>
	if (err) {
   3aad0:	4604      	mov	r4, r0
   3aad2:	b968      	cbnz	r0, 3aaf0 <gatt_req_send+0x76>
}
   3aad4:	4620      	mov	r0, r4
   3aad6:	b003      	add	sp, #12
   3aad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   3aadc:	4648      	mov	r0, r9
   3aade:	f7e8 f8b3 	bl	22c48 <bt_att_req_free>
		return -ENOMEM;
   3aae2:	f06f 040b 	mvn.w	r4, #11
   3aae6:	e7f5      	b.n	3aad4 <gatt_req_send+0x5a>
		bt_att_req_free(req);
   3aae8:	4648      	mov	r0, r9
   3aaea:	f7e8 f8ad 	bl	22c48 <bt_att_req_free>
		return err;
   3aaee:	e7f1      	b.n	3aad4 <gatt_req_send+0x5a>
		bt_att_req_free(req);
   3aaf0:	4648      	mov	r0, r9
   3aaf2:	f7e8 f8a9 	bl	22c48 <bt_att_req_free>
   3aaf6:	e7ed      	b.n	3aad4 <gatt_req_send+0x5a>
		return -ENOMEM;
   3aaf8:	f06f 040b 	mvn.w	r4, #11
   3aafc:	e7ea      	b.n	3aad4 <gatt_req_send+0x5a>

0003aafe <add_subscriptions>:
{
   3aafe:	b538      	push	{r3, r4, r5, lr}
   3ab00:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   3ab02:	f7e8 fb8f 	bl	23224 <gatt_sub_find>
	if (!sub) {
   3ab06:	b1d0      	cbz	r0, 3ab3e <add_subscriptions+0x40>
	return list->head;
   3ab08:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   3ab0a:	b124      	cbz	r4, 3ab16 <add_subscriptions+0x18>
   3ab0c:	3c18      	subs	r4, #24
   3ab0e:	e002      	b.n	3ab16 <add_subscriptions+0x18>
	return node->next;
   3ab10:	69a4      	ldr	r4, [r4, #24]
   3ab12:	b104      	cbz	r4, 3ab16 <add_subscriptions+0x18>
   3ab14:	3c18      	subs	r4, #24
   3ab16:	b194      	cbz	r4, 3ab3e <add_subscriptions+0x40>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   3ab18:	f105 0190 	add.w	r1, r5, #144	; 0x90
   3ab1c:	7a28      	ldrb	r0, [r5, #8]
   3ab1e:	f7fd ff2e 	bl	3897e <bt_addr_le_is_bonded>
   3ab22:	2800      	cmp	r0, #0
   3ab24:	d0f4      	beq.n	3ab10 <add_subscriptions+0x12>
		    !atomic_test_bit(params->flags,
   3ab26:	2101      	movs	r1, #1
   3ab28:	f104 0014 	add.w	r0, r4, #20
   3ab2c:	f7ff fe92 	bl	3a854 <atomic_test_bit>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   3ab30:	2800      	cmp	r0, #0
   3ab32:	d1ed      	bne.n	3ab10 <add_subscriptions+0x12>
			gatt_write_ccc(conn, params);
   3ab34:	4621      	mov	r1, r4
   3ab36:	4628      	mov	r0, r5
   3ab38:	f7e9 f920 	bl	23d7c <gatt_write_ccc>
   3ab3c:	e7e8      	b.n	3ab10 <add_subscriptions+0x12>
}
   3ab3e:	bd38      	pop	{r3, r4, r5, pc}

0003ab40 <gatt_write_ccc_buf>:
{
   3ab40:	b538      	push	{r3, r4, r5, lr}
   3ab42:	4614      	mov	r4, r2
   3ab44:	f100 050c 	add.w	r5, r0, #12
   3ab48:	2102      	movs	r1, #2
   3ab4a:	4628      	mov	r0, r5
   3ab4c:	f7ee fec8 	bl	298e0 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   3ab50:	89e3      	ldrh	r3, [r4, #14]
   3ab52:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   3ab54:	8a21      	ldrh	r1, [r4, #16]
   3ab56:	4628      	mov	r0, r5
   3ab58:	f001 f96a 	bl	3be30 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   3ab5c:	3414      	adds	r4, #20
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3ab5e:	e8d4 3fef 	ldaex	r3, [r4]
   3ab62:	f043 0304 	orr.w	r3, r3, #4
   3ab66:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3ab6a:	2a00      	cmp	r2, #0
   3ab6c:	d1f7      	bne.n	3ab5e <gatt_write_ccc_buf+0x1e>
}
   3ab6e:	2000      	movs	r0, #0
   3ab70:	bd38      	pop	{r3, r4, r5, pc}

0003ab72 <remove_cf_cfg>:
{
   3ab72:	b570      	push	{r4, r5, r6, lr}
   3ab74:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   3ab76:	f7e8 fae3 	bl	23140 <find_cf_cfg>
	if (!cfg) {
   3ab7a:	b150      	cbz	r0, 3ab92 <remove_cf_cfg+0x20>
   3ab7c:	4606      	mov	r6, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3ab7e:	f104 0590 	add.w	r5, r4, #144	; 0x90
   3ab82:	4629      	mov	r1, r5
   3ab84:	7a20      	ldrb	r0, [r4, #8]
   3ab86:	f7fd fefa 	bl	3897e <bt_addr_le_is_bonded>
   3ab8a:	b918      	cbnz	r0, 3ab94 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   3ab8c:	4630      	mov	r0, r6
   3ab8e:	f7e9 fa8f 	bl	240b0 <clear_cf_cfg>
}
   3ab92:	bd70      	pop	{r4, r5, r6, pc}
   3ab94:	2207      	movs	r2, #7
   3ab96:	4629      	mov	r1, r5
   3ab98:	1c70      	adds	r0, r6, #1
   3ab9a:	f7fd fc2e 	bl	383fa <memcpy>
}
   3ab9e:	e7f8      	b.n	3ab92 <remove_cf_cfg+0x20>

0003aba0 <bt_gatt_attr_read>:
{
   3aba0:	b510      	push	{r4, lr}
   3aba2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   3aba6:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   3abaa:	42a1      	cmp	r1, r4
   3abac:	d80c      	bhi.n	3abc8 <bt_gatt_attr_read+0x28>
   3abae:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   3abb0:	1a64      	subs	r4, r4, r1
   3abb2:	42a3      	cmp	r3, r4
   3abb4:	bfa8      	it	ge
   3abb6:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   3abb8:	b29c      	uxth	r4, r3
   3abba:	4622      	mov	r2, r4
   3abbc:	9b03      	ldr	r3, [sp, #12]
   3abbe:	4419      	add	r1, r3
   3abc0:	f7fd fc1b 	bl	383fa <memcpy>
}
   3abc4:	4620      	mov	r0, r4
   3abc6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   3abc8:	f06f 0406 	mvn.w	r4, #6
   3abcc:	e7fa      	b.n	3abc4 <bt_gatt_attr_read+0x24>

0003abce <read_ppcp>:
{
   3abce:	b510      	push	{r4, lr}
   3abd0:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   3abd2:	2418      	movs	r4, #24
   3abd4:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   3abd8:	2428      	movs	r4, #40	; 0x28
   3abda:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   3abde:	2400      	movs	r4, #0
   3abe0:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   3abe4:	242a      	movs	r4, #42	; 0x2a
   3abe6:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   3abea:	2408      	movs	r4, #8
   3abec:	9402      	str	r4, [sp, #8]
   3abee:	ac04      	add	r4, sp, #16
   3abf0:	9401      	str	r4, [sp, #4]
   3abf2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   3abf6:	9400      	str	r4, [sp, #0]
   3abf8:	f7ff ffd2 	bl	3aba0 <bt_gatt_attr_read>
}
   3abfc:	b006      	add	sp, #24
   3abfe:	bd10      	pop	{r4, pc}

0003ac00 <read_appearance>:
{
   3ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ac02:	b087      	sub	sp, #28
   3ac04:	4604      	mov	r4, r0
   3ac06:	460d      	mov	r5, r1
   3ac08:	4616      	mov	r6, r2
   3ac0a:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   3ac0c:	f7fd feb4 	bl	38978 <bt_get_appearance>
   3ac10:	f8ad 0016 	strh.w	r0, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   3ac14:	2302      	movs	r3, #2
   3ac16:	9302      	str	r3, [sp, #8]
   3ac18:	f10d 0316 	add.w	r3, sp, #22
   3ac1c:	9301      	str	r3, [sp, #4]
   3ac1e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   3ac22:	9300      	str	r3, [sp, #0]
   3ac24:	463b      	mov	r3, r7
   3ac26:	4632      	mov	r2, r6
   3ac28:	4629      	mov	r1, r5
   3ac2a:	4620      	mov	r0, r4
   3ac2c:	f7ff ffb8 	bl	3aba0 <bt_gatt_attr_read>
}
   3ac30:	b007      	add	sp, #28
   3ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003ac34 <read_name>:
{
   3ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ac38:	b084      	sub	sp, #16
   3ac3a:	4604      	mov	r4, r0
   3ac3c:	460d      	mov	r5, r1
   3ac3e:	4616      	mov	r6, r2
   3ac40:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   3ac42:	f7e3 fa4f 	bl	1e0e4 <bt_get_name>
   3ac46:	4680      	mov	r8, r0
				 strlen(name));
   3ac48:	f7fd fb81 	bl	3834e <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   3ac4c:	b280      	uxth	r0, r0
   3ac4e:	9002      	str	r0, [sp, #8]
   3ac50:	f8cd 8004 	str.w	r8, [sp, #4]
   3ac54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   3ac58:	9300      	str	r3, [sp, #0]
   3ac5a:	463b      	mov	r3, r7
   3ac5c:	4632      	mov	r2, r6
   3ac5e:	4629      	mov	r1, r5
   3ac60:	4620      	mov	r0, r4
   3ac62:	f7ff ff9d 	bl	3aba0 <bt_gatt_attr_read>
}
   3ac66:	b004      	add	sp, #16
   3ac68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003ac6c <cf_read>:
{
   3ac6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ac6e:	b087      	sub	sp, #28
   3ac70:	4604      	mov	r4, r0
   3ac72:	460d      	mov	r5, r1
   3ac74:	4616      	mov	r6, r2
   3ac76:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   3ac78:	2300      	movs	r3, #0
   3ac7a:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   3ac7e:	f7e8 fa5f 	bl	23140 <find_cf_cfg>
	if (cfg) {
   3ac82:	b128      	cbz	r0, 3ac90 <cf_read+0x24>
   3ac84:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   3ac86:	2201      	movs	r2, #1
   3ac88:	3108      	adds	r1, #8
   3ac8a:	a805      	add	r0, sp, #20
   3ac8c:	f7fd fbb5 	bl	383fa <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   3ac90:	2301      	movs	r3, #1
   3ac92:	9302      	str	r3, [sp, #8]
   3ac94:	ab05      	add	r3, sp, #20
   3ac96:	9301      	str	r3, [sp, #4]
   3ac98:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   3ac9c:	9300      	str	r3, [sp, #0]
   3ac9e:	463b      	mov	r3, r7
   3aca0:	4632      	mov	r2, r6
   3aca2:	4629      	mov	r1, r5
   3aca4:	4620      	mov	r0, r4
   3aca6:	f7ff ff7b 	bl	3aba0 <bt_gatt_attr_read>
}
   3acaa:	b007      	add	sp, #28
   3acac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003acae <bt_gatt_attr_read_service>:
{
   3acae:	b570      	push	{r4, r5, r6, lr}
   3acb0:	b086      	sub	sp, #24
   3acb2:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   3acb6:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   3acb8:	7826      	ldrb	r6, [r4, #0]
   3acba:	b146      	cbz	r6, 3acce <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   3acbc:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   3acbe:	2610      	movs	r6, #16
   3acc0:	9602      	str	r6, [sp, #8]
   3acc2:	9401      	str	r4, [sp, #4]
   3acc4:	9500      	str	r5, [sp, #0]
   3acc6:	f7ff ff6b 	bl	3aba0 <bt_gatt_attr_read>
}
   3acca:	b006      	add	sp, #24
   3accc:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   3acce:	8864      	ldrh	r4, [r4, #2]
   3acd0:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   3acd4:	2402      	movs	r4, #2
   3acd6:	9402      	str	r4, [sp, #8]
   3acd8:	f10d 0416 	add.w	r4, sp, #22
   3acdc:	9401      	str	r4, [sp, #4]
   3acde:	9500      	str	r5, [sp, #0]
   3ace0:	f7ff ff5e 	bl	3aba0 <bt_gatt_attr_read>
   3ace4:	e7f1      	b.n	3acca <bt_gatt_attr_read_service+0x1c>

0003ace6 <bt_gatt_attr_read_ccc>:
{
   3ace6:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ace8:	b087      	sub	sp, #28
   3acea:	4605      	mov	r5, r0
   3acec:	460c      	mov	r4, r1
   3acee:	4616      	mov	r6, r2
   3acf0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   3acf2:	68c9      	ldr	r1, [r1, #12]
   3acf4:	f7e8 fa6e 	bl	231d4 <find_ccc_cfg>
	if (cfg) {
   3acf8:	b190      	cbz	r0, 3ad20 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   3acfa:	8903      	ldrh	r3, [r0, #8]
   3acfc:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   3ad00:	2302      	movs	r3, #2
   3ad02:	9302      	str	r3, [sp, #8]
   3ad04:	f10d 0316 	add.w	r3, sp, #22
   3ad08:	9301      	str	r3, [sp, #4]
   3ad0a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   3ad0e:	9300      	str	r3, [sp, #0]
   3ad10:	463b      	mov	r3, r7
   3ad12:	4632      	mov	r2, r6
   3ad14:	4621      	mov	r1, r4
   3ad16:	4628      	mov	r0, r5
   3ad18:	f7ff ff42 	bl	3aba0 <bt_gatt_attr_read>
}
   3ad1c:	b007      	add	sp, #28
   3ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   3ad20:	2300      	movs	r3, #0
   3ad22:	f8ad 3016 	strh.w	r3, [sp, #22]
   3ad26:	e7eb      	b.n	3ad00 <bt_gatt_attr_read_ccc+0x1a>

0003ad28 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3ad28:	b1b8      	cbz	r0, 3ad5a <bt_gatt_attr_value_handle+0x32>
{
   3ad2a:	b510      	push	{r4, lr}
   3ad2c:	b082      	sub	sp, #8
   3ad2e:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   3ad30:	2300      	movs	r3, #0
   3ad32:	f88d 3004 	strb.w	r3, [sp, #4]
   3ad36:	f642 0303 	movw	r3, #10243	; 0x2803
   3ad3a:	f8ad 3006 	strh.w	r3, [sp, #6]
   3ad3e:	a901      	add	r1, sp, #4
   3ad40:	6800      	ldr	r0, [r0, #0]
   3ad42:	f7fd fc2a 	bl	3859a <bt_uuid_cmp>
   3ad46:	b950      	cbnz	r0, 3ad5e <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   3ad48:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   3ad4a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   3ad4c:	b940      	cbnz	r0, 3ad60 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   3ad4e:	4620      	mov	r0, r4
   3ad50:	f7e9 fbea 	bl	24528 <bt_gatt_attr_get_handle>
   3ad54:	3001      	adds	r0, #1
   3ad56:	b280      	uxth	r0, r0
   3ad58:	e002      	b.n	3ad60 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   3ad5a:	2000      	movs	r0, #0
}
   3ad5c:	4770      	bx	lr
	uint16_t handle = 0;
   3ad5e:	2000      	movs	r0, #0
}
   3ad60:	b002      	add	sp, #8
   3ad62:	bd10      	pop	{r4, pc}

0003ad64 <bt_gatt_attr_read_chrc>:
{
   3ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ad68:	b08a      	sub	sp, #40	; 0x28
   3ad6a:	4605      	mov	r5, r0
   3ad6c:	460c      	mov	r4, r1
   3ad6e:	4616      	mov	r6, r2
   3ad70:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   3ad72:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   3ad76:	f898 3006 	ldrb.w	r3, [r8, #6]
   3ad7a:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   3ad7e:	4608      	mov	r0, r1
   3ad80:	f7ff ffd2 	bl	3ad28 <bt_gatt_attr_value_handle>
   3ad84:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   3ad88:	f8d8 1000 	ldr.w	r1, [r8]
   3ad8c:	780b      	ldrb	r3, [r1, #0]
   3ad8e:	b993      	cbnz	r3, 3adb6 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   3ad90:	884b      	ldrh	r3, [r1, #2]
   3ad92:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   3ad96:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   3ad98:	9302      	str	r3, [sp, #8]
   3ad9a:	ab05      	add	r3, sp, #20
   3ad9c:	9301      	str	r3, [sp, #4]
   3ad9e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   3ada2:	9300      	str	r3, [sp, #0]
   3ada4:	463b      	mov	r3, r7
   3ada6:	4632      	mov	r2, r6
   3ada8:	4621      	mov	r1, r4
   3adaa:	4628      	mov	r0, r5
   3adac:	f7ff fef8 	bl	3aba0 <bt_gatt_attr_read>
}
   3adb0:	b00a      	add	sp, #40	; 0x28
   3adb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   3adb6:	2210      	movs	r2, #16
   3adb8:	3101      	adds	r1, #1
   3adba:	f10d 0017 	add.w	r0, sp, #23
   3adbe:	f7fd fb1c 	bl	383fa <memcpy>
		value_len += 16U;
   3adc2:	2313      	movs	r3, #19
   3adc4:	e7e8      	b.n	3ad98 <bt_gatt_attr_read_chrc+0x34>

0003adc6 <bt_gatt_check_perm>:
{
   3adc6:	b538      	push	{r3, r4, r5, lr}
   3adc8:	4605      	mov	r5, r0
	if ((mask & BT_GATT_PERM_READ) &&
   3adca:	f012 0f01 	tst.w	r2, #1
   3adce:	d005      	beq.n	3addc <bt_gatt_check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   3add0:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   3add2:	f013 0f95 	tst.w	r3, #149	; 0x95
   3add6:	d027      	beq.n	3ae28 <bt_gatt_check_perm+0x62>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   3add8:	684b      	ldr	r3, [r1, #4]
   3adda:	b33b      	cbz	r3, 3ae2c <bt_gatt_check_perm+0x66>
	if ((mask & BT_GATT_PERM_WRITE) &&
   3addc:	f012 0f02 	tst.w	r2, #2
   3ade0:	d005      	beq.n	3adee <bt_gatt_check_perm+0x28>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   3ade2:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   3ade4:	f413 7f95 	tst.w	r3, #298	; 0x12a
   3ade8:	d022      	beq.n	3ae30 <bt_gatt_check_perm+0x6a>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   3adea:	688b      	ldr	r3, [r1, #8]
   3adec:	b313      	cbz	r3, 3ae34 <bt_gatt_check_perm+0x6e>
	mask &= attr->perm;
   3adee:	8a4c      	ldrh	r4, [r1, #18]
   3adf0:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_LESC_MASK) {
   3adf2:	f414 7fc0 	tst.w	r4, #384	; 0x180
   3adf6:	d006      	beq.n	3ae06 <bt_gatt_check_perm+0x40>
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   3adf8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   3adfc:	b1e3      	cbz	r3, 3ae38 <bt_gatt_check_perm+0x72>
		    (conn->le.keys->flags & BT_KEYS_SC) == 0) {
   3adfe:	7b5b      	ldrb	r3, [r3, #13]
		if (!IS_ENABLED(CONFIG_BT_SMP) || !conn->le.keys ||
   3ae00:	f013 0f10 	tst.w	r3, #16
   3ae04:	d01a      	beq.n	3ae3c <bt_gatt_check_perm+0x76>
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   3ae06:	f014 0f30 	tst.w	r4, #48	; 0x30
   3ae0a:	d106      	bne.n	3ae1a <bt_gatt_check_perm+0x54>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   3ae0c:	f014 0f0c 	tst.w	r4, #12
   3ae10:	d016      	beq.n	3ae40 <bt_gatt_check_perm+0x7a>
		if (!conn->encrypt) {
   3ae12:	7aeb      	ldrb	r3, [r5, #11]
   3ae14:	b1b3      	cbz	r3, 3ae44 <bt_gatt_check_perm+0x7e>
	return 0;
   3ae16:	2000      	movs	r0, #0
   3ae18:	e013      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   3ae1a:	4628      	mov	r0, r5
   3ae1c:	f7fe fa9b 	bl	39356 <bt_conn_get_security>
   3ae20:	2802      	cmp	r0, #2
   3ae22:	d8f3      	bhi.n	3ae0c <bt_gatt_check_perm+0x46>
			return BT_ATT_ERR_AUTHENTICATION;
   3ae24:	2005      	movs	r0, #5
   3ae26:	e00c      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   3ae28:	2002      	movs	r0, #2
   3ae2a:	e00a      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
   3ae2c:	2002      	movs	r0, #2
   3ae2e:	e008      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   3ae30:	2003      	movs	r0, #3
   3ae32:	e006      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
   3ae34:	2003      	movs	r0, #3
   3ae36:	e004      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
			return BT_ATT_ERR_AUTHENTICATION;
   3ae38:	2005      	movs	r0, #5
   3ae3a:	e002      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
   3ae3c:	2005      	movs	r0, #5
   3ae3e:	e000      	b.n	3ae42 <bt_gatt_check_perm+0x7c>
	return 0;
   3ae40:	2000      	movs	r0, #0
}
   3ae42:	bd38      	pop	{r3, r4, r5, pc}
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   3ae44:	200f      	movs	r0, #15
   3ae46:	e7fc      	b.n	3ae42 <bt_gatt_check_perm+0x7c>

0003ae48 <bt_gatt_cancel>:
{
   3ae48:	b570      	push	{r4, r5, r6, lr}
   3ae4a:	b082      	sub	sp, #8
   3ae4c:	4604      	mov	r4, r0
   3ae4e:	460d      	mov	r5, r1
	k_sched_lock();
   3ae50:	f7f8 f89e 	bl	32f90 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   3ae54:	4629      	mov	r1, r5
   3ae56:	4620      	mov	r0, r4
   3ae58:	f7ff fb46 	bl	3a4e8 <bt_att_find_req_by_user_data>
	if (req) {
   3ae5c:	b178      	cbz	r0, 3ae7e <bt_gatt_cancel+0x36>
   3ae5e:	4601      	mov	r1, r0
		func = req->func;
   3ae60:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   3ae62:	4620      	mov	r0, r4
   3ae64:	f7ff fb12 	bl	3a48c <bt_att_req_cancel>
	k_sched_unlock();
   3ae68:	f7f8 fde0 	bl	33a2c <k_sched_unlock>
	if (func) {
   3ae6c:	b12e      	cbz	r6, 3ae7a <bt_gatt_cancel+0x32>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   3ae6e:	9500      	str	r5, [sp, #0]
   3ae70:	2300      	movs	r3, #0
   3ae72:	461a      	mov	r2, r3
   3ae74:	210e      	movs	r1, #14
   3ae76:	4620      	mov	r0, r4
   3ae78:	47b0      	blx	r6
}
   3ae7a:	b002      	add	sp, #8
   3ae7c:	bd70      	pop	{r4, r5, r6, pc}
	k_sched_unlock();
   3ae7e:	f7f8 fdd5 	bl	33a2c <k_sched_unlock>
	if (func) {
   3ae82:	e7fa      	b.n	3ae7a <bt_gatt_cancel+0x32>

0003ae84 <bt_gatt_notification>:
{
   3ae84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3ae88:	4680      	mov	r8, r0
   3ae8a:	460f      	mov	r7, r1
   3ae8c:	4691      	mov	r9, r2
   3ae8e:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   3ae90:	f7e8 f9c8 	bl	23224 <gatt_sub_find>
	if (!sub) {
   3ae94:	b350      	cbz	r0, 3aeec <bt_gatt_notification+0x68>
	return list->head;
   3ae96:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3ae98:	b324      	cbz	r4, 3aee4 <bt_gatt_notification+0x60>
   3ae9a:	3c18      	subs	r4, #24
Z_GENLIST_PEEK_NEXT(slist, snode)
   3ae9c:	f114 0518 	adds.w	r5, r4, #24
   3aea0:	d009      	beq.n	3aeb6 <bt_gatt_notification+0x32>
	return node->next;
   3aea2:	69a5      	ldr	r5, [r4, #24]
   3aea4:	b13d      	cbz	r5, 3aeb6 <bt_gatt_notification+0x32>
   3aea6:	3d18      	subs	r5, #24
   3aea8:	e005      	b.n	3aeb6 <bt_gatt_notification+0x32>
   3aeaa:	b1ed      	cbz	r5, 3aee8 <bt_gatt_notification+0x64>
   3aeac:	69ae      	ldr	r6, [r5, #24]
   3aeae:	b106      	cbz	r6, 3aeb2 <bt_gatt_notification+0x2e>
   3aeb0:	3e18      	subs	r6, #24
   3aeb2:	462c      	mov	r4, r5
   3aeb4:	4635      	mov	r5, r6
   3aeb6:	b1cc      	cbz	r4, 3aeec <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   3aeb8:	89a3      	ldrh	r3, [r4, #12]
   3aeba:	429f      	cmp	r7, r3
   3aebc:	d1f5      	bne.n	3aeaa <bt_gatt_notification+0x26>
		if (check_subscribe_security_level(conn, params)) {
   3aebe:	4621      	mov	r1, r4
   3aec0:	4640      	mov	r0, r8
   3aec2:	f7ff fc2f 	bl	3a724 <check_subscribe_security_level>
   3aec6:	2800      	cmp	r0, #0
   3aec8:	d0ef      	beq.n	3aeaa <bt_gatt_notification+0x26>
			if (params->notify(conn, params, data, length) ==
   3aeca:	6826      	ldr	r6, [r4, #0]
   3aecc:	4653      	mov	r3, sl
   3aece:	464a      	mov	r2, r9
   3aed0:	4621      	mov	r1, r4
   3aed2:	4640      	mov	r0, r8
   3aed4:	47b0      	blx	r6
   3aed6:	2800      	cmp	r0, #0
   3aed8:	d1e7      	bne.n	3aeaa <bt_gatt_notification+0x26>
				bt_gatt_unsubscribe(conn, params);
   3aeda:	4621      	mov	r1, r4
   3aedc:	4640      	mov	r0, r8
   3aede:	f7ea fca5 	bl	2582c <bt_gatt_unsubscribe>
   3aee2:	e7e2      	b.n	3aeaa <bt_gatt_notification+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   3aee4:	4625      	mov	r5, r4
   3aee6:	e7e6      	b.n	3aeb6 <bt_gatt_notification+0x32>
   3aee8:	462e      	mov	r6, r5
   3aeea:	e7e2      	b.n	3aeb2 <bt_gatt_notification+0x2e>
}
   3aeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0003aef0 <bt_gatt_change_aware>:
{
   3aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aef2:	4607      	mov	r7, r0
   3aef4:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   3aef6:	f7e8 f923 	bl	23140 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   3aefa:	2800      	cmp	r0, #0
   3aefc:	d044      	beq.n	3af88 <bt_gatt_change_aware+0x98>
   3aefe:	7a02      	ldrb	r2, [r0, #8]
   3af00:	f012 0f01 	tst.w	r2, #1
   3af04:	d102      	bne.n	3af0c <bt_gatt_change_aware+0x1c>
		return true;
   3af06:	2601      	movs	r6, #1
}
   3af08:	4630      	mov	r0, r6
   3af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   3af0c:	f100 050c 	add.w	r5, r0, #12
   3af10:	2100      	movs	r1, #0
   3af12:	4628      	mov	r0, r5
   3af14:	f7ff fc9e 	bl	3a854 <atomic_test_bit>
   3af18:	4606      	mov	r6, r0
   3af1a:	2800      	cmp	r0, #0
   3af1c:	d1f4      	bne.n	3af08 <bt_gatt_change_aware+0x18>
	if (!req) {
   3af1e:	b90c      	cbnz	r4, 3af24 <bt_gatt_change_aware+0x34>
		return false;
   3af20:	4626      	mov	r6, r4
   3af22:	e7f1      	b.n	3af08 <bt_gatt_change_aware+0x18>
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   3af24:	2101      	movs	r1, #1
   3af26:	4628      	mov	r0, r5
   3af28:	f7ff fd50 	bl	3a9cc <atomic_test_and_clear_bit>
   3af2c:	4606      	mov	r6, r0
   3af2e:	b9f8      	cbnz	r0, 3af70 <bt_gatt_change_aware+0x80>
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   3af30:	4638      	mov	r0, r7
   3af32:	f7ff fb02 	bl	3a53a <bt_att_fixed_chan_only>
   3af36:	4606      	mov	r6, r0
   3af38:	2800      	cmp	r0, #0
   3af3a:	d0e5      	beq.n	3af08 <bt_gatt_change_aware+0x18>
   3af3c:	4638      	mov	r0, r7
   3af3e:	f7ff fb17 	bl	3a570 <bt_att_out_of_sync_sent_on_fixed>
   3af42:	4606      	mov	r6, r0
   3af44:	2800      	cmp	r0, #0
   3af46:	d0df      	beq.n	3af08 <bt_gatt_change_aware+0x18>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3af48:	e8d5 3fef 	ldaex	r3, [r5]
   3af4c:	f023 0302 	bic.w	r3, r3, #2
   3af50:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3af54:	2a00      	cmp	r2, #0
   3af56:	d1f7      	bne.n	3af48 <bt_gatt_change_aware+0x58>
		bt_att_clear_out_of_sync_sent(conn);
   3af58:	4638      	mov	r0, r7
   3af5a:	f7ff faf0 	bl	3a53e <bt_att_clear_out_of_sync_sent>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3af5e:	e8d5 3fef 	ldaex	r3, [r5]
   3af62:	f043 0301 	orr.w	r3, r3, #1
   3af66:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3af6a:	2a00      	cmp	r2, #0
   3af6c:	d0cc      	beq.n	3af08 <bt_gatt_change_aware+0x18>
   3af6e:	e7f6      	b.n	3af5e <bt_gatt_change_aware+0x6e>
		bt_att_clear_out_of_sync_sent(conn);
   3af70:	4638      	mov	r0, r7
   3af72:	f7ff fae4 	bl	3a53e <bt_att_clear_out_of_sync_sent>
   3af76:	e8d5 3fef 	ldaex	r3, [r5]
   3af7a:	f043 0301 	orr.w	r3, r3, #1
   3af7e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3af82:	2a00      	cmp	r2, #0
   3af84:	d0c0      	beq.n	3af08 <bt_gatt_change_aware+0x18>
   3af86:	e7f6      	b.n	3af76 <bt_gatt_change_aware+0x86>
		return true;
   3af88:	2601      	movs	r6, #1
   3af8a:	e7bd      	b.n	3af08 <bt_gatt_change_aware+0x18>

0003af8c <ccc_delayed_store>:
{
   3af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3af8e:	4605      	mov	r5, r0
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   3af90:	2400      	movs	r4, #0
   3af92:	b104      	cbz	r4, 3af96 <ccc_delayed_store+0xa>
}
   3af94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = ccc_store->conn_list[i];
   3af96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3af9a:	f853 6c08 	ldr.w	r6, [r3, #-8]
		if (!conn) {
   3af9e:	b136      	cbz	r6, 3afae <ccc_delayed_store+0x22>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   3afa0:	f106 0790 	add.w	r7, r6, #144	; 0x90
   3afa4:	4639      	mov	r1, r7
   3afa6:	7a30      	ldrb	r0, [r6, #8]
   3afa8:	f7fd fce9 	bl	3897e <bt_addr_le_is_bonded>
   3afac:	b908      	cbnz	r0, 3afb2 <ccc_delayed_store+0x26>
	for (size_t i = 0; i < CONFIG_BT_MAX_CONN; i++) {
   3afae:	3401      	adds	r4, #1
   3afb0:	e7ef      	b.n	3af92 <ccc_delayed_store+0x6>
			ccc_store->conn_list[i] = NULL;
   3afb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   3afb6:	2200      	movs	r2, #0
   3afb8:	f843 2c08 	str.w	r2, [r3, #-8]
			bt_gatt_store_ccc(conn->id, &conn->le.dst);
   3afbc:	4639      	mov	r1, r7
   3afbe:	7a30      	ldrb	r0, [r6, #8]
   3afc0:	f7ea fe18 	bl	25bf4 <bt_gatt_store_ccc>
			bt_conn_unref(conn);
   3afc4:	4630      	mov	r0, r6
   3afc6:	f7e5 f977 	bl	202b8 <bt_conn_unref>
   3afca:	e7f0      	b.n	3afae <ccc_delayed_store+0x22>

0003afcc <security_err_get>:
	switch (smp_err) {
   3afcc:	3801      	subs	r0, #1
   3afce:	280e      	cmp	r0, #14
   3afd0:	d815      	bhi.n	3affe <security_err_get+0x32>
   3afd2:	e8df f000 	tbb	[pc, r0]
   3afd6:	1608      	.short	0x1608
   3afd8:	0a0c080a 	.word	0x0a0c080a
   3afdc:	100e140c 	.word	0x100e140c
   3afe0:	0e0e0808 	.word	0x0e0e0808
   3afe4:	12          	.byte	0x12
   3afe5:	00          	.byte	0x00
   3afe6:	2001      	movs	r0, #1
   3afe8:	4770      	bx	lr
		return BT_SECURITY_ERR_AUTH_REQUIREMENT;
   3afea:	2004      	movs	r0, #4
   3afec:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_SUPPORTED;
   3afee:	2005      	movs	r0, #5
   3aff0:	4770      	bx	lr
		return BT_SECURITY_ERR_PAIR_NOT_ALLOWED;
   3aff2:	2006      	movs	r0, #6
   3aff4:	4770      	bx	lr
		return BT_SECURITY_ERR_INVALID_PARAM;
   3aff6:	2007      	movs	r0, #7
   3aff8:	4770      	bx	lr
		return BT_SECURITY_ERR_KEY_REJECTED;
   3affa:	2008      	movs	r0, #8
   3affc:	4770      	bx	lr
		return BT_SECURITY_ERR_UNSPECIFIED;
   3affe:	2009      	movs	r0, #9
   3b000:	4770      	bx	lr
		return BT_SECURITY_ERR_OOB_NOT_AVAILABLE;
   3b002:	2003      	movs	r0, #3
}
   3b004:	4770      	bx	lr

0003b006 <smp_err_get>:
	switch (auth_err) {
   3b006:	1e43      	subs	r3, r0, #1
   3b008:	2b08      	cmp	r3, #8
   3b00a:	d80c      	bhi.n	3b026 <smp_err_get+0x20>
   3b00c:	e8df f003 	tbb	[pc, r3]
   3b010:	0d05090d 	.word	0x0d05090d
   3b014:	0b07090e 	.word	0x0b07090e
   3b018:	09          	.byte	0x09
   3b019:	00          	.byte	0x00
   3b01a:	2002      	movs	r0, #2
   3b01c:	4770      	bx	lr
		return BT_SMP_ERR_INVALID_PARAMS;
   3b01e:	200a      	movs	r0, #10
   3b020:	4770      	bx	lr
		return BT_SMP_ERR_UNSPECIFIED;
   3b022:	2008      	movs	r0, #8
   3b024:	4770      	bx	lr
		return 0;
   3b026:	2000      	movs	r0, #0
   3b028:	4770      	bx	lr
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3b02a:	2003      	movs	r0, #3
}
   3b02c:	4770      	bx	lr

0003b02e <get_encryption_key_size>:
{
   3b02e:	4603      	mov	r3, r0
	return MIN(req->max_key_size, rsp->max_key_size);
   3b030:	7d00      	ldrb	r0, [r0, #20]
   3b032:	7b5b      	ldrb	r3, [r3, #13]
}
   3b034:	4298      	cmp	r0, r3
   3b036:	bf28      	it	cs
   3b038:	4618      	movcs	r0, r3
   3b03a:	4770      	bx	lr

0003b03c <hci_err_get>:
	switch (err) {
   3b03c:	2807      	cmp	r0, #7
   3b03e:	d80d      	bhi.n	3b05c <hci_err_get+0x20>
   3b040:	e8df f000 	tbb	[pc, r0]
   3b044:	0c040e0f 	.word	0x0c040e0f
   3b048:	0a08060c 	.word	0x0a08060c
		return BT_HCI_ERR_PIN_OR_KEY_MISSING;
   3b04c:	2006      	movs	r0, #6
   3b04e:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_SUPPORTED;
   3b050:	2029      	movs	r0, #41	; 0x29
   3b052:	4770      	bx	lr
		return BT_HCI_ERR_PAIRING_NOT_ALLOWED;
   3b054:	2018      	movs	r0, #24
   3b056:	4770      	bx	lr
		return BT_HCI_ERR_INVALID_PARAM;
   3b058:	2012      	movs	r0, #18
   3b05a:	4770      	bx	lr
		return BT_HCI_ERR_UNSPECIFIED;
   3b05c:	201f      	movs	r0, #31
   3b05e:	4770      	bx	lr
		return BT_HCI_ERR_AUTH_FAIL;
   3b060:	2005      	movs	r0, #5
}
   3b062:	4770      	bx	lr

0003b064 <xor_128>:
	size_t len = 16;
   3b064:	2310      	movs	r3, #16
	while (len--) {
   3b066:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
   3b06a:	b17b      	cbz	r3, 3b08c <xor_128+0x28>
{
   3b06c:	b500      	push	{lr}
		*r++ = *p++ ^ *q++;
   3b06e:	f810 3b01 	ldrb.w	r3, [r0], #1
   3b072:	f811 eb01 	ldrb.w	lr, [r1], #1
   3b076:	ea83 030e 	eor.w	r3, r3, lr
   3b07a:	f802 3b01 	strb.w	r3, [r2], #1
	while (len--) {
   3b07e:	4663      	mov	r3, ip
   3b080:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   3b084:	2b00      	cmp	r3, #0
   3b086:	d1f2      	bne.n	3b06e <xor_128+0xa>
}
   3b088:	f85d fb04 	ldr.w	pc, [sp], #4
   3b08c:	4770      	bx	lr

0003b08e <smp_pairing_rsp>:
}
   3b08e:	2007      	movs	r0, #7
   3b090:	4770      	bx	lr

0003b092 <le_sc_oob_data_req_check>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   3b092:	7ac0      	ldrb	r0, [r0, #11]
}
   3b094:	f000 0001 	and.w	r0, r0, #1
   3b098:	4770      	bx	lr

0003b09a <le_sc_oob_data_rsp_check>:
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   3b09a:	7c80      	ldrb	r0, [r0, #18]
}
   3b09c:	f000 0001 	and.w	r0, r0, #1
   3b0a0:	4770      	bx	lr

0003b0a2 <le_sc_oob_config_set>:
{
   3b0a2:	b570      	push	{r4, r5, r6, lr}
   3b0a4:	4606      	mov	r6, r0
   3b0a6:	460c      	mov	r4, r1
	bool req_oob_present = le_sc_oob_data_req_check(smp);
   3b0a8:	f7ff fff3 	bl	3b092 <le_sc_oob_data_req_check>
   3b0ac:	4605      	mov	r5, r0
	bool rsp_oob_present = le_sc_oob_data_rsp_check(smp);
   3b0ae:	4630      	mov	r0, r6
   3b0b0:	f7ff fff3 	bl	3b09a <le_sc_oob_data_rsp_check>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   3b0b4:	b12d      	cbz	r5, 3b0c2 <le_sc_oob_config_set+0x20>
   3b0b6:	2300      	movs	r3, #0
		if (rsp_oob_present) {
   3b0b8:	b108      	cbz	r0, 3b0be <le_sc_oob_config_set+0x1c>
				     BT_CONN_OOB_BOTH_PEERS :
   3b0ba:	b923      	cbnz	r3, 3b0c6 <le_sc_oob_config_set+0x24>
   3b0bc:	2302      	movs	r3, #2
	info->lesc.oob_config = oob_config;
   3b0be:	7063      	strb	r3, [r4, #1]
}
   3b0c0:	bd70      	pop	{r4, r5, r6, pc}
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   3b0c2:	2303      	movs	r3, #3
   3b0c4:	e7f8      	b.n	3b0b8 <le_sc_oob_config_set+0x16>
				     BT_CONN_OOB_BOTH_PEERS :
   3b0c6:	2301      	movs	r3, #1
   3b0c8:	e7f9      	b.n	3b0be <le_sc_oob_config_set+0x1c>

0003b0ca <smp_signing_info>:
}
   3b0ca:	2007      	movs	r0, #7
   3b0cc:	4770      	bx	lr

0003b0ce <smp_security_request>:
}
   3b0ce:	2007      	movs	r0, #7
   3b0d0:	4770      	bx	lr

0003b0d2 <smp_keypress_notif>:
   3b0d2:	e8d0 3fef 	ldaex	r3, [r0]
   3b0d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   3b0da:	e8c0 3fe2 	stlex	r2, r3, [r0]
   3b0de:	2a00      	cmp	r2, #0
   3b0e0:	d1f7      	bne.n	3b0d2 <smp_keypress_notif>
}
   3b0e2:	2000      	movs	r0, #0
   3b0e4:	4770      	bx	lr

0003b0e6 <atomic_test_bit>:
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   3b0e6:	094b      	lsrs	r3, r1, #5
   3b0e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3b0ec:	e8d0 0faf 	lda	r0, [r0]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   3b0f0:	f001 011f 	and.w	r1, r1, #31
   3b0f4:	4108      	asrs	r0, r1
}
   3b0f6:	f000 0001 	and.w	r0, r0, #1
   3b0fa:	4770      	bx	lr

0003b0fc <smp_keys_check>:
{
   3b0fc:	b570      	push	{r4, r5, r6, lr}
   3b0fe:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   3b100:	210b      	movs	r1, #11
   3b102:	3004      	adds	r0, #4
   3b104:	f7ff ffef 	bl	3b0e6 <atomic_test_bit>
   3b108:	bb90      	cbnz	r0, 3b170 <smp_keys_check+0x74>
   3b10a:	4605      	mov	r5, r0
	if (!conn->le.keys) {
   3b10c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   3b110:	b1db      	cbz	r3, 3b14a <smp_keys_check+0x4e>
	if (!conn->le.keys ||
   3b112:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   3b116:	b363      	cbz	r3, 3b172 <smp_keys_check+0x76>
	    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
   3b118:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   3b11a:	f012 0f24 	tst.w	r2, #36	; 0x24
   3b11e:	d028      	beq.n	3b172 <smp_keys_check+0x76>
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   3b120:	7aa1      	ldrb	r1, [r4, #10]
   3b122:	2902      	cmp	r1, #2
   3b124:	d903      	bls.n	3b12e <smp_keys_check+0x32>
	    !(conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   3b126:	7b58      	ldrb	r0, [r3, #13]
	if (conn->required_sec_level >= BT_SECURITY_L3 &&
   3b128:	f010 0f01 	tst.w	r0, #1
   3b12c:	d021      	beq.n	3b172 <smp_keys_check+0x76>
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   3b12e:	2903      	cmp	r1, #3
   3b130:	d921      	bls.n	3b176 <smp_keys_check+0x7a>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   3b132:	7b59      	ldrb	r1, [r3, #13]
	if (conn->required_sec_level >= BT_SECURITY_L4 &&
   3b134:	f011 0f01 	tst.w	r1, #1
   3b138:	d01b      	beq.n	3b172 <smp_keys_check+0x76>
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   3b13a:	f012 0f20 	tst.w	r2, #32
   3b13e:	d018      	beq.n	3b172 <smp_keys_check+0x76>
	      (conn->le.keys->enc_size == BT_SMP_MAX_ENC_KEY_SIZE))) {
   3b140:	7b1b      	ldrb	r3, [r3, #12]
	    !((conn->le.keys->flags & BT_KEYS_AUTHENTICATED) &&
   3b142:	2b10      	cmp	r3, #16
   3b144:	d115      	bne.n	3b172 <smp_keys_check+0x76>
	return true;
   3b146:	2501      	movs	r5, #1
   3b148:	e013      	b.n	3b172 <smp_keys_check+0x76>
						     conn->id, &conn->le.dst);
   3b14a:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   3b14e:	4632      	mov	r2, r6
   3b150:	7a21      	ldrb	r1, [r4, #8]
   3b152:	2020      	movs	r0, #32
   3b154:	f7ed fb1a 	bl	2878c <bt_keys_find>
   3b158:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   3b15c:	2800      	cmp	r0, #0
   3b15e:	d1d8      	bne.n	3b112 <smp_keys_check+0x16>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   3b160:	4632      	mov	r2, r6
   3b162:	7a21      	ldrb	r1, [r4, #8]
   3b164:	2004      	movs	r0, #4
   3b166:	f7ed fb11 	bl	2878c <bt_keys_find>
   3b16a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
   3b16e:	e7d0      	b.n	3b112 <smp_keys_check+0x16>
		return false;
   3b170:	2500      	movs	r5, #0
}
   3b172:	4628      	mov	r0, r5
   3b174:	bd70      	pop	{r4, r5, r6, pc}
	return true;
   3b176:	2501      	movs	r5, #1
   3b178:	e7fb      	b.n	3b172 <smp_keys_check+0x76>

0003b17a <update_keys_check>:
	if (!keys ||
   3b17a:	b301      	cbz	r1, 3b1be <update_keys_check+0x44>
{
   3b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b17e:	4605      	mov	r5, r0
   3b180:	460c      	mov	r4, r1
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   3b182:	89ce      	ldrh	r6, [r1, #14]
	if (!keys ||
   3b184:	f016 0f24 	tst.w	r6, #36	; 0x24
   3b188:	d01b      	beq.n	3b1c2 <update_keys_check+0x48>
	if (keys->enc_size > get_encryption_key_size(smp)) {
   3b18a:	7b0f      	ldrb	r7, [r1, #12]
   3b18c:	f7ff ff4f 	bl	3b02e <get_encryption_key_size>
   3b190:	4287      	cmp	r7, r0
   3b192:	d818      	bhi.n	3b1c6 <update_keys_check+0x4c>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   3b194:	f016 0f20 	tst.w	r6, #32
   3b198:	d10a      	bne.n	3b1b0 <update_keys_check+0x36>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   3b19a:	7b63      	ldrb	r3, [r4, #13]
   3b19c:	f013 0301 	ands.w	r3, r3, #1
   3b1a0:	d001      	beq.n	3b1a6 <update_keys_check+0x2c>
	     smp->method == JUST_WORKS) {
   3b1a2:	7a2a      	ldrb	r2, [r5, #8]
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   3b1a4:	b18a      	cbz	r2, 3b1ca <update_keys_check+0x50>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   3b1a6:	b993      	cbnz	r3, 3b1ce <update_keys_check+0x54>
	     && smp->method == JUST_WORKS)) {
   3b1a8:	7a2b      	ldrb	r3, [r5, #8]
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
   3b1aa:	b193      	cbz	r3, 3b1d2 <update_keys_check+0x58>
	return true;
   3b1ac:	2001      	movs	r0, #1
   3b1ae:	e009      	b.n	3b1c4 <update_keys_check+0x4a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3b1b0:	2105      	movs	r1, #5
   3b1b2:	1d28      	adds	r0, r5, #4
   3b1b4:	f7ff ff97 	bl	3b0e6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   3b1b8:	2800      	cmp	r0, #0
   3b1ba:	d1ee      	bne.n	3b19a <update_keys_check+0x20>
   3b1bc:	e002      	b.n	3b1c4 <update_keys_check+0x4a>
		return true;
   3b1be:	2001      	movs	r0, #1
}
   3b1c0:	4770      	bx	lr
		return true;
   3b1c2:	2001      	movs	r0, #1
}
   3b1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
   3b1c6:	2000      	movs	r0, #0
   3b1c8:	e7fc      	b.n	3b1c4 <update_keys_check+0x4a>
		return false;
   3b1ca:	2000      	movs	r0, #0
   3b1cc:	e7fa      	b.n	3b1c4 <update_keys_check+0x4a>
	return true;
   3b1ce:	2001      	movs	r0, #1
   3b1d0:	e7f8      	b.n	3b1c4 <update_keys_check+0x4a>
			return false;
   3b1d2:	2000      	movs	r0, #0
   3b1d4:	e7f6      	b.n	3b1c4 <update_keys_check+0x4a>

0003b1d6 <remote_sec_level_reachable>:
{
   3b1d6:	b510      	push	{r4, lr}
   3b1d8:	4604      	mov	r4, r0
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   3b1da:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   3b1de:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
   3b1e0:	2b03      	cmp	r3, #3
   3b1e2:	d015      	beq.n	3b210 <remote_sec_level_reachable+0x3a>
   3b1e4:	d807      	bhi.n	3b1f6 <remote_sec_level_reachable+0x20>
   3b1e6:	3b01      	subs	r3, #1
   3b1e8:	b2db      	uxtb	r3, r3
   3b1ea:	2b01      	cmp	r3, #1
   3b1ec:	d801      	bhi.n	3b1f2 <remote_sec_level_reachable+0x1c>
   3b1ee:	2000      	movs	r0, #0
}
   3b1f0:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   3b1f2:	2008      	movs	r0, #8
   3b1f4:	e7fc      	b.n	3b1f0 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   3b1f6:	2b04      	cmp	r3, #4
   3b1f8:	d10e      	bne.n	3b218 <remote_sec_level_reachable+0x42>
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   3b1fa:	f7ff ff18 	bl	3b02e <get_encryption_key_size>
   3b1fe:	2810      	cmp	r0, #16
   3b200:	d001      	beq.n	3b206 <remote_sec_level_reachable+0x30>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   3b202:	2006      	movs	r0, #6
   3b204:	e7f4      	b.n	3b1f0 <remote_sec_level_reachable+0x1a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3b206:	2105      	movs	r1, #5
   3b208:	1d20      	adds	r0, r4, #4
   3b20a:	f7ff ff6c 	bl	3b0e6 <atomic_test_bit>
   3b20e:	b128      	cbz	r0, 3b21c <remote_sec_level_reachable+0x46>
		if (smp->method == JUST_WORKS) {
   3b210:	7a23      	ldrb	r3, [r4, #8]
   3b212:	b12b      	cbz	r3, 3b220 <remote_sec_level_reachable+0x4a>
		return 0;
   3b214:	2000      	movs	r0, #0
   3b216:	e7eb      	b.n	3b1f0 <remote_sec_level_reachable+0x1a>
		return BT_SMP_ERR_UNSPECIFIED;
   3b218:	2008      	movs	r0, #8
   3b21a:	e7e9      	b.n	3b1f0 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3b21c:	2003      	movs	r0, #3
   3b21e:	e7e7      	b.n	3b1f0 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   3b220:	2003      	movs	r0, #3
   3b222:	e7e5      	b.n	3b1f0 <remote_sec_level_reachable+0x1a>

0003b224 <smp_reset>:
{
   3b224:	b538      	push	{r3, r4, r5, lr}
   3b226:	4604      	mov	r4, r0
	atomic_set(smp->flags, 0);
   3b228:	1d03      	adds	r3, r0, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   3b22a:	2500      	movs	r5, #0
   3b22c:	e8d3 2fef 	ldaex	r2, [r3]
   3b230:	e8c3 5fe1 	stlex	r1, r5, [r3]
   3b234:	2900      	cmp	r1, #0
   3b236:	d1f9      	bne.n	3b22c <smp_reset+0x8>
	(void)k_work_cancel_delayable(&smp->work);
   3b238:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   3b23c:	f7f7 fc16 	bl	32a6c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   3b240:	7225      	strb	r5, [r4, #8]
   3b242:	e8d4 3fef 	ldaex	r3, [r4]
   3b246:	e8c4 5fe2 	stlex	r2, r5, [r4]
   3b24a:	2a00      	cmp	r2, #0
   3b24c:	d1f9      	bne.n	3b242 <smp_reset+0x1e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b24e:	e8d4 3fef 	ldaex	r3, [r4]
   3b252:	f043 0302 	orr.w	r3, r3, #2
   3b256:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b25a:	2a00      	cmp	r2, #0
   3b25c:	d1f7      	bne.n	3b24e <smp_reset+0x2a>
}
   3b25e:	bd38      	pop	{r3, r4, r5, pc}

0003b260 <smp_c1>:
{
   3b260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b264:	b089      	sub	sp, #36	; 0x24
   3b266:	4605      	mov	r5, r0
   3b268:	460e      	mov	r6, r1
   3b26a:	4611      	mov	r1, r2
   3b26c:	461f      	mov	r7, r3
   3b26e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   3b272:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   3b276:	9c12      	ldr	r4, [sp, #72]	; 0x48
	p1[0] = ia->type;
   3b278:	f898 3000 	ldrb.w	r3, [r8]
   3b27c:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
   3b280:	f899 3000 	ldrb.w	r3, [r9]
   3b284:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
   3b288:	2207      	movs	r2, #7
   3b28a:	f10d 0012 	add.w	r0, sp, #18
   3b28e:	f7fd f8b4 	bl	383fa <memcpy>
	memcpy(p1 + 9, pres, 7);
   3b292:	2207      	movs	r2, #7
   3b294:	4639      	mov	r1, r7
   3b296:	f10d 0019 	add.w	r0, sp, #25
   3b29a:	f7fd f8ae 	bl	383fa <memcpy>
	xor_128(r, p1, enc_data);
   3b29e:	4622      	mov	r2, r4
   3b2a0:	a904      	add	r1, sp, #16
   3b2a2:	4630      	mov	r0, r6
   3b2a4:	f7ff fede 	bl	3b064 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
   3b2a8:	4622      	mov	r2, r4
   3b2aa:	4621      	mov	r1, r4
   3b2ac:	4628      	mov	r0, r5
   3b2ae:	f7fd fe52 	bl	38f56 <bt_encrypt_le>
	if (err) {
   3b2b2:	b110      	cbz	r0, 3b2ba <smp_c1+0x5a>
}
   3b2b4:	b009      	add	sp, #36	; 0x24
   3b2b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	memcpy(p2, ra->a.val, 6);
   3b2ba:	2206      	movs	r2, #6
   3b2bc:	f109 0101 	add.w	r1, r9, #1
   3b2c0:	4668      	mov	r0, sp
   3b2c2:	f7fd f89a 	bl	383fa <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   3b2c6:	2206      	movs	r2, #6
   3b2c8:	f108 0101 	add.w	r1, r8, #1
   3b2cc:	eb0d 0002 	add.w	r0, sp, r2
   3b2d0:	f7fd f893 	bl	383fa <memcpy>
	(void)memset(p2 + 12, 0, 4);
   3b2d4:	2204      	movs	r2, #4
   3b2d6:	2100      	movs	r1, #0
   3b2d8:	a803      	add	r0, sp, #12
   3b2da:	f7fd f8bd 	bl	38458 <memset>
	xor_128(enc_data, p2, enc_data);
   3b2de:	4622      	mov	r2, r4
   3b2e0:	4669      	mov	r1, sp
   3b2e2:	4620      	mov	r0, r4
   3b2e4:	f7ff febe 	bl	3b064 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
   3b2e8:	4622      	mov	r2, r4
   3b2ea:	4621      	mov	r1, r4
   3b2ec:	4628      	mov	r0, r5
   3b2ee:	f7fd fe32 	bl	38f56 <bt_encrypt_le>
   3b2f2:	e7df      	b.n	3b2b4 <smp_c1+0x54>

0003b2f4 <smp_s1>:
{
   3b2f4:	b570      	push	{r4, r5, r6, lr}
   3b2f6:	4605      	mov	r5, r0
   3b2f8:	460e      	mov	r6, r1
   3b2fa:	4611      	mov	r1, r2
   3b2fc:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
   3b2fe:	2208      	movs	r2, #8
   3b300:	4618      	mov	r0, r3
   3b302:	f7fd f87a 	bl	383fa <memcpy>
	memcpy(out + 8, r1, 8);
   3b306:	2208      	movs	r2, #8
   3b308:	4631      	mov	r1, r6
   3b30a:	18a0      	adds	r0, r4, r2
   3b30c:	f7fd f875 	bl	383fa <memcpy>
	return bt_encrypt_le(k, out, out);
   3b310:	4622      	mov	r2, r4
   3b312:	4621      	mov	r1, r4
   3b314:	4628      	mov	r0, r5
   3b316:	f7fd fe1e 	bl	38f56 <bt_encrypt_le>
}
   3b31a:	bd70      	pop	{r4, r5, r6, pc}

0003b31c <atomic_test_and_clear_bit>:
{
   3b31c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   3b31e:	f001 021f 	and.w	r2, r1, #31
   3b322:	2301      	movs	r3, #1
   3b324:	4093      	lsls	r3, r2
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   3b326:	0949      	lsrs	r1, r1, #5
   3b328:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3b32c:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b32e:	e8d0 2fef 	ldaex	r2, [r0]
   3b332:	ea02 0c01 	and.w	ip, r2, r1
   3b336:	e8c0 cfee 	stlex	lr, ip, [r0]
   3b33a:	f1be 0f00 	cmp.w	lr, #0
   3b33e:	d1f6      	bne.n	3b32e <atomic_test_and_clear_bit+0x12>
	return (old & mask) != 0;
   3b340:	4213      	tst	r3, r2
}
   3b342:	bf14      	ite	ne
   3b344:	2001      	movne	r0, #1
   3b346:	2000      	moveq	r0, #0
   3b348:	f85d fb04 	ldr.w	pc, [sp], #4

0003b34c <smp_create_pdu>:
{
   3b34c:	b570      	push	{r4, r5, r6, lr}
   3b34e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   3b350:	1d04      	adds	r4, r0, #4
   3b352:	2104      	movs	r1, #4
   3b354:	4620      	mov	r0, r4
   3b356:	f7ff fec6 	bl	3b0e6 <atomic_test_bit>
   3b35a:	b170      	cbz	r0, 3b37a <smp_create_pdu+0x2e>
		timeout = K_NO_WAIT;
   3b35c:	2200      	movs	r2, #0
   3b35e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   3b360:	2100      	movs	r1, #0
   3b362:	4608      	mov	r0, r1
   3b364:	f7fe f8ed 	bl	39542 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   3b368:	4605      	mov	r5, r0
   3b36a:	b150      	cbz	r0, 3b382 <smp_create_pdu+0x36>
	return net_buf_simple_add(&buf->b, len);
   3b36c:	2101      	movs	r1, #1
   3b36e:	300c      	adds	r0, #12
   3b370:	f7ee fab6 	bl	298e0 <net_buf_simple_add>
	hdr->code = op;
   3b374:	7006      	strb	r6, [r0, #0]
}
   3b376:	4628      	mov	r0, r5
   3b378:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   3b37a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   3b37e:	2300      	movs	r3, #0
   3b380:	e7ee      	b.n	3b360 <smp_create_pdu+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b382:	e8d4 3fef 	ldaex	r3, [r4]
   3b386:	f043 0310 	orr.w	r3, r3, #16
   3b38a:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b38e:	2a00      	cmp	r2, #0
   3b390:	d0f1      	beq.n	3b376 <smp_create_pdu+0x2a>
   3b392:	e7f6      	b.n	3b382 <smp_create_pdu+0x36>

0003b394 <smp_send>:
{
   3b394:	b530      	push	{r4, r5, lr}
   3b396:	b083      	sub	sp, #12
   3b398:	4604      	mov	r4, r0
   3b39a:	460d      	mov	r5, r1
   3b39c:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   3b39e:	2200      	movs	r2, #0
   3b3a0:	9200      	str	r2, [sp, #0]
   3b3a2:	460a      	mov	r2, r1
   3b3a4:	2106      	movs	r1, #6
   3b3a6:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   3b3aa:	f7fe f8cf 	bl	3954c <bt_l2cap_send_cb>
   3b3ae:	b940      	cbnz	r0, 3b3c2 <smp_send+0x2e>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   3b3b0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   3b3b4:	2300      	movs	r3, #0
   3b3b6:	f504 70c0 	add.w	r0, r4, #384	; 0x180
   3b3ba:	f7f7 fb4f 	bl	32a5c <k_work_reschedule>
}
   3b3be:	b003      	add	sp, #12
   3b3c0:	bd30      	pop	{r4, r5, pc}
		net_buf_unref(buf);
   3b3c2:	4628      	mov	r0, r5
   3b3c4:	f7ee f96e 	bl	296a4 <net_buf_unref>
		return;
   3b3c8:	e7f9      	b.n	3b3be <smp_send+0x2a>

0003b3ca <legacy_send_pairing_confirm>:
{
   3b3ca:	b570      	push	{r4, r5, r6, lr}
   3b3cc:	b084      	sub	sp, #16
   3b3ce:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   3b3d0:	f8d0 50ec 	ldr.w	r5, [r0, #236]	; 0xec
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   3b3d4:	2210      	movs	r2, #16
   3b3d6:	2103      	movs	r1, #3
   3b3d8:	f7ff ffb8 	bl	3b34c <smp_create_pdu>
	if (!buf) {
   3b3dc:	b360      	cbz	r0, 3b438 <legacy_send_pairing_confirm+0x6e>
   3b3de:	4606      	mov	r6, r0
   3b3e0:	2110      	movs	r1, #16
   3b3e2:	300c      	adds	r0, #12
   3b3e4:	f7ee fa7c 	bl	298e0 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   3b3e8:	f105 0397 	add.w	r3, r5, #151	; 0x97
   3b3ec:	359e      	adds	r5, #158	; 0x9e
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   3b3ee:	9002      	str	r0, [sp, #8]
   3b3f0:	9501      	str	r5, [sp, #4]
   3b3f2:	9300      	str	r3, [sp, #0]
   3b3f4:	f104 0310 	add.w	r3, r4, #16
   3b3f8:	f104 0209 	add.w	r2, r4, #9
   3b3fc:	f104 0127 	add.w	r1, r4, #39	; 0x27
   3b400:	f104 0047 	add.w	r0, r4, #71	; 0x47
   3b404:	f7ff ff2c 	bl	3b260 <smp_c1>
   3b408:	b988      	cbnz	r0, 3b42e <legacy_send_pairing_confirm+0x64>
	smp_send(smp, buf, NULL, NULL);
   3b40a:	2300      	movs	r3, #0
   3b40c:	461a      	mov	r2, r3
   3b40e:	4631      	mov	r1, r6
   3b410:	4620      	mov	r0, r4
   3b412:	f7ff ffbf 	bl	3b394 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   3b416:	3404      	adds	r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b418:	e8d4 3fef 	ldaex	r3, [r4]
   3b41c:	f023 0301 	bic.w	r3, r3, #1
   3b420:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b424:	2a00      	cmp	r2, #0
   3b426:	d1f7      	bne.n	3b418 <legacy_send_pairing_confirm+0x4e>
	return 0;
   3b428:	2000      	movs	r0, #0
}
   3b42a:	b004      	add	sp, #16
   3b42c:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   3b42e:	4630      	mov	r0, r6
   3b430:	f7ee f938 	bl	296a4 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   3b434:	2008      	movs	r0, #8
   3b436:	e7f8      	b.n	3b42a <legacy_send_pairing_confirm+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
   3b438:	2008      	movs	r0, #8
   3b43a:	e7f6      	b.n	3b42a <legacy_send_pairing_confirm+0x60>

0003b43c <legacy_pairing_confirm>:
{
   3b43c:	b538      	push	{r3, r4, r5, lr}
   3b43e:	4604      	mov	r4, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   3b440:	1d05      	adds	r5, r0, #4
   3b442:	210a      	movs	r1, #10
   3b444:	4628      	mov	r0, r5
   3b446:	f7ff fe4e 	bl	3b0e6 <atomic_test_bit>
   3b44a:	b148      	cbz	r0, 3b460 <legacy_pairing_confirm+0x24>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b44c:	e8d5 3fef 	ldaex	r3, [r5]
   3b450:	f043 0301 	orr.w	r3, r3, #1
   3b454:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b458:	2a00      	cmp	r2, #0
   3b45a:	d1f7      	bne.n	3b44c <legacy_pairing_confirm+0x10>
	return 0;
   3b45c:	2000      	movs	r0, #0
}
   3b45e:	bd38      	pop	{r3, r4, r5, pc}
   3b460:	e8d4 3fef 	ldaex	r3, [r4]
   3b464:	f043 0310 	orr.w	r3, r3, #16
   3b468:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b46c:	2a00      	cmp	r2, #0
   3b46e:	d1f7      	bne.n	3b460 <legacy_pairing_confirm+0x24>
			return legacy_send_pairing_confirm(smp);
   3b470:	4620      	mov	r0, r4
   3b472:	f7ff ffaa 	bl	3b3ca <legacy_send_pairing_confirm>
   3b476:	e7f2      	b.n	3b45e <legacy_pairing_confirm+0x22>

0003b478 <sc_smp_send_dhkey_check>:
{
   3b478:	b570      	push	{r4, r5, r6, lr}
   3b47a:	4604      	mov	r4, r0
   3b47c:	460d      	mov	r5, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   3b47e:	2210      	movs	r2, #16
   3b480:	210d      	movs	r1, #13
   3b482:	f7ff ff63 	bl	3b34c <smp_create_pdu>
	if (!buf) {
   3b486:	b180      	cbz	r0, 3b4aa <sc_smp_send_dhkey_check+0x32>
   3b488:	4606      	mov	r6, r0
   3b48a:	2110      	movs	r1, #16
   3b48c:	300c      	adds	r0, #12
   3b48e:	f7ee fa27 	bl	298e0 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
   3b492:	2210      	movs	r2, #16
   3b494:	4629      	mov	r1, r5
   3b496:	f7fc ffb0 	bl	383fa <memcpy>
	smp_send(smp, buf, NULL, NULL);
   3b49a:	2300      	movs	r3, #0
   3b49c:	461a      	mov	r2, r3
   3b49e:	4631      	mov	r1, r6
   3b4a0:	4620      	mov	r0, r4
   3b4a2:	f7ff ff77 	bl	3b394 <smp_send>
	return 0;
   3b4a6:	2000      	movs	r0, #0
}
   3b4a8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   3b4aa:	2008      	movs	r0, #8
   3b4ac:	e7fc      	b.n	3b4a8 <sc_smp_send_dhkey_check+0x30>

0003b4ae <smp_send_pairing_random>:
{
   3b4ae:	b538      	push	{r3, r4, r5, lr}
   3b4b0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   3b4b2:	2210      	movs	r2, #16
   3b4b4:	2104      	movs	r1, #4
   3b4b6:	f7ff ff49 	bl	3b34c <smp_create_pdu>
	if (!rsp_buf) {
   3b4ba:	b188      	cbz	r0, 3b4e0 <smp_send_pairing_random+0x32>
   3b4bc:	4605      	mov	r5, r0
   3b4be:	2110      	movs	r1, #16
   3b4c0:	300c      	adds	r0, #12
   3b4c2:	f7ee fa0d 	bl	298e0 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   3b4c6:	2210      	movs	r2, #16
   3b4c8:	f104 0127 	add.w	r1, r4, #39	; 0x27
   3b4cc:	f7fc ff95 	bl	383fa <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   3b4d0:	2300      	movs	r3, #0
   3b4d2:	461a      	mov	r2, r3
   3b4d4:	4629      	mov	r1, r5
   3b4d6:	4620      	mov	r0, r4
   3b4d8:	f7ff ff5c 	bl	3b394 <smp_send>
	return 0;
   3b4dc:	2000      	movs	r0, #0
}
   3b4de:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   3b4e0:	2008      	movs	r0, #8
   3b4e2:	e7fc      	b.n	3b4de <smp_send_pairing_random+0x30>

0003b4e4 <send_pairing_rsp>:
{
   3b4e4:	b538      	push	{r3, r4, r5, lr}
   3b4e6:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   3b4e8:	2206      	movs	r2, #6
   3b4ea:	2102      	movs	r1, #2
   3b4ec:	f7ff ff2e 	bl	3b34c <smp_create_pdu>
	if (!rsp_buf) {
   3b4f0:	b188      	cbz	r0, 3b516 <send_pairing_rsp+0x32>
   3b4f2:	4605      	mov	r5, r0
   3b4f4:	2106      	movs	r1, #6
   3b4f6:	300c      	adds	r0, #12
   3b4f8:	f7ee f9f2 	bl	298e0 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   3b4fc:	2206      	movs	r2, #6
   3b4fe:	f104 0111 	add.w	r1, r4, #17
   3b502:	f7fc ff7a 	bl	383fa <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   3b506:	2300      	movs	r3, #0
   3b508:	461a      	mov	r2, r3
   3b50a:	4629      	mov	r1, r5
   3b50c:	4620      	mov	r0, r4
   3b50e:	f7ff ff41 	bl	3b394 <smp_send>
	return 0;
   3b512:	2000      	movs	r0, #0
}
   3b514:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   3b516:	2008      	movs	r0, #8
   3b518:	e7fc      	b.n	3b514 <send_pairing_rsp+0x30>

0003b51a <smp_dhkey_check>:
{
   3b51a:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   3b51c:	68c9      	ldr	r1, [r1, #12]
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
   3b51e:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   3b522:	78db      	ldrb	r3, [r3, #3]
   3b524:	2b01      	cmp	r3, #1
   3b526:	d001      	beq.n	3b52c <smp_dhkey_check+0x12>
	return 0;
   3b528:	2000      	movs	r0, #0
}
   3b52a:	bd38      	pop	{r3, r4, r5, pc}
   3b52c:	4604      	mov	r4, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   3b52e:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b530:	e8d5 3fef 	ldaex	r3, [r5]
   3b534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3b538:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b53c:	2a00      	cmp	r2, #0
   3b53e:	d1f7      	bne.n	3b530 <smp_dhkey_check+0x16>
		memcpy(smp->e, req->e, sizeof(smp->e));
   3b540:	2210      	movs	r2, #16
   3b542:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   3b546:	f7fc ff58 	bl	383fa <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   3b54a:	2107      	movs	r1, #7
   3b54c:	4628      	mov	r0, r5
   3b54e:	f7ff fdca 	bl	3b0e6 <atomic_test_bit>
   3b552:	b970      	cbnz	r0, 3b572 <smp_dhkey_check+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   3b554:	210a      	movs	r1, #10
   3b556:	4628      	mov	r0, r5
   3b558:	f7ff fdc5 	bl	3b0e6 <atomic_test_bit>
   3b55c:	b198      	cbz	r0, 3b586 <smp_dhkey_check+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b55e:	e8d5 3fef 	ldaex	r3, [r5]
   3b562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3b566:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b56a:	2a00      	cmp	r2, #0
   3b56c:	d1f7      	bne.n	3b55e <smp_dhkey_check+0x44>
			return 0;
   3b56e:	2000      	movs	r0, #0
   3b570:	e7db      	b.n	3b52a <smp_dhkey_check+0x10>
   3b572:	e8d5 3fef 	ldaex	r3, [r5]
   3b576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3b57a:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b57e:	2a00      	cmp	r2, #0
   3b580:	d1f7      	bne.n	3b572 <smp_dhkey_check+0x58>
			return 0;
   3b582:	2000      	movs	r0, #0
   3b584:	e7d1      	b.n	3b52a <smp_dhkey_check+0x10>
		return compute_and_check_and_send_periph_dhcheck(smp);
   3b586:	4620      	mov	r0, r4
   3b588:	f7eb f832 	bl	265f0 <compute_and_check_and_send_periph_dhcheck>
   3b58c:	e7cd      	b.n	3b52a <smp_dhkey_check+0x10>

0003b58e <smp_dhkey_ready>:
	if (!dhkey) {
   3b58e:	b3d1      	cbz	r1, 3b606 <smp_dhkey_ready+0x78>
{
   3b590:	b538      	push	{r3, r4, r5, lr}
   3b592:	4605      	mov	r5, r0
   3b594:	460b      	mov	r3, r1
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   3b596:	1d04      	adds	r4, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b598:	e8d4 2fef 	ldaex	r2, [r4]
   3b59c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   3b5a0:	e8c4 2fe1 	stlex	r1, r2, [r4]
   3b5a4:	2900      	cmp	r1, #0
   3b5a6:	d1f7      	bne.n	3b598 <smp_dhkey_ready+0xa>
	memcpy(smp->dhkey, dhkey, BT_DH_KEY_LEN);
   3b5a8:	2220      	movs	r2, #32
   3b5aa:	4619      	mov	r1, r3
   3b5ac:	f105 0097 	add.w	r0, r5, #151	; 0x97
   3b5b0:	f7fc ff23 	bl	383fa <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   3b5b4:	210a      	movs	r1, #10
   3b5b6:	4620      	mov	r0, r4
   3b5b8:	f7ff fd95 	bl	3b0e6 <atomic_test_bit>
   3b5bc:	b958      	cbnz	r0, 3b5d6 <smp_dhkey_ready+0x48>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   3b5be:	2110      	movs	r1, #16
   3b5c0:	4620      	mov	r0, r4
   3b5c2:	f7ff fd90 	bl	3b0e6 <atomic_test_bit>
   3b5c6:	b980      	cbnz	r0, 3b5ea <smp_dhkey_ready+0x5c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   3b5c8:	2109      	movs	r1, #9
   3b5ca:	4620      	mov	r0, r4
   3b5cc:	f7ff fd8b 	bl	3b0e6 <atomic_test_bit>
   3b5d0:	b9a8      	cbnz	r0, 3b5fe <smp_dhkey_ready+0x70>
	return 0;
   3b5d2:	2000      	movs	r0, #0
   3b5d4:	e008      	b.n	3b5e8 <smp_dhkey_ready+0x5a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3b5d6:	e8d4 3fef 	ldaex	r3, [r4]
   3b5da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3b5de:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b5e2:	2a00      	cmp	r2, #0
   3b5e4:	d1f7      	bne.n	3b5d6 <smp_dhkey_ready+0x48>
		return 0;
   3b5e6:	2000      	movs	r0, #0
}
   3b5e8:	bd38      	pop	{r3, r4, r5, pc}
   3b5ea:	e8d4 3fef 	ldaex	r3, [r4]
   3b5ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   3b5f2:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b5f6:	2a00      	cmp	r2, #0
   3b5f8:	d1f7      	bne.n	3b5ea <smp_dhkey_ready+0x5c>
		return 0;
   3b5fa:	2000      	movs	r0, #0
   3b5fc:	e7f4      	b.n	3b5e8 <smp_dhkey_ready+0x5a>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   3b5fe:	4628      	mov	r0, r5
   3b600:	f7ea fff6 	bl	265f0 <compute_and_check_and_send_periph_dhcheck>
   3b604:	e7f0      	b.n	3b5e8 <smp_dhkey_ready+0x5a>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   3b606:	200b      	movs	r0, #11
}
   3b608:	4770      	bx	lr

0003b60a <update_debug_keys_check>:
{
   3b60a:	b510      	push	{r4, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   3b60c:	f8d0 40ec 	ldr.w	r4, [r0, #236]	; 0xec
	if (!conn->le.keys) {
   3b610:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   3b614:	b163      	cbz	r3, 3b630 <update_debug_keys_check+0x26>
	if (!conn->le.keys ||
   3b616:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   3b61a:	b18b      	cbz	r3, 3b640 <update_debug_keys_check+0x36>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   3b61c:	89da      	ldrh	r2, [r3, #14]
	if (!conn->le.keys ||
   3b61e:	f012 0f24 	tst.w	r2, #36	; 0x24
   3b622:	d00f      	beq.n	3b644 <update_debug_keys_check+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
   3b624:	7b5b      	ldrb	r3, [r3, #13]
   3b626:	f013 0f02 	tst.w	r3, #2
   3b62a:	d10d      	bne.n	3b648 <update_debug_keys_check+0x3e>
	return false;
   3b62c:	2000      	movs	r0, #0
}
   3b62e:	bd10      	pop	{r4, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   3b630:	f104 0190 	add.w	r1, r4, #144	; 0x90
   3b634:	7a20      	ldrb	r0, [r4, #8]
   3b636:	f7ed f825 	bl	28684 <bt_keys_get_addr>
   3b63a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
   3b63e:	e7ea      	b.n	3b616 <update_debug_keys_check+0xc>
		return true;
   3b640:	2001      	movs	r0, #1
   3b642:	e7f4      	b.n	3b62e <update_debug_keys_check+0x24>
   3b644:	2001      	movs	r0, #1
   3b646:	e7f2      	b.n	3b62e <update_debug_keys_check+0x24>
		return true;
   3b648:	2001      	movs	r0, #1
   3b64a:	e7f0      	b.n	3b62e <update_debug_keys_check+0x24>

0003b64c <smp_send_security_req>:
{
   3b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b650:	b082      	sub	sp, #8
   3b652:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   3b654:	f7ea fbd4 	bl	25e00 <smp_chan_get>
	if (!smp) {
   3b658:	2800      	cmp	r0, #0
   3b65a:	d067      	beq.n	3b72c <smp_send_security_req+0xe0>
   3b65c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   3b65e:	1d06      	adds	r6, r0, #4
   3b660:	2104      	movs	r1, #4
   3b662:	4630      	mov	r0, r6
   3b664:	f7ff fd3f 	bl	3b0e6 <atomic_test_bit>
   3b668:	2800      	cmp	r0, #0
   3b66a:	d162      	bne.n	3b732 <smp_send_security_req+0xe6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3b66c:	2103      	movs	r1, #3
   3b66e:	4630      	mov	r0, r6
   3b670:	f7ff fd39 	bl	3b0e6 <atomic_test_bit>
   3b674:	2800      	cmp	r0, #0
   3b676:	d15f      	bne.n	3b738 <smp_send_security_req+0xec>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3b678:	2101      	movs	r1, #1
   3b67a:	4630      	mov	r0, r6
   3b67c:	f7ff fd33 	bl	3b0e6 <atomic_test_bit>
   3b680:	2800      	cmp	r0, #0
   3b682:	d15c      	bne.n	3b73e <smp_send_security_req+0xf2>
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   3b684:	4620      	mov	r0, r4
   3b686:	f7ea fd2b 	bl	260e0 <sec_level_reachable>
   3b68a:	b3b8      	cbz	r0, 3b6fc <smp_send_security_req+0xb0>
	if (!conn->le.keys) {
   3b68c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   3b690:	2b00      	cmp	r3, #0
   3b692:	d03b      	beq.n	3b70c <smp_send_security_req+0xc0>
	if (smp_init(smp) != 0) {
   3b694:	4620      	mov	r0, r4
   3b696:	f7eb f933 	bl	26900 <smp_init>
   3b69a:	2800      	cmp	r0, #0
   3b69c:	d152      	bne.n	3b744 <smp_send_security_req+0xf8>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   3b69e:	2201      	movs	r2, #1
   3b6a0:	210b      	movs	r1, #11
   3b6a2:	4620      	mov	r0, r4
   3b6a4:	f7ff fe52 	bl	3b34c <smp_create_pdu>
	if (!req_buf) {
   3b6a8:	4680      	mov	r8, r0
   3b6aa:	2800      	cmp	r0, #0
   3b6ac:	d04d      	beq.n	3b74a <smp_send_security_req+0xfe>
   3b6ae:	2101      	movs	r1, #1
   3b6b0:	300c      	adds	r0, #12
   3b6b2:	f7ee f915 	bl	298e0 <net_buf_simple_add>
   3b6b6:	4607      	mov	r7, r0
	req->auth_req = get_auth(smp, BT_SMP_AUTH_DEFAULT);
   3b6b8:	2109      	movs	r1, #9
   3b6ba:	4620      	mov	r0, r4
   3b6bc:	f7ea fc96 	bl	25fec <get_auth>
   3b6c0:	7038      	strb	r0, [r7, #0]
   3b6c2:	2300      	movs	r3, #0
   3b6c4:	9300      	str	r3, [sp, #0]
   3b6c6:	4642      	mov	r2, r8
   3b6c8:	2106      	movs	r1, #6
   3b6ca:	4628      	mov	r0, r5
   3b6cc:	f7fd ff3e 	bl	3954c <bt_l2cap_send_cb>
	if (err) {
   3b6d0:	4605      	mov	r5, r0
   3b6d2:	bb38      	cbnz	r0, 3b724 <smp_send_security_req+0xd8>
   3b6d4:	e8d6 3fef 	ldaex	r3, [r6]
   3b6d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   3b6dc:	e8c6 3fe2 	stlex	r2, r3, [r6]
   3b6e0:	2a00      	cmp	r2, #0
   3b6e2:	d1f7      	bne.n	3b6d4 <smp_send_security_req+0x88>
   3b6e4:	e8d4 3fef 	ldaex	r3, [r4]
   3b6e8:	f043 0302 	orr.w	r3, r3, #2
   3b6ec:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b6f0:	2a00      	cmp	r2, #0
   3b6f2:	d1f7      	bne.n	3b6e4 <smp_send_security_req+0x98>
}
   3b6f4:	4628      	mov	r0, r5
   3b6f6:	b002      	add	sp, #8
   3b6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(sec_level_reachable(smp) || smp_keys_check(conn))) {
   3b6fc:	4628      	mov	r0, r5
   3b6fe:	f7ff fcfd 	bl	3b0fc <smp_keys_check>
   3b702:	2800      	cmp	r0, #0
   3b704:	d1c2      	bne.n	3b68c <smp_send_security_req+0x40>
		return -EINVAL;
   3b706:	f06f 0515 	mvn.w	r5, #21
   3b70a:	e7f3      	b.n	3b6f4 <smp_send_security_req+0xa8>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   3b70c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   3b710:	7a28      	ldrb	r0, [r5, #8]
   3b712:	f7ec ffb7 	bl	28684 <bt_keys_get_addr>
   3b716:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
		if (!conn->le.keys) {
   3b71a:	2800      	cmp	r0, #0
   3b71c:	d1ba      	bne.n	3b694 <smp_send_security_req+0x48>
			return -ENOMEM;
   3b71e:	f06f 050b 	mvn.w	r5, #11
   3b722:	e7e7      	b.n	3b6f4 <smp_send_security_req+0xa8>
		net_buf_unref(req_buf);
   3b724:	4640      	mov	r0, r8
   3b726:	f7ed ffbd 	bl	296a4 <net_buf_unref>
		return err;
   3b72a:	e7e3      	b.n	3b6f4 <smp_send_security_req+0xa8>
		return -ENOTCONN;
   3b72c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   3b730:	e7e0      	b.n	3b6f4 <smp_send_security_req+0xa8>
		return -EIO;
   3b732:	f06f 0504 	mvn.w	r5, #4
   3b736:	e7dd      	b.n	3b6f4 <smp_send_security_req+0xa8>
		return -EBUSY;
   3b738:	f06f 050f 	mvn.w	r5, #15
   3b73c:	e7da      	b.n	3b6f4 <smp_send_security_req+0xa8>
		return -EBUSY;
   3b73e:	f06f 050f 	mvn.w	r5, #15
   3b742:	e7d7      	b.n	3b6f4 <smp_send_security_req+0xa8>
		return -ENOBUFS;
   3b744:	f06f 0568 	mvn.w	r5, #104	; 0x68
   3b748:	e7d4      	b.n	3b6f4 <smp_send_security_req+0xa8>
		return -ENOBUFS;
   3b74a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   3b74e:	e7d1      	b.n	3b6f4 <smp_send_security_req+0xa8>

0003b750 <generate_dhkey>:
{
   3b750:	b510      	push	{r4, lr}
   3b752:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   3b754:	1d03      	adds	r3, r0, #4
   3b756:	e8d3 1fef 	ldaex	r1, [r3]
   3b75a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   3b75e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3b762:	2a00      	cmp	r2, #0
   3b764:	d1f7      	bne.n	3b756 <generate_dhkey+0x6>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   3b766:	2008      	movs	r0, #8
   3b768:	f7ea fbe8 	bl	25f3c <smp_find>
   3b76c:	b108      	cbz	r0, 3b772 <generate_dhkey+0x22>
	return 0;
   3b76e:	2000      	movs	r0, #0
}
   3b770:	bd10      	pop	{r4, pc}
		return smp_dhkey_generate(smp);
   3b772:	4620      	mov	r0, r4
   3b774:	f7eb fa4a 	bl	26c0c <smp_dhkey_generate>
   3b778:	e7fa      	b.n	3b770 <generate_dhkey+0x20>

0003b77a <legacy_pairing_req>:
{
   3b77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b77c:	4604      	mov	r4, r0
	const struct bt_conn_auth_cb *smp_auth_cb = latch_auth_cb(smp);
   3b77e:	f7ea fbf7 	bl	25f70 <latch_auth_cb>
   3b782:	4606      	mov	r6, r0
	ret = legacy_request_tk(smp);
   3b784:	4620      	mov	r0, r4
   3b786:	f7eb fbcf 	bl	26f28 <legacy_request_tk>
	if (ret) {
   3b78a:	4605      	mov	r5, r0
   3b78c:	b9f0      	cbnz	r0, 3b7cc <legacy_pairing_req+0x52>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   3b78e:	7a25      	ldrb	r5, [r4, #8]
   3b790:	b945      	cbnz	r5, 3b7a4 <legacy_pairing_req+0x2a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   3b792:	1d27      	adds	r7, r4, #4
   3b794:	210f      	movs	r1, #15
   3b796:	4638      	mov	r0, r7
   3b798:	f7ff fca5 	bl	3b0e6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   3b79c:	b910      	cbnz	r0, 3b7a4 <legacy_pairing_req+0x2a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   3b79e:	b10e      	cbz	r6, 3b7a4 <legacy_pairing_req+0x2a>
	    smp_auth_cb && smp_auth_cb->pairing_confirm) {
   3b7a0:	6973      	ldr	r3, [r6, #20]
   3b7a2:	b9ab      	cbnz	r3, 3b7d0 <legacy_pairing_req+0x56>
   3b7a4:	e8d4 3fef 	ldaex	r3, [r4]
   3b7a8:	f043 0308 	orr.w	r3, r3, #8
   3b7ac:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b7b0:	2a00      	cmp	r2, #0
   3b7b2:	d1f7      	bne.n	3b7a4 <legacy_pairing_req+0x2a>
   3b7b4:	e8d4 3fef 	ldaex	r3, [r4]
   3b7b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   3b7bc:	e8c4 3fe2 	stlex	r2, r3, [r4]
   3b7c0:	2a00      	cmp	r2, #0
   3b7c2:	d1f7      	bne.n	3b7b4 <legacy_pairing_req+0x3a>
	return send_pairing_rsp(smp);
   3b7c4:	4620      	mov	r0, r4
   3b7c6:	f7ff fe8d 	bl	3b4e4 <send_pairing_rsp>
   3b7ca:	4605      	mov	r5, r0
}
   3b7cc:	4628      	mov	r0, r5
   3b7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b7d0:	e8d7 3fef 	ldaex	r3, [r7]
   3b7d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   3b7d8:	e8c7 3fe2 	stlex	r2, r3, [r7]
   3b7dc:	2a00      	cmp	r2, #0
   3b7de:	d1f7      	bne.n	3b7d0 <legacy_pairing_req+0x56>
		smp_auth_cb->pairing_confirm(smp->chan.chan.conn);
   3b7e0:	6973      	ldr	r3, [r6, #20]
   3b7e2:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
   3b7e6:	4798      	blx	r3
		return 0;
   3b7e8:	e7f0      	b.n	3b7cc <legacy_pairing_req+0x52>

0003b7ea <bt_smp_request_ltk>:
{
   3b7ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   3b7ec:	b083      	sub	sp, #12
   3b7ee:	4604      	mov	r4, r0
   3b7f0:	e9cd 2300 	strd	r2, r3, [sp]
	smp = smp_chan_get(conn);
   3b7f4:	f7ea fb04 	bl	25e00 <smp_chan_get>
	if (!smp) {
   3b7f8:	2800      	cmp	r0, #0
   3b7fa:	f000 80bb 	beq.w	3b974 <bt_smp_request_ltk+0x18a>
   3b7fe:	4605      	mov	r5, r0
	if (ediv == 0U && rand == 0U &&
   3b800:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   3b804:	b91b      	cbnz	r3, 3b80e <bt_smp_request_ltk+0x24>
   3b806:	9b00      	ldr	r3, [sp, #0]
   3b808:	9a01      	ldr	r2, [sp, #4]
   3b80a:	4313      	orrs	r3, r2
   3b80c:	d026      	beq.n	3b85c <bt_smp_request_ltk+0x72>
	if (!conn->le.keys) {
   3b80e:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   3b812:	2b00      	cmp	r3, #0
   3b814:	d04d      	beq.n	3b8b2 <bt_smp_request_ltk+0xc8>
	if (ediv == 0U && rand == 0U &&
   3b816:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   3b81a:	b953      	cbnz	r3, 3b832 <bt_smp_request_ltk+0x48>
   3b81c:	9b00      	ldr	r3, [sp, #0]
   3b81e:	9a01      	ldr	r2, [sp, #4]
   3b820:	4313      	orrs	r3, r2
   3b822:	d106      	bne.n	3b832 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   3b824:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
	if (ediv == 0U && rand == 0U &&
   3b828:	b119      	cbz	r1, 3b832 <bt_smp_request_ltk+0x48>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   3b82a:	89cb      	ldrh	r3, [r1, #14]
   3b82c:	f013 0f20 	tst.w	r3, #32
   3b830:	d152      	bne.n	3b8d8 <bt_smp_request_ltk+0xee>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   3b832:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   3b836:	b118      	cbz	r0, 3b840 <bt_smp_request_ltk+0x56>
   3b838:	89c3      	ldrh	r3, [r0, #14]
   3b83a:	f013 0f01 	tst.w	r3, #1
   3b83e:	d166      	bne.n	3b90e <bt_smp_request_ltk+0x124>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   3b840:	210f      	movs	r1, #15
   3b842:	1d28      	adds	r0, r5, #4
   3b844:	f7ff fc4f 	bl	3b0e6 <atomic_test_bit>
   3b848:	2800      	cmp	r0, #0
   3b84a:	f040 808d 	bne.w	3b968 <bt_smp_request_ltk+0x17e>
	smp_reset(smp);
   3b84e:	4628      	mov	r0, r5
   3b850:	f7ff fce8 	bl	3b224 <smp_reset>
	return false;
   3b854:	2600      	movs	r6, #0
}
   3b856:	4630      	mov	r0, r6
   3b858:	b003      	add	sp, #12
   3b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3b85c:	1d07      	adds	r7, r0, #4
   3b85e:	2103      	movs	r1, #3
   3b860:	4638      	mov	r0, r7
   3b862:	f7ff fc40 	bl	3b0e6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   3b866:	2800      	cmp	r0, #0
   3b868:	d0d1      	beq.n	3b80e <bt_smp_request_ltk+0x24>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3b86a:	2101      	movs	r1, #1
   3b86c:	4638      	mov	r0, r7
   3b86e:	f7ff fc3a 	bl	3b0e6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   3b872:	4606      	mov	r6, r0
   3b874:	2800      	cmp	r0, #0
   3b876:	d0ca      	beq.n	3b80e <bt_smp_request_ltk+0x24>
		enc_size = get_encryption_key_size(smp);
   3b878:	4628      	mov	r0, r5
   3b87a:	f7ff fbd8 	bl	3b02e <get_encryption_key_size>
   3b87e:	4604      	mov	r4, r0
		memcpy(ltk, smp->tk, enc_size);
   3b880:	4602      	mov	r2, r0
   3b882:	f105 0147 	add.w	r1, r5, #71	; 0x47
   3b886:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b888:	f7fc fdb7 	bl	383fa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   3b88c:	2c0f      	cmp	r4, #15
   3b88e:	d908      	bls.n	3b8a2 <bt_smp_request_ltk+0xb8>
   3b890:	e8d7 3fef 	ldaex	r3, [r7]
   3b894:	f043 0302 	orr.w	r3, r3, #2
   3b898:	e8c7 3fe2 	stlex	r2, r3, [r7]
   3b89c:	2a00      	cmp	r2, #0
   3b89e:	d0da      	beq.n	3b856 <bt_smp_request_ltk+0x6c>
   3b8a0:	e7f6      	b.n	3b890 <bt_smp_request_ltk+0xa6>
			(void)memset(ltk + enc_size, 0,
   3b8a2:	f1c4 0210 	rsb	r2, r4, #16
   3b8a6:	2100      	movs	r1, #0
   3b8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b8aa:	1918      	adds	r0, r3, r4
   3b8ac:	f7fc fdd4 	bl	38458 <memset>
   3b8b0:	e7ee      	b.n	3b890 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   3b8b2:	f104 0690 	add.w	r6, r4, #144	; 0x90
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   3b8b6:	4632      	mov	r2, r6
   3b8b8:	7a21      	ldrb	r1, [r4, #8]
   3b8ba:	2020      	movs	r0, #32
   3b8bc:	f7ec ff66 	bl	2878c <bt_keys_find>
   3b8c0:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
		if (!conn->le.keys) {
   3b8c4:	2800      	cmp	r0, #0
   3b8c6:	d1a6      	bne.n	3b816 <bt_smp_request_ltk+0x2c>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   3b8c8:	4632      	mov	r2, r6
   3b8ca:	7a21      	ldrb	r1, [r4, #8]
   3b8cc:	2001      	movs	r0, #1
   3b8ce:	f7ec ff5d 	bl	2878c <bt_keys_find>
   3b8d2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
   3b8d6:	e79e      	b.n	3b816 <bt_smp_request_ltk+0x2c>
		enc_size = conn->le.keys->enc_size;
   3b8d8:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   3b8da:	4622      	mov	r2, r4
   3b8dc:	311a      	adds	r1, #26
   3b8de:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b8e0:	f7fc fd8b 	bl	383fa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   3b8e4:	2c0f      	cmp	r4, #15
   3b8e6:	d90a      	bls.n	3b8fe <bt_smp_request_ltk+0x114>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   3b8e8:	3504      	adds	r5, #4
   3b8ea:	e8d5 3fef 	ldaex	r3, [r5]
   3b8ee:	f043 0302 	orr.w	r3, r3, #2
   3b8f2:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b8f6:	2a00      	cmp	r2, #0
   3b8f8:	d1f7      	bne.n	3b8ea <bt_smp_request_ltk+0x100>
		return true;
   3b8fa:	2601      	movs	r6, #1
   3b8fc:	e7ab      	b.n	3b856 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   3b8fe:	f1c4 0210 	rsb	r2, r4, #16
   3b902:	2100      	movs	r1, #0
   3b904:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b906:	1918      	adds	r0, r3, r4
   3b908:	f7fc fda6 	bl	38458 <memset>
   3b90c:	e7ec      	b.n	3b8e8 <bt_smp_request_ltk+0xfe>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   3b90e:	2208      	movs	r2, #8
   3b910:	4669      	mov	r1, sp
   3b912:	3040      	adds	r0, #64	; 0x40
   3b914:	f7fc fd4c 	bl	383b0 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   3b918:	2800      	cmp	r0, #0
   3b91a:	d191      	bne.n	3b840 <bt_smp_request_ltk+0x56>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   3b91c:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
   3b920:	2202      	movs	r2, #2
   3b922:	a908      	add	r1, sp, #32
   3b924:	3048      	adds	r0, #72	; 0x48
   3b926:	f7fc fd43 	bl	383b0 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   3b92a:	2800      	cmp	r0, #0
   3b92c:	d188      	bne.n	3b840 <bt_smp_request_ltk+0x56>
		enc_size = conn->le.keys->enc_size;
   3b92e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
   3b932:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->periph_ltk.val, enc_size);
   3b934:	4622      	mov	r2, r4
   3b936:	314a      	adds	r1, #74	; 0x4a
   3b938:	9809      	ldr	r0, [sp, #36]	; 0x24
   3b93a:	f7fc fd5e 	bl	383fa <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   3b93e:	2c0f      	cmp	r4, #15
   3b940:	d90a      	bls.n	3b958 <bt_smp_request_ltk+0x16e>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   3b942:	3504      	adds	r5, #4
   3b944:	e8d5 3fef 	ldaex	r3, [r5]
   3b948:	f043 0302 	orr.w	r3, r3, #2
   3b94c:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3b950:	2a00      	cmp	r2, #0
   3b952:	d1f7      	bne.n	3b944 <bt_smp_request_ltk+0x15a>
		return true;
   3b954:	2601      	movs	r6, #1
   3b956:	e77e      	b.n	3b856 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   3b958:	f1c4 0210 	rsb	r2, r4, #16
   3b95c:	2100      	movs	r1, #0
   3b95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b960:	1918      	adds	r0, r3, r4
   3b962:	f7fc fd79 	bl	38458 <memset>
   3b966:	e7ec      	b.n	3b942 <bt_smp_request_ltk+0x158>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   3b968:	2202      	movs	r2, #2
   3b96a:	2106      	movs	r1, #6
   3b96c:	4620      	mov	r0, r4
   3b96e:	f7e5 f867 	bl	20a40 <bt_conn_security_changed>
   3b972:	e76c      	b.n	3b84e <bt_smp_request_ltk+0x64>
		return false;
   3b974:	2600      	movs	r6, #0
   3b976:	e76e      	b.n	3b856 <bt_smp_request_ltk+0x6c>

0003b978 <bt_smp_sign>:
}
   3b978:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3b97c:	4770      	bx	lr

0003b97e <bt_smp_start_security>:
{
   3b97e:	b508      	push	{r3, lr}
	switch (conn->role) {
   3b980:	78c3      	ldrb	r3, [r0, #3]
   3b982:	2b01      	cmp	r3, #1
   3b984:	d102      	bne.n	3b98c <bt_smp_start_security+0xe>
		return smp_send_security_req(conn);
   3b986:	f7ff fe61 	bl	3b64c <smp_send_security_req>
}
   3b98a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3b98c:	f06f 0015 	mvn.w	r0, #21
   3b990:	e7fb      	b.n	3b98a <bt_smp_start_security+0xc>

0003b992 <bt_smp_dhkey_ready>:
{
   3b992:	b538      	push	{r3, r4, r5, lr}
   3b994:	4604      	mov	r4, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   3b996:	2008      	movs	r0, #8
   3b998:	f7ea fad0 	bl	25f3c <smp_find>
	if (smp) {
   3b99c:	b1a0      	cbz	r0, 3b9c8 <bt_smp_dhkey_ready+0x36>
   3b99e:	4605      	mov	r5, r0
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   3b9a0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   3b9a2:	e8d3 1fef 	ldaex	r1, [r3]
   3b9a6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
   3b9aa:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3b9ae:	2a00      	cmp	r2, #0
   3b9b0:	d1f7      	bne.n	3b9a2 <bt_smp_dhkey_ready+0x10>
		err = smp_dhkey_ready(smp, dhkey);
   3b9b2:	4621      	mov	r1, r4
   3b9b4:	4628      	mov	r0, r5
   3b9b6:	f7ff fdea 	bl	3b58e <smp_dhkey_ready>
		if (err) {
   3b9ba:	4601      	mov	r1, r0
   3b9bc:	b120      	cbz	r0, 3b9c8 <bt_smp_dhkey_ready+0x36>
			smp_error(smp, err);
   3b9be:	4628      	mov	r0, r5
   3b9c0:	f7eb ff80 	bl	278c4 <smp_error>
   3b9c4:	e000      	b.n	3b9c8 <bt_smp_dhkey_ready+0x36>
	} while (smp && err);
   3b9c6:	b175      	cbz	r5, 3b9e6 <bt_smp_dhkey_ready+0x54>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   3b9c8:	2007      	movs	r0, #7
   3b9ca:	f7ea fab7 	bl	25f3c <smp_find>
		if (smp) {
   3b9ce:	4604      	mov	r4, r0
   3b9d0:	b148      	cbz	r0, 3b9e6 <bt_smp_dhkey_ready+0x54>
			err = smp_dhkey_generate(smp);
   3b9d2:	f7eb f91b 	bl	26c0c <smp_dhkey_generate>
			if (err) {
   3b9d6:	4605      	mov	r5, r0
   3b9d8:	2800      	cmp	r0, #0
   3b9da:	d0f4      	beq.n	3b9c6 <bt_smp_dhkey_ready+0x34>
				smp_error(smp, err);
   3b9dc:	4601      	mov	r1, r0
   3b9de:	4620      	mov	r0, r4
   3b9e0:	f7eb ff70 	bl	278c4 <smp_error>
   3b9e4:	e7ef      	b.n	3b9c6 <bt_smp_dhkey_ready+0x34>
}
   3b9e6:	bd38      	pop	{r3, r4, r5, pc}

0003b9e8 <bt_smp_encrypt_change>:
{
   3b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3b9ec:	4604      	mov	r4, r0
   3b9ee:	460e      	mov	r6, r1
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   3b9f0:	f1a0 08ec 	sub.w	r8, r0, #236	; 0xec
	struct bt_conn *conn = chan->conn;
   3b9f4:	4605      	mov	r5, r0
   3b9f6:	f855 79e8 	ldr.w	r7, [r5], #-232
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   3b9fa:	2101      	movs	r1, #1
   3b9fc:	4628      	mov	r0, r5
   3b9fe:	f7ff fc8d 	bl	3b31c <atomic_test_and_clear_bit>
   3ba02:	b110      	cbz	r0, 3ba0a <bt_smp_encrypt_change+0x22>
	if (hci_status) {
   3ba04:	b91e      	cbnz	r6, 3ba0e <bt_smp_encrypt_change+0x26>
	if (!conn->encrypt) {
   3ba06:	7afb      	ldrb	r3, [r7, #11]
   3ba08:	b9cb      	cbnz	r3, 3ba3e <bt_smp_encrypt_change+0x56>
}
   3ba0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3ba0e:	2103      	movs	r1, #3
   3ba10:	4628      	mov	r0, r5
   3ba12:	f7ff fb68 	bl	3b0e6 <atomic_test_bit>
   3ba16:	2800      	cmp	r0, #0
   3ba18:	d0f7      	beq.n	3ba0a <bt_smp_encrypt_change+0x22>
			uint8_t smp_err = smp_err_get(
   3ba1a:	4630      	mov	r0, r6
   3ba1c:	f7fc ff62 	bl	388e4 <bt_security_err_get>
   3ba20:	f7ff faf1 	bl	3b006 <smp_err_get>
   3ba24:	4601      	mov	r1, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   3ba26:	e8d5 3fef 	ldaex	r3, [r5]
   3ba2a:	f043 0304 	orr.w	r3, r3, #4
   3ba2e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3ba32:	2a00      	cmp	r2, #0
   3ba34:	d1f7      	bne.n	3ba26 <bt_smp_encrypt_change+0x3e>
			smp_pairing_complete(smp, smp_err);
   3ba36:	4640      	mov	r0, r8
   3ba38:	f7eb fec2 	bl	277c0 <smp_pairing_complete>
		return;
   3ba3c:	e7e5      	b.n	3ba0a <bt_smp_encrypt_change+0x22>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   3ba3e:	2103      	movs	r1, #3
   3ba40:	4628      	mov	r0, r5
   3ba42:	f7ff fb50 	bl	3b0e6 <atomic_test_bit>
   3ba46:	b3c0      	cbz	r0, 3baba <bt_smp_encrypt_change+0xd2>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   3ba48:	2105      	movs	r1, #5
   3ba4a:	4628      	mov	r0, r5
   3ba4c:	f7ff fb4b 	bl	3b0e6 <atomic_test_bit>
   3ba50:	b1e8      	cbz	r0, 3ba8e <bt_smp_encrypt_change+0xa6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   3ba52:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   3ba56:	f013 0f08 	tst.w	r3, #8
   3ba5a:	d00c      	beq.n	3ba76 <bt_smp_encrypt_change+0x8e>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
   3ba5c:	f814 3c03 	ldrb.w	r3, [r4, #-3]
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   3ba60:	f013 0f08 	tst.w	r3, #8
   3ba64:	d007      	beq.n	3ba76 <bt_smp_encrypt_change+0x8e>
   3ba66:	e8d5 3fef 	ldaex	r3, [r5]
   3ba6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   3ba6e:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3ba72:	2a00      	cmp	r2, #0
   3ba74:	d1f7      	bne.n	3ba66 <bt_smp_encrypt_change+0x7e>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   3ba76:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   3ba7a:	f023 0308 	bic.w	r3, r3, #8
   3ba7e:	f804 3c04 	strb.w	r3, [r4, #-4]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   3ba82:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   3ba86:	f023 0308 	bic.w	r3, r3, #8
   3ba8a:	f804 3c03 	strb.w	r3, [r4, #-3]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   3ba8e:	f814 3c03 	ldrb.w	r3, [r4, #-3]
   3ba92:	f013 0f01 	tst.w	r3, #1
   3ba96:	d114      	bne.n	3bac2 <bt_smp_encrypt_change+0xda>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   3ba98:	f013 0f02 	tst.w	r3, #2
   3ba9c:	d131      	bne.n	3bb02 <bt_smp_encrypt_change+0x11a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   3ba9e:	f013 0f04 	tst.w	r3, #4
   3baa2:	d018      	beq.n	3bad6 <bt_smp_encrypt_change+0xee>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   3baa4:	f1a4 03ec 	sub.w	r3, r4, #236	; 0xec
   3baa8:	e8d3 1fef 	ldaex	r1, [r3]
   3baac:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
   3bab0:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3bab4:	2a00      	cmp	r2, #0
   3bab6:	d00e      	beq.n	3bad6 <bt_smp_encrypt_change+0xee>
   3bab8:	e7f6      	b.n	3baa8 <bt_smp_encrypt_change+0xc0>
		smp_reset(smp);
   3baba:	4640      	mov	r0, r8
   3babc:	f7ff fbb2 	bl	3b224 <smp_reset>
		return;
   3bac0:	e7a3      	b.n	3ba0a <bt_smp_encrypt_change+0x22>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   3bac2:	f1a4 03ec 	sub.w	r3, r4, #236	; 0xec
   3bac6:	e8d3 1fef 	ldaex	r1, [r3]
   3baca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
   3bace:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3bad2:	2a00      	cmp	r2, #0
   3bad4:	d1f7      	bne.n	3bac6 <bt_smp_encrypt_change+0xde>
   3bad6:	e8d5 3fef 	ldaex	r3, [r5]
   3bada:	f043 0304 	orr.w	r3, r3, #4
   3bade:	e8c5 3fe2 	stlex	r2, r3, [r5]
   3bae2:	2a00      	cmp	r2, #0
   3bae4:	d1f7      	bne.n	3bad6 <bt_smp_encrypt_change+0xee>
	if (bt_smp_distribute_keys(smp)) {
   3bae6:	4640      	mov	r0, r8
   3bae8:	f7eb f818 	bl	26b1c <bt_smp_distribute_keys>
   3baec:	2800      	cmp	r0, #0
   3baee:	d18c      	bne.n	3ba0a <bt_smp_encrypt_change+0x22>
	if (!smp->local_dist && !smp->remote_dist) {
   3baf0:	f834 3c04 	ldrh.w	r3, [r4, #-4]
   3baf4:	2b00      	cmp	r3, #0
   3baf6:	d188      	bne.n	3ba0a <bt_smp_encrypt_change+0x22>
		smp_pairing_complete(smp, 0);
   3baf8:	2100      	movs	r1, #0
   3bafa:	4640      	mov	r0, r8
   3bafc:	f7eb fe60 	bl	277c0 <smp_pairing_complete>
   3bb00:	e783      	b.n	3ba0a <bt_smp_encrypt_change+0x22>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   3bb02:	f1a4 03ec 	sub.w	r3, r4, #236	; 0xec
   3bb06:	e8d3 1fef 	ldaex	r1, [r3]
   3bb0a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   3bb0e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3bb12:	2a00      	cmp	r2, #0
   3bb14:	d0df      	beq.n	3bad6 <bt_smp_encrypt_change+0xee>
   3bb16:	e7f6      	b.n	3bb06 <bt_smp_encrypt_change+0x11e>

0003bb18 <smp_ident_sent>:
	if (!err) {
   3bb18:	b102      	cbz	r2, 3bb1c <smp_ident_sent+0x4>
   3bb1a:	4770      	bx	lr
{
   3bb1c:	b508      	push	{r3, lr}
		smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   3bb1e:	2101      	movs	r1, #1
   3bb20:	f7ec fc28 	bl	28374 <smp_check_complete>
}
   3bb24:	bd08      	pop	{r3, pc}

0003bb26 <bt_smp_disconnected>:
{
   3bb26:	b570      	push	{r4, r5, r6, lr}
   3bb28:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   3bb2a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   3bb2e:	f850 3b94 	ldr.w	r3, [r0], #148
   3bb32:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
	(void)k_work_cancel_delayable(&smp->work);
   3bb36:	f7f6 ff99 	bl	32a6c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   3bb3a:	3ce8      	subs	r4, #232	; 0xe8
   3bb3c:	2103      	movs	r1, #3
   3bb3e:	4620      	mov	r0, r4
   3bb40:	f7ff fad1 	bl	3b0e6 <atomic_test_bit>
   3bb44:	b920      	cbnz	r0, 3bb50 <bt_smp_disconnected+0x2a>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   3bb46:	2101      	movs	r1, #1
   3bb48:	4620      	mov	r0, r4
   3bb4a:	f7ff facc 	bl	3b0e6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   3bb4e:	b1a0      	cbz	r0, 3bb7a <bt_smp_disconnected+0x54>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   3bb50:	2108      	movs	r1, #8
   3bb52:	4630      	mov	r0, r6
   3bb54:	f7eb fe34 	bl	277c0 <smp_pairing_complete>
	if (keys) {
   3bb58:	b145      	cbz	r5, 3bb6c <bt_smp_disconnected+0x46>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   3bb5a:	89eb      	ldrh	r3, [r5, #14]
   3bb5c:	b11b      	cbz	r3, 3bb66 <bt_smp_disconnected+0x40>
		    (keys->flags & BT_KEYS_DEBUG))) {
   3bb5e:	7b6b      	ldrb	r3, [r5, #13]
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   3bb60:	f013 0f02 	tst.w	r3, #2
   3bb64:	d002      	beq.n	3bb6c <bt_smp_disconnected+0x46>
			bt_keys_clear(keys);
   3bb66:	4628      	mov	r0, r5
   3bb68:	f7ec ff3a 	bl	289e0 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   3bb6c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
   3bb70:	2100      	movs	r1, #0
   3bb72:	4630      	mov	r0, r6
   3bb74:	f7fc fc70 	bl	38458 <memset>
}
   3bb78:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   3bb7a:	210f      	movs	r1, #15
   3bb7c:	4620      	mov	r0, r4
   3bb7e:	f7ff fab2 	bl	3b0e6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   3bb82:	2800      	cmp	r0, #0
   3bb84:	d0e8      	beq.n	3bb58 <bt_smp_disconnected+0x32>
   3bb86:	e7e3      	b.n	3bb50 <bt_smp_disconnected+0x2a>

0003bb88 <sys_mem_swap>:
	for (i = 0; i < (length/2); i++) {
   3bb88:	2300      	movs	r3, #0
   3bb8a:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   3bb8e:	d210      	bcs.n	3bbb2 <sys_mem_swap+0x2a>
{
   3bb90:	b500      	push	{lr}
		uint8_t tmp = ((uint8_t *)buf)[i];
   3bb92:	f810 c003 	ldrb.w	ip, [r0, r3]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   3bb96:	1aca      	subs	r2, r1, r3
   3bb98:	3a01      	subs	r2, #1
   3bb9a:	f810 e002 	ldrb.w	lr, [r0, r2]
   3bb9e:	f800 e003 	strb.w	lr, [r0, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   3bba2:	f800 c002 	strb.w	ip, [r0, r2]
	for (i = 0; i < (length/2); i++) {
   3bba6:	3301      	adds	r3, #1
   3bba8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   3bbac:	d3f1      	bcc.n	3bb92 <sys_mem_swap+0xa>
}
   3bbae:	f85d fb04 	ldr.w	pc, [sp], #4
   3bbb2:	4770      	bx	lr

0003bbb4 <bt_crypto_aes_cmac>:
{
   3bbb4:	b570      	push	{r4, r5, r6, lr}
   3bbb6:	b0c2      	sub	sp, #264	; 0x108
   3bbb8:	460c      	mov	r4, r1
   3bbba:	4615      	mov	r5, r2
   3bbbc:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   3bbbe:	aa16      	add	r2, sp, #88	; 0x58
   3bbc0:	4601      	mov	r1, r0
   3bbc2:	4668      	mov	r0, sp
   3bbc4:	f7fb ff1f 	bl	37a06 <tc_cmac_setup>
   3bbc8:	b168      	cbz	r0, 3bbe6 <bt_crypto_aes_cmac+0x32>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   3bbca:	462a      	mov	r2, r5
   3bbcc:	4621      	mov	r1, r4
   3bbce:	4668      	mov	r0, sp
   3bbd0:	f7fb ff46 	bl	37a60 <tc_cmac_update>
   3bbd4:	b150      	cbz	r0, 3bbec <bt_crypto_aes_cmac+0x38>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   3bbd6:	4669      	mov	r1, sp
   3bbd8:	4630      	mov	r0, r6
   3bbda:	f7fb ffb1 	bl	37b40 <tc_cmac_final>
   3bbde:	b140      	cbz	r0, 3bbf2 <bt_crypto_aes_cmac+0x3e>
	return 0;
   3bbe0:	2000      	movs	r0, #0
}
   3bbe2:	b042      	add	sp, #264	; 0x108
   3bbe4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   3bbe6:	f06f 0004 	mvn.w	r0, #4
   3bbea:	e7fa      	b.n	3bbe2 <bt_crypto_aes_cmac+0x2e>
		return -EIO;
   3bbec:	f06f 0004 	mvn.w	r0, #4
   3bbf0:	e7f7      	b.n	3bbe2 <bt_crypto_aes_cmac+0x2e>
		return -EIO;
   3bbf2:	f06f 0004 	mvn.w	r0, #4
   3bbf6:	e7f4      	b.n	3bbe2 <bt_crypto_aes_cmac+0x2e>

0003bbf8 <bt_crypto_f4>:
{
   3bbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bbfa:	b097      	sub	sp, #92	; 0x5c
   3bbfc:	460e      	mov	r6, r1
   3bbfe:	4614      	mov	r4, r2
   3bc00:	461d      	mov	r5, r3
   3bc02:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   3bc04:	2220      	movs	r2, #32
   3bc06:	4601      	mov	r1, r0
   3bc08:	a801      	add	r0, sp, #4
   3bc0a:	f7ed fa07 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   3bc0e:	2220      	movs	r2, #32
   3bc10:	4631      	mov	r1, r6
   3bc12:	a809      	add	r0, sp, #36	; 0x24
   3bc14:	f7ed fa02 	bl	2901c <sys_memcpy_swap>
	m[64] = z;
   3bc18:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
	sys_memcpy_swap(xs, x, 16);
   3bc1c:	2210      	movs	r2, #16
   3bc1e:	4621      	mov	r1, r4
   3bc20:	a812      	add	r0, sp, #72	; 0x48
   3bc22:	f7ed f9fb 	bl	2901c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(xs, m, sizeof(m), res);
   3bc26:	463b      	mov	r3, r7
   3bc28:	2241      	movs	r2, #65	; 0x41
   3bc2a:	a901      	add	r1, sp, #4
   3bc2c:	a812      	add	r0, sp, #72	; 0x48
   3bc2e:	f7ff ffc1 	bl	3bbb4 <bt_crypto_aes_cmac>
	if (err) {
   3bc32:	4604      	mov	r4, r0
   3bc34:	b110      	cbz	r0, 3bc3c <bt_crypto_f4+0x44>
}
   3bc36:	4620      	mov	r0, r4
   3bc38:	b017      	add	sp, #92	; 0x5c
   3bc3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(res, 16);
   3bc3c:	2110      	movs	r1, #16
   3bc3e:	4638      	mov	r0, r7
   3bc40:	f7ff ffa2 	bl	3bb88 <sys_mem_swap>
	return err;
   3bc44:	e7f7      	b.n	3bc36 <bt_crypto_f4+0x3e>

0003bc46 <bt_crypto_f6>:
{
   3bc46:	b5f0      	push	{r4, r5, r6, r7, lr}
   3bc48:	b097      	sub	sp, #92	; 0x5c
   3bc4a:	4605      	mov	r5, r0
   3bc4c:	4617      	mov	r7, r2
   3bc4e:	461c      	mov	r4, r3
   3bc50:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   3bc52:	2210      	movs	r2, #16
   3bc54:	a801      	add	r0, sp, #4
   3bc56:	f7ed f9e1 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   3bc5a:	2210      	movs	r2, #16
   3bc5c:	4639      	mov	r1, r7
   3bc5e:	a805      	add	r0, sp, #20
   3bc60:	f7ed f9dc 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   3bc64:	2210      	movs	r2, #16
   3bc66:	4621      	mov	r1, r4
   3bc68:	a809      	add	r0, sp, #36	; 0x24
   3bc6a:	f7ed f9d7 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   3bc6e:	2203      	movs	r2, #3
   3bc70:	991c      	ldr	r1, [sp, #112]	; 0x70
   3bc72:	a80d      	add	r0, sp, #52	; 0x34
   3bc74:	f7ed f9d2 	bl	2901c <sys_memcpy_swap>
	m[51] = a1->type;
   3bc78:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   3bc7a:	f814 3b01 	ldrb.w	r3, [r4], #1
   3bc7e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
   3bc82:	2206      	movs	r2, #6
   3bc84:	4621      	mov	r1, r4
   3bc86:	a80e      	add	r0, sp, #56	; 0x38
   3bc88:	f7fc fbb7 	bl	383fa <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   3bc8c:	2206      	movs	r2, #6
   3bc8e:	4621      	mov	r1, r4
   3bc90:	a80e      	add	r0, sp, #56	; 0x38
   3bc92:	f7ed f9c3 	bl	2901c <sys_memcpy_swap>
	m[58] = a2->type;
   3bc96:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   3bc98:	f814 3b01 	ldrb.w	r3, [r4], #1
   3bc9c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
   3bca0:	2206      	movs	r2, #6
   3bca2:	4621      	mov	r1, r4
   3bca4:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   3bca8:	f7fc fba7 	bl	383fa <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   3bcac:	2206      	movs	r2, #6
   3bcae:	4621      	mov	r1, r4
   3bcb0:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
   3bcb4:	f7ed f9b2 	bl	2901c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   3bcb8:	2210      	movs	r2, #16
   3bcba:	4629      	mov	r1, r5
   3bcbc:	a812      	add	r0, sp, #72	; 0x48
   3bcbe:	f7ed f9ad 	bl	2901c <sys_memcpy_swap>
	err = bt_crypto_aes_cmac(ws, m, sizeof(m), check);
   3bcc2:	4633      	mov	r3, r6
   3bcc4:	2241      	movs	r2, #65	; 0x41
   3bcc6:	a901      	add	r1, sp, #4
   3bcc8:	a812      	add	r0, sp, #72	; 0x48
   3bcca:	f7ff ff73 	bl	3bbb4 <bt_crypto_aes_cmac>
	if (err) {
   3bcce:	4604      	mov	r4, r0
   3bcd0:	b110      	cbz	r0, 3bcd8 <bt_crypto_f6+0x92>
}
   3bcd2:	4620      	mov	r0, r4
   3bcd4:	b017      	add	sp, #92	; 0x5c
   3bcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(check, 16);
   3bcd8:	2110      	movs	r1, #16
   3bcda:	4630      	mov	r0, r6
   3bcdc:	f7ff ff54 	bl	3bb88 <sys_mem_swap>
	return 0;
   3bce0:	e7f7      	b.n	3bcd2 <bt_crypto_f6+0x8c>

0003bce2 <pool_get_uninit>:
{
   3bce2:	b538      	push	{r3, r4, r5, lr}
   3bce4:	4604      	mov	r4, r0
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3bce6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   3bcea:	331b      	adds	r3, #27
   3bcec:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   3bcf0:	8c02      	ldrh	r2, [r0, #32]
   3bcf2:	1a52      	subs	r2, r2, r1
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   3bcf4:	6b05      	ldr	r5, [r0, #48]	; 0x30
   3bcf6:	fb03 5502 	mla	r5, r3, r2, r5
	buf->pool_id = pool_id(pool);
   3bcfa:	f7ed fa6b 	bl	291d4 <pool_id>
   3bcfe:	72a8      	strb	r0, [r5, #10]
	buf->user_data_size = pool->user_data_size;
   3bd00:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   3bd04:	72eb      	strb	r3, [r5, #11]
}
   3bd06:	4628      	mov	r0, r5
   3bd08:	bd38      	pop	{r3, r4, r5, pc}

0003bd0a <fixed_data_unref>:
}
   3bd0a:	4770      	bx	lr

0003bd0c <data_alloc>:
{
   3bd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bd10:	4604      	mov	r4, r0
   3bd12:	460d      	mov	r5, r1
   3bd14:	4617      	mov	r7, r2
   3bd16:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3bd18:	7a80      	ldrb	r0, [r0, #10]
   3bd1a:	f7ed fa67 	bl	291ec <net_buf_pool_get>
	return pool->alloc->cb->alloc(buf, size, timeout);
   3bd1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3bd20:	681b      	ldr	r3, [r3, #0]
   3bd22:	f8d3 8000 	ldr.w	r8, [r3]
   3bd26:	463a      	mov	r2, r7
   3bd28:	4633      	mov	r3, r6
   3bd2a:	4629      	mov	r1, r5
   3bd2c:	4620      	mov	r0, r4
   3bd2e:	47c0      	blx	r8
}
   3bd30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003bd34 <net_buf_destroy>:
{
   3bd34:	b510      	push	{r4, lr}
   3bd36:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3bd38:	7a80      	ldrb	r0, [r0, #10]
   3bd3a:	f7ed fa57 	bl	291ec <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   3bd3e:	4621      	mov	r1, r4
   3bd40:	f002 fe58 	bl	3e9f4 <k_queue_prepend>
}
   3bd44:	bd10      	pop	{r4, pc}

0003bd46 <data_unref>:
{
   3bd46:	b538      	push	{r3, r4, r5, lr}
   3bd48:	4604      	mov	r4, r0
   3bd4a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3bd4c:	7a80      	ldrb	r0, [r0, #10]
   3bd4e:	f7ed fa4d 	bl	291ec <net_buf_pool_get>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   3bd52:	7a63      	ldrb	r3, [r4, #9]
   3bd54:	f013 0f01 	tst.w	r3, #1
   3bd58:	d105      	bne.n	3bd66 <data_unref+0x20>
	pool->alloc->cb->unref(buf, data);
   3bd5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3bd5c:	681b      	ldr	r3, [r3, #0]
   3bd5e:	689b      	ldr	r3, [r3, #8]
   3bd60:	4629      	mov	r1, r5
   3bd62:	4620      	mov	r0, r4
   3bd64:	4798      	blx	r3
}
   3bd66:	bd38      	pop	{r3, r4, r5, pc}

0003bd68 <net_buf_id>:
{
   3bd68:	b510      	push	{r4, lr}
   3bd6a:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3bd6c:	7a80      	ldrb	r0, [r0, #10]
   3bd6e:	f7ed fa3d 	bl	291ec <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   3bd72:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   3bd76:	331b      	adds	r3, #27
   3bd78:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   3bd7c:	6b02      	ldr	r2, [r0, #48]	; 0x30
   3bd7e:	1aa4      	subs	r4, r4, r2
}
   3bd80:	fbb4 f0f3 	udiv	r0, r4, r3
   3bd84:	bd10      	pop	{r4, pc}

0003bd86 <fixed_data_alloc>:
{
   3bd86:	b570      	push	{r4, r5, r6, lr}
   3bd88:	4604      	mov	r4, r0
   3bd8a:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   3bd8c:	7a80      	ldrb	r0, [r0, #10]
   3bd8e:	f7ed fa2d 	bl	291ec <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3bd92:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   3bd94:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   3bd96:	682a      	ldr	r2, [r5, #0]
   3bd98:	6819      	ldr	r1, [r3, #0]
   3bd9a:	428a      	cmp	r2, r1
   3bd9c:	bf28      	it	cs
   3bd9e:	460a      	movcs	r2, r1
   3bda0:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   3bda2:	685d      	ldr	r5, [r3, #4]
   3bda4:	681e      	ldr	r6, [r3, #0]
   3bda6:	4620      	mov	r0, r4
   3bda8:	f7ff ffde 	bl	3bd68 <net_buf_id>
}
   3bdac:	fb00 5006 	mla	r0, r0, r6, r5
   3bdb0:	bd70      	pop	{r4, r5, r6, pc}

0003bdb2 <net_buf_alloc_fixed>:
{
   3bdb2:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   3bdb4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   3bdb6:	6849      	ldr	r1, [r1, #4]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   3bdb8:	6809      	ldr	r1, [r1, #0]
   3bdba:	f7ed fa47 	bl	2924c <net_buf_alloc_len>
}
   3bdbe:	bd08      	pop	{r3, pc}

0003bdc0 <net_buf_get>:
{
   3bdc0:	b508      	push	{r3, lr}
	return z_impl_k_queue_get(queue, timeout);
   3bdc2:	f7f5 ff7f 	bl	31cc4 <z_impl_k_queue_get>
}
   3bdc6:	bd08      	pop	{r3, pc}

0003bdc8 <net_buf_simple_init_with_data>:
	buf->__buf = data;
   3bdc8:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   3bdca:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   3bdcc:	b292      	uxth	r2, r2
   3bdce:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   3bdd0:	8082      	strh	r2, [r0, #4]
}
   3bdd2:	4770      	bx	lr

0003bdd4 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   3bdd4:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   3bdd6:	6803      	ldr	r3, [r0, #0]
   3bdd8:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   3bdda:	2102      	movs	r1, #2
   3bddc:	f7ed fd22 	bl	29824 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   3bde0:	4620      	mov	r0, r4
   3bde2:	bd10      	pop	{r4, pc}

0003bde4 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   3bde4:	6802      	ldr	r2, [r0, #0]
   3bde6:	6880      	ldr	r0, [r0, #8]
}
   3bde8:	1a10      	subs	r0, r2, r0
   3bdea:	4770      	bx	lr

0003bdec <net_buf_simple_push_u8>:
{
   3bdec:	b510      	push	{r4, lr}
   3bdee:	460c      	mov	r4, r1
	uint8_t *data = net_buf_simple_push(buf, 1);
   3bdf0:	2101      	movs	r1, #1
   3bdf2:	f7ed fd53 	bl	2989c <net_buf_simple_push>
	*data = val;
   3bdf6:	7004      	strb	r4, [r0, #0]
}
   3bdf8:	bd10      	pop	{r4, pc}

0003bdfa <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   3bdfa:	b538      	push	{r3, r4, r5, lr}
   3bdfc:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   3bdfe:	88c5      	ldrh	r5, [r0, #6]
   3be00:	f7ff fff0 	bl	3bde4 <net_buf_simple_headroom>
   3be04:	1a2d      	subs	r5, r5, r0
   3be06:	88a0      	ldrh	r0, [r4, #4]
}
   3be08:	1a28      	subs	r0, r5, r0
   3be0a:	bd38      	pop	{r3, r4, r5, pc}

0003be0c <net_buf_simple_add_mem>:
{
   3be0c:	b538      	push	{r3, r4, r5, lr}
   3be0e:	460d      	mov	r5, r1
   3be10:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   3be12:	4611      	mov	r1, r2
   3be14:	f7ed fd64 	bl	298e0 <net_buf_simple_add>
   3be18:	4622      	mov	r2, r4
   3be1a:	4629      	mov	r1, r5
   3be1c:	f7fc faed 	bl	383fa <memcpy>
}
   3be20:	bd38      	pop	{r3, r4, r5, pc}

0003be22 <net_buf_simple_add_u8>:
{
   3be22:	b510      	push	{r4, lr}
   3be24:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   3be26:	2101      	movs	r1, #1
   3be28:	f7ed fd5a 	bl	298e0 <net_buf_simple_add>
	*u8 = val;
   3be2c:	7004      	strb	r4, [r0, #0]
}
   3be2e:	bd10      	pop	{r4, pc}

0003be30 <net_buf_simple_add_le16>:
{
   3be30:	b510      	push	{r4, lr}
   3be32:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   3be34:	2102      	movs	r1, #2
   3be36:	f7ed fd53 	bl	298e0 <net_buf_simple_add>
	dst[0] = val;
   3be3a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   3be3c:	0a24      	lsrs	r4, r4, #8
   3be3e:	7044      	strb	r4, [r0, #1]
}
   3be40:	bd10      	pop	{r4, pc}

0003be42 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   3be42:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   3be44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   3be48:	0089      	lsls	r1, r1, #2
   3be4a:	3180      	adds	r1, #128	; 0x80
}
   3be4c:	4408      	add	r0, r1
   3be4e:	4770      	bx	lr

0003be50 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   3be50:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   3be52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   3be56:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   3be5a:	4770      	bx	lr

0003be5c <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   3be5c:	6900      	ldr	r0, [r0, #16]
}
   3be5e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   3be62:	4770      	bx	lr

0003be64 <set_off_state>:
   3be64:	f04f 0320 	mov.w	r3, #32
   3be68:	f3ef 8211 	mrs	r2, BASEPRI
   3be6c:	f383 8812 	msr	BASEPRI_MAX, r3
   3be70:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3be74:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   3be76:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   3be7a:	d001      	beq.n	3be80 <set_off_state+0x1c>
   3be7c:	428b      	cmp	r3, r1
   3be7e:	d107      	bne.n	3be90 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   3be80:	2301      	movs	r3, #1
   3be82:	6003      	str	r3, [r0, #0]
	int err = 0;
   3be84:	2000      	movs	r0, #0
	__asm__ volatile(
   3be86:	f382 8811 	msr	BASEPRI, r2
   3be8a:	f3bf 8f6f 	isb	sy
}
   3be8e:	4770      	bx	lr
		err = -EPERM;
   3be90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3be94:	e7f7      	b.n	3be86 <set_off_state+0x22>

0003be96 <set_starting_state>:
	__asm__ volatile(
   3be96:	f04f 0320 	mov.w	r3, #32
   3be9a:	f3ef 8211 	mrs	r2, BASEPRI
   3be9e:	f383 8812 	msr	BASEPRI_MAX, r3
   3bea2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3bea6:	6803      	ldr	r3, [r0, #0]
   3bea8:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3beac:	f003 0307 	and.w	r3, r3, #7
   3beb0:	2b01      	cmp	r3, #1
   3beb2:	d008      	beq.n	3bec6 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
   3beb4:	458c      	cmp	ip, r1
   3beb6:	d009      	beq.n	3becc <set_starting_state+0x36>
		err = -EPERM;
   3beb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
   3bebc:	f382 8811 	msr	BASEPRI, r2
   3bec0:	f3bf 8f6f 	isb	sy
}
   3bec4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3bec6:	6001      	str	r1, [r0, #0]
	int err = 0;
   3bec8:	2000      	movs	r0, #0
   3beca:	e7f7      	b.n	3bebc <set_starting_state+0x26>
		err = -EALREADY;
   3becc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   3bed0:	e7f4      	b.n	3bebc <set_starting_state+0x26>

0003bed2 <set_on_state>:
	__asm__ volatile(
   3bed2:	f04f 0320 	mov.w	r3, #32
   3bed6:	f3ef 8211 	mrs	r2, BASEPRI
   3beda:	f383 8812 	msr	BASEPRI_MAX, r3
   3bede:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3bee2:	6803      	ldr	r3, [r0, #0]
   3bee4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3bee8:	f043 0302 	orr.w	r3, r3, #2
   3beec:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3beee:	f382 8811 	msr	BASEPRI, r2
   3bef2:	f3bf 8f6f 	isb	sy
}
   3bef6:	4770      	bx	lr

0003bef8 <clkstarted_handle>:
{
   3bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3befa:	4606      	mov	r6, r0
   3befc:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   3befe:	f7ff ffa0 	bl	3be42 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   3bf02:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   3bf04:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   3bf06:	2300      	movs	r3, #0
   3bf08:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   3bf0c:	f7ff ffe1 	bl	3bed2 <set_on_state>
	if (callback) {
   3bf10:	b11d      	cbz	r5, 3bf1a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   3bf12:	463a      	mov	r2, r7
   3bf14:	4621      	mov	r1, r4
   3bf16:	4630      	mov	r0, r6
   3bf18:	47a8      	blx	r5
}
   3bf1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003bf1c <async_start>:
{
   3bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3bf20:	4606      	mov	r6, r0
   3bf22:	4690      	mov	r8, r2
   3bf24:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   3bf26:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3bf28:	4629      	mov	r1, r5
   3bf2a:	f7ff ff8a 	bl	3be42 <get_sub_data>
   3bf2e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   3bf30:	9906      	ldr	r1, [sp, #24]
   3bf32:	3008      	adds	r0, #8
   3bf34:	f7ff ffaf 	bl	3be96 <set_starting_state>
	if (err < 0) {
   3bf38:	2800      	cmp	r0, #0
   3bf3a:	db09      	blt.n	3bf50 <async_start+0x34>
	subdata->cb = cb;
   3bf3c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   3bf40:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   3bf42:	4629      	mov	r1, r5
   3bf44:	4630      	mov	r0, r6
   3bf46:	f7ff ff83 	bl	3be50 <get_sub_config>
   3bf4a:	6803      	ldr	r3, [r0, #0]
   3bf4c:	4798      	blx	r3
	return 0;
   3bf4e:	2000      	movs	r0, #0
}
   3bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003bf54 <api_start>:
{
   3bf54:	b510      	push	{r4, lr}
   3bf56:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   3bf58:	2480      	movs	r4, #128	; 0x80
   3bf5a:	9400      	str	r4, [sp, #0]
   3bf5c:	f7ff ffde 	bl	3bf1c <async_start>
}
   3bf60:	b002      	add	sp, #8
   3bf62:	bd10      	pop	{r4, pc}

0003bf64 <onoff_started_callback>:
{
   3bf64:	b510      	push	{r4, lr}
   3bf66:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   3bf68:	b2c9      	uxtb	r1, r1
   3bf6a:	f7ff ff77 	bl	3be5c <get_onoff_manager>
	notify(mgr, 0);
   3bf6e:	2100      	movs	r1, #0
   3bf70:	47a0      	blx	r4
}
   3bf72:	bd10      	pop	{r4, pc}

0003bf74 <hfclk_start>:
{
   3bf74:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   3bf76:	2001      	movs	r0, #1
   3bf78:	f7f2 f988 	bl	2e28c <nrfx_clock_start>
}
   3bf7c:	bd08      	pop	{r3, pc}

0003bf7e <hfclkaudio_start>:
{
   3bf7e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   3bf80:	2003      	movs	r0, #3
   3bf82:	f7f2 f983 	bl	2e28c <nrfx_clock_start>
}
   3bf86:	bd08      	pop	{r3, pc}

0003bf88 <hfclk192m_start>:
{
   3bf88:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
   3bf8a:	2002      	movs	r0, #2
   3bf8c:	f7f2 f97e 	bl	2e28c <nrfx_clock_start>
}
   3bf90:	bd08      	pop	{r3, pc}

0003bf92 <lfclk_start>:
{
   3bf92:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3bf94:	2000      	movs	r0, #0
   3bf96:	f7f2 f979 	bl	2e28c <nrfx_clock_start>
}
   3bf9a:	bd08      	pop	{r3, pc}

0003bf9c <hfclk_stop>:
{
   3bf9c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   3bf9e:	2001      	movs	r0, #1
   3bfa0:	f7f2 fa08 	bl	2e3b4 <nrfx_clock_stop>
}
   3bfa4:	bd08      	pop	{r3, pc}

0003bfa6 <hfclkaudio_stop>:
{
   3bfa6:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
   3bfa8:	2003      	movs	r0, #3
   3bfaa:	f7f2 fa03 	bl	2e3b4 <nrfx_clock_stop>
}
   3bfae:	bd08      	pop	{r3, pc}

0003bfb0 <hfclk192m_stop>:
{
   3bfb0:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
   3bfb2:	2002      	movs	r0, #2
   3bfb4:	f7f2 f9fe 	bl	2e3b4 <nrfx_clock_stop>
}
   3bfb8:	bd08      	pop	{r3, pc}

0003bfba <lfclk_stop>:
{
   3bfba:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3bfbc:	2000      	movs	r0, #0
   3bfbe:	f7f2 f9f9 	bl	2e3b4 <nrfx_clock_stop>
}
   3bfc2:	bd08      	pop	{r3, pc}

0003bfc4 <api_stop>:
{
   3bfc4:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   3bfc6:	2280      	movs	r2, #128	; 0x80
   3bfc8:	f7ed fdb6 	bl	29b38 <stop>
}
   3bfcc:	bd08      	pop	{r3, pc}

0003bfce <k_msleep>:
{
   3bfce:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   3bfd0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3bfd4:	17c1      	asrs	r1, r0, #31
   3bfd6:	03c9      	lsls	r1, r1, #15
   3bfd8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   3bfdc:	03c0      	lsls	r0, r0, #15
   3bfde:	f240 33e7 	movw	r3, #999	; 0x3e7
   3bfe2:	18c0      	adds	r0, r0, r3
   3bfe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3bfe8:	f04f 0300 	mov.w	r3, #0
   3bfec:	f141 0100 	adc.w	r1, r1, #0
   3bff0:	f7d4 f8b2 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   3bff4:	f7f7 ffee 	bl	33fd4 <z_impl_k_sleep>
}
   3bff8:	bd08      	pop	{r3, pc}

0003bffa <blocking_start_callback>:
{
   3bffa:	b508      	push	{r3, lr}
   3bffc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3bffe:	f7f5 feef 	bl	31de0 <z_impl_k_sem_give>
}
   3c002:	bd08      	pop	{r3, pc}

0003c004 <nrf_gpio_pin_present_check>:
    switch (port)
   3c004:	0943      	lsrs	r3, r0, #5
   3c006:	d00a      	beq.n	3c01e <nrf_gpio_pin_present_check+0x1a>
   3c008:	2b01      	cmp	r3, #1
   3c00a:	d10b      	bne.n	3c024 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   3c00c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   3c010:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3c014:	fa23 f000 	lsr.w	r0, r3, r0
}
   3c018:	f000 0001 	and.w	r0, r0, #1
   3c01c:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   3c01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c022:	e7f5      	b.n	3c010 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   3c024:	2300      	movs	r3, #0
   3c026:	e7f3      	b.n	3c010 <nrf_gpio_pin_present_check+0xc>

0003c028 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   3c028:	460b      	mov	r3, r1
   3c02a:	b139      	cbz	r1, 3c03c <sys_slist_remove+0x14>
	return node->next;
   3c02c:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   3c02e:	6019      	str	r1, [r3, #0]
	return list->tail;
   3c030:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3c032:	428a      	cmp	r2, r1
   3c034:	d009      	beq.n	3c04a <sys_slist_remove+0x22>
	parent->next = child;
   3c036:	2300      	movs	r3, #0
   3c038:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   3c03a:	4770      	bx	lr
	return node->next;
   3c03c:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   3c03e:	6003      	str	r3, [r0, #0]
	return list->tail;
   3c040:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3c042:	428a      	cmp	r2, r1
   3c044:	d1f7      	bne.n	3c036 <sys_slist_remove+0xe>
	list->tail = node;
   3c046:	6043      	str	r3, [r0, #4]
}
   3c048:	e7f5      	b.n	3c036 <sys_slist_remove+0xe>
	list->tail = node;
   3c04a:	6043      	str	r3, [r0, #4]
}
   3c04c:	e7f3      	b.n	3c036 <sys_slist_remove+0xe>

0003c04e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3c04e:	b508      	push	{r3, lr}
   3c050:	460a      	mov	r2, r1
	return list->head;
   3c052:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3c054:	2100      	movs	r1, #0
   3c056:	e001      	b.n	3c05c <sys_slist_find_and_remove+0xe>
   3c058:	4619      	mov	r1, r3
   3c05a:	681b      	ldr	r3, [r3, #0]
   3c05c:	b12b      	cbz	r3, 3c06a <sys_slist_find_and_remove+0x1c>
   3c05e:	4293      	cmp	r3, r2
   3c060:	d1fa      	bne.n	3c058 <sys_slist_find_and_remove+0xa>
   3c062:	f7ff ffe1 	bl	3c028 <sys_slist_remove>
   3c066:	2001      	movs	r0, #1
   3c068:	e000      	b.n	3c06c <sys_slist_find_and_remove+0x1e>
   3c06a:	2000      	movs	r0, #0
   3c06c:	bd08      	pop	{r3, pc}

0003c06e <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3c06e:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
   3c072:	0580      	lsls	r0, r0, #22
   3c074:	0d80      	lsrs	r0, r0, #22
   3c076:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
   3c07a:	d033      	beq.n	3c0e4 <get_drive+0x76>
   3c07c:	d816      	bhi.n	3c0ac <get_drive+0x3e>
   3c07e:	2806      	cmp	r0, #6
   3c080:	d02c      	beq.n	3c0dc <get_drive+0x6e>
   3c082:	d906      	bls.n	3c092 <get_drive+0x24>
   3c084:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   3c088:	d10d      	bne.n	3c0a6 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
   3c08a:	2301      	movs	r3, #1
   3c08c:	700b      	strb	r3, [r1, #0]
	return 0;
   3c08e:	2000      	movs	r0, #0
		break;
   3c090:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3c092:	b300      	cbz	r0, 3c0d6 <get_drive+0x68>
   3c094:	2802      	cmp	r0, #2
   3c096:	d103      	bne.n	3c0a0 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
   3c098:	2304      	movs	r3, #4
   3c09a:	700b      	strb	r3, [r1, #0]
	return 0;
   3c09c:	2000      	movs	r0, #0
		break;
   3c09e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3c0a0:	f06f 0015 	mvn.w	r0, #21
   3c0a4:	4770      	bx	lr
   3c0a6:	f06f 0015 	mvn.w	r0, #21
   3c0aa:	4770      	bx	lr
   3c0ac:	f240 2302 	movw	r3, #514	; 0x202
   3c0b0:	4298      	cmp	r0, r3
   3c0b2:	d01b      	beq.n	3c0ec <get_drive+0x7e>
   3c0b4:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
   3c0b8:	d103      	bne.n	3c0c2 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
   3c0ba:	2303      	movs	r3, #3
   3c0bc:	700b      	strb	r3, [r1, #0]
	return 0;
   3c0be:	2000      	movs	r0, #0
		break;
   3c0c0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3c0c2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   3c0c6:	d103      	bne.n	3c0d0 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
   3c0c8:	2302      	movs	r3, #2
   3c0ca:	700b      	strb	r3, [r1, #0]
	return 0;
   3c0cc:	2000      	movs	r0, #0
		break;
   3c0ce:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   3c0d0:	f06f 0015 	mvn.w	r0, #21
   3c0d4:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   3c0d6:	2000      	movs	r0, #0
   3c0d8:	7008      	strb	r0, [r1, #0]
		break;
   3c0da:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   3c0dc:	2306      	movs	r3, #6
   3c0de:	700b      	strb	r3, [r1, #0]
	return 0;
   3c0e0:	2000      	movs	r0, #0
		break;
   3c0e2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   3c0e4:	2307      	movs	r3, #7
   3c0e6:	700b      	strb	r3, [r1, #0]
	return 0;
   3c0e8:	2000      	movs	r0, #0
		break;
   3c0ea:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
   3c0ec:	2305      	movs	r3, #5
   3c0ee:	700b      	strb	r3, [r1, #0]
	return 0;
   3c0f0:	2000      	movs	r0, #0
}
   3c0f2:	4770      	bx	lr

0003c0f4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
   3c0f4:	f010 0f10 	tst.w	r0, #16
   3c0f8:	d104      	bne.n	3c104 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   3c0fa:	f010 0f20 	tst.w	r0, #32
   3c0fe:	d103      	bne.n	3c108 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   3c100:	2000      	movs	r0, #0
   3c102:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   3c104:	2003      	movs	r0, #3
   3c106:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   3c108:	2001      	movs	r0, #1
}
   3c10a:	4770      	bx	lr

0003c10c <gpio_nrfx_port_get_raw>:
	return port->config;
   3c10c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3c10e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3c110:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3c112:	600b      	str	r3, [r1, #0]
}
   3c114:	2000      	movs	r0, #0
   3c116:	4770      	bx	lr

0003c118 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   3c118:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3c11a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   3c11c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   3c120:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   3c124:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
   3c126:	60d9      	str	r1, [r3, #12]
}
   3c128:	2000      	movs	r0, #0
   3c12a:	4770      	bx	lr

0003c12c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   3c12c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3c12e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3c130:	6099      	str	r1, [r3, #8]
}
   3c132:	2000      	movs	r0, #0
   3c134:	4770      	bx	lr

0003c136 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   3c136:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3c138:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3c13a:	60d9      	str	r1, [r3, #12]
}
   3c13c:	2000      	movs	r0, #0
   3c13e:	4770      	bx	lr

0003c140 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   3c140:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3c142:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3c144:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   3c146:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   3c14a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   3c14c:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
   3c14e:	60d3      	str	r3, [r2, #12]
}
   3c150:	2000      	movs	r0, #0
   3c152:	4770      	bx	lr

0003c154 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   3c154:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   3c158:	d007      	beq.n	3c16a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3c15a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
   3c15e:	d00d      	beq.n	3c17c <get_trigger+0x28>
   3c160:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   3c164:	d008      	beq.n	3c178 <get_trigger+0x24>
   3c166:	2001      	movs	r0, #1
}
   3c168:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   3c16a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
   3c16e:	d001      	beq.n	3c174 <get_trigger+0x20>
   3c170:	2005      	movs	r0, #5
   3c172:	4770      	bx	lr
   3c174:	2004      	movs	r0, #4
   3c176:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   3c178:	2002      	movs	r0, #2
   3c17a:	4770      	bx	lr
   3c17c:	2003      	movs	r0, #3
   3c17e:	4770      	bx	lr

0003c180 <gpio_nrfx_manage_callback>:
{
   3c180:	b508      	push	{r3, lr}
	return port->data;
   3c182:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   3c184:	3004      	adds	r0, #4
   3c186:	f7ed fe93 	bl	29eb0 <gpio_manage_callback>
}
   3c18a:	bd08      	pop	{r3, pc}

0003c18c <nrf_gpio_pin_dir_get>:
{
   3c18c:	b500      	push	{lr}
   3c18e:	b083      	sub	sp, #12
   3c190:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3c192:	a801      	add	r0, sp, #4
   3c194:	f7ed fed6 	bl	29f44 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   3c198:	9b01      	ldr	r3, [sp, #4]
   3c19a:	3380      	adds	r3, #128	; 0x80
   3c19c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   3c1a0:	f000 0001 	and.w	r0, r0, #1
   3c1a4:	b003      	add	sp, #12
   3c1a6:	f85d fb04 	ldr.w	pc, [sp], #4

0003c1aa <nrfx_gpio_handler>:
{
   3c1aa:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
   3c1ac:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   3c1b0:	0940      	lsrs	r0, r0, #5
   3c1b2:	f7ed fe6f 	bl	29e94 <get_dev>
	if (port == NULL) {
   3c1b6:	b130      	cbz	r0, 3c1c6 <nrfx_gpio_handler+0x1c>
   3c1b8:	4601      	mov	r1, r0
	return port->data;
   3c1ba:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   3c1bc:	2201      	movs	r2, #1
   3c1be:	40a2      	lsls	r2, r4
   3c1c0:	3004      	adds	r0, #4
   3c1c2:	f7ed fef7 	bl	29fb4 <gpio_fire_callbacks>
}
   3c1c6:	bd10      	pop	{r4, pc}

0003c1c8 <spi_context_get_next_buf>:
{
   3c1c8:	b430      	push	{r4, r5}
	while (*count) {
   3c1ca:	e004      	b.n	3c1d6 <spi_context_get_next_buf+0xe>
		++(*current);
   3c1cc:	3408      	adds	r4, #8
   3c1ce:	6004      	str	r4, [r0, #0]
		--(*count);
   3c1d0:	680c      	ldr	r4, [r1, #0]
   3c1d2:	3c01      	subs	r4, #1
   3c1d4:	600c      	str	r4, [r1, #0]
	while (*count) {
   3c1d6:	680c      	ldr	r4, [r1, #0]
   3c1d8:	b14c      	cbz	r4, 3c1ee <spi_context_get_next_buf+0x26>
		if (((*current)->len / dfs) != 0) {
   3c1da:	6804      	ldr	r4, [r0, #0]
   3c1dc:	6865      	ldr	r5, [r4, #4]
   3c1de:	429d      	cmp	r5, r3
   3c1e0:	d3f4      	bcc.n	3c1cc <spi_context_get_next_buf+0x4>
			*buf_len = (*current)->len / dfs;
   3c1e2:	fbb5 f5f3 	udiv	r5, r5, r3
   3c1e6:	6015      	str	r5, [r2, #0]
			return (*current)->buf;
   3c1e8:	6803      	ldr	r3, [r0, #0]
   3c1ea:	6818      	ldr	r0, [r3, #0]
   3c1ec:	e001      	b.n	3c1f2 <spi_context_get_next_buf+0x2a>
	*buf_len = 0;
   3c1ee:	2000      	movs	r0, #0
   3c1f0:	6010      	str	r0, [r2, #0]
}
   3c1f2:	bc30      	pop	{r4, r5}
   3c1f4:	4770      	bx	lr

0003c1f6 <spi_context_buffers_setup>:
{
   3c1f6:	b570      	push	{r4, r5, r6, lr}
   3c1f8:	4604      	mov	r4, r0
   3c1fa:	4615      	mov	r5, r2
   3c1fc:	461e      	mov	r6, r3
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   3c1fe:	460a      	mov	r2, r1
   3c200:	b309      	cbz	r1, 3c246 <spi_context_buffers_setup+0x50>
   3c202:	680b      	ldr	r3, [r1, #0]
   3c204:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   3c206:	b303      	cbz	r3, 3c24a <spi_context_buffers_setup+0x54>
   3c208:	6853      	ldr	r3, [r2, #4]
   3c20a:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   3c20c:	4633      	mov	r3, r6
   3c20e:	f104 0258 	add.w	r2, r4, #88	; 0x58
   3c212:	f104 0148 	add.w	r1, r4, #72	; 0x48
   3c216:	f104 0044 	add.w	r0, r4, #68	; 0x44
   3c21a:	f7ff ffd5 	bl	3c1c8 <spi_context_get_next_buf>
	ctx->tx_buf = (const uint8_t *)
   3c21e:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   3c220:	b1ad      	cbz	r5, 3c24e <spi_context_buffers_setup+0x58>
   3c222:	682b      	ldr	r3, [r5, #0]
   3c224:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   3c226:	b1a3      	cbz	r3, 3c252 <spi_context_buffers_setup+0x5c>
   3c228:	686b      	ldr	r3, [r5, #4]
   3c22a:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   3c22c:	4633      	mov	r3, r6
   3c22e:	f104 0260 	add.w	r2, r4, #96	; 0x60
   3c232:	f104 0150 	add.w	r1, r4, #80	; 0x50
   3c236:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   3c23a:	f7ff ffc5 	bl	3c1c8 <spi_context_get_next_buf>
	ctx->rx_buf = (uint8_t *)
   3c23e:	65e0      	str	r0, [r4, #92]	; 0x5c
	ctx->sync_status = 0;
   3c240:	2300      	movs	r3, #0
   3c242:	6423      	str	r3, [r4, #64]	; 0x40
}
   3c244:	bd70      	pop	{r4, r5, r6, pc}
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   3c246:	460b      	mov	r3, r1
   3c248:	e7dc      	b.n	3c204 <spi_context_buffers_setup+0xe>
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   3c24a:	2300      	movs	r3, #0
   3c24c:	e7dd      	b.n	3c20a <spi_context_buffers_setup+0x14>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   3c24e:	462b      	mov	r3, r5
   3c250:	e7e8      	b.n	3c224 <spi_context_buffers_setup+0x2e>
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   3c252:	2300      	movs	r3, #0
   3c254:	e7e9      	b.n	3c22a <spi_context_buffers_setup+0x34>

0003c256 <_spi_context_cs_control>:
{
   3c256:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   3c258:	6803      	ldr	r3, [r0, #0]
   3c25a:	b1a3      	cbz	r3, 3c286 <_spi_context_cs_control+0x30>
   3c25c:	4604      	mov	r4, r0
   3c25e:	689d      	ldr	r5, [r3, #8]
   3c260:	b18d      	cbz	r5, 3c286 <_spi_context_cs_control+0x30>
   3c262:	6828      	ldr	r0, [r5, #0]
   3c264:	b178      	cbz	r0, 3c286 <_spi_context_cs_control+0x30>
		if (on) {
   3c266:	b979      	cbnz	r1, 3c288 <_spi_context_cs_control+0x32>
			if (!force_off &&
   3c268:	b91a      	cbnz	r2, 3c272 <_spi_context_cs_control+0x1c>
			    ctx->config->operation & SPI_HOLD_ON_CS) {
   3c26a:	889b      	ldrh	r3, [r3, #4]
			if (!force_off &&
   3c26c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   3c270:	d109      	bne.n	3c286 <_spi_context_cs_control+0x30>
			k_busy_wait(ctx->config->cs->delay);
   3c272:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_busy_wait(usec_to_wait);
   3c274:	f002 fcf6 	bl	3ec64 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   3c278:	6823      	ldr	r3, [r4, #0]
   3c27a:	689b      	ldr	r3, [r3, #8]
	return gpio_pin_set(spec->port, spec->pin, value);
   3c27c:	2200      	movs	r2, #0
   3c27e:	7919      	ldrb	r1, [r3, #4]
   3c280:	6818      	ldr	r0, [r3, #0]
   3c282:	f7ee f85b 	bl	2a33c <gpio_pin_set>
}
   3c286:	bd38      	pop	{r3, r4, r5, pc}
   3c288:	2201      	movs	r2, #1
   3c28a:	7929      	ldrb	r1, [r5, #4]
   3c28c:	f7ee f856 	bl	2a33c <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   3c290:	6823      	ldr	r3, [r4, #0]
   3c292:	689b      	ldr	r3, [r3, #8]
   3c294:	6898      	ldr	r0, [r3, #8]
   3c296:	f002 fce5 	bl	3ec64 <z_impl_k_busy_wait>
}
   3c29a:	e7f4      	b.n	3c286 <_spi_context_cs_control+0x30>

0003c29c <gpio_pin_configure_dt>:
{
   3c29c:	b508      	push	{r3, lr}
   3c29e:	4603      	mov	r3, r0
   3c2a0:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   3c2a2:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   3c2a4:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   3c2a6:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   3c2a8:	ea42 020c 	orr.w	r2, r2, ip
   3c2ac:	f7ee f870 	bl	2a390 <z_impl_gpio_pin_configure>
}
   3c2b0:	bd08      	pop	{r3, pc}

0003c2b2 <spi_context_unlock_unconditionally>:
{
   3c2b2:	b510      	push	{r4, lr}
   3c2b4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   3c2b6:	2201      	movs	r2, #1
   3c2b8:	2100      	movs	r1, #0
   3c2ba:	f7ff ffcc 	bl	3c256 <_spi_context_cs_control>
	return sem->count;
   3c2be:	69a3      	ldr	r3, [r4, #24]
	if (!k_sem_count_get(&ctx->lock)) {
   3c2c0:	b103      	cbz	r3, 3c2c4 <spi_context_unlock_unconditionally+0x12>
}
   3c2c2:	bd10      	pop	{r4, pc}
		ctx->owner = NULL;
   3c2c4:	6063      	str	r3, [r4, #4]
		k_sem_give(&ctx->lock);
   3c2c6:	f104 0010 	add.w	r0, r4, #16
	z_impl_k_sem_give(sem);
   3c2ca:	f7f5 fd89 	bl	31de0 <z_impl_k_sem_give>
}
   3c2ce:	e7f8      	b.n	3c2c2 <spi_context_unlock_unconditionally+0x10>

0003c2d0 <spi_nrfx_release>:
}
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
   3c2d0:	b508      	push	{r3, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   3c2d2:	6900      	ldr	r0, [r0, #16]
	return !!(ctx->config == config);
   3c2d4:	6803      	ldr	r3, [r0, #0]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   3c2d6:	428b      	cmp	r3, r1
   3c2d8:	d106      	bne.n	3c2e8 <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
   3c2da:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
   3c2de:	b933      	cbnz	r3, 3c2ee <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   3c2e0:	f7ff ffe7 	bl	3c2b2 <spi_context_unlock_unconditionally>

	return 0;
   3c2e4:	2000      	movs	r0, #0
}
   3c2e6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3c2e8:	f06f 0015 	mvn.w	r0, #21
   3c2ec:	e7fb      	b.n	3c2e6 <spi_nrfx_release+0x16>
		return -EBUSY;
   3c2ee:	f06f 000f 	mvn.w	r0, #15
   3c2f2:	e7f8      	b.n	3c2e6 <spi_nrfx_release+0x16>

0003c2f4 <spi_context_release>:
{
   3c2f4:	b508      	push	{r3, lr}
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   3c2f6:	6803      	ldr	r3, [r0, #0]
   3c2f8:	889b      	ldrh	r3, [r3, #4]
   3c2fa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   3c2fe:	d000      	beq.n	3c302 <spi_context_release+0xe>
}
   3c300:	bd08      	pop	{r3, pc}
		ctx->owner = NULL;
   3c302:	2300      	movs	r3, #0
   3c304:	6043      	str	r3, [r0, #4]
		k_sem_give(&ctx->lock);
   3c306:	3010      	adds	r0, #16
   3c308:	f7f5 fd6a 	bl	31de0 <z_impl_k_sem_give>
}
   3c30c:	e7f8      	b.n	3c300 <spi_context_release+0xc>

0003c30e <spi_context_lock>:
{
   3c30e:	b538      	push	{r3, r4, r5, lr}
   3c310:	4604      	mov	r4, r0
   3c312:	9d04      	ldr	r5, [sp, #16]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   3c314:	88ab      	ldrh	r3, [r5, #4]
   3c316:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   3c31a:	d004      	beq.n	3c326 <spi_context_lock+0x18>
   3c31c:	6983      	ldr	r3, [r0, #24]
   3c31e:	b913      	cbnz	r3, 3c326 <spi_context_lock+0x18>
		(ctx->owner == spi_cfg)) {
   3c320:	6843      	ldr	r3, [r0, #4]
		(k_sem_count_get(&ctx->lock) == 0) &&
   3c322:	42ab      	cmp	r3, r5
   3c324:	d008      	beq.n	3c338 <spi_context_lock+0x2a>
	k_sem_take(&ctx->lock, K_FOREVER);
   3c326:	f104 0010 	add.w	r0, r4, #16
	return z_impl_k_sem_take(sem, timeout);
   3c32a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c332:	f7f5 fd9d 	bl	31e70 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   3c336:	6065      	str	r5, [r4, #4]
}
   3c338:	bd38      	pop	{r3, r4, r5, pc}

0003c33a <transceive>:
{
   3c33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3c33e:	b082      	sub	sp, #8
   3c340:	4604      	mov	r4, r0
   3c342:	460d      	mov	r5, r1
   3c344:	4690      	mov	r8, r2
   3c346:	461f      	mov	r7, r3
	struct spi_nrfx_data *dev_data = dev->data;
   3c348:	6906      	ldr	r6, [r0, #16]
	spi_context_lock(&dev_data->ctx, asynchronous, cb, userdata, spi_cfg);
   3c34a:	9100      	str	r1, [sp, #0]
   3c34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3c34e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3c350:	f89d 1020 	ldrb.w	r1, [sp, #32]
   3c354:	4630      	mov	r0, r6
   3c356:	f7ff ffda 	bl	3c30e <spi_context_lock>
	error = configure(dev, spi_cfg);
   3c35a:	4629      	mov	r1, r5
   3c35c:	4620      	mov	r0, r4
   3c35e:	f7ee f8e1 	bl	2a524 <configure>
	if (error == 0) {
   3c362:	4605      	mov	r5, r0
   3c364:	b138      	cbz	r0, 3c376 <transceive+0x3c>
	spi_context_release(&dev_data->ctx, error);
   3c366:	4629      	mov	r1, r5
   3c368:	4630      	mov	r0, r6
   3c36a:	f7ff ffc3 	bl	3c2f4 <spi_context_release>
}
   3c36e:	4628      	mov	r0, r5
   3c370:	b002      	add	sp, #8
   3c372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_data->busy = true;
   3c376:	2501      	movs	r5, #1
   3c378:	f886 506c 	strb.w	r5, [r6, #108]	; 0x6c
		spi_context_buffers_setup(&dev_data->ctx, tx_bufs, rx_bufs, 1);
   3c37c:	462b      	mov	r3, r5
   3c37e:	463a      	mov	r2, r7
   3c380:	4641      	mov	r1, r8
   3c382:	4630      	mov	r0, r6
   3c384:	f7ff ff37 	bl	3c1f6 <spi_context_buffers_setup>
	_spi_context_cs_control(ctx, on, false);
   3c388:	2200      	movs	r2, #0
   3c38a:	4629      	mov	r1, r5
   3c38c:	4630      	mov	r0, r6
   3c38e:	f7ff ff62 	bl	3c256 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   3c392:	4620      	mov	r0, r4
   3c394:	f7ee fae2 	bl	2a95c <transfer_next_chunk>
		error = spi_context_wait_for_completion(&dev_data->ctx);
   3c398:	4630      	mov	r0, r6
   3c39a:	f7ee fa89 	bl	2a8b0 <spi_context_wait_for_completion>
   3c39e:	4605      	mov	r5, r0
   3c3a0:	e7e1      	b.n	3c366 <transceive+0x2c>

0003c3a2 <spi_nrfx_transceive>:
{
   3c3a2:	b510      	push	{r4, lr}
   3c3a4:	b084      	sub	sp, #16
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
   3c3a6:	2400      	movs	r4, #0
   3c3a8:	9402      	str	r4, [sp, #8]
   3c3aa:	9401      	str	r4, [sp, #4]
   3c3ac:	9400      	str	r4, [sp, #0]
   3c3ae:	f7ff ffc4 	bl	3c33a <transceive>
}
   3c3b2:	b004      	add	sp, #16
   3c3b4:	bd10      	pop	{r4, pc}

0003c3b6 <irq_connect2>:
#ifdef CONFIG_SPI_1_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(2);
   3c3b6:	b508      	push	{r3, lr}
   3c3b8:	2200      	movs	r2, #0
   3c3ba:	2101      	movs	r1, #1
   3c3bc:	200b      	movs	r0, #11
   3c3be:	f7dd f807 	bl	193d0 <z_arm_irq_priority_set>
   3c3c2:	bd08      	pop	{r3, pc}

0003c3c4 <irq_connect3>:
#endif

#ifdef CONFIG_SPI_3_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(3);
   3c3c4:	b508      	push	{r3, lr}
   3c3c6:	2200      	movs	r2, #0
   3c3c8:	2101      	movs	r1, #1
   3c3ca:	200c      	movs	r0, #12
   3c3cc:	f7dd f800 	bl	193d0 <z_arm_irq_priority_set>
   3c3d0:	bd08      	pop	{r3, pc}

0003c3d2 <irq_connect4>:
#endif

#ifdef CONFIG_SPI_4_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(4);
   3c3d2:	b508      	push	{r3, lr}
   3c3d4:	2200      	movs	r2, #0
   3c3d6:	2101      	movs	r1, #1
   3c3d8:	200a      	movs	r0, #10
   3c3da:	f7dc fff9 	bl	193d0 <z_arm_irq_priority_set>
   3c3de:	bd08      	pop	{r3, pc}

0003c3e0 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
   3c3e0:	b510      	push	{r4, lr}
   3c3e2:	b082      	sub	sp, #8
   3c3e4:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   3c3e6:	aa01      	add	r2, sp, #4
   3c3e8:	f000 ff25 	bl	3d236 <pinctrl_lookup_state>
	if (ret < 0) {
   3c3ec:	2800      	cmp	r0, #0
   3c3ee:	db05      	blt.n	3c3fc <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   3c3f0:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3c3f2:	6822      	ldr	r2, [r4, #0]
   3c3f4:	7919      	ldrb	r1, [r3, #4]
   3c3f6:	6818      	ldr	r0, [r3, #0]
   3c3f8:	f7f0 ffda 	bl	2d3b0 <pinctrl_configure_pins>
}
   3c3fc:	b002      	add	sp, #8
   3c3fe:	bd10      	pop	{r4, pc}

0003c400 <spi_nrfx_init>:
{
   3c400:	b538      	push	{r3, r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   3c402:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   3c404:	6905      	ldr	r5, [r0, #16]
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   3c406:	2100      	movs	r1, #0
   3c408:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   3c40a:	f7ff ffe9 	bl	3c3e0 <pinctrl_apply_state>
	if (err < 0) {
   3c40e:	2800      	cmp	r0, #0
   3c410:	db0a      	blt.n	3c428 <spi_nrfx_init+0x28>
	dev_config->irq_connect();
   3c412:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3c414:	4798      	blx	r3
	err = spi_context_cs_configure_all(&dev_data->ctx);
   3c416:	4628      	mov	r0, r5
   3c418:	f7ee fb92 	bl	2ab40 <spi_context_cs_configure_all>
	if (err < 0) {
   3c41c:	2800      	cmp	r0, #0
   3c41e:	db03      	blt.n	3c428 <spi_nrfx_init+0x28>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   3c420:	4628      	mov	r0, r5
   3c422:	f7ff ff46 	bl	3c2b2 <spi_context_unlock_unconditionally>
	return 0;
   3c426:	2000      	movs	r0, #0
}
   3c428:	bd38      	pop	{r3, r4, r5, pc}

0003c42a <qspi_get_zephyr_ret_code>:
	switch (res) {
   3c42a:	f100 4074 	add.w	r0, r0, #4093640704	; 0xf4000000
   3c42e:	f500 00a6 	add.w	r0, r0, #5439488	; 0x530000
   3c432:	280a      	cmp	r0, #10
   3c434:	d80c      	bhi.n	3c450 <qspi_get_zephyr_ret_code+0x26>
   3c436:	e8df f000 	tbb	[pc, r0]
   3c43a:	0b06      	.short	0x0b06
   3c43c:	080e0b0b 	.word	0x080e0b0b
   3c440:	0b0b0b0b 	.word	0x0b0b0b0b
   3c444:	0e          	.byte	0x0e
   3c445:	00          	.byte	0x00
   3c446:	2000      	movs	r0, #0
   3c448:	4770      	bx	lr
		return -ECANCELED;
   3c44a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   3c44e:	4770      	bx	lr
		return -EBUSY;
   3c450:	f06f 000f 	mvn.w	r0, #15
   3c454:	4770      	bx	lr
		return -EINVAL;
   3c456:	f06f 0015 	mvn.w	r0, #21
}
   3c45a:	4770      	bx	lr

0003c45c <qspi_handler>:
	if (event == NRFX_QSPI_EVENT_DONE) {
   3c45c:	b100      	cbz	r0, 3c460 <qspi_handler+0x4>
   3c45e:	4770      	bx	lr
{
   3c460:	b508      	push	{r3, lr}
	k_sem_give(&dev_data->sync);
   3c462:	f101 0030 	add.w	r0, r1, #48	; 0x30
	z_impl_k_sem_give(sem);
   3c466:	f7f5 fcbb 	bl	31de0 <z_impl_k_sem_give>
}
   3c46a:	bd08      	pop	{r3, pc}

0003c46c <qspi_trans_lock>:
{
   3c46c:	b508      	push	{r3, lr}
	struct qspi_nor_data *dev_data = dev->data;
   3c46e:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   3c470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c478:	f7f5 fcfa 	bl	31e70 <z_impl_k_sem_take>
}
   3c47c:	bd08      	pop	{r3, pc}

0003c47e <qspi_lock>:
{
   3c47e:	b508      	push	{r3, lr}
	struct qspi_nor_data *dev_data = dev->data;
   3c480:	6900      	ldr	r0, [r0, #16]
	k_sem_take(&dev_data->sem, K_FOREVER);
   3c482:	3018      	adds	r0, #24
   3c484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3c48c:	f7f5 fcf0 	bl	31e70 <z_impl_k_sem_take>
}
   3c490:	bd08      	pop	{r3, pc}

0003c492 <qspi_nor_write_protection_set>:
{
   3c492:	b500      	push	{lr}
   3c494:	b085      	sub	sp, #20
	struct qspi_cmd cmd = {
   3c496:	2300      	movs	r3, #0
   3c498:	9301      	str	r3, [sp, #4]
   3c49a:	9302      	str	r3, [sp, #8]
   3c49c:	9303      	str	r3, [sp, #12]
   3c49e:	b151      	cbz	r1, 3c4b6 <qspi_nor_write_protection_set+0x24>
   3c4a0:	2304      	movs	r3, #4
   3c4a2:	f88d 3004 	strb.w	r3, [sp, #4]
	if (qspi_send_cmd(dev, &cmd, false) != 0) {
   3c4a6:	2200      	movs	r2, #0
   3c4a8:	a901      	add	r1, sp, #4
   3c4aa:	f7ee fc0b 	bl	2acc4 <qspi_send_cmd>
   3c4ae:	b920      	cbnz	r0, 3c4ba <qspi_nor_write_protection_set+0x28>
}
   3c4b0:	b005      	add	sp, #20
   3c4b2:	f85d fb04 	ldr.w	pc, [sp], #4
	struct qspi_cmd cmd = {
   3c4b6:	2306      	movs	r3, #6
   3c4b8:	e7f3      	b.n	3c4a2 <qspi_nor_write_protection_set+0x10>
		ret = -EIO;
   3c4ba:	f06f 0004 	mvn.w	r0, #4
	return ret;
   3c4be:	e7f7      	b.n	3c4b0 <qspi_nor_write_protection_set+0x1e>

0003c4c0 <qspi_rdsr>:
	if (sr_num > 2 || sr_num == 0) {
   3c4c0:	1e4b      	subs	r3, r1, #1
   3c4c2:	b2db      	uxtb	r3, r3
   3c4c4:	2b01      	cmp	r3, #1
   3c4c6:	d820      	bhi.n	3c50a <qspi_rdsr+0x4a>
{
   3c4c8:	b500      	push	{lr}
   3c4ca:	b087      	sub	sp, #28
	if (sr_num == 2) {
   3c4cc:	2902      	cmp	r1, #2
   3c4ce:	d01a      	beq.n	3c506 <qspi_rdsr+0x46>
	uint8_t opcode = SPI_NOR_CMD_RDSR;
   3c4d0:	2105      	movs	r1, #5
	uint8_t sr = 0xFF;
   3c4d2:	23ff      	movs	r3, #255	; 0xff
   3c4d4:	f88d 3017 	strb.w	r3, [sp, #23]
	const struct qspi_buf sr_buf = {
   3c4d8:	f10d 0317 	add.w	r3, sp, #23
   3c4dc:	9303      	str	r3, [sp, #12]
   3c4de:	2301      	movs	r3, #1
   3c4e0:	9304      	str	r3, [sp, #16]
	struct qspi_cmd cmd = {
   3c4e2:	2200      	movs	r2, #0
   3c4e4:	9200      	str	r2, [sp, #0]
   3c4e6:	9201      	str	r2, [sp, #4]
   3c4e8:	9202      	str	r2, [sp, #8]
   3c4ea:	f88d 1000 	strb.w	r1, [sp]
   3c4ee:	ab03      	add	r3, sp, #12
   3c4f0:	9302      	str	r3, [sp, #8]
	int ret = qspi_send_cmd(dev, &cmd, false);
   3c4f2:	4669      	mov	r1, sp
   3c4f4:	f7ee fbe6 	bl	2acc4 <qspi_send_cmd>
	return (ret < 0) ? ret : sr;
   3c4f8:	2800      	cmp	r0, #0
   3c4fa:	db01      	blt.n	3c500 <qspi_rdsr+0x40>
   3c4fc:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
   3c500:	b007      	add	sp, #28
   3c502:	f85d fb04 	ldr.w	pc, [sp], #4
		opcode = SPI_NOR_CMD_RDSR2;
   3c506:	2135      	movs	r1, #53	; 0x35
   3c508:	e7e3      	b.n	3c4d2 <qspi_rdsr+0x12>
		return -EINVAL;
   3c50a:	f06f 0015 	mvn.w	r0, #21
}
   3c50e:	4770      	bx	lr

0003c510 <qspi_wait_while_writing>:
{
   3c510:	b510      	push	{r4, lr}
   3c512:	4604      	mov	r4, r0
		ret = qspi_rdsr(dev, 1);
   3c514:	2101      	movs	r1, #1
   3c516:	4620      	mov	r0, r4
   3c518:	f7ff ffd2 	bl	3c4c0 <qspi_rdsr>
		 && ((ret & SPI_NOR_WIP_BIT) != 0U));
   3c51c:	2800      	cmp	r0, #0
   3c51e:	db02      	blt.n	3c526 <qspi_wait_while_writing+0x16>
   3c520:	f010 0f01 	tst.w	r0, #1
   3c524:	d1f6      	bne.n	3c514 <qspi_wait_while_writing+0x4>
}
   3c526:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   3c52a:	bd10      	pop	{r4, pc}

0003c52c <k_msleep>:
{
   3c52c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   3c52e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3c532:	17c1      	asrs	r1, r0, #31
   3c534:	03c9      	lsls	r1, r1, #15
   3c536:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   3c53a:	03c0      	lsls	r0, r0, #15
   3c53c:	f240 33e7 	movw	r3, #999	; 0x3e7
   3c540:	18c0      	adds	r0, r0, r3
   3c542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3c546:	f04f 0300 	mov.w	r3, #0
   3c54a:	f141 0100 	adc.w	r1, r1, #0
   3c54e:	f7d3 fe03 	bl	10158 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
   3c552:	f7f7 fd3f 	bl	33fd4 <z_impl_k_sleep>
}
   3c556:	bd08      	pop	{r3, pc}

0003c558 <qspi_read_jedec_id>:
{
   3c558:	b530      	push	{r4, r5, lr}
   3c55a:	b087      	sub	sp, #28
   3c55c:	4604      	mov	r4, r0
	const struct qspi_buf rx_buf = {
   3c55e:	9104      	str	r1, [sp, #16]
   3c560:	2303      	movs	r3, #3
   3c562:	9305      	str	r3, [sp, #20]
	const struct qspi_cmd cmd = {
   3c564:	2300      	movs	r3, #0
   3c566:	9301      	str	r3, [sp, #4]
   3c568:	9302      	str	r3, [sp, #8]
   3c56a:	9303      	str	r3, [sp, #12]
   3c56c:	239f      	movs	r3, #159	; 0x9f
   3c56e:	f88d 3004 	strb.w	r3, [sp, #4]
   3c572:	ab04      	add	r3, sp, #16
   3c574:	9303      	str	r3, [sp, #12]
	int ret = qspi_device_init(dev);
   3c576:	f7ee fb6f 	bl	2ac58 <qspi_device_init>
	if (ret == 0) {
   3c57a:	4605      	mov	r5, r0
   3c57c:	b128      	cbz	r0, 3c58a <qspi_read_jedec_id+0x32>
	qspi_device_uninit(dev);
   3c57e:	4620      	mov	r0, r4
   3c580:	f7ee fd58 	bl	2b034 <qspi_device_uninit>
}
   3c584:	4628      	mov	r0, r5
   3c586:	b007      	add	sp, #28
   3c588:	bd30      	pop	{r4, r5, pc}
		ret = qspi_send_cmd(dev, &cmd, false);
   3c58a:	2200      	movs	r2, #0
   3c58c:	a901      	add	r1, sp, #4
   3c58e:	4620      	mov	r0, r4
   3c590:	f7ee fb98 	bl	2acc4 <qspi_send_cmd>
   3c594:	4605      	mov	r5, r0
   3c596:	e7f2      	b.n	3c57e <qspi_read_jedec_id+0x26>

0003c598 <pinctrl_apply_state>:
{
   3c598:	b510      	push	{r4, lr}
   3c59a:	b082      	sub	sp, #8
   3c59c:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   3c59e:	aa01      	add	r2, sp, #4
   3c5a0:	f000 fe49 	bl	3d236 <pinctrl_lookup_state>
	if (ret < 0) {
   3c5a4:	2800      	cmp	r0, #0
   3c5a6:	db05      	blt.n	3c5b4 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   3c5a8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3c5aa:	6822      	ldr	r2, [r4, #0]
   3c5ac:	7919      	ldrb	r1, [r3, #4]
   3c5ae:	6818      	ldr	r0, [r3, #0]
   3c5b0:	f7f0 fefe 	bl	2d3b0 <pinctrl_configure_pins>
}
   3c5b4:	b002      	add	sp, #8
   3c5b6:	bd10      	pop	{r4, pc}

0003c5b8 <qspi_nor_configure>:
{
   3c5b8:	b510      	push	{r4, lr}
   3c5ba:	4604      	mov	r4, r0
	int ret = qspi_nrfx_configure(dev);
   3c5bc:	f7ee fc5e 	bl	2ae7c <qspi_nrfx_configure>
	if (ret != 0) {
   3c5c0:	b100      	cbz	r0, 3c5c4 <qspi_nor_configure+0xc>
}
   3c5c2:	bd10      	pop	{r4, pc}
	qspi_device_uninit(dev);
   3c5c4:	4620      	mov	r0, r4
   3c5c6:	f7ee fd35 	bl	2b034 <qspi_device_uninit>
	if (qspi_nor_read_id(dev) != 0) {
   3c5ca:	4620      	mov	r0, r4
   3c5cc:	f7ef f8f4 	bl	2b7b8 <qspi_nor_read_id>
   3c5d0:	2800      	cmp	r0, #0
   3c5d2:	d0f6      	beq.n	3c5c2 <qspi_nor_configure+0xa>
		return -ENODEV;
   3c5d4:	f06f 0012 	mvn.w	r0, #18
   3c5d8:	e7f3      	b.n	3c5c2 <qspi_nor_configure+0xa>

0003c5da <shift_write_context>:
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
}

static void shift_write_context(uint32_t shift, struct flash_context *w_ctx)
{
	w_ctx->flash_addr += shift;
   3c5da:	684b      	ldr	r3, [r1, #4]
   3c5dc:	4403      	add	r3, r0
   3c5de:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   3c5e0:	680b      	ldr	r3, [r1, #0]
   3c5e2:	4403      	add	r3, r0
   3c5e4:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   3c5e6:	688b      	ldr	r3, [r1, #8]
   3c5e8:	1a1b      	subs	r3, r3, r0
   3c5ea:	608b      	str	r3, [r1, #8]
}
   3c5ec:	4770      	bx	lr

0003c5ee <is_regular_addr_valid>:
{
   3c5ee:	b538      	push	{r3, r4, r5, lr}
   3c5f0:	4604      	mov	r4, r0
   3c5f2:	460d      	mov	r5, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   3c5f4:	f001 f8b6 	bl	3d764 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   3c5f8:	2c00      	cmp	r4, #0
   3c5fa:	db06      	blt.n	3c60a <is_regular_addr_valid+0x1c>
	return (addr >= boundary_start &&
   3c5fc:	42a0      	cmp	r0, r4
   3c5fe:	d906      	bls.n	3c60e <is_regular_addr_valid+0x20>
			(len <= (boundary_start + boundary_size - addr)));
   3c600:	1b00      	subs	r0, r0, r4
			(addr < (boundary_start + boundary_size)) &&
   3c602:	4285      	cmp	r5, r0
   3c604:	d905      	bls.n	3c612 <is_regular_addr_valid+0x24>
   3c606:	2000      	movs	r0, #0
   3c608:	e000      	b.n	3c60c <is_regular_addr_valid+0x1e>
   3c60a:	2000      	movs	r0, #0
}
   3c60c:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   3c60e:	2000      	movs	r0, #0
   3c610:	e7fc      	b.n	3c60c <is_regular_addr_valid+0x1e>
   3c612:	2001      	movs	r0, #1
   3c614:	e7fa      	b.n	3c60c <is_regular_addr_valid+0x1e>

0003c616 <erase_op>:
{
   3c616:	b538      	push	{r3, r4, r5, lr}
   3c618:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   3c61a:	f001 f8a7 	bl	3d76c <nrfx_nvmc_flash_page_size_get>
   3c61e:	4605      	mov	r5, r0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   3c620:	6860      	ldr	r0, [r4, #4]
   3c622:	f7f2 fca1 	bl	2ef68 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   3c626:	68a3      	ldr	r3, [r4, #8]
   3c628:	1b5b      	subs	r3, r3, r5
   3c62a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   3c62c:	6862      	ldr	r2, [r4, #4]
   3c62e:	442a      	add	r2, r5
   3c630:	6062      	str	r2, [r4, #4]
	} while (e_ctx->len > 0);
   3c632:	2b00      	cmp	r3, #0
   3c634:	d1f4      	bne.n	3c620 <erase_op+0xa>
}
   3c636:	2000      	movs	r0, #0
   3c638:	bd38      	pop	{r3, r4, r5, pc}

0003c63a <erase>:

	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
   3c63a:	b500      	push	{lr}
   3c63c:	b085      	sub	sp, #20
	struct flash_context context = {
   3c63e:	2300      	movs	r3, #0
   3c640:	9301      	str	r3, [sp, #4]
   3c642:	9302      	str	r3, [sp, #8]
   3c644:	9303      	str	r3, [sp, #12]
   3c646:	9002      	str	r0, [sp, #8]
   3c648:	9103      	str	r1, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   3c64a:	a801      	add	r0, sp, #4
   3c64c:	f7ff ffe3 	bl	3c616 <erase_op>
}
   3c650:	b005      	add	sp, #20
   3c652:	f85d fb04 	ldr.w	pc, [sp], #4

0003c656 <write_op>:
{
   3c656:	b510      	push	{r4, lr}
   3c658:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   3c65a:	e008      	b.n	3c66e <write_op+0x18>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   3c65c:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   3c65e:	6819      	ldr	r1, [r3, #0]
   3c660:	6860      	ldr	r0, [r4, #4]
   3c662:	f7f2 fcb5 	bl	2efd0 <nrfx_nvmc_word_write>
		shift_write_context(sizeof(uint32_t), w_ctx);
   3c666:	4621      	mov	r1, r4
   3c668:	2004      	movs	r0, #4
   3c66a:	f7ff ffb6 	bl	3c5da <shift_write_context>
	while (w_ctx->len >= sizeof(uint32_t)) {
   3c66e:	68a3      	ldr	r3, [r4, #8]
   3c670:	2b03      	cmp	r3, #3
   3c672:	d8f3      	bhi.n	3c65c <write_op+0x6>
	nvmc_wait_ready();
   3c674:	f7ef f932 	bl	2b8dc <nvmc_wait_ready>
}
   3c678:	2000      	movs	r0, #0
   3c67a:	bd10      	pop	{r4, pc}

0003c67c <write>:

static int write(off_t addr, const void *data, size_t len)
{
   3c67c:	b500      	push	{lr}
   3c67e:	b085      	sub	sp, #20
	struct flash_context context = {
   3c680:	9101      	str	r1, [sp, #4]
   3c682:	9002      	str	r0, [sp, #8]
   3c684:	9203      	str	r2, [sp, #12]
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   3c686:	a801      	add	r0, sp, #4
   3c688:	f7ff ffe5 	bl	3c656 <write_op>
}
   3c68c:	b005      	add	sp, #20
   3c68e:	f85d fb04 	ldr.w	pc, [sp], #4

0003c692 <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
   3c692:	b570      	push	{r4, r5, r6, lr}
   3c694:	b082      	sub	sp, #8
   3c696:	460d      	mov	r5, r1
   3c698:	4616      	mov	r6, r2
   3c69a:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
   3c69c:	6882      	ldr	r2, [r0, #8]
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
   3c69e:	2300      	movs	r3, #0
   3c6a0:	6023      	str	r3, [r4, #0]
	info->index = 0U;
   3c6a2:	60a3      	str	r3, [r4, #8]

	api->page_layout(dev, &layout, &layout_size);
   3c6a4:	6913      	ldr	r3, [r2, #16]
   3c6a6:	466a      	mov	r2, sp
   3c6a8:	a901      	add	r1, sp, #4
   3c6aa:	4798      	blx	r3

	while (layout_size--) {
   3c6ac:	e014      	b.n	3c6d8 <flash_get_page_info+0x46>
		info->size = layout->pages_size;
		if (offs == 0) {
			index_jmp = index - info->index;
		} else {
			index_jmp = (offs - info->start_offset) / info->size;
   3c6ae:	6820      	ldr	r0, [r4, #0]
   3c6b0:	1a28      	subs	r0, r5, r0
   3c6b2:	fbb0 f0f2 	udiv	r0, r0, r2
		}

		index_jmp = MIN(index_jmp, layout->pages_count);
   3c6b6:	681b      	ldr	r3, [r3, #0]
   3c6b8:	4298      	cmp	r0, r3
   3c6ba:	bf28      	it	cs
   3c6bc:	4618      	movcs	r0, r3
		info->start_offset += (index_jmp * info->size);
   3c6be:	6823      	ldr	r3, [r4, #0]
   3c6c0:	fb00 3302 	mla	r3, r0, r2, r3
   3c6c4:	6023      	str	r3, [r4, #0]
		info->index += index_jmp;
   3c6c6:	68a3      	ldr	r3, [r4, #8]
   3c6c8:	4403      	add	r3, r0
   3c6ca:	60a3      	str	r3, [r4, #8]
		if (index_jmp < layout->pages_count) {
   3c6cc:	9b01      	ldr	r3, [sp, #4]
   3c6ce:	681a      	ldr	r2, [r3, #0]
   3c6d0:	4282      	cmp	r2, r0
   3c6d2:	d811      	bhi.n	3c6f8 <flash_get_page_info+0x66>
			return 0;
		}

		layout++;
   3c6d4:	3308      	adds	r3, #8
   3c6d6:	9301      	str	r3, [sp, #4]
	while (layout_size--) {
   3c6d8:	9b00      	ldr	r3, [sp, #0]
   3c6da:	1e5a      	subs	r2, r3, #1
   3c6dc:	9200      	str	r2, [sp, #0]
   3c6de:	b13b      	cbz	r3, 3c6f0 <flash_get_page_info+0x5e>
		info->size = layout->pages_size;
   3c6e0:	9b01      	ldr	r3, [sp, #4]
   3c6e2:	685a      	ldr	r2, [r3, #4]
   3c6e4:	6062      	str	r2, [r4, #4]
		if (offs == 0) {
   3c6e6:	2d00      	cmp	r5, #0
   3c6e8:	d1e1      	bne.n	3c6ae <flash_get_page_info+0x1c>
			index_jmp = index - info->index;
   3c6ea:	68a0      	ldr	r0, [r4, #8]
   3c6ec:	1a30      	subs	r0, r6, r0
   3c6ee:	e7e2      	b.n	3c6b6 <flash_get_page_info+0x24>
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
   3c6f0:	f06f 0015 	mvn.w	r0, #21
}
   3c6f4:	b002      	add	sp, #8
   3c6f6:	bd70      	pop	{r4, r5, r6, pc}
			return 0;
   3c6f8:	2000      	movs	r0, #0
   3c6fa:	e7fb      	b.n	3c6f4 <flash_get_page_info+0x62>

0003c6fc <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3c6fc:	b508      	push	{r3, lr}
   3c6fe:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
   3c700:	2200      	movs	r2, #0
   3c702:	f7ff ffc6 	bl	3c692 <flash_get_page_info>
}
   3c706:	bd08      	pop	{r3, pc}

0003c708 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3c708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3c70c:	b086      	sub	sp, #24
   3c70e:	4689      	mov	r9, r1
   3c710:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   3c712:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   3c714:	691b      	ldr	r3, [r3, #16]
   3c716:	aa01      	add	r2, sp, #4
   3c718:	a905      	add	r1, sp, #20
   3c71a:	4798      	blx	r3
	off_t off = 0;
   3c71c:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   3c71e:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   3c720:	46a2      	mov	sl, r4
   3c722:	9b01      	ldr	r3, [sp, #4]
   3c724:	4553      	cmp	r3, sl
   3c726:	d914      	bls.n	3c752 <flash_page_foreach+0x4a>
		const struct flash_pages_layout *l = &layout[block];
   3c728:	9f05      	ldr	r7, [sp, #20]
   3c72a:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   3c72e:	687b      	ldr	r3, [r7, #4]
   3c730:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   3c732:	2500      	movs	r5, #0
   3c734:	e003      	b.n	3c73e <flash_page_foreach+0x36>

			if (!cb(&page_info, data)) {
				return;
			}

			off += page_info.size;
   3c736:	9b03      	ldr	r3, [sp, #12]
   3c738:	441c      	add	r4, r3
			page++;
   3c73a:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   3c73c:	3501      	adds	r5, #1
   3c73e:	683b      	ldr	r3, [r7, #0]
   3c740:	42ab      	cmp	r3, r5
   3c742:	d909      	bls.n	3c758 <flash_page_foreach+0x50>
			page_info.start_offset = off;
   3c744:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   3c746:	9604      	str	r6, [sp, #16]
			if (!cb(&page_info, data)) {
   3c748:	4641      	mov	r1, r8
   3c74a:	a802      	add	r0, sp, #8
   3c74c:	47c8      	blx	r9
   3c74e:	2800      	cmp	r0, #0
   3c750:	d1f1      	bne.n	3c736 <flash_page_foreach+0x2e>
		}
	}
}
   3c752:	b006      	add	sp, #24
   3c754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (block = 0; block < num_blocks; block++) {
   3c758:	f10a 0a01 	add.w	sl, sl, #1
   3c75c:	e7e1      	b.n	3c722 <flash_page_foreach+0x1a>

0003c75e <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
   3c75e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c760:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3c762:	f04f 0120 	mov.w	r1, #32
   3c766:	f3ef 8311 	mrs	r3, BASEPRI
   3c76a:	f381 8812 	msr	BASEPRI_MAX, r1
   3c76e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3c772:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3c776:	b131      	cbz	r1, 3c786 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c778:	2100      	movs	r1, #0
   3c77a:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
   3c77e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c782:	2101      	movs	r1, #1
   3c784:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
   3c786:	f383 8811 	msr	BASEPRI, r3
   3c78a:	f3bf 8f6f 	isb	sy
}
   3c78e:	4770      	bx	lr

0003c790 <uarte_nrfx_configure>:
{
   3c790:	b570      	push	{r4, r5, r6, lr}
   3c792:	b082      	sub	sp, #8
   3c794:	4605      	mov	r5, r0
   3c796:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
   3c798:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
   3c79a:	794b      	ldrb	r3, [r1, #5]
   3c79c:	2b01      	cmp	r3, #1
   3c79e:	d006      	beq.n	3c7ae <uarte_nrfx_configure+0x1e>
   3c7a0:	2b03      	cmp	r3, #3
   3c7a2:	d011      	beq.n	3c7c8 <uarte_nrfx_configure+0x38>
   3c7a4:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   3c7a8:	4610      	mov	r0, r2
   3c7aa:	b002      	add	sp, #8
   3c7ac:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   3c7ae:	2300      	movs	r3, #0
   3c7b0:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   3c7b4:	79a3      	ldrb	r3, [r4, #6]
   3c7b6:	2b03      	cmp	r3, #3
   3c7b8:	d146      	bne.n	3c848 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   3c7ba:	79e3      	ldrb	r3, [r4, #7]
   3c7bc:	b143      	cbz	r3, 3c7d0 <uarte_nrfx_configure+0x40>
   3c7be:	2b01      	cmp	r3, #1
   3c7c0:	d015      	beq.n	3c7ee <uarte_nrfx_configure+0x5e>
   3c7c2:	f06f 0285 	mvn.w	r2, #133	; 0x85
   3c7c6:	e7ef      	b.n	3c7a8 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   3c7c8:	2310      	movs	r3, #16
   3c7ca:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   3c7ce:	e7f1      	b.n	3c7b4 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   3c7d0:	2300      	movs	r3, #0
   3c7d2:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   3c7d6:	2300      	movs	r3, #0
   3c7d8:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   3c7dc:	7923      	ldrb	r3, [r4, #4]
   3c7de:	2b01      	cmp	r3, #1
   3c7e0:	d02a      	beq.n	3c838 <uarte_nrfx_configure+0xa8>
   3c7e2:	2b02      	cmp	r3, #2
   3c7e4:	d024      	beq.n	3c830 <uarte_nrfx_configure+0xa0>
   3c7e6:	b133      	cbz	r3, 3c7f6 <uarte_nrfx_configure+0x66>
   3c7e8:	f06f 0285 	mvn.w	r2, #133	; 0x85
   3c7ec:	e7dc      	b.n	3c7a8 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   3c7ee:	2301      	movs	r3, #1
   3c7f0:	f88d 3000 	strb.w	r3, [sp]
		break;
   3c7f4:	e7ef      	b.n	3c7d6 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   3c7f6:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   3c7fa:	6821      	ldr	r1, [r4, #0]
   3c7fc:	4628      	mov	r0, r5
   3c7fe:	f7ef fa79 	bl	2bcf4 <baudrate_set>
   3c802:	4602      	mov	r2, r0
   3c804:	bb18      	cbnz	r0, 3c84e <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
   3c806:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   3c808:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   3c80a:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   3c80e:	f89d 0002 	ldrb.w	r0, [sp, #2]
   3c812:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   3c814:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   3c818:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   3c81a:	f89d 0000 	ldrb.w	r0, [sp]
   3c81e:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   3c820:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
   3c824:	3604      	adds	r6, #4
   3c826:	e894 0003 	ldmia.w	r4, {r0, r1}
   3c82a:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
   3c82e:	e7bb      	b.n	3c7a8 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   3c830:	230e      	movs	r3, #14
   3c832:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   3c836:	e7e0      	b.n	3c7fa <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   3c838:	230e      	movs	r3, #14
   3c83a:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   3c83e:	f44f 7380 	mov.w	r3, #256	; 0x100
   3c842:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   3c846:	e7d8      	b.n	3c7fa <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
   3c848:	f06f 0285 	mvn.w	r2, #133	; 0x85
   3c84c:	e7ac      	b.n	3c7a8 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
   3c84e:	f06f 0285 	mvn.w	r2, #133	; 0x85
   3c852:	e7a9      	b.n	3c7a8 <uarte_nrfx_configure+0x18>

0003c854 <uarte_nrfx_config_get>:
{
   3c854:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
   3c856:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
   3c858:	3304      	adds	r3, #4
   3c85a:	e893 0003 	ldmia.w	r3, {r0, r1}
   3c85e:	e882 0003 	stmia.w	r2, {r0, r1}
}
   3c862:	2000      	movs	r0, #0
   3c864:	4770      	bx	lr

0003c866 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
   3c866:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c868:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3c86a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3c86e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3c872:	4770      	bx	lr

0003c874 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
   3c874:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c876:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   3c878:	685b      	ldr	r3, [r3, #4]
   3c87a:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3c87e:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3c882:	b929      	cbnz	r1, 3c890 <is_tx_ready+0x1c>
   3c884:	b933      	cbnz	r3, 3c894 <is_tx_ready+0x20>
   3c886:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   3c88a:	b92b      	cbnz	r3, 3c898 <is_tx_ready+0x24>
   3c88c:	2000      	movs	r0, #0
   3c88e:	4770      	bx	lr
   3c890:	2001      	movs	r0, #1
   3c892:	4770      	bx	lr
   3c894:	2000      	movs	r0, #0
   3c896:	4770      	bx	lr
   3c898:	2001      	movs	r0, #1
}
   3c89a:	4770      	bx	lr

0003c89c <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
   3c89c:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
   3c89e:	68db      	ldr	r3, [r3, #12]
   3c8a0:	b123      	cbz	r3, 3c8ac <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
   3c8a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
		data->async->low_power_mask |= mask;
   3c8a6:	4311      	orrs	r1, r2
   3c8a8:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	const struct uarte_nrfx_config *config = dev->config;
   3c8ac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c8ae:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3c8b0:	2208      	movs	r2, #8
   3c8b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3c8b6:	4770      	bx	lr

0003c8b8 <tx_start>:
{
   3c8b8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   3c8ba:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c8bc:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3c8be:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3c8c2:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3c8c6:	2200      	movs	r2, #0
   3c8c8:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
   3c8cc:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
   3c8d0:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
   3c8d4:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3c8d8:	685b      	ldr	r3, [r3, #4]
   3c8da:	f013 0f10 	tst.w	r3, #16
   3c8de:	d102      	bne.n	3c8e6 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3c8e0:	2301      	movs	r3, #1
   3c8e2:	60a3      	str	r3, [r4, #8]
}
   3c8e4:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   3c8e6:	2101      	movs	r1, #1
   3c8e8:	f7ff ffd8 	bl	3c89c <uarte_enable>
    p_reg->INTENSET = mask;
   3c8ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3c8f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   3c8f4:	e7f4      	b.n	3c8e0 <tx_start+0x28>

0003c8f6 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
   3c8f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c8f8:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3c8fa:	2200      	movs	r2, #0
   3c8fc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   3c900:	4770      	bx	lr

0003c902 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
   3c902:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c904:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3c906:	2204      	movs	r2, #4
   3c908:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3c90c:	2000      	movs	r0, #0
   3c90e:	4770      	bx	lr

0003c910 <start_tx_locked>:
{
   3c910:	b538      	push	{r3, r4, r5, lr}
   3c912:	4605      	mov	r5, r0
   3c914:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
   3c916:	f7ff ffad 	bl	3c874 <is_tx_ready>
   3c91a:	b920      	cbnz	r0, 3c926 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   3c91c:	68e3      	ldr	r3, [r4, #12]
   3c91e:	2201      	movs	r2, #1
   3c920:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
   3c924:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
   3c926:	68e3      	ldr	r3, [r4, #12]
   3c928:	2200      	movs	r2, #0
   3c92a:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
   3c92e:	68e3      	ldr	r3, [r4, #12]
   3c930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3c934:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   3c938:	68e3      	ldr	r3, [r4, #12]
   3c93a:	695a      	ldr	r2, [r3, #20]
   3c93c:	6919      	ldr	r1, [r3, #16]
   3c93e:	4628      	mov	r0, r5
   3c940:	f7ff ffba 	bl	3c8b8 <tx_start>
}
   3c944:	e7ee      	b.n	3c924 <start_tx_locked+0x14>

0003c946 <user_callback>:
{
   3c946:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
   3c948:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
   3c94a:	68da      	ldr	r2, [r3, #12]
   3c94c:	6813      	ldr	r3, [r2, #0]
   3c94e:	b10b      	cbz	r3, 3c954 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
   3c950:	6852      	ldr	r2, [r2, #4]
   3c952:	4798      	blx	r3
}
   3c954:	bd08      	pop	{r3, pc}

0003c956 <notify_uart_rx_rdy>:
{
   3c956:	b500      	push	{lr}
   3c958:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
   3c95a:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
   3c95c:	2300      	movs	r3, #0
   3c95e:	9301      	str	r3, [sp, #4]
   3c960:	9302      	str	r3, [sp, #8]
   3c962:	9303      	str	r3, [sp, #12]
   3c964:	9304      	str	r3, [sp, #16]
   3c966:	9305      	str	r3, [sp, #20]
   3c968:	2302      	movs	r3, #2
   3c96a:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   3c96e:	68d3      	ldr	r3, [r2, #12]
   3c970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
	struct uart_event evt = {
   3c972:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
   3c974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	struct uart_event evt = {
   3c976:	9303      	str	r3, [sp, #12]
   3c978:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
   3c97a:	a901      	add	r1, sp, #4
   3c97c:	f7ff ffe3 	bl	3c946 <user_callback>
}
   3c980:	b007      	add	sp, #28
   3c982:	f85d fb04 	ldr.w	pc, [sp], #4

0003c986 <rx_buf_release>:
	if (*buf) {
   3c986:	680b      	ldr	r3, [r1, #0]
   3c988:	b19b      	cbz	r3, 3c9b2 <rx_buf_release+0x2c>
{
   3c98a:	b530      	push	{r4, r5, lr}
   3c98c:	b087      	sub	sp, #28
   3c98e:	460c      	mov	r4, r1
		struct uart_event evt = {
   3c990:	2500      	movs	r5, #0
   3c992:	9501      	str	r5, [sp, #4]
   3c994:	9502      	str	r5, [sp, #8]
   3c996:	9503      	str	r5, [sp, #12]
   3c998:	9504      	str	r5, [sp, #16]
   3c99a:	9505      	str	r5, [sp, #20]
   3c99c:	2304      	movs	r3, #4
   3c99e:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
   3c9a2:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
   3c9a4:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
   3c9a6:	a901      	add	r1, sp, #4
   3c9a8:	f7ff ffcd 	bl	3c946 <user_callback>
		*buf = NULL;
   3c9ac:	6025      	str	r5, [r4, #0]
}
   3c9ae:	b007      	add	sp, #28
   3c9b0:	bd30      	pop	{r4, r5, pc}
   3c9b2:	4770      	bx	lr

0003c9b4 <notify_rx_disable>:
{
   3c9b4:	b500      	push	{lr}
   3c9b6:	b087      	sub	sp, #28
	struct uart_event evt = {
   3c9b8:	2300      	movs	r3, #0
   3c9ba:	9301      	str	r3, [sp, #4]
   3c9bc:	9302      	str	r3, [sp, #8]
   3c9be:	9303      	str	r3, [sp, #12]
   3c9c0:	9304      	str	r3, [sp, #16]
   3c9c2:	9305      	str	r3, [sp, #20]
   3c9c4:	2305      	movs	r3, #5
   3c9c6:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   3c9ca:	a901      	add	r1, sp, #4
   3c9cc:	f7ff ffbb 	bl	3c946 <user_callback>
}
   3c9d0:	b007      	add	sp, #28
   3c9d2:	f85d fb04 	ldr.w	pc, [sp], #4

0003c9d6 <uarte_nrfx_rx_buf_rsp>:
{
   3c9d6:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
   3c9d8:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   3c9da:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3c9dc:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   3c9de:	f04f 0020 	mov.w	r0, #32
   3c9e2:	f3ef 8c11 	mrs	ip, BASEPRI
   3c9e6:	f380 8812 	msr	BASEPRI_MAX, r0
   3c9ea:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   3c9ee:	68e0      	ldr	r0, [r4, #12]
   3c9f0:	6d85      	ldr	r5, [r0, #88]	; 0x58
   3c9f2:	b1ad      	cbz	r5, 3ca20 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
   3c9f4:	6e45      	ldr	r5, [r0, #100]	; 0x64
   3c9f6:	b9b5      	cbnz	r5, 3ca26 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
   3c9f8:	6641      	str	r1, [r0, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   3c9fa:	68e0      	ldr	r0, [r4, #12]
   3c9fc:	6682      	str	r2, [r0, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3c9fe:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3ca02:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   3ca06:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   3ca0a:	f042 0220 	orr.w	r2, r2, #32
   3ca0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
   3ca12:	2000      	movs	r0, #0
	__asm__ volatile(
   3ca14:	f38c 8811 	msr	BASEPRI, ip
   3ca18:	f3bf 8f6f 	isb	sy
}
   3ca1c:	bc30      	pop	{r4, r5}
   3ca1e:	4770      	bx	lr
		err = -EACCES;
   3ca20:	f06f 000c 	mvn.w	r0, #12
   3ca24:	e7f6      	b.n	3ca14 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
   3ca26:	f06f 000f 	mvn.w	r0, #15
   3ca2a:	e7f3      	b.n	3ca14 <uarte_nrfx_rx_buf_rsp+0x3e>

0003ca2c <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   3ca2c:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   3ca2e:	68d8      	ldr	r0, [r3, #12]
   3ca30:	b120      	cbz	r0, 3ca3c <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   3ca32:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   3ca34:	68db      	ldr	r3, [r3, #12]
   3ca36:	605a      	str	r2, [r3, #4]
	return 0;
   3ca38:	2000      	movs	r0, #0
   3ca3a:	4770      	bx	lr
		return -ENOTSUP;
   3ca3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   3ca40:	4770      	bx	lr

0003ca42 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
   3ca42:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   3ca44:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3ca46:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   3ca48:	68d0      	ldr	r0, [r2, #12]
   3ca4a:	b968      	cbnz	r0, 3ca68 <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ca4c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3ca50:	b168      	cbz	r0, 3ca6e <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   3ca52:	6992      	ldr	r2, [r2, #24]
   3ca54:	7812      	ldrb	r2, [r2, #0]
   3ca56:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ca58:	2000      	movs	r0, #0
   3ca5a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3ca5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ca62:	2201      	movs	r2, #1
   3ca64:	601a      	str	r2, [r3, #0]
	return 0;
   3ca66:	4770      	bx	lr
		return -ENOTSUP;
   3ca68:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3ca6c:	4770      	bx	lr
		return -1;
   3ca6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   3ca72:	4770      	bx	lr

0003ca74 <k_msleep>:
{
   3ca74:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
   3ca76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3ca7a:	17c1      	asrs	r1, r0, #31
   3ca7c:	03c9      	lsls	r1, r1, #15
   3ca7e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   3ca82:	03c0      	lsls	r0, r0, #15
   3ca84:	f240 33e7 	movw	r3, #999	; 0x3e7
   3ca88:	18c0      	adds	r0, r0, r3
   3ca8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3ca8e:	f04f 0300 	mov.w	r3, #0
   3ca92:	f141 0100 	adc.w	r1, r1, #0
   3ca96:	f7d3 fb5f 	bl	10158 <__aeabi_uldivmod>
   3ca9a:	f7f7 fa9b 	bl	33fd4 <z_impl_k_sleep>
}
   3ca9e:	bd08      	pop	{r3, pc}

0003caa0 <wait_tx_ready>:
{
   3caa0:	b570      	push	{r4, r5, r6, lr}
   3caa2:	4606      	mov	r6, r0
   3caa4:	e013      	b.n	3cace <wait_tx_ready+0x2e>
		if (res) {
   3caa6:	b17d      	cbz	r5, 3cac8 <wait_tx_ready+0x28>
	__asm__ volatile(
   3caa8:	f04f 0320 	mov.w	r3, #32
   3caac:	f3ef 8411 	mrs	r4, BASEPRI
   3cab0:	f383 8812 	msr	BASEPRI_MAX, r3
   3cab4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   3cab8:	4630      	mov	r0, r6
   3caba:	f7ff fedb 	bl	3c874 <is_tx_ready>
   3cabe:	b998      	cbnz	r0, 3cae8 <wait_tx_ready+0x48>
	__asm__ volatile(
   3cac0:	f384 8811 	msr	BASEPRI, r4
   3cac4:	f3bf 8f6f 	isb	sy
			k_msleep(1);
   3cac8:	2001      	movs	r0, #1
   3caca:	f7ff ffd3 	bl	3ca74 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   3cace:	2464      	movs	r4, #100	; 0x64
   3cad0:	4630      	mov	r0, r6
   3cad2:	f7ff fecf 	bl	3c874 <is_tx_ready>
   3cad6:	4605      	mov	r5, r0
   3cad8:	2800      	cmp	r0, #0
   3cada:	d1e4      	bne.n	3caa6 <wait_tx_ready+0x6>
   3cadc:	2001      	movs	r0, #1
   3cade:	f000 fcac 	bl	3d43a <nrfx_busy_wait>
   3cae2:	3c01      	subs	r4, #1
   3cae4:	d1f4      	bne.n	3cad0 <wait_tx_ready+0x30>
   3cae6:	e7de      	b.n	3caa6 <wait_tx_ready+0x6>
}
   3cae8:	4620      	mov	r0, r4
   3caea:	bd70      	pop	{r4, r5, r6, pc}

0003caec <uarte_nrfx_rx_disable>:
{
   3caec:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
   3caee:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   3caf0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3caf2:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   3caf4:	68eb      	ldr	r3, [r5, #12]
   3caf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   3caf8:	b1ba      	cbz	r2, 3cb2a <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
   3cafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   3cafc:	b153      	cbz	r3, 3cb14 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   3cafe:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   3cb02:	f023 0320 	bic.w	r3, r3, #32
   3cb06:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3cb0a:	2300      	movs	r3, #0
   3cb0c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3cb10:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   3cb14:	68e8      	ldr	r0, [r5, #12]
   3cb16:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   3cb18:	f002 f8ef 	bl	3ecfa <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   3cb1c:	68eb      	ldr	r3, [r5, #12]
   3cb1e:	2000      	movs	r0, #0
   3cb20:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cb24:	2301      	movs	r3, #1
   3cb26:	6063      	str	r3, [r4, #4]
}
   3cb28:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3cb2a:	f06f 000d 	mvn.w	r0, #13
   3cb2e:	e7fb      	b.n	3cb28 <uarte_nrfx_rx_disable+0x3c>

0003cb30 <error_isr>:
{
   3cb30:	b510      	push	{r4, lr}
   3cb32:	b086      	sub	sp, #24
   3cb34:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   3cb36:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3cb38:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3cb3a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3cb3e:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
   3cb42:	2300      	movs	r3, #0
   3cb44:	9301      	str	r3, [sp, #4]
   3cb46:	9302      	str	r3, [sp, #8]
   3cb48:	9303      	str	r3, [sp, #12]
   3cb4a:	9304      	str	r3, [sp, #16]
   3cb4c:	9305      	str	r3, [sp, #20]
   3cb4e:	2306      	movs	r3, #6
   3cb50:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   3cb54:	f012 0f01 	tst.w	r2, #1
   3cb58:	d108      	bne.n	3cb6c <error_isr+0x3c>
   3cb5a:	f012 0f02 	tst.w	r2, #2
   3cb5e:	d111      	bne.n	3cb84 <error_isr+0x54>
   3cb60:	f012 0f04 	tst.w	r2, #4
   3cb64:	d110      	bne.n	3cb88 <error_isr+0x58>
   3cb66:	f002 0208 	and.w	r2, r2, #8
   3cb6a:	e000      	b.n	3cb6e <error_isr+0x3e>
   3cb6c:	2201      	movs	r2, #1
	struct uart_event evt = {
   3cb6e:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
   3cb72:	a901      	add	r1, sp, #4
   3cb74:	4620      	mov	r0, r4
   3cb76:	f7ff fee6 	bl	3c946 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   3cb7a:	4620      	mov	r0, r4
   3cb7c:	f7ff ffb6 	bl	3caec <uarte_nrfx_rx_disable>
}
   3cb80:	b006      	add	sp, #24
   3cb82:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   3cb84:	2202      	movs	r2, #2
   3cb86:	e7f2      	b.n	3cb6e <error_isr+0x3e>
   3cb88:	2204      	movs	r2, #4
   3cb8a:	e7f0      	b.n	3cb6e <error_isr+0x3e>

0003cb8c <uarte_nrfx_tx_abort>:
{
   3cb8c:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
   3cb8e:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   3cb90:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3cb92:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   3cb94:	68da      	ldr	r2, [r3, #12]
   3cb96:	6891      	ldr	r1, [r2, #8]
   3cb98:	b151      	cbz	r1, 3cbb0 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   3cb9a:	2400      	movs	r4, #0
   3cb9c:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
   3cba0:	68d8      	ldr	r0, [r3, #12]
   3cba2:	3020      	adds	r0, #32
   3cba4:	f002 f8a9 	bl	3ecfa <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cba8:	2301      	movs	r3, #1
   3cbaa:	60eb      	str	r3, [r5, #12]
	return 0;
   3cbac:	4620      	mov	r0, r4
}
   3cbae:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   3cbb0:	f06f 000d 	mvn.w	r0, #13
   3cbb4:	e7fb      	b.n	3cbae <uarte_nrfx_tx_abort+0x22>

0003cbb6 <tx_timeout>:
{
   3cbb6:	b508      	push	{r3, lr}
	return timer->user_data;
   3cbb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
   3cbba:	6818      	ldr	r0, [r3, #0]
   3cbbc:	f7ff ffe6 	bl	3cb8c <uarte_nrfx_tx_abort>
}
   3cbc0:	bd08      	pop	{r3, pc}

0003cbc2 <rx_timeout>:
{
   3cbc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3cbc4:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
   3cbc6:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
   3cbc8:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
   3cbca:	68e3      	ldr	r3, [r4, #12]
   3cbcc:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   3cbd0:	2b00      	cmp	r3, #0
   3cbd2:	d135      	bne.n	3cc40 <rx_timeout+0x7e>
   3cbd4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
   3cbd8:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
   3cbda:	2210      	movs	r2, #16
   3cbdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   3cbe0:	68e3      	ldr	r3, [r4, #12]
   3cbe2:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   3cbe6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   3cbe8:	4291      	cmp	r1, r2
   3cbea:	d003      	beq.n	3cbf4 <rx_timeout+0x32>
		data->async->rx_total_byte_cnt = read;
   3cbec:	66da      	str	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   3cbee:	68e3      	ldr	r3, [r4, #12]
   3cbf0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   3cbf2:	67da      	str	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   3cbf4:	68e3      	ldr	r3, [r4, #12]
   3cbf6:	6edd      	ldr	r5, [r3, #108]	; 0x6c
		    - data->async->rx_total_user_byte_cnt;
   3cbf8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	if (!HW_RX_COUNTING_ENABLED(data) &&
   3cbfa:	1aad      	subs	r5, r5, r2
   3cbfc:	d421      	bmi.n	3cc42 <rx_timeout+0x80>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   3cbfe:	68e3      	ldr	r3, [r4, #12]
   3cc00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   3cc02:	18a8      	adds	r0, r5, r2
   3cc04:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
   3cc06:	4288      	cmp	r0, r1
   3cc08:	d901      	bls.n	3cc0e <rx_timeout+0x4c>
		len = data->async->rx_buf_len - data->async->rx_offset;
   3cc0a:	1a8d      	subs	r5, r1, r2
		clipped = true;
   3cc0c:	2701      	movs	r7, #1
	if (len > 0) {
   3cc0e:	2d00      	cmp	r5, #0
   3cc10:	dd11      	ble.n	3cc36 <rx_timeout+0x74>
		if (clipped ||
   3cc12:	b91f      	cbnz	r7, 3cc1c <rx_timeout+0x5a>
			(data->async->rx_timeout_left
   3cc14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
				< data->async->rx_timeout_slab)) {
   3cc16:	6f99      	ldr	r1, [r3, #120]	; 0x78
		if (clipped ||
   3cc18:	428a      	cmp	r2, r1
   3cc1a:	da16      	bge.n	3cc4a <rx_timeout+0x88>
			notify_uart_rx_rdy(dev, len);
   3cc1c:	4629      	mov	r1, r5
   3cc1e:	4630      	mov	r0, r6
   3cc20:	f7ff fe99 	bl	3c956 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   3cc24:	68e2      	ldr	r2, [r4, #12]
   3cc26:	6e13      	ldr	r3, [r2, #96]	; 0x60
   3cc28:	442b      	add	r3, r5
   3cc2a:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   3cc2c:	68e3      	ldr	r3, [r4, #12]
   3cc2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3cc30:	4415      	add	r5, r2
   3cc32:	671d      	str	r5, [r3, #112]	; 0x70
		if (clipped) {
   3cc34:	b967      	cbnz	r7, 3cc50 <rx_timeout+0x8e>
	const struct uarte_nrfx_config *config = dev->config;
   3cc36:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
   3cc38:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   3cc3a:	2210      	movs	r2, #16
   3cc3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3cc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   3cc42:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		len = 0;
   3cc46:	2500      	movs	r5, #0
   3cc48:	e7d9      	b.n	3cbfe <rx_timeout+0x3c>
			data->async->rx_timeout_left -=
   3cc4a:	1a52      	subs	r2, r2, r1
   3cc4c:	67da      	str	r2, [r3, #124]	; 0x7c
   3cc4e:	e7f1      	b.n	3cc34 <rx_timeout+0x72>
			k_timer_stop(&data->async->rx_timeout_timer);
   3cc50:	68e0      	ldr	r0, [r4, #12]
   3cc52:	3080      	adds	r0, #128	; 0x80
   3cc54:	f002 f851 	bl	3ecfa <z_impl_k_timer_stop>
}
   3cc58:	e7ed      	b.n	3cc36 <rx_timeout+0x74>

0003cc5a <endrx_isr>:
{
   3cc5a:	b570      	push	{r4, r5, r6, lr}
   3cc5c:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
   3cc5e:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
   3cc60:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3cc62:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
   3cc64:	68e3      	ldr	r3, [r4, #12]
   3cc66:	2201      	movs	r2, #1
   3cc68:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
   3cc6c:	68e0      	ldr	r0, [r4, #12]
   3cc6e:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   3cc70:	f002 f843 	bl	3ecfa <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   3cc74:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
   3cc78:	68e3      	ldr	r3, [r4, #12]
   3cc7a:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
   3cc7e:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
   3cc80:	2200      	movs	r2, #0
   3cc82:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   3cc86:	68e3      	ldr	r3, [r4, #12]
   3cc88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	if (rx_len < 0) {
   3cc8a:	1a89      	subs	r1, r1, r2
   3cc8c:	d40b      	bmi.n	3cca6 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
   3cc8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   3cc90:	440a      	add	r2, r1
   3cc92:	671a      	str	r2, [r3, #112]	; 0x70
	if (rx_len > 0) {
   3cc94:	2900      	cmp	r1, #0
   3cc96:	dc08      	bgt.n	3ccaa <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
   3cc98:	68e1      	ldr	r1, [r4, #12]
   3cc9a:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   3cc9e:	b943      	cbnz	r3, 3ccb2 <endrx_isr+0x58>
		data->async->is_in_irq = false;
   3cca0:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
}
   3cca4:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
   3cca6:	2100      	movs	r1, #0
   3cca8:	e7f1      	b.n	3cc8e <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
   3ccaa:	4628      	mov	r0, r5
   3ccac:	f7ff fe53 	bl	3c956 <notify_uart_rx_rdy>
   3ccb0:	e7f2      	b.n	3cc98 <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
   3ccb2:	3158      	adds	r1, #88	; 0x58
   3ccb4:	4628      	mov	r0, r5
   3ccb6:	f7ff fe66 	bl	3c986 <rx_buf_release>
	__asm__ volatile(
   3ccba:	f04f 0220 	mov.w	r2, #32
   3ccbe:	f3ef 8311 	mrs	r3, BASEPRI
   3ccc2:	f382 8812 	msr	BASEPRI_MAX, r2
   3ccc6:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   3ccca:	68e2      	ldr	r2, [r4, #12]
   3cccc:	6e51      	ldr	r1, [r2, #100]	; 0x64
   3ccce:	b1f1      	cbz	r1, 3cd0e <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
   3ccd0:	6591      	str	r1, [r2, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   3ccd2:	68e2      	ldr	r2, [r4, #12]
   3ccd4:	6e91      	ldr	r1, [r2, #104]	; 0x68
   3ccd6:	65d1      	str	r1, [r2, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   3ccd8:	68e1      	ldr	r1, [r4, #12]
   3ccda:	2200      	movs	r2, #0
   3ccdc:	664a      	str	r2, [r1, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   3ccde:	68e1      	ldr	r1, [r4, #12]
   3cce0:	668a      	str	r2, [r1, #104]	; 0x68
		data->async->rx_offset = 0;
   3cce2:	68e1      	ldr	r1, [r4, #12]
   3cce4:	660a      	str	r2, [r1, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3cce6:	f8d6 214c 	ldr.w	r2, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   3ccea:	b90a      	cbnz	r2, 3ccf0 <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ccec:	2201      	movs	r2, #1
   3ccee:	6032      	str	r2, [r6, #0]
    p_reg->SHORTS &= ~(mask);
   3ccf0:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
   3ccf4:	f022 0220 	bic.w	r2, r2, #32
   3ccf8:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
	__asm__ volatile(
   3ccfc:	f383 8811 	msr	BASEPRI, r3
   3cd00:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   3cd04:	68e3      	ldr	r3, [r4, #12]
   3cd06:	2200      	movs	r2, #0
   3cd08:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
   3cd0c:	e7ca      	b.n	3cca4 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cd0e:	2201      	movs	r2, #1
   3cd10:	6072      	str	r2, [r6, #4]
}
   3cd12:	e7f3      	b.n	3ccfc <endrx_isr+0xa2>

0003cd14 <setup_tx_cache>:
{
   3cd14:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   3cd16:	68c3      	ldr	r3, [r0, #12]
   3cd18:	68da      	ldr	r2, [r3, #12]
   3cd1a:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   3cd1c:	1a52      	subs	r2, r2, r1
   3cd1e:	d101      	bne.n	3cd24 <setup_tx_cache+0x10>
		return false;
   3cd20:	2000      	movs	r0, #0
}
   3cd22:	bd08      	pop	{r3, pc}
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   3cd24:	2a08      	cmp	r2, #8
   3cd26:	bf28      	it	cs
   3cd28:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   3cd2a:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   3cd2c:	68c3      	ldr	r3, [r0, #12]
   3cd2e:	6999      	ldr	r1, [r3, #24]
   3cd30:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   3cd32:	68c3      	ldr	r3, [r0, #12]
   3cd34:	6898      	ldr	r0, [r3, #8]
   3cd36:	69d9      	ldr	r1, [r3, #28]
   3cd38:	4401      	add	r1, r0
   3cd3a:	6998      	ldr	r0, [r3, #24]
   3cd3c:	f7fb fb5d 	bl	383fa <memcpy>
	return true;
   3cd40:	2001      	movs	r0, #1
   3cd42:	e7ee      	b.n	3cd22 <setup_tx_cache+0xe>

0003cd44 <pinctrl_apply_state>:
{
   3cd44:	b510      	push	{r4, lr}
   3cd46:	b082      	sub	sp, #8
   3cd48:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
   3cd4a:	aa01      	add	r2, sp, #4
   3cd4c:	f000 fa73 	bl	3d236 <pinctrl_lookup_state>
	if (ret < 0) {
   3cd50:	2800      	cmp	r0, #0
   3cd52:	db05      	blt.n	3cd60 <pinctrl_apply_state+0x1c>
	return pinctrl_apply_state_direct(config, state);
   3cd54:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   3cd56:	6822      	ldr	r2, [r4, #0]
   3cd58:	7919      	ldrb	r1, [r3, #4]
   3cd5a:	6818      	ldr	r0, [r3, #0]
   3cd5c:	f7f0 fb28 	bl	2d3b0 <pinctrl_configure_pins>
}
   3cd60:	b002      	add	sp, #8
   3cd62:	bd10      	pop	{r4, pc}

0003cd64 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   3cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cd68:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   3cd6a:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
   3cd6c:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   3cd6e:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   3cd72:	2100      	movs	r1, #0
   3cd74:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   3cd78:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   3cd7c:	68f8      	ldr	r0, [r7, #12]
   3cd7e:	f7ff ffe1 	bl	3cd44 <pinctrl_apply_state>
	if (err < 0) {
   3cd82:	1e05      	subs	r5, r0, #0
   3cd84:	db2c      	blt.n	3cde0 <uarte_instance_init+0x7c>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   3cd86:	f108 0104 	add.w	r1, r8, #4
   3cd8a:	4620      	mov	r0, r4
   3cd8c:	f7ff fd00 	bl	3c790 <uarte_nrfx_configure>
	if (err) {
   3cd90:	4605      	mov	r5, r0
   3cd92:	bb28      	cbnz	r0, 3cde0 <uarte_instance_init+0x7c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   3cd94:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   3cd96:	f013 0f02 	tst.w	r3, #2
   3cd9a:	d124      	bne.n	3cde6 <uarte_instance_init+0x82>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
   3cd9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3cda0:	b34b      	cbz	r3, 3cdf6 <uarte_instance_init+0x92>
		err = uarte_nrfx_init(dev);
   3cda2:	4620      	mov	r0, r4
   3cda4:	f7ef fa4e 	bl	2c244 <uarte_nrfx_init>
		if (err < 0) {
   3cda8:	2800      	cmp	r0, #0
   3cdaa:	db37      	blt.n	3ce1c <uarte_instance_init+0xb8>
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   3cdac:	687b      	ldr	r3, [r7, #4]
   3cdae:	f013 0f02 	tst.w	r3, #2
   3cdb2:	d103      	bne.n	3cdbc <uarte_instance_init+0x58>
    p_reg->INTENSET = mask;
   3cdb4:	f44f 7380 	mov.w	r3, #256	; 0x100
   3cdb8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3cdbc:	687b      	ldr	r3, [r7, #4]
   3cdbe:	f013 0f10 	tst.w	r3, #16
   3cdc2:	d003      	beq.n	3cdcc <uarte_instance_init+0x68>
   3cdc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3cdc8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
   3cdcc:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3cdd0:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   3cdd4:	2300      	movs	r3, #0
   3cdd6:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3cdda:	2301      	movs	r3, #1
   3cddc:	60b3      	str	r3, [r6, #8]
   3cdde:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   3cde0:	4628      	mov	r0, r5
   3cde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   3cde6:	4641      	mov	r1, r8
   3cde8:	4630      	mov	r0, r6
   3cdea:	f7ef f9db 	bl	2c1a4 <endtx_stoptx_ppi_init>
		if (err < 0) {
   3cdee:	2800      	cmp	r0, #0
   3cdf0:	dad4      	bge.n	3cd9c <uarte_instance_init+0x38>
			return err;
   3cdf2:	4605      	mov	r5, r0
   3cdf4:	e7f4      	b.n	3cde0 <uarte_instance_init+0x7c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   3cdf6:	2308      	movs	r3, #8
   3cdf8:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
   3cdfc:	7a3b      	ldrb	r3, [r7, #8]
   3cdfe:	2b00      	cmp	r3, #0
   3ce00:	d1d4      	bne.n	3cdac <uarte_instance_init+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ce02:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   3ce06:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
   3ce0a:	f8d8 3018 	ldr.w	r3, [r8, #24]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3ce0e:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3ce12:	2301      	movs	r3, #1
   3ce14:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ce18:	6033      	str	r3, [r6, #0]
}
   3ce1a:	e7c7      	b.n	3cdac <uarte_instance_init+0x48>
			return err;
   3ce1c:	4605      	mov	r5, r0
   3ce1e:	e7df      	b.n	3cde0 <uarte_instance_init+0x7c>

0003ce20 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   3ce20:	b510      	push	{r4, lr}
   3ce22:	4604      	mov	r4, r0
   3ce24:	2200      	movs	r2, #0
   3ce26:	2101      	movs	r1, #1
   3ce28:	2008      	movs	r0, #8
   3ce2a:	f7dc fad1 	bl	193d0 <z_arm_irq_priority_set>
   3ce2e:	2008      	movs	r0, #8
   3ce30:	f7fb f93c 	bl	380ac <arch_irq_enable>
   3ce34:	2100      	movs	r1, #0
   3ce36:	4620      	mov	r0, r4
   3ce38:	f7ff ff94 	bl	3cd64 <uarte_instance_init>
   3ce3c:	bd10      	pop	{r4, pc}

0003ce3e <rx_flush>:
{
   3ce3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   3ce40:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
   3ce42:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3ce44:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
   3ce46:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   3ce4a:	460e      	mov	r6, r1
   3ce4c:	b309      	cbz	r1, 3ce92 <rx_flush+0x54>
   3ce4e:	4615      	mov	r5, r2
		memset(buf, dirty, len);
   3ce50:	2100      	movs	r1, #0
   3ce52:	4630      	mov	r0, r6
   3ce54:	f7fb fb00 	bl	38458 <memset>
		flush_buf = buf;
   3ce58:	4633      	mov	r3, r6
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   3ce5a:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   3ce5e:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ce62:	2300      	movs	r3, #0
   3ce64:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3ce68:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3ce6c:	2301      	movs	r3, #1
   3ce6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3ce70:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3ce74:	2b00      	cmp	r3, #0
   3ce76:	d0fb      	beq.n	3ce70 <rx_flush+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3ce78:	2300      	movs	r3, #0
   3ce7a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3ce7e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
   3ce82:	b14e      	cbz	r6, 3ce98 <rx_flush+0x5a>
    return p_reg->RXD.AMOUNT;
   3ce84:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
   3ce88:	4287      	cmp	r7, r0
   3ce8a:	d00b      	beq.n	3cea4 <rx_flush+0x66>
		return rx_amount;
   3ce8c:	b2c0      	uxtb	r0, r0
}
   3ce8e:	b003      	add	sp, #12
   3ce90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   3ce92:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   3ce94:	466b      	mov	r3, sp
   3ce96:	e7e0      	b.n	3ce5a <rx_flush+0x1c>
   3ce98:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
   3ce9c:	b2c0      	uxtb	r0, r0
   3ce9e:	e7f6      	b.n	3ce8e <rx_flush+0x50>
			return rx_amount;
   3cea0:	b2c0      	uxtb	r0, r0
   3cea2:	e7f4      	b.n	3ce8e <rx_flush+0x50>
	for (int i = 0; i < flush_len; i++) {
   3cea4:	2300      	movs	r3, #0
   3cea6:	42ab      	cmp	r3, r5
   3cea8:	d204      	bcs.n	3ceb4 <rx_flush+0x76>
		if (buf[i] != dirty) {
   3ceaa:	5cf2      	ldrb	r2, [r6, r3]
   3ceac:	2a00      	cmp	r2, #0
   3ceae:	d1f7      	bne.n	3cea0 <rx_flush+0x62>
	for (int i = 0; i < flush_len; i++) {
   3ceb0:	3301      	adds	r3, #1
   3ceb2:	e7f8      	b.n	3cea6 <rx_flush+0x68>
	return 0;
   3ceb4:	2000      	movs	r0, #0
   3ceb6:	e7ea      	b.n	3ce8e <rx_flush+0x50>

0003ceb8 <async_uart_release>:
{
   3ceb8:	b570      	push	{r4, r5, r6, lr}
   3ceba:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   3cebc:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   3cebe:	f04f 0320 	mov.w	r3, #32
   3cec2:	f3ef 8511 	mrs	r5, BASEPRI
   3cec6:	f383 8812 	msr	BASEPRI_MAX, r3
   3ceca:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   3cece:	68d0      	ldr	r0, [r2, #12]
   3ced0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   3ced4:	ea23 0301 	bic.w	r3, r3, r1
   3ced8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   3cedc:	68d6      	ldr	r6, [r2, #12]
   3cede:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
   3cee2:	b923      	cbnz	r3, 3ceee <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   3cee4:	2902      	cmp	r1, #2
   3cee6:	d007      	beq.n	3cef8 <async_uart_release+0x40>
		uart_disable(dev);
   3cee8:	4620      	mov	r0, r4
   3ceea:	f7ff fd04 	bl	3c8f6 <uart_disable>
	__asm__ volatile(
   3ceee:	f385 8811 	msr	BASEPRI, r5
   3cef2:	f3bf 8f6f 	isb	sy
}
   3cef6:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
   3cef8:	2205      	movs	r2, #5
   3cefa:	f106 01c4 	add.w	r1, r6, #196	; 0xc4
   3cefe:	4620      	mov	r0, r4
   3cf00:	f7ff ff9d 	bl	3ce3e <rx_flush>
			data->async->rx_flush_cnt =
   3cf04:	f886 00c9 	strb.w	r0, [r6, #201]	; 0xc9
   3cf08:	e7ee      	b.n	3cee8 <async_uart_release+0x30>

0003cf0a <txstopped_isr>:
{
   3cf0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   3cf0c:	b087      	sub	sp, #28
   3cf0e:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
   3cf10:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3cf12:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   3cf14:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3cf16:	685b      	ldr	r3, [r3, #4]
   3cf18:	f013 0f10 	tst.w	r3, #16
   3cf1c:	d147      	bne.n	3cfae <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
   3cf1e:	68e3      	ldr	r3, [r4, #12]
   3cf20:	689b      	ldr	r3, [r3, #8]
   3cf22:	2b00      	cmp	r3, #0
   3cf24:	d041      	beq.n	3cfaa <txstopped_isr+0xa0>
	__asm__ volatile(
   3cf26:	f04f 0220 	mov.w	r2, #32
   3cf2a:	f3ef 8311 	mrs	r3, BASEPRI
   3cf2e:	f382 8812 	msr	BASEPRI_MAX, r2
   3cf32:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   3cf36:	68e2      	ldr	r2, [r4, #12]
   3cf38:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   3cf3c:	2900      	cmp	r1, #0
   3cf3e:	db42      	blt.n	3cfc6 <txstopped_isr+0xbc>
   3cf40:	f8d2 60bc 	ldr.w	r6, [r2, #188]	; 0xbc
	__asm__ volatile(
   3cf44:	f383 8811 	msr	BASEPRI, r3
   3cf48:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   3cf4c:	68e3      	ldr	r3, [r4, #12]
   3cf4e:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
   3cf52:	2a00      	cmp	r2, #0
   3cf54:	d13a      	bne.n	3cfcc <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
   3cf56:	6899      	ldr	r1, [r3, #8]
   3cf58:	691a      	ldr	r2, [r3, #16]
   3cf5a:	4291      	cmp	r1, r2
   3cf5c:	d004      	beq.n	3cf68 <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
   3cf5e:	695a      	ldr	r2, [r3, #20]
   3cf60:	42b2      	cmp	r2, r6
   3cf62:	d044      	beq.n	3cfee <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
   3cf64:	69db      	ldr	r3, [r3, #28]
   3cf66:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
   3cf68:	68e0      	ldr	r0, [r4, #12]
   3cf6a:	3020      	adds	r0, #32
   3cf6c:	f001 fec5 	bl	3ecfa <z_impl_k_timer_stop>
	struct uart_event evt = {
   3cf70:	2300      	movs	r3, #0
   3cf72:	9301      	str	r3, [sp, #4]
   3cf74:	9302      	str	r3, [sp, #8]
   3cf76:	9303      	str	r3, [sp, #12]
   3cf78:	9304      	str	r3, [sp, #16]
   3cf7a:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
   3cf7c:	68e3      	ldr	r3, [r4, #12]
   3cf7e:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
   3cf80:	9202      	str	r2, [sp, #8]
   3cf82:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
   3cf84:	68db      	ldr	r3, [r3, #12]
   3cf86:	42b3      	cmp	r3, r6
   3cf88:	d002      	beq.n	3cf90 <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
   3cf8a:	2301      	movs	r3, #1
   3cf8c:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
   3cf90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3cf94:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   3cf98:	68e2      	ldr	r2, [r4, #12]
   3cf9a:	2300      	movs	r3, #0
   3cf9c:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   3cf9e:	68e2      	ldr	r2, [r4, #12]
   3cfa0:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   3cfa2:	a901      	add	r1, sp, #4
   3cfa4:	4628      	mov	r0, r5
   3cfa6:	f7ff fcce 	bl	3c946 <user_callback>
}
   3cfaa:	b007      	add	sp, #28
   3cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3cfae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   3cfb2:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   3cfb6:	2101      	movs	r1, #1
   3cfb8:	f7ff ff7e 	bl	3ceb8 <async_uart_release>
		if (!data->async->tx_size) {
   3cfbc:	68e3      	ldr	r3, [r4, #12]
   3cfbe:	68db      	ldr	r3, [r3, #12]
   3cfc0:	2b00      	cmp	r3, #0
   3cfc2:	d1ac      	bne.n	3cf1e <txstopped_isr+0x14>
   3cfc4:	e7f1      	b.n	3cfaa <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
   3cfc6:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
   3cfca:	e7bb      	b.n	3cf44 <txstopped_isr+0x3a>
	__asm__ volatile(
   3cfcc:	f04f 0320 	mov.w	r3, #32
   3cfd0:	f3ef 8611 	mrs	r6, BASEPRI
   3cfd4:	f383 8812 	msr	BASEPRI_MAX, r3
   3cfd8:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
   3cfdc:	4621      	mov	r1, r4
   3cfde:	4628      	mov	r0, r5
   3cfe0:	f7ff fc96 	bl	3c910 <start_tx_locked>
	__asm__ volatile(
   3cfe4:	f386 8811 	msr	BASEPRI, r6
   3cfe8:	f3bf 8f6f 	isb	sy
		return;
   3cfec:	e7dd      	b.n	3cfaa <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
   3cfee:	69da      	ldr	r2, [r3, #28]
   3cff0:	4432      	add	r2, r6
   3cff2:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   3cff4:	4620      	mov	r0, r4
   3cff6:	f7ff fe8d 	bl	3cd14 <setup_tx_cache>
   3cffa:	b910      	cbnz	r0, 3d002 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
   3cffc:	68e3      	ldr	r3, [r4, #12]
   3cffe:	69de      	ldr	r6, [r3, #28]
   3d000:	e7b2      	b.n	3cf68 <txstopped_isr+0x5e>
	__asm__ volatile(
   3d002:	f04f 0320 	mov.w	r3, #32
   3d006:	f3ef 8611 	mrs	r6, BASEPRI
   3d00a:	f383 8812 	msr	BASEPRI_MAX, r3
   3d00e:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   3d012:	4621      	mov	r1, r4
   3d014:	4628      	mov	r0, r5
   3d016:	f7ff fc7b 	bl	3c910 <start_tx_locked>
	__asm__ volatile(
   3d01a:	f386 8811 	msr	BASEPRI, r6
   3d01e:	f3bf 8f6f 	isb	sy
				return;
   3d022:	e7c2      	b.n	3cfaa <txstopped_isr+0xa0>

0003d024 <rxto_isr>:
{
   3d024:	b570      	push	{r4, r5, r6, lr}
   3d026:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
   3d028:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   3d02a:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
   3d02c:	68e9      	ldr	r1, [r5, #12]
   3d02e:	3158      	adds	r1, #88	; 0x58
   3d030:	f7ff fca9 	bl	3c986 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   3d034:	68e9      	ldr	r1, [r5, #12]
   3d036:	3164      	adds	r1, #100	; 0x64
   3d038:	4620      	mov	r0, r4
   3d03a:	f7ff fca4 	bl	3c986 <rx_buf_release>
	if (data->async->rx_enabled) {
   3d03e:	68eb      	ldr	r3, [r5, #12]
   3d040:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
   3d044:	b152      	cbz	r2, 3d05c <rxto_isr+0x38>
		data->async->rx_enabled = false;
   3d046:	2200      	movs	r2, #0
   3d048:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   3d04c:	6873      	ldr	r3, [r6, #4]
   3d04e:	f013 0f10 	tst.w	r3, #16
   3d052:	d109      	bne.n	3d068 <rxto_isr+0x44>
	notify_rx_disable(dev);
   3d054:	4620      	mov	r0, r4
   3d056:	f7ff fcad 	bl	3c9b4 <notify_rx_disable>
}
   3d05a:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
   3d05c:	2200      	movs	r2, #0
   3d05e:	4611      	mov	r1, r2
   3d060:	4620      	mov	r0, r4
   3d062:	f7ff feec 	bl	3ce3e <rx_flush>
   3d066:	e7f1      	b.n	3d04c <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   3d068:	2102      	movs	r1, #2
   3d06a:	4620      	mov	r0, r4
   3d06c:	f7ff ff24 	bl	3ceb8 <async_uart_release>
   3d070:	e7f0      	b.n	3d054 <rxto_isr+0x30>

0003d072 <uarte_nrfx_isr_async>:
{
   3d072:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
   3d074:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   3d076:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   3d078:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d07a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
   3d07e:	bb5b      	cbnz	r3, 3d0d8 <uarte_nrfx_isr_async+0x66>
   3d080:	4605      	mov	r5, r0
   3d082:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3d086:	bb9b      	cbnz	r3, 3d0f0 <uarte_nrfx_isr_async+0x7e>
   3d088:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   3d08c:	b123      	cbz	r3, 3d098 <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
   3d08e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   3d092:	f013 0f10 	tst.w	r3, #16
   3d096:	d133      	bne.n	3d100 <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d098:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   3d09c:	b113      	cbz	r3, 3d0a4 <uarte_nrfx_isr_async+0x32>
   3d09e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   3d0a2:	b3b3      	cbz	r3, 3d112 <uarte_nrfx_isr_async+0xa0>
   3d0a4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   3d0a8:	b113      	cbz	r3, 3d0b0 <uarte_nrfx_isr_async+0x3e>
   3d0aa:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   3d0ae:	b3c3      	cbz	r3, 3d122 <uarte_nrfx_isr_async+0xb0>
   3d0b0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   3d0b4:	b123      	cbz	r3, 3d0c0 <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
   3d0b6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   3d0ba:	f413 7f80 	tst.w	r3, #256	; 0x100
   3d0be:	d138      	bne.n	3d132 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d0c0:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   3d0c4:	b19b      	cbz	r3, 3d0ee <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
   3d0c6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   3d0ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   3d0ce:	d00e      	beq.n	3d0ee <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
   3d0d0:	4628      	mov	r0, r5
   3d0d2:	f7ff ff1a 	bl	3cf0a <txstopped_isr>
   3d0d6:	e00a      	b.n	3d0ee <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3d0d8:	2300      	movs	r3, #0
   3d0da:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   3d0de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   3d0e2:	68d2      	ldr	r2, [r2, #12]
   3d0e4:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   3d0e8:	3301      	adds	r3, #1
   3d0ea:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   3d0ee:	bd38      	pop	{r3, r4, r5, pc}
   3d0f0:	2300      	movs	r3, #0
   3d0f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   3d0f6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
   3d0fa:	f7ff fd19 	bl	3cb30 <error_isr>
   3d0fe:	e7c3      	b.n	3d088 <uarte_nrfx_isr_async+0x16>
   3d100:	2300      	movs	r3, #0
   3d102:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   3d106:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
   3d10a:	4628      	mov	r0, r5
   3d10c:	f7ff fda5 	bl	3cc5a <endrx_isr>
   3d110:	e7c2      	b.n	3d098 <uarte_nrfx_isr_async+0x26>
   3d112:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   3d116:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
   3d11a:	4628      	mov	r0, r5
   3d11c:	f7ef f80a 	bl	2c134 <rxstarted_isr>
   3d120:	e7c0      	b.n	3d0a4 <uarte_nrfx_isr_async+0x32>
   3d122:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   3d126:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
   3d12a:	4628      	mov	r0, r5
   3d12c:	f7ff ff7a 	bl	3d024 <rxto_isr>
   3d130:	e7be      	b.n	3d0b0 <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
   3d132:	4628      	mov	r0, r5
   3d134:	f7ff fb13 	bl	3c75e <endtx_isr>
   3d138:	e7c2      	b.n	3d0c0 <uarte_nrfx_isr_async+0x4e>

0003d13a <is_hci_event_discardable>:
	uint8_t evt_type = evt_data[0];
   3d13a:	7803      	ldrb	r3, [r0, #0]
	switch (evt_type) {
   3d13c:	2b3e      	cmp	r3, #62	; 0x3e
   3d13e:	d001      	beq.n	3d144 <is_hci_event_discardable+0xa>
		return false;
   3d140:	2000      	movs	r0, #0
   3d142:	4770      	bx	lr
		uint8_t subevt_type = evt_data[sizeof(struct bt_hci_evt_hdr)];
   3d144:	7883      	ldrb	r3, [r0, #2]
		switch (subevt_type) {
   3d146:	2b02      	cmp	r3, #2
   3d148:	d001      	beq.n	3d14e <is_hci_event_discardable+0x14>
			return false;
   3d14a:	2000      	movs	r0, #0
}
   3d14c:	4770      	bx	lr
			return true;
   3d14e:	2001      	movs	r0, #1
   3d150:	4770      	bx	lr

0003d152 <hci_ept_recv>:
{
   3d152:	b508      	push	{r3, lr}
	bt_rpmsg_rx(data, len);
   3d154:	f7ef fd82 	bl	2cc5c <bt_rpmsg_rx>
}
   3d158:	bd08      	pop	{r3, pc}

0003d15a <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   3d15a:	2000      	movs	r0, #0
   3d15c:	4770      	bx	lr

0003d15e <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   3d15e:	b538      	push	{r3, r4, r5, lr}
   3d160:	460c      	mov	r4, r1
   3d162:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   3d164:	f7e0 ffb6 	bl	1e0d4 <bt_is_ready>
   3d168:	b120      	cbz	r0, 3d174 <entropy_bt_get_entropy+0x16>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   3d16a:	4629      	mov	r1, r5
   3d16c:	4620      	mov	r0, r4
   3d16e:	f7df fde5 	bl	1cd3c <bt_hci_le_rand>
}
   3d172:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   3d174:	f06f 000a 	mvn.w	r0, #10
   3d178:	e7fb      	b.n	3d172 <entropy_bt_get_entropy+0x14>

0003d17a <entropy_psa_crypto_rng_get_entropy>:
}

/* API implementation: get_entropy */
static int entropy_psa_crypto_rng_get_entropy(const struct device *dev,
					      uint8_t *buffer, uint16_t length)
{
   3d17a:	b508      	push	{r3, lr}
   3d17c:	4608      	mov	r0, r1
	psa_status_t status = PSA_ERROR_CORRUPTION_DETECTED;

	ARG_UNUSED(dev);

	status = psa_generate_random(buffer, length);
   3d17e:	4611      	mov	r1, r2
   3d180:	f7f0 fec6 	bl	2df10 <psa_generate_random>
	if (status != PSA_SUCCESS) {
   3d184:	b900      	cbnz	r0, 3d188 <entropy_psa_crypto_rng_get_entropy+0xe>
		return -EIO;
	}

	return 0;
}
   3d186:	bd08      	pop	{r3, pc}
		return -EIO;
   3d188:	f06f 0004 	mvn.w	r0, #4
   3d18c:	e7fb      	b.n	3d186 <entropy_psa_crypto_rng_get_entropy+0xc>

0003d18e <entropy_psa_crypto_rng_init>:
{
   3d18e:	b508      	push	{r3, lr}
	status = psa_crypto_init();
   3d190:	f000 f91b 	bl	3d3ca <psa_crypto_init>
	if (status != PSA_SUCCESS) {
   3d194:	b900      	cbnz	r0, 3d198 <entropy_psa_crypto_rng_init+0xa>
}
   3d196:	bd08      	pop	{r3, pc}
		return -EIO;
   3d198:	f06f 0004 	mvn.w	r0, #4
   3d19c:	e7fb      	b.n	3d196 <entropy_psa_crypto_rng_init+0x8>

0003d19e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3d19e:	4770      	bx	lr

0003d1a0 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   3d1a0:	1a40      	subs	r0, r0, r1
}
   3d1a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3d1a6:	4770      	bx	lr

0003d1a8 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3d1a8:	f100 0350 	add.w	r3, r0, #80	; 0x50
   3d1ac:	009b      	lsls	r3, r3, #2
   3d1ae:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3d1b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3d1b4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   3d1b8:	6818      	ldr	r0, [r3, #0]
}
   3d1ba:	3800      	subs	r0, #0
   3d1bc:	bf18      	it	ne
   3d1be:	2001      	movne	r0, #1
   3d1c0:	4770      	bx	lr

0003d1c2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   3d1c2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   3d1c6:	009b      	lsls	r3, r3, #2
   3d1c8:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   3d1ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   3d1ce:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   3d1d2:	2200      	movs	r2, #0
   3d1d4:	601a      	str	r2, [r3, #0]
   3d1d6:	681b      	ldr	r3, [r3, #0]
}
   3d1d8:	4770      	bx	lr

0003d1da <absolute_time_to_cc>:
}
   3d1da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   3d1de:	4770      	bx	lr

0003d1e0 <full_int_lock>:
	__asm__ volatile(
   3d1e0:	f04f 0320 	mov.w	r3, #32
   3d1e4:	f3ef 8011 	mrs	r0, BASEPRI
   3d1e8:	f383 8812 	msr	BASEPRI_MAX, r3
   3d1ec:	f3bf 8f6f 	isb	sy
}
   3d1f0:	4770      	bx	lr

0003d1f2 <full_int_unlock>:
	__asm__ volatile(
   3d1f2:	f380 8811 	msr	BASEPRI, r0
   3d1f6:	f3bf 8f6f 	isb	sy
}
   3d1fa:	4770      	bx	lr

0003d1fc <compare_set>:
{
   3d1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d1fe:	b083      	sub	sp, #12
   3d200:	4604      	mov	r4, r0
   3d202:	4617      	mov	r7, r2
   3d204:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   3d206:	f7ef fddf 	bl	2cdc8 <compare_int_lock>
   3d20a:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   3d20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3d20e:	9301      	str	r3, [sp, #4]
   3d210:	9b08      	ldr	r3, [sp, #32]
   3d212:	9300      	str	r3, [sp, #0]
   3d214:	463a      	mov	r2, r7
   3d216:	462b      	mov	r3, r5
   3d218:	4620      	mov	r0, r4
   3d21a:	f7ef feeb 	bl	2cff4 <compare_set_nolocks>
   3d21e:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   3d220:	4631      	mov	r1, r6
   3d222:	4620      	mov	r0, r4
   3d224:	f7ef fe1e 	bl	2ce64 <compare_int_unlock>
}
   3d228:	4628      	mov	r0, r5
   3d22a:	b003      	add	sp, #12
   3d22c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003d22e <sys_clock_cycle_get_32>:
{
   3d22e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   3d230:	f7ef fec0 	bl	2cfb4 <z_nrf_rtc_timer_read>
}
   3d234:	bd08      	pop	{r3, pc}

0003d236 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   3d236:	b500      	push	{lr}
	*state = &config->states[0];
   3d238:	6843      	ldr	r3, [r0, #4]
   3d23a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   3d23c:	e001      	b.n	3d242 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
   3d23e:	3308      	adds	r3, #8
   3d240:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   3d242:	6813      	ldr	r3, [r2, #0]
   3d244:	f890 c008 	ldrb.w	ip, [r0, #8]
   3d248:	f8d0 e004 	ldr.w	lr, [r0, #4]
   3d24c:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
   3d250:	4563      	cmp	r3, ip
   3d252:	d205      	bcs.n	3d260 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
   3d254:	f893 c005 	ldrb.w	ip, [r3, #5]
   3d258:	458c      	cmp	ip, r1
   3d25a:	d1f0      	bne.n	3d23e <pinctrl_lookup_state+0x8>
			return 0;
   3d25c:	2000      	movs	r0, #0
   3d25e:	e001      	b.n	3d264 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
   3d260:	f06f 0001 	mvn.w	r0, #1
}
   3d264:	f85d fb04 	ldr.w	pc, [sp], #4

0003d268 <nrf_gpio_pin_present_check>:
    switch (port)
   3d268:	0943      	lsrs	r3, r0, #5
   3d26a:	d00a      	beq.n	3d282 <nrf_gpio_pin_present_check+0x1a>
   3d26c:	2b01      	cmp	r3, #1
   3d26e:	d10b      	bne.n	3d288 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   3d270:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   3d274:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3d278:	fa23 f000 	lsr.w	r0, r3, r0
}
   3d27c:	f000 0001 	and.w	r0, r0, #1
   3d280:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   3d282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d286:	e7f5      	b.n	3d274 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   3d288:	2300      	movs	r3, #0
   3d28a:	e7f3      	b.n	3d274 <nrf_gpio_pin_present_check+0xc>

0003d28c <nrf_gpio_pin_clear>:
{
   3d28c:	b500      	push	{lr}
   3d28e:	b083      	sub	sp, #12
   3d290:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d292:	a801      	add	r0, sp, #4
   3d294:	f7f0 f854 	bl	2d340 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3d298:	9a01      	ldr	r2, [sp, #4]
   3d29a:	2301      	movs	r3, #1
   3d29c:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3d29e:	60c3      	str	r3, [r0, #12]
}
   3d2a0:	b003      	add	sp, #12
   3d2a2:	f85d fb04 	ldr.w	pc, [sp], #4

0003d2a6 <nrf_gpio_pin_set>:
{
   3d2a6:	b500      	push	{lr}
   3d2a8:	b083      	sub	sp, #12
   3d2aa:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d2ac:	a801      	add	r0, sp, #4
   3d2ae:	f7f0 f847 	bl	2d340 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3d2b2:	9a01      	ldr	r2, [sp, #4]
   3d2b4:	2301      	movs	r3, #1
   3d2b6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3d2b8:	6083      	str	r3, [r0, #8]
}
   3d2ba:	b003      	add	sp, #12
   3d2bc:	f85d fb04 	ldr.w	pc, [sp], #4

0003d2c0 <nrf_gpio_pin_write>:
{
   3d2c0:	b508      	push	{r3, lr}
    if (value == 0)
   3d2c2:	b911      	cbnz	r1, 3d2ca <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   3d2c4:	f7ff ffe2 	bl	3d28c <nrf_gpio_pin_clear>
}
   3d2c8:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   3d2ca:	f7ff ffec 	bl	3d2a6 <nrf_gpio_pin_set>
}
   3d2ce:	e7fb      	b.n	3d2c8 <nrf_gpio_pin_write+0x8>

0003d2d0 <nrf_gpio_cfg>:
{
   3d2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d2d2:	b083      	sub	sp, #12
   3d2d4:	9001      	str	r0, [sp, #4]
   3d2d6:	460c      	mov	r4, r1
   3d2d8:	4617      	mov	r7, r2
   3d2da:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d2dc:	a801      	add	r0, sp, #4
   3d2de:	f7f0 f82f 	bl	2d340 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   3d2e2:	9901      	ldr	r1, [sp, #4]
   3d2e4:	3180      	adds	r1, #128	; 0x80
   3d2e6:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   3d2ea:	f005 4ce0 	and.w	ip, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3d2ee:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   3d2f2:	ea44 0386 	orr.w	r3, r4, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3d2f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   3d2fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3d2fe:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   3d302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3d306:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   3d30a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   3d30e:	b003      	add	sp, #12
   3d310:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003d312 <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
   3d312:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
   3d314:	290f      	cmp	r1, #15
   3d316:	d806      	bhi.n	3d326 <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
   3d318:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
   3d31c:	3110      	adds	r1, #16
   3d31e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
   3d322:	2000      	movs	r0, #0
   3d324:	4770      	bx	lr
		return -EINVAL;
   3d326:	f06f 0015 	mvn.w	r0, #21
}
   3d32a:	4770      	bx	lr

0003d32c <mbox_nrf_mtu_get>:
}
   3d32c:	2000      	movs	r0, #0
   3d32e:	4770      	bx	lr

0003d330 <mbox_nrf_max_channels_get>:
}
   3d330:	2010      	movs	r0, #16
   3d332:	4770      	bx	lr

0003d334 <gpio_pin_configure_dt>:
{
   3d334:	b508      	push	{r3, lr}
   3d336:	4603      	mov	r3, r0
   3d338:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
   3d33a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
   3d33c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
   3d33e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
   3d340:	ea42 020c 	orr.w	r2, r2, ip
   3d344:	f7f0 fb74 	bl	2da30 <z_impl_gpio_pin_configure>
}
   3d348:	bd08      	pop	{r3, pc}

0003d34a <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
   3d34a:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 1);
   3d34c:	2101      	movs	r1, #1
   3d34e:	f7f0 fd2d 	bl	2ddac <dk_set_led>
}
   3d352:	bd08      	pop	{r3, pc}

0003d354 <dk_set_led_off>:

int dk_set_led_off(uint8_t led_idx)
{
   3d354:	b508      	push	{r3, lr}
	return dk_set_led(led_idx, 0);
   3d356:	2100      	movs	r1, #0
   3d358:	f7f0 fd28 	bl	2ddac <dk_set_led>
}
   3d35c:	bd08      	pop	{r3, pc}

0003d35e <tfm_ns_interface_init>:
}
   3d35e:	2000      	movs	r0, #0
   3d360:	4770      	bx	lr

0003d362 <tfm_platform_ioctl>:
}

enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
   3d362:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d364:	b089      	sub	sp, #36	; 0x24
   3d366:	4615      	mov	r5, r2
    tfm_platform_ioctl_req_t req = request;
   3d368:	9007      	str	r0, [sp, #28]
    struct psa_invec in_vec[2] = { {0} };
   3d36a:	2300      	movs	r3, #0
   3d36c:	9303      	str	r3, [sp, #12]
   3d36e:	9304      	str	r3, [sp, #16]
   3d370:	9305      	str	r3, [sp, #20]
   3d372:	9306      	str	r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   3d374:	ab07      	add	r3, sp, #28
   3d376:	9303      	str	r3, [sp, #12]
    in_vec[0].len = sizeof(req);
   3d378:	2304      	movs	r3, #4
   3d37a:	9304      	str	r3, [sp, #16]
    if (input != NULL) {
   3d37c:	b1e1      	cbz	r1, 3d3b8 <tfm_platform_ioctl+0x56>
        in_vec[1].base = input->base;
   3d37e:	680a      	ldr	r2, [r1, #0]
   3d380:	9205      	str	r2, [sp, #20]
        in_vec[1].len = input->len;
   3d382:	684b      	ldr	r3, [r1, #4]
   3d384:	9306      	str	r3, [sp, #24]
        inlen = 2;
   3d386:	2602      	movs	r6, #2
    } else {
        inlen = 1;
    }

    if (output != NULL) {
   3d388:	b1c5      	cbz	r5, 3d3bc <tfm_platform_ioctl+0x5a>
        outlen = 1;
   3d38a:	2701      	movs	r7, #1
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   3d38c:	2101      	movs	r1, #1
   3d38e:	2041      	movs	r0, #65	; 0x41
   3d390:	f7f0 fe08 	bl	2dfa4 <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   3d394:	1e04      	subs	r4, r0, #0
   3d396:	dd13      	ble.n	3d3c0 <tfm_platform_ioctl+0x5e>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    }

    status = psa_call(handle, PSA_IPC_CALL,
   3d398:	9701      	str	r7, [sp, #4]
   3d39a:	9500      	str	r5, [sp, #0]
   3d39c:	4633      	mov	r3, r6
   3d39e:	aa03      	add	r2, sp, #12
   3d3a0:	2100      	movs	r1, #0
   3d3a2:	4620      	mov	r0, r4
   3d3a4:	f7f0 fdd6 	bl	2df54 <psa_call>
   3d3a8:	4605      	mov	r5, r0
                      in_vec, inlen,
                      output, outlen);
    psa_close(handle);
   3d3aa:	4620      	mov	r0, r4
   3d3ac:	f7f0 fe08 	bl	2dfc0 <psa_close>

    if (status < PSA_SUCCESS) {
   3d3b0:	2d00      	cmp	r5, #0
   3d3b2:	db08      	blt.n	3d3c6 <tfm_platform_ioctl+0x64>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
   3d3b4:	4628      	mov	r0, r5
   3d3b6:	e004      	b.n	3d3c2 <tfm_platform_ioctl+0x60>
        inlen = 1;
   3d3b8:	2601      	movs	r6, #1
   3d3ba:	e7e5      	b.n	3d388 <tfm_platform_ioctl+0x26>
        outlen = 0;
   3d3bc:	2700      	movs	r7, #0
   3d3be:	e7e5      	b.n	3d38c <tfm_platform_ioctl+0x2a>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   3d3c0:	2001      	movs	r0, #1
    }
}
   3d3c2:	b009      	add	sp, #36	; 0x24
   3d3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   3d3c6:	2001      	movs	r0, #1
   3d3c8:	e7fb      	b.n	3d3c2 <tfm_platform_ioctl+0x60>

0003d3ca <psa_crypto_init>:
}
   3d3ca:	2000      	movs	r0, #0
   3d3cc:	4770      	bx	lr

0003d3ce <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   3d3ce:	b510      	push	{r4, lr}
   3d3d0:	b088      	sub	sp, #32
   3d3d2:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   3d3d4:	ab01      	add	r3, sp, #4
   3d3d6:	9306      	str	r3, [sp, #24]
	in_vec.len = sizeof(args);
   3d3d8:	230c      	movs	r3, #12
   3d3da:	9307      	str	r3, [sp, #28]

	out_vec.base = (void *)&out;
   3d3dc:	f8cd d010 	str.w	sp, [sp, #16]
	out_vec.len = sizeof(out);
   3d3e0:	2304      	movs	r3, #4
   3d3e2:	9305      	str	r3, [sp, #20]

	args.destination = destination;
   3d3e4:	9001      	str	r0, [sp, #4]
	args.addr = addr;
   3d3e6:	9102      	str	r1, [sp, #8]
	args.len = len;
   3d3e8:	9203      	str	r2, [sp, #12]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   3d3ea:	aa04      	add	r2, sp, #16
   3d3ec:	a906      	add	r1, sp, #24
   3d3ee:	2000      	movs	r0, #0
   3d3f0:	f7ff ffb7 	bl	3d362 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   3d3f4:	9b00      	ldr	r3, [sp, #0]
   3d3f6:	6023      	str	r3, [r4, #0]

	return ret;
}
   3d3f8:	b008      	add	sp, #32
   3d3fa:	bd10      	pop	{r4, pc}

0003d3fc <tfm_platform_gpio_pin_mcu_select>:

enum tfm_platform_err_t tfm_platform_gpio_pin_mcu_select(uint32_t pin_number, uint32_t mcu,
							 uint32_t *result)
{
   3d3fc:	b510      	push	{r4, lr}
   3d3fe:	b088      	sub	sp, #32
   3d400:	4614      	mov	r4, r2
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_gpio_service_args args;
	struct tfm_gpio_service_out out;

	args.type = TFM_GPIO_SERVICE_TYPE_PIN_MCU_SELECT;
   3d402:	2300      	movs	r3, #0
   3d404:	9301      	str	r3, [sp, #4]
	args.mcu_select.pin_number = pin_number;
   3d406:	9002      	str	r0, [sp, #8]
	args.mcu_select.mcu = mcu;
   3d408:	9103      	str	r1, [sp, #12]

	in_vec.base = (const void *)&args;
   3d40a:	ab01      	add	r3, sp, #4
   3d40c:	9306      	str	r3, [sp, #24]
	in_vec.len = sizeof(args);
   3d40e:	230c      	movs	r3, #12
   3d410:	9307      	str	r3, [sp, #28]

	out_vec.base = (void *)&out;
   3d412:	f8cd d010 	str.w	sp, [sp, #16]
	out_vec.len = sizeof(out);
   3d416:	2304      	movs	r3, #4
   3d418:	9305      	str	r3, [sp, #20]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_GPIO_SERVICE, &in_vec,
   3d41a:	aa04      	add	r2, sp, #16
   3d41c:	a906      	add	r1, sp, #24
   3d41e:	2001      	movs	r0, #1
   3d420:	f7ff ff9f 	bl	3d362 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   3d424:	9b00      	ldr	r3, [sp, #0]
   3d426:	6023      	str	r3, [r4, #0]

	return ret;
#else
	return TFM_PLATFORM_ERR_NOT_SUPPORTED;
#endif
}
   3d428:	b008      	add	sp, #32
   3d42a:	bd10      	pop	{r4, pc}

0003d42c <SystemInit>:

void SystemInit(void)
{
   3d42c:	b508      	push	{r3, lr}
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
   3d42e:	f7f0 fdd5 	bl	2dfdc <SystemCoreClockUpdate>
}
   3d432:	bd08      	pop	{r3, pc}

0003d434 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
   3d434:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   3d436:	4780      	blx	r0
}
   3d438:	bd08      	pop	{r3, pc}

0003d43a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   3d43a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   3d43c:	f001 fc12 	bl	3ec64 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
   3d440:	bd08      	pop	{r3, pc}

0003d442 <clock_initial_lfclksrc_get>:
}
   3d442:	2001      	movs	r0, #1
   3d444:	4770      	bx	lr

0003d446 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
   3d446:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   3d448:	2005      	movs	r0, #5
   3d44a:	f7db ffb3 	bl	193b4 <arch_irq_is_enabled>
   3d44e:	b100      	cbz	r0, 3d452 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
   3d450:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   3d452:	2005      	movs	r0, #5
   3d454:	f7fa fe2a 	bl	380ac <arch_irq_enable>
}
   3d458:	e7fa      	b.n	3d450 <nrfx_power_clock_irq_init+0xa>

0003d45a <clock_lfclksrc_tweak>:
{
   3d45a:	b538      	push	{r3, r4, r5, lr}
   3d45c:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
   3d45e:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   3d460:	2b02      	cmp	r3, #2
   3d462:	d006      	beq.n	3d472 <clock_lfclksrc_tweak+0x18>
   3d464:	2b01      	cmp	r3, #1
   3d466:	d000      	beq.n	3d46a <clock_lfclksrc_tweak+0x10>
   3d468:	2300      	movs	r3, #0
    if (!is_correct_clk)
   3d46a:	461d      	mov	r5, r3
   3d46c:	b11b      	cbz	r3, 3d476 <clock_lfclksrc_tweak+0x1c>
}
   3d46e:	4628      	mov	r0, r5
   3d470:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   3d472:	2301      	movs	r3, #1
   3d474:	e7f9      	b.n	3d46a <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3d476:	2000      	movs	r0, #0
   3d478:	f7f0 fe4e 	bl	2e118 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   3d47c:	f7ff ffe1 	bl	3d442 <clock_initial_lfclksrc_get>
   3d480:	7020      	strb	r0, [r4, #0]
   3d482:	e7f4      	b.n	3d46e <clock_lfclksrc_tweak+0x14>

0003d484 <nrf_gpiote_event_configure>:
{
   3d484:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   3d486:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   3d48a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3d48e:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
   3d492:	f424 7440 	bic.w	r4, r4, #768	; 0x300
   3d496:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3d49a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3d49e:	0212      	lsls	r2, r2, #8
   3d4a0:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   3d4a4:	041b      	lsls	r3, r3, #16
   3d4a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3d4aa:	431a      	orrs	r2, r3
   3d4ac:	4314      	orrs	r4, r2
   3d4ae:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   3d4b2:	bc10      	pop	{r4}
   3d4b4:	4770      	bx	lr

0003d4b6 <nrf_gpiote_task_configure>:
{
   3d4b6:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   3d4b8:	f501 71a2 	add.w	r1, r1, #324	; 0x144
   3d4bc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3d4c0:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
   3d4c4:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
   3d4c8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3d4cc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
   3d4d0:	0212      	lsls	r2, r2, #8
   3d4d2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3d4d6:	041b      	lsls	r3, r3, #16
   3d4d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3d4dc:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   3d4de:	f89d 3004 	ldrb.w	r3, [sp, #4]
   3d4e2:	051b      	lsls	r3, r3, #20
   3d4e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   3d4e8:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   3d4ea:	4314      	orrs	r4, r2
   3d4ec:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
   3d4f0:	bc10      	pop	{r4}
   3d4f2:	4770      	bx	lr

0003d4f4 <nrf_gpio_pin_present_check>:
    switch (port)
   3d4f4:	0943      	lsrs	r3, r0, #5
   3d4f6:	d00a      	beq.n	3d50e <nrf_gpio_pin_present_check+0x1a>
   3d4f8:	2b01      	cmp	r3, #1
   3d4fa:	d10b      	bne.n	3d514 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   3d4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   3d500:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3d504:	fa23 f000 	lsr.w	r0, r3, r0
}
   3d508:	f000 0001 	and.w	r0, r0, #1
   3d50c:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   3d50e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d512:	e7f5      	b.n	3d500 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   3d514:	2300      	movs	r3, #0
   3d516:	e7f3      	b.n	3d500 <nrf_gpio_pin_present_check+0xc>

0003d518 <pin_is_task_output>:
{
   3d518:	b510      	push	{r4, lr}
   3d51a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3d51c:	f7f1 f81a 	bl	2e554 <pin_is_output>
   3d520:	b128      	cbz	r0, 3d52e <pin_is_task_output+0x16>
   3d522:	4620      	mov	r0, r4
   3d524:	f7f1 f800 	bl	2e528 <pin_in_use_by_te>
   3d528:	b118      	cbz	r0, 3d532 <pin_is_task_output+0x1a>
   3d52a:	2001      	movs	r0, #1
   3d52c:	e000      	b.n	3d530 <pin_is_task_output+0x18>
   3d52e:	2000      	movs	r0, #0
}
   3d530:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   3d532:	2000      	movs	r0, #0
   3d534:	e7fc      	b.n	3d530 <pin_is_task_output+0x18>

0003d536 <pin_is_input>:
{
   3d536:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   3d538:	f7f1 f80c 	bl	2e554 <pin_is_output>
   3d53c:	f080 0001 	eor.w	r0, r0, #1
}
   3d540:	b2c0      	uxtb	r0, r0
   3d542:	bd08      	pop	{r3, pc}

0003d544 <gpiote_polarity_to_trigger>:
}
   3d544:	4770      	bx	lr

0003d546 <gpiote_trigger_to_polarity>:
}
   3d546:	4770      	bx	lr

0003d548 <is_level>:
}
   3d548:	2803      	cmp	r0, #3
   3d54a:	bf94      	ite	ls
   3d54c:	2000      	movls	r0, #0
   3d54e:	2001      	movhi	r0, #1
   3d550:	4770      	bx	lr

0003d552 <latch_pending_read_and_check>:
{
   3d552:	b510      	push	{r4, lr}
   3d554:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
   3d556:	4602      	mov	r2, r0
   3d558:	2102      	movs	r1, #2
   3d55a:	2000      	movs	r0, #0
   3d55c:	f7f0 ffba 	bl	2e4d4 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   3d560:	2300      	movs	r3, #0
   3d562:	2b01      	cmp	r3, #1
   3d564:	d804      	bhi.n	3d570 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
   3d566:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   3d56a:	b91a      	cbnz	r2, 3d574 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   3d56c:	3301      	adds	r3, #1
   3d56e:	e7f8      	b.n	3d562 <latch_pending_read_and_check+0x10>
    return false;
   3d570:	2000      	movs	r0, #0
}
   3d572:	bd10      	pop	{r4, pc}
            return true;
   3d574:	2001      	movs	r0, #1
   3d576:	e7fc      	b.n	3d572 <latch_pending_read_and_check+0x20>

0003d578 <nrf_gpio_cfg_default>:
{
   3d578:	b500      	push	{lr}
   3d57a:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   3d57c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d57e:	a801      	add	r0, sp, #4
   3d580:	f7f1 f8a8 	bl	2e6d4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   3d584:	9a01      	ldr	r2, [sp, #4]
   3d586:	3280      	adds	r2, #128	; 0x80
   3d588:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   3d58c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3d590:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   3d594:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   3d598:	b003      	add	sp, #12
   3d59a:	f85d fb04 	ldr.w	pc, [sp], #4

0003d59e <nrf_gpio_reconfigure>:
{
   3d59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d5a2:	b082      	sub	sp, #8
   3d5a4:	9001      	str	r0, [sp, #4]
   3d5a6:	4688      	mov	r8, r1
   3d5a8:	4615      	mov	r5, r2
   3d5aa:	461c      	mov	r4, r3
   3d5ac:	9f08      	ldr	r7, [sp, #32]
   3d5ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d5b0:	a801      	add	r0, sp, #4
   3d5b2:	f7f1 f88f 	bl	2e6d4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3d5b6:	9a01      	ldr	r2, [sp, #4]
   3d5b8:	f102 0380 	add.w	r3, r2, #128	; 0x80
   3d5bc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3d5c0:	f1b8 0f00 	cmp.w	r8, #0
   3d5c4:	d031      	beq.n	3d62a <nrf_gpio_reconfigure+0x8c>
   3d5c6:	f04f 0c01 	mov.w	ip, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3d5ca:	b38d      	cbz	r5, 3d630 <nrf_gpio_reconfigure+0x92>
   3d5cc:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3d5ce:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3d5d2:	b37c      	cbz	r4, 3d634 <nrf_gpio_reconfigure+0x96>
   3d5d4:	230c      	movs	r3, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3d5d6:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3d5da:	b36f      	cbz	r7, 3d638 <nrf_gpio_reconfigure+0x9a>
   3d5dc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3d5e0:	ea4c 0c03 	orr.w	ip, ip, r3
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3d5e4:	b356      	cbz	r6, 3d63c <nrf_gpio_reconfigure+0x9e>
   3d5e6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3d5ea:	ea4c 0c03 	orr.w	ip, ip, r3
    cnf &= ~to_update;
   3d5ee:	ea21 010c 	bic.w	r1, r1, ip
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3d5f2:	f1b8 0f00 	cmp.w	r8, #0
   3d5f6:	d023      	beq.n	3d640 <nrf_gpio_reconfigure+0xa2>
   3d5f8:	f898 3000 	ldrb.w	r3, [r8]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3d5fc:	b315      	cbz	r5, 3d644 <nrf_gpio_reconfigure+0xa6>
   3d5fe:	782d      	ldrb	r5, [r5, #0]
   3d600:	006d      	lsls	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3d602:	432b      	orrs	r3, r5
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3d604:	b304      	cbz	r4, 3d648 <nrf_gpio_reconfigure+0xaa>
   3d606:	7824      	ldrb	r4, [r4, #0]
   3d608:	00a4      	lsls	r4, r4, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3d60a:	4323      	orrs	r3, r4
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3d60c:	b1f7      	cbz	r7, 3d64c <nrf_gpio_reconfigure+0xae>
   3d60e:	783c      	ldrb	r4, [r7, #0]
   3d610:	0224      	lsls	r4, r4, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3d612:	4323      	orrs	r3, r4
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3d614:	b1e6      	cbz	r6, 3d650 <nrf_gpio_reconfigure+0xb2>
   3d616:	7834      	ldrb	r4, [r6, #0]
   3d618:	0424      	lsls	r4, r4, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3d61a:	4323      	orrs	r3, r4
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3d61c:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   3d61e:	3280      	adds	r2, #128	; 0x80
   3d620:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   3d624:	b002      	add	sp, #8
   3d626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   3d62a:	f04f 0c00 	mov.w	ip, #0
   3d62e:	e7cc      	b.n	3d5ca <nrf_gpio_reconfigure+0x2c>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3d630:	2300      	movs	r3, #0
   3d632:	e7cc      	b.n	3d5ce <nrf_gpio_reconfigure+0x30>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   3d634:	2300      	movs	r3, #0
   3d636:	e7ce      	b.n	3d5d6 <nrf_gpio_reconfigure+0x38>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3d638:	2300      	movs	r3, #0
   3d63a:	e7d1      	b.n	3d5e0 <nrf_gpio_reconfigure+0x42>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   3d63c:	2300      	movs	r3, #0
   3d63e:	e7d4      	b.n	3d5ea <nrf_gpio_reconfigure+0x4c>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3d640:	2300      	movs	r3, #0
   3d642:	e7db      	b.n	3d5fc <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   3d644:	2500      	movs	r5, #0
   3d646:	e7dc      	b.n	3d602 <nrf_gpio_reconfigure+0x64>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   3d648:	2400      	movs	r4, #0
   3d64a:	e7de      	b.n	3d60a <nrf_gpio_reconfigure+0x6c>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3d64c:	2400      	movs	r4, #0
   3d64e:	e7e0      	b.n	3d612 <nrf_gpio_reconfigure+0x74>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   3d650:	2400      	movs	r4, #0
   3d652:	e7e2      	b.n	3d61a <nrf_gpio_reconfigure+0x7c>

0003d654 <nrf_gpio_cfg_sense_set>:
{
   3d654:	b500      	push	{lr}
   3d656:	b085      	sub	sp, #20
   3d658:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   3d65c:	f10d 030f 	add.w	r3, sp, #15
   3d660:	9301      	str	r3, [sp, #4]
   3d662:	2100      	movs	r1, #0
   3d664:	9100      	str	r1, [sp, #0]
   3d666:	460b      	mov	r3, r1
   3d668:	460a      	mov	r2, r1
   3d66a:	f7ff ff98 	bl	3d59e <nrf_gpio_reconfigure>
}
   3d66e:	b005      	add	sp, #20
   3d670:	f85d fb04 	ldr.w	pc, [sp], #4

0003d674 <nrf_gpio_pin_read>:
{
   3d674:	b500      	push	{lr}
   3d676:	b083      	sub	sp, #12
   3d678:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d67a:	a801      	add	r0, sp, #4
   3d67c:	f7f1 f82a 	bl	2e6d4 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   3d680:	6900      	ldr	r0, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   3d682:	9b01      	ldr	r3, [sp, #4]
   3d684:	40d8      	lsrs	r0, r3
}
   3d686:	f000 0001 	and.w	r0, r0, #1
   3d68a:	b003      	add	sp, #12
   3d68c:	f85d fb04 	ldr.w	pc, [sp], #4

0003d690 <nrf_gpio_pin_sense_get>:
{
   3d690:	b500      	push	{lr}
   3d692:	b083      	sub	sp, #12
   3d694:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d696:	a801      	add	r0, sp, #4
   3d698:	f7f1 f81c 	bl	2e6d4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   3d69c:	9b01      	ldr	r3, [sp, #4]
   3d69e:	3380      	adds	r3, #128	; 0x80
   3d6a0:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
   3d6a4:	f3c0 4001 	ubfx	r0, r0, #16, #2
   3d6a8:	b003      	add	sp, #12
   3d6aa:	f85d fb04 	ldr.w	pc, [sp], #4

0003d6ae <next_sense_cond_call_handler>:
{
   3d6ae:	b570      	push	{r4, r5, r6, lr}
   3d6b0:	4606      	mov	r6, r0
   3d6b2:	460c      	mov	r4, r1
   3d6b4:	4615      	mov	r5, r2
    if (is_level(trigger))
   3d6b6:	4608      	mov	r0, r1
   3d6b8:	f7ff ff46 	bl	3d548 <is_level>
   3d6bc:	b960      	cbnz	r0, 3d6d8 <next_sense_cond_call_handler+0x2a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3d6be:	2d02      	cmp	r5, #2
   3d6c0:	d01c      	beq.n	3d6fc <next_sense_cond_call_handler+0x4e>
   3d6c2:	2102      	movs	r1, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   3d6c4:	4630      	mov	r0, r6
   3d6c6:	f7ff ffc5 	bl	3d654 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   3d6ca:	2c03      	cmp	r4, #3
   3d6cc:	d01a      	beq.n	3d704 <next_sense_cond_call_handler+0x56>
   3d6ce:	2d02      	cmp	r5, #2
   3d6d0:	d016      	beq.n	3d700 <next_sense_cond_call_handler+0x52>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3d6d2:	2d03      	cmp	r5, #3
   3d6d4:	d01b      	beq.n	3d70e <next_sense_cond_call_handler+0x60>
}
   3d6d6:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   3d6d8:	4621      	mov	r1, r4
   3d6da:	4630      	mov	r0, r6
   3d6dc:	f7f0 ff8c 	bl	2e5f8 <call_handler>
        if (nrf_gpio_pin_sense_get(pin) == sense)
   3d6e0:	4630      	mov	r0, r6
   3d6e2:	f7ff ffd5 	bl	3d690 <nrf_gpio_pin_sense_get>
   3d6e6:	42a8      	cmp	r0, r5
   3d6e8:	d1f5      	bne.n	3d6d6 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   3d6ea:	2100      	movs	r1, #0
   3d6ec:	4630      	mov	r0, r6
   3d6ee:	f7ff ffb1 	bl	3d654 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   3d6f2:	4629      	mov	r1, r5
   3d6f4:	4630      	mov	r0, r6
   3d6f6:	f7ff ffad 	bl	3d654 <nrf_gpio_cfg_sense_set>
   3d6fa:	e7ec      	b.n	3d6d6 <next_sense_cond_call_handler+0x28>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   3d6fc:	2103      	movs	r1, #3
   3d6fe:	e7e1      	b.n	3d6c4 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   3d700:	2c01      	cmp	r4, #1
   3d702:	d1e6      	bne.n	3d6d2 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
   3d704:	4621      	mov	r1, r4
   3d706:	4630      	mov	r0, r6
   3d708:	f7f0 ff76 	bl	2e5f8 <call_handler>
}
   3d70c:	e7e3      	b.n	3d6d6 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   3d70e:	2c02      	cmp	r4, #2
   3d710:	d1e1      	bne.n	3d6d6 <next_sense_cond_call_handler+0x28>
   3d712:	e7f7      	b.n	3d704 <next_sense_cond_call_handler+0x56>

0003d714 <nrf_gpio_pin_latch_clear>:
{
   3d714:	b500      	push	{lr}
   3d716:	b083      	sub	sp, #12
   3d718:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d71a:	a801      	add	r0, sp, #4
   3d71c:	f7f0 ffda 	bl	2e6d4 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   3d720:	2301      	movs	r3, #1
   3d722:	9a01      	ldr	r2, [sp, #4]
   3d724:	4093      	lsls	r3, r2
   3d726:	6203      	str	r3, [r0, #32]
}
   3d728:	b003      	add	sp, #12
   3d72a:	f85d fb04 	ldr.w	pc, [sp], #4

0003d72e <flash_page_size_get>:
}
   3d72e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   3d732:	4770      	bx	lr

0003d734 <flash_page_count_get>:
}
   3d734:	f44f 7080 	mov.w	r0, #256	; 0x100
   3d738:	4770      	bx	lr

0003d73a <flash_total_size_get>:
{
   3d73a:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   3d73c:	f7ff fff7 	bl	3d72e <flash_page_size_get>
   3d740:	4604      	mov	r4, r0
   3d742:	f7ff fff7 	bl	3d734 <flash_page_count_get>
}
   3d746:	fb04 f000 	mul.w	r0, r4, r0
   3d74a:	bd10      	pop	{r4, pc}

0003d74c <is_page_aligned_check>:
{
   3d74c:	b510      	push	{r4, lr}
   3d74e:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   3d750:	f7ff ffed 	bl	3d72e <flash_page_size_get>
   3d754:	fbb4 f3f0 	udiv	r3, r4, r0
   3d758:	fb00 4013 	mls	r0, r0, r3, r4
}
   3d75c:	fab0 f080 	clz	r0, r0
   3d760:	0940      	lsrs	r0, r0, #5
   3d762:	bd10      	pop	{r4, pc}

0003d764 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   3d764:	b508      	push	{r3, lr}
    return flash_total_size_get();
   3d766:	f7ff ffe8 	bl	3d73a <flash_total_size_get>
}
   3d76a:	bd08      	pop	{r3, pc}

0003d76c <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   3d76c:	b508      	push	{r3, lr}
    return flash_page_size_get();
   3d76e:	f7ff ffde 	bl	3d72e <flash_page_size_get>
}
   3d772:	bd08      	pop	{r3, pc}

0003d774 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   3d774:	b508      	push	{r3, lr}
    return flash_page_count_get();
   3d776:	f7ff ffdd 	bl	3d734 <flash_page_count_get>
}
   3d77a:	bd08      	pop	{r3, pc}

0003d77c <nrf52_errata_122>:
                }
            }
        #endif
        return false;
    #endif
}
   3d77c:	2000      	movs	r0, #0
   3d77e:	4770      	bx	lr

0003d780 <nrf_qspi_pins_set>:
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   3d780:	780b      	ldrb	r3, [r1, #0]
   3d782:	2bff      	cmp	r3, #255	; 0xff
   3d784:	d01b      	beq.n	3d7be <nrf_qspi_pins_set+0x3e>
   3d786:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   3d78a:	784b      	ldrb	r3, [r1, #1]
   3d78c:	2bff      	cmp	r3, #255	; 0xff
   3d78e:	d019      	beq.n	3d7c4 <nrf_qspi_pins_set+0x44>
   3d790:	f8c0 3528 	str.w	r3, [r0, #1320]	; 0x528
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   3d794:	788b      	ldrb	r3, [r1, #2]
   3d796:	2bff      	cmp	r3, #255	; 0xff
   3d798:	d017      	beq.n	3d7ca <nrf_qspi_pins_set+0x4a>
   3d79a:	f8c0 3530 	str.w	r3, [r0, #1328]	; 0x530
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   3d79e:	78cb      	ldrb	r3, [r1, #3]
   3d7a0:	2bff      	cmp	r3, #255	; 0xff
   3d7a2:	d015      	beq.n	3d7d0 <nrf_qspi_pins_set+0x50>
   3d7a4:	f8c0 3534 	str.w	r3, [r0, #1332]	; 0x534
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   3d7a8:	790b      	ldrb	r3, [r1, #4]
   3d7aa:	2bff      	cmp	r3, #255	; 0xff
   3d7ac:	d013      	beq.n	3d7d6 <nrf_qspi_pins_set+0x56>
   3d7ae:	f8c0 3538 	str.w	r3, [r0, #1336]	; 0x538
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   3d7b2:	794b      	ldrb	r3, [r1, #5]
   3d7b4:	2bff      	cmp	r3, #255	; 0xff
   3d7b6:	d011      	beq.n	3d7dc <nrf_qspi_pins_set+0x5c>
   3d7b8:	f8c0 353c 	str.w	r3, [r0, #1340]	; 0x53c
}
   3d7bc:	4770      	bx	lr
    p_reg->PSEL.SCK = NRF_QSPI_PIN_VAL(p_pins->sck_pin);
   3d7be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7c2:	e7e0      	b.n	3d786 <nrf_qspi_pins_set+0x6>
    p_reg->PSEL.CSN = NRF_QSPI_PIN_VAL(p_pins->csn_pin);
   3d7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7c8:	e7e2      	b.n	3d790 <nrf_qspi_pins_set+0x10>
    p_reg->PSEL.IO0 = NRF_QSPI_PIN_VAL(p_pins->io0_pin);
   3d7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7ce:	e7e4      	b.n	3d79a <nrf_qspi_pins_set+0x1a>
    p_reg->PSEL.IO1 = NRF_QSPI_PIN_VAL(p_pins->io1_pin);
   3d7d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7d4:	e7e6      	b.n	3d7a4 <nrf_qspi_pins_set+0x24>
    p_reg->PSEL.IO2 = NRF_QSPI_PIN_VAL(p_pins->io2_pin);
   3d7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7da:	e7e8      	b.n	3d7ae <nrf_qspi_pins_set+0x2e>
    p_reg->PSEL.IO3 = NRF_QSPI_PIN_VAL(p_pins->io3_pin);
   3d7dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d7e0:	e7ea      	b.n	3d7b8 <nrf_qspi_pins_set+0x38>

0003d7e2 <nrf_qspi_ifconfig0_set>:
    uint32_t config = p_config->readoc;
   3d7e2:	780b      	ldrb	r3, [r1, #0]
    config |= ((uint32_t)p_config->writeoc)    << QSPI_IFCONFIG0_WRITEOC_Pos;
   3d7e4:	784a      	ldrb	r2, [r1, #1]
   3d7e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
    config |= ((uint32_t)p_config->addrmode)   << QSPI_IFCONFIG0_ADDRMODE_Pos;
   3d7ea:	788a      	ldrb	r2, [r1, #2]
   3d7ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   3d7f0:	78ca      	ldrb	r2, [r1, #3]
   3d7f2:	b122      	cbz	r2, 3d7fe <nrf_qspi_ifconfig0_set+0x1c>
   3d7f4:	2280      	movs	r2, #128	; 0x80
   3d7f6:	4313      	orrs	r3, r2
    p_reg->IFCONFIG0 = config;
   3d7f8:	f8c0 3544 	str.w	r3, [r0, #1348]	; 0x544
}
   3d7fc:	4770      	bx	lr
    config |= (p_config->dpmconfig ? 1U : 0U ) << QSPI_IFCONFIG0_DPMENABLE_Pos;
   3d7fe:	2200      	movs	r2, #0
   3d800:	e7f9      	b.n	3d7f6 <nrf_qspi_ifconfig0_set+0x14>

0003d802 <nrf_qspi_ifconfig1_set>:
    uint32_t config = p_reg->IFCONFIG1 & 0x00FFFF00;
   3d802:	f8d0 3600 	ldr.w	r3, [r0, #1536]	; 0x600
   3d806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   3d80a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    config |= p_config->sck_delay;
   3d80e:	780a      	ldrb	r2, [r1, #0]
   3d810:	431a      	orrs	r2, r3
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   3d812:	784b      	ldrb	r3, [r1, #1]
   3d814:	b15b      	cbz	r3, 3d82e <nrf_qspi_ifconfig1_set+0x2c>
   3d816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   3d81a:	4313      	orrs	r3, r2
    config |= ((uint32_t)(p_config->spi_mode)) << QSPI_IFCONFIG1_SPIMODE_Pos;
   3d81c:	788a      	ldrb	r2, [r1, #2]
   3d81e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
    config |= ((uint32_t)(p_config->sck_freq)) << QSPI_IFCONFIG1_SCKFREQ_Pos;
   3d822:	78ca      	ldrb	r2, [r1, #3]
   3d824:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
    p_reg->IFCONFIG1 = config;
   3d828:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
}
   3d82c:	4770      	bx	lr
    config |= (p_config->dpmen ? 1U : 0U)      << QSPI_IFCONFIG1_DPMEN_Pos;
   3d82e:	2300      	movs	r3, #0
   3d830:	e7f3      	b.n	3d81a <nrf_qspi_ifconfig1_set+0x18>

0003d832 <nrf_qspi_cinstrdata_set>:
    switch (length)
   3d832:	3902      	subs	r1, #2
   3d834:	2907      	cmp	r1, #7
   3d836:	d81f      	bhi.n	3d878 <nrf_qspi_cinstrdata_set+0x46>
   3d838:	e8df f001 	tbb	[pc, r1]
   3d83c:	12232527 	.word	0x12232527
   3d840:	04071f21 	.word	0x04071f21
            reg |= ((uint32_t)p_tx_data_8[7]) << QSPI_CINSTRDAT1_BYTE7_Pos;
   3d844:	79d3      	ldrb	r3, [r2, #7]
   3d846:	061b      	lsls	r3, r3, #24
   3d848:	e000      	b.n	3d84c <nrf_qspi_cinstrdata_set+0x1a>
    switch (length)
   3d84a:	2300      	movs	r3, #0
            reg |= ((uint32_t)p_tx_data_8[6]) << QSPI_CINSTRDAT1_BYTE6_Pos;
   3d84c:	7991      	ldrb	r1, [r2, #6]
   3d84e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
            reg |= ((uint32_t)p_tx_data_8[5]) << QSPI_CINSTRDAT1_BYTE5_Pos;
   3d852:	7951      	ldrb	r1, [r2, #5]
   3d854:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
            reg |= ((uint32_t)p_tx_data_8[4]);
   3d858:	7911      	ldrb	r1, [r2, #4]
   3d85a:	430b      	orrs	r3, r1
            p_reg->CINSTRDAT1 = reg;
   3d85c:	f8c0 363c 	str.w	r3, [r0, #1596]	; 0x63c
            reg |= ((uint32_t)p_tx_data_8[3]) << QSPI_CINSTRDAT0_BYTE3_Pos;
   3d860:	78d3      	ldrb	r3, [r2, #3]
   3d862:	061b      	lsls	r3, r3, #24
            reg |= ((uint32_t)p_tx_data_8[2]) << QSPI_CINSTRDAT0_BYTE2_Pos;
   3d864:	7891      	ldrb	r1, [r2, #2]
   3d866:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
            reg |= ((uint32_t)p_tx_data_8[1]) << QSPI_CINSTRDAT0_BYTE1_Pos;
   3d86a:	7851      	ldrb	r1, [r2, #1]
   3d86c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
            reg |= ((uint32_t)p_tx_data_8[0]);
   3d870:	7812      	ldrb	r2, [r2, #0]
   3d872:	4313      	orrs	r3, r2
            p_reg->CINSTRDAT0 = reg;
   3d874:	f8c0 3638 	str.w	r3, [r0, #1592]	; 0x638
}
   3d878:	4770      	bx	lr
    switch (length)
   3d87a:	2300      	movs	r3, #0
   3d87c:	e7e9      	b.n	3d852 <nrf_qspi_cinstrdata_set+0x20>
   3d87e:	2300      	movs	r3, #0
   3d880:	e7ea      	b.n	3d858 <nrf_qspi_cinstrdata_set+0x26>
   3d882:	2300      	movs	r3, #0
   3d884:	e7ee      	b.n	3d864 <nrf_qspi_cinstrdata_set+0x32>
   3d886:	2300      	movs	r3, #0
   3d888:	e7ef      	b.n	3d86a <nrf_qspi_cinstrdata_set+0x38>
   3d88a:	2300      	movs	r3, #0
   3d88c:	e7f0      	b.n	3d870 <nrf_qspi_cinstrdata_set+0x3e>

0003d88e <nrf_qspi_cinstrdata_get>:
{
   3d88e:	b410      	push	{r4}
    uint32_t reg1 = p_reg->CINSTRDAT1;
   3d890:	f8d0 463c 	ldr.w	r4, [r0, #1596]	; 0x63c
    uint32_t reg0 = p_reg->CINSTRDAT0;
   3d894:	f8d0 3638 	ldr.w	r3, [r0, #1592]	; 0x638
    switch (length)
   3d898:	3902      	subs	r1, #2
   3d89a:	2907      	cmp	r1, #7
   3d89c:	d817      	bhi.n	3d8ce <nrf_qspi_cinstrdata_get+0x40>
   3d89e:	e8df f001 	tbb	[pc, r1]
   3d8a2:	1215      	.short	0x1215
   3d8a4:	090c0d0f 	.word	0x090c0d0f
   3d8a8:	0406      	.short	0x0406
            p_rx_data_8[7] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE7_Pos);
   3d8aa:	0e21      	lsrs	r1, r4, #24
   3d8ac:	71d1      	strb	r1, [r2, #7]
            p_rx_data_8[6] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE6_Pos);
   3d8ae:	f3c4 4107 	ubfx	r1, r4, #16, #8
   3d8b2:	7191      	strb	r1, [r2, #6]
            p_rx_data_8[5] = (uint8_t)(reg1 >> QSPI_CINSTRDAT1_BYTE5_Pos);
   3d8b4:	f3c4 2107 	ubfx	r1, r4, #8, #8
   3d8b8:	7151      	strb	r1, [r2, #5]
            p_rx_data_8[4] = (uint8_t)(reg1);
   3d8ba:	7114      	strb	r4, [r2, #4]
            p_rx_data_8[3] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE3_Pos);
   3d8bc:	0e19      	lsrs	r1, r3, #24
   3d8be:	70d1      	strb	r1, [r2, #3]
            p_rx_data_8[2] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE2_Pos);
   3d8c0:	f3c3 4107 	ubfx	r1, r3, #16, #8
   3d8c4:	7091      	strb	r1, [r2, #2]
            p_rx_data_8[1] = (uint8_t)(reg0 >> QSPI_CINSTRDAT0_BYTE1_Pos);
   3d8c6:	f3c3 2107 	ubfx	r1, r3, #8, #8
   3d8ca:	7051      	strb	r1, [r2, #1]
            p_rx_data_8[0] = (uint8_t)(reg0);
   3d8cc:	7013      	strb	r3, [r2, #0]
}
   3d8ce:	bc10      	pop	{r4}
   3d8d0:	4770      	bx	lr

0003d8d2 <nrf_qspi_cinstr_transfer_start>:
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   3d8d2:	780b      	ldrb	r3, [r1, #0]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   3d8d4:	784a      	ldrb	r2, [r1, #1]
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   3d8d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   3d8da:	788a      	ldrb	r2, [r1, #2]
                         ((uint32_t)p_config->length    << QSPI_CINSTRCONF_LENGTH_Pos) |
   3d8dc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   3d8e0:	78ca      	ldrb	r2, [r1, #3]
                         ((uint32_t)p_config->io2_level << QSPI_CINSTRCONF_LIO2_Pos) |
   3d8e2:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   3d8e6:	790a      	ldrb	r2, [r1, #4]
                         ((uint32_t)p_config->io3_level << QSPI_CINSTRCONF_LIO3_Pos) |
   3d8e8:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                         ((uint32_t)p_config->wren      << QSPI_CINSTRCONF_WREN_Pos));
   3d8ec:	794a      	ldrb	r2, [r1, #5]
                         ((uint32_t)p_config->wipwait   << QSPI_CINSTRCONF_WIPWAIT_Pos) |
   3d8ee:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
    p_reg->CINSTRCONF = (((uint32_t)p_config->opcode    << QSPI_CINSTRCONF_OPCODE_Pos) |
   3d8f2:	f8c0 3634 	str.w	r3, [r0, #1588]	; 0x634
}
   3d8f6:	4770      	bx	lr

0003d8f8 <nrf_gpio_pin_present_check>:
    switch (port)
   3d8f8:	0943      	lsrs	r3, r0, #5
   3d8fa:	d00a      	beq.n	3d912 <nrf_gpio_pin_present_check+0x1a>
   3d8fc:	2b01      	cmp	r3, #1
   3d8fe:	d10b      	bne.n	3d918 <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   3d900:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   3d904:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3d908:	fa23 f000 	lsr.w	r0, r3, r0
}
   3d90c:	f000 0001 	and.w	r0, r0, #1
   3d910:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   3d912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d916:	e7f5      	b.n	3d904 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   3d918:	2300      	movs	r3, #0
   3d91a:	e7f3      	b.n	3d904 <nrf_gpio_pin_present_check+0xc>

0003d91c <nrf_gpio_cfg_default>:
{
   3d91c:	b500      	push	{lr}
   3d91e:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   3d920:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d922:	a801      	add	r0, sp, #4
   3d924:	f7f1 fbcc 	bl	2f0c0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   3d928:	9a01      	ldr	r2, [sp, #4]
   3d92a:	3280      	adds	r2, #128	; 0x80
   3d92c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   3d930:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3d934:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   3d938:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   3d93c:	b003      	add	sp, #12
   3d93e:	f85d fb04 	ldr.w	pc, [sp], #4

0003d942 <nrfx_qspi_write>:
{
   3d942:	b508      	push	{r3, lr}
    return qspi_xfer((void *)p_tx_buffer, tx_buffer_length, dst_address, NRFX_QSPI_STATE_WRITE);
   3d944:	2302      	movs	r3, #2
   3d946:	f7f1 fce1 	bl	2f30c <qspi_xfer>
}
   3d94a:	bd08      	pop	{r3, pc}

0003d94c <nrfx_qspi_read>:
{
   3d94c:	b508      	push	{r3, lr}
    return qspi_xfer((void *)p_rx_buffer, rx_buffer_length, src_address, NRFX_QSPI_STATE_READ);
   3d94e:	2303      	movs	r3, #3
   3d950:	f7f1 fcdc 	bl	2f30c <qspi_xfer>
}
   3d954:	bd08      	pop	{r3, pc}

0003d956 <nrfx_qspi_chip_erase>:
{
   3d956:	b508      	push	{r3, lr}
    return nrfx_qspi_erase(NRF_QSPI_ERASE_LEN_ALL, 0);
   3d958:	2100      	movs	r1, #0
   3d95a:	2002      	movs	r0, #2
   3d95c:	f7f1 fec2 	bl	2f6e4 <nrfx_qspi_erase>
}
   3d960:	bd08      	pop	{r3, pc}

0003d962 <nrf_spim_configure>:
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
   3d962:	3a00      	subs	r2, #0
   3d964:	bf18      	it	ne
   3d966:	2201      	movne	r2, #1
    switch (spi_mode)
   3d968:	2902      	cmp	r1, #2
   3d96a:	d009      	beq.n	3d980 <nrf_spim_configure+0x1e>
   3d96c:	2903      	cmp	r1, #3
   3d96e:	d00a      	beq.n	3d986 <nrf_spim_configure+0x24>
   3d970:	2901      	cmp	r1, #1
   3d972:	d002      	beq.n	3d97a <nrf_spim_configure+0x18>
    p_reg->CONFIG = config;
   3d974:	f8c0 2554 	str.w	r2, [r0, #1364]	; 0x554
}
   3d978:	4770      	bx	lr
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   3d97a:	f042 0202 	orr.w	r2, r2, #2
        break;
   3d97e:	e7f9      	b.n	3d974 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   3d980:	f042 0204 	orr.w	r2, r2, #4
        break;
   3d984:	e7f6      	b.n	3d974 <nrf_spim_configure+0x12>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
   3d986:	f042 0206 	orr.w	r2, r2, #6
        break;
   3d98a:	e7f3      	b.n	3d974 <nrf_spim_configure+0x12>

0003d98c <nrf_gpio_pin_present_check>:
    switch (port)
   3d98c:	0943      	lsrs	r3, r0, #5
   3d98e:	d00a      	beq.n	3d9a6 <nrf_gpio_pin_present_check+0x1a>
   3d990:	2b01      	cmp	r3, #1
   3d992:	d10b      	bne.n	3d9ac <nrf_gpio_pin_present_check+0x20>
            mask = P1_FEATURE_PINS_PRESENT;
   3d994:	f64f 73ff 	movw	r3, #65535	; 0xffff
    pin_number &= 0x1F;
   3d998:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3d99c:	fa23 f000 	lsr.w	r0, r3, r0
}
   3d9a0:	f000 0001 	and.w	r0, r0, #1
   3d9a4:	4770      	bx	lr
            mask = P0_FEATURE_PINS_PRESENT;
   3d9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3d9aa:	e7f5      	b.n	3d998 <nrf_gpio_pin_present_check+0xc>
    switch (port)
   3d9ac:	2300      	movs	r3, #0
   3d9ae:	e7f3      	b.n	3d998 <nrf_gpio_pin_present_check+0xc>

0003d9b0 <spim_int_enable>:
    if (!enable)
   3d9b0:	b919      	cbnz	r1, 3d9ba <spim_int_enable+0xa>
    p_reg->INTENCLR = mask;
   3d9b2:	2340      	movs	r3, #64	; 0x40
   3d9b4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   3d9b8:	4770      	bx	lr
    p_reg->INTENSET = mask;
   3d9ba:	2340      	movs	r3, #64	; 0x40
   3d9bc:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
}
   3d9c0:	4770      	bx	lr

0003d9c2 <spim_list_enable_handle>:
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
   3d9c2:	f011 0f01 	tst.w	r1, #1
   3d9c6:	d009      	beq.n	3d9dc <spim_list_enable_handle+0x1a>
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
   3d9c8:	2301      	movs	r3, #1
   3d9ca:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
   3d9ce:	f011 0f02 	tst.w	r1, #2
   3d9d2:	d007      	beq.n	3d9e4 <spim_list_enable_handle+0x22>
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
   3d9d4:	2301      	movs	r3, #1
   3d9d6:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   3d9da:	4770      	bx	lr
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
   3d9dc:	2300      	movs	r3, #0
   3d9de:	f8c0 3550 	str.w	r3, [r0, #1360]	; 0x550
}
   3d9e2:	e7f4      	b.n	3d9ce <spim_list_enable_handle+0xc>

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
   3d9e4:	2300      	movs	r3, #0
   3d9e6:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
}
   3d9ea:	4770      	bx	lr

0003d9ec <nrf_gpio_pin_clear>:
{
   3d9ec:	b500      	push	{lr}
   3d9ee:	b083      	sub	sp, #12
   3d9f0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3d9f2:	a801      	add	r0, sp, #4
   3d9f4:	f7f1 feec 	bl	2f7d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   3d9f8:	9a01      	ldr	r2, [sp, #4]
   3d9fa:	2301      	movs	r3, #1
   3d9fc:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   3d9fe:	60c3      	str	r3, [r0, #12]
}
   3da00:	b003      	add	sp, #12
   3da02:	f85d fb04 	ldr.w	pc, [sp], #4

0003da06 <nrf_gpio_pin_set>:
{
   3da06:	b500      	push	{lr}
   3da08:	b083      	sub	sp, #12
   3da0a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3da0c:	a801      	add	r0, sp, #4
   3da0e:	f7f1 fedf 	bl	2f7d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   3da12:	9a01      	ldr	r2, [sp, #4]
   3da14:	2301      	movs	r3, #1
   3da16:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   3da18:	6083      	str	r3, [r0, #8]
}
   3da1a:	b003      	add	sp, #12
   3da1c:	f85d fb04 	ldr.w	pc, [sp], #4

0003da20 <nrf_gpio_pin_write>:
{
   3da20:	b508      	push	{r3, lr}
    if (value == 0)
   3da22:	b911      	cbnz	r1, 3da2a <nrf_gpio_pin_write+0xa>
        nrf_gpio_pin_clear(pin_number);
   3da24:	f7ff ffe2 	bl	3d9ec <nrf_gpio_pin_clear>
}
   3da28:	bd08      	pop	{r3, pc}
        nrf_gpio_pin_set(pin_number);
   3da2a:	f7ff ffec 	bl	3da06 <nrf_gpio_pin_set>
}
   3da2e:	e7fb      	b.n	3da28 <nrf_gpio_pin_write+0x8>

0003da30 <set_ss_pin_state>:
{
   3da30:	b508      	push	{r3, lr}
    if (p_cb->use_hw_ss)
   3da32:	7f83      	ldrb	r3, [r0, #30]
   3da34:	f013 0f04 	tst.w	r3, #4
   3da38:	d109      	bne.n	3da4e <set_ss_pin_state+0x1e>
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3da3a:	7fc0      	ldrb	r0, [r0, #31]
   3da3c:	28ff      	cmp	r0, #255	; 0xff
   3da3e:	d006      	beq.n	3da4e <set_ss_pin_state+0x1e>
        nrf_gpio_pin_write(p_cb->ss_pin,
   3da40:	f013 0f02 	tst.w	r3, #2
   3da44:	d101      	bne.n	3da4a <set_ss_pin_state+0x1a>
                           p_cb->ss_active_high ? active : !active);
   3da46:	f081 0101 	eor.w	r1, r1, #1
        nrf_gpio_pin_write(p_cb->ss_pin,
   3da4a:	f7ff ffe9 	bl	3da20 <nrf_gpio_pin_write>
}
   3da4e:	bd08      	pop	{r3, pc}

0003da50 <finish_transfer>:
{
   3da50:	b510      	push	{r4, lr}
   3da52:	4604      	mov	r4, r0
    set_ss_pin_state(p_cb, false);
   3da54:	2100      	movs	r1, #0
   3da56:	f7ff ffeb 	bl	3da30 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
   3da5a:	2300      	movs	r3, #0
   3da5c:	7763      	strb	r3, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
   3da5e:	7223      	strb	r3, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   3da60:	4620      	mov	r0, r4
   3da62:	f850 3b08 	ldr.w	r3, [r0], #8
   3da66:	6861      	ldr	r1, [r4, #4]
   3da68:	4798      	blx	r3
}
   3da6a:	bd10      	pop	{r4, pc}

0003da6c <nrf_gpio_cfg>:
{
   3da6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3da6e:	b083      	sub	sp, #12
   3da70:	9001      	str	r0, [sp, #4]
   3da72:	460c      	mov	r4, r1
   3da74:	4617      	mov	r7, r2
   3da76:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3da78:	a801      	add	r0, sp, #4
   3da7a:	f7f1 fea9 	bl	2f7d0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   3da7e:	9901      	ldr	r1, [sp, #4]
   3da80:	3180      	adds	r1, #128	; 0x80
   3da82:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
   3da86:	f005 4ce0 	and.w	ip, r5, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3da8a:	ea44 0447 	orr.w	r4, r4, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   3da8e:	ea44 0386 	orr.w	r3, r4, r6, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   3da92:	f89d 2020 	ldrb.w	r2, [sp, #32]
   3da96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   3da9a:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   3da9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3daa2:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
   3daa6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   3daaa:	b003      	add	sp, #12
   3daac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003daae <configure_pins>:
{
   3daae:	b5f0      	push	{r4, r5, r6, r7, lr}
   3dab0:	b083      	sub	sp, #12
   3dab2:	4605      	mov	r5, r0
   3dab4:	460c      	mov	r4, r1
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
   3dab6:	6806      	ldr	r6, [r0, #0]
    if (!p_config->skip_gpio_cfg)
   3dab8:	7ccb      	ldrb	r3, [r1, #19]
   3daba:	bb03      	cbnz	r3, 3dafe <configure_pins+0x50>
        pin_drive = (p_config->frequency == NRF_SPIM_FREQ_32M)
   3dabc:	688b      	ldr	r3, [r1, #8]
                    : NRF_GPIO_PIN_S0S1;
   3dabe:	f1b3 5fa0 	cmp.w	r3, #335544320	; 0x14000000
   3dac2:	d034      	beq.n	3db2e <configure_pins+0x80>
   3dac4:	2700      	movs	r7, #0
                           p_config->mode <= NRF_SPIM_MODE_1 ? 0 : 1);
   3dac6:	7b21      	ldrb	r1, [r4, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   3dac8:	2901      	cmp	r1, #1
   3daca:	bf94      	ite	ls
   3dacc:	2100      	movls	r1, #0
   3dace:	2101      	movhi	r1, #1
   3dad0:	7820      	ldrb	r0, [r4, #0]
   3dad2:	f7ff ffa5 	bl	3da20 <nrf_gpio_pin_write>
        nrf_gpio_cfg(p_config->sck_pin,
   3dad6:	2200      	movs	r2, #0
   3dad8:	9201      	str	r2, [sp, #4]
   3dada:	9700      	str	r7, [sp, #0]
   3dadc:	4613      	mov	r3, r2
   3dade:	2101      	movs	r1, #1
   3dae0:	7820      	ldrb	r0, [r4, #0]
   3dae2:	f7ff ffc3 	bl	3da6c <nrf_gpio_cfg>
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   3dae6:	7860      	ldrb	r0, [r4, #1]
   3dae8:	28ff      	cmp	r0, #255	; 0xff
   3daea:	d122      	bne.n	3db32 <configure_pins+0x84>
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   3daec:	78a0      	ldrb	r0, [r4, #2]
   3daee:	28ff      	cmp	r0, #255	; 0xff
   3daf0:	d12a      	bne.n	3db48 <configure_pins+0x9a>
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
   3daf2:	78e0      	ldrb	r0, [r4, #3]
   3daf4:	28ff      	cmp	r0, #255	; 0xff
   3daf6:	d12f      	bne.n	3db58 <configure_pins+0xaa>
        if (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   3daf8:	7be0      	ldrb	r0, [r4, #15]
   3dafa:	28ff      	cmp	r0, #255	; 0xff
   3dafc:	d13a      	bne.n	3db74 <configure_pins+0xc6>
    if (!p_config->skip_psel_cfg)
   3dafe:	7d23      	ldrb	r3, [r4, #20]
   3db00:	b99b      	cbnz	r3, 3db2a <configure_pins+0x7c>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
   3db02:	7863      	ldrb	r3, [r4, #1]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   3db04:	2bff      	cmp	r3, #255	; 0xff
   3db06:	d040      	beq.n	3db8a <configure_pins+0xdc>
   3db08:	461a      	mov	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
   3db0a:	78a3      	ldrb	r3, [r4, #2]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   3db0c:	2bff      	cmp	r3, #255	; 0xff
   3db0e:	d03f      	beq.n	3db90 <configure_pins+0xe2>
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
   3db10:	7821      	ldrb	r1, [r4, #0]
    p_reg->PSEL.SCK  = sck_pin;
   3db12:	f8c6 1508 	str.w	r1, [r6, #1288]	; 0x508
    p_reg->PSEL.MOSI = mosi_pin;
   3db16:	f8c6 250c 	str.w	r2, [r6, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   3db1a:	f8c6 3510 	str.w	r3, [r6, #1296]	; 0x510
        if (SPIM_HW_CSN_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   3db1e:	792b      	ldrb	r3, [r5, #4]
   3db20:	2b02      	cmp	r3, #2
   3db22:	d038      	beq.n	3db96 <configure_pins+0xe8>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
   3db24:	792b      	ldrb	r3, [r5, #4]
   3db26:	2b02      	cmp	r3, #2
   3db28:	d04d      	beq.n	3dbc6 <configure_pins+0x118>
}
   3db2a:	b003      	add	sp, #12
   3db2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    : NRF_GPIO_PIN_S0S1;
   3db2e:	2703      	movs	r7, #3
   3db30:	e7c9      	b.n	3dac6 <configure_pins+0x18>
        nrf_gpio_pin_clear(pin_number);
   3db32:	f7ff ff5b 	bl	3d9ec <nrf_gpio_pin_clear>
            nrf_gpio_cfg(p_config->mosi_pin,
   3db36:	2300      	movs	r3, #0
   3db38:	9301      	str	r3, [sp, #4]
   3db3a:	9700      	str	r7, [sp, #0]
   3db3c:	2201      	movs	r2, #1
   3db3e:	4611      	mov	r1, r2
   3db40:	7860      	ldrb	r0, [r4, #1]
   3db42:	f7ff ff93 	bl	3da6c <nrf_gpio_cfg>
   3db46:	e7d1      	b.n	3daec <configure_pins+0x3e>
            nrf_gpio_cfg(p_config->miso_pin,
   3db48:	2100      	movs	r1, #0
   3db4a:	9101      	str	r1, [sp, #4]
   3db4c:	9700      	str	r7, [sp, #0]
   3db4e:	7ba3      	ldrb	r3, [r4, #14]
   3db50:	460a      	mov	r2, r1
   3db52:	f7ff ff8b 	bl	3da6c <nrf_gpio_cfg>
   3db56:	e7cc      	b.n	3daf2 <configure_pins+0x44>
                               p_config->ss_active_high ? 0 : 1);
   3db58:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
   3db5a:	f081 0101 	eor.w	r1, r1, #1
   3db5e:	f7ff ff5f 	bl	3da20 <nrf_gpio_pin_write>
            nrf_gpio_cfg(p_config->ss_pin,
   3db62:	2300      	movs	r3, #0
   3db64:	9301      	str	r3, [sp, #4]
   3db66:	9700      	str	r7, [sp, #0]
   3db68:	2201      	movs	r2, #1
   3db6a:	4611      	mov	r1, r2
   3db6c:	78e0      	ldrb	r0, [r4, #3]
   3db6e:	f7ff ff7d 	bl	3da6c <nrf_gpio_cfg>
   3db72:	e7c1      	b.n	3daf8 <configure_pins+0x4a>
        nrf_gpio_pin_set(pin_number);
   3db74:	f7ff ff47 	bl	3da06 <nrf_gpio_pin_set>
            nrf_gpio_cfg(p_config->dcx_pin,
   3db78:	2300      	movs	r3, #0
   3db7a:	9301      	str	r3, [sp, #4]
   3db7c:	9700      	str	r7, [sp, #0]
   3db7e:	2201      	movs	r2, #1
   3db80:	4611      	mov	r1, r2
   3db82:	7be0      	ldrb	r0, [r4, #15]
   3db84:	f7ff ff72 	bl	3da6c <nrf_gpio_cfg>
   3db88:	e7b9      	b.n	3dafe <configure_pins+0x50>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   3db8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3db8e:	e7bc      	b.n	3db0a <configure_pins+0x5c>
                            : NRF_SPIM_PIN_NOT_CONNECTED;
   3db90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3db94:	e7bc      	b.n	3db10 <configure_pins+0x62>
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   3db96:	78e3      	ldrb	r3, [r4, #3]
   3db98:	2bff      	cmp	r3, #255	; 0xff
   3db9a:	d00a      	beq.n	3dbb2 <configure_pins+0x104>
                p_config->use_hw_ss)
   3db9c:	7c62      	ldrb	r2, [r4, #17]
            if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED &&
   3db9e:	b142      	cbz	r2, 3dbb2 <configure_pins+0x104>
                                    (p_config->ss_active_high == true
   3dba0:	7921      	ldrb	r1, [r4, #4]
                                    p_config->ss_duration);
   3dba2:	7ca2      	ldrb	r2, [r4, #18]
    p_reg->PSEL.CSN = pin;
   3dba4:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   3dba8:	f8c6 1568 	str.w	r1, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   3dbac:	f8c6 2564 	str.w	r2, [r6, #1380]	; 0x564
}
   3dbb0:	e7b8      	b.n	3db24 <configure_pins+0x76>
    p_reg->PSEL.CSN = pin;
   3dbb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dbb6:	f8c6 3514 	str.w	r3, [r6, #1300]	; 0x514
    p_reg->CSNPOL = polarity;
   3dbba:	2300      	movs	r3, #0
   3dbbc:	f8c6 3568 	str.w	r3, [r6, #1384]	; 0x568
    p_reg->IFTIMING.CSNDUR = duration;
   3dbc0:	f8c6 3564 	str.w	r3, [r6, #1380]	; 0x564
}
   3dbc4:	e7ae      	b.n	3db24 <configure_pins+0x76>
            uint32_t dcx_pin = (p_config->dcx_pin != NRFX_SPIM_PIN_NOT_USED)
   3dbc6:	7be3      	ldrb	r3, [r4, #15]
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   3dbc8:	2bff      	cmp	r3, #255	; 0xff
   3dbca:	d002      	beq.n	3dbd2 <configure_pins+0x124>
    p_reg->PSELDCX = dcx_pin;
   3dbcc:	f8c6 356c 	str.w	r3, [r6, #1388]	; 0x56c
}
   3dbd0:	e7ab      	b.n	3db2a <configure_pins+0x7c>
                               : NRF_SPIM_PIN_NOT_CONNECTED;
   3dbd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dbd6:	e7f9      	b.n	3dbcc <configure_pins+0x11e>

0003dbd8 <nrf_gpio_cfg_default>:
{
   3dbd8:	b500      	push	{lr}
   3dbda:	b083      	sub	sp, #12
    nrf_gpio_cfg(
   3dbdc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3dbde:	a801      	add	r0, sp, #4
   3dbe0:	f7f1 fdf6 	bl	2f7d0 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
   3dbe4:	9a01      	ldr	r2, [sp, #4]
   3dbe6:	3280      	adds	r2, #128	; 0x80
   3dbe8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   3dbec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   3dbf0:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   3dbf4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
   3dbf8:	b003      	add	sp, #12
   3dbfa:	f85d fb04 	ldr.w	pc, [sp], #4

0003dbfe <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
   3dbfe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3dc02:	d003      	beq.n	3dc0c <spim_pin_uninit+0xe>
{
   3dc04:	b508      	push	{r3, lr}
    nrf_gpio_cfg_default(pin);
   3dc06:	f7ff ffe7 	bl	3dbd8 <nrf_gpio_cfg_default>
}
   3dc0a:	bd08      	pop	{r3, pc}
   3dc0c:	4770      	bx	lr

0003dc0e <spim_abort>:
{
   3dc0e:	b570      	push	{r4, r5, r6, lr}
   3dc10:	4605      	mov	r5, r0
   3dc12:	460e      	mov	r6, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3dc14:	2301      	movs	r3, #1
   3dc16:	6143      	str	r3, [r0, #20]
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
   3dc18:	2464      	movs	r4, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3dc1a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   3dc1e:	b923      	cbnz	r3, 3dc2a <spim_abort+0x1c>
   3dc20:	2001      	movs	r0, #1
   3dc22:	f7ff fc0a 	bl	3d43a <nrfx_busy_wait>
   3dc26:	3c01      	subs	r4, #1
   3dc28:	d1f7      	bne.n	3dc1a <spim_abort+0xc>
    p_cb->transfer_in_progress = false;
   3dc2a:	2300      	movs	r3, #0
   3dc2c:	7773      	strb	r3, [r6, #29]
}
   3dc2e:	bd70      	pop	{r4, r5, r6, pc}

0003dc30 <metal_device_open>:
	if (!bus_name || !strlen(bus_name) ||
   3dc30:	b300      	cbz	r0, 3dc74 <metal_device_open+0x44>
{
   3dc32:	b570      	push	{r4, r5, r6, lr}
   3dc34:	b082      	sub	sp, #8
   3dc36:	460c      	mov	r4, r1
   3dc38:	4615      	mov	r5, r2
   3dc3a:	4606      	mov	r6, r0
	if (!bus_name || !strlen(bus_name) ||
   3dc3c:	f7fa fb87 	bl	3834e <strlen>
   3dc40:	b190      	cbz	r0, 3dc68 <metal_device_open+0x38>
   3dc42:	b18c      	cbz	r4, 3dc68 <metal_device_open+0x38>
	    !dev_name || !strlen(dev_name) ||
   3dc44:	4620      	mov	r0, r4
   3dc46:	f7fa fb82 	bl	3834e <strlen>
   3dc4a:	b168      	cbz	r0, 3dc68 <metal_device_open+0x38>
   3dc4c:	b165      	cbz	r5, 3dc68 <metal_device_open+0x38>
	error = metal_bus_find(bus_name, &bus);
   3dc4e:	a901      	add	r1, sp, #4
   3dc50:	4630      	mov	r0, r6
   3dc52:	f7f2 f89d 	bl	2fd90 <metal_bus_find>
	if (error)
   3dc56:	b928      	cbnz	r0, 3dc64 <metal_device_open+0x34>
	if (!bus->ops.dev_open)
   3dc58:	9801      	ldr	r0, [sp, #4]
   3dc5a:	6883      	ldr	r3, [r0, #8]
   3dc5c:	b13b      	cbz	r3, 3dc6e <metal_device_open+0x3e>
	error = (*bus->ops.dev_open)(bus, dev_name, device);
   3dc5e:	462a      	mov	r2, r5
   3dc60:	4621      	mov	r1, r4
   3dc62:	4798      	blx	r3
}
   3dc64:	b002      	add	sp, #8
   3dc66:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3dc68:	f06f 0015 	mvn.w	r0, #21
   3dc6c:	e7fa      	b.n	3dc64 <metal_device_open+0x34>
		return -ENODEV;
   3dc6e:	f06f 0012 	mvn.w	r0, #18
   3dc72:	e7f7      	b.n	3dc64 <metal_device_open+0x34>
		return -EINVAL;
   3dc74:	f06f 0015 	mvn.w	r0, #21
}
   3dc78:	4770      	bx	lr

0003dc7a <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned int page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
   3dc7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3dc7e:	b088      	sub	sp, #32
   3dc80:	4604      	mov	r4, r0
   3dc82:	4688      	mov	r8, r1
   3dc84:	4617      	mov	r7, r2
   3dc86:	461e      	mov	r6, r3
   3dc88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	const struct metal_io_ops nops = {
   3dc8a:	2220      	movs	r2, #32
   3dc8c:	2100      	movs	r1, #0
   3dc8e:	4668      	mov	r0, sp
   3dc90:	f7fa fbe2 	bl	38458 <memset>
		NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
	};

	io->virt = virt;
   3dc94:	f8c4 8000 	str.w	r8, [r4]
	io->physmap = physmap;
   3dc98:	6067      	str	r7, [r4, #4]
	io->size = size;
   3dc9a:	60a6      	str	r6, [r4, #8]
	io->page_shift = page_shift;
   3dc9c:	60e5      	str	r5, [r4, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
   3dc9e:	2d1f      	cmp	r5, #31
   3dca0:	d912      	bls.n	3dcc8 <metal_io_init+0x4e>
		/* avoid overflow */
		io->page_mask = -1UL;
   3dca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3dca6:	6123      	str	r3, [r4, #16]
	else
		io->page_mask = (1UL << page_shift) - 1UL;
	io->mem_flags = mem_flags;
   3dca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   3dcaa:	6163      	str	r3, [r4, #20]
	io->ops = ops ? *ops : nops;
   3dcac:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3dcae:	b183      	cbz	r3, 3dcd2 <metal_io_init+0x58>
   3dcb0:	3418      	adds	r4, #24
   3dcb2:	469c      	mov	ip, r3
   3dcb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   3dcb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3dcba:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   3dcbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	metal_sys_io_mem_map(io);
}
   3dcc2:	b008      	add	sp, #32
   3dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		io->page_mask = (1UL << page_shift) - 1UL;
   3dcc8:	2301      	movs	r3, #1
   3dcca:	40ab      	lsls	r3, r5
   3dccc:	3b01      	subs	r3, #1
   3dcce:	6123      	str	r3, [r4, #16]
   3dcd0:	e7ea      	b.n	3dca8 <metal_io_init+0x2e>
	io->ops = ops ? *ops : nops;
   3dcd2:	3418      	adds	r4, #24
   3dcd4:	466d      	mov	r5, sp
   3dcd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   3dcd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   3dcda:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   3dcde:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   3dce2:	e7ee      	b.n	3dcc2 <metal_io_init+0x48>

0003dce4 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
   3dce4:	b530      	push	{r4, r5, lr}
   3dce6:	b083      	sub	sp, #12
	return (io->virt != METAL_BAD_VA && offset < io->size
   3dce8:	6804      	ldr	r4, [r0, #0]
		: NULL);
   3dcea:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   3dcee:	d032      	beq.n	3dd56 <metal_io_block_read+0x72>
	return (io->virt != METAL_BAD_VA && offset < io->size
   3dcf0:	6885      	ldr	r5, [r0, #8]
   3dcf2:	42a9      	cmp	r1, r5
   3dcf4:	d232      	bcs.n	3dd5c <metal_io_block_read+0x78>
	unsigned char *ptr = metal_io_virt(io, offset);
	unsigned char *dest = dst;
	int retlen;

	if (!ptr)
   3dcf6:	eb11 0c04 	adds.w	ip, r1, r4
   3dcfa:	d032      	beq.n	3dd62 <metal_io_block_read+0x7e>
		return -ERANGE;
	if ((offset + len) > io->size)
   3dcfc:	185c      	adds	r4, r3, r1
   3dcfe:	42ac      	cmp	r4, r5
   3dd00:	d900      	bls.n	3dd04 <metal_io_block_read+0x20>
		len = io->size - offset;
   3dd02:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_read) {
   3dd04:	6a04      	ldr	r4, [r0, #32]
   3dd06:	b124      	cbz	r4, 3dd12 <metal_io_block_read+0x2e>
		retlen = (*io->ops.block_read)(
   3dd08:	9300      	str	r3, [sp, #0]
   3dd0a:	2305      	movs	r3, #5
   3dd0c:	47a0      	blx	r4
		for (; len != 0; dest++, ptr++, len--)
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
	}
	return retlen;
}
   3dd0e:	b003      	add	sp, #12
   3dd10:	bd30      	pop	{r4, r5, pc}
		atomic_thread_fence(memory_order_seq_cst);
   3dd12:	f3bf 8f5b 	dmb	ish
		while ( len && (
   3dd16:	4619      	mov	r1, r3
   3dd18:	e004      	b.n	3dd24 <metal_io_block_read+0x40>
				*(const unsigned char *)ptr;
   3dd1a:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   3dd1e:	f802 0b01 	strb.w	r0, [r2], #1
			len--;
   3dd22:	3901      	subs	r1, #1
		while ( len && (
   3dd24:	b159      	cbz	r1, 3dd3e <metal_io_block_read+0x5a>
   3dd26:	f012 0f03 	tst.w	r2, #3
   3dd2a:	d1f6      	bne.n	3dd1a <metal_io_block_read+0x36>
			((uintptr_t)dest % sizeof(int)) ||
   3dd2c:	f01c 0f03 	tst.w	ip, #3
   3dd30:	d1f3      	bne.n	3dd1a <metal_io_block_read+0x36>
   3dd32:	e004      	b.n	3dd3e <metal_io_block_read+0x5a>
			*(unsigned int *)dest = *(const unsigned int *)ptr;
   3dd34:	f85c 0b04 	ldr.w	r0, [ip], #4
   3dd38:	f842 0b04 	str.w	r0, [r2], #4
					len -= sizeof(int))
   3dd3c:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); dest += sizeof(int),
   3dd3e:	2903      	cmp	r1, #3
   3dd40:	dcf8      	bgt.n	3dd34 <metal_io_block_read+0x50>
   3dd42:	e004      	b.n	3dd4e <metal_io_block_read+0x6a>
				*(const unsigned char *)ptr;
   3dd44:	f81c 0b01 	ldrb.w	r0, [ip], #1
			*(unsigned char *)dest =
   3dd48:	f802 0b01 	strb.w	r0, [r2], #1
		for (; len != 0; dest++, ptr++, len--)
   3dd4c:	3901      	subs	r1, #1
   3dd4e:	2900      	cmp	r1, #0
   3dd50:	d1f8      	bne.n	3dd44 <metal_io_block_read+0x60>
	retlen = len;
   3dd52:	4618      	mov	r0, r3
   3dd54:	e7db      	b.n	3dd0e <metal_io_block_read+0x2a>
		return -ERANGE;
   3dd56:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3dd5a:	e7d8      	b.n	3dd0e <metal_io_block_read+0x2a>
   3dd5c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3dd60:	e7d5      	b.n	3dd0e <metal_io_block_read+0x2a>
   3dd62:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3dd66:	e7d2      	b.n	3dd0e <metal_io_block_read+0x2a>

0003dd68 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
   3dd68:	b530      	push	{r4, r5, lr}
   3dd6a:	b083      	sub	sp, #12
   3dd6c:	6804      	ldr	r4, [r0, #0]
		: NULL);
   3dd6e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   3dd72:	d031      	beq.n	3ddd8 <metal_io_block_write+0x70>
	return (io->virt != METAL_BAD_VA && offset < io->size
   3dd74:	6885      	ldr	r5, [r0, #8]
   3dd76:	42a9      	cmp	r1, r5
   3dd78:	d231      	bcs.n	3ddde <metal_io_block_write+0x76>
	unsigned char *ptr = metal_io_virt(io, offset);
	const unsigned char *source = src;
	int retlen;

	if (!ptr)
   3dd7a:	eb11 0c04 	adds.w	ip, r1, r4
   3dd7e:	d031      	beq.n	3dde4 <metal_io_block_write+0x7c>
		return -ERANGE;
	if ((offset + len) > io->size)
   3dd80:	185c      	adds	r4, r3, r1
   3dd82:	42ac      	cmp	r4, r5
   3dd84:	d900      	bls.n	3dd88 <metal_io_block_write+0x20>
		len = io->size - offset;
   3dd86:	1a6b      	subs	r3, r5, r1
	retlen = len;
	if (io->ops.block_write) {
   3dd88:	6a44      	ldr	r4, [r0, #36]	; 0x24
   3dd8a:	b18c      	cbz	r4, 3ddb0 <metal_io_block_write+0x48>
		retlen = (*io->ops.block_write)(
   3dd8c:	9300      	str	r3, [sp, #0]
   3dd8e:	2305      	movs	r3, #5
   3dd90:	47a0      	blx	r4
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
}
   3dd92:	b003      	add	sp, #12
   3dd94:	bd30      	pop	{r4, r5, pc}
				*(const unsigned char *)source;
   3dd96:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   3dd9a:	f80c 0b01 	strb.w	r0, [ip], #1
			len--;
   3dd9e:	3901      	subs	r1, #1
		while ( len && (
   3dda0:	b169      	cbz	r1, 3ddbe <metal_io_block_write+0x56>
   3dda2:	f01c 0f03 	tst.w	ip, #3
   3dda6:	d1f6      	bne.n	3dd96 <metal_io_block_write+0x2e>
			((uintptr_t)ptr % sizeof(int)) ||
   3dda8:	f012 0f03 	tst.w	r2, #3
   3ddac:	d1f3      	bne.n	3dd96 <metal_io_block_write+0x2e>
   3ddae:	e006      	b.n	3ddbe <metal_io_block_write+0x56>
   3ddb0:	4619      	mov	r1, r3
   3ddb2:	e7f5      	b.n	3dda0 <metal_io_block_write+0x38>
			*(unsigned int *)ptr = *(const unsigned int *)source;
   3ddb4:	f852 0b04 	ldr.w	r0, [r2], #4
   3ddb8:	f84c 0b04 	str.w	r0, [ip], #4
					len -= sizeof(int))
   3ddbc:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   3ddbe:	2903      	cmp	r1, #3
   3ddc0:	dcf8      	bgt.n	3ddb4 <metal_io_block_write+0x4c>
		for (; len != 0; ptr++, source++, len--)
   3ddc2:	b129      	cbz	r1, 3ddd0 <metal_io_block_write+0x68>
				*(const unsigned char *)source;
   3ddc4:	f812 0b01 	ldrb.w	r0, [r2], #1
			*(unsigned char *)ptr =
   3ddc8:	f80c 0b01 	strb.w	r0, [ip], #1
		for (; len != 0; ptr++, source++, len--)
   3ddcc:	3901      	subs	r1, #1
   3ddce:	e7f8      	b.n	3ddc2 <metal_io_block_write+0x5a>
		atomic_thread_fence(memory_order_seq_cst);
   3ddd0:	f3bf 8f5b 	dmb	ish
	retlen = len;
   3ddd4:	4618      	mov	r0, r3
   3ddd6:	e7dc      	b.n	3dd92 <metal_io_block_write+0x2a>
		return -ERANGE;
   3ddd8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3dddc:	e7d9      	b.n	3dd92 <metal_io_block_write+0x2a>
   3ddde:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3dde2:	e7d6      	b.n	3dd92 <metal_io_block_write+0x2a>
   3dde4:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3dde8:	e7d3      	b.n	3dd92 <metal_io_block_write+0x2a>

0003ddea <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
   3ddea:	b530      	push	{r4, r5, lr}
   3ddec:	b083      	sub	sp, #12
   3ddee:	6804      	ldr	r4, [r0, #0]
		: NULL);
   3ddf0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   3ddf4:	d034      	beq.n	3de60 <metal_io_block_set+0x76>
   3ddf6:	461d      	mov	r5, r3
	return (io->virt != METAL_BAD_VA && offset < io->size
   3ddf8:	6883      	ldr	r3, [r0, #8]
   3ddfa:	4299      	cmp	r1, r3
   3ddfc:	d233      	bcs.n	3de66 <metal_io_block_set+0x7c>
	unsigned char *ptr = metal_io_virt(io, offset);
	int retlen = len;

	if (!ptr)
   3ddfe:	eb11 0c04 	adds.w	ip, r1, r4
   3de02:	d033      	beq.n	3de6c <metal_io_block_set+0x82>
		return -ERANGE;
	if ((offset + len) > io->size)
   3de04:	186c      	adds	r4, r5, r1
   3de06:	429c      	cmp	r4, r3
   3de08:	d900      	bls.n	3de0c <metal_io_block_set+0x22>
		len = io->size - offset;
   3de0a:	1a5d      	subs	r5, r3, r1
	retlen = len;
	if (io->ops.block_set) {
   3de0c:	6a84      	ldr	r4, [r0, #40]	; 0x28
   3de0e:	b12c      	cbz	r4, 3de1c <metal_io_block_set+0x32>
		(*io->ops.block_set)(
   3de10:	9500      	str	r5, [sp, #0]
   3de12:	2305      	movs	r3, #5
   3de14:	47a0      	blx	r4
			*(unsigned int *)ptr = cint;
		for (; len != 0; ptr++, len--)
			*(unsigned char *)ptr = (unsigned char) value;
		atomic_thread_fence(memory_order_seq_cst);
	}
	return retlen;
   3de16:	4628      	mov	r0, r5
}
   3de18:	b003      	add	sp, #12
   3de1a:	bd30      	pop	{r4, r5, pc}
		unsigned int cint = value;
   3de1c:	4613      	mov	r3, r2
		for (i = 1; i < sizeof(int); i++)
   3de1e:	2101      	movs	r1, #1
   3de20:	e004      	b.n	3de2c <metal_io_block_set+0x42>
			cint |= ((unsigned int)value << (CHAR_BIT * i));
   3de22:	00c8      	lsls	r0, r1, #3
   3de24:	fa02 f000 	lsl.w	r0, r2, r0
   3de28:	4303      	orrs	r3, r0
		for (i = 1; i < sizeof(int); i++)
   3de2a:	3101      	adds	r1, #1
   3de2c:	2903      	cmp	r1, #3
   3de2e:	d9f8      	bls.n	3de22 <metal_io_block_set+0x38>
   3de30:	4629      	mov	r1, r5
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   3de32:	b149      	cbz	r1, 3de48 <metal_io_block_set+0x5e>
   3de34:	f01c 0f03 	tst.w	ip, #3
   3de38:	d006      	beq.n	3de48 <metal_io_block_set+0x5e>
			*(unsigned char *)ptr = (unsigned char) value;
   3de3a:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
   3de3e:	3901      	subs	r1, #1
   3de40:	e7f7      	b.n	3de32 <metal_io_block_set+0x48>
			*(unsigned int *)ptr = cint;
   3de42:	f84c 3b04 	str.w	r3, [ip], #4
						len -= sizeof(int))
   3de46:	3904      	subs	r1, #4
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
   3de48:	2903      	cmp	r1, #3
   3de4a:	dcfa      	bgt.n	3de42 <metal_io_block_set+0x58>
   3de4c:	e002      	b.n	3de54 <metal_io_block_set+0x6a>
			*(unsigned char *)ptr = (unsigned char) value;
   3de4e:	f80c 2b01 	strb.w	r2, [ip], #1
		for (; len != 0; ptr++, len--)
   3de52:	3901      	subs	r1, #1
   3de54:	2900      	cmp	r1, #0
   3de56:	d1fa      	bne.n	3de4e <metal_io_block_set+0x64>
		atomic_thread_fence(memory_order_seq_cst);
   3de58:	f3bf 8f5b 	dmb	ish
	return retlen;
   3de5c:	4628      	mov	r0, r5
   3de5e:	e7db      	b.n	3de18 <metal_io_block_set+0x2e>
		return -ERANGE;
   3de60:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3de64:	e7d8      	b.n	3de18 <metal_io_block_set+0x2e>
   3de66:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3de6a:	e7d5      	b.n	3de18 <metal_io_block_set+0x2e>
   3de6c:	f06f 0021 	mvn.w	r0, #33	; 0x21
   3de70:	e7d2      	b.n	3de18 <metal_io_block_set+0x2e>

0003de72 <metal_generic_dev_sys_open>:

	/* Since Zephyr runs bare-metal there is no mapping that needs to be
	 * done of IO regions
	 */
	return 0;
}
   3de72:	2000      	movs	r0, #0
   3de74:	4770      	bx	lr

0003de76 <vring_size>:
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
   3de76:	1cc3      	adds	r3, r0, #3
   3de78:	005b      	lsls	r3, r3, #1
   3de7a:	eb03 1300 	add.w	r3, r3, r0, lsl #4
	size = (size + align - 1) & ~(align - 1);
   3de7e:	440b      	add	r3, r1
   3de80:	3b01      	subs	r3, #1
   3de82:	4249      	negs	r1, r1
   3de84:	400b      	ands	r3, r1
	size += sizeof(struct vring_used) +
   3de86:	eb03 00c0 	add.w	r0, r3, r0, lsl #3

	return size;
}
   3de8a:	3006      	adds	r0, #6
   3de8c:	4770      	bx	lr

0003de8e <metal_io_phys>:
 * @return	METAL_BAD_PHYS if offset is out of range, or physical address
 *		of offset.
 */
static inline metal_phys_addr_t
metal_io_phys(struct metal_io_region *io, unsigned long offset)
{
   3de8e:	b508      	push	{r3, lr}
	if (!io->ops.offset_to_phys) {
   3de90:	6b03      	ldr	r3, [r0, #48]	; 0x30
   3de92:	b10b      	cbz	r3, 3de98 <metal_io_phys+0xa>
		return (io->physmap && offset < io->size
			? io->physmap[page] + (offset & io->page_mask)
			: METAL_BAD_PHYS);
	}

	return io->ops.offset_to_phys(io, offset);
   3de94:	4798      	blx	r3
}
   3de96:	bd08      	pop	{r3, pc}
		unsigned long page = (io->page_shift >=
   3de98:	68c3      	ldr	r3, [r0, #12]
				     0 : offset >> io->page_shift);
   3de9a:	2b1f      	cmp	r3, #31
   3de9c:	d80d      	bhi.n	3deba <metal_io_phys+0x2c>
   3de9e:	fa21 f303 	lsr.w	r3, r1, r3
		return (io->physmap && offset < io->size
   3dea2:	6842      	ldr	r2, [r0, #4]
			: METAL_BAD_PHYS);
   3dea4:	b15a      	cbz	r2, 3debe <metal_io_phys+0x30>
		return (io->physmap && offset < io->size
   3dea6:	f8d0 c008 	ldr.w	ip, [r0, #8]
   3deaa:	458c      	cmp	ip, r1
   3deac:	d90a      	bls.n	3dec4 <metal_io_phys+0x36>
			? io->physmap[page] + (offset & io->page_mask)
   3deae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   3deb2:	6902      	ldr	r2, [r0, #16]
   3deb4:	400a      	ands	r2, r1
			: METAL_BAD_PHYS);
   3deb6:	1898      	adds	r0, r3, r2
   3deb8:	e7ed      	b.n	3de96 <metal_io_phys+0x8>
				     0 : offset >> io->page_shift);
   3deba:	2300      	movs	r3, #0
   3debc:	e7f1      	b.n	3dea2 <metal_io_phys+0x14>
			: METAL_BAD_PHYS);
   3debe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dec2:	e7e8      	b.n	3de96 <metal_io_phys+0x8>
   3dec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3dec8:	e7e5      	b.n	3de96 <metal_io_phys+0x8>

0003deca <metal_io_phys_to_offset>:
 * @param[in]	phys	Physical address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_phys_to_offset(struct metal_io_region *io, metal_phys_addr_t phys)
{
   3deca:	b570      	push	{r4, r5, r6, lr}
   3decc:	4605      	mov	r5, r0
   3dece:	460e      	mov	r6, r1
	if (!io->ops.phys_to_offset) {
   3ded0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   3ded2:	b11b      	cbz	r3, 3dedc <metal_io_phys_to_offset+0x12>
			offset += io->page_mask + 1;
		} while (offset < io->size);
		return METAL_BAD_OFFSET;
	}

	return (*io->ops.phys_to_offset)(io, phys);
   3ded4:	4798      	blx	r3
   3ded6:	4604      	mov	r4, r0
}
   3ded8:	4620      	mov	r0, r4
   3deda:	bd70      	pop	{r4, r5, r6, pc}
			(io->page_mask == (metal_phys_addr_t)(-1) ?
   3dedc:	6904      	ldr	r4, [r0, #16]
			phys - io->physmap[0] :  phys & io->page_mask);
   3dede:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   3dee2:	d00f      	beq.n	3df04 <metal_io_phys_to_offset+0x3a>
   3dee4:	400c      	ands	r4, r1
			if (metal_io_phys(io, offset) == phys)
   3dee6:	4621      	mov	r1, r4
   3dee8:	4628      	mov	r0, r5
   3deea:	f7ff ffd0 	bl	3de8e <metal_io_phys>
   3deee:	42b0      	cmp	r0, r6
   3def0:	d0f2      	beq.n	3ded8 <metal_io_phys_to_offset+0xe>
			offset += io->page_mask + 1;
   3def2:	692b      	ldr	r3, [r5, #16]
   3def4:	441c      	add	r4, r3
   3def6:	3401      	adds	r4, #1
		} while (offset < io->size);
   3def8:	68ab      	ldr	r3, [r5, #8]
   3defa:	42a3      	cmp	r3, r4
   3defc:	d8f3      	bhi.n	3dee6 <metal_io_phys_to_offset+0x1c>
		return METAL_BAD_OFFSET;
   3defe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3df02:	e7e9      	b.n	3ded8 <metal_io_phys_to_offset+0xe>
			phys - io->physmap[0] :  phys & io->page_mask);
   3df04:	6843      	ldr	r3, [r0, #4]
   3df06:	681c      	ldr	r4, [r3, #0]
   3df08:	1b0c      	subs	r4, r1, r4
   3df0a:	e7ec      	b.n	3dee6 <metal_io_phys_to_offset+0x1c>

0003df0c <metal_io_phys_to_virt>:
 * @param[in]	phys	Physical address within segment.
 * @return	NULL if out of range, or corresponding virtual address.
 */
static inline void *
metal_io_phys_to_virt(struct metal_io_region *io, metal_phys_addr_t phys)
{
   3df0c:	b510      	push	{r4, lr}
   3df0e:	4604      	mov	r4, r0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   3df10:	f7ff ffdb 	bl	3deca <metal_io_phys_to_offset>
	return (io->virt != METAL_BAD_VA && offset < io->size
   3df14:	6823      	ldr	r3, [r4, #0]
		: NULL);
   3df16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3df1a:	d004      	beq.n	3df26 <metal_io_phys_to_virt+0x1a>
	return (io->virt != METAL_BAD_VA && offset < io->size
   3df1c:	68a2      	ldr	r2, [r4, #8]
   3df1e:	4290      	cmp	r0, r2
   3df20:	d203      	bcs.n	3df2a <metal_io_phys_to_virt+0x1e>
		? (void *)((uintptr_t)io->virt + offset)
   3df22:	4418      	add	r0, r3
}
   3df24:	bd10      	pop	{r4, pc}
		: NULL);
   3df26:	2000      	movs	r0, #0
   3df28:	e7fc      	b.n	3df24 <metal_io_phys_to_virt+0x18>
   3df2a:	2000      	movs	r0, #0
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
   3df2c:	e7fa      	b.n	3df24 <metal_io_phys_to_virt+0x18>

0003df2e <metal_io_virt_to_phys>:
 * @return	METAL_BAD_PHYS if out of range, or corresponding
 *		physical address.
 */
static inline metal_phys_addr_t
metal_io_virt_to_phys(struct metal_io_region *io, void *virt)
{
   3df2e:	b508      	push	{r3, lr}
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   3df30:	6803      	ldr	r3, [r0, #0]
   3df32:	1ac9      	subs	r1, r1, r3
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   3df34:	6883      	ldr	r3, [r0, #8]
   3df36:	4299      	cmp	r1, r3
   3df38:	d202      	bcs.n	3df40 <metal_io_virt_to_phys+0x12>
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
   3df3a:	f7ff ffa8 	bl	3de8e <metal_io_phys>
}
   3df3e:	bd08      	pop	{r3, pc}
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   3df40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3df44:	e7f9      	b.n	3df3a <metal_io_virt_to_phys+0xc>

0003df46 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
   3df46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3df4a:	4683      	mov	fp, r0
   3df4c:	4689      	mov	r9, r1
   3df4e:	4610      	mov	r0, r2
   3df50:	4698      	mov	r8, r3
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
   3df52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   3df54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3df56:	441f      	add	r7, r3

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
   3df58:	2500      	movs	r5, #0
   3df5a:	e001      	b.n	3df60 <vq_ring_add_buffer+0x1a>
   3df5c:	3501      	adds	r5, #1
   3df5e:	89e0      	ldrh	r0, [r4, #14]
   3df60:	42bd      	cmp	r5, r7
   3df62:	da22      	bge.n	3dfaa <vq_ring_add_buffer+0x64>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		/* CACHE: No need to invalidate desc because it is only written by driver */
		dp = &desc[idx];
   3df64:	ea4f 1a00 	mov.w	sl, r0, lsl #4
   3df68:	eb09 1400 	add.w	r4, r9, r0, lsl #4
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   3df6c:	eb08 06c5 	add.w	r6, r8, r5, lsl #3
	return metal_io_virt_to_phys(io, buf);
   3df70:	f858 1035 	ldr.w	r1, [r8, r5, lsl #3]
   3df74:	f8db 0028 	ldr.w	r0, [fp, #40]	; 0x28
   3df78:	f7ff ffd9 	bl	3df2e <metal_io_virt_to_phys>
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
   3df7c:	2300      	movs	r3, #0
   3df7e:	f849 000a 	str.w	r0, [r9, sl]
   3df82:	6063      	str	r3, [r4, #4]
		dp->len = buf_list[i].len;
   3df84:	6872      	ldr	r2, [r6, #4]
   3df86:	60a2      	str	r2, [r4, #8]
		dp->flags = 0;
   3df88:	7323      	strb	r3, [r4, #12]
   3df8a:	7363      	strb	r3, [r4, #13]

		if (i < needed - 1)
   3df8c:	1e7b      	subs	r3, r7, #1
   3df8e:	42ab      	cmp	r3, r5
   3df90:	dd03      	ble.n	3df9a <vq_ring_add_buffer+0x54>
			dp->flags |= VRING_DESC_F_NEXT;
   3df92:	2301      	movs	r3, #1
   3df94:	7323      	strb	r3, [r4, #12]
   3df96:	2300      	movs	r3, #0
   3df98:	7363      	strb	r3, [r4, #13]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
   3df9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3df9c:	429d      	cmp	r5, r3
   3df9e:	dbdd      	blt.n	3df5c <vq_ring_add_buffer+0x16>
			dp->flags |= VRING_DESC_F_WRITE;
   3dfa0:	89a3      	ldrh	r3, [r4, #12]
   3dfa2:	f043 0302 	orr.w	r3, r3, #2
   3dfa6:	81a3      	strh	r3, [r4, #12]
   3dfa8:	e7d8      	b.n	3df5c <vq_ring_add_buffer+0x16>
		VRING_FLUSH(desc[idx]);

	}

	return idx;
}
   3dfaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0003dfae <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
   3dfae:	b510      	push	{r4, lr}
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	/* CACHE: desc is never written by remote, no need to invalidate */
	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
   3dfb0:	6984      	ldr	r4, [r0, #24]
   3dfb2:	eb04 1301 	add.w	r3, r4, r1, lsl #4
	dxp = &vq->vq_descx[desc_idx];

	if (vq->vq_free_cnt == 0) {
   3dfb6:	f8b0 e024 	ldrh.w	lr, [r0, #36]	; 0x24
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
   3dfba:	1d8a      	adds	r2, r1, #6
   3dfbc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   3dfc0:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   3dfc4:	44e6      	add	lr, ip
   3dfc6:	f8a0 e024 	strh.w	lr, [r0, #36]	; 0x24
	dxp->ndescs--;
   3dfca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   3dfce:	f8a2 c008 	strh.w	ip, [r2, #8]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
   3dfd2:	899a      	ldrh	r2, [r3, #12]
   3dfd4:	f012 0f04 	tst.w	r2, #4
   3dfd8:	d00f      	beq.n	3dffa <vq_ring_free_chain+0x4c>
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 *
	 * CACHE: desc.next is never read by remote, no need to flush it.
	 */
	dp->next = vq->vq_desc_head_idx;
   3dfda:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   3dfdc:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
   3dfde:	8581      	strh	r1, [r0, #44]	; 0x2c
}
   3dfe0:	bd10      	pop	{r4, pc}
			dp = &vq->vq_ring.desc[dp->next];
   3dfe2:	89db      	ldrh	r3, [r3, #14]
   3dfe4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
			dxp->ndescs--;
   3dfe8:	1d8a      	adds	r2, r1, #6
   3dfea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   3dfee:	f8b2 c008 	ldrh.w	ip, [r2, #8]
   3dff2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   3dff6:	f8a2 c008 	strh.w	ip, [r2, #8]
		while (dp->flags & VRING_DESC_F_NEXT) {
   3dffa:	899a      	ldrh	r2, [r3, #12]
   3dffc:	f012 0f01 	tst.w	r2, #1
   3e000:	d1ef      	bne.n	3dfe2 <vq_ring_free_chain+0x34>
   3e002:	e7ea      	b.n	3dfda <vq_ring_free_chain+0x2c>

0003e004 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
   3e004:	b410      	push	{r4}
	struct vring *vr;
	int size;

	size = vq->vq_nentries;
   3e006:	8944      	ldrh	r4, [r0, #10]

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
	vr->num = num;
   3e008:	6144      	str	r4, [r0, #20]
	vr->desc = (struct vring_desc *)p;
   3e00a:	6181      	str	r1, [r0, #24]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
   3e00c:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   3e010:	61c1      	str	r1, [r0, #28]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
   3e012:	eb01 0344 	add.w	r3, r1, r4, lsl #1
   3e016:	3304      	adds	r3, #4
   3e018:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
   3e01a:	3301      	adds	r3, #1
   3e01c:	4252      	negs	r2, r2
   3e01e:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
   3e020:	6203      	str	r3, [r0, #32]
	vr = &vq->vq_ring;

	vring_init(vr, size, ring_mem, alignment);

#ifndef VIRTIO_DEVICE_ONLY
	if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3e022:	6803      	ldr	r3, [r0, #0]
   3e024:	699b      	ldr	r3, [r3, #24]
   3e026:	b19b      	cbz	r3, 3e050 <vq_ring_init+0x4c>
		for (i = 0; i < size - 1; i++)
			vr->desc[i].next = i + 1;
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
	}
#endif /*VIRTIO_DEVICE_ONLY*/
}
   3e028:	bc10      	pop	{r4}
   3e02a:	4770      	bx	lr
			vr->desc[i].next = i + 1;
   3e02c:	6982      	ldr	r2, [r0, #24]
   3e02e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   3e032:	1c59      	adds	r1, r3, #1
   3e034:	81d1      	strh	r1, [r2, #14]
		for (i = 0; i < size - 1; i++)
   3e036:	460b      	mov	r3, r1
   3e038:	1e62      	subs	r2, r4, #1
   3e03a:	429a      	cmp	r2, r3
   3e03c:	dcf6      	bgt.n	3e02c <vq_ring_init+0x28>
		vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
   3e03e:	6982      	ldr	r2, [r0, #24]
   3e040:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   3e044:	2200      	movs	r2, #0
   3e046:	739a      	strb	r2, [r3, #14]
   3e048:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   3e04c:	73da      	strb	r2, [r3, #15]
}
   3e04e:	e7eb      	b.n	3e028 <vq_ring_init+0x24>
		for (i = 0; i < size - 1; i++)
   3e050:	2300      	movs	r3, #0
   3e052:	e7f1      	b.n	3e038 <vq_ring_init+0x34>

0003e054 <vq_ring_must_notify>:
 */
static int vq_ring_must_notify(struct virtqueue *vq)
{
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   3e054:	6803      	ldr	r3, [r0, #0]
   3e056:	691a      	ldr	r2, [r3, #16]
   3e058:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   3e05c:	d027      	beq.n	3e0ae <vq_ring_must_notify+0x5a>
#ifndef VIRTIO_DEVICE_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3e05e:	699b      	ldr	r3, [r3, #24]
   3e060:	b11b      	cbz	r3, 3e06a <vq_ring_must_notify+0x16>
			return vring_need_event(event_idx, new_idx,
						prev_idx) != 0;
		}
#endif /*VIRTIO_DEVICE_ONLY*/
#ifndef VIRTIO_DRIVER_ONLY
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3e062:	2b01      	cmp	r3, #1
   3e064:	d012      	beq.n	3e08c <vq_ring_must_notify+0x38>
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
		}
#endif /*VIRTIO_DRIVER_ONLY*/
	}

	return 0;
   3e066:	2000      	movs	r0, #0
   3e068:	4770      	bx	lr
			new_idx = vq->vq_ring.avail->idx;
   3e06a:	69c3      	ldr	r3, [r0, #28]
   3e06c:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   3e06e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_avail_event(&vq->vq_ring);
   3e070:	6a01      	ldr	r1, [r0, #32]
   3e072:	6940      	ldr	r0, [r0, #20]
   3e074:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   3e078:	8889      	ldrh	r1, [r1, #4]
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
	return (uint16_t)(new_idx - event_idx - 1) <
   3e07a:	1a52      	subs	r2, r2, r1
   3e07c:	b292      	uxth	r2, r2
   3e07e:	3a01      	subs	r2, #1
   3e080:	b292      	uxth	r2, r2
   3e082:	4293      	cmp	r3, r2
   3e084:	bf94      	ite	ls
   3e086:	2000      	movls	r0, #0
   3e088:	2001      	movhi	r0, #1
						prev_idx) != 0;
   3e08a:	4770      	bx	lr
			new_idx = vq->vq_ring.used->idx;
   3e08c:	6a03      	ldr	r3, [r0, #32]
   3e08e:	885a      	ldrh	r2, [r3, #2]
			prev_idx = new_idx - vq->vq_queued_cnt;
   3e090:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
			event_idx = vring_used_event(&vq->vq_ring);
   3e092:	69c1      	ldr	r1, [r0, #28]
   3e094:	6940      	ldr	r0, [r0, #20]
   3e096:	eb01 0140 	add.w	r1, r1, r0, lsl #1
   3e09a:	8889      	ldrh	r1, [r1, #4]
   3e09c:	1a52      	subs	r2, r2, r1
   3e09e:	b292      	uxth	r2, r2
   3e0a0:	3a01      	subs	r2, #1
   3e0a2:	b292      	uxth	r2, r2
   3e0a4:	4293      	cmp	r3, r2
   3e0a6:	bf94      	ite	ls
   3e0a8:	2000      	movls	r0, #0
   3e0aa:	2001      	movhi	r0, #1
						prev_idx) != 0;
   3e0ac:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3e0ae:	699b      	ldr	r3, [r3, #24]
   3e0b0:	b11b      	cbz	r3, 3e0ba <vq_ring_must_notify+0x66>
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3e0b2:	2b01      	cmp	r3, #1
   3e0b4:	d008      	beq.n	3e0c8 <vq_ring_must_notify+0x74>
	return 0;
   3e0b6:	2000      	movs	r0, #0
}
   3e0b8:	4770      	bx	lr
			return (vq->vq_ring.used->flags &
   3e0ba:	6a03      	ldr	r3, [r0, #32]
   3e0bc:	8818      	ldrh	r0, [r3, #0]
				VRING_USED_F_NO_NOTIFY) == 0;
   3e0be:	f080 0001 	eor.w	r0, r0, #1
   3e0c2:	f000 0001 	and.w	r0, r0, #1
   3e0c6:	4770      	bx	lr
			return (vq->vq_ring.avail->flags &
   3e0c8:	69c3      	ldr	r3, [r0, #28]
   3e0ca:	8818      	ldrh	r0, [r3, #0]
				VRING_AVAIL_F_NO_INTERRUPT) == 0;
   3e0cc:	f080 0001 	eor.w	r0, r0, #1
   3e0d0:	f000 0001 	and.w	r0, r0, #1
   3e0d4:	4770      	bx	lr

0003e0d6 <vq_ring_notify>:
 *
 * vq_ring_notify
 *
 */
static void vq_ring_notify(struct virtqueue *vq)
{
   3e0d6:	b508      	push	{r3, lr}
	if (vq->notify)
   3e0d8:	6903      	ldr	r3, [r0, #16]
   3e0da:	b103      	cbz	r3, 3e0de <vq_ring_notify+0x8>
		vq->notify(vq);
   3e0dc:	4798      	blx	r3
}
   3e0de:	bd08      	pop	{r3, pc}

0003e0e0 <vq_ring_update_avail>:
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
   3e0e0:	69c2      	ldr	r2, [r0, #28]
   3e0e2:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   3e0e6:	8943      	ldrh	r3, [r0, #10]
   3e0e8:	3b01      	subs	r3, #1
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
   3e0ea:	ea03 030c 	and.w	r3, r3, ip
   3e0ee:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   3e0f2:	8091      	strh	r1, [r2, #4]
	atomic_thread_fence(memory_order_seq_cst);
   3e0f4:	f3bf 8f5b 	dmb	ish
	vq->vq_ring.avail->idx++;
   3e0f8:	69c2      	ldr	r2, [r0, #28]
   3e0fa:	8853      	ldrh	r3, [r2, #2]
   3e0fc:	3301      	adds	r3, #1
   3e0fe:	8053      	strh	r3, [r2, #2]
	vq->vq_queued_cnt++;
   3e100:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   3e102:	3301      	adds	r3, #1
   3e104:	84c3      	strh	r3, [r0, #38]	; 0x26
}
   3e106:	4770      	bx	lr

0003e108 <virtqueue_create>:
{
   3e108:	b510      	push	{r4, lr}
   3e10a:	4604      	mov	r4, r0
   3e10c:	9804      	ldr	r0, [sp, #16]
		vq->vq_dev = virt_dev;
   3e10e:	6004      	str	r4, [r0, #0]
		vq->vq_name = name;
   3e110:	6042      	str	r2, [r0, #4]
		vq->vq_queue_index = id;
   3e112:	8101      	strh	r1, [r0, #8]
		vq->vq_nentries = ring->num_descs;
   3e114:	891a      	ldrh	r2, [r3, #8]
   3e116:	8142      	strh	r2, [r0, #10]
		vq->vq_free_cnt = vq->vq_nentries;
   3e118:	8482      	strh	r2, [r0, #36]	; 0x24
		vq->callback = callback;
   3e11a:	9a02      	ldr	r2, [sp, #8]
   3e11c:	60c2      	str	r2, [r0, #12]
		vq->notify = notify;
   3e11e:	9a03      	ldr	r2, [sp, #12]
   3e120:	6102      	str	r2, [r0, #16]
		vq_ring_init(vq, ring->vaddr, ring->align);
   3e122:	685a      	ldr	r2, [r3, #4]
   3e124:	6819      	ldr	r1, [r3, #0]
   3e126:	f7ff ff6d 	bl	3e004 <vq_ring_init>
}
   3e12a:	2000      	movs	r0, #0
   3e12c:	bd10      	pop	{r4, pc}

0003e12e <virtqueue_add_buffer>:
{
   3e12e:	b570      	push	{r4, r5, r6, lr}
   3e130:	b082      	sub	sp, #8
   3e132:	4604      	mov	r4, r0
	needed = readable + writable;
   3e134:	18d5      	adds	r5, r2, r3
		head_idx = vq->vq_desc_head_idx;
   3e136:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
		dxp->cookie = cookie;
   3e138:	f106 0c06 	add.w	ip, r6, #6
   3e13c:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
   3e140:	f8dd e018 	ldr.w	lr, [sp, #24]
   3e144:	f8cc e004 	str.w	lr, [ip, #4]
		dxp->ndescs = needed;
   3e148:	b2ad      	uxth	r5, r5
   3e14a:	f8ac 5008 	strh.w	r5, [ip, #8]
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
   3e14e:	9301      	str	r3, [sp, #4]
   3e150:	9200      	str	r2, [sp, #0]
   3e152:	460b      	mov	r3, r1
   3e154:	4632      	mov	r2, r6
   3e156:	6981      	ldr	r1, [r0, #24]
   3e158:	f7ff fef5 	bl	3df46 <vq_ring_add_buffer>
		vq->vq_desc_head_idx = idx;
   3e15c:	85a0      	strh	r0, [r4, #44]	; 0x2c
		vq->vq_free_cnt -= needed;
   3e15e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   3e160:	1b5b      	subs	r3, r3, r5
   3e162:	84a3      	strh	r3, [r4, #36]	; 0x24
		vq_ring_update_avail(vq, head_idx);
   3e164:	4631      	mov	r1, r6
   3e166:	4620      	mov	r0, r4
   3e168:	f7ff ffba 	bl	3e0e0 <vq_ring_update_avail>
}
   3e16c:	2000      	movs	r0, #0
   3e16e:	b002      	add	sp, #8
   3e170:	bd70      	pop	{r4, r5, r6, pc}

0003e172 <virtqueue_get_buffer>:
{
   3e172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
   3e174:	4604      	mov	r4, r0
   3e176:	b310      	cbz	r0, 3e1be <virtqueue_get_buffer+0x4c>
   3e178:	460b      	mov	r3, r1
   3e17a:	4617      	mov	r7, r2
   3e17c:	8dc1      	ldrh	r1, [r0, #46]	; 0x2e
   3e17e:	6a02      	ldr	r2, [r0, #32]
   3e180:	8850      	ldrh	r0, [r2, #2]
   3e182:	4281      	cmp	r1, r0
   3e184:	d01c      	beq.n	3e1c0 <virtqueue_get_buffer+0x4e>
	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
   3e186:	1c48      	adds	r0, r1, #1
   3e188:	85e0      	strh	r0, [r4, #46]	; 0x2e
   3e18a:	8966      	ldrh	r6, [r4, #10]
   3e18c:	3e01      	subs	r6, #1
   3e18e:	400e      	ands	r6, r1
	atomic_thread_fence(memory_order_seq_cst);
   3e190:	f3bf 8f5b 	dmb	ish
	desc_idx = (uint16_t)uep->id;
   3e194:	eb02 01c6 	add.w	r1, r2, r6, lsl #3
   3e198:	684d      	ldr	r5, [r1, #4]
   3e19a:	b2a9      	uxth	r1, r5
	if (len)
   3e19c:	b11b      	cbz	r3, 3e1a6 <virtqueue_get_buffer+0x34>
		*len = uep->len;
   3e19e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
   3e1a2:	6892      	ldr	r2, [r2, #8]
   3e1a4:	601a      	str	r2, [r3, #0]
	vq_ring_free_chain(vq, desc_idx);
   3e1a6:	4620      	mov	r0, r4
   3e1a8:	f7ff ff01 	bl	3dfae <vq_ring_free_chain>
	cookie = vq->vq_descx[desc_idx].cookie;
   3e1ac:	b2ad      	uxth	r5, r5
   3e1ae:	3506      	adds	r5, #6
   3e1b0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   3e1b4:	6868      	ldr	r0, [r5, #4]
	vq->vq_descx[desc_idx].cookie = NULL;
   3e1b6:	2300      	movs	r3, #0
   3e1b8:	606b      	str	r3, [r5, #4]
	if (idx)
   3e1ba:	b107      	cbz	r7, 3e1be <virtqueue_get_buffer+0x4c>
		*idx = used_idx;
   3e1bc:	803e      	strh	r6, [r7, #0]
}
   3e1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   3e1c0:	2000      	movs	r0, #0
   3e1c2:	e7fc      	b.n	3e1be <virtqueue_get_buffer+0x4c>

0003e1c4 <virtqueue_get_buffer_length>:
	return vq->vq_ring.desc[idx].len;
   3e1c4:	6983      	ldr	r3, [r0, #24]
   3e1c6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
}
   3e1ca:	6898      	ldr	r0, [r3, #8]
   3e1cc:	4770      	bx	lr

0003e1ce <virtqueue_get_available_buffer>:
{
   3e1ce:	b570      	push	{r4, r5, r6, lr}
   3e1d0:	460d      	mov	r5, r1
   3e1d2:	4616      	mov	r6, r2
	atomic_thread_fence(memory_order_seq_cst);
   3e1d4:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   3e1d8:	8e02      	ldrh	r2, [r0, #48]	; 0x30
   3e1da:	69c1      	ldr	r1, [r0, #28]
   3e1dc:	884b      	ldrh	r3, [r1, #2]
   3e1de:	429a      	cmp	r2, r3
   3e1e0:	d017      	beq.n	3e212 <virtqueue_get_available_buffer+0x44>
   3e1e2:	4604      	mov	r4, r0
	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
   3e1e4:	1c53      	adds	r3, r2, #1
   3e1e6:	8603      	strh	r3, [r0, #48]	; 0x30
   3e1e8:	8943      	ldrh	r3, [r0, #10]
   3e1ea:	3b01      	subs	r3, #1
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
   3e1ec:	4013      	ands	r3, r2
   3e1ee:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   3e1f2:	888a      	ldrh	r2, [r1, #4]
   3e1f4:	b293      	uxth	r3, r2
   3e1f6:	802a      	strh	r2, [r5, #0]
	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
   3e1f8:	6982      	ldr	r2, [r0, #24]
   3e1fa:	011b      	lsls	r3, r3, #4
	return metal_io_phys_to_virt(io, phys);
   3e1fc:	58d1      	ldr	r1, [r2, r3]
   3e1fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   3e200:	f7ff fe84 	bl	3df0c <metal_io_phys_to_virt>
	*len = vq->vq_ring.desc[*avail_idx].len;
   3e204:	69a3      	ldr	r3, [r4, #24]
   3e206:	882a      	ldrh	r2, [r5, #0]
   3e208:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   3e20c:	689b      	ldr	r3, [r3, #8]
   3e20e:	6033      	str	r3, [r6, #0]
}
   3e210:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   3e212:	2000      	movs	r0, #0
   3e214:	e7fc      	b.n	3e210 <virtqueue_get_available_buffer+0x42>

0003e216 <virtqueue_disable_cb>:
	if (vq->vq_dev->features & VIRTIO_RING_F_EVENT_IDX) {
   3e216:	6803      	ldr	r3, [r0, #0]
   3e218:	691a      	ldr	r2, [r3, #16]
   3e21a:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
   3e21e:	d01b      	beq.n	3e258 <virtqueue_disable_cb+0x42>
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3e220:	699b      	ldr	r3, [r3, #24]
   3e222:	b94b      	cbnz	r3, 3e238 <virtqueue_disable_cb+0x22>
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   3e224:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
   3e226:	8942      	ldrh	r2, [r0, #10]
   3e228:	1a9b      	subs	r3, r3, r2
   3e22a:	b29b      	uxth	r3, r3
			vring_used_event(&vq->vq_ring) =
   3e22c:	69c2      	ldr	r2, [r0, #28]
   3e22e:	6941      	ldr	r1, [r0, #20]
			    vq->vq_used_cons_idx - vq->vq_nentries - 1;
   3e230:	3b01      	subs	r3, #1
			vring_used_event(&vq->vq_ring) =
   3e232:	eb02 0241 	add.w	r2, r2, r1, lsl #1
   3e236:	8093      	strh	r3, [r2, #4]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3e238:	6803      	ldr	r3, [r0, #0]
   3e23a:	699b      	ldr	r3, [r3, #24]
   3e23c:	2b01      	cmp	r3, #1
   3e23e:	d000      	beq.n	3e242 <virtqueue_disable_cb+0x2c>
}
   3e240:	4770      	bx	lr
			    vq->vq_available_idx - vq->vq_nentries - 1;
   3e242:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   3e244:	8942      	ldrh	r2, [r0, #10]
   3e246:	1a9b      	subs	r3, r3, r2
   3e248:	b29b      	uxth	r3, r3
			vring_avail_event(&vq->vq_ring) =
   3e24a:	6a02      	ldr	r2, [r0, #32]
   3e24c:	6941      	ldr	r1, [r0, #20]
			    vq->vq_available_idx - vq->vq_nentries - 1;
   3e24e:	3b01      	subs	r3, #1
			vring_avail_event(&vq->vq_ring) =
   3e250:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   3e254:	8093      	strh	r3, [r2, #4]
   3e256:	4770      	bx	lr
		if (vq->vq_dev->role == VIRTIO_DEV_DRIVER) {
   3e258:	699b      	ldr	r3, [r3, #24]
   3e25a:	b923      	cbnz	r3, 3e266 <virtqueue_disable_cb+0x50>
			vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
   3e25c:	69c2      	ldr	r2, [r0, #28]
   3e25e:	8813      	ldrh	r3, [r2, #0]
   3e260:	f043 0301 	orr.w	r3, r3, #1
   3e264:	8013      	strh	r3, [r2, #0]
		if (vq->vq_dev->role == VIRTIO_DEV_DEVICE) {
   3e266:	6803      	ldr	r3, [r0, #0]
   3e268:	699b      	ldr	r3, [r3, #24]
   3e26a:	2b01      	cmp	r3, #1
   3e26c:	d1e8      	bne.n	3e240 <virtqueue_disable_cb+0x2a>
			vq->vq_ring.used->flags |= VRING_USED_F_NO_NOTIFY;
   3e26e:	6a02      	ldr	r2, [r0, #32]
   3e270:	8813      	ldrh	r3, [r2, #0]
   3e272:	f043 0301 	orr.w	r3, r3, #1
   3e276:	8013      	strh	r3, [r2, #0]
}
   3e278:	e7e2      	b.n	3e240 <virtqueue_disable_cb+0x2a>

0003e27a <virtqueue_kick>:
{
   3e27a:	b510      	push	{r4, lr}
   3e27c:	4604      	mov	r4, r0
	atomic_thread_fence(memory_order_seq_cst);
   3e27e:	f3bf 8f5b 	dmb	ish
	if (vq_ring_must_notify(vq))
   3e282:	f7ff fee7 	bl	3e054 <vq_ring_must_notify>
   3e286:	b910      	cbnz	r0, 3e28e <virtqueue_kick+0x14>
	vq->vq_queued_cnt = 0;
   3e288:	2300      	movs	r3, #0
   3e28a:	84e3      	strh	r3, [r4, #38]	; 0x26
}
   3e28c:	bd10      	pop	{r4, pc}
		vq_ring_notify(vq);
   3e28e:	4620      	mov	r0, r4
   3e290:	f7ff ff21 	bl	3e0d6 <vq_ring_notify>
   3e294:	e7f8      	b.n	3e288 <virtqueue_kick+0xe>

0003e296 <virtqueue_get_desc_size>:
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
   3e296:	8e01      	ldrh	r1, [r0, #48]	; 0x30
   3e298:	69c2      	ldr	r2, [r0, #28]
   3e29a:	8853      	ldrh	r3, [r2, #2]
   3e29c:	4299      	cmp	r1, r3
   3e29e:	d00a      	beq.n	3e2b6 <virtqueue_get_desc_size+0x20>
	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
   3e2a0:	8943      	ldrh	r3, [r0, #10]
   3e2a2:	3b01      	subs	r3, #1
	avail_idx = vq->vq_ring.avail->ring[head_idx];
   3e2a4:	400b      	ands	r3, r1
   3e2a6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
   3e2aa:	8892      	ldrh	r2, [r2, #4]
	len = vq->vq_ring.desc[avail_idx].len;
   3e2ac:	6983      	ldr	r3, [r0, #24]
   3e2ae:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   3e2b2:	6898      	ldr	r0, [r3, #8]
	return len;
   3e2b4:	4770      	bx	lr
		return 0;
   3e2b6:	2000      	movs	r0, #0
}
   3e2b8:	4770      	bx	lr

0003e2ba <virtqueue_notification>:
{
   3e2ba:	b508      	push	{r3, lr}
	atomic_thread_fence(memory_order_seq_cst);
   3e2bc:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
   3e2c0:	68c3      	ldr	r3, [r0, #12]
   3e2c2:	b103      	cbz	r3, 3e2c6 <virtqueue_notification+0xc>
		vq->callback(vq);
   3e2c4:	4798      	blx	r3
}
   3e2c6:	bd08      	pop	{r3, pc}

0003e2c8 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit + 1), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
   3e2c8:	4684      	mov	ip, r0
   3e2ca:	4608      	mov	r0, r1
	unsigned int bit;

	for (bit = start;
   3e2cc:	e000      	b.n	3e2d0 <metal_bitmap_next_clear_bit+0x8>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit++)
   3e2ce:	3001      	adds	r0, #1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   3e2d0:	4290      	cmp	r0, r2
   3e2d2:	d208      	bcs.n	3e2e6 <metal_bitmap_next_clear_bit+0x1e>
	return ((bitmap[bit / METAL_BITS_PER_ULONG] &
   3e2d4:	0943      	lsrs	r3, r0, #5
   3e2d6:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1))) == 0) ? 0 : 1;
   3e2da:	f000 011f 	and.w	r1, r0, #31
   3e2de:	40cb      	lsrs	r3, r1
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
   3e2e0:	f013 0f01 	tst.w	r3, #1
   3e2e4:	d1f3      	bne.n	3e2ce <metal_bitmap_next_clear_bit+0x6>
		;
	return bit;
}
   3e2e6:	4770      	bx	lr

0003e2e8 <rpmsg_get_address>:
{
   3e2e8:	b538      	push	{r3, r4, r5, lr}
   3e2ea:	4605      	mov	r5, r0
   3e2ec:	460c      	mov	r4, r1
	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
   3e2ee:	460a      	mov	r2, r1
   3e2f0:	2100      	movs	r1, #0
   3e2f2:	f7ff ffe9 	bl	3e2c8 <metal_bitmap_next_clear_bit>
	if (nextbit < (uint32_t)size) {
   3e2f6:	4284      	cmp	r4, r0
   3e2f8:	d90e      	bls.n	3e318 <rpmsg_get_address+0x30>
   3e2fa:	4603      	mov	r3, r0
		addr = RPMSG_RESERVED_ADDRESSES + nextbit;
   3e2fc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   3e300:	095c      	lsrs	r4, r3, #5
   3e302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   3e306:	f003 031f 	and.w	r3, r3, #31
   3e30a:	2101      	movs	r1, #1
   3e30c:	fa01 f303 	lsl.w	r3, r1, r3
	bitmap[bit / METAL_BITS_PER_ULONG] |=
   3e310:	431a      	orrs	r2, r3
   3e312:	f845 2024 	str.w	r2, [r5, r4, lsl #2]
}
   3e316:	bd38      	pop	{r3, r4, r5, pc}
	unsigned int addr = RPMSG_ADDR_ANY;
   3e318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return addr;
   3e31c:	e7fb      	b.n	3e316 <rpmsg_get_address+0x2e>

0003e31e <rpmsg_release_address>:
	if (addr >= 0 && addr < size)
   3e31e:	f5b2 6280 	subs.w	r2, r2, #1024	; 0x400
   3e322:	d40e      	bmi.n	3e342 <rpmsg_release_address+0x24>
   3e324:	428a      	cmp	r2, r1
   3e326:	da0c      	bge.n	3e342 <rpmsg_release_address+0x24>
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   3e328:	ea4f 1c52 	mov.w	ip, r2, lsr #5
   3e32c:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
   3e330:	f002 021f 	and.w	r2, r2, #31
   3e334:	2101      	movs	r1, #1
   3e336:	fa01 f202 	lsl.w	r2, r1, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
   3e33a:	ea23 0302 	bic.w	r3, r3, r2
   3e33e:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
}
   3e342:	4770      	bx	lr

0003e344 <__metal_mutex_acquire>:

	return ret;
}

static inline void __metal_mutex_acquire(metal_mutex_t *m)
{
   3e344:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3e346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e34a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e34e:	f7f3 fd8f 	bl	31e70 <z_impl_k_sem_take>
	k_sem_take(m, K_FOREVER);
}
   3e352:	bd08      	pop	{r3, pc}

0003e354 <rpmsg_unregister_endpoint>:
{
   3e354:	b570      	push	{r4, r5, r6, lr}
   3e356:	4604      	mov	r4, r0
	struct rpmsg_device *rdev = ept->rdev;
   3e358:	6a06      	ldr	r6, [r0, #32]
	metal_mutex_acquire(&rdev->lock);
   3e35a:	f106 0558 	add.w	r5, r6, #88	; 0x58
   3e35e:	4628      	mov	r0, r5
   3e360:	f7ff fff0 	bl	3e344 <__metal_mutex_acquire>
	if (ept->addr != RPMSG_ADDR_ANY)
   3e364:	6a62      	ldr	r2, [r4, #36]	; 0x24
   3e366:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   3e36a:	d10e      	bne.n	3e38a <rpmsg_unregister_endpoint+0x36>
	metal_list_del(&ept->node);
   3e36c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	node->next->prev = node->prev;
   3e370:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3e372:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   3e374:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   3e376:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3e378:	6011      	str	r1, [r2, #0]
	node->prev = node;
   3e37a:	63a3      	str	r3, [r4, #56]	; 0x38
	node->next = node;
   3e37c:	6363      	str	r3, [r4, #52]	; 0x34
	ept->rdev = NULL;
   3e37e:	2300      	movs	r3, #0
   3e380:	6223      	str	r3, [r4, #32]
	z_impl_k_sem_give(sem);
   3e382:	4628      	mov	r0, r5
   3e384:	f7f3 fd2c 	bl	31de0 <z_impl_k_sem_give>
}
   3e388:	bd70      	pop	{r4, r5, r6, pc}
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
   3e38a:	2180      	movs	r1, #128	; 0x80
   3e38c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   3e390:	f7ff ffc5 	bl	3e31e <rpmsg_release_address>
   3e394:	e7ea      	b.n	3e36c <rpmsg_unregister_endpoint+0x18>

0003e396 <rpmsg_send_ns_message>:
{
   3e396:	b510      	push	{r4, lr}
   3e398:	b08c      	sub	sp, #48	; 0x30
   3e39a:	4604      	mov	r4, r0
	ns_msg.flags = flags;
   3e39c:	910b      	str	r1, [sp, #44]	; 0x2c
	ns_msg.addr = ept->addr;
   3e39e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   3e3a0:	930a      	str	r3, [sp, #40]	; 0x28
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
   3e3a2:	2220      	movs	r2, #32
   3e3a4:	4601      	mov	r1, r0
   3e3a6:	a802      	add	r0, sp, #8
   3e3a8:	f7f9 ffb7 	bl	3831a <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
   3e3ac:	2301      	movs	r3, #1
   3e3ae:	9301      	str	r3, [sp, #4]
   3e3b0:	2328      	movs	r3, #40	; 0x28
   3e3b2:	9300      	str	r3, [sp, #0]
   3e3b4:	ab02      	add	r3, sp, #8
   3e3b6:	2235      	movs	r2, #53	; 0x35
   3e3b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   3e3ba:	4620      	mov	r0, r4
   3e3bc:	f7f1 fe8a 	bl	300d4 <rpmsg_send_offchannel_raw>
	if (ret < 0)
   3e3c0:	2800      	cmp	r0, #0
   3e3c2:	db00      	blt.n	3e3c6 <rpmsg_send_ns_message+0x30>
		return RPMSG_SUCCESS;
   3e3c4:	2000      	movs	r0, #0
}
   3e3c6:	b00c      	add	sp, #48	; 0x30
   3e3c8:	bd10      	pop	{r4, pc}

0003e3ca <rpmsg_hold_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   3e3ca:	b138      	cbz	r0, 3e3dc <rpmsg_hold_rx_buffer+0x12>
{
   3e3cc:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   3e3ce:	6a00      	ldr	r0, [r0, #32]
   3e3d0:	b118      	cbz	r0, 3e3da <rpmsg_hold_rx_buffer+0x10>
   3e3d2:	b111      	cbz	r1, 3e3da <rpmsg_hold_rx_buffer+0x10>
	if (rdev->ops.hold_rx_buffer)
   3e3d4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   3e3d6:	b103      	cbz	r3, 3e3da <rpmsg_hold_rx_buffer+0x10>
		rdev->ops.hold_rx_buffer(rdev, rxbuf);
   3e3d8:	4798      	blx	r3
}
   3e3da:	bd08      	pop	{r3, pc}
   3e3dc:	4770      	bx	lr

0003e3de <rpmsg_release_rx_buffer>:
	if (!ept || !ept->rdev || !rxbuf)
   3e3de:	b140      	cbz	r0, 3e3f2 <rpmsg_release_rx_buffer+0x14>
{
   3e3e0:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !rxbuf)
   3e3e2:	6a00      	ldr	r0, [r0, #32]
   3e3e4:	b120      	cbz	r0, 3e3f0 <rpmsg_release_rx_buffer+0x12>
   3e3e6:	b119      	cbz	r1, 3e3f0 <rpmsg_release_rx_buffer+0x12>
	if (rdev->ops.release_rx_buffer)
   3e3e8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   3e3ec:	b103      	cbz	r3, 3e3f0 <rpmsg_release_rx_buffer+0x12>
		rdev->ops.release_rx_buffer(rdev, rxbuf);
   3e3ee:	4798      	blx	r3
}
   3e3f0:	bd08      	pop	{r3, pc}
   3e3f2:	4770      	bx	lr

0003e3f4 <rpmsg_get_tx_payload_buffer>:
{
   3e3f4:	b508      	push	{r3, lr}
	if (!ept || !ept->rdev || !len)
   3e3f6:	b130      	cbz	r0, 3e406 <rpmsg_get_tx_payload_buffer+0x12>
   3e3f8:	6a00      	ldr	r0, [r0, #32]
   3e3fa:	b120      	cbz	r0, 3e406 <rpmsg_get_tx_payload_buffer+0x12>
   3e3fc:	b121      	cbz	r1, 3e408 <rpmsg_get_tx_payload_buffer+0x14>
	if (rdev->ops.get_tx_payload_buffer)
   3e3fe:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
   3e402:	b11b      	cbz	r3, 3e40c <rpmsg_get_tx_payload_buffer+0x18>
		return rdev->ops.get_tx_payload_buffer(rdev, len, wait);
   3e404:	4798      	blx	r3
}
   3e406:	bd08      	pop	{r3, pc}
		return NULL;
   3e408:	4608      	mov	r0, r1
   3e40a:	e7fc      	b.n	3e406 <rpmsg_get_tx_payload_buffer+0x12>
	return NULL;
   3e40c:	2000      	movs	r0, #0
   3e40e:	e7fa      	b.n	3e406 <rpmsg_get_tx_payload_buffer+0x12>

0003e410 <rpmsg_get_endpoint>:
{
   3e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e414:	4680      	mov	r8, r0
   3e416:	460f      	mov	r7, r1
   3e418:	4616      	mov	r6, r2
   3e41a:	4699      	mov	r9, r3
	metal_list_for_each(&rdev->endpoints, node) {
   3e41c:	6804      	ldr	r4, [r0, #0]
   3e41e:	e003      	b.n	3e428 <rpmsg_get_endpoint+0x18>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   3e420:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   3e424:	d01a      	beq.n	3e45c <rpmsg_get_endpoint+0x4c>
	metal_list_for_each(&rdev->endpoints, node) {
   3e426:	6824      	ldr	r4, [r4, #0]
   3e428:	45a0      	cmp	r8, r4
   3e42a:	d01c      	beq.n	3e466 <rpmsg_get_endpoint+0x56>
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
   3e42c:	f1a4 0534 	sub.w	r5, r4, #52	; 0x34
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
   3e430:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
   3e434:	d002      	beq.n	3e43c <rpmsg_get_endpoint+0x2c>
   3e436:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   3e438:	42b2      	cmp	r2, r6
   3e43a:	d015      	beq.n	3e468 <rpmsg_get_endpoint+0x58>
		if (name)
   3e43c:	2f00      	cmp	r7, #0
   3e43e:	d0f2      	beq.n	3e426 <rpmsg_get_endpoint+0x16>
			name_match = !strncmp(ept->name, name,
   3e440:	2220      	movs	r2, #32
   3e442:	4639      	mov	r1, r7
   3e444:	4628      	mov	r0, r5
   3e446:	f7f9 ffa0 	bl	3838a <strncmp>
		if (!name || !name_match)
   3e44a:	2800      	cmp	r0, #0
   3e44c:	d1eb      	bne.n	3e426 <rpmsg_get_endpoint+0x16>
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
   3e44e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   3e452:	d0e5      	beq.n	3e420 <rpmsg_get_endpoint+0x10>
   3e454:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3e456:	454b      	cmp	r3, r9
   3e458:	d1e2      	bne.n	3e420 <rpmsg_get_endpoint+0x10>
   3e45a:	e005      	b.n	3e468 <rpmsg_get_endpoint+0x58>
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
   3e45c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   3e45e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   3e462:	d1e0      	bne.n	3e426 <rpmsg_get_endpoint+0x16>
   3e464:	e000      	b.n	3e468 <rpmsg_get_endpoint+0x58>
	return NULL;
   3e466:	2500      	movs	r5, #0
}
   3e468:	4628      	mov	r0, r5
   3e46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003e46e <rpmsg_destroy_ept>:
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev)
   3e46e:	b1a0      	cbz	r0, 3e49a <rpmsg_destroy_ept+0x2c>
{
   3e470:	b510      	push	{r4, lr}
   3e472:	4604      	mov	r4, r0
	if (!ept || !ept->rdev)
   3e474:	6a03      	ldr	r3, [r0, #32]
   3e476:	b15b      	cbz	r3, 3e490 <rpmsg_destroy_ept+0x22>
		return;

	rdev = ept->rdev;

	if (ept->name[0] && rdev->support_ns &&
   3e478:	7802      	ldrb	r2, [r0, #0]
   3e47a:	b132      	cbz	r2, 3e48a <rpmsg_destroy_ept+0x1c>
   3e47c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
   3e480:	b11b      	cbz	r3, 3e48a <rpmsg_destroy_ept+0x1c>
	    ept->addr >= RPMSG_RESERVED_ADDRESSES)
   3e482:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (ept->name[0] && rdev->support_ns &&
   3e484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   3e488:	d203      	bcs.n	3e492 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
	rpmsg_unregister_endpoint(ept);
   3e48a:	4620      	mov	r0, r4
   3e48c:	f7ff ff62 	bl	3e354 <rpmsg_unregister_endpoint>
}
   3e490:	bd10      	pop	{r4, pc}
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
   3e492:	2101      	movs	r1, #1
   3e494:	f7ff ff7f 	bl	3e396 <rpmsg_send_ns_message>
   3e498:	e7f7      	b.n	3e48a <rpmsg_destroy_ept+0x1c>
   3e49a:	4770      	bx	lr

0003e49c <rpmsg_virtio_wait_remote_ready>:
{
   3e49c:	b510      	push	{r4, lr}
   3e49e:	4604      	mov	r4, r0
   3e4a0:	e005      	b.n	3e4ae <rpmsg_virtio_wait_remote_ready+0x12>
	rvdev->vdev->func->set_status(rvdev->vdev, status);
   3e4a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   3e4a6:	6a03      	ldr	r3, [r0, #32]
   3e4a8:	685b      	ldr	r3, [r3, #4]
   3e4aa:	2100      	movs	r1, #0
   3e4ac:	4798      	blx	r3
	return rvdev->vdev->func->get_status(rvdev->vdev);
   3e4ae:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   3e4b2:	6a03      	ldr	r3, [r0, #32]
   3e4b4:	681b      	ldr	r3, [r3, #0]
   3e4b6:	4798      	blx	r3
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
   3e4b8:	f010 0f40 	tst.w	r0, #64	; 0x40
   3e4bc:	d1f1      	bne.n	3e4a2 <rpmsg_virtio_wait_remote_ready+0x6>
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
   3e4be:	f010 0f04 	tst.w	r0, #4
   3e4c2:	d0f4      	beq.n	3e4ae <rpmsg_virtio_wait_remote_ready+0x12>
}
   3e4c4:	2001      	movs	r0, #1
   3e4c6:	bd10      	pop	{r4, pc}

0003e4c8 <rpmsg_virtio_hold_rx_buffer>:
	rp_hdr->reserved |= RPMSG_BUF_HELD;
   3e4c8:	f851 3c08 	ldr.w	r3, [r1, #-8]
   3e4cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   3e4d0:	f841 3c08 	str.w	r3, [r1, #-8]
}
   3e4d4:	4770      	bx	lr

0003e4d6 <rpmsg_virtio_tx_callback>:
}
   3e4d6:	4770      	bx	lr

0003e4d8 <__metal_mutex_acquire>:
{
   3e4d8:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3e4da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e4de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e4e2:	f7f3 fcc5 	bl	31e70 <z_impl_k_sem_take>
}
   3e4e6:	bd08      	pop	{r3, pc}

0003e4e8 <rpmsg_virtio_release_tx_buffer>:
{
   3e4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e4ea:	4605      	mov	r5, r0
   3e4ec:	460c      	mov	r4, r1
	idx = rp_hdr->reserved;
   3e4ee:	f851 6c08 	ldr.w	r6, [r1, #-8]
   3e4f2:	b2b6      	uxth	r6, r6
	metal_mutex_acquire(&rdev->lock);
   3e4f4:	f100 0758 	add.w	r7, r0, #88	; 0x58
   3e4f8:	4638      	mov	r0, r7
   3e4fa:	f7ff ffed 	bl	3e4d8 <__metal_mutex_acquire>
	r_desc->idx = idx;
   3e4fe:	f824 6c08 	strh.w	r6, [r4, #-8]
	metal_list_add_tail(&rvdev->reclaimer, &r_desc->node);
   3e502:	f105 02b4 	add.w	r2, r5, #180	; 0xb4
   3e506:	f1a4 0310 	sub.w	r3, r4, #16
	new_node->prev = node->prev;
   3e50a:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
   3e50e:	f844 1c0c 	str.w	r1, [r4, #-12]
	new_node->next = node;
   3e512:	f844 2c10 	str.w	r2, [r4, #-16]
	new_node->next->prev = new_node;
   3e516:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	new_node->prev->next = new_node;
   3e51a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   3e51e:	6013      	str	r3, [r2, #0]
	z_impl_k_sem_give(sem);
   3e520:	4638      	mov	r0, r7
   3e522:	f7f3 fc5d 	bl	31de0 <z_impl_k_sem_give>
}
   3e526:	2000      	movs	r0, #0
   3e528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e52a <rpmsg_virtio_ns_callback>:
{
   3e52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e52e:	b088      	sub	sp, #32
	struct rpmsg_device *rdev = ept->rdev;
   3e530:	6a05      	ldr	r5, [r0, #32]
	struct metal_io_region *io = rvdev->shbuf_io;
   3e532:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
	if (len != sizeof(*ns_msg))
   3e536:	2a28      	cmp	r2, #40	; 0x28
   3e538:	d12e      	bne.n	3e598 <rpmsg_virtio_ns_callback+0x6e>
   3e53a:	460c      	mov	r4, r1
	size_t offset = (uintptr_t)virt - (uintptr_t)io->virt;
   3e53c:	6801      	ldr	r1, [r0, #0]
   3e53e:	1a61      	subs	r1, r4, r1
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
   3e540:	6883      	ldr	r3, [r0, #8]
   3e542:	4299      	cmp	r1, r3
   3e544:	d22c      	bcs.n	3e5a0 <rpmsg_virtio_ns_callback+0x76>
	metal_io_block_read(io,
   3e546:	2320      	movs	r3, #32
   3e548:	466a      	mov	r2, sp
   3e54a:	f7ff fbcb 	bl	3dce4 <metal_io_block_read>
	dest = ns_msg->addr;
   3e54e:	f8d4 8020 	ldr.w	r8, [r4, #32]
	metal_mutex_acquire(&rdev->lock);
   3e552:	f105 0758 	add.w	r7, r5, #88	; 0x58
   3e556:	4638      	mov	r0, r7
   3e558:	f7ff ffbe 	bl	3e4d8 <__metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
   3e55c:	4643      	mov	r3, r8
   3e55e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3e562:	4669      	mov	r1, sp
   3e564:	4628      	mov	r0, r5
   3e566:	f7ff ff53 	bl	3e410 <rpmsg_get_endpoint>
   3e56a:	4606      	mov	r6, r0
	if (ns_msg->flags & RPMSG_NS_DESTROY) {
   3e56c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3e56e:	f013 0f01 	tst.w	r3, #1
   3e572:	d018      	beq.n	3e5a6 <rpmsg_virtio_ns_callback+0x7c>
		if (_ept)
   3e574:	b110      	cbz	r0, 3e57c <rpmsg_virtio_ns_callback+0x52>
			_ept->dest_addr = RPMSG_ADDR_ANY;
   3e576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3e57a:	6283      	str	r3, [r0, #40]	; 0x28
   3e57c:	4638      	mov	r0, r7
   3e57e:	f7f3 fc2f 	bl	31de0 <z_impl_k_sem_give>
		if (_ept && _ept->ns_unbind_cb)
   3e582:	b11e      	cbz	r6, 3e58c <rpmsg_virtio_ns_callback+0x62>
   3e584:	6b33      	ldr	r3, [r6, #48]	; 0x30
   3e586:	b10b      	cbz	r3, 3e58c <rpmsg_virtio_ns_callback+0x62>
			_ept->ns_unbind_cb(_ept);
   3e588:	4630      	mov	r0, r6
   3e58a:	4798      	blx	r3
		if (rdev->ns_unbind_cb)
   3e58c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
   3e58e:	b11b      	cbz	r3, 3e598 <rpmsg_virtio_ns_callback+0x6e>
			rdev->ns_unbind_cb(rdev, name, dest);
   3e590:	4642      	mov	r2, r8
   3e592:	4669      	mov	r1, sp
   3e594:	4628      	mov	r0, r5
   3e596:	4798      	blx	r3
}
   3e598:	2000      	movs	r0, #0
   3e59a:	b008      	add	sp, #32
   3e59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3e5a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   3e5a4:	e7cf      	b.n	3e546 <rpmsg_virtio_ns_callback+0x1c>
		if (!_ept) {
   3e5a6:	b128      	cbz	r0, 3e5b4 <rpmsg_virtio_ns_callback+0x8a>
			_ept->dest_addr = dest;
   3e5a8:	f8c0 8028 	str.w	r8, [r0, #40]	; 0x28
   3e5ac:	4638      	mov	r0, r7
   3e5ae:	f7f3 fc17 	bl	31de0 <z_impl_k_sem_give>
}
   3e5b2:	e7f1      	b.n	3e598 <rpmsg_virtio_ns_callback+0x6e>
   3e5b4:	4638      	mov	r0, r7
   3e5b6:	f7f3 fc13 	bl	31de0 <z_impl_k_sem_give>
			if (rdev->ns_bind_cb)
   3e5ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3e5bc:	2b00      	cmp	r3, #0
   3e5be:	d0eb      	beq.n	3e598 <rpmsg_virtio_ns_callback+0x6e>
				rdev->ns_bind_cb(rdev, name, dest);
   3e5c0:	4642      	mov	r2, r8
   3e5c2:	4669      	mov	r1, sp
   3e5c4:	4628      	mov	r0, r5
   3e5c6:	4798      	blx	r3
   3e5c8:	e7e6      	b.n	3e598 <rpmsg_virtio_ns_callback+0x6e>

0003e5ca <rpmsg_virtio_return_buffer>:
{
   3e5ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   3e5cc:	b085      	sub	sp, #20
   3e5ce:	4604      	mov	r4, r0
   3e5d0:	4615      	mov	r5, r2
   3e5d2:	461e      	mov	r6, r3
	return rvdev->vdev->role;
   3e5d4:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   3e5d8:	699f      	ldr	r7, [r3, #24]
	if (role == RPMSG_HOST) {
   3e5da:	b11f      	cbz	r7, 3e5e4 <rpmsg_virtio_return_buffer+0x1a>
	if (role == RPMSG_REMOTE) {
   3e5dc:	2f01      	cmp	r7, #1
   3e5de:	d00c      	beq.n	3e5fa <rpmsg_virtio_return_buffer+0x30>
}
   3e5e0:	b005      	add	sp, #20
   3e5e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vqbuf.buf = buffer;
   3e5e4:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   3e5e6:	9203      	str	r2, [sp, #12]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
   3e5e8:	9100      	str	r1, [sp, #0]
   3e5ea:	2301      	movs	r3, #1
   3e5ec:	2200      	movs	r2, #0
   3e5ee:	a902      	add	r1, sp, #8
   3e5f0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   3e5f4:	f7ff fd9b 	bl	3e12e <virtqueue_add_buffer>
   3e5f8:	e7f0      	b.n	3e5dc <rpmsg_virtio_return_buffer+0x12>
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
   3e5fa:	462a      	mov	r2, r5
   3e5fc:	4631      	mov	r1, r6
   3e5fe:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   3e602:	f7f1 fd1b 	bl	3003c <virtqueue_add_consumed_buffer>
}
   3e606:	e7eb      	b.n	3e5e0 <rpmsg_virtio_return_buffer+0x16>

0003e608 <rpmsg_virtio_enqueue_buffer>:
{
   3e608:	b510      	push	{r4, lr}
   3e60a:	b084      	sub	sp, #16
   3e60c:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
   3e610:	69a4      	ldr	r4, [r4, #24]
	if (role == RPMSG_HOST) {
   3e612:	b124      	cbz	r4, 3e61e <rpmsg_virtio_enqueue_buffer+0x16>
	if (role == RPMSG_REMOTE) {
   3e614:	2c01      	cmp	r4, #1
   3e616:	d00d      	beq.n	3e634 <rpmsg_virtio_enqueue_buffer+0x2c>
	return 0;
   3e618:	2000      	movs	r0, #0
}
   3e61a:	b004      	add	sp, #16
   3e61c:	bd10      	pop	{r4, pc}
		vqbuf.buf = buffer;
   3e61e:	9102      	str	r1, [sp, #8]
		vqbuf.len = len;
   3e620:	9203      	str	r2, [sp, #12]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 1, 0, buffer);
   3e622:	9100      	str	r1, [sp, #0]
   3e624:	2300      	movs	r3, #0
   3e626:	2201      	movs	r2, #1
   3e628:	a902      	add	r1, sp, #8
   3e62a:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
   3e62e:	f7ff fd7e 	bl	3e12e <virtqueue_add_buffer>
   3e632:	e7f2      	b.n	3e61a <rpmsg_virtio_enqueue_buffer+0x12>
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
   3e634:	4619      	mov	r1, r3
   3e636:	f8d0 00a8 	ldr.w	r0, [r0, #168]	; 0xa8
   3e63a:	f7f1 fcff 	bl	3003c <virtqueue_add_consumed_buffer>
   3e63e:	e7ec      	b.n	3e61a <rpmsg_virtio_enqueue_buffer+0x12>

0003e640 <rpmsg_virtio_get_rx_buffer>:
{
   3e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e642:	4604      	mov	r4, r0
   3e644:	460e      	mov	r6, r1
   3e646:	4615      	mov	r5, r2
   3e648:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   3e64c:	699f      	ldr	r7, [r3, #24]
	if (role == RPMSG_HOST) {
   3e64e:	b11f      	cbz	r7, 3e658 <rpmsg_virtio_get_rx_buffer+0x18>
	void *data = NULL;
   3e650:	2000      	movs	r0, #0
	if (role == RPMSG_REMOTE) {
   3e652:	2f01      	cmp	r7, #1
   3e654:	d005      	beq.n	3e662 <rpmsg_virtio_get_rx_buffer+0x22>
}
   3e656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data = virtqueue_get_buffer(rvdev->rvq, len, idx);
   3e658:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   3e65c:	f7ff fd89 	bl	3e172 <virtqueue_get_buffer>
   3e660:	e7f7      	b.n	3e652 <rpmsg_virtio_get_rx_buffer+0x12>
		    virtqueue_get_available_buffer(rvdev->rvq, idx, len);
   3e662:	4632      	mov	r2, r6
   3e664:	4629      	mov	r1, r5
   3e666:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   3e66a:	f7ff fdb0 	bl	3e1ce <virtqueue_get_available_buffer>
	return data;
   3e66e:	e7f2      	b.n	3e656 <rpmsg_virtio_get_rx_buffer+0x16>

0003e670 <rpmsg_virtio_release_rx_buffer>:
{
   3e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e672:	4604      	mov	r4, r0
	rp_hdr = RPMSG_LOCATE_HDR(rxbuf);
   3e674:	f1a1 0710 	sub.w	r7, r1, #16
	idx = (uint16_t)(rp_hdr->reserved & ~RPMSG_BUF_HELD);
   3e678:	f851 5c08 	ldr.w	r5, [r1, #-8]
   3e67c:	b2ad      	uxth	r5, r5
	metal_mutex_acquire(&rdev->lock);
   3e67e:	f100 0658 	add.w	r6, r0, #88	; 0x58
	__metal_mutex_acquire(mutex);
   3e682:	4630      	mov	r0, r6
   3e684:	f7ff ff28 	bl	3e4d8 <__metal_mutex_acquire>
	len = virtqueue_get_buffer_length(rvdev->rvq, idx);
   3e688:	4629      	mov	r1, r5
   3e68a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   3e68e:	f7ff fd99 	bl	3e1c4 <virtqueue_get_buffer_length>
   3e692:	4602      	mov	r2, r0
	rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
   3e694:	462b      	mov	r3, r5
   3e696:	4639      	mov	r1, r7
   3e698:	4620      	mov	r0, r4
   3e69a:	f7ff ff96 	bl	3e5ca <rpmsg_virtio_return_buffer>
	virtqueue_kick(rvdev->rvq);
   3e69e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   3e6a2:	f7ff fdea 	bl	3e27a <virtqueue_kick>
   3e6a6:	4630      	mov	r0, r6
   3e6a8:	f7f3 fb9a 	bl	31de0 <z_impl_k_sem_give>
}
   3e6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003e6ae <rpmsg_virtio_shm_pool_get_buffer>:
	if (!shpool || size == 0 || shpool->avail < size)
   3e6ae:	4602      	mov	r2, r0
   3e6b0:	b160      	cbz	r0, 3e6cc <rpmsg_virtio_shm_pool_get_buffer+0x1e>
   3e6b2:	b161      	cbz	r1, 3e6ce <rpmsg_virtio_shm_pool_get_buffer+0x20>
   3e6b4:	6843      	ldr	r3, [r0, #4]
   3e6b6:	428b      	cmp	r3, r1
   3e6b8:	d30b      	bcc.n	3e6d2 <rpmsg_virtio_shm_pool_get_buffer+0x24>
	buffer = (char *)shpool->base + shpool->size - shpool->avail;
   3e6ba:	6800      	ldr	r0, [r0, #0]
   3e6bc:	f8d2 c008 	ldr.w	ip, [r2, #8]
   3e6c0:	ebac 0c03 	sub.w	ip, ip, r3
   3e6c4:	4460      	add	r0, ip
	shpool->avail -= size;
   3e6c6:	1a5b      	subs	r3, r3, r1
   3e6c8:	6053      	str	r3, [r2, #4]
	return buffer;
   3e6ca:	4770      	bx	lr
   3e6cc:	4770      	bx	lr
		return NULL;
   3e6ce:	2000      	movs	r0, #0
   3e6d0:	4770      	bx	lr
   3e6d2:	2000      	movs	r0, #0
}
   3e6d4:	4770      	bx	lr

0003e6d6 <rpmsg_virtio_get_tx_buffer>:
{
   3e6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e6d8:	4605      	mov	r5, r0
   3e6da:	460f      	mov	r7, r1
   3e6dc:	4616      	mov	r6, r2
   3e6de:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
   3e6e2:	699b      	ldr	r3, [r3, #24]
	node = metal_list_first(&rvdev->reclaimer);
   3e6e4:	30b4      	adds	r0, #180	; 0xb4
	return list->next == list;
   3e6e6:	f8d5 40b4 	ldr.w	r4, [r5, #180]	; 0xb4
}

static inline struct metal_list *metal_list_first(struct metal_list *list)
{
	return metal_list_is_empty(list) ? NULL : list->next;
   3e6ea:	42a0      	cmp	r0, r4
   3e6ec:	d017      	beq.n	3e71e <rpmsg_virtio_get_tx_buffer+0x48>
	if (node) {
   3e6ee:	b1b4      	cbz	r4, 3e71e <rpmsg_virtio_get_tx_buffer+0x48>
	node->next->prev = node->prev;
   3e6f0:	6821      	ldr	r1, [r4, #0]
   3e6f2:	6862      	ldr	r2, [r4, #4]
   3e6f4:	604a      	str	r2, [r1, #4]
	node->prev->next = node->next;
   3e6f6:	6821      	ldr	r1, [r4, #0]
   3e6f8:	6011      	str	r1, [r2, #0]
	node->prev = node;
   3e6fa:	6064      	str	r4, [r4, #4]
	node->next = node;
   3e6fc:	6024      	str	r4, [r4, #0]
		if (role == RPMSG_HOST)
   3e6fe:	b913      	cbnz	r3, 3e706 <rpmsg_virtio_get_tx_buffer+0x30>
			*len = rvdev->config.h2r_buf_size;
   3e700:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
   3e704:	603a      	str	r2, [r7, #0]
		if (role == RPMSG_REMOTE) {
   3e706:	2b01      	cmp	r3, #1
   3e708:	d001      	beq.n	3e70e <rpmsg_virtio_get_tx_buffer+0x38>
}
   3e70a:	4620      	mov	r0, r4
   3e70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*idx = r_desc->idx;
   3e70e:	8921      	ldrh	r1, [r4, #8]
   3e710:	8031      	strh	r1, [r6, #0]
			*len = virtqueue_get_buffer_length(rvdev->svq, *idx);
   3e712:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   3e716:	f7ff fd55 	bl	3e1c4 <virtqueue_get_buffer_length>
   3e71a:	6038      	str	r0, [r7, #0]
   3e71c:	e7f5      	b.n	3e70a <rpmsg_virtio_get_tx_buffer+0x34>
	} else if (role == RPMSG_HOST) {
   3e71e:	b11b      	cbz	r3, 3e728 <rpmsg_virtio_get_tx_buffer+0x52>
	} else if (role == RPMSG_REMOTE) {
   3e720:	2b01      	cmp	r3, #1
   3e722:	d01c      	beq.n	3e75e <rpmsg_virtio_get_tx_buffer+0x88>
	void *data = NULL;
   3e724:	2400      	movs	r4, #0
	return data;
   3e726:	e7f0      	b.n	3e70a <rpmsg_virtio_get_tx_buffer+0x34>
		data = virtqueue_get_buffer(rvdev->svq, len, idx);
   3e728:	4632      	mov	r2, r6
   3e72a:	4639      	mov	r1, r7
   3e72c:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   3e730:	f7ff fd1f 	bl	3e172 <virtqueue_get_buffer>
		if (!data && rvdev->svq->vq_free_cnt) {
   3e734:	4604      	mov	r4, r0
   3e736:	2800      	cmp	r0, #0
   3e738:	d1e7      	bne.n	3e70a <rpmsg_virtio_get_tx_buffer+0x34>
   3e73a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
   3e73e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   3e740:	2b00      	cmp	r3, #0
   3e742:	d0e2      	beq.n	3e70a <rpmsg_virtio_get_tx_buffer+0x34>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
   3e744:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
   3e748:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
   3e74c:	f7ff ffaf 	bl	3e6ae <rpmsg_virtio_shm_pool_get_buffer>
   3e750:	4604      	mov	r4, r0
			*len = rvdev->config.h2r_buf_size;
   3e752:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
   3e756:	603b      	str	r3, [r7, #0]
			*idx = 0;
   3e758:	2300      	movs	r3, #0
   3e75a:	8033      	strh	r3, [r6, #0]
   3e75c:	e7d5      	b.n	3e70a <rpmsg_virtio_get_tx_buffer+0x34>
		data = virtqueue_get_available_buffer(rvdev->svq, idx, len);
   3e75e:	463a      	mov	r2, r7
   3e760:	4631      	mov	r1, r6
   3e762:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
   3e766:	f7ff fd32 	bl	3e1ce <virtqueue_get_available_buffer>
   3e76a:	4604      	mov	r4, r0
   3e76c:	e7cd      	b.n	3e70a <rpmsg_virtio_get_tx_buffer+0x34>

0003e76e <rpmsg_virtio_get_tx_payload_buffer>:
{
   3e76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3e772:	b082      	sub	sp, #8
   3e774:	4607      	mov	r7, r0
   3e776:	4688      	mov	r8, r1
   3e778:	4615      	mov	r5, r2
	return rvdev->vdev->func->get_status(rvdev->vdev);
   3e77a:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   3e77e:	6a03      	ldr	r3, [r0, #32]
   3e780:	681b      	ldr	r3, [r3, #0]
   3e782:	4798      	blx	r3
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK))
   3e784:	f010 0f04 	tst.w	r0, #4
   3e788:	d027      	beq.n	3e7da <rpmsg_virtio_get_tx_payload_buffer+0x6c>
	if (wait)
   3e78a:	b10d      	cbz	r5, 3e790 <rpmsg_virtio_get_tx_payload_buffer+0x22>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
   3e78c:	f643 2598 	movw	r5, #15000	; 0x3a98
		metal_mutex_acquire(&rdev->lock);
   3e790:	f107 0658 	add.w	r6, r7, #88	; 0x58
   3e794:	4630      	mov	r0, r6
   3e796:	f7ff fe9f 	bl	3e4d8 <__metal_mutex_acquire>
		rp_hdr = rpmsg_virtio_get_tx_buffer(rvdev, len, &idx);
   3e79a:	f10d 0206 	add.w	r2, sp, #6
   3e79e:	4641      	mov	r1, r8
   3e7a0:	4638      	mov	r0, r7
   3e7a2:	f7ff ff98 	bl	3e6d6 <rpmsg_virtio_get_tx_buffer>
   3e7a6:	4604      	mov	r4, r0
   3e7a8:	4630      	mov	r0, r6
   3e7aa:	f7f3 fb19 	bl	31de0 <z_impl_k_sem_give>
		if (rp_hdr || !tick_count)
   3e7ae:	b934      	cbnz	r4, 3e7be <rpmsg_virtio_get_tx_payload_buffer+0x50>
   3e7b0:	b12d      	cbz	r5, 3e7be <rpmsg_virtio_get_tx_payload_buffer+0x50>
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
	return __metal_sleep_usec(usec);
   3e7b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   3e7b6:	f7f1 fe55 	bl	30464 <__metal_sleep_usec>
		tick_count--;
   3e7ba:	3d01      	subs	r5, #1
		metal_mutex_acquire(&rdev->lock);
   3e7bc:	e7e8      	b.n	3e790 <rpmsg_virtio_get_tx_payload_buffer+0x22>
	if (!rp_hdr)
   3e7be:	b144      	cbz	r4, 3e7d2 <rpmsg_virtio_get_tx_payload_buffer+0x64>
	rp_hdr->reserved = idx;
   3e7c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   3e7c4:	60a3      	str	r3, [r4, #8]
	*len -= sizeof(struct rpmsg_hdr);
   3e7c6:	f8d8 3000 	ldr.w	r3, [r8]
   3e7ca:	3b10      	subs	r3, #16
   3e7cc:	f8c8 3000 	str.w	r3, [r8]
	return RPMSG_LOCATE_DATA(rp_hdr);
   3e7d0:	3410      	adds	r4, #16
}
   3e7d2:	4620      	mov	r0, r4
   3e7d4:	b002      	add	sp, #8
   3e7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   3e7da:	2400      	movs	r4, #0
   3e7dc:	e7f9      	b.n	3e7d2 <rpmsg_virtio_get_tx_payload_buffer+0x64>

0003e7de <rpmsg_virtio_init_shm_pool>:
	if (!shpool || !shb || size == 0)
   3e7de:	b120      	cbz	r0, 3e7ea <rpmsg_virtio_init_shm_pool+0xc>
   3e7e0:	b119      	cbz	r1, 3e7ea <rpmsg_virtio_init_shm_pool+0xc>
   3e7e2:	b112      	cbz	r2, 3e7ea <rpmsg_virtio_init_shm_pool+0xc>
	shpool->base = shb;
   3e7e4:	6001      	str	r1, [r0, #0]
	shpool->size = size;
   3e7e6:	6082      	str	r2, [r0, #8]
	shpool->avail = size;
   3e7e8:	6042      	str	r2, [r0, #4]
}
   3e7ea:	4770      	bx	lr

0003e7ec <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
   3e7ec:	b510      	push	{r4, lr}
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	if (rvdev) {
   3e7ee:	4604      	mov	r4, r0
   3e7f0:	b918      	cbnz	r0, 3e7fa <rpmsg_deinit_vdev+0xe>
   3e7f2:	e00a      	b.n	3e80a <rpmsg_deinit_vdev+0x1e>
		rdev = &rvdev->rdev;
		while (!metal_list_is_empty(&rdev->endpoints)) {
			node = rdev->endpoints.next;
			ept = metal_container_of(node, struct rpmsg_endpoint, node);
			rpmsg_destroy_ept(ept);
   3e7f4:	3834      	subs	r0, #52	; 0x34
   3e7f6:	f7ff fe3a 	bl	3e46e <rpmsg_destroy_ept>
	return list->next == list;
   3e7fa:	6820      	ldr	r0, [r4, #0]
		while (!metal_list_is_empty(&rdev->endpoints)) {
   3e7fc:	4284      	cmp	r4, r0
   3e7fe:	d1f9      	bne.n	3e7f4 <rpmsg_deinit_vdev+0x8>
		}

		rvdev->rvq = 0;
   3e800:	2300      	movs	r3, #0
   3e802:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		rvdev->svq = 0;
   3e806:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

		metal_mutex_deinit(&rdev->lock);
	}
}
   3e80a:	bd10      	pop	{r4, pc}

0003e80c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   3e80c:	b508      	push	{r3, lr}
  _DoInit();
   3e80e:	f7f1 ffdd 	bl	307cc <_DoInit>
}
   3e812:	bd08      	pop	{r3, pc}

0003e814 <rtt_init>:
{
   3e814:	b508      	push	{r3, lr}
	SEGGER_RTT_Init();
   3e816:	f7ff fff9 	bl	3e80c <SEGGER_RTT_Init>
}
   3e81a:	2000      	movs	r0, #0
   3e81c:	bd08      	pop	{r3, pc}

0003e81e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   3e81e:	b160      	cbz	r0, 3e83a <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   3e820:	68c3      	ldr	r3, [r0, #12]
   3e822:	785a      	ldrb	r2, [r3, #1]
   3e824:	f012 0f01 	tst.w	r2, #1
   3e828:	d003      	beq.n	3e832 <z_device_is_ready+0x14>
   3e82a:	781b      	ldrb	r3, [r3, #0]
   3e82c:	b11b      	cbz	r3, 3e836 <z_device_is_ready+0x18>
   3e82e:	2000      	movs	r0, #0
   3e830:	4770      	bx	lr
   3e832:	2000      	movs	r0, #0
   3e834:	4770      	bx	lr
   3e836:	2001      	movs	r0, #1
   3e838:	4770      	bx	lr
		return false;
   3e83a:	2000      	movs	r0, #0
}
   3e83c:	4770      	bx	lr

0003e83e <arch_system_halt>:
	__asm__ volatile(
   3e83e:	f04f 0220 	mov.w	r2, #32
   3e842:	f3ef 8311 	mrs	r3, BASEPRI
   3e846:	f382 8812 	msr	BASEPRI_MAX, r2
   3e84a:	f3bf 8f6f 	isb	sy
	for (;;) {
   3e84e:	e7fe      	b.n	3e84e <arch_system_halt+0x10>

0003e850 <z_early_memset>:
{
   3e850:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
   3e852:	f7f9 fe01 	bl	38458 <memset>
}
   3e856:	bd08      	pop	{r3, pc}

0003e858 <z_early_memcpy>:
{
   3e858:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
   3e85a:	f7f9 fdce 	bl	383fa <memcpy>
}
   3e85e:	bd08      	pop	{r3, pc}

0003e860 <k_heap_init>:
{
   3e860:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   3e862:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   3e866:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   3e868:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   3e86a:	f7d5 fef9 	bl	14660 <sys_heap_init>
}
   3e86e:	bd10      	pop	{r4, pc}

0003e870 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   3e870:	6902      	ldr	r2, [r0, #16]
   3e872:	6943      	ldr	r3, [r0, #20]
   3e874:	431a      	orrs	r2, r3
   3e876:	f012 0203 	ands.w	r2, r2, #3
   3e87a:	d10d      	bne.n	3e898 <create_free_list+0x28>
	slab->free_list = NULL;
   3e87c:	2100      	movs	r1, #0
   3e87e:	6181      	str	r1, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   3e880:	e005      	b.n	3e88e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   3e882:	6981      	ldr	r1, [r0, #24]
   3e884:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   3e886:	6183      	str	r3, [r0, #24]
		p += slab->block_size;
   3e888:	6901      	ldr	r1, [r0, #16]
   3e88a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   3e88c:	3201      	adds	r2, #1
   3e88e:	68c1      	ldr	r1, [r0, #12]
   3e890:	4291      	cmp	r1, r2
   3e892:	d8f6      	bhi.n	3e882 <create_free_list+0x12>
	return 0;
   3e894:	2000      	movs	r0, #0
   3e896:	4770      	bx	lr
		return -EINVAL;
   3e898:	f06f 0015 	mvn.w	r0, #21
}
   3e89c:	4770      	bx	lr

0003e89e <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   3e89e:	3207      	adds	r2, #7
   3e8a0:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   3e8a4:	f8c0 109c 	str.w	r1, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   3e8a8:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   3e8ac:	2300      	movs	r3, #0
   3e8ae:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
}
   3e8b2:	1888      	adds	r0, r1, r2
   3e8b4:	4770      	bx	lr

0003e8b6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3e8b6:	f3ef 8005 	mrs	r0, IPSR
}
   3e8ba:	3800      	subs	r0, #0
   3e8bc:	bf18      	it	ne
   3e8be:	2001      	movne	r0, #1
   3e8c0:	4770      	bx	lr

0003e8c2 <k_thread_name_get>:
}
   3e8c2:	3078      	adds	r0, #120	; 0x78
   3e8c4:	4770      	bx	lr

0003e8c6 <z_impl_k_thread_start>:
{
   3e8c6:	b508      	push	{r3, lr}
	z_sched_start(thread);
   3e8c8:	f7f4 fdfe 	bl	334c8 <z_sched_start>
}
   3e8cc:	bd08      	pop	{r3, pc}

0003e8ce <z_init_thread_base>:
{
   3e8ce:	b410      	push	{r4}
	thread_base->pended_on = NULL;
   3e8d0:	2400      	movs	r4, #0
   3e8d2:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   3e8d4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   3e8d6:	7342      	strb	r2, [r0, #13]
	thread_base->prio = priority;
   3e8d8:	7381      	strb	r1, [r0, #14]
	thread_base->sched_locked = 0U;
   3e8da:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   3e8dc:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   3e8de:	61c4      	str	r4, [r0, #28]
}
   3e8e0:	bc10      	pop	{r4}
   3e8e2:	4770      	bx	lr

0003e8e4 <z_pm_save_idle_exit>:
{
   3e8e4:	b508      	push	{r3, lr}
	pm_system_resume();
   3e8e6:	f7da f89f 	bl	18a28 <pm_system_resume>
	sys_clock_idle_exit();
   3e8ea:	f7fe fc58 	bl	3d19e <sys_clock_idle_exit>
}
   3e8ee:	bd08      	pop	{r3, pc}

0003e8f0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   3e8f0:	4288      	cmp	r0, r1
   3e8f2:	da00      	bge.n	3e8f6 <new_prio_for_inheritance+0x6>
   3e8f4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   3e8f6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   3e8fa:	db01      	blt.n	3e900 <new_prio_for_inheritance+0x10>
   3e8fc:	4608      	mov	r0, r1
   3e8fe:	4770      	bx	lr
   3e900:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   3e904:	4770      	bx	lr

0003e906 <adjust_owner_prio>:
{
   3e906:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   3e908:	6880      	ldr	r0, [r0, #8]
   3e90a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   3e90e:	428b      	cmp	r3, r1
   3e910:	d101      	bne.n	3e916 <adjust_owner_prio+0x10>
	return false;
   3e912:	2000      	movs	r0, #0
}
   3e914:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   3e916:	f7f4 ff6f 	bl	337f8 <z_set_prio>
   3e91a:	e7fb      	b.n	3e914 <adjust_owner_prio+0xe>

0003e91c <z_impl_k_mutex_init>:
{
   3e91c:	4603      	mov	r3, r0
	mutex->owner = NULL;
   3e91e:	2000      	movs	r0, #0
   3e920:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   3e922:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   3e924:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   3e926:	605b      	str	r3, [r3, #4]
}
   3e928:	4770      	bx	lr

0003e92a <sys_sflist_append>:
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e92a:	680b      	ldr	r3, [r1, #0]
   3e92c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e930:	600b      	str	r3, [r1, #0]
	return list->tail;
   3e932:	6842      	ldr	r2, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   3e934:	b132      	cbz	r2, 3e944 <sys_sflist_append+0x1a>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e936:	6813      	ldr	r3, [r2, #0]
   3e938:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e93c:	430b      	orrs	r3, r1
   3e93e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   3e940:	6041      	str	r1, [r0, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   3e942:	4770      	bx	lr
	list->tail = node;
   3e944:	6041      	str	r1, [r0, #4]
	list->head = node;
   3e946:	6001      	str	r1, [r0, #0]
}
   3e948:	4770      	bx	lr

0003e94a <sys_sflist_insert>:
Z_GENLIST_INSERT(sflist, sfnode)
   3e94a:	b508      	push	{r3, lr}
   3e94c:	b191      	cbz	r1, 3e974 <sys_sflist_insert+0x2a>
   3e94e:	468c      	mov	ip, r1
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   3e950:	680b      	ldr	r3, [r1, #0]
   3e952:	f023 0103 	bic.w	r1, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   3e956:	2b03      	cmp	r3, #3
   3e958:	d918      	bls.n	3e98c <sys_sflist_insert+0x42>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e95a:	6813      	ldr	r3, [r2, #0]
   3e95c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e960:	430b      	orrs	r3, r1
   3e962:	6013      	str	r3, [r2, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e964:	f8dc 3000 	ldr.w	r3, [ip]
   3e968:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e96c:	4313      	orrs	r3, r2
   3e96e:	f8cc 3000 	str.w	r3, [ip]
Z_GENLIST_INSERT(sflist, sfnode)
   3e972:	bd08      	pop	{r3, pc}
	return list->head;
   3e974:	6801      	ldr	r1, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e976:	6813      	ldr	r3, [r2, #0]
   3e978:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   3e97c:	430b      	orrs	r3, r1
   3e97e:	6013      	str	r3, [r2, #0]
	list->head = node;
   3e980:	6002      	str	r2, [r0, #0]
	return list->tail;
   3e982:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   3e984:	2b00      	cmp	r3, #0
   3e986:	d1f4      	bne.n	3e972 <sys_sflist_insert+0x28>
	list->tail = node;
   3e988:	6042      	str	r2, [r0, #4]
}
   3e98a:	e7f2      	b.n	3e972 <sys_sflist_insert+0x28>
Z_GENLIST_INSERT(sflist, sfnode)
   3e98c:	4611      	mov	r1, r2
   3e98e:	f7ff ffcc 	bl	3e92a <sys_sflist_append>
   3e992:	e7ee      	b.n	3e972 <sys_sflist_insert+0x28>

0003e994 <prepare_thread_to_run>:
{
   3e994:	b508      	push	{r3, lr}
   3e996:	2200      	movs	r2, #0
   3e998:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   3e99c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   3e99e:	f7f4 fd3f 	bl	33420 <z_ready_thread>
}
   3e9a2:	bd08      	pop	{r3, pc}

0003e9a4 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   3e9a4:	b160      	cbz	r0, 3e9c0 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   3e9a6:	6803      	ldr	r3, [r0, #0]
   3e9a8:	f013 0f03 	tst.w	r3, #3
   3e9ac:	d008      	beq.n	3e9c0 <z_queue_node_peek+0x1c>
{
   3e9ae:	b510      	push	{r4, lr}
		ret = anode->data;
   3e9b0:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   3e9b2:	b909      	cbnz	r1, 3e9b8 <z_queue_node_peek+0x14>
		ret = anode->data;
   3e9b4:	4620      	mov	r0, r4
}
   3e9b6:	bd10      	pop	{r4, pc}
			k_free(anode);
   3e9b8:	f000 fa47 	bl	3ee4a <k_free>
		ret = anode->data;
   3e9bc:	4620      	mov	r0, r4
   3e9be:	e7fa      	b.n	3e9b6 <z_queue_node_peek+0x12>
}
   3e9c0:	4770      	bx	lr

0003e9c2 <z_impl_k_queue_init>:
	list->head = NULL;
   3e9c2:	2300      	movs	r3, #0
   3e9c4:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   3e9c6:	6043      	str	r3, [r0, #4]
	queue->lock = (struct k_spinlock) {};
   3e9c8:	6083      	str	r3, [r0, #8]
   3e9ca:	f100 030c 	add.w	r3, r0, #12
	list->head = (sys_dnode_t *)list;
   3e9ce:	60c3      	str	r3, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   3e9d0:	6103      	str	r3, [r0, #16]
	sys_dlist_init(&queue->poll_events);
   3e9d2:	f100 0314 	add.w	r3, r0, #20
	list->head = (sys_dnode_t *)list;
   3e9d6:	6143      	str	r3, [r0, #20]
	list->tail = (sys_dnode_t *)list;
   3e9d8:	6183      	str	r3, [r0, #24]
}
   3e9da:	4770      	bx	lr

0003e9dc <k_queue_append>:
{
   3e9dc:	b500      	push	{lr}
   3e9de:	b083      	sub	sp, #12
   3e9e0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   3e9e2:	2301      	movs	r3, #1
   3e9e4:	9300      	str	r3, [sp, #0]
   3e9e6:	2300      	movs	r3, #0
   3e9e8:	4619      	mov	r1, r3
   3e9ea:	f7f3 f8e9 	bl	31bc0 <queue_insert>
}
   3e9ee:	b003      	add	sp, #12
   3e9f0:	f85d fb04 	ldr.w	pc, [sp], #4

0003e9f4 <k_queue_prepend>:
{
   3e9f4:	b500      	push	{lr}
   3e9f6:	b083      	sub	sp, #12
   3e9f8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   3e9fa:	2100      	movs	r1, #0
   3e9fc:	9100      	str	r1, [sp, #0]
   3e9fe:	460b      	mov	r3, r1
   3ea00:	f7f3 f8de 	bl	31bc0 <queue_insert>
}
   3ea04:	b003      	add	sp, #12
   3ea06:	f85d fb04 	ldr.w	pc, [sp], #4

0003ea0a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   3ea0a:	b15a      	cbz	r2, 3ea24 <z_impl_k_sem_init+0x1a>
   3ea0c:	428a      	cmp	r2, r1
   3ea0e:	d30c      	bcc.n	3ea2a <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   3ea10:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   3ea12:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   3ea14:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   3ea16:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   3ea18:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   3ea1c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   3ea1e:	6143      	str	r3, [r0, #20]
	return 0;
   3ea20:	2000      	movs	r0, #0
   3ea22:	4770      	bx	lr
		return -EINVAL;
   3ea24:	f06f 0015 	mvn.w	r0, #21
   3ea28:	4770      	bx	lr
   3ea2a:	f06f 0015 	mvn.w	r0, #21
}
   3ea2e:	4770      	bx	lr

0003ea30 <sys_slist_remove>:
Z_GENLIST_REMOVE(slist, snode)
   3ea30:	460b      	mov	r3, r1
   3ea32:	b139      	cbz	r1, 3ea44 <sys_slist_remove+0x14>
	return node->next;
   3ea34:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
   3ea36:	6019      	str	r1, [r3, #0]
	return list->tail;
   3ea38:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3ea3a:	428a      	cmp	r2, r1
   3ea3c:	d009      	beq.n	3ea52 <sys_slist_remove+0x22>
	parent->next = child;
   3ea3e:	2300      	movs	r3, #0
   3ea40:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   3ea42:	4770      	bx	lr
	return node->next;
   3ea44:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   3ea46:	6003      	str	r3, [r0, #0]
	return list->tail;
   3ea48:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   3ea4a:	428a      	cmp	r2, r1
   3ea4c:	d1f7      	bne.n	3ea3e <sys_slist_remove+0xe>
	list->tail = node;
   3ea4e:	6043      	str	r3, [r0, #4]
}
   3ea50:	e7f5      	b.n	3ea3e <sys_slist_remove+0xe>
	list->tail = node;
   3ea52:	6043      	str	r3, [r0, #4]
}
   3ea54:	e7f3      	b.n	3ea3e <sys_slist_remove+0xe>

0003ea56 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3ea56:	b508      	push	{r3, lr}
   3ea58:	460a      	mov	r2, r1
	return list->head;
   3ea5a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3ea5c:	2100      	movs	r1, #0
   3ea5e:	e001      	b.n	3ea64 <sys_slist_find_and_remove+0xe>
   3ea60:	4619      	mov	r1, r3
   3ea62:	681b      	ldr	r3, [r3, #0]
   3ea64:	b12b      	cbz	r3, 3ea72 <sys_slist_find_and_remove+0x1c>
   3ea66:	4293      	cmp	r3, r2
   3ea68:	d1fa      	bne.n	3ea60 <sys_slist_find_and_remove+0xa>
   3ea6a:	f7ff ffe1 	bl	3ea30 <sys_slist_remove>
   3ea6e:	2001      	movs	r0, #1
   3ea70:	e000      	b.n	3ea74 <sys_slist_find_and_remove+0x1e>
   3ea72:	2000      	movs	r0, #0
   3ea74:	bd08      	pop	{r3, pc}

0003ea76 <queue_remove_locked>:
{
   3ea76:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   3ea78:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   3ea7a:	f023 0204 	bic.w	r2, r3, #4
   3ea7e:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3ea80:	f013 0f04 	tst.w	r3, #4
   3ea84:	d100      	bne.n	3ea88 <queue_remove_locked+0x12>
}
   3ea86:	bd08      	pop	{r3, pc}
		(void)sys_slist_find_and_remove(&queue->pending, &work->node);
   3ea88:	30b8      	adds	r0, #184	; 0xb8
   3ea8a:	f7ff ffe4 	bl	3ea56 <sys_slist_find_and_remove>
}
   3ea8e:	e7fa      	b.n	3ea86 <queue_remove_locked+0x10>

0003ea90 <cancel_async_locked>:
{
   3ea90:	b510      	push	{r4, lr}
   3ea92:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   3ea94:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3ea96:	f013 0f02 	tst.w	r3, #2
   3ea9a:	d009      	beq.n	3eab0 <cancel_async_locked+0x20>
	return *flagp;
   3ea9c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   3ea9e:	f013 000f 	ands.w	r0, r3, #15
   3eaa2:	d004      	beq.n	3eaae <cancel_async_locked+0x1e>
	*flagp |= BIT(bit);
   3eaa4:	f043 0202 	orr.w	r2, r3, #2
   3eaa8:	60e2      	str	r2, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3eaaa:	f040 0002 	orr.w	r0, r0, #2
}
   3eaae:	bd10      	pop	{r4, pc}
		queue_remove_locked(work->queue, work);
   3eab0:	4601      	mov	r1, r0
   3eab2:	6880      	ldr	r0, [r0, #8]
   3eab4:	f7ff ffdf 	bl	3ea76 <queue_remove_locked>
   3eab8:	e7f0      	b.n	3ea9c <cancel_async_locked+0xc>

0003eaba <notify_queue_locked>:
	if (queue != NULL) {
   3eaba:	b130      	cbz	r0, 3eaca <notify_queue_locked+0x10>
{
   3eabc:	b508      	push	{r3, lr}
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   3eabe:	2200      	movs	r2, #0
   3eac0:	4611      	mov	r1, r2
   3eac2:	30c0      	adds	r0, #192	; 0xc0
   3eac4:	f7f5 fbd2 	bl	3426c <z_sched_wake>
}
   3eac8:	bd08      	pop	{r3, pc}
	bool rv = false;
   3eaca:	2000      	movs	r0, #0
}
   3eacc:	4770      	bx	lr

0003eace <z_reschedule_unlocked>:
{
   3eace:	b508      	push	{r3, lr}
   3ead0:	f04f 0320 	mov.w	r3, #32
   3ead4:	f3ef 8011 	mrs	r0, BASEPRI
   3ead8:	f383 8812 	msr	BASEPRI_MAX, r3
   3eadc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3eae0:	f000 f83d 	bl	3eb5e <z_reschedule_irqlock>
}
   3eae4:	bd08      	pop	{r3, pc}

0003eae6 <cancel_sync_locked>:
{
   3eae6:	b510      	push	{r4, lr}
   3eae8:	4602      	mov	r2, r0
	return (*flagp & BIT(bit)) != 0U;
   3eaea:	68c4      	ldr	r4, [r0, #12]
   3eaec:	f014 0f02 	tst.w	r4, #2
   3eaf0:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (ret) {
   3eaf4:	d101      	bne.n	3eafa <cancel_sync_locked+0x14>
}
   3eaf6:	4620      	mov	r0, r4
   3eaf8:	bd10      	pop	{r4, pc}
   3eafa:	4608      	mov	r0, r1
		init_work_cancel(canceller, work);
   3eafc:	4611      	mov	r1, r2
   3eafe:	f7f3 fb73 	bl	321e8 <init_work_cancel>
   3eb02:	e7f8      	b.n	3eaf6 <cancel_sync_locked+0x10>

0003eb04 <unschedule_locked>:
{
   3eb04:	b508      	push	{r3, lr}
	return (*flagp & BIT(bit)) != 0U;
   3eb06:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   3eb08:	f023 0208 	bic.w	r2, r3, #8
   3eb0c:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3eb0e:	f013 0f08 	tst.w	r3, #8
   3eb12:	d101      	bne.n	3eb18 <unschedule_locked+0x14>
	bool ret = false;
   3eb14:	2000      	movs	r0, #0
}
   3eb16:	bd08      	pop	{r3, pc}
		z_abort_timeout(&dwork->timeout);
   3eb18:	3010      	adds	r0, #16
   3eb1a:	f7f5 fd5b 	bl	345d4 <z_abort_timeout>
		ret = true;
   3eb1e:	2001      	movs	r0, #1
   3eb20:	e7f9      	b.n	3eb16 <unschedule_locked+0x12>

0003eb22 <cancel_delayable_async_locked>:
{
   3eb22:	b510      	push	{r4, lr}
   3eb24:	4604      	mov	r4, r0
	(void)unschedule_locked(dwork);
   3eb26:	f7ff ffed 	bl	3eb04 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3eb2a:	4620      	mov	r0, r4
   3eb2c:	f7ff ffb0 	bl	3ea90 <cancel_async_locked>
}
   3eb30:	bd10      	pop	{r4, pc}

0003eb32 <k_work_submit_to_queue>:
{
   3eb32:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   3eb34:	f7f3 fca0 	bl	32478 <z_work_submit_to_queue>
	if (ret > 0) {
   3eb38:	1e04      	subs	r4, r0, #0
   3eb3a:	dc01      	bgt.n	3eb40 <k_work_submit_to_queue+0xe>
}
   3eb3c:	4620      	mov	r0, r4
   3eb3e:	bd10      	pop	{r4, pc}
		z_reschedule_unlocked();
   3eb40:	f7ff ffc5 	bl	3eace <z_reschedule_unlocked>
	return ret;
   3eb44:	e7fa      	b.n	3eb3c <k_work_submit_to_queue+0xa>

0003eb46 <thread_active_elsewhere>:
}
   3eb46:	2000      	movs	r0, #0
   3eb48:	4770      	bx	lr

0003eb4a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   3eb4a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   3eb4e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   3eb52:	4283      	cmp	r3, r0
   3eb54:	d001      	beq.n	3eb5a <z_sched_prio_cmp+0x10>
		return b2 - b1;
   3eb56:	1ac0      	subs	r0, r0, r3
   3eb58:	4770      	bx	lr
	return 0;
   3eb5a:	2000      	movs	r0, #0
}
   3eb5c:	4770      	bx	lr

0003eb5e <z_reschedule_irqlock>:
{
   3eb5e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3eb60:	4603      	mov	r3, r0
   3eb62:	b928      	cbnz	r0, 3eb70 <z_reschedule_irqlock+0x12>
   3eb64:	f3ef 8205 	mrs	r2, IPSR
   3eb68:	b912      	cbnz	r2, 3eb70 <z_reschedule_irqlock+0x12>
   3eb6a:	f7da fc75 	bl	19458 <arch_swap>
	return ret;
   3eb6e:	e003      	b.n	3eb78 <z_reschedule_irqlock+0x1a>
	__asm__ volatile(
   3eb70:	f383 8811 	msr	BASEPRI, r3
   3eb74:	f3bf 8f6f 	isb	sy
}
   3eb78:	bd08      	pop	{r3, pc}

0003eb7a <z_reschedule_unlocked>:
{
   3eb7a:	b508      	push	{r3, lr}
	__asm__ volatile(
   3eb7c:	f04f 0320 	mov.w	r3, #32
   3eb80:	f3ef 8011 	mrs	r0, BASEPRI
   3eb84:	f383 8812 	msr	BASEPRI_MAX, r3
   3eb88:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3eb8c:	f7ff ffe7 	bl	3eb5e <z_reschedule_irqlock>
}
   3eb90:	bd08      	pop	{r3, pc}

0003eb92 <unpend_thread_no_timeout>:
{
   3eb92:	b510      	push	{r4, lr}
   3eb94:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   3eb96:	f7f4 f889 	bl	32cac <pended_on_thread>
   3eb9a:	4621      	mov	r1, r4
   3eb9c:	f7f4 fa44 	bl	33028 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   3eba0:	7b63      	ldrb	r3, [r4, #13]
   3eba2:	f023 0302 	bic.w	r3, r3, #2
   3eba6:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   3eba8:	2300      	movs	r3, #0
   3ebaa:	60a3      	str	r3, [r4, #8]
}
   3ebac:	bd10      	pop	{r4, pc}

0003ebae <z_priq_dumb_best>:
{
   3ebae:	4603      	mov	r3, r0
	return list->head == list;
   3ebb0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ebb2:	4283      	cmp	r3, r0
   3ebb4:	d000      	beq.n	3ebb8 <z_priq_dumb_best+0xa>
}
   3ebb6:	4770      	bx	lr
	struct k_thread *thread = NULL;
   3ebb8:	2000      	movs	r0, #0
	return thread;
   3ebba:	e7fc      	b.n	3ebb6 <z_priq_dumb_best+0x8>

0003ebbc <unpend_all>:
{
   3ebbc:	b538      	push	{r3, r4, r5, lr}
   3ebbe:	4605      	mov	r5, r0
	return list->head == list;
   3ebc0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ebc2:	42a5      	cmp	r5, r4
   3ebc4:	d00e      	beq.n	3ebe4 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3ebc6:	b16c      	cbz	r4, 3ebe4 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
   3ebc8:	4620      	mov	r0, r4
   3ebca:	f7ff ffe2 	bl	3eb92 <unpend_thread_no_timeout>
   3ebce:	f104 0018 	add.w	r0, r4, #24
   3ebd2:	f7f5 fcff 	bl	345d4 <z_abort_timeout>
   3ebd6:	2300      	movs	r3, #0
   3ebd8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
		ready_thread(thread);
   3ebdc:	4620      	mov	r0, r4
   3ebde:	f7f4 fbcd 	bl	3337c <ready_thread>
   3ebe2:	e7ed      	b.n	3ebc0 <unpend_all+0x4>
}
   3ebe4:	bd38      	pop	{r3, r4, r5, pc}

0003ebe6 <pend_locked>:
{
   3ebe6:	b570      	push	{r4, r5, r6, lr}
   3ebe8:	4604      	mov	r4, r0
   3ebea:	4616      	mov	r6, r2
   3ebec:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
   3ebee:	f7f4 fd43 	bl	33678 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
   3ebf2:	4632      	mov	r2, r6
   3ebf4:	462b      	mov	r3, r5
   3ebf6:	4620      	mov	r0, r4
   3ebf8:	f7f4 f8a4 	bl	32d44 <add_thread_timeout>
}
   3ebfc:	bd70      	pop	{r4, r5, r6, pc}

0003ebfe <z_unpend_all>:
{
   3ebfe:	b538      	push	{r3, r4, r5, lr}
   3ec00:	4605      	mov	r5, r0
	int need_sched = 0;
   3ec02:	2000      	movs	r0, #0
	return list->head == list;
   3ec04:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ec06:	42a5      	cmp	r5, r4
   3ec08:	d008      	beq.n	3ec1c <z_unpend_all+0x1e>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   3ec0a:	b13c      	cbz	r4, 3ec1c <z_unpend_all+0x1e>
		z_unpend_thread(thread);
   3ec0c:	4620      	mov	r0, r4
   3ec0e:	f7f4 fa2d 	bl	3306c <z_unpend_thread>
		z_ready_thread(thread);
   3ec12:	4620      	mov	r0, r4
   3ec14:	f7f4 fc04 	bl	33420 <z_ready_thread>
		need_sched = 1;
   3ec18:	2001      	movs	r0, #1
   3ec1a:	e7f3      	b.n	3ec04 <z_unpend_all+0x6>
}
   3ec1c:	bd38      	pop	{r3, r4, r5, pc}

0003ec1e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   3ec1e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   3ec20:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   3ec22:	6083      	str	r3, [r0, #8]
}
   3ec24:	4770      	bx	lr

0003ec26 <remove_timeout>:
{
   3ec26:	b510      	push	{r4, lr}
   3ec28:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   3ec2a:	f7f5 fbbf 	bl	343ac <next>
   3ec2e:	b148      	cbz	r0, 3ec44 <remove_timeout+0x1e>
   3ec30:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   3ec32:	6903      	ldr	r3, [r0, #16]
   3ec34:	6941      	ldr	r1, [r0, #20]
   3ec36:	6920      	ldr	r0, [r4, #16]
   3ec38:	181b      	adds	r3, r3, r0
   3ec3a:	6960      	ldr	r0, [r4, #20]
   3ec3c:	eb41 0100 	adc.w	r1, r1, r0
   3ec40:	6113      	str	r3, [r2, #16]
   3ec42:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   3ec44:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   3ec46:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   3ec48:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3ec4a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3ec4c:	2300      	movs	r3, #0
   3ec4e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   3ec50:	6063      	str	r3, [r4, #4]
}
   3ec52:	bd10      	pop	{r4, pc}

0003ec54 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   3ec54:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   3ec56:	f7f5 fe8d 	bl	34974 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3ec5a:	bd08      	pop	{r3, pc}

0003ec5c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
   3ec5c:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
   3ec5e:	f7f5 fe89 	bl	34974 <sys_clock_tick_get>
}
   3ec62:	bd08      	pop	{r3, pc}

0003ec64 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   3ec64:	b900      	cbnz	r0, 3ec68 <z_impl_k_busy_wait+0x4>
   3ec66:	4770      	bx	lr
{
   3ec68:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   3ec6a:	f7f7 fc1b 	bl	364a4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   3ec6e:	bd08      	pop	{r3, pc}

0003ec70 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   3ec70:	b538      	push	{r3, r4, r5, lr}
   3ec72:	460c      	mov	r4, r1
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3ec74:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   3ec78:	bf08      	it	eq
   3ec7a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   3ec7e:	d020      	beq.n	3ecc2 <sys_clock_timeout_end_calc+0x52>
   3ec80:	4605      	mov	r5, r0
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3ec82:	ea51 0300 	orrs.w	r3, r1, r0
   3ec86:	d009      	beq.n	3ec9c <sys_clock_timeout_end_calc+0x2c>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   3ec88:	f06f 0301 	mvn.w	r3, #1
   3ec8c:	1a18      	subs	r0, r3, r0
   3ec8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   3ec92:	eb63 0101 	sbc.w	r1, r3, r1
   3ec96:	2900      	cmp	r1, #0
   3ec98:	db03      	blt.n	3eca2 <sys_clock_timeout_end_calc+0x32>
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3ec9a:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   3ec9c:	f7f5 fe6a 	bl	34974 <sys_clock_tick_get>
   3eca0:	e7fb      	b.n	3ec9a <sys_clock_timeout_end_calc+0x2a>
		return sys_clock_tick_get() + MAX(1, dt);
   3eca2:	f7f5 fe67 	bl	34974 <sys_clock_tick_get>
   3eca6:	4603      	mov	r3, r0
   3eca8:	462a      	mov	r2, r5
   3ecaa:	46a4      	mov	ip, r4
   3ecac:	2d01      	cmp	r5, #1
   3ecae:	f174 0400 	sbcs.w	r4, r4, #0
   3ecb2:	da02      	bge.n	3ecba <sys_clock_timeout_end_calc+0x4a>
   3ecb4:	2201      	movs	r2, #1
   3ecb6:	f04f 0c00 	mov.w	ip, #0
   3ecba:	1898      	adds	r0, r3, r2
   3ecbc:	eb41 010c 	adc.w	r1, r1, ip
   3ecc0:	e7eb      	b.n	3ec9a <sys_clock_timeout_end_calc+0x2a>
		return UINT64_MAX;
   3ecc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3ecc6:	4601      	mov	r1, r0
   3ecc8:	e7e7      	b.n	3ec9a <sys_clock_timeout_end_calc+0x2a>

0003ecca <z_reschedule_unlocked>:
{
   3ecca:	b508      	push	{r3, lr}
   3eccc:	f04f 0320 	mov.w	r3, #32
   3ecd0:	f3ef 8011 	mrs	r0, BASEPRI
   3ecd4:	f383 8812 	msr	BASEPRI_MAX, r3
   3ecd8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3ecdc:	f7ff ff3f 	bl	3eb5e <z_reschedule_irqlock>
}
   3ece0:	bd08      	pop	{r3, pc}

0003ece2 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   3ece2:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   3ece4:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   3ece6:	2300      	movs	r3, #0
   3ece8:	6303      	str	r3, [r0, #48]	; 0x30
   3ecea:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   3ecee:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   3ecf0:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   3ecf2:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3ecf4:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   3ecf6:	6343      	str	r3, [r0, #52]	; 0x34
}
   3ecf8:	4770      	bx	lr

0003ecfa <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   3ecfa:	b510      	push	{r4, lr}
   3ecfc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   3ecfe:	f7f5 fc69 	bl	345d4 <z_abort_timeout>

	if (inactive) {
   3ed02:	b960      	cbnz	r0, 3ed1e <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
   3ed04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3ed06:	b10b      	cbz	r3, 3ed0c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   3ed08:	4620      	mov	r0, r4
   3ed0a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   3ed0c:	f104 0018 	add.w	r0, r4, #24
   3ed10:	f7f4 ff42 	bl	33b98 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   3ed14:	b118      	cbz	r0, 3ed1e <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
   3ed16:	f7f4 fb83 	bl	33420 <z_ready_thread>
			z_reschedule_unlocked();
   3ed1a:	f7ff ffd6 	bl	3ecca <z_reschedule_unlocked>
		}
	}
}
   3ed1e:	bd10      	pop	{r4, pc}

0003ed20 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3ed20:	b108      	cbz	r0, 3ed26 <poller_thread+0x6>
   3ed22:	3860      	subs	r0, #96	; 0x60
   3ed24:	4770      	bx	lr
}
   3ed26:	4770      	bx	lr

0003ed28 <add_event>:
{
   3ed28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ed2c:	4605      	mov	r5, r0
   3ed2e:	460e      	mov	r6, r1
	return list->head == list;
   3ed30:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   3ed32:	4298      	cmp	r0, r3
   3ed34:	d015      	beq.n	3ed62 <add_event+0x3a>
   3ed36:	4614      	mov	r4, r2
   3ed38:	6843      	ldr	r3, [r0, #4]
	if ((pending == NULL) ||
   3ed3a:	b193      	cbz	r3, 3ed62 <add_event+0x3a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3ed3c:	6898      	ldr	r0, [r3, #8]
   3ed3e:	f7ff ffef 	bl	3ed20 <poller_thread>
   3ed42:	4680      	mov	r8, r0
   3ed44:	4620      	mov	r0, r4
   3ed46:	f7ff ffeb 	bl	3ed20 <poller_thread>
   3ed4a:	4607      	mov	r7, r0
   3ed4c:	4601      	mov	r1, r0
   3ed4e:	4640      	mov	r0, r8
   3ed50:	f7ff fefb 	bl	3eb4a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3ed54:	2800      	cmp	r0, #0
   3ed56:	dc04      	bgt.n	3ed62 <add_event+0x3a>
	return list->head == list;
   3ed58:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3ed5a:	42a5      	cmp	r5, r4
   3ed5c:	d10f      	bne.n	3ed7e <add_event+0x56>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3ed5e:	2400      	movs	r4, #0
   3ed60:	e00d      	b.n	3ed7e <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   3ed62:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3ed64:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   3ed66:	6073      	str	r3, [r6, #4]
	tail->next = node;
   3ed68:	601e      	str	r6, [r3, #0]
	list->tail = node;
   3ed6a:	606e      	str	r6, [r5, #4]
}
   3ed6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *const prev = successor->prev;
   3ed70:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   3ed72:	6073      	str	r3, [r6, #4]
	node->next = successor;
   3ed74:	6034      	str	r4, [r6, #0]
	prev->next = node;
   3ed76:	601e      	str	r6, [r3, #0]
	successor->prev = node;
   3ed78:	6066      	str	r6, [r4, #4]
			return;
   3ed7a:	e7f7      	b.n	3ed6c <add_event+0x44>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3ed7c:	2400      	movs	r4, #0
   3ed7e:	b19c      	cbz	r4, 3eda8 <add_event+0x80>
		if (z_sched_prio_cmp(poller_thread(poller),
   3ed80:	68a0      	ldr	r0, [r4, #8]
   3ed82:	f7ff ffcd 	bl	3ed20 <poller_thread>
   3ed86:	4601      	mov	r1, r0
   3ed88:	4638      	mov	r0, r7
   3ed8a:	f7ff fede 	bl	3eb4a <z_sched_prio_cmp>
   3ed8e:	2800      	cmp	r0, #0
   3ed90:	dcee      	bgt.n	3ed70 <add_event+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3ed92:	4622      	mov	r2, r4
	return (node == list->tail) ? NULL : node->next;
   3ed94:	686b      	ldr	r3, [r5, #4]
   3ed96:	429c      	cmp	r4, r3
   3ed98:	d0f0      	beq.n	3ed7c <add_event+0x54>
   3ed9a:	6824      	ldr	r4, [r4, #0]
   3ed9c:	2c00      	cmp	r4, #0
   3ed9e:	d0ee      	beq.n	3ed7e <add_event+0x56>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   3eda0:	2a00      	cmp	r2, #0
   3eda2:	d1ec      	bne.n	3ed7e <add_event+0x56>
   3eda4:	4614      	mov	r4, r2
   3eda6:	e7ea      	b.n	3ed7e <add_event+0x56>
	sys_dnode_t *const tail = list->tail;
   3eda8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   3edaa:	6035      	str	r5, [r6, #0]
	node->prev = tail;
   3edac:	6073      	str	r3, [r6, #4]
	tail->next = node;
   3edae:	601e      	str	r6, [r3, #0]
	list->tail = node;
   3edb0:	606e      	str	r6, [r5, #4]
}
   3edb2:	e7db      	b.n	3ed6c <add_event+0x44>

0003edb4 <signal_triggered_work>:

extern int z_work_submit_to_queue(struct k_work_q *queue,
			 struct k_work *work);

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   3edb4:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   3edb6:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3edb8:	7823      	ldrb	r3, [r4, #0]
   3edba:	b173      	cbz	r3, 3edda <signal_triggered_work+0x26>
   3edbc:	f854 5c04 	ldr.w	r5, [r4, #-4]
   3edc0:	b15d      	cbz	r5, 3edda <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   3edc2:	f1a4 0614 	sub.w	r6, r4, #20
   3edc6:	f104 0014 	add.w	r0, r4, #20
   3edca:	f7f5 fc03 	bl	345d4 <z_abort_timeout>
		twork->poll_result = 0;
   3edce:	2300      	movs	r3, #0
   3edd0:	62e3      	str	r3, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   3edd2:	4631      	mov	r1, r6
   3edd4:	4628      	mov	r0, r5
   3edd6:	f7f3 fb4f 	bl	32478 <z_work_submit_to_queue>
	}

	return 0;
}
   3edda:	2000      	movs	r0, #0
   3eddc:	bd70      	pop	{r4, r5, r6, pc}

0003edde <signal_poll_event>:
{
   3edde:	b570      	push	{r4, r5, r6, lr}
   3ede0:	4604      	mov	r4, r0
   3ede2:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   3ede4:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   3ede6:	b1d6      	cbz	r6, 3ee1e <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   3ede8:	7873      	ldrb	r3, [r6, #1]
   3edea:	2b01      	cmp	r3, #1
   3edec:	d00d      	beq.n	3ee0a <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   3edee:	2b02      	cmp	r3, #2
   3edf0:	d012      	beq.n	3ee18 <signal_poll_event+0x3a>
		poller->is_polling = false;
   3edf2:	2000      	movs	r0, #0
   3edf4:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   3edf6:	2300      	movs	r3, #0
   3edf8:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   3edfa:	68e3      	ldr	r3, [r4, #12]
   3edfc:	f3c3 3286 	ubfx	r2, r3, #14, #7
   3ee00:	432a      	orrs	r2, r5
   3ee02:	f362 3394 	bfi	r3, r2, #14, #7
   3ee06:	60e3      	str	r3, [r4, #12]
}
   3ee08:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   3ee0a:	f7f6 f973 	bl	350f4 <signal_poller>
		poller->is_polling = false;
   3ee0e:	2300      	movs	r3, #0
   3ee10:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   3ee12:	4298      	cmp	r0, r3
   3ee14:	daef      	bge.n	3edf6 <signal_poll_event+0x18>
   3ee16:	e7f7      	b.n	3ee08 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   3ee18:	f7ff ffcc 	bl	3edb4 <signal_triggered_work>
   3ee1c:	e7f7      	b.n	3ee0e <signal_poll_event+0x30>
	int retcode = 0;
   3ee1e:	2000      	movs	r0, #0
   3ee20:	e7e9      	b.n	3edf6 <signal_poll_event+0x18>

0003ee22 <z_handle_obj_poll_events>:
{
   3ee22:	b508      	push	{r3, lr}
   3ee24:	4603      	mov	r3, r0
	return list->head == list;
   3ee26:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3ee28:	4283      	cmp	r3, r0
   3ee2a:	d008      	beq.n	3ee3e <z_handle_obj_poll_events+0x1c>
	sys_dnode_t *const prev = node->prev;
   3ee2c:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   3ee2e:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   3ee30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   3ee32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3ee34:	2300      	movs	r3, #0
   3ee36:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   3ee38:	6043      	str	r3, [r0, #4]
		(void) signal_poll_event(poll_event, state);
   3ee3a:	f7ff ffd0 	bl	3edde <signal_poll_event>
}
   3ee3e:	bd08      	pop	{r3, pc}

0003ee40 <z_impl_k_poll_signal_init>:
	list->head = (sys_dnode_t *)list;
   3ee40:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   3ee42:	6040      	str	r0, [r0, #4]
	sig->signaled = 0U;
   3ee44:	2300      	movs	r3, #0
   3ee46:	6083      	str	r3, [r0, #8]
}
   3ee48:	4770      	bx	lr

0003ee4a <k_free>:
	if (ptr != NULL) {
   3ee4a:	b130      	cbz	r0, 3ee5a <k_free+0x10>
{
   3ee4c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   3ee4e:	1f01      	subs	r1, r0, #4
   3ee50:	f850 0c04 	ldr.w	r0, [r0, #-4]
   3ee54:	f7f2 f956 	bl	31104 <k_heap_free>
}
   3ee58:	bd08      	pop	{r3, pc}
   3ee5a:	4770      	bx	lr

0003ee5c <k_malloc>:
{
   3ee5c:	b508      	push	{r3, lr}
   3ee5e:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   3ee60:	2004      	movs	r0, #4
   3ee62:	f7f6 fb9f 	bl	355a4 <k_aligned_alloc>
}
   3ee66:	bd08      	pop	{r3, pc}

0003ee68 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   3ee68:	4770      	bx	lr
	...
